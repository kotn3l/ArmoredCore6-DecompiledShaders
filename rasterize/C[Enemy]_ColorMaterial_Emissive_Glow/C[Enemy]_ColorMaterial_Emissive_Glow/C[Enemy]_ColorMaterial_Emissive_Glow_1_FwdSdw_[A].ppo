#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1284;
float _3992;
float _3993;
float _3994;
float _3995;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _264 = exp2(log2(_250.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    vec4 _280 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _284 = _280.z;
    float _293 = exp2(log2(_284 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    float _316 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(4.0) ? _317 : (isnan(_317) ? 4.0 : min(_317, 4.0));
    float _331 = floor(_318);
    vec4 _334 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _331));
    vec4 _358 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _369 = cbMtdParam._m0[9u].x * _358.x;
    float _370 = cbMtdParam._m0[9u].y * _358.y;
    float _371 = cbMtdParam._m0[9u].z * _358.z;
    float _378 = (((cbMtdParam._m0[10u].x * _334.x) - _369) * _295) + _369;
    float _379 = (((cbMtdParam._m0[10u].y * _334.y) - _370) * _295) + _370;
    float _380 = (((cbMtdParam._m0[10u].z * _334.z) - _371) * _295) + _371;
    float _386 = exp2(log2(_280.w) * cbMtdParam._m0[22u].w);
    vec4 _399 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _419 = (((cbMtdParam._m0[16u].x * _399.x) - _378) * _386) + _378;
    float _420 = (((cbMtdParam._m0[16u].y * _399.y) - _379) * _386) + _379;
    float _421 = (((cbMtdParam._m0[16u].z * _399.z) - _380) * _386) + _380;
    vec4 _434 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _459 = (_250.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _434.x) - _419) * _266) + _419);
    float _461 = (_250.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _434.y) - _420) * _266) + _420);
    float _463 = (_250.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _434.z) - _421) * _266) + _421);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].w;
    _187[0u] = cbMtdParam._m0[26u].x;
    _186[1u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _186[2u] = cbMtdParam._m0[27u].y;
    _187[2u] = cbMtdParam._m0[27u].z;
    _186[3u] = cbMtdParam._m0[26u].w;
    _187[3u] = cbMtdParam._m0[27u].x;
    _186[4u] = cbMtdParam._m0[26u].y;
    _187[4u] = cbMtdParam._m0[26u].z;
    float _503 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    uint _505 = uint(int(isnan(4.0) ? _503 : (isnan(_503) ? 4.0 : min(_503, 4.0))));
    float _512 = ((_187[_505] - cbMtdParam._m0[21u].z) * _295) + cbMtdParam._m0[21u].z;
    float _515 = ((cbMtdParam._m0[21u].w - _512) * _386) + _512;
    float _518 = ((cbMtdParam._m0[24u].y - _515) * _266) + _515;
    vec4 _534 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _331));
    vec4 _551 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _559 = cbMtdParam._m0[21u].x + _551.z;
    float _562 = (((_534.z + _186[_505]) - _559) * _295) + _559;
    vec4 _575 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _586 = (((_575.z - _562) + cbMtdParam._m0[25u].y) * _386) + _562;
    float _592 = ((((_284 * 2.0) * _586) - _586) * cbMtdParam._m0[23u].w) + _586;
    vec4 _605 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _616 = (((cbMtdParam._m0[22u].z + _605.z) - _592) * _266) + _592;
    vec4 _636 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _653 = ((_534.x - _553) * _295) + _553;
    float _654 = ((_534.y - _554) * _295) + _554;
    float _659 = ((_575.x - _653) * _386) + _653;
    float _660 = ((_575.y - _654) * _386) + _654;
    float _669 = ((((_605.x - _659) * _266) + _659) * 2.0) + (-1.0);
    float _670 = ((((_605.y - _660) * _266) + _660) * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _4044 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _676 = sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))));
    float _679 = (cbMtdParam._m0[24u].z * ((_280.x * 2.0) + (-1.0))) + _669;
    float _680 = (cbMtdParam._m0[24u].z * ((_280.y * 2.0) + (-1.0))) + _670;
    float _682 = gl_FragCoord.x * 0.125;
    float _684 = gl_FragCoord.y * 0.125;
    float _695 = fma(_676, _222 * NORMAL.x, fma(_680, _229 * TANGENT.x, (_215 * _207) * _679));
    float _698 = fma(_676, _222 * NORMAL.y, fma(_680, _229 * TANGENT.y, (_215 * _208) * _679));
    float _701 = fma(_676, _222 * NORMAL.z, fma(_680, _229 * TANGENT.z, (_215 * _209) * _679));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _4055 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _709 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4077 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4088 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4099 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _713 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_682, _684)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _773);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _773);
    float _785 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _773);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    vec4 _794 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_682, _684));
    float _796 = _794.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _966 = sqrt(((_783 * _783) + (_784 * _784)) + (_785 * _785));
        float _972 = (cbMatDynParam._m0[5u].x * _966) + cbMatDynParam._m0[5u].y;
        float _4110 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _977 = (cbMatDynParam._m0[5u].z * _966) + cbMatDynParam._m0[5u].w;
        float _4121 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) - _973)) + _973) < ((_796 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _807 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _808 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_708, cbSceneParam._m0[5u].z, fma(_707, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _706));
    float _829 = fma(_708, cbSceneParam._m0[6u].z, fma(_707, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _706));
    float _832 = fma(_708, cbSceneParam._m0[7u].z, fma(_707, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _706));
    uint _845 = uint(roundEven(NORMAL.w)) * 13u;
    uint _846 = _845 + 9u;
    uint _847 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_847].z;
    float _4132 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _859 = 1.0 - _713;
    float _860 = _856 * _859;
    float _861 = _857 * _859;
    float _862 = _858 * _859;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _713;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _713;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _713;
    float _870 = _867 + 0.039999999105930328369140625;
    float _872 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _807, cbSceneParam._m0[86u].y * _808));
    float _885 = _882.x * TEXCOORD_3.w;
    float _886 = dot(vec3(_706, _707, _708), vec3(_790, _791, _792));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _706) - _790;
    float _894 = (_889 * _707) - _791;
    float _895 = (_889 * _708) - _792;
    float _899 = abs(dot(vec3(_790, _791, _792), vec3(_706, _707, _708)));
    float _4165 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_709);
    float _912 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _918 = (1.0 - _912) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _919 = _912 * _901;
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _1012 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _1016 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1041 = _947 + _706;
        float _1042 = _951 + _707;
        float _1043 = _955 + _708;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_706, _707, _708), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4213 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_706, _707, _708), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4246 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_706, _707, _708), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4279 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1328 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1332 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1355 = _947 + _706;
        float _1356 = _951 + _707;
        float _1357 = _955 + _708;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_706, _707, _708), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4342 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_706, _707, _708), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4375 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_706, _707, _708), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4408 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1284;
        _1594 = _1284;
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = _1284;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1296)) + _1296;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1297)) + _1297;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1298)) + _1298;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _893 * 0.5;
    float _1662 = _894 * 0.5;
    float _1663 = _895 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _709);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1792 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1795 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1823 = frontier_phi_19_17_ladder;
        }
        float _1995;
        if (_1792 > 0.0)
        {
            _1995 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1995 = frontier_phi_28_24_ladder;
        }
        float _2290;
        if (_1795 > 0.0)
        {
            _2290 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2290 = frontier_phi_40_35_ladder;
        }
        float _2292 = isnan(_1995) ? _1823 : (isnan(_1823) ? _1995 : min(_1823, _1995));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1789) + _1778;
        float _2298 = (_2293 * _1792) + _1782;
        float _2299 = (_2293 * _1795) + _1786;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_18_40_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_18_40_ladder_2;
        _1813 = frontier_phi_18_40_ladder_1;
        _1815 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1730);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _709);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1888 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1891 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _2000;
        if (_1885 > 0.0)
        {
            _2000 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2000 = frontier_phi_30_26_ladder;
        }
        float _2317;
        if (_1888 > 0.0)
        {
            _2317 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2317 = frontier_phi_42_37_ladder;
        }
        float _2655;
        if (_1891 > 0.0)
        {
            _2655 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2655 = frontier_phi_52_49_ladder;
        }
        float _2657 = isnan(_2317) ? _2000 : (isnan(_2000) ? _2317 : min(_2000, _2317));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1885) + _1874;
        float _2663 = (_2658 * _1888) + _1878;
        float _2664 = (_2658 * _1891) + _1882;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_27_52_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_27_52_ladder_2;
        _1912 = frontier_phi_27_52_ladder_1;
        _1914 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1820);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1927 = (((_918 * _870) + _919) * _885) * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1929 = (((_918 * _872) + _919) * _885) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_918 * _873) + _919) * _885) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1987 = _1974 / _1986;
    float _1988 = _1978 / _1986;
    float _1989 = _1982 / _1986;
    float _2136;
    float _2137;
    float _2138;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2016 = ((uint(_1989 > cbSceneParam._m0[59u].y) + uint(_1989 > cbSceneParam._m0[59u].x)) + uint(_1989 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2017 = _2016 + 43u;
        uint _2025 = _2016 + 44u;
        uint _2033 = _2016 + 45u;
        uint _2041 = _2016 + 46u;
        float _2052 = fma(_1986, cbSceneParam._m0[_2017].w, fma(_1982, cbSceneParam._m0[_2017].z, fma(_1978, cbSceneParam._m0[_2017].y, _1974 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1986, cbSceneParam._m0[_2025].w, fma(_1982, cbSceneParam._m0[_2025].z, fma(_1978, cbSceneParam._m0[_2025].y, _1974 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1986, cbSceneParam._m0[_2041].w, fma(_1982, cbSceneParam._m0[_2041].z, fma(_1978, cbSceneParam._m0[_2041].y, _1974 * cbSceneParam._m0[_2041].x)));
        float _2069 = cbSceneParam._m0[33u].z * _2064;
        float _2071 = cbSceneParam._m0[33u].w * _2064;
        float _2074 = fma(_1986, cbSceneParam._m0[_2033].w, fma(_1982, cbSceneParam._m0[_2033].z, fma(_1978, cbSceneParam._m0[_2033].y, _1974 * cbSceneParam._m0[_2033].x))) / _2064;
        float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
        float _4534 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2129 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2052) / _2064, (_2071 + _2056) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2052) / _2064, (_2056 - _2069) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2069) / _2064, (_2056 - _2071) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2071) / _2064, (_2069 + _2056) / _2064), _2074), 0.0)).x), vec4(0.25)));
        _2136 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
        _2137 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
        _2138 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2136 = 1.0;
        _2137 = 1.0;
        _2138 = 1.0;
    }
    float _2202;
    float _2204;
    float _2206;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2190 = fma(_1986, cbSceneParam._m0[63u].w, fma(_1982, cbSceneParam._m0[63u].z, fma(_1978, cbSceneParam._m0[63u].y, _1974 * cbSceneParam._m0[63u].x)));
        float _2191 = fma(_1986, cbSceneParam._m0[60u].w, fma(_1982, cbSceneParam._m0[60u].z, fma(_1978, cbSceneParam._m0[60u].y, _1974 * cbSceneParam._m0[60u].x))) / _2190;
        float _2192 = fma(_1986, cbSceneParam._m0[61u].w, fma(_1982, cbSceneParam._m0[61u].z, fma(_1978, cbSceneParam._m0[61u].y, _1974 * cbSceneParam._m0[61u].x))) / _2190;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2191 >= cbSceneParam._m0[64u].x) && (_2192 >= cbSceneParam._m0[64u].y)) && (_2191 <= cbSceneParam._m0[64u].z)) && (_2192 <= cbSceneParam._m0[64u].w))
        {
            float _2330 = fma(_1986, cbSceneParam._m0[62u].w, fma(_1982, cbSceneParam._m0[62u].z, fma(_1978, cbSceneParam._m0[62u].y, _1974 * cbSceneParam._m0[62u].x))) / _2190;
            float _2334 = isnan(cbSceneParam._m0[41u].w) ? _2330 : (isnan(_2330) ? cbSceneParam._m0[41u].w : max(_2330, cbSceneParam._m0[41u].w));
            float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
            float _4550 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
            float _2384 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2191, cbSceneParam._m0[33u].w + _2192), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2191, _2192 - cbSceneParam._m0[33u].z), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].z, _2192 - cbSceneParam._m0[33u].w), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2192), _2334), 0.0)).x), vec4(0.25)));
            float _2388 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
            float _2389 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
            float _2390 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_39_38_ladder_1 = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_39_38_ladder_2 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
        }
        else
        {
            frontier_phi_39_38_ladder = _2138;
            frontier_phi_39_38_ladder_1 = _2137;
            frontier_phi_39_38_ladder_2 = _2136;
        }
        _2202 = frontier_phi_39_38_ladder_2;
        _2204 = frontier_phi_39_38_ladder_1;
        _2206 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2202 = _2136;
        _2204 = _2137;
        _2206 = _2138;
    }
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_845 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _885 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_706, _707, _708));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_706, _707, _708));
    float _4586 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4597 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2202) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2204) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2206) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2289)
    {
        _2391 = _2281;
        _2393 = _2282;
        _2395 = _2283;
    }
    else
    {
        uint _2399 = _2213 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4608 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2418 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2281;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2282;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2283;
    }
    bool _2398 = _2287.y == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2398)
    {
        _2453 = _2391;
        _2455 = _2393;
        _2457 = _2395;
    }
    else
    {
        uint _2626 = _2213 + 7u;
        float _2642 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2643 = _2642 * _2642;
        float _4624 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2644 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2645 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2453 = (((cbLight._m0[_2626].x * 0.3183098733425140380859375) * _2644) * _2645) + _2391;
        _2455 = (((cbLight._m0[_2626].y * 0.3183098733425140380859375) * _2644) * _2645) + _2393;
        _2457 = (((cbLight._m0[_2626].z * 0.3183098733425140380859375) * _2644) * _2645) + _2395;
    }
    uint _2460 = _2213 + 8u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _709) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2213].x + _790;
    float _2476 = cbLight._m0[_2213].y + _791;
    float _2477 = cbLight._m0[_2213].z + _792;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2213].xyz));
    float _4640 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _4651 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2489 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2490 = dot(vec3(_706, _707, _708), vec3(_2482, _2483, _2484));
    float _4662 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2482, _2483, _2484));
    float _4673 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2474 * _2474;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
    float _2511 = 0.959999978542327880859375 - _867;
    float _2513 = 0.959999978542327880859375 - _868;
    float _2514 = 0.959999978542327880859375 - _869;
    float _2521 = 1.0 - _2474;
    float _2532 = (0.5 / (((_2489 * ((_2488 * _2521) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2521) + _2474) * _2488))) * _2488;
    float _4684 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    uint _2548 = _2213 + 9u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _709) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2253].x + _790;
    float _2562 = cbLight._m0[_2253].y + _791;
    float _2563 = cbLight._m0[_2253].z + _792;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2253].xyz));
    float _4695 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2575 = dot(vec3(_706, _707, _708), vec3(_2568, _2569, _2570));
    float _4706 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2579 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2568, _2569, _2570));
    float _4717 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2583 = _2560 * _2560;
    float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
    float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2601 = 1.0 - _2560;
    float _2611 = (0.5 / (((_2489 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2601) + _2560) * _2574))) * _2574;
    float _4728 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
    float _2623 = (((((_2594 * _2511) + _870) * cbLight._m0[_2548].x) * _2613) * _2236) + ((((cbLight._m0[_2460].x * _2202) * ((_2510 * _2511) + _870)) * _2534) * _2249);
    float _2624 = (((((_2594 * _2513) + _872) * cbLight._m0[_2548].y) * _2613) * _2236) + ((((cbLight._m0[_2460].y * _2204) * ((_2510 * _2513) + _872)) * _2534) * _2249);
    float _2625 = (((((_2594 * _2514) + _873) * cbLight._m0[_2548].z) * _2613) * _2236) + ((((cbLight._m0[_2460].z * _2206) * ((_2510 * _2514) + _873)) * _2534) * _2249);
    float _2681;
    float _2683;
    float _2685;
    if (_2289)
    {
        _2681 = _2623;
        _2683 = _2624;
        _2685 = _2625;
    }
    else
    {
        uint _2687 = _2213 + 2u;
        uint _2691 = _2213 + 10u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _709) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _790;
        float _2708 = cbLight._m0[_2687].y + _791;
        float _2709 = cbLight._m0[_2687].z + _792;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2687].xyz));
        float _4739 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2721 = dot(vec3(_706, _707, _708), vec3(_2714, _2715, _2716));
        float _4750 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4761 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
        float _2747 = 1.0 - _2706;
        float _2757 = (0.5 / (((_2489 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2747) + _2706) * _2720))) * _2720;
        float _4772 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2681 = (((((_2740 * _2511) + _870) * cbLight._m0[_2691].x) * _2759) * _2760) + _2623;
        _2683 = (((((_2740 * _2513) + _872) * cbLight._m0[_2691].y) * _2759) * _2760) + _2624;
        _2685 = (((((_2740 * _2514) + _873) * cbLight._m0[_2691].z) * _2759) * _2760) + _2625;
    }
    float _2791;
    float _2793;
    float _2795;
    if (_2398)
    {
        _2791 = _2681;
        _2793 = _2683;
        _2795 = _2685;
    }
    else
    {
        uint _2802 = _2213 + 3u;
        uint _2806 = _2213 + 11u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _709) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _790;
        float _2823 = cbLight._m0[_2802].y + _791;
        float _2824 = cbLight._m0[_2802].z + _792;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2802].xyz));
        float _4788 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2836 = dot(vec3(_706, _707, _708), vec3(_2829, _2830, _2831));
        float _4799 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4810 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2489 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2862) + _2821) * _2835))) * _2835;
        float _4821 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2791 = (((((_2855 * _2511) + _870) * cbLight._m0[_2806].x) * _2874) * _2875) + _2681;
        _2793 = (((((_2855 * _2513) + _872) * cbLight._m0[_2806].y) * _2874) * _2875) + _2683;
        _2795 = (((((_2855 * _2514) + _873) * cbLight._m0[_2806].z) * _2874) * _2875) + _2685;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2211.y == 0u)
    {
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _808) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _807) / _2897)));
        float _2918 = (log2(_1989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
        }
        else
        {
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            uint _3211 = 0u;
            uint _3220;
            bool _3221;
            for (;;)
            {
                _3220 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                _3221 = _3220 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3221)
                {
                    frontier_phi_73_pred = _3210;
                    frontier_phi_73_pred_1 = _3209;
                    frontier_phi_73_pred_2 = _3208;
                    frontier_phi_73_pred_3 = _3207;
                    frontier_phi_73_pred_4 = _3206;
                    frontier_phi_73_pred_5 = _3205;
                }
                else
                {
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    uint _3356;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3220;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    for (;;)
                    {
                        uint _3360 = uint(findLSB(_3356)) + (_3211 << 5u);
                        uint _3357 = (_3356 + 4294967295u) & _3356;
                        uint _3362 = _3360 * 48u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3382 = (_3360 * 48u) + 4u;
                        vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3401 = (_3360 * 48u) + 8u;
                        vec3 _3412 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x));
                        float _3416 = _3376.x - _1987;
                        float _3417 = _3376.y - _1988;
                        float _3418 = _3376.z - _1989;
                        float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                        float _3422 = inversesqrt(_3419);
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3426 = dot(vec3(_826, _829, _832), vec3(_3423, _3424, _3425));
                        float _3431 = 1.0 - (_3419 * _3376.w);
                        float _4847 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3433 = sqrt(_3419) * _3395.w;
                        float _3436 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3426) + _3437;
                        float _3443 = _3433 * _3433;
                        float _3447 = ((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3432) / ((_3443 * 0.699999988079071044921875) + 1.0);
                        float _3451 = (-0.0) - _1987;
                        float _3452 = (-0.0) - _1988;
                        float _3453 = (-0.0) - _1989;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3467 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                        float _3468 = 1.0 - _901;
                        float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                        float _3476 = _3475 * _3475;
                        float _3477 = _3476 * _3476;
                        float _3478 = _3458 + _3423;
                        float _3479 = _3459 + _3424;
                        float _3480 = _3460 + _3425;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3488 = dot(vec3(_826, _829, _832), vec3(_3458, _3459, _3460));
                        float _4863 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3492 = dot(vec3(_826, _829, _832), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                        float _4874 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                        float _3500 = _3436 * _3476;
                        float _3501 = _3500 * _3500;
                        float _3504 = ((1.0 - _3501) * _3426) + _3501;
                        float _4885 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3506 = 1.0 - _3476;
                        float _3516 = (0.5 / (((_3505 * ((_3491 * _3506) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3476) * _3491))) * _3505;
                        float _4896 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3527 = (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3499 * _3499) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125))) * _3432;
                        _3280 = (_3447 * _3395.x) + _3353;
                        _3281 = (_3447 * _3395.y) + _3354;
                        _3282 = (_3447 * _3395.z) + _3355;
                        _3277 = (_3527 * _3412.x) + _3350;
                        _3278 = (_3527 * _3412.y) + _3351;
                        _3279 = (_3527 * _3412.z) + _3352;
                        if (_3357 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3357;
                        }
                    }
                    frontier_phi_73_pred = _3282;
                    frontier_phi_73_pred_1 = _3281;
                    frontier_phi_73_pred_2 = _3280;
                    frontier_phi_73_pred_3 = _3279;
                    frontier_phi_73_pred_4 = _3278;
                    frontier_phi_73_pred_5 = _3277;
                }
                _3054 = frontier_phi_73_pred;
                _3052 = frontier_phi_73_pred_1;
                _3050 = frontier_phi_73_pred_2;
                _3048 = frontier_phi_73_pred_3;
                _3046 = frontier_phi_73_pred_4;
                _3044 = frontier_phi_73_pred_5;
                uint _3212 = _3211 + 1u;
                if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3205 = _3044;
                    _3206 = _3046;
                    _3207 = _3048;
                    _3208 = _3050;
                    _3209 = _3052;
                    _3210 = _3054;
                    _3211 = _3212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
        }
        uvec4 _3057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3058 = _3057.z;
        uint _3060 = (_3058 >> 8u) & 15u;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((4294967295u << _3060) & _2928) == 0u)
        {
            _3173 = _3043;
            _3175 = _3045;
            _3177 = _3047;
            _3179 = _3049;
            _3181 = _3051;
            _3183 = _3053;
        }
        else
        {
            float _3198 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
            float _3199 = _3198 * _1987;
            float _3200 = _3198 * _1988;
            float _3201 = _3198 * _1989;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3060 < ((_3058 >> 12u) & 15u))
            {
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3333 = _3043;
                float _3334 = _3045;
                float _3335 = _3047;
                float _3336 = _3049;
                float _3337 = _3051;
                float _3338 = _3053;
                uint _3339 = _3060;
                uint _3348;
                bool _3349;
                for (;;)
                {
                    _3348 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                    _3349 = _3348 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3349)
                    {
                        frontier_phi_84_pred = _3338;
                        frontier_phi_84_pred_1 = _3337;
                        frontier_phi_84_pred_2 = _3336;
                        frontier_phi_84_pred_3 = _3335;
                        frontier_phi_84_pred_4 = _3334;
                        frontier_phi_84_pred_5 = _3333;
                    }
                    else
                    {
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        float _3556 = _3335;
                        float _3557 = _3336;
                        float _3558 = _3337;
                        float _3559 = _3338;
                        uint _3560 = _3348;
                        uint _3561;
                        vec4 _3586;
                        float _3587;
                        vec4 _3602;
                        vec3 _3614;
                        vec4 _3629;
                        vec4 _3644;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3571 = ((_3339 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3560));
                            _3561 = (_3560 + 4294967295u) & _3560;
                            uint _3573 = _3571 * 40u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3587 = _3586.w;
                            uint _3589 = (_3571 * 40u) + 4u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3571 * 40u) + 8u;
                            _3614 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x));
                            uint _3616 = (_3571 * 40u) + 16u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3571 * 40u) + 20u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3571 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3571 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_1989, _3678.z, fma(_1988, _3678.y, _3678.x * _1987)) + _3678.w;
                            _3691 = !((fma(_1989, _3659.z, fma(_1988, _3659.y, _3659.x * _1987)) + _3659.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3586.x - _1987;
                                float _3719 = _3586.y - _1988;
                                float _3720 = _3586.z - _1989;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3587 * _3587));
                                float _4907 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3736 = sqrt(_3721) * _3602.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_826, _829, _832))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_1989, _3629.z, fma(_1988, _3629.y, _3629.x * _1987)) + _3629.w) / _3690;
                                float _3750 = (fma(_1989, _3644.z, fma(_1988, _3644.y, _3644.x * _1987)) + _3644.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4923 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _901;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3199;
                                float _3780 = _3726 - _3200;
                                float _3781 = _3727 - _3201;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_826, _829, _832), vec3((-0.0) - _3199, (-0.0) - _3200, (-0.0) - _3201));
                                float _4934 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3793 = dot(vec3(_826, _829, _832), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4945 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_826, _829, _832), vec3(_3725, _3726, _3727))) + _3802;
                                float _4956 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4967 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3756 * _3602.z;
                                frontier_phi_90_pred_1 = _3756 * _3602.y;
                                frontier_phi_90_pred_2 = _3756 * _3602.x;
                                frontier_phi_90_pred_3 = _3830 * _3614.z;
                                frontier_phi_90_pred_4 = _3830 * _3614.y;
                                frontier_phi_90_pred_5 = _3830 * _3614.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3839 = frontier_phi_90_pred;
                            _3838 = frontier_phi_90_pred_1;
                            _3837 = frontier_phi_90_pred_2;
                            _3836 = frontier_phi_90_pred_3;
                            _3835 = frontier_phi_90_pred_4;
                            _3834 = frontier_phi_90_pred_5;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            if (_3561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3561;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3546;
                        frontier_phi_84_pred_1 = _3545;
                        frontier_phi_84_pred_2 = _3544;
                        frontier_phi_84_pred_3 = _3543;
                        frontier_phi_84_pred_4 = _3542;
                        frontier_phi_84_pred_5 = _3541;
                    }
                    _3184 = frontier_phi_84_pred;
                    _3182 = frontier_phi_84_pred_1;
                    _3180 = frontier_phi_84_pred_2;
                    _3178 = frontier_phi_84_pred_3;
                    _3176 = frontier_phi_84_pred_4;
                    _3174 = frontier_phi_84_pred_5;
                    uint _3340 = _3339 + 1u;
                    if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3333 = _3174;
                        _3334 = _3176;
                        _3335 = _3178;
                        _3336 = _3180;
                        _3337 = _3182;
                        _3338 = _3184;
                        _3339 = _3340;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3180;
                frontier_phi_65_66_ladder_1 = _3184;
                frontier_phi_65_66_ladder_2 = _3182;
                frontier_phi_65_66_ladder_3 = _3178;
                frontier_phi_65_66_ladder_4 = _3176;
                frontier_phi_65_66_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_65_66_ladder = _3049;
                frontier_phi_65_66_ladder_1 = _3053;
                frontier_phi_65_66_ladder_2 = _3051;
                frontier_phi_65_66_ladder_3 = _3047;
                frontier_phi_65_66_ladder_4 = _3045;
                frontier_phi_65_66_ladder_5 = _3043;
            }
            _3173 = frontier_phi_65_66_ladder_5;
            _3175 = frontier_phi_65_66_ladder_4;
            _3177 = frontier_phi_65_66_ladder_3;
            _3179 = frontier_phi_65_66_ladder;
            _3181 = frontier_phi_65_66_ladder_2;
            _3183 = frontier_phi_65_66_ladder_1;
        }
        float _3188 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2941 = (_3188 * _3179) + _2453;
        _2943 = (_3188 * _3181) + _2455;
        _2945 = (_3188 * _3183) + _2457;
        _2947 = ((_3173 * _870) * _3188) + _2791;
        _2949 = ((_3175 * _872) * _3188) + _2793;
        _2951 = ((_3177 * _873) * _3188) + _2795;
    }
    else
    {
        _2941 = _2453;
        _2943 = _2455;
        _2945 = _2457;
        _2947 = _2791;
        _2949 = _2793;
        _2951 = _2795;
    }
    uint _2957 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _2965 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _636.x) * cbInstanceData._m0[_2957].x;
    float _2968 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _636.y) * cbInstanceData._m0[_2957].y;
    float _2971 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _636.z) * cbInstanceData._m0[_2957].z;
    float _4983 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4994 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _5005 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2988 = (((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2941 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _885))) + ((_2947 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1719)) * cbPerFrame._m0[3u].x)) + _2965;
    float _2990 = (_2968 + ((_2949 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1719)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2943 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _885)));
    float _2992 = (_2971 + ((_2951 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1719)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_2945 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _885)));
    float _2993 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
    float _2994 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2995 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
    float _3001 = cbMtdParam._m0[2u].x * _2965;
    float _3002 = cbMtdParam._m0[2u].y * _2968;
    float _3003 = cbMtdParam._m0[2u].z * _2971;
    float _5031 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3005 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
    uint _3006 = _845 + 6u;
    float _3014 = _807 / cbSceneParam._m0[86u].x;
    float _3015 = _808 / cbSceneParam._m0[86u].y;
    vec4 _3029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3031 = _3029.x;
    float _3032 = _3029.y;
    float _3033 = _3029.z;
    float _3034 = _3029.w;
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _3068 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _3069 = _3068 / _733;
        float _3080 = _3069 * _783;
        float _3081 = _784 * _3069;
        float _3082 = (-0.0) - _3081;
        float _3084 = _3069 * _785;
        float _3086 = (cbSceneParam._m0[77u].w * _3082) / _3068;
        float _3087 = _3086 + cbSceneParam._m0[79u].w;
        float _3088 = cbSceneParam._m0[79u].w - _3081;
        float _3094 = sqrt(((_3080 * _3080) + (_3081 * _3081)) + (_3084 * _3084));
        float _3097 = (1.0 - (cbSceneParam._m0[77u].w / _3068)) * _3094;
        float _3102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3290;
        if (abs((_3082 - _3086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3290 = ((((_3087 > 0.0) ? exp2(_3102 * _3087) : (2.0 - exp2(_3104 * _3087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3097;
        }
        else
        {
            float _3234 = 1.0 / cbSceneParam._m0[80u].x;
            float _3235 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : max(_3087, _3088));
            float _3236 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : min(_3087, _3088));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            _3290 = ((abs(_3094 / _3082) * cbSceneParam._m0[80u].y) * ((((_3245 - _3246) * 2.0) - ((exp2(_3102 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0)))) - exp2(_3102 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))))) * _3234)) - ((exp2(_3104 * _3245) - exp2(_3104 * _3246)) * _3234))) + (_3097 * cbSceneParam._m0[80u].z);
        }
        vec4 _3292 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, 1.0), 0.0);
        float _3301 = exp2((_3290 * (-1.44269502162933349609375)) * (1.0 - _3292.w));
        float _3302 = log2(_3301);
        float _3318 = log2(_3034);
        _3106 = (exp2(_3318 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].x)) * _3292.x) / cbSceneParam._m0[78u].x)) + _3031;
        _3108 = (exp2(_3318 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].y)) * _3292.y) / cbSceneParam._m0[78u].y)) + _3032;
        _3110 = (exp2(_3318 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].z)) * _3292.z) / cbSceneParam._m0[78u].z)) + _3033;
        _3112 = _3301 * _3034;
    }
    else
    {
        _3106 = _3031;
        _3108 = _3032;
        _3110 = _3033;
        _3112 = _3034;
    }
    bool _3328;
    vec4 _3122;
    vec4 _3144;
    float _3146;
    float _3150;
    float _3151;
    float _3152;
    float _3155;
    float _3158;
    float _3161;
    float _3162;
    bool _3172;
    for (;;)
    {
        _3122 = cbMatDynParam._m0[0u];
        float _3124 = roundEven(_3122.y);
        bool _3125 = _3124 == 3.0;
        float _3126 = log2(_3112);
        float _3130 = exp2(_3126 * cbSceneParam._m0[78u].x);
        float _3131 = exp2(_3126 * cbSceneParam._m0[78u].y);
        float _3132 = exp2(_3126 * cbSceneParam._m0[78u].z);
        float _3133 = _3130 * _2993;
        float _3134 = _3131 * _2994;
        float _3135 = _3132 * _2995;
        float _3142 = _796 + (-0.5);
        _3144 = cbMtdParam._m0[1u];
        _3146 = _3144.y * _3142;
        float _3149 = (_3124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3150 = _3149 * (_3125 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3106)));
        _3151 = _3149 * (_3125 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3108)));
        _3152 = _3149 * (_3125 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3110)));
        _3155 = ((_3001 * _3005) * _3130) * _3149;
        _3158 = ((_3002 * _3005) * _3131) * _3149;
        _3161 = ((_3003 * _3005) * _3132) * _3149;
        _3162 = _3142 * 0.999000012874603271484375;
        _3172 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3172)
        {
            if ((cbInstanceData._m0[_845 + 7u].x + _3162) < 0.5)
            {
                _3328 = true;
                break;
            }
        }
        uint _3269 = _846 + uint(_3122.w);
        if ((cbInstanceData._m0[_3269].w < 1.0) && ((cbInstanceData._m0[_3269].w + _3162) < 0.5))
        {
            _3328 = true;
            break;
        }
        if ((_3146 + 1.0) < _3144.x)
        {
            _3328 = true;
            break;
        }
        _3328 = false;
        break;
    }
    float _3532;
    if (_3328)
    {
        discard_state = true;
        _3532 = 0.0;
    }
    else
    {
        _3532 = cbInstanceData._m0[_3006].w;
    }
    SV_Target.x = _3150;
    SV_Target.y = _3151;
    SV_Target.z = _3152;
    SV_Target.w = _3532;
    SV_Target_1.x = _3155;
    SV_Target_1.y = _3158;
    SV_Target_1.z = _3161;
    SV_Target_1.w = cbInstanceData._m0[_3006].w;
    discard_exit();
}


