#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1219;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _249 = log2(0.0);
    float _251 = exp2(_249 * cbMtdParam._m0[22u].x);
    float _252 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _253 = isnan(1.0) ? _252 : (isnan(_252) ? 1.0 : min(_252, 1.0));
    vec4 _267 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _271 = _267.z;
    float _280 = exp2(log2(_271 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _281 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _282 = isnan(1.0) ? _281 : (isnan(_281) ? 1.0 : min(_281, 1.0));
    float _303 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(4.0) ? _304 : (isnan(_304) ? 4.0 : min(_304, 4.0));
    float _318 = floor(_305);
    vec4 _321 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _318));
    vec4 _345 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _356 = cbMtdParam._m0[9u].x * _345.x;
    float _357 = cbMtdParam._m0[9u].y * _345.y;
    float _358 = cbMtdParam._m0[9u].z * _345.z;
    float _365 = (((cbMtdParam._m0[10u].x * _321.x) - _356) * _282) + _356;
    float _366 = (((cbMtdParam._m0[10u].y * _321.y) - _357) * _282) + _357;
    float _367 = (((cbMtdParam._m0[10u].z * _321.z) - _358) * _282) + _358;
    float _373 = exp2(log2(_267.w) * cbMtdParam._m0[22u].w);
    vec4 _386 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _406 = (((cbMtdParam._m0[16u].x * _386.x) - _365) * _373) + _365;
    float _407 = (((cbMtdParam._m0[16u].y * _386.y) - _366) * _373) + _366;
    float _408 = (((cbMtdParam._m0[16u].z * _386.z) - _367) * _373) + _367;
    vec4 _421 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _446 = (_239.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _421.x) - _406) * _253) + _406);
    float _448 = (_239.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _421.y) - _407) * _253) + _407);
    float _450 = (_239.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _421.z) - _408) * _253) + _408);
    float _178[5];
    float _179[5];
    _178[0u] = cbMtdParam._m0[25u].w;
    _179[0u] = cbMtdParam._m0[26u].x;
    _178[1u] = cbMtdParam._m0[27u].w;
    _179[1u] = cbMtdParam._m0[28u].x;
    _178[2u] = cbMtdParam._m0[27u].y;
    _179[2u] = cbMtdParam._m0[27u].z;
    _178[3u] = cbMtdParam._m0[26u].w;
    _179[3u] = cbMtdParam._m0[27u].x;
    _178[4u] = cbMtdParam._m0[26u].y;
    _179[4u] = cbMtdParam._m0[26u].z;
    float _490 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    uint _492 = uint(int(isnan(4.0) ? _490 : (isnan(_490) ? 4.0 : min(_490, 4.0))));
    float _499 = ((_179[_492] - cbMtdParam._m0[21u].z) * _282) + cbMtdParam._m0[21u].z;
    float _502 = ((cbMtdParam._m0[21u].w - _499) * _373) + _499;
    float _505 = ((cbMtdParam._m0[24u].y - _502) * _253) + _502;
    vec4 _521 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _318));
    vec4 _538 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _546 = cbMtdParam._m0[21u].x + _538.z;
    float _549 = (((_521.z + _178[_492]) - _546) * _282) + _546;
    vec4 _562 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _573 = (((_562.z - _549) + cbMtdParam._m0[25u].y) * _373) + _549;
    float _579 = ((((_271 * 2.0) * _573) - _573) * cbMtdParam._m0[23u].w) + _573;
    vec4 _592 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _603 = (((cbMtdParam._m0[22u].z + _592.z) - _579) * _253) + _579;
    vec4 _623 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _640 = ((_521.x - _540) * _282) + _540;
    float _641 = ((_521.y - _541) * _282) + _541;
    float _646 = ((_562.x - _640) * _373) + _640;
    float _647 = ((_562.y - _641) * _373) + _641;
    float _656 = ((((_592.x - _646) * _253) + _646) * 2.0) + (-1.0);
    float _657 = ((((_592.y - _647) * _253) + _647) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3631 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    float _666 = (cbMtdParam._m0[24u].z * ((_267.x * 2.0) + (-1.0))) + _656;
    float _667 = (cbMtdParam._m0[24u].z * ((_267.y * 2.0) + (-1.0))) + _657;
    float _670 = fma(_663, _214 * NORMAL.x, fma(_667, _221 * TANGENT.x, (_207 * _199) * _666));
    float _673 = fma(_663, _214 * NORMAL.y, fma(_667, _221 * TANGENT.y, (_207 * _200) * _666));
    float _676 = fma(_663, _214 * NORMAL.z, fma(_667, _221 * TANGENT.z, (_207 * _201) * _666));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _3642 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _684 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3664 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3675 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3686 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _688 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _704 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    float _769 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _770 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _788 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _791 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _794 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    uint _807 = uint(roundEven(NORMAL.w)) * 13u;
    uint _808 = _807 + 9u;
    uint _809 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_809].z;
    float _3697 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _821 = 1.0 - _688;
    float _822 = _818 * _821;
    float _823 = _819 * _821;
    float _824 = _820 * _821;
    float _829 = (_818 + (-0.039999999105930328369140625)) * _688;
    float _830 = (_819 + (-0.039999999105930328369140625)) * _688;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _688;
    float _832 = _829 + 0.039999999105930328369140625;
    float _834 = _830 + 0.039999999105930328369140625;
    float _835 = _831 + 0.039999999105930328369140625;
    vec4 _844 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _769, cbSceneParam._m0[86u].y * _770));
    float _847 = _844.x * TEXCOORD_3.w;
    float _848 = dot(vec3(_681, _682, _683), vec3(_761, _762, _763));
    float _851 = _848 * 2.0;
    float _855 = (_851 * _681) - _761;
    float _856 = (_851 * _682) - _762;
    float _857 = (_851 * _683) - _763;
    float _861 = abs(dot(vec3(_761, _762, _763), vec3(_681, _682, _683)));
    float _3730 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _863 = sqrt(_684);
    float _874 = exp2((_863 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_863 * 3.0));
    float _880 = (1.0 - _874) * ((_863 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _881 = _874 * _863;
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1218;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_917, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909));
        float _947 = fma(_917, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909));
        float _951 = fma(_917, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909));
        float _976 = _909 + _681;
        float _977 = _913 + _682;
        float _978 = _917 + _683;
        float _988 = fma(_978, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976)) - _943;
        float _989 = fma(_978, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976)) - _947;
        float _990 = fma(_978, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976)) - _951;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1046 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1012.x + (-0.5));
        float _1048 = _1046 * (_1012.y + (-0.5));
        float _1049 = _1046 * (_1012.z + (-0.5));
        float _1056 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1019.x + (-0.5));
        float _1058 = _1056 * (_1019.y + (-0.5));
        float _1059 = _1056 * (_1019.z + (-0.5));
        float _1066 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1026.x + (-0.5));
        float _1068 = _1066 * (_1026.y + (-0.5));
        float _1069 = _1066 * (_1026.z + (-0.5));
        float _1076 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1033.x + (-0.5));
        float _1078 = _1076 * (_1033.y + (-0.5));
        float _1079 = _1076 * (_1033.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1100 = (dot(vec3(_681, _682, _683), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1110 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3778 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1112 + 1.0))) + _1117) * _1080;
        float _1127 = _1048 * 0.5;
        float _1128 = _1058 * 0.5;
        float _1129 = _1068 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_681, _682, _683), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3811 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1154 + 1.0))) + _1159) * _1081;
        float _1169 = _1049 * 0.5;
        float _1170 = _1059 * 0.5;
        float _1171 = _1069 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_681, _682, _683), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3844 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1196 + 1.0))) + _1201) * _1082;
        _1218 = _1049;
        _1220 = _1048;
        _1221 = _1047;
        _1222 = _1059;
        _1223 = _1058;
        _1224 = _1057;
        _1225 = _1069;
        _1226 = _1068;
        _1227 = _1067;
        _1228 = _1082;
        _1229 = _1081;
        _1230 = _1080;
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _1219;
        _1220 = _1219;
        _1221 = _1219;
        _1222 = _1219;
        _1223 = _1219;
        _1224 = _1219;
        _1225 = _1219;
        _1226 = _1219;
        _1227 = _1219;
        _1228 = _1219;
        _1229 = _1219;
        _1230 = _1219;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_917, cbModelParam._m0[30u].z, fma(_913, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909));
        float _1263 = fma(_917, cbModelParam._m0[31u].z, fma(_913, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909));
        float _1267 = fma(_917, cbModelParam._m0[32u].z, fma(_913, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909));
        float _1290 = _909 + _681;
        float _1291 = _913 + _682;
        float _1292 = _917 + _683;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_681, _682, _683), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3907 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_681, _682, _683), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _3940 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_681, _682, _683), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _3973 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1219;
        _1529 = _1219;
        _1530 = _1219;
        _1531 = _1219;
        _1532 = _1219;
        _1533 = _1219;
        _1534 = _1219;
        _1535 = _1219;
        _1536 = _1219;
        _1537 = _1219;
        _1538 = _1219;
        _1539 = _1219;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1231)) + _1231;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1232)) + _1232;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1233)) + _1233;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _855 * 0.5;
    float _1597 = _856 * 0.5;
    float _1598 = _857 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1218, _1222, _1225, _1228));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _684);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_917, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_917, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_917, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_857, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855));
        float _1727 = fma(_857, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855));
        float _1730 = fma(_857, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1758 = frontier_phi_14_12_ladder;
        }
        float _1961;
        if (_1727 > 0.0)
        {
            _1961 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1961 = frontier_phi_23_19_ladder;
        }
        float _2215;
        if (_1730 > 0.0)
        {
            _2215 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2215 = frontier_phi_35_30_ladder;
        }
        float _2217 = isnan(_1961) ? _1758 : (isnan(_1758) ? _1961 : min(_1758, _1961));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1724) + _1713;
        float _2223 = (_2218 * _1727) + _1717;
        float _2224 = (_2218 * _1730) + _1721;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2225;
        float _2229 = _2225 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 > _2229) || ((_2223 < _2227) || ((_2222 < _2227) || (_2222 > _2229))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_13_35_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_13_35_ladder_2;
        _1748 = frontier_phi_13_35_ladder_1;
        _1750 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_855, _856, _857), _1665);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _684);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_917, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_917, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_917, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_857, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855));
        float _1823 = fma(_857, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855));
        float _1826 = fma(_857, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855));
        float _1966;
        if (_1820 > 0.0)
        {
            _1966 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1966 = frontier_phi_25_21_ladder;
        }
        float _2242;
        if (_1823 > 0.0)
        {
            _2242 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2242 = frontier_phi_37_32_ladder;
        }
        float _2455;
        if (_1826 > 0.0)
        {
            _2455 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2455 = frontier_phi_46_43_ladder;
        }
        float _2457 = isnan(_2242) ? _1966 : (isnan(_1966) ? _2242 : min(_1966, _2242));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1820) + _1809;
        float _2463 = (_2458 * _1823) + _1813;
        float _2464 = (_2458 * _1826) + _1817;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2465;
        float _2468 = _2465 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2464 > _2468) || ((_2464 < _2466) || ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 < _2466) || (_2462 > _2468))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2464, cbModelParam._m0[17u].z, fma(_2463, cbModelParam._m0[17u].y, _2462 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2464, cbModelParam._m0[18u].z, fma(_2463, cbModelParam._m0[18u].y, _2462 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2464, cbModelParam._m0[19u].z, fma(_2463, cbModelParam._m0[19u].y, _2462 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_22_46_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_22_46_ladder_2;
        _1847 = frontier_phi_22_46_ladder_1;
        _1849 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_855, _856, _857), _1755);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1862 = (((_880 * _832) + _881) * _847) * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1864 = (((_880 * _834) + _881) * _847) * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1866 = (((_880 * _835) + _881) * _847) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    uvec4 _1885 = floatBitsToUint(cbInstanceData._m0[_807 + 5u]);
    uint _1887 = _1885.x * 14u;
    uint _1888 = _1887 + 13u;
    float _1895 = _847 + (-1.0);
    float _1900 = (cbLight._m0[_1888].x * _1895) + 1.0;
    float _1901 = (cbLight._m0[_1888].y * _1895) + 1.0;
    float _1902 = (cbLight._m0[_1888].z * _1895) + 1.0;
    float _1903 = (cbLight._m0[_1888].w * _1895) + 1.0;
    uint _1904 = _1887 + 5u;
    float _1910 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1914 = _1887 + 4u;
    float _1920 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1924 = _1887 | 1u;
    float _1935 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_681, _682, _683));
    float _1938 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_681, _682, _683));
    float _4109 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _4120 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1943 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.3183098733425140380859375;
    float _1945 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.3183098733425140380859375;
    float _1952 = ((cbLight._m0[_1904].x * _1910) * _1945) + ((cbLight._m0[_1914].x * _1920) * _1943);
    float _1953 = ((_1910 * cbLight._m0[_1904].y) * _1945) + ((_1920 * cbLight._m0[_1914].y) * _1943);
    float _1954 = ((_1910 * cbLight._m0[_1904].z) * _1945) + ((_1920 * cbLight._m0[_1914].z) * _1943);
    uvec4 _1958 = floatBitsToUint(cbLight._m0[_1887 + 12u]);
    bool _1960 = _1958.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1960)
    {
        _1971 = _1952;
        _1973 = _1953;
        _1975 = _1954;
    }
    else
    {
        uint _1979 = _1887 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1887 + 2u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4131 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1998 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1952;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1953;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1954;
    }
    bool _1978 = _1958.y == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_1978)
    {
        _2016 = _1971;
        _2018 = _1973;
        _2020 = _1975;
    }
    else
    {
        uint _2186 = _1887 + 7u;
        float _2202 = (dot(vec3(cbLight._m0[_1887 + 3u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4147 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2205 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2016 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _1971;
        _2018 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _1973;
        _2020 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _1975;
    }
    uint _2023 = _1887 + 8u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _684) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1887].x + _761;
    float _2039 = cbLight._m0[_1887].y + _762;
    float _2040 = cbLight._m0[_1887].z + _763;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1887].xyz));
    float _4163 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2052 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2053 = dot(vec3(_681, _682, _683), vec3(_2045, _2046, _2047));
    float _4185 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2045, _2046, _2047));
    float _4196 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2037 * _2037;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2073 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
    float _2074 = 0.959999978542327880859375 - _829;
    float _2076 = 0.959999978542327880859375 - _830;
    float _2077 = 0.959999978542327880859375 - _831;
    float _2084 = 1.0 - _2037;
    float _2095 = (0.5 / (((_2052 * ((_2051 * _2084) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2084) + _2037) * _2051))) * _2051;
    float _4207 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    uint _2108 = _1887 + 9u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _684) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1924].x + _761;
    float _2122 = cbLight._m0[_1924].y + _762;
    float _2123 = cbLight._m0[_1924].z + _763;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1924].xyz));
    float _4218 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2135 = dot(vec3(_681, _682, _683), vec3(_2128, _2129, _2130));
    float _4229 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2128, _2129, _2130));
    float _4240 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2120 * _2120;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2154 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
    float _2161 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2052 * ((_2134 * _2161) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2161) + _2120) * _2134))) * _2134;
    float _4251 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    float _2183 = (((((_2154 * _2074) + _832) * cbLight._m0[_2108].x) * _2173) * _1910) + (((((_2073 * _2074) + _832) * cbLight._m0[_2023].x) * _2097) * _1920);
    float _2184 = (((((_2154 * _2076) + _834) * cbLight._m0[_2108].y) * _2173) * _1910) + (((((_2073 * _2076) + _834) * cbLight._m0[_2023].y) * _2097) * _1920);
    float _2185 = (((((_2154 * _2077) + _835) * cbLight._m0[_2108].z) * _2173) * _1910) + (((((_2073 * _2077) + _835) * cbLight._m0[_2023].z) * _2097) * _1920);
    float _2247;
    float _2249;
    float _2251;
    if (_1960)
    {
        _2247 = _2183;
        _2249 = _2184;
        _2251 = _2185;
    }
    else
    {
        uint _2253 = _1887 + 2u;
        uint _2257 = _1887 + 10u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _684) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _761;
        float _2274 = cbLight._m0[_2253].y + _762;
        float _2275 = cbLight._m0[_2253].z + _763;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2253].xyz));
        float _4262 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2287 = dot(vec3(_681, _682, _683), vec3(_2280, _2281, _2282));
        float _4273 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4284 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
        float _2313 = 1.0 - _2272;
        float _2323 = (0.5 / (((_2052 * ((_2286 * _2313) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2313) + _2272) * _2286))) * _2286;
        float _4295 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2247 = (((((_2306 * _2074) + _832) * cbLight._m0[_2257].x) * _2325) * _2326) + _2183;
        _2249 = (((((_2306 * _2076) + _834) * cbLight._m0[_2257].y) * _2325) * _2326) + _2184;
        _2251 = (((((_2306 * _2077) + _835) * cbLight._m0[_2257].z) * _2325) * _2326) + _2185;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_1978)
    {
        _2361 = _2247;
        _2363 = _2249;
        _2365 = _2251;
    }
    else
    {
        uint _2372 = _1887 + 3u;
        uint _2376 = _1887 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _684) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _761;
        float _2393 = cbLight._m0[_2372].y + _762;
        float _2394 = cbLight._m0[_2372].z + _763;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2372].xyz));
        float _4311 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2406 = dot(vec3(_681, _682, _683), vec3(_2399, _2400, _2401));
        float _4322 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4333 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
        float _2432 = 1.0 - _2391;
        float _2442 = (0.5 / (((_2052 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2432) + _2391) * _2405))) * _2405;
        float _4344 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2361 = (((((_2425 * _2074) + _832) * cbLight._m0[_2376].x) * _2444) * _2445) + _2247;
        _2363 = (((((_2425 * _2076) + _834) * cbLight._m0[_2376].y) * _2444) * _2445) + _2249;
        _2365 = (((((_2425 * _2077) + _835) * cbLight._m0[_2376].z) * _2444) * _2445) + _2251;
    }
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_1885.y == 0u)
    {
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2520;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2520;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2520;
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.x;
        uint _2547 = uint((float(_2535.y) * floor(float(uint(cbSceneParam._m0[85u].y * _770) / _2536))) + floor(float(uint(cbSceneParam._m0[85u].x * _769) / _2536)));
        float _2557 = (log2(_2523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2558 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        uint _2561 = uint(isnan(14.0) ? _2558 : (isnan(_2558) ? 14.0 : min(_2558, 14.0)));
        uvec4 _2566 = texelFetch(g_lightClusterGridBuffer, int(((_2561 << 2u) + (_2547 << 6u)) >> 2u));
        uint _2567 = _2566.x;
        uint _2568 = _2535.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2568 >> 4u) & 15u)) + 4294967295u) & _2567) == 0u) || ((_2568 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2873)
                {
                    frontier_phi_61_pred = _2857;
                    frontier_phi_61_pred_1 = _2862;
                    frontier_phi_61_pred_2 = _2861;
                    frontier_phi_61_pred_3 = _2860;
                    frontier_phi_61_pred_4 = _2859;
                    frontier_phi_61_pred_5 = _2858;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2872;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2863 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _2521;
                        float _3048 = _3007.y - _2522;
                        float _3049 = _3007.z - _2523;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_788, _791, _794), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4370 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _2521;
                        float _3083 = (-0.0) - _2522;
                        float _3084 = (-0.0) - _2523;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3099 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3100 = 1.0 - _863;
                        float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                        float _3108 = _3107 * _3107;
                        float _3109 = _3108 * _3108;
                        float _3110 = _3089 + _3054;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3120 = dot(vec3(_788, _791, _794), vec3(_3089, _3090, _3091));
                        float _4386 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3123 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3124 = dot(vec3(_788, _791, _794), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                        float _4397 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                        float _3132 = _3067 * _3108;
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3057) + _3133;
                        float _4408 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3138 = 1.0 - _3108;
                        float _3148 = (0.5 / (((_3137 * ((_3123 * _3138) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3108) * _3123))) * _3137;
                        float _4419 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3159 = (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3131 * _3131) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2916 = (_3078 * _3026.x) + _2984;
                        _2917 = (_3078 * _3026.y) + _2985;
                        _2918 = (_3078 * _3026.z) + _2986;
                        _2913 = (_3159 * _3043.x) + _2981;
                        _2914 = (_3159 * _3043.y) + _2982;
                        _2915 = (_3159 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_61_pred = _2913;
                    frontier_phi_61_pred_1 = _2918;
                    frontier_phi_61_pred_2 = _2917;
                    frontier_phi_61_pred_3 = _2916;
                    frontier_phi_61_pred_4 = _2915;
                    frontier_phi_61_pred_5 = _2914;
                }
                _2704 = frontier_phi_61_pred;
                _2714 = frontier_phi_61_pred_1;
                _2712 = frontier_phi_61_pred_2;
                _2710 = frontier_phi_61_pred_3;
                _2708 = frontier_phi_61_pred_4;
                _2706 = frontier_phi_61_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2704;
                    _2858 = _2706;
                    _2859 = _2708;
                    _2860 = _2710;
                    _2861 = _2712;
                    _2862 = _2714;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2720) & _2567) == 0u)
        {
            _2825 = _2703;
            _2827 = _2705;
            _2829 = _2707;
            _2831 = _2709;
            _2833 = _2711;
            _2835 = _2713;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
            float _2851 = _2850 * _2521;
            float _2852 = _2850 * _2522;
            float _2853 = _2850 * _2523;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2964 = _2703;
                float _2965 = _2705;
                float _2966 = _2707;
                float _2967 = _2709;
                float _2968 = _2711;
                float _2969 = _2713;
                uint _2970 = _2720;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2980)
                    {
                        frontier_phi_67_pred = _2967;
                        frontier_phi_67_pred_1 = _2968;
                        frontier_phi_67_pred_2 = _2969;
                        frontier_phi_67_pred_3 = _2966;
                        frontier_phi_67_pred_4 = _2965;
                        frontier_phi_67_pred_5 = _2964;
                    }
                    else
                    {
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3177 = _2964;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        uint _3183 = _2979;
                        uint _3184;
                        vec4 _3209;
                        float _3210;
                        vec4 _3225;
                        vec3 _3237;
                        vec4 _3252;
                        vec4 _3267;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3194 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3183));
                            _3184 = (_3183 + 4294967295u) & _3183;
                            uint _3196 = _3194 * 40u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3210 = _3209.w;
                            uint _3212 = (_3194 * 40u) + 4u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3194 * 40u) + 8u;
                            _3237 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x));
                            uint _3239 = (_3194 * 40u) + 16u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3194 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3194 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3194 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_2523, _3301.z, fma(_2522, _3301.y, _3301.x * _2521)) + _3301.w;
                            _3314 = !((fma(_2523, _3282.z, fma(_2522, _3282.y, _3282.x * _2521)) + _3282.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3209.x - _2521;
                                float _3342 = _3209.y - _2522;
                                float _3343 = _3209.z - _2523;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3210 * _3210));
                                float _4430 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3359 = sqrt(_3344) * _3225.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_788, _791, _794))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_2523, _3252.z, fma(_2522, _3252.y, _3252.x * _2521)) + _3252.w) / _3313;
                                float _3373 = (fma(_2523, _3267.z, fma(_2522, _3267.y, _3267.x * _2521)) + _3267.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4446 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _863;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2851;
                                float _3403 = _3349 - _2852;
                                float _3404 = _3350 - _2853;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_788, _791, _794), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4457 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3416 = dot(vec3(_788, _791, _794), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4468 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_788, _791, _794), vec3(_3348, _3349, _3350))) + _3425;
                                float _4479 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4490 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3453 * _3237.x;
                                frontier_phi_73_pred_1 = _3453 * _3237.y;
                                frontier_phi_73_pred_2 = _3379 * _3225.z;
                                frontier_phi_73_pred_3 = _3379 * _3225.y;
                                frontier_phi_73_pred_4 = _3379 * _3225.x;
                                frontier_phi_73_pred_5 = _3453 * _3237.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3457 = frontier_phi_73_pred;
                            _3458 = frontier_phi_73_pred_1;
                            _3462 = frontier_phi_73_pred_2;
                            _3461 = frontier_phi_73_pred_3;
                            _3460 = frontier_phi_73_pred_4;
                            _3459 = frontier_phi_73_pred_5;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            if (_3184 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3184;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3167;
                        frontier_phi_67_pred_1 = _3168;
                        frontier_phi_67_pred_2 = _3169;
                        frontier_phi_67_pred_3 = _3166;
                        frontier_phi_67_pred_4 = _3165;
                        frontier_phi_67_pred_5 = _3164;
                    }
                    _2832 = frontier_phi_67_pred;
                    _2834 = frontier_phi_67_pred_1;
                    _2836 = frontier_phi_67_pred_2;
                    _2830 = frontier_phi_67_pred_3;
                    _2828 = frontier_phi_67_pred_4;
                    _2826 = frontier_phi_67_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2826;
                        _2965 = _2828;
                        _2966 = _2830;
                        _2967 = _2832;
                        _2968 = _2834;
                        _2969 = _2836;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2834;
                frontier_phi_55_56_ladder_1 = _2836;
                frontier_phi_55_56_ladder_2 = _2832;
                frontier_phi_55_56_ladder_3 = _2830;
                frontier_phi_55_56_ladder_4 = _2828;
                frontier_phi_55_56_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            _2825 = frontier_phi_55_56_ladder_5;
            _2827 = frontier_phi_55_56_ladder_4;
            _2829 = frontier_phi_55_56_ladder_3;
            _2831 = frontier_phi_55_56_ladder_2;
            _2833 = frontier_phi_55_56_ladder;
            _2835 = frontier_phi_55_56_ladder_1;
        }
        float _2840 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2580 = (_2840 * _2831) + _2016;
        _2582 = (_2840 * _2833) + _2018;
        _2584 = (_2840 * _2835) + _2020;
        _2586 = ((_2825 * _832) * _2840) + _2361;
        _2588 = ((_2827 * _834) * _2840) + _2363;
        _2590 = ((_2829 * _835) * _2840) + _2365;
    }
    else
    {
        _2580 = _2016;
        _2582 = _2018;
        _2584 = _2020;
        _2586 = _2361;
        _2588 = _2363;
        _2590 = _2365;
    }
    uint _2596 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _2604 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _623.x) * cbInstanceData._m0[_2596].x;
    float _2607 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _623.y) * cbInstanceData._m0[_2596].y;
    float _2610 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _623.z) * cbInstanceData._m0[_2596].z;
    float _4506 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4517 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4528 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2627 = (((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2580 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _847))) + ((_2586 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1654)) * cbPerFrame._m0[3u].x)) + _2604;
    float _2629 = (_2607 + ((_2588 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1654)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2582 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _847)));
    float _2631 = (_2610 + ((_2590 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1654)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2584 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _847)));
    float _4554 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2644 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    uint _2645 = _807 + 6u;
    float _2653 = _769 / cbSceneParam._m0[86u].x;
    float _2654 = _770 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _704 : (isnan(_704) ? cbSceneParam._m0[77u].w : min(_704, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_704 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_704) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _704 : min(cbSceneParam._m0[80u].w, _704));
        float _2729 = _2728 / _704;
        float _2740 = _2729 * _754;
        float _2741 = _755 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2744 = _2729 * _756;
        float _2746 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2741;
        float _2754 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2926;
        if (abs((_2742 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2926 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2888 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2926 = ((abs(_2754 / _2742) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2764 * _2897) - exp2(_2764 * _2898)) * _2886))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2928 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2937 = exp2((_2926 * (-1.44269502162933349609375)) * (1.0 - _2928.w));
        float _2938 = log2(_2937);
        float _2954 = log2(_2673);
        _2766 = (exp2(_2954 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].x)) * _2928.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2768 = (exp2(_2954 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].y)) * _2928.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2770 = (exp2(_2954 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].z)) * _2928.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2772 = _2937 * _2673;
    }
    else
    {
        _2766 = _2670;
        _2768 = _2671;
        _2770 = _2672;
        _2772 = _2673;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2790 = exp2(_2786 * cbSceneParam._m0[78u].x);
    float _2791 = exp2(_2786 * cbSceneParam._m0[78u].y);
    float _2792 = exp2(_2786 * cbSceneParam._m0[78u].z);
    float _2793 = _2790 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0)));
    float _2794 = _2791 * (isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0)));
    float _2795 = _2792 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2645].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2604) * _2644) * _2790) * _2804;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2607) * _2644) * _2791) * _2804;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2610) * _2644) * _2792) * _2804;
    SV_Target_1.w = cbInstanceData._m0[_2645].w;
}


