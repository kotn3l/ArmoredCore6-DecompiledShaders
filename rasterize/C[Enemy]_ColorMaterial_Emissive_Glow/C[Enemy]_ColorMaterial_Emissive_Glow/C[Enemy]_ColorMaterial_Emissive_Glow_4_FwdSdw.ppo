#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1303;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _266 = exp2(log2(_252.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _295 = exp2(log2(_286 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _309 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _312 = _309.y;
    float _315 = (_309.x + (-0.02500000037252902984619140625)) * 8.0;
    float _319 = roundEven(5.0 - _315);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(4.0) ? _320 : (isnan(_320) ? 4.0 : min(_320, 4.0));
    float _334 = floor(_321);
    vec4 _337 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _334));
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[17u].x;
    _188[0u] = cbMtdParam._m0[17u].y;
    _189[0u] = cbMtdParam._m0[17u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[14u].x;
    _188[2u] = cbMtdParam._m0[14u].y;
    _189[2u] = cbMtdParam._m0[14u].z;
    _187[3u] = cbMtdParam._m0[13u].x;
    _188[3u] = cbMtdParam._m0[13u].y;
    _189[3u] = cbMtdParam._m0[13u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[18u].x;
    _188[5u] = cbMtdParam._m0[18u].y;
    _189[5u] = cbMtdParam._m0[18u].z;
    float _401 = roundEven(_315);
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    uint _404 = uint(int(isnan(5.0) ? _402 : (isnan(_402) ? 5.0 : min(_402, 5.0))));
    vec4 _434 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _445 = cbMtdParam._m0[9u].x * _434.x;
    float _446 = cbMtdParam._m0[9u].y * _434.y;
    float _447 = cbMtdParam._m0[9u].z * _434.z;
    float _454 = ((((((_187[_404] - cbMtdParam._m0[10u].x) * _312) + cbMtdParam._m0[10u].x) * _337.x) - _445) * _297) + _445;
    float _455 = ((((((_188[_404] - cbMtdParam._m0[10u].y) * _312) + cbMtdParam._m0[10u].y) * _337.y) - _446) * _297) + _446;
    float _456 = ((((((_189[_404] - cbMtdParam._m0[10u].z) * _312) + cbMtdParam._m0[10u].z) * _337.z) - _447) * _297) + _447;
    float _462 = exp2(log2(_282.w) * cbMtdParam._m0[22u].w);
    vec4 _475 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _495 = (((cbMtdParam._m0[16u].x * _475.x) - _454) * _462) + _454;
    float _496 = (((cbMtdParam._m0[16u].y * _475.y) - _455) * _462) + _455;
    float _497 = (((cbMtdParam._m0[16u].z * _475.z) - _456) * _462) + _456;
    vec4 _510 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _535 = (_252.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _510.x) - _495) * _268) + _495);
    float _537 = (_252.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _510.y) - _496) * _268) + _496);
    float _539 = (_252.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _510.z) - _497) * _268) + _497);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].w;
    _183[0u] = cbMtdParam._m0[26u].x;
    _182[1u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _182[2u] = cbMtdParam._m0[27u].y;
    _183[2u] = cbMtdParam._m0[27u].z;
    _182[3u] = cbMtdParam._m0[26u].w;
    _183[3u] = cbMtdParam._m0[27u].x;
    _182[4u] = cbMtdParam._m0[26u].y;
    _183[4u] = cbMtdParam._m0[26u].z;
    float _577 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    uint _579 = uint(int(isnan(4.0) ? _577 : (isnan(_577) ? 4.0 : min(_577, 4.0))));
    float _586 = ((_183[_579] - cbMtdParam._m0[21u].z) * _297) + cbMtdParam._m0[21u].z;
    float _589 = ((cbMtdParam._m0[21u].w - _586) * _462) + _586;
    float _592 = ((cbMtdParam._m0[24u].y - _589) * _268) + _589;
    vec4 _607 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _334));
    vec4 _624 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _632 = cbMtdParam._m0[21u].x + _624.z;
    float _635 = (((_607.z + _182[_579]) - _632) * _297) + _632;
    vec4 _648 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _659 = (((_648.z - _635) + cbMtdParam._m0[25u].y) * _462) + _635;
    float _665 = ((((_286 * 2.0) * _659) - _659) * cbMtdParam._m0[23u].w) + _659;
    vec4 _677 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _688 = (((cbMtdParam._m0[22u].z + _677.z) - _665) * _268) + _665;
    vec4 _707 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _724 = ((_607.x - _626) * _297) + _626;
    float _725 = ((_607.y - _627) * _297) + _627;
    float _730 = ((_648.x - _724) * _462) + _724;
    float _731 = ((_648.y - _725) * _462) + _725;
    float _740 = ((((_677.x - _730) * _268) + _730) * 2.0) + (-1.0);
    float _741 = ((((_677.y - _731) * _268) + _731) * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _4006 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))));
    float _750 = (cbMtdParam._m0[24u].z * ((_282.x * 2.0) + (-1.0))) + _740;
    float _751 = (cbMtdParam._m0[24u].z * ((_282.y * 2.0) + (-1.0))) + _741;
    float _754 = fma(_747, _224 * NORMAL.x, fma(_751, _231 * TANGENT.x, (_217 * _209) * _750));
    float _757 = fma(_747, _224 * NORMAL.y, fma(_751, _231 * TANGENT.y, (_217 * _210) * _750));
    float _760 = fma(_747, _224 * NORMAL.z, fma(_751, _231 * TANGENT.z, (_217 * _211) * _750));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _4017 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _768 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4039 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4050 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4061 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _772 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _788 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _838 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _828);
    float _839 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _828);
    float _840 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _828);
    float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
    float _845 = _838 * _844;
    float _846 = _839 * _844;
    float _847 = _840 * _844;
    float _853 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _854 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _872 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _875 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _878 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _891 = uint(roundEven(NORMAL.w)) * 13u;
    uint _892 = _891 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_893].z;
    float _4072 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _905 = 1.0 - _772;
    float _906 = _902 * _905;
    float _907 = _903 * _905;
    float _908 = _904 * _905;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _772;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _772;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _772;
    float _916 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _853, cbSceneParam._m0[86u].y * _854));
    float _931 = _928.x * TEXCOORD_3.w;
    float _932 = dot(vec3(_765, _766, _767), vec3(_845, _846, _847));
    float _935 = _932 * 2.0;
    float _939 = (_935 * _765) - _845;
    float _940 = (_935 * _766) - _846;
    float _941 = (_935 * _767) - _847;
    float _945 = abs(dot(vec3(_845, _846, _847), vec3(_765, _766, _767)));
    float _4105 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_768);
    float _958 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _964 = (1.0 - _958) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _965 = _958 * _947;
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1031 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1035 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1060 = _993 + _765;
        float _1061 = _997 + _766;
        float _1062 = _1001 + _767;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_765, _766, _767), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4153 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_765, _766, _767), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4186 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_765, _766, _767), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4219 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1347 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1351 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1374 = _993 + _765;
        float _1375 = _997 + _766;
        float _1376 = _1001 + _767;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_765, _766, _767), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4282 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_765, _766, _767), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4315 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_765, _766, _767), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4348 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1303;
        _1613 = _1303;
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = _1303;
        _1623 = _1303;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1315)) + _1315;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1317)) + _1317;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _939 * 0.5;
    float _1681 = _940 * 0.5;
    float _1682 = _941 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_941, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939));
        float _1810 = fma(_941, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939));
        float _1813 = fma(_941, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1841 = frontier_phi_14_12_ladder;
        }
        float _2012;
        if (_1810 > 0.0)
        {
            _2012 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2012 = frontier_phi_23_19_ladder;
        }
        float _2307;
        if (_1813 > 0.0)
        {
            _2307 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2307 = frontier_phi_35_30_ladder;
        }
        float _2309 = isnan(_2012) ? _1841 : (isnan(_1841) ? _2012 : min(_1841, _2012));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1807) + _1796;
        float _2315 = (_2310 * _1810) + _1800;
        float _2316 = (_2310 * _1813) + _1804;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2317;
        float _2321 = _2317 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 > _2321) || ((_2315 < _2319) || ((_2314 < _2319) || (_2314 > _2321))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_13_35_ladder = _2461.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2461.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2461.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_13_35_ladder_2;
        _1831 = frontier_phi_13_35_ladder_1;
        _1833 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_939, _940, _941), _1749);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1891 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1895 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1899 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1902 = fma(_941, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939));
        float _1905 = fma(_941, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939));
        float _1908 = fma(_941, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939));
        float _2017;
        if (_1902 > 0.0)
        {
            _2017 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2334;
        if (_1905 > 0.0)
        {
            _2334 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2334 = frontier_phi_37_32_ladder;
        }
        float _2672;
        if (_1908 > 0.0)
        {
            _2672 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2672 = frontier_phi_47_44_ladder;
        }
        float _2674 = isnan(_2334) ? _2017 : (isnan(_2017) ? _2334 : min(_2017, _2334));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1902) + _1891;
        float _2680 = (_2675 * _1905) + _1895;
        float _2681 = (_2675 * _1908) + _1899;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_22_47_ladder = _2803.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2803.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2803.x * cbModelParam._m0[1u].z;
        }
        _1927 = frontier_phi_22_47_ladder_2;
        _1929 = frontier_phi_22_47_ladder_1;
        _1931 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_939, _940, _941), _1838);
        _1927 = _1911.x * cbModelParam._m0[1u].z;
        _1929 = _1911.y * cbModelParam._m0[1u].z;
        _1931 = _1911.z * cbModelParam._m0[1u].z;
    }
    float _1944 = (((_964 * _916) + _965) * _931) * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1946 = (((_964 * _918) + _965) * _931) * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1948 = (((_964 * _919) + _965) * _931) * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1951 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1944 * cbSceneParam._m0[91u].x));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2004 = _1991 / _2003;
    float _2005 = _1995 / _2003;
    float _2006 = _1999 / _2003;
    float _2153;
    float _2154;
    float _2155;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2033 = ((uint(_2006 > cbSceneParam._m0[59u].y) + uint(_2006 > cbSceneParam._m0[59u].x)) + uint(_2006 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2034 = _2033 + 43u;
        uint _2042 = _2033 + 44u;
        uint _2050 = _2033 + 45u;
        uint _2058 = _2033 + 46u;
        float _2069 = fma(_2003, cbSceneParam._m0[_2034].w, fma(_1999, cbSceneParam._m0[_2034].z, fma(_1995, cbSceneParam._m0[_2034].y, _1991 * cbSceneParam._m0[_2034].x)));
        float _2073 = fma(_2003, cbSceneParam._m0[_2042].w, fma(_1999, cbSceneParam._m0[_2042].z, fma(_1995, cbSceneParam._m0[_2042].y, _1991 * cbSceneParam._m0[_2042].x)));
        float _2081 = fma(_2003, cbSceneParam._m0[_2058].w, fma(_1999, cbSceneParam._m0[_2058].z, fma(_1995, cbSceneParam._m0[_2058].y, _1991 * cbSceneParam._m0[_2058].x)));
        float _2086 = cbSceneParam._m0[33u].z * _2081;
        float _2088 = cbSceneParam._m0[33u].w * _2081;
        float _2091 = fma(_2003, cbSceneParam._m0[_2050].w, fma(_1999, cbSceneParam._m0[_2050].z, fma(_1995, cbSceneParam._m0[_2050].y, _1991 * cbSceneParam._m0[_2050].x))) / _2081;
        float _2139 = (cbSceneParam._m0[33u].x - sqrt(((_2005 * _2005) + (_2004 * _2004)) + (_2006 * _2006))) * cbSceneParam._m0[33u].y;
        float _4474 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2146 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2069) / _2081, (_2088 + _2073) / _2081), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2088 + _2069) / _2081, (_2073 - _2086) / _2081), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 - _2086) / _2081, (_2073 - _2088) / _2081), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 - _2088) / _2081, (_2086 + _2073) / _2081), _2091), 0.0)).x), vec4(0.25)));
        _2153 = 1.0 - (_2146 * cbSceneParam._m0[34u].x);
        _2154 = 1.0 - (_2146 * cbSceneParam._m0[34u].y);
        _2155 = 1.0 - (_2146 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2153 = 1.0;
        _2154 = 1.0;
        _2155 = 1.0;
    }
    float _2219;
    float _2221;
    float _2223;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2207 = fma(_2003, cbSceneParam._m0[63u].w, fma(_1999, cbSceneParam._m0[63u].z, fma(_1995, cbSceneParam._m0[63u].y, _1991 * cbSceneParam._m0[63u].x)));
        float _2208 = fma(_2003, cbSceneParam._m0[60u].w, fma(_1999, cbSceneParam._m0[60u].z, fma(_1995, cbSceneParam._m0[60u].y, _1991 * cbSceneParam._m0[60u].x))) / _2207;
        float _2209 = fma(_2003, cbSceneParam._m0[61u].w, fma(_1999, cbSceneParam._m0[61u].z, fma(_1995, cbSceneParam._m0[61u].y, _1991 * cbSceneParam._m0[61u].x))) / _2207;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2208 >= cbSceneParam._m0[64u].x) && (_2209 >= cbSceneParam._m0[64u].y)) && (_2208 <= cbSceneParam._m0[64u].z)) && (_2209 <= cbSceneParam._m0[64u].w))
        {
            float _2347 = fma(_2003, cbSceneParam._m0[62u].w, fma(_1999, cbSceneParam._m0[62u].z, fma(_1995, cbSceneParam._m0[62u].y, _1991 * cbSceneParam._m0[62u].x))) / _2207;
            float _2351 = isnan(cbSceneParam._m0[41u].w) ? _2347 : (isnan(_2347) ? cbSceneParam._m0[41u].w : max(_2347, cbSceneParam._m0[41u].w));
            float _2394 = (cbSceneParam._m0[33u].x - sqrt(((_2005 * _2005) + (_2004 * _2004)) + (_2006 * _2006))) * cbSceneParam._m0[33u].y;
            float _4490 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
            float _2401 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2208, cbSceneParam._m0[33u].w + _2209), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2208, _2209 - cbSceneParam._m0[33u].z), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2208 - cbSceneParam._m0[33u].z, _2209 - cbSceneParam._m0[33u].w), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2208 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2209), _2351), 0.0)).x), vec4(0.25)));
            float _2405 = 1.0 - (_2401 * cbSceneParam._m0[34u].x);
            float _2406 = 1.0 - (_2401 * cbSceneParam._m0[34u].y);
            float _2407 = 1.0 - (_2401 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2407) ? _2155 : (isnan(_2155) ? _2407 : min(_2155, _2407));
            frontier_phi_34_33_ladder_1 = isnan(_2406) ? _2154 : (isnan(_2154) ? _2406 : min(_2154, _2406));
            frontier_phi_34_33_ladder_2 = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
        }
        else
        {
            frontier_phi_34_33_ladder = _2155;
            frontier_phi_34_33_ladder_1 = _2154;
            frontier_phi_34_33_ladder_2 = _2153;
        }
        _2219 = frontier_phi_34_33_ladder_2;
        _2221 = frontier_phi_34_33_ladder_1;
        _2223 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2219 = _2153;
        _2221 = _2154;
        _2223 = _2155;
    }
    uvec4 _2228 = floatBitsToUint(cbInstanceData._m0[_891 + 5u]);
    uint _2230 = _2228.x * 14u;
    uint _2231 = _2230 + 13u;
    float _2238 = _931 + (-1.0);
    float _2243 = (cbLight._m0[_2231].x * _2238) + 1.0;
    float _2244 = (cbLight._m0[_2231].y * _2238) + 1.0;
    float _2245 = (cbLight._m0[_2231].z * _2238) + 1.0;
    float _2246 = (cbLight._m0[_2231].w * _2238) + 1.0;
    uint _2247 = _2230 + 5u;
    float _2253 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
    uint _2257 = _2230 + 4u;
    float _2266 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2270 = _2230 | 1u;
    float _2281 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_765, _766, _767));
    float _2284 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_765, _766, _767));
    float _4526 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _4537 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2289 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2291 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2298 = ((cbLight._m0[_2247].x * _2253) * _2291) + (((cbLight._m0[_2257].x * _2219) * _2266) * _2289);
    float _2299 = ((_2253 * cbLight._m0[_2247].y) * _2291) + (((cbLight._m0[_2257].y * _2221) * _2266) * _2289);
    float _2300 = ((_2253 * cbLight._m0[_2247].z) * _2291) + (((cbLight._m0[_2257].z * _2223) * _2266) * _2289);
    uvec4 _2304 = floatBitsToUint(cbLight._m0[_2230 + 12u]);
    bool _2306 = _2304.x == 0u;
    float _2408;
    float _2410;
    float _2412;
    if (_2306)
    {
        _2408 = _2298;
        _2410 = _2299;
        _2412 = _2300;
    }
    else
    {
        uint _2416 = _2230 + 6u;
        float _2432 = (dot(vec3(cbLight._m0[_2230 + 2u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4548 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2435 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2408 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2298;
        _2410 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2299;
        _2412 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2300;
    }
    bool _2415 = _2304.y == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2415)
    {
        _2470 = _2408;
        _2472 = _2410;
        _2474 = _2412;
    }
    else
    {
        uint _2643 = _2230 + 7u;
        float _2659 = (dot(vec3(cbLight._m0[_2230 + 3u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4564 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2662 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2470 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2408;
        _2472 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2410;
        _2474 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2412;
    }
    uint _2477 = _2230 + 8u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _768) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2230].x + _845;
    float _2493 = cbLight._m0[_2230].y + _846;
    float _2494 = cbLight._m0[_2230].z + _847;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2230].xyz));
    float _4580 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _4591 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2506 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2507 = dot(vec3(_765, _766, _767), vec3(_2499, _2500, _2501));
    float _4602 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2499, _2500, _2501));
    float _4613 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2491 * _2491;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2528 = 0.959999978542327880859375 - _913;
    float _2530 = 0.959999978542327880859375 - _914;
    float _2531 = 0.959999978542327880859375 - _915;
    float _2538 = 1.0 - _2491;
    float _2549 = (0.5 / (((_2506 * ((_2505 * _2538) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2538) + _2491) * _2505))) * _2505;
    float _4624 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    uint _2565 = _2230 + 9u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _768) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2270].x + _845;
    float _2579 = cbLight._m0[_2270].y + _846;
    float _2580 = cbLight._m0[_2270].z + _847;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2270].xyz));
    float _4635 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2592 = dot(vec3(_765, _766, _767), vec3(_2585, _2586, _2587));
    float _4646 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2585, _2586, _2587));
    float _4657 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2577 * _2577;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
    float _2618 = 1.0 - _2577;
    float _2628 = (0.5 / (((_2506 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2618) + _2577) * _2591))) * _2591;
    float _4668 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    float _2640 = (((((_2611 * _2528) + _916) * cbLight._m0[_2565].x) * _2630) * _2253) + ((((cbLight._m0[_2477].x * _2219) * ((_2527 * _2528) + _916)) * _2551) * _2266);
    float _2641 = (((((_2611 * _2530) + _918) * cbLight._m0[_2565].y) * _2630) * _2253) + ((((cbLight._m0[_2477].y * _2221) * ((_2527 * _2530) + _918)) * _2551) * _2266);
    float _2642 = (((((_2611 * _2531) + _919) * cbLight._m0[_2565].z) * _2630) * _2253) + ((((cbLight._m0[_2477].z * _2223) * ((_2527 * _2531) + _919)) * _2551) * _2266);
    float _2698;
    float _2700;
    float _2702;
    if (_2306)
    {
        _2698 = _2640;
        _2700 = _2641;
        _2702 = _2642;
    }
    else
    {
        uint _2704 = _2230 + 2u;
        uint _2708 = _2230 + 10u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _768) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _845;
        float _2725 = cbLight._m0[_2704].y + _846;
        float _2726 = cbLight._m0[_2704].z + _847;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2704].xyz));
        float _4679 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2738 = dot(vec3(_765, _766, _767), vec3(_2731, _2732, _2733));
        float _4690 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4701 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2764 = 1.0 - _2723;
        float _2774 = (0.5 / (((_2506 * ((_2737 * _2764) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2764) + _2723) * _2737))) * _2737;
        float _4712 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2698 = (((((_2757 * _2528) + _916) * cbLight._m0[_2708].x) * _2776) * _2777) + _2640;
        _2700 = (((((_2757 * _2530) + _918) * cbLight._m0[_2708].y) * _2776) * _2777) + _2641;
        _2702 = (((((_2757 * _2531) + _919) * cbLight._m0[_2708].z) * _2776) * _2777) + _2642;
    }
    float _2808;
    float _2810;
    float _2812;
    if (_2415)
    {
        _2808 = _2698;
        _2810 = _2700;
        _2812 = _2702;
    }
    else
    {
        uint _2819 = _2230 + 3u;
        uint _2823 = _2230 + 11u;
        float _2837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2819].w)) * _768) * 0.949999988079071044921875);
        float _2838 = _2837 * _2837;
        float _2839 = cbLight._m0[_2819].x + _845;
        float _2840 = cbLight._m0[_2819].y + _846;
        float _2841 = cbLight._m0[_2819].z + _847;
        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
        float _2846 = _2845 * _2839;
        float _2847 = _2845 * _2840;
        float _2848 = _2845 * _2841;
        float _2849 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2819].xyz));
        float _4728 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2853 = dot(vec3(_765, _766, _767), vec3(_2846, _2847, _2848));
        float _4739 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2857 = dot(vec3(cbLight._m0[_2819].xyz), vec3(_2846, _2847, _2848));
        float _4750 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2861 = _2838 * _2838;
        float _2865 = ((_2856 * _2856) * (_2861 + (-1.0))) + 1.0;
        float _2872 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
        float _2879 = 1.0 - _2838;
        float _2889 = (0.5 / (((_2506 * ((_2852 * _2879) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2879) + _2838) * _2852))) * _2852;
        float _4761 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2891 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2861 / ((_2865 * _2865) * 3.141590118408203125));
        float _2892 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2808 = (((((_2872 * _2528) + _916) * cbLight._m0[_2823].x) * _2891) * _2892) + _2698;
        _2810 = (((((_2872 * _2530) + _918) * cbLight._m0[_2823].y) * _2891) * _2892) + _2700;
        _2812 = (((((_2872 * _2531) + _919) * cbLight._m0[_2823].z) * _2891) * _2892) + _2702;
    }
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_2228.y == 0u)
    {
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.x;
        uint _2925 = uint((float(_2913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _854) / _2914))) + floor(float(uint(cbSceneParam._m0[85u].x * _853) / _2914)));
        float _2935 = (log2(_2006 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2936 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        uint _2939 = uint(isnan(14.0) ? _2936 : (isnan(_2936) ? 14.0 : min(_2936, 14.0)));
        uvec4 _2944 = texelFetch(g_lightClusterGridBuffer, int(((_2939 << 2u) + (_2925 << 6u)) >> 2u));
        uint _2945 = _2944.x;
        uint _2946 = _2913.z;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((((1u << ((_2946 >> 4u) & 15u)) + 4294967295u) & _2945) == 0u) || ((_2946 & 240u) == 0u))
        {
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
        }
        else
        {
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            uint _3220 = 0u;
            uint _3229;
            bool _3230;
            for (;;)
            {
                _3229 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                _3230 = _3229 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3230)
                {
                    frontier_phi_66_pred = _3219;
                    frontier_phi_66_pred_1 = _3218;
                    frontier_phi_66_pred_2 = _3217;
                    frontier_phi_66_pred_3 = _3216;
                    frontier_phi_66_pred_4 = _3215;
                    frontier_phi_66_pred_5 = _3214;
                }
                else
                {
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    uint _3344;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3229;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3348 = uint(findLSB(_3344)) + (_3220 << 5u);
                        uint _3345 = (_3344 + 4294967295u) & _3344;
                        uint _3350 = _3348 * 48u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3370 = (_3348 * 48u) + 4u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3389 = (_3348 * 48u) + 8u;
                        vec3 _3400 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x));
                        float _3404 = _3364.x - _2004;
                        float _3405 = _3364.y - _2005;
                        float _3406 = _3364.z - _2006;
                        float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                        float _3410 = inversesqrt(_3407);
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3414 = dot(vec3(_872, _875, _878), vec3(_3411, _3412, _3413));
                        float _3419 = 1.0 - (_3407 * _3364.w);
                        float _4787 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3421 = sqrt(_3407) * _3383.w;
                        float _3424 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3414) + _3425;
                        float _3431 = _3421 * _3421;
                        float _3435 = ((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3420) / ((_3431 * 0.699999988079071044921875) + 1.0);
                        float _3439 = (-0.0) - _2004;
                        float _3440 = (-0.0) - _2005;
                        float _3441 = (-0.0) - _2006;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3455 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                        float _3456 = 1.0 - _947;
                        float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                        float _3464 = _3463 * _3463;
                        float _3465 = _3464 * _3464;
                        float _3466 = _3446 + _3411;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3476 = dot(vec3(_872, _875, _878), vec3(_3446, _3447, _3448));
                        float _4803 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3480 = dot(vec3(_872, _875, _878), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                        float _4814 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                        float _3488 = _3424 * _3464;
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3414) + _3489;
                        float _4825 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3494 = 1.0 - _3464;
                        float _3504 = (0.5 / (((_3493 * ((_3479 * _3494) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3464) * _3479))) * _3493;
                        float _4836 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3515 = (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3487 * _3487) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125))) * _3420;
                        _3273 = (_3435 * _3383.x) + _3341;
                        _3274 = (_3435 * _3383.y) + _3342;
                        _3275 = (_3435 * _3383.z) + _3343;
                        _3270 = (_3515 * _3400.x) + _3338;
                        _3271 = (_3515 * _3400.y) + _3339;
                        _3272 = (_3515 * _3400.z) + _3340;
                        if (_3345 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3345;
                        }
                    }
                    frontier_phi_66_pred = _3275;
                    frontier_phi_66_pred_1 = _3274;
                    frontier_phi_66_pred_2 = _3273;
                    frontier_phi_66_pred_3 = _3272;
                    frontier_phi_66_pred_4 = _3271;
                    frontier_phi_66_pred_5 = _3270;
                }
                _3071 = frontier_phi_66_pred;
                _3069 = frontier_phi_66_pred_1;
                _3067 = frontier_phi_66_pred_2;
                _3065 = frontier_phi_66_pred_3;
                _3063 = frontier_phi_66_pred_4;
                _3061 = frontier_phi_66_pred_5;
                uint _3221 = _3220 + 1u;
                if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3214 = _3061;
                    _3215 = _3063;
                    _3216 = _3065;
                    _3217 = _3067;
                    _3218 = _3069;
                    _3219 = _3071;
                    _3220 = _3221;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
        }
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.z;
        uint _3077 = (_3075 >> 8u) & 15u;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((4294967295u << _3077) & _2945) == 0u)
        {
            _3182 = _3060;
            _3184 = _3062;
            _3186 = _3064;
            _3188 = _3066;
            _3190 = _3068;
            _3192 = _3070;
        }
        else
        {
            float _3207 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
            float _3208 = _3207 * _2004;
            float _3209 = _3207 * _2005;
            float _3210 = _3207 * _2006;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3077 < ((_3075 >> 12u) & 15u))
            {
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3321 = _3060;
                float _3322 = _3062;
                float _3323 = _3064;
                float _3324 = _3066;
                float _3325 = _3068;
                float _3326 = _3070;
                uint _3327 = _3077;
                uint _3336;
                bool _3337;
                for (;;)
                {
                    _3336 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                    _3337 = _3336 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3337)
                    {
                        frontier_phi_72_pred = _3326;
                        frontier_phi_72_pred_1 = _3325;
                        frontier_phi_72_pred_2 = _3324;
                        frontier_phi_72_pred_3 = _3323;
                        frontier_phi_72_pred_4 = _3322;
                        frontier_phi_72_pred_5 = _3321;
                    }
                    else
                    {
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3533 = _3321;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        float _3536 = _3324;
                        float _3537 = _3325;
                        float _3538 = _3326;
                        uint _3539 = _3336;
                        uint _3540;
                        vec4 _3565;
                        float _3566;
                        vec4 _3581;
                        vec3 _3593;
                        vec4 _3608;
                        vec4 _3623;
                        float _3669;
                        bool _3670;
                        for (;;)
                        {
                            uint _3550 = ((_3327 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3539));
                            _3540 = (_3539 + 4294967295u) & _3539;
                            uint _3552 = _3550 * 40u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3566 = _3565.w;
                            uint _3568 = (_3550 * 40u) + 4u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3550 * 40u) + 8u;
                            _3593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x));
                            uint _3595 = (_3550 * 40u) + 16u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3550 * 40u) + 20u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3550 * 40u) + 24u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3644 = (_3550 * 40u) + 28u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3669 = fma(_2006, _3657.z, fma(_2005, _3657.y, _3657.x * _2004)) + _3657.w;
                            _3670 = !((fma(_2006, _3638.z, fma(_2005, _3638.y, _3638.x * _2004)) + _3638.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3670)
                            {
                                float _3697 = _3565.x - _2004;
                                float _3698 = _3565.y - _2005;
                                float _3699 = _3565.z - _2006;
                                float _3700 = dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699));
                                float _3703 = inversesqrt(_3700);
                                float _3704 = _3703 * _3697;
                                float _3705 = _3703 * _3698;
                                float _3706 = _3703 * _3699;
                                float _3710 = 1.0 - (_3700 / (_3566 * _3566));
                                float _4847 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3715 = sqrt(_3700) * _3581.w;
                                float _3717 = 1.39999997615814208984375 / (_3715 + 1.39999997615814208984375);
                                float _3718 = _3717 * _3717;
                                float _3721 = ((1.0 - _3718) * dot(vec3(_3704, _3705, _3706), vec3(_872, _875, _878))) + _3718;
                                float _3724 = _3715 * _3715;
                                float _3728 = (fma(_2006, _3608.z, fma(_2005, _3608.y, _3608.x * _2004)) + _3608.w) / _3669;
                                float _3729 = (fma(_2006, _3623.z, fma(_2005, _3623.y, _3623.x * _2004)) + _3623.w) / _3669;
                                float _3733 = 1.0 - dot(vec2(_3728, _3729), vec2(_3728, _3729));
                                float _4863 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3735 = _3734 * (((isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0))) * _3711) / ((_3724 * 0.699999988079071044921875) + 1.0));
                                float _3747 = exp2(log2(1.0 / ((_3724 * 3.5) + 5.0)) * 0.25);
                                float _3748 = 1.0 - _947;
                                float _3755 = sqrt(1.0 - ((1.0 - (_3748 * _3748)) * (1.0 - (_3747 * _3747))));
                                float _3756 = _3755 * _3755;
                                float _3757 = _3756 * _3756;
                                float _3758 = _3704 - _3208;
                                float _3759 = _3705 - _3209;
                                float _3760 = _3706 - _3210;
                                float _3764 = inversesqrt(dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760)));
                                float _3768 = dot(vec3(_872, _875, _878), vec3((-0.0) - _3208, (-0.0) - _3209, (-0.0) - _3210));
                                float _4874 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3772 = dot(vec3(_872, _875, _878), vec3(_3764 * _3758, _3764 * _3759, _3764 * _3760));
                                float _4885 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3779 = ((_3775 * _3775) * (_3757 + (-1.0))) + 1.0;
                                float _3780 = _3717 * _3756;
                                float _3781 = _3780 * _3780;
                                float _3787 = ((1.0 - _3781) * dot(vec3(_872, _875, _878), vec3(_3704, _3705, _3706))) + _3781;
                                float _4896 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3789 = 1.0 - _3756;
                                float _3799 = (0.5 / (((_3788 * ((_3771 * _3789) + _3756)) + 9.9999999392252902907785028219223e-09) + (((_3788 * _3789) + _3756) * _3771))) * _3788;
                                float _4907 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3809 = (_3734 * _3711) * (((_3757 * 3.1415927410125732421875) * (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) / ((_3779 * _3779) * ((_3724 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3735 * _3581.y;
                                frontier_phi_78_pred_1 = _3735 * _3581.x;
                                frontier_phi_78_pred_2 = _3809 * _3593.z;
                                frontier_phi_78_pred_3 = _3809 * _3593.y;
                                frontier_phi_78_pred_4 = _3809 * _3593.x;
                                frontier_phi_78_pred_5 = _3735 * _3581.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3817 = frontier_phi_78_pred;
                            _3816 = frontier_phi_78_pred_1;
                            _3815 = frontier_phi_78_pred_2;
                            _3814 = frontier_phi_78_pred_3;
                            _3813 = frontier_phi_78_pred_4;
                            _3818 = frontier_phi_78_pred_5;
                            _3523 = _3816 + _3536;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            if (_3540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3540;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3525;
                        frontier_phi_72_pred_1 = _3524;
                        frontier_phi_72_pred_2 = _3523;
                        frontier_phi_72_pred_3 = _3522;
                        frontier_phi_72_pred_4 = _3521;
                        frontier_phi_72_pred_5 = _3520;
                    }
                    _3193 = frontier_phi_72_pred;
                    _3191 = frontier_phi_72_pred_1;
                    _3189 = frontier_phi_72_pred_2;
                    _3187 = frontier_phi_72_pred_3;
                    _3185 = frontier_phi_72_pred_4;
                    _3183 = frontier_phi_72_pred_5;
                    uint _3328 = _3327 + 1u;
                    if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3321 = _3183;
                        _3322 = _3185;
                        _3323 = _3187;
                        _3324 = _3189;
                        _3325 = _3191;
                        _3326 = _3193;
                        _3327 = _3328;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3193;
                frontier_phi_60_61_ladder_1 = _3191;
                frontier_phi_60_61_ladder_2 = _3187;
                frontier_phi_60_61_ladder_3 = _3185;
                frontier_phi_60_61_ladder_4 = _3183;
                frontier_phi_60_61_ladder_5 = _3189;
            }
            else
            {
                frontier_phi_60_61_ladder = _3070;
                frontier_phi_60_61_ladder_1 = _3068;
                frontier_phi_60_61_ladder_2 = _3064;
                frontier_phi_60_61_ladder_3 = _3062;
                frontier_phi_60_61_ladder_4 = _3060;
                frontier_phi_60_61_ladder_5 = _3066;
            }
            _3182 = frontier_phi_60_61_ladder_4;
            _3184 = frontier_phi_60_61_ladder_3;
            _3186 = frontier_phi_60_61_ladder_2;
            _3188 = frontier_phi_60_61_ladder_5;
            _3190 = frontier_phi_60_61_ladder_1;
            _3192 = frontier_phi_60_61_ladder;
        }
        float _3197 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
        _2958 = (_3197 * _3188) + _2470;
        _2960 = (_3197 * _3190) + _2472;
        _2962 = (_3197 * _3192) + _2474;
        _2964 = ((_3182 * _916) * _3197) + _2808;
        _2966 = ((_3184 * _918) * _3197) + _2810;
        _2968 = ((_3186 * _919) * _3197) + _2812;
    }
    else
    {
        _2958 = _2470;
        _2960 = _2472;
        _2962 = _2474;
        _2964 = _2808;
        _2966 = _2810;
        _2968 = _2812;
    }
    uint _2974 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _2982 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _707.x) * cbInstanceData._m0[_2974].x;
    float _2985 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _707.y) * cbInstanceData._m0[_2974].y;
    float _2988 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _707.z) * cbInstanceData._m0[_2974].z;
    float _4923 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4934 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4945 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _3005 = (((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2958 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _931))) + ((_2964 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + _2982;
    float _3007 = (_2985 + ((_2966 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2960 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _931)));
    float _3009 = (_2988 + ((_2968 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2962 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _931)));
    float _4971 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3022 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
    uint _3023 = _891 + 6u;
    float _3031 = _853 / cbSceneParam._m0[86u].x;
    float _3032 = _854 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _788 : (isnan(_788) ? cbSceneParam._m0[77u].w : min(_788, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_788 > cbSceneParam._m0[78u].w)
    {
        float _3085 = isnan(_788) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _788 : min(cbSceneParam._m0[80u].w, _788));
        float _3086 = _3085 / _788;
        float _3097 = _3086 * _838;
        float _3098 = _839 * _3086;
        float _3099 = (-0.0) - _3098;
        float _3101 = _3086 * _840;
        float _3103 = (cbSceneParam._m0[77u].w * _3099) / _3085;
        float _3104 = _3103 + cbSceneParam._m0[79u].w;
        float _3105 = cbSceneParam._m0[79u].w - _3098;
        float _3111 = sqrt(((_3097 * _3097) + (_3098 * _3098)) + (_3101 * _3101));
        float _3114 = (1.0 - (cbSceneParam._m0[77u].w / _3085)) * _3111;
        float _3119 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3121 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3099 - _3103) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3104 > 0.0) ? exp2(_3119 * _3104) : (2.0 - exp2(_3121 * _3104))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3114;
        }
        else
        {
            float _3243 = 1.0 / cbSceneParam._m0[80u].x;
            float _3244 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : max(_3104, _3105));
            float _3245 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : min(_3104, _3105));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            _3283 = ((abs(_3111 / _3099) * cbSceneParam._m0[80u].y) * ((((_3254 - _3255) * 2.0) - ((exp2(_3119 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0)))) - exp2(_3119 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))))) * _3243)) - ((exp2(_3121 * _3254) - exp2(_3121 * _3255)) * _3243))) + (_3114 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3051);
        _3123 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3125 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3127 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3129 = _3294 * _3051;
    }
    else
    {
        _3123 = _3048;
        _3125 = _3049;
        _3127 = _3050;
        _3129 = _3051;
    }
    float _3141 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3142 = _3141 == 3.0;
    float _3143 = log2(_3129);
    float _3147 = exp2(_3143 * cbSceneParam._m0[78u].x);
    float _3148 = exp2(_3143 * cbSceneParam._m0[78u].y);
    float _3149 = exp2(_3143 * cbSceneParam._m0[78u].z);
    float _3150 = _3147 * (isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0)));
    float _3151 = _3148 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)));
    float _3152 = _3149 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)));
    float _3161 = (_3141 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3161 * (_3142 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.y = _3161 * (_3142 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.z = _3161 * (_3142 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.w = cbInstanceData._m0[_3023].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2982) * _3022) * _3147) * _3161;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2985) * _3022) * _3148) * _3161;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2988) * _3022) * _3149) * _3161;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
}


