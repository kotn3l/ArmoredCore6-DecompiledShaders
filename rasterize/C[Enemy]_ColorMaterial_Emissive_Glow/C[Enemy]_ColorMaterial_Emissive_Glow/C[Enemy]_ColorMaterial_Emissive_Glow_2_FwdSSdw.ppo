#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1334;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _273 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _286 = exp2(log2(_273.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _287 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _288 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    vec4 _302 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _306 = _302.z;
    float _315 = exp2(log2(_306 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _316 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _317 = isnan(1.0) ? _316 : (isnan(_316) ? 1.0 : min(_316, 1.0));
    float _338 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(4.0) ? _339 : (isnan(_339) ? 4.0 : min(_339, 4.0));
    float _353 = floor(_340);
    vec4 _356 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _353));
    vec4 _380 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _391 = cbMtdParam._m0[9u].x * _380.x;
    float _392 = cbMtdParam._m0[9u].y * _380.y;
    float _393 = cbMtdParam._m0[9u].z * _380.z;
    float _400 = (((cbMtdParam._m0[10u].x * _356.x) - _391) * _317) + _391;
    float _401 = (((cbMtdParam._m0[10u].y * _356.y) - _392) * _317) + _392;
    float _402 = (((cbMtdParam._m0[10u].z * _356.z) - _393) * _317) + _393;
    float _408 = exp2(log2(_302.w) * cbMtdParam._m0[22u].w);
    vec4 _421 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _441 = (((cbMtdParam._m0[16u].x * _421.x) - _400) * _408) + _400;
    float _442 = (((cbMtdParam._m0[16u].y * _421.y) - _401) * _408) + _401;
    float _443 = (((cbMtdParam._m0[16u].z * _421.z) - _402) * _408) + _402;
    vec4 _456 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _481 = (_273.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _456.x) - _441) * _288) + _441);
    float _483 = (_273.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _456.y) - _442) * _288) + _442);
    float _485 = (_273.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _456.z) - _443) * _288) + _443);
    vec4 _498 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _517 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_254.x + 0.00999999977648258209228515625));
    float _519 = _517 * (cbMtdParam._m0[23u].z + 1.0);
    float _3760 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _527 = (_520 * ((cbMtdParam._m0[11u].x * _498.x) - _481)) + _481;
    float _528 = (((cbMtdParam._m0[11u].y * _498.y) - _483) * _520) + _483;
    float _529 = (((cbMtdParam._m0[11u].z * _498.z) - _485) * _520) + _485;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[25u].w;
    _191[0u] = cbMtdParam._m0[26u].x;
    _190[1u] = cbMtdParam._m0[27u].w;
    _191[1u] = cbMtdParam._m0[28u].x;
    _190[2u] = cbMtdParam._m0[27u].y;
    _191[2u] = cbMtdParam._m0[27u].z;
    _190[3u] = cbMtdParam._m0[26u].w;
    _191[3u] = cbMtdParam._m0[27u].x;
    _190[4u] = cbMtdParam._m0[26u].y;
    _191[4u] = cbMtdParam._m0[26u].z;
    float _568 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    uint _570 = uint(int(isnan(4.0) ? _568 : (isnan(_568) ? 4.0 : min(_568, 4.0))));
    float _577 = ((_191[_570] - cbMtdParam._m0[21u].z) * _317) + cbMtdParam._m0[21u].z;
    float _580 = ((cbMtdParam._m0[21u].w - _577) * _408) + _577;
    float _583 = ((cbMtdParam._m0[24u].y - _580) * _288) + _580;
    float _588 = (cbMtdParam._m0[23u].y + 1.0) * _517;
    float _3781 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _591 = _583 - (_583 * _589);
    vec4 _605 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _353));
    vec4 _622 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _630 = cbMtdParam._m0[21u].x + _622.z;
    float _633 = (((_605.z + _190[_570]) - _630) * _317) + _630;
    vec4 _645 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _656 = (((_645.z - _633) + cbMtdParam._m0[25u].y) * _408) + _633;
    float _662 = ((((_306 * 2.0) * _656) - _656) * cbMtdParam._m0[23u].w) + _656;
    vec4 _675 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _686 = (((cbMtdParam._m0[22u].z + _675.z) - _662) * _288) + _662;
    vec4 _698 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _710 = ((_698.z - _686) * _589) + _686;
    vec4 _730 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _749 = ((_605.x - _624) * _317) + _624;
    float _750 = ((_605.y - _625) * _317) + _625;
    float _755 = ((_645.x - _749) * _408) + _749;
    float _756 = ((_645.y - _750) * _408) + _750;
    float _765 = ((((_675.x - _755) * _288) + _755) * 2.0) + (-1.0);
    float _766 = ((((_675.y - _756) * _288) + _756) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3792 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))));
    float _781 = ((cbMtdParam._m0[24u].z * ((_302.x * 2.0) + (-1.0))) + _765) + (((((_698.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _589);
    float _782 = ((cbMtdParam._m0[24u].z * ((_302.y * 2.0) + (-1.0))) + _766) + (((((_698.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _589);
    float _785 = fma(_772, _226 * NORMAL.x, fma(_782, _233 * TANGENT.x, (_219 * _211) * _781));
    float _788 = fma(_772, _226 * NORMAL.y, fma(_782, _233 * TANGENT.y, (_219 * _212) * _781));
    float _791 = fma(_772, _226 * NORMAL.z, fma(_782, _233 * TANGENT.z, (_219 * _213) * _781));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _3803 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _799 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3825 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3836 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3847 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _803 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _819 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _869 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _871 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
    float _876 = _869 * _875;
    float _877 = _870 * _875;
    float _878 = _871 * _875;
    float _884 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _885 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _903 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _906 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _909 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _922 = uint(roundEven(NORMAL.w)) * 13u;
    uint _923 = _922 + 9u;
    uint _924 = _923 + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3858 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _936 = 1.0 - _803;
    float _937 = _933 * _936;
    float _938 = _934 * _936;
    float _939 = _935 * _936;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _803;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _803;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _803;
    float _947 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _884, cbSceneParam._m0[86u].y * _885));
    float _962 = _959.x * TEXCOORD_3.w;
    float _963 = dot(vec3(_796, _797, _798), vec3(_876, _877, _878));
    float _966 = _963 * 2.0;
    float _970 = (_966 * _796) - _876;
    float _971 = (_966 * _797) - _877;
    float _972 = (_966 * _798) - _878;
    float _976 = abs(dot(vec3(_876, _877, _878), vec3(_796, _797, _798)));
    float _3891 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _978 = sqrt(_799);
    float _989 = exp2((_978 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_978 * 3.0));
    float _995 = (1.0 - _989) * ((_978 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _978;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1062 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1066 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1091 = _1024 + _796;
        float _1092 = _1028 + _797;
        float _1093 = _1032 + _798;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_796, _797, _798), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3939 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_796, _797, _798), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3972 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_796, _797, _798), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4005 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1378 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1382 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1405 = _1024 + _796;
        float _1406 = _1028 + _797;
        float _1407 = _1032 + _798;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_796, _797, _798), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4068 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_796, _797, _798), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4101 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_796, _797, _798), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4134 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1334;
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = _1334;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1346)) + _1346;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1347)) + _1347;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1348)) + _1348;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _970 * 0.5;
    float _1712 = _971 * 0.5;
    float _1713 = _972 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_972, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970));
        float _1842 = fma(_972, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970));
        float _1845 = fma(_972, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1873 = frontier_phi_14_12_ladder;
        }
        float _2097;
        if (_1842 > 0.0)
        {
            _2097 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2097 = frontier_phi_23_19_ladder;
        }
        float _2354;
        if (_1845 > 0.0)
        {
            _2354 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2354 = frontier_phi_35_30_ladder;
        }
        float _2356 = isnan(_2097) ? _1873 : (isnan(_1873) ? _2097 : min(_1873, _2097));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1839) + _1828;
        float _2362 = (_2357 * _1842) + _1832;
        float _2363 = (_2357 * _1845) + _1836;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_13_35_ladder = _2491.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2491.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2491.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_13_35_ladder_2;
        _1863 = frontier_phi_13_35_ladder_1;
        _1865 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_970, _971, _972), _1780);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_972, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970));
        float _1938 = fma(_972, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970));
        float _1941 = fma(_972, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970));
        float _2102;
        if (_1935 > 0.0)
        {
            _2102 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2102 = frontier_phi_25_21_ladder;
        }
        float _2381;
        if (_1938 > 0.0)
        {
            _2381 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2381 = frontier_phi_37_32_ladder;
        }
        float _2594;
        if (_1941 > 0.0)
        {
            _2594 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2594 = frontier_phi_46_43_ladder;
        }
        float _2596 = isnan(_2381) ? _2102 : (isnan(_2102) ? _2381 : min(_2102, _2381));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1935) + _1924;
        float _2602 = (_2597 * _1938) + _1928;
        float _2603 = (_2597 * _1941) + _1932;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_22_46_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_22_46_ladder_2;
        _1962 = frontier_phi_22_46_ladder_1;
        _1964 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_970, _971, _972), _1870);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1977 = (((_995 * _947) + _996) * _962) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_995 * _949) + _996) * _962) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1981 = (((_995 * _950) + _996) * _962) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    vec4 _1998 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_884, _885));
    float _2000 = _1998.w;
    float _2012 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2000);
    float _2013 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2000);
    float _2014 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2000);
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_922 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _962 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2056 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2060 = _2020 | 1u;
    float _2071 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_796, _797, _798));
    float _2074 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_796, _797, _798));
    float _4270 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _4281 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2079 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2081 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2088 = ((cbLight._m0[_2037].x * _2043) * _2081) + (((cbLight._m0[_2047].x * _2012) * _2056) * _2079);
    float _2089 = ((_2043 * cbLight._m0[_2037].y) * _2081) + (((cbLight._m0[_2047].y * _2013) * _2056) * _2079);
    float _2090 = ((_2043 * cbLight._m0[_2037].z) * _2081) + (((cbLight._m0[_2047].z * _2014) * _2056) * _2079);
    uvec4 _2094 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2096 = _2094.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2096)
    {
        _2107 = _2088;
        _2109 = _2089;
        _2111 = _2090;
    }
    else
    {
        uint _2115 = _2020 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4292 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2134 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _2088;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _2089;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _2090;
    }
    bool _2114 = _2094.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2114)
    {
        _2152 = _2107;
        _2154 = _2109;
        _2156 = _2111;
    }
    else
    {
        uint _2325 = _2020 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4308 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2344 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2152 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2107;
        _2154 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2109;
        _2156 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2111;
    }
    uint _2159 = _2020 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _799) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2020].x + _876;
    float _2175 = cbLight._m0[_2020].y + _877;
    float _2176 = cbLight._m0[_2020].z + _878;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2020].xyz));
    float _4324 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2188 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2189 = dot(vec3(_796, _797, _798), vec3(_2181, _2182, _2183));
    float _4346 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2181, _2182, _2183));
    float _4357 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _944;
    float _2212 = 0.959999978542327880859375 - _945;
    float _2213 = 0.959999978542327880859375 - _946;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4368 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2247 = _2020 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _799) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2060].x + _876;
    float _2261 = cbLight._m0[_2060].y + _877;
    float _2262 = cbLight._m0[_2060].z + _878;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2060].xyz));
    float _4379 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2274 = dot(vec3(_796, _797, _798), vec3(_2267, _2268, _2269));
    float _4390 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2267, _2268, _2269));
    float _4401 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
    float _2300 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2188 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2300) + _2259) * _2273))) * _2273;
    float _4412 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2322 = (((((_2293 * _2210) + _947) * cbLight._m0[_2247].x) * _2312) * _2043) + ((((cbLight._m0[_2159].x * _2012) * ((_2209 * _2210) + _947)) * _2233) * _2056);
    float _2323 = (((((_2293 * _2212) + _949) * cbLight._m0[_2247].y) * _2312) * _2043) + ((((cbLight._m0[_2159].y * _2013) * ((_2209 * _2212) + _949)) * _2233) * _2056);
    float _2324 = (((((_2293 * _2213) + _950) * cbLight._m0[_2247].z) * _2312) * _2043) + ((((cbLight._m0[_2159].z * _2014) * ((_2209 * _2213) + _950)) * _2233) * _2056);
    float _2386;
    float _2388;
    float _2390;
    if (_2096)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2020 + 2u;
        uint _2396 = _2020 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _799) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _876;
        float _2413 = cbLight._m0[_2392].y + _877;
        float _2414 = cbLight._m0[_2392].z + _878;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2392].xyz));
        float _4423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2426 = dot(vec3(_796, _797, _798), vec3(_2419, _2420, _2421));
        float _4434 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4445 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2188 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2452) + _2411) * _2425))) * _2425;
        float _4456 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2386 = (((((_2445 * _2210) + _947) * cbLight._m0[_2396].x) * _2464) * _2465) + _2322;
        _2388 = (((((_2445 * _2212) + _949) * cbLight._m0[_2396].y) * _2464) * _2465) + _2323;
        _2390 = (((((_2445 * _2213) + _950) * cbLight._m0[_2396].z) * _2464) * _2465) + _2324;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2114)
    {
        _2500 = _2386;
        _2502 = _2388;
        _2504 = _2390;
    }
    else
    {
        uint _2511 = _2020 + 3u;
        uint _2515 = _2020 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _799) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _876;
        float _2532 = cbLight._m0[_2511].y + _877;
        float _2533 = cbLight._m0[_2511].z + _878;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2511].xyz));
        float _4472 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2545 = dot(vec3(_796, _797, _798), vec3(_2538, _2539, _2540));
        float _4483 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4494 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2188 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2571) + _2530) * _2544))) * _2544;
        float _4505 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2500 = (((((_2564 * _2210) + _947) * cbLight._m0[_2515].x) * _2583) * _2584) + _2386;
        _2502 = (((((_2564 * _2212) + _949) * cbLight._m0[_2515].y) * _2583) * _2584) + _2388;
        _2504 = (((((_2564 * _2213) + _950) * cbLight._m0[_2515].z) * _2583) * _2584) + _2390;
    }
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_2018.y == 0u)
    {
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2659;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2659;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2659;
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.x;
        uint _2686 = uint((float(_2674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _885) / _2675))) + floor(float(uint(cbSceneParam._m0[85u].x * _884) / _2675)));
        float _2696 = (log2(_2662 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        uint _2700 = uint(isnan(14.0) ? _2697 : (isnan(_2697) ? 14.0 : min(_2697, 14.0)));
        uvec4 _2705 = texelFetch(g_lightClusterGridBuffer, int(((_2700 << 2u) + (_2686 << 6u)) >> 2u));
        uint _2706 = _2705.x;
        uint _2707 = _2674.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2707 >> 4u) & 15u)) + 4294967295u) & _2706) == 0u) || ((_2707 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            uint _3002 = 0u;
            uint _3011;
            bool _3012;
            for (;;)
            {
                _3011 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                _3012 = _3011 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3012)
                {
                    frontier_phi_61_pred = _2996;
                    frontier_phi_61_pred_1 = _3001;
                    frontier_phi_61_pred_2 = _3000;
                    frontier_phi_61_pred_3 = _2999;
                    frontier_phi_61_pred_4 = _2998;
                    frontier_phi_61_pred_5 = _2997;
                }
                else
                {
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    uint _3126;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3011;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3130 = uint(findLSB(_3126)) + (_3002 << 5u);
                        uint _3127 = (_3126 + 4294967295u) & _3126;
                        uint _3132 = _3130 * 48u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3152 = (_3130 * 48u) + 4u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3171 = (_3130 * 48u) + 8u;
                        vec3 _3182 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x));
                        float _3186 = _3146.x - _2660;
                        float _3187 = _3146.y - _2661;
                        float _3188 = _3146.z - _2662;
                        float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                        float _3192 = inversesqrt(_3189);
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3196 = dot(vec3(_903, _906, _909), vec3(_3193, _3194, _3195));
                        float _3201 = 1.0 - (_3189 * _3146.w);
                        float _4531 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3203 = sqrt(_3189) * _3165.w;
                        float _3206 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3196) + _3207;
                        float _3213 = _3203 * _3203;
                        float _3217 = ((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3202) / ((_3213 * 0.699999988079071044921875) + 1.0);
                        float _3221 = (-0.0) - _2660;
                        float _3222 = (-0.0) - _2661;
                        float _3223 = (-0.0) - _2662;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3238 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                        float _3239 = 1.0 - _978;
                        float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                        float _3247 = _3246 * _3246;
                        float _3248 = _3247 * _3247;
                        float _3249 = _3228 + _3193;
                        float _3250 = _3229 + _3194;
                        float _3251 = _3230 + _3195;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3259 = dot(vec3(_903, _906, _909), vec3(_3228, _3229, _3230));
                        float _4547 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3263 = dot(vec3(_903, _906, _909), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                        float _4558 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                        float _3271 = _3206 * _3247;
                        float _3272 = _3271 * _3271;
                        float _3275 = ((1.0 - _3272) * _3196) + _3272;
                        float _4569 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3277 = 1.0 - _3247;
                        float _3287 = (0.5 / (((_3276 * ((_3262 * _3277) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3247) * _3262))) * _3276;
                        float _4580 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3298 = (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3270 * _3270) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125))) * _3202;
                        _3055 = (_3217 * _3165.x) + _3123;
                        _3056 = (_3217 * _3165.y) + _3124;
                        _3057 = (_3217 * _3165.z) + _3125;
                        _3052 = (_3298 * _3182.x) + _3120;
                        _3053 = (_3298 * _3182.y) + _3121;
                        _3054 = (_3298 * _3182.z) + _3122;
                        if (_3127 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3127;
                        }
                    }
                    frontier_phi_61_pred = _3052;
                    frontier_phi_61_pred_1 = _3057;
                    frontier_phi_61_pred_2 = _3056;
                    frontier_phi_61_pred_3 = _3055;
                    frontier_phi_61_pred_4 = _3054;
                    frontier_phi_61_pred_5 = _3053;
                }
                _2843 = frontier_phi_61_pred;
                _2853 = frontier_phi_61_pred_1;
                _2851 = frontier_phi_61_pred_2;
                _2849 = frontier_phi_61_pred_3;
                _2847 = frontier_phi_61_pred_4;
                _2845 = frontier_phi_61_pred_5;
                uint _3003 = _3002 + 1u;
                if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2996 = _2843;
                    _2997 = _2845;
                    _2998 = _2847;
                    _2999 = _2849;
                    _3000 = _2851;
                    _3001 = _2853;
                    _3002 = _3003;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((4294967295u << _2859) & _2706) == 0u)
        {
            _2964 = _2842;
            _2966 = _2844;
            _2968 = _2846;
            _2970 = _2848;
            _2972 = _2850;
            _2974 = _2852;
        }
        else
        {
            float _2989 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
            float _2990 = _2989 * _2660;
            float _2991 = _2989 * _2661;
            float _2992 = _2989 * _2662;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _3103 = _2842;
                float _3104 = _2844;
                float _3105 = _2846;
                float _3106 = _2848;
                float _3107 = _2850;
                float _3108 = _2852;
                uint _3109 = _2859;
                uint _3118;
                bool _3119;
                for (;;)
                {
                    _3118 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                    _3119 = _3118 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3119)
                    {
                        frontier_phi_67_pred = _3106;
                        frontier_phi_67_pred_1 = _3107;
                        frontier_phi_67_pred_2 = _3108;
                        frontier_phi_67_pred_3 = _3105;
                        frontier_phi_67_pred_4 = _3104;
                        frontier_phi_67_pred_5 = _3103;
                    }
                    else
                    {
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3316 = _3103;
                        float _3317 = _3104;
                        float _3318 = _3105;
                        float _3319 = _3106;
                        float _3320 = _3107;
                        float _3321 = _3108;
                        uint _3322 = _3118;
                        uint _3323;
                        vec4 _3348;
                        float _3349;
                        vec4 _3364;
                        vec3 _3376;
                        vec4 _3391;
                        vec4 _3406;
                        float _3452;
                        bool _3453;
                        for (;;)
                        {
                            uint _3333 = ((_3109 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3322));
                            _3323 = (_3322 + 4294967295u) & _3322;
                            uint _3335 = _3333 * 40u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            _3349 = _3348.w;
                            uint _3351 = (_3333 * 40u) + 4u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3333 * 40u) + 8u;
                            _3376 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x));
                            uint _3378 = (_3333 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3333 * 40u) + 20u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3333 * 40u) + 24u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3427 = (_3333 * 40u) + 28u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            _3452 = fma(_2662, _3440.z, fma(_2661, _3440.y, _3440.x * _2660)) + _3440.w;
                            _3453 = !((fma(_2662, _3421.z, fma(_2661, _3421.y, _3421.x * _2660)) + _3421.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3453)
                            {
                                float _3480 = _3348.x - _2660;
                                float _3481 = _3348.y - _2661;
                                float _3482 = _3348.z - _2662;
                                float _3483 = dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482));
                                float _3486 = inversesqrt(_3483);
                                float _3487 = _3486 * _3480;
                                float _3488 = _3486 * _3481;
                                float _3489 = _3486 * _3482;
                                float _3493 = 1.0 - (_3483 / (_3349 * _3349));
                                float _4591 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3498 = sqrt(_3483) * _3364.w;
                                float _3500 = 1.39999997615814208984375 / (_3498 + 1.39999997615814208984375);
                                float _3501 = _3500 * _3500;
                                float _3504 = ((1.0 - _3501) * dot(vec3(_3487, _3488, _3489), vec3(_903, _906, _909))) + _3501;
                                float _3507 = _3498 * _3498;
                                float _3511 = (fma(_2662, _3391.z, fma(_2661, _3391.y, _3391.x * _2660)) + _3391.w) / _3452;
                                float _3512 = (fma(_2662, _3406.z, fma(_2661, _3406.y, _3406.x * _2660)) + _3406.w) / _3452;
                                float _3516 = 1.0 - dot(vec2(_3511, _3512), vec2(_3511, _3512));
                                float _4607 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3518 = _3517 * (((isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0))) * _3494) / ((_3507 * 0.699999988079071044921875) + 1.0));
                                float _3530 = exp2(log2(1.0 / ((_3507 * 3.5) + 5.0)) * 0.25);
                                float _3531 = 1.0 - _978;
                                float _3538 = sqrt(1.0 - ((1.0 - (_3531 * _3531)) * (1.0 - (_3530 * _3530))));
                                float _3539 = _3538 * _3538;
                                float _3540 = _3539 * _3539;
                                float _3541 = _3487 - _2990;
                                float _3542 = _3488 - _2991;
                                float _3543 = _3489 - _2992;
                                float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                                float _3551 = dot(vec3(_903, _906, _909), vec3((-0.0) - _2990, (-0.0) - _2991, (-0.0) - _2992));
                                float _4618 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3554 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3555 = dot(vec3(_903, _906, _909), vec3(_3547 * _3541, _3547 * _3542, _3547 * _3543));
                                float _4629 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3562 = ((_3558 * _3558) * (_3540 + (-1.0))) + 1.0;
                                float _3563 = _3500 * _3539;
                                float _3564 = _3563 * _3563;
                                float _3570 = ((1.0 - _3564) * dot(vec3(_903, _906, _909), vec3(_3487, _3488, _3489))) + _3564;
                                float _4640 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3572 = 1.0 - _3539;
                                float _3582 = (0.5 / (((_3571 * ((_3554 * _3572) + _3539)) + 9.9999999392252902907785028219223e-09) + (((_3571 * _3572) + _3539) * _3554))) * _3571;
                                float _4651 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3592 = (_3517 * _3494) * (((_3540 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3562 * _3562) * ((_3507 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3592 * _3376.x;
                                frontier_phi_73_pred_1 = _3592 * _3376.y;
                                frontier_phi_73_pred_2 = _3518 * _3364.z;
                                frontier_phi_73_pred_3 = _3518 * _3364.y;
                                frontier_phi_73_pred_4 = _3518 * _3364.x;
                                frontier_phi_73_pred_5 = _3592 * _3376.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3596 = frontier_phi_73_pred;
                            _3597 = frontier_phi_73_pred_1;
                            _3601 = frontier_phi_73_pred_2;
                            _3600 = frontier_phi_73_pred_3;
                            _3599 = frontier_phi_73_pred_4;
                            _3598 = frontier_phi_73_pred_5;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            _3305 = _3598 + _3318;
                            if (_3323 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3323;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3306;
                        frontier_phi_67_pred_1 = _3307;
                        frontier_phi_67_pred_2 = _3308;
                        frontier_phi_67_pred_3 = _3305;
                        frontier_phi_67_pred_4 = _3304;
                        frontier_phi_67_pred_5 = _3303;
                    }
                    _2971 = frontier_phi_67_pred;
                    _2973 = frontier_phi_67_pred_1;
                    _2975 = frontier_phi_67_pred_2;
                    _2969 = frontier_phi_67_pred_3;
                    _2967 = frontier_phi_67_pred_4;
                    _2965 = frontier_phi_67_pred_5;
                    uint _3110 = _3109 + 1u;
                    if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3103 = _2965;
                        _3104 = _2967;
                        _3105 = _2969;
                        _3106 = _2971;
                        _3107 = _2973;
                        _3108 = _2975;
                        _3109 = _3110;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2973;
                frontier_phi_55_56_ladder_1 = _2975;
                frontier_phi_55_56_ladder_2 = _2971;
                frontier_phi_55_56_ladder_3 = _2969;
                frontier_phi_55_56_ladder_4 = _2967;
                frontier_phi_55_56_ladder_5 = _2965;
            }
            else
            {
                frontier_phi_55_56_ladder = _2850;
                frontier_phi_55_56_ladder_1 = _2852;
                frontier_phi_55_56_ladder_2 = _2848;
                frontier_phi_55_56_ladder_3 = _2846;
                frontier_phi_55_56_ladder_4 = _2844;
                frontier_phi_55_56_ladder_5 = _2842;
            }
            _2964 = frontier_phi_55_56_ladder_5;
            _2966 = frontier_phi_55_56_ladder_4;
            _2968 = frontier_phi_55_56_ladder_3;
            _2970 = frontier_phi_55_56_ladder_2;
            _2972 = frontier_phi_55_56_ladder;
            _2974 = frontier_phi_55_56_ladder_1;
        }
        float _2979 = isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0));
        _2719 = (_2979 * _2970) + _2152;
        _2721 = (_2979 * _2972) + _2154;
        _2723 = (_2979 * _2974) + _2156;
        _2725 = ((_2964 * _947) * _2979) + _2500;
        _2727 = ((_2966 * _949) * _2979) + _2502;
        _2729 = ((_2968 * _950) * _2979) + _2504;
    }
    else
    {
        _2719 = _2152;
        _2721 = _2154;
        _2723 = _2156;
        _2725 = _2500;
        _2727 = _2502;
        _2729 = _2504;
    }
    uint _2735 = _923 + uint(cbMatDynParam._m0[0u].w);
    float _2743 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _730.x) * cbInstanceData._m0[_2735].x;
    float _2746 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _730.y) * cbInstanceData._m0[_2735].y;
    float _2749 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _730.z) * cbInstanceData._m0[_2735].z;
    float _4667 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4678 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4689 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2766 = (((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2719 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _962))) + ((_2725 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + _2743;
    float _2768 = (_2746 + ((_2727 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2721 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _962)));
    float _2770 = (_2749 + ((_2729 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2723 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _962)));
    float _4715 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2783 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    uint _2784 = _922 + 6u;
    float _2792 = _884 / cbSceneParam._m0[86u].x;
    float _2793 = _885 / cbSceneParam._m0[86u].y;
    vec4 _2807 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, (log2((isnan(cbSceneParam._m0[77u].w) ? _819 : (isnan(_819) ? cbSceneParam._m0[77u].w : min(_819, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2809 = _2807.x;
    float _2810 = _2807.y;
    float _2811 = _2807.z;
    float _2812 = _2807.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_819 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_819) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _819 : min(cbSceneParam._m0[80u].w, _819));
        float _2868 = _2867 / _819;
        float _2879 = _2868 * _869;
        float _2880 = _870 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2883 = _2868 * _871;
        float _2885 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2880;
        float _2893 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2881 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3025 = 1.0 / cbSceneParam._m0[80u].x;
            float _3026 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3027 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            _3065 = ((abs(_2893 / _2881) * cbSceneParam._m0[80u].y) * ((((_3036 - _3037) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))))) * _3025)) - ((exp2(_2903 * _3036) - exp2(_2903 * _3037)) * _3025))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2812);
        _2905 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2809;
        _2907 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2810;
        _2909 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2811;
        _2911 = _3076 * _2812;
    }
    else
    {
        _2905 = _2809;
        _2907 = _2810;
        _2909 = _2811;
        _2911 = _2812;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2929 = exp2(_2925 * cbSceneParam._m0[78u].x);
    float _2930 = exp2(_2925 * cbSceneParam._m0[78u].y);
    float _2931 = exp2(_2925 * cbSceneParam._m0[78u].z);
    float _2932 = _2929 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0)));
    float _2933 = _2930 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0)));
    float _2934 = _2931 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = cbInstanceData._m0[_2784].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2743) * _2783) * _2929) * _2943;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2746) * _2783) * _2930) * _2943;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2749) * _2783) * _2931) * _2943;
    SV_Target_1.w = cbInstanceData._m0[_2784].w;
}


