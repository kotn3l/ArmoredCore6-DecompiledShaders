#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _828;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(S_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _226.x;
    float _230 = _226.y;
    float _231 = _226.z;
    float _233 = _226.w * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(S_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3191 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))));
    float _269 = fma(_266, _210, fma(_259, _202 * TANGENT.x, (_188 * _180) * _257));
    float _272 = fma(_266, _211, fma(_259, _202 * TANGENT.y, (_188 * _181) * _257));
    float _275 = fma(_266, _212, fma(_259, _202 * TANGENT.z, (_188 * _182) * _257));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _3202 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _283 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _284 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3235 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3246 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3257 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _288 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _304 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _346 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _356 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _346);
    float _357 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _346);
    float _358 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _346);
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _356 * _362;
    float _364 = _357 * _362;
    float _365 = _358 * _362;
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _393 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _396 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _399 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _412 = uint(roundEven(NORMAL.w)) * 13u;
    uint _415 = (_412 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _421 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_415].x;
    float _422 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_415].y;
    float _423 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_415].z;
    float _3268 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _427 = 1.0 - _288;
    float _428 = _424 * _427;
    float _429 = _425 * _427;
    float _430 = _426 * _427;
    float _435 = (_424 + (-0.039999999105930328369140625)) * _288;
    float _436 = (_425 + (-0.039999999105930328369140625)) * _288;
    float _437 = (_426 + (-0.039999999105930328369140625)) * _288;
    float _438 = _435 + 0.039999999105930328369140625;
    float _440 = _436 + 0.039999999105930328369140625;
    float _441 = _437 + 0.039999999105930328369140625;
    vec4 _450 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _453 = _450.x * TEXCOORD_1.w;
    float _454 = dot(vec3(_280, _281, _282), vec3(_363, _364, _365));
    float _457 = _454 * 2.0;
    float _461 = (_457 * _280) - _363;
    float _462 = (_457 * _281) - _364;
    float _463 = (_457 * _282) - _365;
    float _467 = abs(dot(vec3(_363, _364, _365), vec3(_280, _281, _282)));
    float _3301 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _469 = sqrt(_284);
    float _482 = exp2((_469 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_469 * 3.0));
    float _488 = (1.0 - _482) * ((_469 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _489 = _482 * _469;
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _827;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _552 = fma(_525, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _517));
        float _556 = fma(_525, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _517));
        float _560 = fma(_525, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _517));
        float _585 = _517 + _280;
        float _586 = _521 + _281;
        float _587 = _525 + _282;
        float _597 = fma(_587, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _585)) - _552;
        float _598 = fma(_587, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _585)) - _556;
        float _599 = fma(_587, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _585)) - _560;
        float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
        float _616 = ((_603 * _597) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_552 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _617 = ((_603 * _598) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_556 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _618 = ((_603 * _599) / cbModelParam._m0[34u].z) + ((((((_560 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        float _655 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_621.x + (-0.5));
        float _657 = _655 * (_621.y + (-0.5));
        float _658 = _655 * (_621.z + (-0.5));
        float _665 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_628.x + (-0.5));
        float _667 = _665 * (_628.y + (-0.5));
        float _668 = _665 * (_628.z + (-0.5));
        float _675 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_635.x + (-0.5));
        float _677 = _675 * (_635.y + (-0.5));
        float _678 = _675 * (_635.z + (-0.5));
        float _685 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_642.x + (-0.5));
        float _687 = _685 * (_642.y + (-0.5));
        float _688 = _685 * (_642.z + (-0.5));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = _656 * 0.5;
        float _693 = _666 * 0.5;
        float _694 = _676 * 0.5;
        float _695 = dot(vec3(_692, _693, _694), vec3(_692, _693, _694));
        float _700 = (_695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_695);
        float _709 = (dot(vec3(_280, _281, _282), vec3(_700 * _692, _700 * _693, _700 * _694)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _719 = sqrt(((_693 * _693) + (_692 * _692)) + (_694 * _694)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _721 = _720 * 2.0;
        float _725 = (1.0 - _720) / (_720 + 1.0);
        float _3349 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _735 = ((((1.0 - _726) * (_721 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_721 + 1.0))) + _726) * _689;
        float _736 = _657 * 0.5;
        float _737 = _667 * 0.5;
        float _738 = _677 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _752 = (dot(vec3(_280, _281, _282), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _761 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _763 = _762 * 2.0;
        float _767 = (1.0 - _762) / (_762 + 1.0);
        float _3382 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _777 = ((((1.0 - _768) * (_763 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_763 + 1.0))) + _768) * _690;
        float _778 = _658 * 0.5;
        float _779 = _668 * 0.5;
        float _780 = _678 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _794 = (dot(vec3(_280, _281, _282), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _803 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3415 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_805 + 1.0))) + _810) * _691;
        _827 = _658;
        _829 = _657;
        _830 = _656;
        _831 = _668;
        _832 = _667;
        _833 = _666;
        _834 = _678;
        _835 = _677;
        _836 = _676;
        _837 = _691;
        _838 = _690;
        _839 = _689;
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0)));
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0)));
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
    }
    else
    {
        _827 = _828;
        _829 = _828;
        _830 = _828;
        _831 = _828;
        _832 = _828;
        _833 = _828;
        _834 = _828;
        _835 = _828;
        _836 = _828;
        _837 = _828;
        _838 = _828;
        _839 = _828;
        _840 = 0.0;
        _841 = 0.0;
        _842 = 0.0;
    }
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _868 = fma(_525, cbModelParam._m0[30u].z, fma(_521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _517));
        float _872 = fma(_525, cbModelParam._m0[31u].z, fma(_521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _517));
        float _876 = fma(_525, cbModelParam._m0[32u].z, fma(_521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _517));
        float _899 = _517 + _280;
        float _900 = _521 + _281;
        float _901 = _525 + _282;
        float _911 = fma(_901, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899)) - _868;
        float _912 = fma(_901, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899)) - _872;
        float _913 = fma(_901, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899)) - _876;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_868 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_872 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[35u].z) + ((((((_876 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _967 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_934.x + (-0.5));
        float _969 = _967 * (_934.y + (-0.5));
        float _970 = _967 * (_934.z + (-0.5));
        float _977 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_941.x + (-0.5));
        float _979 = _977 * (_941.y + (-0.5));
        float _980 = _977 * (_941.z + (-0.5));
        float _987 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_948.x + (-0.5));
        float _989 = _987 * (_948.y + (-0.5));
        float _990 = _987 * (_948.z + (-0.5));
        float _997 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_955.x + (-0.5));
        float _999 = _997 * (_955.y + (-0.5));
        float _1000 = _997 * (_955.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_280, _281, _282), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3478 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1031 + 1.0))) + _1036) * _1001;
        float _1046 = _969 * 0.5;
        float _1047 = _979 * 0.5;
        float _1048 = _989 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_280, _281, _282), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3511 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1073 + 1.0))) + _1078) * _1002;
        float _1088 = _970 * 0.5;
        float _1089 = _980 * 0.5;
        float _1090 = _990 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_280, _281, _282), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3544 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1115 + 1.0))) + _1120) * _1003;
        _1137 = _970;
        _1138 = _969;
        _1139 = _968;
        _1140 = _980;
        _1141 = _979;
        _1142 = _978;
        _1143 = _990;
        _1144 = _989;
        _1145 = _988;
        _1146 = _1003;
        _1147 = _1002;
        _1148 = _1001;
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _828;
        _1138 = _828;
        _1139 = _828;
        _1140 = _828;
        _1141 = _828;
        _1142 = _828;
        _1143 = _828;
        _1144 = _828;
        _1145 = _828;
        _1146 = _828;
        _1147 = _828;
        _1148 = _828;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _840)) + _840;
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _841)) + _841;
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _842)) + _842;
    float _1184 = fma(_1163, cbSceneParam._m0[89u].z, fma(_1162, cbSceneParam._m0[89u].y, _1161 * cbSceneParam._m0[89u].x));
    float _1187 = fma(_1163, cbSceneParam._m0[90u].z, fma(_1162, cbSceneParam._m0[90u].y, _1161 * cbSceneParam._m0[90u].x));
    float _1190 = fma(_1163, cbSceneParam._m0[91u].z, fma(_1162, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1161));
    float _1205 = _461 * 0.5;
    float _1206 = _462 * 0.5;
    float _1207 = _463 * 0.5;
    float _1208 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1139, _1142, _1145, _1148));
    float _1211 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1138, _1141, _1144, _1147));
    float _1214 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1248;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1221 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_827, _831, _834, _837));
        float _1225 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_829, _832, _835, _838));
        float _1229 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_830, _833, _836, _839));
        float _1236 = dot(vec4(cbModelParam._m0[39u]), vec4(_1205, _1206, _1207, 1.0));
        _1248 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1236) ? 0.0 : (isnan(0.0) ? _1236 : max(0.0, _1236))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1248 = 1.0;
    }
    float _1259;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1250 = dot(vec4(cbModelParam._m0[40u]), vec4(_1205, _1206, _1207, 1.0));
        _1259 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1259 = 1.0;
    }
    float _1263 = (_1259 * cbModelParam._m0[1u].x) + (_1248 * (1.0 - cbModelParam._m0[1u].x));
    float _1273 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _284);
    float _1274 = isnan(_1273) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1273 : min(cbModelParam._m0[25u].z, _1273));
    float _1356;
    float _1358;
    float _1360;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1323 = fma(_525, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517)) + cbModelParam._m0[13u].w;
        float _1327 = fma(_525, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517)) + cbModelParam._m0[14u].w;
        float _1331 = fma(_525, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517)) + cbModelParam._m0[15u].w;
        float _1334 = fma(_463, cbModelParam._m0[13u].z, fma(_462, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _461));
        float _1337 = fma(_463, cbModelParam._m0[14u].z, fma(_462, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _461));
        float _1340 = fma(_463, cbModelParam._m0[15u].z, fma(_462, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _461));
        float _1368;
        if (_1334 > 0.0)
        {
            _1368 = abs((1.0 - _1323) / _1334);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1323 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1368 = frontier_phi_16_14_ladder;
        }
        float _1597;
        if (_1337 > 0.0)
        {
            _1597 = abs((1.0 - _1327) / _1337);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1327 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1597 = frontier_phi_25_21_ladder;
        }
        float _1854;
        if (_1340 > 0.0)
        {
            _1854 = abs((1.0 - _1331) / _1340);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1331 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1854 = frontier_phi_37_32_ladder;
        }
        float _1856 = isnan(_1597) ? _1368 : (isnan(_1368) ? _1597 : min(_1368, _1597));
        float _1857 = isnan(_1854) ? _1856 : (isnan(_1856) ? _1854 : min(_1856, _1854));
        float _1861 = (_1857 * _1334) + _1323;
        float _1862 = (_1857 * _1337) + _1327;
        float _1863 = (_1857 * _1340) + _1331;
        float _1864 = _1857 * 9.9999997473787516355514526367188e-05;
        float _1866 = (-1.0) - _1864;
        float _1868 = _1864 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1863 > _1868) || ((_1863 < _1866) || ((_1862 > _1868) || ((_1862 < _1866) || ((_1861 < _1866) || (_1861 > _1868))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1863, cbModelParam._m0[9u].z, fma(_1862, cbModelParam._m0[9u].y, _1861 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1863, cbModelParam._m0[10u].z, fma(_1862, cbModelParam._m0[10u].y, _1861 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1863, cbModelParam._m0[11u].z, fma(_1862, cbModelParam._m0[11u].y, _1861 * cbModelParam._m0[11u].x))), _1274);
            frontier_phi_15_37_ladder = _1991.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1991.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1991.x * cbModelParam._m0[1u].y;
        }
        _1356 = frontier_phi_15_37_ladder_2;
        _1358 = frontier_phi_15_37_ladder_1;
        _1360 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1344 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_461, _462, _463), _1274);
        _1356 = _1344.x * cbModelParam._m0[1u].y;
        _1358 = _1344.y * cbModelParam._m0[1u].y;
        _1360 = _1344.z * cbModelParam._m0[1u].y;
    }
    float _1364 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _284);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1364 : min(cbModelParam._m0[25u].w, _1364));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1422 = fma(_525, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517)) + cbModelParam._m0[21u].w;
        float _1426 = fma(_525, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517)) + cbModelParam._m0[22u].w;
        float _1430 = fma(_525, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517)) + cbModelParam._m0[23u].w;
        float _1433 = fma(_463, cbModelParam._m0[21u].z, fma(_462, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _461));
        float _1436 = fma(_463, cbModelParam._m0[22u].z, fma(_462, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _461));
        float _1439 = fma(_463, cbModelParam._m0[23u].z, fma(_462, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _461));
        float _1602;
        if (_1433 > 0.0)
        {
            _1602 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1602 = frontier_phi_27_23_ladder;
        }
        float _1881;
        if (_1436 > 0.0)
        {
            _1881 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1881 = frontier_phi_39_34_ladder;
        }
        float _2094;
        if (_1439 > 0.0)
        {
            _2094 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2094 = frontier_phi_48_45_ladder;
        }
        float _2096 = isnan(_1881) ? _1602 : (isnan(_1602) ? _1881 : min(_1602, _1881));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1433) + _1422;
        float _2102 = (_2097 * _1436) + _1426;
        float _2103 = (_2097 * _1439) + _1430;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2104;
        float _2107 = _2104 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2103 > _2107) || ((_2103 < _2105) || ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 < _2105) || (_2101 > _2107))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2103, cbModelParam._m0[17u].z, fma(_2102, cbModelParam._m0[17u].y, _2101 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2103, cbModelParam._m0[18u].z, fma(_2102, cbModelParam._m0[18u].y, _2101 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2103, cbModelParam._m0[19u].z, fma(_2102, cbModelParam._m0[19u].y, _2101 * cbModelParam._m0[19u].x))), _1365);
            frontier_phi_24_48_ladder = _2303.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2303.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2303.x * cbModelParam._m0[1u].z;
        }
        _1458 = frontier_phi_24_48_ladder_2;
        _1460 = frontier_phi_24_48_ladder_1;
        _1462 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_461, _462, _463), _1365);
        _1458 = _1442.x * cbModelParam._m0[1u].z;
        _1460 = _1442.y * cbModelParam._m0[1u].z;
        _1462 = _1442.z * cbModelParam._m0[1u].z;
    }
    float _1475 = (((_488 * _438) + _489) * _453) * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1477 = (((_488 * _440) + _489) * _453) * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1479 = (((_488 * _441) + _489) * _453) * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1482 = fma(_1479, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1479, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1479, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, _1475 * cbSceneParam._m0[91u].x));
    vec4 _1496 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_371, _372));
    float _1498 = _1496.w;
    float _1510 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1498);
    float _1511 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1498);
    float _1512 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1498);
    uvec4 _1516 = floatBitsToUint(cbInstanceData._m0[_412 + 5u]);
    uint _1518 = _1516.x * 14u;
    uint _1519 = _1518 + 13u;
    float _1526 = _453 + (-1.0);
    float _1531 = (cbLight._m0[_1519].x * _1526) + 1.0;
    float _1532 = (cbLight._m0[_1519].y * _1526) + 1.0;
    float _1533 = (cbLight._m0[_1519].z * _1526) + 1.0;
    float _1534 = (cbLight._m0[_1519].w * _1526) + 1.0;
    uint _1535 = _1518 + 5u;
    float _1541 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1545 = _1518 + 4u;
    float _1555 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
    uint _1559 = _1518 | 1u;
    float _1570 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_280, _281, _282));
    float _1573 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_280, _281, _282));
    float _3680 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _3691 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1578 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1580 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1587 = ((cbLight._m0[_1535].x * _1541) * _1580) + (((cbLight._m0[_1545].x * _1510) * _1555) * _1578);
    float _1588 = ((_1541 * cbLight._m0[_1535].y) * _1580) + (((cbLight._m0[_1545].y * _1511) * _1555) * _1578);
    float _1589 = ((_1541 * cbLight._m0[_1535].z) * _1580) + (((cbLight._m0[_1545].z * _1512) * _1555) * _1578);
    uvec4 _1594 = floatBitsToUint(cbLight._m0[_1518 + 12u]);
    bool _1596 = _1594.x == 0u;
    float _1607;
    float _1609;
    float _1611;
    if (_1596)
    {
        _1607 = _1587;
        _1609 = _1588;
        _1611 = _1589;
    }
    else
    {
        uint _1615 = _1518 + 6u;
        float _1631 = (dot(vec3(cbLight._m0[_1518 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1632 = _1631 * _1631;
        float _3702 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1634 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1607 = (((cbLight._m0[_1615].x * 0.3183098733425140380859375) * _1633) * _1634) + _1587;
        _1609 = (((cbLight._m0[_1615].y * 0.3183098733425140380859375) * _1633) * _1634) + _1588;
        _1611 = (((cbLight._m0[_1615].z * 0.3183098733425140380859375) * _1633) * _1634) + _1589;
    }
    bool _1614 = _1594.y == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1614)
    {
        _1652 = _1607;
        _1654 = _1609;
        _1656 = _1611;
    }
    else
    {
        uint _1825 = _1518 + 7u;
        float _1841 = (dot(vec3(cbLight._m0[_1518 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1842 = _1841 * _1841;
        float _3718 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1844 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1652 = (((cbLight._m0[_1825].x * 0.3183098733425140380859375) * _1843) * _1844) + _1607;
        _1654 = (((cbLight._m0[_1825].y * 0.3183098733425140380859375) * _1843) * _1844) + _1609;
        _1656 = (((cbLight._m0[_1825].z * 0.3183098733425140380859375) * _1843) * _1844) + _1611;
    }
    uint _1659 = _1518 + 8u;
    float _1672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1518].w)) * _284) * 0.949999988079071044921875);
    float _1673 = _1672 * _1672;
    float _1674 = cbLight._m0[_1518].x + _363;
    float _1675 = cbLight._m0[_1518].y + _364;
    float _1676 = cbLight._m0[_1518].z + _365;
    float _1680 = inversesqrt(dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676)));
    float _1681 = _1680 * _1674;
    float _1682 = _1680 * _1675;
    float _1683 = _1680 * _1676;
    float _1684 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1518].xyz));
    float _3734 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _1688 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1689 = dot(vec3(_280, _281, _282), vec3(_1681, _1682, _1683));
    float _3756 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1693 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_1681, _1682, _1683));
    float _3767 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1697 = _1673 * _1673;
    float _1701 = ((_1692 * _1692) * (_1697 + (-1.0))) + 1.0;
    float _1709 = exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0);
    float _1710 = 0.959999978542327880859375 - _435;
    float _1712 = 0.959999978542327880859375 - _436;
    float _1713 = 0.959999978542327880859375 - _437;
    float _1720 = 1.0 - _1673;
    float _1731 = (0.5 / (((_1688 * ((_1687 * _1720) + _1673)) + 9.9999999392252902907785028219223e-09) + (((_1688 * _1720) + _1673) * _1687))) * _1687;
    float _3778 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1733 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1697 / ((_1701 * _1701) * 3.141590118408203125));
    uint _1747 = _1518 + 9u;
    float _1758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1559].w)) * _284) * 0.949999988079071044921875);
    float _1759 = _1758 * _1758;
    float _1760 = cbLight._m0[_1559].x + _363;
    float _1761 = cbLight._m0[_1559].y + _364;
    float _1762 = cbLight._m0[_1559].z + _365;
    float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
    float _1767 = _1766 * _1760;
    float _1768 = _1766 * _1761;
    float _1769 = _1766 * _1762;
    float _1770 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1559].xyz));
    float _3789 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1774 = dot(vec3(_280, _281, _282), vec3(_1767, _1768, _1769));
    float _3800 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1778 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_1767, _1768, _1769));
    float _3811 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1782 = _1759 * _1759;
    float _1786 = ((_1777 * _1777) * (_1782 + (-1.0))) + 1.0;
    float _1793 = exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0);
    float _1800 = 1.0 - _1759;
    float _1810 = (0.5 / (((_1688 * ((_1773 * _1800) + _1759)) + 9.9999999392252902907785028219223e-09) + (((_1688 * _1800) + _1759) * _1773))) * _1773;
    float _3822 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1812 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1782 / ((_1786 * _1786) * 3.141590118408203125));
    float _1822 = (((((_1793 * _1710) + _438) * cbLight._m0[_1747].x) * _1812) * _1541) + ((((cbLight._m0[_1659].x * _1510) * ((_1709 * _1710) + _438)) * _1733) * _1555);
    float _1823 = (((((_1793 * _1712) + _440) * cbLight._m0[_1747].y) * _1812) * _1541) + ((((cbLight._m0[_1659].y * _1511) * ((_1709 * _1712) + _440)) * _1733) * _1555);
    float _1824 = (((((_1793 * _1713) + _441) * cbLight._m0[_1747].z) * _1812) * _1541) + ((((cbLight._m0[_1659].z * _1512) * ((_1709 * _1713) + _441)) * _1733) * _1555);
    float _1886;
    float _1888;
    float _1890;
    if (_1596)
    {
        _1886 = _1822;
        _1888 = _1823;
        _1890 = _1824;
    }
    else
    {
        uint _1892 = _1518 + 2u;
        uint _1896 = _1518 + 10u;
        float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _284) * 0.949999988079071044921875);
        float _1911 = _1910 * _1910;
        float _1912 = cbLight._m0[_1892].x + _363;
        float _1913 = cbLight._m0[_1892].y + _364;
        float _1914 = cbLight._m0[_1892].z + _365;
        float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
        float _1919 = _1918 * _1912;
        float _1920 = _1918 * _1913;
        float _1921 = _1918 * _1914;
        float _1922 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1892].xyz));
        float _3833 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1926 = dot(vec3(_280, _281, _282), vec3(_1919, _1920, _1921));
        float _3844 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1930 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_1919, _1920, _1921));
        float _3855 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1934 = _1911 * _1911;
        float _1938 = ((_1929 * _1929) * (_1934 + (-1.0))) + 1.0;
        float _1945 = exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0);
        float _1952 = 1.0 - _1911;
        float _1962 = (0.5 / (((_1688 * ((_1925 * _1952) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1688 * _1952) + _1911) * _1925))) * _1925;
        float _3866 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1964 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1934 / ((_1938 * _1938) * 3.141590118408203125));
        float _1965 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1886 = (((((_1945 * _1710) + _438) * cbLight._m0[_1896].x) * _1964) * _1965) + _1822;
        _1888 = (((((_1945 * _1712) + _440) * cbLight._m0[_1896].y) * _1964) * _1965) + _1823;
        _1890 = (((((_1945 * _1713) + _441) * cbLight._m0[_1896].z) * _1964) * _1965) + _1824;
    }
    float _2000;
    float _2002;
    float _2004;
    if (_1614)
    {
        _2000 = _1886;
        _2002 = _1888;
        _2004 = _1890;
    }
    else
    {
        uint _2011 = _1518 + 3u;
        uint _2015 = _1518 + 11u;
        float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _284) * 0.949999988079071044921875);
        float _2030 = _2029 * _2029;
        float _2031 = cbLight._m0[_2011].x + _363;
        float _2032 = cbLight._m0[_2011].y + _364;
        float _2033 = cbLight._m0[_2011].z + _365;
        float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
        float _2038 = _2037 * _2031;
        float _2039 = _2037 * _2032;
        float _2040 = _2037 * _2033;
        float _2041 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2011].xyz));
        float _3882 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2045 = dot(vec3(_280, _281, _282), vec3(_2038, _2039, _2040));
        float _3893 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2049 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2038, _2039, _2040));
        float _3904 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2053 = _2030 * _2030;
        float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
        float _2064 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
        float _2071 = 1.0 - _2030;
        float _2081 = (0.5 / (((_1688 * ((_2044 * _2071) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1688 * _2071) + _2030) * _2044))) * _2044;
        float _3915 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2083 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
        float _2084 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _2000 = (((((_2064 * _1710) + _438) * cbLight._m0[_2015].x) * _2083) * _2084) + _1886;
        _2002 = (((((_2064 * _1712) + _440) * cbLight._m0[_2015].y) * _2083) * _2084) + _1888;
        _2004 = (((((_2064 * _1713) + _441) * cbLight._m0[_2015].z) * _2083) * _2084) + _1890;
    }
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    if (_1516.y == 0u)
    {
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2159;
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2159;
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2159;
        uvec4 _2174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2175 = _2174.x;
        uint _2186 = uint((float(_2174.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _2175))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _2175)));
        float _2196 = (log2(_2162 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2197 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        uint _2200 = uint(isnan(14.0) ? _2197 : (isnan(_2197) ? 14.0 : min(_2197, 14.0)));
        uvec4 _2205 = texelFetch(g_lightClusterGridBuffer, int(((_2200 << 2u) + (_2186 << 6u)) >> 2u));
        uint _2206 = _2205.x;
        uint _2207 = _2174.z;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        if (((((1u << ((_2207 >> 4u) & 15u)) + 4294967295u) & _2206) == 0u) || ((_2207 & 240u) == 0u))
        {
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
        }
        else
        {
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            uint _2458 = 0u;
            uint _2467;
            bool _2468;
            for (;;)
            {
                _2467 = texelFetch(g_lightClassification, int((((_2200 << 5u) + (_2186 << 9u)) + (_2458 << 2u)) >> 2u)).x;
                _2468 = _2467 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2468)
                {
                    frontier_phi_63_pred = _2457;
                    frontier_phi_63_pred_1 = _2456;
                    frontier_phi_63_pred_2 = _2455;
                    frontier_phi_63_pred_3 = _2454;
                    frontier_phi_63_pred_4 = _2453;
                    frontier_phi_63_pred_5 = _2452;
                }
                else
                {
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    uint _2582;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2457;
                    _2582 = _2467;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    for (;;)
                    {
                        uint _2586 = uint(findLSB(_2582)) + (_2458 << 5u);
                        uint _2583 = (_2582 + 4294967295u) & _2582;
                        uint _2588 = _2586 * 48u;
                        vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2588)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 3u)).x));
                        uint _2608 = (_2586 * 48u) + 4u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2627 = (_2586 * 48u) + 8u;
                        vec3 _2638 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x));
                        float _2642 = _2602.x - _2160;
                        float _2643 = _2602.y - _2161;
                        float _2644 = _2602.z - _2162;
                        float _2645 = dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644));
                        float _2648 = inversesqrt(_2645);
                        float _2649 = _2648 * _2642;
                        float _2650 = _2648 * _2643;
                        float _2651 = _2648 * _2644;
                        float _2652 = dot(vec3(_393, _396, _399), vec3(_2649, _2650, _2651));
                        float _2657 = 1.0 - (_2645 * _2602.w);
                        float _3941 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2658 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                        float _2659 = sqrt(_2645) * _2621.w;
                        float _2662 = 1.39999997615814208984375 / (_2659 + 1.39999997615814208984375);
                        float _2663 = _2662 * _2662;
                        float _2666 = ((1.0 - _2663) * _2652) + _2663;
                        float _2669 = _2659 * _2659;
                        float _2673 = ((isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))) * _2658) / ((_2669 * 0.699999988079071044921875) + 1.0);
                        float _2677 = (-0.0) - _2160;
                        float _2678 = (-0.0) - _2161;
                        float _2679 = (-0.0) - _2162;
                        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
                        float _2684 = _2683 * _2677;
                        float _2685 = _2683 * _2678;
                        float _2686 = _2683 * _2679;
                        float _2694 = exp2(log2(1.0 / ((_2669 * 3.5) + 5.0)) * 0.25);
                        float _2695 = 1.0 - _469;
                        float _2702 = sqrt(1.0 - ((1.0 - (_2695 * _2695)) * (1.0 - (_2694 * _2694))));
                        float _2703 = _2702 * _2702;
                        float _2704 = _2703 * _2703;
                        float _2705 = _2684 + _2649;
                        float _2706 = _2685 + _2650;
                        float _2707 = _2686 + _2651;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2715 = dot(vec3(_393, _396, _399), vec3(_2684, _2685, _2686));
                        float _3957 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2718 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                        float _2719 = dot(vec3(_393, _396, _399), vec3(_2711 * _2705, _2711 * _2706, _2711 * _2707));
                        float _3968 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2722 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2726 = ((_2722 * _2722) * (_2704 + (-1.0))) + 1.0;
                        float _2727 = _2662 * _2703;
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2652) + _2728;
                        float _3979 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2732 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2733 = 1.0 - _2703;
                        float _2743 = (0.5 / (((_2732 * ((_2718 * _2733) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2733) + _2703) * _2718))) * _2732;
                        float _3990 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2754 = (((_2704 * 3.1415927410125732421875) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) / ((_2726 * _2726) * ((_2669 * 2.1991131305694580078125) + 3.141590118408203125))) * _2658;
                        _2511 = (_2673 * _2621.x) + _2579;
                        _2512 = (_2673 * _2621.y) + _2580;
                        _2513 = (_2673 * _2621.z) + _2581;
                        _2508 = (_2754 * _2638.x) + _2576;
                        _2509 = (_2754 * _2638.y) + _2577;
                        _2510 = (_2754 * _2638.z) + _2578;
                        if (_2583 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2513;
                            _2582 = _2583;
                        }
                    }
                    frontier_phi_63_pred = _2513;
                    frontier_phi_63_pred_1 = _2512;
                    frontier_phi_63_pred_2 = _2511;
                    frontier_phi_63_pred_3 = _2510;
                    frontier_phi_63_pred_4 = _2509;
                    frontier_phi_63_pred_5 = _2508;
                }
                _2319 = frontier_phi_63_pred;
                _2317 = frontier_phi_63_pred_1;
                _2315 = frontier_phi_63_pred_2;
                _2313 = frontier_phi_63_pred_3;
                _2311 = frontier_phi_63_pred_4;
                _2309 = frontier_phi_63_pred_5;
                uint _2459 = _2458 + 1u;
                if (_2459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2452 = _2309;
                    _2453 = _2311;
                    _2454 = _2313;
                    _2455 = _2315;
                    _2456 = _2317;
                    _2457 = _2319;
                    _2458 = _2459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
        }
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.z;
        uint _2325 = (_2323 >> 8u) & 15u;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((4294967295u << _2325) & _2206) == 0u)
        {
            _2420 = _2308;
            _2422 = _2310;
            _2424 = _2312;
            _2426 = _2314;
            _2428 = _2316;
            _2430 = _2318;
        }
        else
        {
            float _2445 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
            float _2446 = _2445 * _2160;
            float _2447 = _2445 * _2161;
            float _2448 = _2445 * _2162;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2325 < ((_2323 >> 12u) & 15u))
            {
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2559 = _2308;
                float _2560 = _2310;
                float _2561 = _2312;
                float _2562 = _2314;
                float _2563 = _2316;
                float _2564 = _2318;
                uint _2565 = _2325;
                uint _2574;
                bool _2575;
                for (;;)
                {
                    _2574 = texelFetch(g_lightClassification, int((((_2200 << 5u) + (_2186 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                    _2575 = _2574 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2575)
                    {
                        frontier_phi_69_pred = _2564;
                        frontier_phi_69_pred_1 = _2563;
                        frontier_phi_69_pred_2 = _2562;
                        frontier_phi_69_pred_3 = _2561;
                        frontier_phi_69_pred_4 = _2560;
                        frontier_phi_69_pred_5 = _2559;
                    }
                    else
                    {
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _2772 = _2559;
                        float _2773 = _2560;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        float _2777 = _2564;
                        uint _2778 = _2574;
                        uint _2779;
                        vec4 _2804;
                        float _2805;
                        vec4 _2820;
                        vec3 _2832;
                        vec4 _2848;
                        vec4 _2864;
                        float _2911;
                        bool _2912;
                        for (;;)
                        {
                            uint _2789 = ((_2565 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2778));
                            _2779 = (_2778 + 4294967295u) & _2778;
                            uint _2791 = _2789 * 40u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            _2805 = _2804.w;
                            uint _2807 = (_2789 * 40u) + 4u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2822 = (_2789 * 40u) + 8u;
                            _2832 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x));
                            uint _2835 = (_2789 * 40u) + 16u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2851 = (_2789 * 40u) + 20u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2867 = (_2789 * 40u) + 24u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2886 = (_2789 * 40u) + 28u;
                            vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2911 = fma(_2162, _2899.z, fma(_2161, _2899.y, _2899.x * _2160)) + _2899.w;
                            _2912 = !((fma(_2162, _2880.z, fma(_2161, _2880.y, _2880.x * _2160)) + _2880.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2912)
                            {
                                float _2939 = _2804.x - _2160;
                                float _2940 = _2804.y - _2161;
                                float _2941 = _2804.z - _2162;
                                float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                                float _2945 = inversesqrt(_2942);
                                float _2946 = _2945 * _2939;
                                float _2947 = _2945 * _2940;
                                float _2948 = _2945 * _2941;
                                float _2952 = 1.0 - (_2942 / (_2805 * _2805));
                                float _4001 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2953 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _2957 = sqrt(_2942) * _2820.w;
                                float _2959 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                                float _2960 = _2959 * _2959;
                                float _2963 = ((1.0 - _2960) * dot(vec3(_2946, _2947, _2948), vec3(_393, _396, _399))) + _2960;
                                float _2966 = _2957 * _2957;
                                float _2970 = (fma(_2162, _2848.z, fma(_2161, _2848.y, _2848.x * _2160)) + _2848.w) / _2911;
                                float _2971 = (fma(_2162, _2864.z, fma(_2161, _2864.y, _2864.x * _2160)) + _2864.w) / _2911;
                                float _2975 = 1.0 - dot(vec2(_2970, _2971), vec2(_2970, _2971));
                                float _4017 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                                float _2977 = _2976 * (((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2953) / ((_2966 * 0.699999988079071044921875) + 1.0));
                                float _2989 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                                float _2990 = 1.0 - _469;
                                float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                                float _2998 = _2997 * _2997;
                                float _2999 = _2998 * _2998;
                                float _3000 = _2946 - _2446;
                                float _3001 = _2947 - _2447;
                                float _3002 = _2948 - _2448;
                                float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                                float _3010 = dot(vec3(_393, _396, _399), vec3((-0.0) - _2446, (-0.0) - _2447, (-0.0) - _2448));
                                float _4028 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3013 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3014 = dot(vec3(_393, _396, _399), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                                float _4039 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3017 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                                float _3022 = _2959 * _2998;
                                float _3023 = _3022 * _3022;
                                float _3029 = ((1.0 - _3023) * dot(vec3(_393, _396, _399), vec3(_2946, _2947, _2948))) + _3023;
                                float _4050 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3031 = 1.0 - _2998;
                                float _3041 = (0.5 / (((_3030 * ((_3013 * _3031) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _2998) * _3013))) * _3030;
                                float _4061 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3051 = (_2976 * _2953) * (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_3021 * _3021) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2977 * _2820.z;
                                frontier_phi_75_pred_1 = _2977 * _2820.y;
                                frontier_phi_75_pred_2 = _2977 * _2820.x;
                                frontier_phi_75_pred_3 = _3051 * _2832.z;
                                frontier_phi_75_pred_4 = _3051 * _2832.y;
                                frontier_phi_75_pred_5 = _3051 * _2832.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3060 = frontier_phi_75_pred;
                            _3059 = frontier_phi_75_pred_1;
                            _3058 = frontier_phi_75_pred_2;
                            _3057 = frontier_phi_75_pred_3;
                            _3056 = frontier_phi_75_pred_4;
                            _3055 = frontier_phi_75_pred_5;
                            _2762 = _3058 + _2775;
                            _2763 = _3059 + _2776;
                            _2764 = _3060 + _2777;
                            _2759 = _3055 + _2772;
                            _2760 = _3056 + _2773;
                            _2761 = _3057 + _2774;
                            if (_2779 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2779;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2764;
                        frontier_phi_69_pred_1 = _2763;
                        frontier_phi_69_pred_2 = _2762;
                        frontier_phi_69_pred_3 = _2761;
                        frontier_phi_69_pred_4 = _2760;
                        frontier_phi_69_pred_5 = _2759;
                    }
                    _2431 = frontier_phi_69_pred;
                    _2429 = frontier_phi_69_pred_1;
                    _2427 = frontier_phi_69_pred_2;
                    _2425 = frontier_phi_69_pred_3;
                    _2423 = frontier_phi_69_pred_4;
                    _2421 = frontier_phi_69_pred_5;
                    uint _2566 = _2565 + 1u;
                    if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2559 = _2421;
                        _2560 = _2423;
                        _2561 = _2425;
                        _2562 = _2427;
                        _2563 = _2429;
                        _2564 = _2431;
                        _2565 = _2566;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2431;
                frontier_phi_57_58_ladder_1 = _2429;
                frontier_phi_57_58_ladder_2 = _2427;
                frontier_phi_57_58_ladder_3 = _2425;
                frontier_phi_57_58_ladder_4 = _2423;
                frontier_phi_57_58_ladder_5 = _2421;
            }
            else
            {
                frontier_phi_57_58_ladder = _2318;
                frontier_phi_57_58_ladder_1 = _2316;
                frontier_phi_57_58_ladder_2 = _2314;
                frontier_phi_57_58_ladder_3 = _2312;
                frontier_phi_57_58_ladder_4 = _2310;
                frontier_phi_57_58_ladder_5 = _2308;
            }
            _2420 = frontier_phi_57_58_ladder_5;
            _2422 = frontier_phi_57_58_ladder_4;
            _2424 = frontier_phi_57_58_ladder_3;
            _2426 = frontier_phi_57_58_ladder_2;
            _2428 = frontier_phi_57_58_ladder_1;
            _2430 = frontier_phi_57_58_ladder;
        }
        float _2435 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
        _2218 = (_2435 * _2426) + _1652;
        _2220 = (_2435 * _2428) + _1654;
        _2222 = (_2435 * _2430) + _1656;
        _2224 = ((_2420 * _438) * _2435) + _2000;
        _2226 = ((_2422 * _440) * _2435) + _2002;
        _2228 = ((_2424 * _441) * _2435) + _2004;
    }
    else
    {
        _2218 = _1652;
        _2220 = _1654;
        _2222 = _1656;
        _2224 = _2000;
        _2226 = _2002;
        _2228 = _2004;
    }
    float _4077 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4088 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4099 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4110 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _2253 = cbInstanceData._m0[_412 + 6u].w * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)));
    float _2258 = _371 / cbSceneParam._m0[86u].x;
    float _2259 = _372 / cbSceneParam._m0[86u].y;
    vec4 _2273 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2258, _2259, (log2((isnan(cbSceneParam._m0[77u].w) ? _304 : (isnan(_304) ? cbSceneParam._m0[77u].w : min(_304, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2275 = _2273.x;
    float _2276 = _2273.y;
    float _2277 = _2273.z;
    float _2278 = _2273.w;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_304 > cbSceneParam._m0[78u].w)
    {
        float _2333 = isnan(_304) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _304 : min(cbSceneParam._m0[80u].w, _304));
        float _2334 = _2333 / _304;
        float _2345 = _2334 * _356;
        float _2346 = _357 * _2334;
        float _2347 = (-0.0) - _2346;
        float _2348 = _2334 * _358;
        float _2350 = (cbSceneParam._m0[77u].w * _2347) / _2333;
        float _2351 = _2350 + cbSceneParam._m0[79u].w;
        float _2352 = cbSceneParam._m0[79u].w - _2346;
        float _2358 = sqrt(((_2345 * _2345) + (_2346 * _2346)) + (_2348 * _2348));
        float _2361 = (1.0 - (cbSceneParam._m0[77u].w / _2333)) * _2358;
        float _2366 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2368 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2521;
        if (abs((_2347 - _2350) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2521 = ((((_2351 > 0.0) ? exp2(_2366 * _2351) : (2.0 - exp2(_2368 * _2351))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2361;
        }
        else
        {
            float _2481 = 1.0 / cbSceneParam._m0[80u].x;
            float _2482 = isnan(_2352) ? _2351 : (isnan(_2351) ? _2352 : max(_2351, _2352));
            float _2483 = isnan(_2352) ? _2351 : (isnan(_2351) ? _2352 : min(_2351, _2352));
            float _2492 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : min(_2482, 0.0));
            float _2493 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : min(_2483, 0.0));
            _2521 = ((abs(_2358 / _2347) * cbSceneParam._m0[80u].y) * ((((_2492 - _2493) * 2.0) - ((exp2(_2366 * (isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0)))) - exp2(_2366 * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0))))) * _2481)) - ((exp2(_2368 * _2492) - exp2(_2368 * _2493)) * _2481))) + (_2361 * cbSceneParam._m0[80u].z);
        }
        vec4 _2523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2258, _2259, 1.0), 0.0);
        float _2532 = exp2((_2521 * (-1.44269502162933349609375)) * (1.0 - _2523.w));
        float _2533 = log2(_2532);
        float _2549 = log2(_2278);
        _2370 = (exp2(_2549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].x)) * _2523.x) / cbSceneParam._m0[78u].x)) + _2275;
        _2372 = (exp2(_2549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].y)) * _2523.y) / cbSceneParam._m0[78u].y)) + _2276;
        _2374 = (exp2(_2549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].z)) * _2523.z) / cbSceneParam._m0[78u].z)) + _2277;
        _2376 = _2532 * _2278;
    }
    else
    {
        _2370 = _2275;
        _2372 = _2276;
        _2374 = _2277;
        _2376 = _2278;
    }
    float _2388 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2389 = _2388 == 3.0;
    float _2390 = log2(_2376);
    float _2397 = exp2(_2390 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2218 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _453))) + ((_2224 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _1263)) * cbPerFrame._m0[3u].x));
    float _2398 = exp2(_2390 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2220 + ((isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))) * _453))) + ((_2226 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _1263)) * cbPerFrame._m0[3u].x));
    float _2399 = exp2(_2390 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2222 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _453))) + ((_2228 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1263)) * cbPerFrame._m0[3u].x));
    float _2408 = (_2388 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2408 * (_2389 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.y = _2408 * (_2389 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.z = _2408 * (_2389 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2374)));
    SV_Target.w = _2253;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2253;
}


