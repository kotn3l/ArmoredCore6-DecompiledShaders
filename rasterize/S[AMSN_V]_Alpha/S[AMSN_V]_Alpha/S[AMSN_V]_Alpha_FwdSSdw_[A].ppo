#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _873;
float _3290;
float _3291;
float _3292;
float _3293;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(S_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _236 = _230.w;
    float _237 = _236 * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(S_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3302 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))));
    float _273 = fma(_270, _214, fma(_263, _206 * TANGENT.x, (_192 * _184) * _261));
    float _276 = fma(_270, _215, fma(_263, _206 * TANGENT.y, (_192 * _185) * _261));
    float _279 = fma(_270, _216, fma(_263, _206 * TANGENT.z, (_192 * _186) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3313 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _287 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _288 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3346 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3357 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3368 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _292 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    vec4 _374 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _376 = _374.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _552 = sqrt(((_360 * _360) + (_361 * _361)) + (_362 * _362));
        float _558 = (cbMatDynParam._m0[5u].x * _552) + cbMatDynParam._m0[5u].y;
        float _3379 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _559 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _563 = (cbMatDynParam._m0[5u].z * _552) + cbMatDynParam._m0[5u].w;
        float _3390 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) - _559)) + _559) < ((_376 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _412 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _415 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = _428 + 9u;
    uint _431 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3401 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _443 = 1.0 - _292;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _292;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _292;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _292;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _469 = _466.x * TEXCOORD_1.w;
    float _470 = dot(vec3(_284, _285, _286), vec3(_367, _368, _369));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _284) - _367;
    float _478 = (_473 * _285) - _368;
    float _479 = (_473 * _286) - _369;
    float _483 = abs(dot(vec3(_367, _368, _369), vec3(_284, _285, _286)));
    float _3434 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_288);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _872;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _597 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _601 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _605 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _630 = _533 + _284;
        float _631 = _537 + _285;
        float _632 = _541 + _286;
        float _642 = fma(_632, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630)) - _597;
        float _643 = fma(_632, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630)) - _601;
        float _644 = fma(_632, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630)) - _605;
        float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
        float _661 = ((_648 * _642) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_597 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_648 * _643) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_601 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_648 * _644) / cbModelParam._m0[34u].z) + ((((((_605 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_666.x + (-0.5));
        float _702 = _700 * (_666.y + (-0.5));
        float _703 = _700 * (_666.z + (-0.5));
        float _710 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_673.x + (-0.5));
        float _712 = _710 * (_673.y + (-0.5));
        float _713 = _710 * (_673.z + (-0.5));
        float _720 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_680.x + (-0.5));
        float _722 = _720 * (_680.y + (-0.5));
        float _723 = _720 * (_680.z + (-0.5));
        float _730 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_687.x + (-0.5));
        float _732 = _730 * (_687.y + (-0.5));
        float _733 = _730 * (_687.z + (-0.5));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = _701 * 0.5;
        float _738 = _711 * 0.5;
        float _739 = _721 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _754 = (dot(vec3(_284, _285, _286), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _764 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3482 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_766 + 1.0))) + _771) * _734;
        float _781 = _702 * 0.5;
        float _782 = _712 * 0.5;
        float _783 = _722 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_284, _285, _286), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3515 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_808 + 1.0))) + _813) * _735;
        float _823 = _703 * 0.5;
        float _824 = _713 * 0.5;
        float _825 = _723 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_284, _285, _286), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3548 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_850 + 1.0))) + _855) * _736;
        _872 = _703;
        _874 = _702;
        _875 = _701;
        _876 = _713;
        _877 = _712;
        _878 = _711;
        _879 = _723;
        _880 = _722;
        _881 = _721;
        _882 = _736;
        _883 = _735;
        _884 = _734;
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
    }
    else
    {
        _872 = _873;
        _874 = _873;
        _875 = _873;
        _876 = _873;
        _877 = _873;
        _878 = _873;
        _879 = _873;
        _880 = _873;
        _881 = _873;
        _882 = _873;
        _883 = _873;
        _884 = _873;
        _885 = 0.0;
        _886 = 0.0;
        _887 = 0.0;
    }
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _916 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _920 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _924 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _947 = _533 + _284;
        float _948 = _537 + _285;
        float _949 = _541 + _286;
        float _959 = fma(_949, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947)) - _916;
        float _960 = fma(_949, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947)) - _920;
        float _961 = fma(_949, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947)) - _924;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_916 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_920 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[35u].z) + ((((((_924 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_982.x + (-0.5));
        float _1017 = _1015 * (_982.y + (-0.5));
        float _1018 = _1015 * (_982.z + (-0.5));
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_989.x + (-0.5));
        float _1027 = _1025 * (_989.y + (-0.5));
        float _1028 = _1025 * (_989.z + (-0.5));
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_996.x + (-0.5));
        float _1037 = _1035 * (_996.y + (-0.5));
        float _1038 = _1035 * (_996.z + (-0.5));
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_284, _285, _286), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3611 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1079 + 1.0))) + _1084) * _1049;
        float _1094 = _1017 * 0.5;
        float _1095 = _1027 * 0.5;
        float _1096 = _1037 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_284, _285, _286), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3644 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1121 + 1.0))) + _1126) * _1050;
        float _1136 = _1018 * 0.5;
        float _1137 = _1028 * 0.5;
        float _1138 = _1038 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_284, _285, _286), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3677 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1163 + 1.0))) + _1168) * _1051;
        _1185 = _1018;
        _1186 = _1017;
        _1187 = _1016;
        _1188 = _1028;
        _1189 = _1027;
        _1190 = _1026;
        _1191 = _1038;
        _1192 = _1037;
        _1193 = _1036;
        _1194 = _1051;
        _1195 = _1050;
        _1196 = _1049;
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _873;
        _1186 = _873;
        _1187 = _873;
        _1188 = _873;
        _1189 = _873;
        _1190 = _873;
        _1191 = _873;
        _1192 = _873;
        _1193 = _873;
        _1194 = _873;
        _1195 = _873;
        _1196 = _873;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _885)) + _885;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _886)) + _886;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _887)) + _887;
    float _1232 = fma(_1211, cbSceneParam._m0[89u].z, fma(_1210, cbSceneParam._m0[89u].y, _1209 * cbSceneParam._m0[89u].x));
    float _1235 = fma(_1211, cbSceneParam._m0[90u].z, fma(_1210, cbSceneParam._m0[90u].y, _1209 * cbSceneParam._m0[90u].x));
    float _1238 = fma(_1211, cbSceneParam._m0[91u].z, fma(_1210, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1209));
    float _1253 = _477 * 0.5;
    float _1254 = _478 * 0.5;
    float _1255 = _479 * 0.5;
    float _1256 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1259 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1262 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1296;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1269 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_872, _876, _879, _882));
        float _1273 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_874, _877, _880, _883));
        float _1277 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_875, _878, _881, _884));
        float _1284 = dot(vec4(cbModelParam._m0[39u]), vec4(_1253, _1254, _1255, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1307;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1298 = dot(vec4(cbModelParam._m0[40u]), vec4(_1253, _1254, _1255, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1311 = (_1307 * cbModelParam._m0[1u].x) + (_1296 * (1.0 - cbModelParam._m0[1u].x));
    float _1321 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _288);
    float _1322 = isnan(_1321) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1321 : min(cbModelParam._m0[25u].z, _1321));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1385 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1388 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1416;
        if (_1382 > 0.0)
        {
            _1416 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1416 = frontier_phi_19_17_ladder;
        }
        float _1645;
        if (_1385 > 0.0)
        {
            _1645 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1645 = frontier_phi_28_24_ladder;
        }
        float _1902;
        if (_1388 > 0.0)
        {
            _1902 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1902 = frontier_phi_40_35_ladder;
        }
        float _1904 = isnan(_1645) ? _1416 : (isnan(_1416) ? _1645 : min(_1416, _1645));
        float _1905 = isnan(_1902) ? _1904 : (isnan(_1904) ? _1902 : min(_1904, _1902));
        float _1909 = (_1905 * _1382) + _1371;
        float _1910 = (_1905 * _1385) + _1375;
        float _1911 = (_1905 * _1388) + _1379;
        float _1912 = _1905 * 9.9999997473787516355514526367188e-05;
        float _1914 = (-1.0) - _1912;
        float _1916 = _1912 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1911 > _1916) || ((_1911 < _1914) || ((_1910 > _1916) || ((_1910 < _1914) || ((_1909 < _1914) || (_1909 > _1916))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1911, cbModelParam._m0[9u].z, fma(_1910, cbModelParam._m0[9u].y, _1909 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1911, cbModelParam._m0[10u].z, fma(_1910, cbModelParam._m0[10u].y, _1909 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1911, cbModelParam._m0[11u].z, fma(_1910, cbModelParam._m0[11u].y, _1909 * cbModelParam._m0[11u].x))), _1322);
            frontier_phi_18_40_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_18_40_ladder_2;
        _1406 = frontier_phi_18_40_ladder_1;
        _1408 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1322);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1412 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _288);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1412 : min(cbModelParam._m0[25u].w, _1412));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1470 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1474 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1478 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1481 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1484 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1487 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1650;
        if (_1481 > 0.0)
        {
            _1650 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1650 = frontier_phi_30_26_ladder;
        }
        float _1929;
        if (_1484 > 0.0)
        {
            _1929 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1929 = frontier_phi_42_37_ladder;
        }
        float _2142;
        if (_1487 > 0.0)
        {
            _2142 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2142 = frontier_phi_51_48_ladder;
        }
        float _2144 = isnan(_1929) ? _1650 : (isnan(_1650) ? _1929 : min(_1650, _1929));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1481) + _1470;
        float _2150 = (_2145 * _1484) + _1474;
        float _2151 = (_2145 * _1487) + _1478;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2152;
        float _2155 = _2152 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2151 > _2155) || ((_2151 < _2153) || ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 < _2153) || (_2149 > _2155))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2151, cbModelParam._m0[17u].z, fma(_2150, cbModelParam._m0[17u].y, _2149 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2151, cbModelParam._m0[18u].z, fma(_2150, cbModelParam._m0[18u].y, _2149 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2151, cbModelParam._m0[19u].z, fma(_2150, cbModelParam._m0[19u].y, _2149 * cbModelParam._m0[19u].x))), _1413);
            frontier_phi_27_51_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1506 = frontier_phi_27_51_ladder_2;
        _1508 = frontier_phi_27_51_ladder_1;
        _1510 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1413);
        _1506 = _1490.x * cbModelParam._m0[1u].z;
        _1508 = _1490.y * cbModelParam._m0[1u].z;
        _1510 = _1490.z * cbModelParam._m0[1u].z;
    }
    float _1523 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1525 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1527 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1530 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, _1523 * cbSceneParam._m0[91u].x));
    vec4 _1544 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_388, _389));
    float _1546 = _1544.w;
    float _1558 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1546);
    float _1559 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1546);
    float _1560 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1546);
    uvec4 _1564 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1566 = _1564.x * 14u;
    uint _1567 = _1566 + 13u;
    float _1574 = _469 + (-1.0);
    float _1579 = (cbLight._m0[_1567].x * _1574) + 1.0;
    float _1580 = (cbLight._m0[_1567].y * _1574) + 1.0;
    float _1581 = (cbLight._m0[_1567].z * _1574) + 1.0;
    float _1582 = (cbLight._m0[_1567].w * _1574) + 1.0;
    uint _1583 = _1566 + 5u;
    float _1589 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1593 = _1566 + 4u;
    float _1603 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    uint _1607 = _1566 | 1u;
    float _1618 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_284, _285, _286));
    float _1621 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_284, _285, _286));
    float _3813 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _3824 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1626 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1628 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1635 = ((cbLight._m0[_1583].x * _1589) * _1628) + (((cbLight._m0[_1593].x * _1558) * _1603) * _1626);
    float _1636 = ((_1589 * cbLight._m0[_1583].y) * _1628) + (((cbLight._m0[_1593].y * _1559) * _1603) * _1626);
    float _1637 = ((_1589 * cbLight._m0[_1583].z) * _1628) + (((cbLight._m0[_1593].z * _1560) * _1603) * _1626);
    uvec4 _1642 = floatBitsToUint(cbLight._m0[_1566 + 12u]);
    bool _1644 = _1642.x == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1644)
    {
        _1655 = _1635;
        _1657 = _1636;
        _1659 = _1637;
    }
    else
    {
        uint _1663 = _1566 + 6u;
        float _1679 = (dot(vec3(cbLight._m0[_1566 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1680 = _1679 * _1679;
        float _3835 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1682 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1655 = (((cbLight._m0[_1663].x * 0.3183098733425140380859375) * _1681) * _1682) + _1635;
        _1657 = (((cbLight._m0[_1663].y * 0.3183098733425140380859375) * _1681) * _1682) + _1636;
        _1659 = (((cbLight._m0[_1663].z * 0.3183098733425140380859375) * _1681) * _1682) + _1637;
    }
    bool _1662 = _1642.y == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1662)
    {
        _1700 = _1655;
        _1702 = _1657;
        _1704 = _1659;
    }
    else
    {
        uint _1873 = _1566 + 7u;
        float _1889 = (dot(vec3(cbLight._m0[_1566 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _3851 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1892 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1700 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1655;
        _1702 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1657;
        _1704 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1659;
    }
    uint _1707 = _1566 + 8u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1566].w)) * _288) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1566].x + _367;
    float _1723 = cbLight._m0[_1566].y + _368;
    float _1724 = cbLight._m0[_1566].z + _369;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1566].xyz));
    float _3867 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1736 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1737 = dot(vec3(_284, _285, _286), vec3(_1729, _1730, _1731));
    float _3889 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1741 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_1729, _1730, _1731));
    float _3900 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1745 = _1721 * _1721;
    float _1749 = ((_1740 * _1740) * (_1745 + (-1.0))) + 1.0;
    float _1757 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
    float _1758 = 0.959999978542327880859375 - _451;
    float _1760 = 0.959999978542327880859375 - _452;
    float _1761 = 0.959999978542327880859375 - _453;
    float _1768 = 1.0 - _1721;
    float _1779 = (0.5 / (((_1736 * ((_1735 * _1768) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1768) + _1721) * _1735))) * _1735;
    float _3911 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1781 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1745 / ((_1749 * _1749) * 3.141590118408203125));
    uint _1795 = _1566 + 9u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _288) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1607].x + _367;
    float _1809 = cbLight._m0[_1607].y + _368;
    float _1810 = cbLight._m0[_1607].z + _369;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1607].xyz));
    float _3922 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1822 = dot(vec3(_284, _285, _286), vec3(_1815, _1816, _1817));
    float _3933 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1815, _1816, _1817));
    float _3944 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1807 * _1807;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1841 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
    float _1848 = 1.0 - _1807;
    float _1858 = (0.5 / (((_1736 * ((_1821 * _1848) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1848) + _1807) * _1821))) * _1821;
    float _3955 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    float _1870 = (((((_1841 * _1758) + _454) * cbLight._m0[_1795].x) * _1860) * _1589) + ((((cbLight._m0[_1707].x * _1558) * ((_1757 * _1758) + _454)) * _1781) * _1603);
    float _1871 = (((((_1841 * _1760) + _456) * cbLight._m0[_1795].y) * _1860) * _1589) + ((((cbLight._m0[_1707].y * _1559) * ((_1757 * _1760) + _456)) * _1781) * _1603);
    float _1872 = (((((_1841 * _1761) + _457) * cbLight._m0[_1795].z) * _1860) * _1589) + ((((cbLight._m0[_1707].z * _1560) * ((_1757 * _1761) + _457)) * _1781) * _1603);
    float _1934;
    float _1936;
    float _1938;
    if (_1644)
    {
        _1934 = _1870;
        _1936 = _1871;
        _1938 = _1872;
    }
    else
    {
        uint _1940 = _1566 + 2u;
        uint _1944 = _1566 + 10u;
        float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _288) * 0.949999988079071044921875);
        float _1959 = _1958 * _1958;
        float _1960 = cbLight._m0[_1940].x + _367;
        float _1961 = cbLight._m0[_1940].y + _368;
        float _1962 = cbLight._m0[_1940].z + _369;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1967 = _1966 * _1960;
        float _1968 = _1966 * _1961;
        float _1969 = _1966 * _1962;
        float _1970 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1940].xyz));
        float _3966 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1974 = dot(vec3(_284, _285, _286), vec3(_1967, _1968, _1969));
        float _3977 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1978 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_1967, _1968, _1969));
        float _3988 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1982 = _1959 * _1959;
        float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
        float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
        float _2000 = 1.0 - _1959;
        float _2010 = (0.5 / (((_1736 * ((_1973 * _2000) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2000) + _1959) * _1973))) * _1973;
        float _3999 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2012 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
        float _2013 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1934 = (((((_1993 * _1758) + _454) * cbLight._m0[_1944].x) * _2012) * _2013) + _1870;
        _1936 = (((((_1993 * _1760) + _456) * cbLight._m0[_1944].y) * _2012) * _2013) + _1871;
        _1938 = (((((_1993 * _1761) + _457) * cbLight._m0[_1944].z) * _2012) * _2013) + _1872;
    }
    float _2048;
    float _2050;
    float _2052;
    if (_1662)
    {
        _2048 = _1934;
        _2050 = _1936;
        _2052 = _1938;
    }
    else
    {
        uint _2059 = _1566 + 3u;
        uint _2063 = _1566 + 11u;
        float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _288) * 0.949999988079071044921875);
        float _2078 = _2077 * _2077;
        float _2079 = cbLight._m0[_2059].x + _367;
        float _2080 = cbLight._m0[_2059].y + _368;
        float _2081 = cbLight._m0[_2059].z + _369;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2086 = _2085 * _2079;
        float _2087 = _2085 * _2080;
        float _2088 = _2085 * _2081;
        float _2089 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2059].xyz));
        float _4015 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2093 = dot(vec3(_284, _285, _286), vec3(_2086, _2087, _2088));
        float _4026 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2097 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2086, _2087, _2088));
        float _4037 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2101 = _2078 * _2078;
        float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
        float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
        float _2119 = 1.0 - _2078;
        float _2129 = (0.5 / (((_1736 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2119) + _2078) * _2092))) * _2092;
        float _4048 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2131 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
        float _2132 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _2048 = (((((_2112 * _1758) + _454) * cbLight._m0[_2063].x) * _2131) * _2132) + _1934;
        _2050 = (((((_2112 * _1760) + _456) * cbLight._m0[_2063].y) * _2131) * _2132) + _1936;
        _2052 = (((((_2112 * _1761) + _457) * cbLight._m0[_2063].z) * _2131) * _2132) + _1938;
    }
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    if (_1564.y == 0u)
    {
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2207;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2207;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2207;
        uvec4 _2222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2223 = _2222.x;
        uint _2234 = uint((float(_2222.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2223))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2223)));
        float _2244 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2245 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        uint _2248 = uint(isnan(14.0) ? _2245 : (isnan(_2245) ? 14.0 : min(_2245, 14.0)));
        uvec4 _2253 = texelFetch(g_lightClusterGridBuffer, int(((_2248 << 2u) + (_2234 << 6u)) >> 2u));
        uint _2254 = _2253.x;
        uint _2255 = _2222.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2255 >> 4u) & 15u)) + 4294967295u) & _2254) == 0u) || ((_2255 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2524)
                {
                    frontier_phi_68_pred = _2510;
                    frontier_phi_68_pred_1 = _2513;
                    frontier_phi_68_pred_2 = _2512;
                    frontier_phi_68_pred_3 = _2511;
                    frontier_phi_68_pred_4 = _2509;
                    frontier_phi_68_pred_5 = _2508;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2523;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2514 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2208;
                        float _2720 = _2679.y - _2209;
                        float _2721 = _2679.z - _2210;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_409, _412, _415), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _4074 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2208;
                        float _2755 = (-0.0) - _2209;
                        float _2756 = (-0.0) - _2210;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _485;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_409, _412, _415), vec3(_2761, _2762, _2763));
                        float _4090 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2796 = dot(vec3(_409, _412, _415), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4101 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4112 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4123 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2583 = (_2750 * _2698.x) + _2656;
                        _2584 = (_2750 * _2698.y) + _2657;
                        _2585 = (_2750 * _2698.z) + _2658;
                        _2580 = (_2831 * _2715.x) + _2653;
                        _2581 = (_2831 * _2715.y) + _2654;
                        _2582 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_68_pred = _2582;
                    frontier_phi_68_pred_1 = _2585;
                    frontier_phi_68_pred_2 = _2584;
                    frontier_phi_68_pred_3 = _2583;
                    frontier_phi_68_pred_4 = _2581;
                    frontier_phi_68_pred_5 = _2580;
                }
                _2361 = frontier_phi_68_pred;
                _2367 = frontier_phi_68_pred_1;
                _2365 = frontier_phi_68_pred_2;
                _2363 = frontier_phi_68_pred_3;
                _2359 = frontier_phi_68_pred_4;
                _2357 = frontier_phi_68_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2357;
                    _2509 = _2359;
                    _2510 = _2361;
                    _2511 = _2363;
                    _2512 = _2365;
                    _2513 = _2367;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2373) & _2254) == 0u)
        {
            _2476 = _2356;
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
            _2484 = _2364;
            _2486 = _2366;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _2502 = _2501 * _2208;
            float _2503 = _2501 * _2209;
            float _2504 = _2501 * _2210;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2636 = _2356;
                float _2637 = _2358;
                float _2638 = _2360;
                float _2639 = _2362;
                float _2640 = _2364;
                float _2641 = _2366;
                uint _2642 = _2373;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2652)
                    {
                        frontier_phi_79_pred = _2641;
                        frontier_phi_79_pred_1 = _2640;
                        frontier_phi_79_pred_2 = _2639;
                        frontier_phi_79_pred_3 = _2638;
                        frontier_phi_79_pred_4 = _2637;
                        frontier_phi_79_pred_5 = _2636;
                    }
                    else
                    {
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        uint _2864 = _2651;
                        uint _2865;
                        vec4 _2890;
                        float _2891;
                        vec4 _2906;
                        vec3 _2918;
                        vec4 _2934;
                        vec4 _2950;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2875 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2864));
                            _2865 = (_2864 + 4294967295u) & _2864;
                            uint _2877 = _2875 * 40u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2891 = _2890.w;
                            uint _2893 = (_2875 * 40u) + 4u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2875 * 40u) + 8u;
                            _2918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x));
                            uint _2921 = (_2875 * 40u) + 16u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2875 * 40u) + 20u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2875 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2875 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2210, _2985.z, fma(_2209, _2985.y, _2985.x * _2208)) + _2985.w;
                            _2998 = !((fma(_2210, _2966.z, fma(_2209, _2966.y, _2966.x * _2208)) + _2966.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2890.x - _2208;
                                float _3026 = _2890.y - _2209;
                                float _3027 = _2890.z - _2210;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2891 * _2891));
                                float _4134 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3043 = sqrt(_3028) * _2906.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3049 = ((1.0 - _3046) * dot(vec3(_3032, _3033, _3034), vec3(_409, _412, _415))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2210, _2934.z, fma(_2209, _2934.y, _2934.x * _2208)) + _2934.w) / _2997;
                                float _3057 = (fma(_2210, _2950.z, fma(_2209, _2950.y, _2950.x * _2208)) + _2950.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _4150 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3075 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                                float _3076 = 1.0 - _485;
                                float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                                float _3084 = _3083 * _3083;
                                float _3085 = _3084 * _3084;
                                float _3086 = _3032 - _2502;
                                float _3087 = _3033 - _2503;
                                float _3088 = _3034 - _2504;
                                float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                                float _3096 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2502, (-0.0) - _2503, (-0.0) - _2504));
                                float _4161 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3100 = dot(vec3(_409, _412, _415), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                                float _4172 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                                float _3108 = _3045 * _3084;
                                float _3109 = _3108 * _3108;
                                float _3115 = ((1.0 - _3109) * dot(vec3(_409, _412, _415), vec3(_3032, _3033, _3034))) + _3109;
                                float _4183 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3117 = 1.0 - _3084;
                                float _3127 = (0.5 / (((_3116 * ((_3099 * _3117) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3084) * _3099))) * _3116;
                                float _4194 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3137 = (_3062 * _3039) * (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_3107 * _3107) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3063 * _2906.z;
                                frontier_phi_85_pred_1 = _3063 * _2906.y;
                                frontier_phi_85_pred_2 = _3063 * _2906.x;
                                frontier_phi_85_pred_3 = _3137 * _2918.z;
                                frontier_phi_85_pred_4 = _3137 * _2918.y;
                                frontier_phi_85_pred_5 = _3137 * _2918.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3146 = frontier_phi_85_pred;
                            _3145 = frontier_phi_85_pred_1;
                            _3144 = frontier_phi_85_pred_2;
                            _3143 = frontier_phi_85_pred_3;
                            _3142 = frontier_phi_85_pred_4;
                            _3141 = frontier_phi_85_pred_5;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            if (_2865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2865;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2850;
                        frontier_phi_79_pred_1 = _2849;
                        frontier_phi_79_pred_2 = _2848;
                        frontier_phi_79_pred_3 = _2847;
                        frontier_phi_79_pred_4 = _2846;
                        frontier_phi_79_pred_5 = _2845;
                    }
                    _2487 = frontier_phi_79_pred;
                    _2485 = frontier_phi_79_pred_1;
                    _2483 = frontier_phi_79_pred_2;
                    _2481 = frontier_phi_79_pred_3;
                    _2479 = frontier_phi_79_pred_4;
                    _2477 = frontier_phi_79_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2477;
                        _2637 = _2479;
                        _2638 = _2481;
                        _2639 = _2483;
                        _2640 = _2485;
                        _2641 = _2487;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2483;
                frontier_phi_60_61_ladder_1 = _2487;
                frontier_phi_60_61_ladder_2 = _2485;
                frontier_phi_60_61_ladder_3 = _2481;
                frontier_phi_60_61_ladder_4 = _2479;
                frontier_phi_60_61_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_60_61_ladder = _2362;
                frontier_phi_60_61_ladder_1 = _2366;
                frontier_phi_60_61_ladder_2 = _2364;
                frontier_phi_60_61_ladder_3 = _2360;
                frontier_phi_60_61_ladder_4 = _2358;
                frontier_phi_60_61_ladder_5 = _2356;
            }
            _2476 = frontier_phi_60_61_ladder_5;
            _2478 = frontier_phi_60_61_ladder_4;
            _2480 = frontier_phi_60_61_ladder_3;
            _2482 = frontier_phi_60_61_ladder;
            _2484 = frontier_phi_60_61_ladder_2;
            _2486 = frontier_phi_60_61_ladder_1;
        }
        float _2491 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2266 = (_2491 * _2482) + _1700;
        _2268 = (_2491 * _2484) + _1702;
        _2270 = (_2491 * _2486) + _1704;
        _2272 = ((_2476 * _454) * _2491) + _2048;
        _2274 = ((_2478 * _456) * _2491) + _2050;
        _2276 = ((_2480 * _457) * _2491) + _2052;
    }
    else
    {
        _2266 = _1700;
        _2268 = _1702;
        _2270 = _1704;
        _2272 = _2048;
        _2274 = _2050;
        _2276 = _2052;
    }
    float _4210 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4221 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4232 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4243 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _2294 = ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2266 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _469))) + ((_2272 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1311)) * cbPerFrame._m0[3u].x);
    float _2295 = ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2268 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _469))) + ((_2274 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1311)) * cbPerFrame._m0[3u].x);
    float _2296 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2270 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _469))) + ((_2276 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1311)) * cbPerFrame._m0[3u].x);
    float _2301 = cbInstanceData._m0[_428 + 6u].w * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)));
    float _2306 = _388 / cbSceneParam._m0[86u].x;
    float _2307 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _2382 = _2381 / _308;
        float _2393 = _2382 * _360;
        float _2394 = _361 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2396 = _2382 * _362;
        float _2398 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2399 = _2398 + cbSceneParam._m0[79u].w;
        float _2400 = cbSceneParam._m0[79u].w - _2394;
        float _2406 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2396 * _2396));
        float _2409 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2406;
        float _2414 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2416 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2593;
        if (abs((_2395 - _2398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2593 = ((((_2399 > 0.0) ? exp2(_2414 * _2399) : (2.0 - exp2(_2416 * _2399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2409;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : max(_2399, _2400));
            float _2539 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : min(_2399, _2400));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2593 = ((abs(_2406 / _2395) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2414 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2414 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2416 * _2548) - exp2(_2416 * _2549)) * _2537))) + (_2409 * cbSceneParam._m0[80u].z);
        }
        vec4 _2595 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2604 = exp2((_2593 * (-1.44269502162933349609375)) * (1.0 - _2595.w));
        float _2605 = log2(_2604);
        float _2621 = log2(_2326);
        _2418 = (exp2(_2621 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].x)) * _2595.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2420 = (exp2(_2621 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].y)) * _2595.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2422 = (exp2(_2621 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].z)) * _2595.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2424 = _2604 * _2326;
    }
    else
    {
        _2418 = _2323;
        _2420 = _2324;
        _2422 = _2325;
        _2424 = _2326;
    }
    bool _2631;
    vec4 _2434;
    vec4 _2456;
    float _2458;
    float _2462;
    float _2463;
    float _2464;
    float _2465;
    bool _2475;
    for (;;)
    {
        _2434 = cbMatDynParam._m0[0u];
        float _2436 = roundEven(_2434.y);
        bool _2437 = _2436 == 3.0;
        float _2438 = log2(_2424);
        float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * _2294;
        float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * _2295;
        float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * _2296;
        float _2454 = _376 + (-0.5);
        _2456 = cbMtdParam._m0[1u];
        _2458 = _2456.y * _2454;
        float _2461 = (_2436 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2462 = _2461 * (_2437 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2418)));
        _2463 = _2461 * (_2437 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2420)));
        _2464 = _2461 * (_2437 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2422)));
        _2465 = _2454 * 0.999000012874603271484375;
        _2475 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2475)
        {
            if ((cbInstanceData._m0[_428 + 7u].x + _2465) < 0.5)
            {
                _2631 = true;
                break;
            }
        }
        uint _2572 = _430 + uint(_2434.w);
        if ((cbInstanceData._m0[_2572].w < 1.0) && ((cbInstanceData._m0[_2572].w + _2465) < 0.5))
        {
            _2631 = true;
            break;
        }
        if ((_2458 + _236) < _2456.x)
        {
            _2631 = true;
            break;
        }
        _2631 = false;
        break;
    }
    float _2836;
    if (_2631)
    {
        discard_state = true;
        _2836 = 0.0;
    }
    else
    {
        _2836 = _2301;
    }
    SV_Target.x = _2462;
    SV_Target.y = _2463;
    SV_Target.z = _2464;
    SV_Target.w = _2836;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2301;
    discard_exit();
}


