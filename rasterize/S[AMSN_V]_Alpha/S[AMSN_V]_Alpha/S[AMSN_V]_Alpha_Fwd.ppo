#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _826;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    vec4 _224 = texture(sampler2D(S_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _227 = _224.x;
    float _228 = _224.y;
    float _229 = _224.z;
    float _231 = _224.w * TEXCOORD_1.z;
    vec4 _247 = texture(sampler2D(S_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _247.z;
    float _255 = (_247.x * 2.0) + (-1.0);
    float _257 = (_247.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3165 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))));
    float _267 = fma(_264, _208, fma(_257, _200 * TANGENT.x, (_186 * _178) * _255));
    float _270 = fma(_264, _209, fma(_257, _200 * TANGENT.y, (_186 * _179) * _255));
    float _273 = fma(_264, _210, fma(_257, _200 * TANGENT.z, (_186 * _180) * _255));
    float _277 = inversesqrt(dot(vec3(_267, _270, _273), vec3(_267, _270, _273)));
    float _278 = _277 * _267;
    float _279 = _277 * _270;
    float _280 = _277 * _273;
    float _3176 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _281 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
    float _3187 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _282 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
    float _3198 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3209 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3220 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3231 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _286 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _344 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _354 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _344);
    float _355 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _344);
    float _356 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _344);
    float _360 = inversesqrt(dot(vec3(_354, _355, _356), vec3(_354, _355, _356)));
    float _361 = _354 * _360;
    float _362 = _355 * _360;
    float _363 = _356 * _360;
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _391 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _394 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _397 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _410 = uint(roundEven(NORMAL.w)) * 13u;
    uint _413 = (_410 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _419 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))) * cbInstanceData._m0[_413].x;
    float _420 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)))) * cbInstanceData._m0[_413].y;
    float _421 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * cbInstanceData._m0[_413].z;
    float _3242 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _3253 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _425 = 1.0 - _286;
    float _426 = _422 * _425;
    float _427 = _423 * _425;
    float _428 = _424 * _425;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _286;
    float _434 = (_423 + (-0.039999999105930328369140625)) * _286;
    float _435 = (_424 + (-0.039999999105930328369140625)) * _286;
    float _436 = _433 + 0.039999999105930328369140625;
    float _438 = _434 + 0.039999999105930328369140625;
    float _439 = _435 + 0.039999999105930328369140625;
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _451 = _448.x * TEXCOORD_1.w;
    float _452 = dot(vec3(_278, _279, _280), vec3(_361, _362, _363));
    float _455 = _452 * 2.0;
    float _459 = (_455 * _278) - _361;
    float _460 = (_455 * _279) - _362;
    float _461 = (_455 * _280) - _363;
    float _465 = abs(dot(vec3(_361, _362, _363), vec3(_278, _279, _280)));
    float _3275 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = sqrt(_282);
    float _480 = exp2((_467 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_467 * 3.0));
    float _486 = (1.0 - _480) * ((_467 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _487 = _480 * _467;
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _825;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _550 = fma(_523, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _515));
        float _554 = fma(_523, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _515));
        float _558 = fma(_523, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _515));
        float _583 = _515 + _278;
        float _584 = _519 + _279;
        float _585 = _523 + _280;
        float _595 = fma(_585, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _583)) - _550;
        float _596 = fma(_585, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _583)) - _554;
        float _597 = fma(_585, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _583)) - _558;
        float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
        float _614 = ((_601 * _595) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_550 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _615 = ((_601 * _596) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_554 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _616 = ((_601 * _597) / cbModelParam._m0[34u].z) + ((((((_558 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        float _653 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_619.x + (-0.5));
        float _655 = _653 * (_619.y + (-0.5));
        float _656 = _653 * (_619.z + (-0.5));
        float _663 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_626.x + (-0.5));
        float _665 = _663 * (_626.y + (-0.5));
        float _666 = _663 * (_626.z + (-0.5));
        float _673 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_633.x + (-0.5));
        float _675 = _673 * (_633.y + (-0.5));
        float _676 = _673 * (_633.z + (-0.5));
        float _683 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_640.x + (-0.5));
        float _685 = _683 * (_640.y + (-0.5));
        float _686 = _683 * (_640.z + (-0.5));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = _654 * 0.5;
        float _691 = _664 * 0.5;
        float _692 = _674 * 0.5;
        float _693 = dot(vec3(_690, _691, _692), vec3(_690, _691, _692));
        float _698 = (_693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_693);
        float _707 = (dot(vec3(_278, _279, _280), vec3(_698 * _690, _698 * _691, _698 * _692)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _717 = sqrt(((_691 * _691) + (_690 * _690)) + (_692 * _692)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3323 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_719 + 1.0))) + _724) * _687;
        float _734 = _655 * 0.5;
        float _735 = _665 * 0.5;
        float _736 = _675 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _750 = (dot(vec3(_278, _279, _280), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _759 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3356 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_761 + 1.0))) + _766) * _688;
        float _776 = _656 * 0.5;
        float _777 = _666 * 0.5;
        float _778 = _676 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_278, _279, _280), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3389 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_803 + 1.0))) + _808) * _689;
        _825 = _656;
        _827 = _655;
        _828 = _654;
        _829 = _666;
        _830 = _665;
        _831 = _664;
        _832 = _676;
        _833 = _675;
        _834 = _674;
        _835 = _689;
        _836 = _688;
        _837 = _687;
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
    }
    else
    {
        _825 = _826;
        _827 = _826;
        _828 = _826;
        _829 = _826;
        _830 = _826;
        _831 = _826;
        _832 = _826;
        _833 = _826;
        _834 = _826;
        _835 = _826;
        _836 = _826;
        _837 = _826;
        _838 = 0.0;
        _839 = 0.0;
        _840 = 0.0;
    }
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _866 = fma(_523, cbModelParam._m0[30u].z, fma(_519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _515));
        float _870 = fma(_523, cbModelParam._m0[31u].z, fma(_519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _515));
        float _874 = fma(_523, cbModelParam._m0[32u].z, fma(_519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _515));
        float _897 = _515 + _278;
        float _898 = _519 + _279;
        float _899 = _523 + _280;
        float _909 = fma(_899, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897)) - _866;
        float _910 = fma(_899, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897)) - _870;
        float _911 = fma(_899, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897)) - _874;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_866 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_870 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[35u].z) + ((((((_874 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _965 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_932.x + (-0.5));
        float _967 = _965 * (_932.y + (-0.5));
        float _968 = _965 * (_932.z + (-0.5));
        float _975 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_939.x + (-0.5));
        float _977 = _975 * (_939.y + (-0.5));
        float _978 = _975 * (_939.z + (-0.5));
        float _985 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_946.x + (-0.5));
        float _987 = _985 * (_946.y + (-0.5));
        float _988 = _985 * (_946.z + (-0.5));
        float _995 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_953.x + (-0.5));
        float _997 = _995 * (_953.y + (-0.5));
        float _998 = _995 * (_953.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_278, _279, _280), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3452 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1029 + 1.0))) + _1034) * _999;
        float _1044 = _967 * 0.5;
        float _1045 = _977 * 0.5;
        float _1046 = _987 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_278, _279, _280), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3485 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1071 + 1.0))) + _1076) * _1000;
        float _1086 = _968 * 0.5;
        float _1087 = _978 * 0.5;
        float _1088 = _988 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_278, _279, _280), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3518 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1113 + 1.0))) + _1118) * _1001;
        _1135 = _968;
        _1136 = _967;
        _1137 = _966;
        _1138 = _978;
        _1139 = _977;
        _1140 = _976;
        _1141 = _988;
        _1142 = _987;
        _1143 = _986;
        _1144 = _1001;
        _1145 = _1000;
        _1146 = _999;
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _826;
        _1136 = _826;
        _1137 = _826;
        _1138 = _826;
        _1139 = _826;
        _1140 = _826;
        _1141 = _826;
        _1142 = _826;
        _1143 = _826;
        _1144 = _826;
        _1145 = _826;
        _1146 = _826;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _838)) + _838;
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _839)) + _839;
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _840)) + _840;
    float _1182 = fma(_1161, cbSceneParam._m0[89u].z, fma(_1160, cbSceneParam._m0[89u].y, _1159 * cbSceneParam._m0[89u].x));
    float _1185 = fma(_1161, cbSceneParam._m0[90u].z, fma(_1160, cbSceneParam._m0[90u].y, _1159 * cbSceneParam._m0[90u].x));
    float _1188 = fma(_1161, cbSceneParam._m0[91u].z, fma(_1160, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1159));
    float _1203 = _459 * 0.5;
    float _1204 = _460 * 0.5;
    float _1205 = _461 * 0.5;
    float _1206 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1209 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1136, _1139, _1142, _1145));
    float _1212 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1246;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1219 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_825, _829, _832, _835));
        float _1223 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_827, _830, _833, _836));
        float _1227 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_828, _831, _834, _837));
        float _1234 = dot(vec4(cbModelParam._m0[39u]), vec4(_1203, _1204, _1205, 1.0));
        _1246 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1246 = 1.0;
    }
    float _1257;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1248 = dot(vec4(cbModelParam._m0[40u]), vec4(_1203, _1204, _1205, 1.0));
        _1257 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1257 = 1.0;
    }
    float _1261 = (_1257 * cbModelParam._m0[1u].x) + (_1246 * (1.0 - cbModelParam._m0[1u].x));
    float _1271 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _282);
    float _1272 = isnan(_1271) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1271 : min(cbModelParam._m0[25u].z, _1271));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1321 = fma(_523, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515)) + cbModelParam._m0[13u].w;
        float _1325 = fma(_523, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515)) + cbModelParam._m0[14u].w;
        float _1329 = fma(_523, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515)) + cbModelParam._m0[15u].w;
        float _1332 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1335 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1338 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1366;
        if (_1332 > 0.0)
        {
            _1366 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1366 = frontier_phi_16_14_ladder;
        }
        float _1574;
        if (_1335 > 0.0)
        {
            _1574 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1574 = frontier_phi_25_21_ladder;
        }
        float _1828;
        if (_1338 > 0.0)
        {
            _1828 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1828 = frontier_phi_37_32_ladder;
        }
        float _1830 = isnan(_1574) ? _1366 : (isnan(_1366) ? _1574 : min(_1366, _1574));
        float _1831 = isnan(_1828) ? _1830 : (isnan(_1830) ? _1828 : min(_1830, _1828));
        float _1835 = (_1831 * _1332) + _1321;
        float _1836 = (_1831 * _1335) + _1325;
        float _1837 = (_1831 * _1338) + _1329;
        float _1838 = _1831 * 9.9999997473787516355514526367188e-05;
        float _1840 = (-1.0) - _1838;
        float _1842 = _1838 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1837 > _1842) || ((_1837 < _1840) || ((_1836 > _1842) || ((_1836 < _1840) || ((_1835 < _1840) || (_1835 > _1842))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1837, cbModelParam._m0[9u].z, fma(_1836, cbModelParam._m0[9u].y, _1835 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1837, cbModelParam._m0[10u].z, fma(_1836, cbModelParam._m0[10u].y, _1835 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1837, cbModelParam._m0[11u].z, fma(_1836, cbModelParam._m0[11u].y, _1835 * cbModelParam._m0[11u].x))), _1272);
            frontier_phi_15_37_ladder = _1965.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1965.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1965.x * cbModelParam._m0[1u].y;
        }
        _1354 = frontier_phi_15_37_ladder_2;
        _1356 = frontier_phi_15_37_ladder_1;
        _1358 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1272);
        _1354 = _1342.x * cbModelParam._m0[1u].y;
        _1356 = _1342.y * cbModelParam._m0[1u].y;
        _1358 = _1342.z * cbModelParam._m0[1u].y;
    }
    float _1362 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _282);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1362 : min(cbModelParam._m0[25u].w, _1362));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1420 = fma(_523, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515)) + cbModelParam._m0[21u].w;
        float _1424 = fma(_523, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515)) + cbModelParam._m0[22u].w;
        float _1428 = fma(_523, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515)) + cbModelParam._m0[23u].w;
        float _1431 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1434 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1437 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1579;
        if (_1431 > 0.0)
        {
            _1579 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1579 = frontier_phi_27_23_ladder;
        }
        float _1855;
        if (_1434 > 0.0)
        {
            _1855 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1855 = frontier_phi_39_34_ladder;
        }
        float _2068;
        if (_1437 > 0.0)
        {
            _2068 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2068 = frontier_phi_48_45_ladder;
        }
        float _2070 = isnan(_1855) ? _1579 : (isnan(_1579) ? _1855 : min(_1579, _1855));
        float _2071 = isnan(_2068) ? _2070 : (isnan(_2070) ? _2068 : min(_2070, _2068));
        float _2075 = (_2071 * _1431) + _1420;
        float _2076 = (_2071 * _1434) + _1424;
        float _2077 = (_2071 * _1437) + _1428;
        float _2078 = _2071 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2078;
        float _2081 = _2078 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2077 > _2081) || ((_2077 < _2079) || ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 < _2079) || (_2075 > _2081))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2077, cbModelParam._m0[17u].z, fma(_2076, cbModelParam._m0[17u].y, _2075 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2077, cbModelParam._m0[18u].z, fma(_2076, cbModelParam._m0[18u].y, _2075 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2077, cbModelParam._m0[19u].z, fma(_2076, cbModelParam._m0[19u].y, _2075 * cbModelParam._m0[19u].x))), _1363);
            frontier_phi_24_48_ladder = _2277.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2277.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2277.x * cbModelParam._m0[1u].z;
        }
        _1456 = frontier_phi_24_48_ladder_2;
        _1458 = frontier_phi_24_48_ladder_1;
        _1460 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1363);
        _1456 = _1440.x * cbModelParam._m0[1u].z;
        _1458 = _1440.y * cbModelParam._m0[1u].z;
        _1460 = _1440.z * cbModelParam._m0[1u].z;
    }
    float _1473 = (((_486 * _436) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1475 = (((_486 * _438) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1477 = (((_486 * _439) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1480 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, _1473 * cbSceneParam._m0[91u].x));
    uvec4 _1496 = floatBitsToUint(cbInstanceData._m0[_410 + 5u]);
    uint _1498 = _1496.x * 14u;
    uint _1499 = _1498 + 13u;
    float _1506 = _451 + (-1.0);
    float _1511 = (cbLight._m0[_1499].x * _1506) + 1.0;
    float _1512 = (cbLight._m0[_1499].y * _1506) + 1.0;
    float _1513 = (cbLight._m0[_1499].z * _1506) + 1.0;
    float _1514 = (cbLight._m0[_1499].w * _1506) + 1.0;
    uint _1515 = _1498 + 5u;
    float _1521 = isnan(1.0) ? _1512 : (isnan(_1512) ? 1.0 : min(_1512, 1.0));
    uint _1525 = _1498 + 4u;
    float _1532 = isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0));
    uint _1536 = _1498 | 1u;
    float _1547 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_278, _279, _280));
    float _1550 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_278, _279, _280));
    float _3654 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _3665 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1555 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.3183098733425140380859375;
    float _1557 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.3183098733425140380859375;
    float _1564 = ((cbLight._m0[_1515].x * _1521) * _1557) + ((cbLight._m0[_1525].x * _1532) * _1555);
    float _1565 = ((_1521 * cbLight._m0[_1515].y) * _1557) + ((_1532 * cbLight._m0[_1525].y) * _1555);
    float _1566 = ((_1521 * cbLight._m0[_1515].z) * _1557) + ((_1532 * cbLight._m0[_1525].z) * _1555);
    uvec4 _1571 = floatBitsToUint(cbLight._m0[_1498 + 12u]);
    bool _1573 = _1571.x == 0u;
    float _1584;
    float _1586;
    float _1588;
    if (_1573)
    {
        _1584 = _1564;
        _1586 = _1565;
        _1588 = _1566;
    }
    else
    {
        uint _1592 = _1498 + 6u;
        float _1608 = (dot(vec3(cbLight._m0[_1498 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1609 = _1608 * _1608;
        float _3676 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1611 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
        _1584 = (((cbLight._m0[_1592].x * 0.3183098733425140380859375) * _1610) * _1611) + _1564;
        _1586 = (((cbLight._m0[_1592].y * 0.3183098733425140380859375) * _1610) * _1611) + _1565;
        _1588 = (((cbLight._m0[_1592].z * 0.3183098733425140380859375) * _1610) * _1611) + _1566;
    }
    bool _1591 = _1571.y == 0u;
    float _1629;
    float _1631;
    float _1633;
    if (_1591)
    {
        _1629 = _1584;
        _1631 = _1586;
        _1633 = _1588;
    }
    else
    {
        uint _1799 = _1498 + 7u;
        float _1815 = (dot(vec3(cbLight._m0[_1498 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1816 = _1815 * _1815;
        float _3692 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1818 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
        _1629 = (((cbLight._m0[_1799].x * 0.3183098733425140380859375) * _1817) * _1818) + _1584;
        _1631 = (((cbLight._m0[_1799].y * 0.3183098733425140380859375) * _1817) * _1818) + _1586;
        _1633 = (((cbLight._m0[_1799].z * 0.3183098733425140380859375) * _1817) * _1818) + _1588;
    }
    uint _1636 = _1498 + 8u;
    float _1649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1498].w)) * _282) * 0.949999988079071044921875);
    float _1650 = _1649 * _1649;
    float _1651 = cbLight._m0[_1498].x + _361;
    float _1652 = cbLight._m0[_1498].y + _362;
    float _1653 = cbLight._m0[_1498].z + _363;
    float _1657 = inversesqrt(dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653)));
    float _1658 = _1657 * _1651;
    float _1659 = _1657 * _1652;
    float _1660 = _1657 * _1653;
    float _1661 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1498].xyz));
    float _3708 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1664 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _1665 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1666 = dot(vec3(_278, _279, _280), vec3(_1658, _1659, _1660));
    float _3730 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1669 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1670 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_1658, _1659, _1660));
    float _3741 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1674 = _1650 * _1650;
    float _1678 = ((_1669 * _1669) * (_1674 + (-1.0))) + 1.0;
    float _1686 = exp2(log2(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * 5.0);
    float _1687 = 0.959999978542327880859375 - _433;
    float _1689 = 0.959999978542327880859375 - _434;
    float _1690 = 0.959999978542327880859375 - _435;
    float _1697 = 1.0 - _1650;
    float _1708 = (0.5 / (((_1665 * ((_1664 * _1697) + _1650)) + 9.9999999392252902907785028219223e-09) + (((_1665 * _1697) + _1650) * _1664))) * _1664;
    float _3752 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1710 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1674 / ((_1678 * _1678) * 3.141590118408203125));
    uint _1721 = _1498 + 9u;
    float _1732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _282) * 0.949999988079071044921875);
    float _1733 = _1732 * _1732;
    float _1734 = cbLight._m0[_1536].x + _361;
    float _1735 = cbLight._m0[_1536].y + _362;
    float _1736 = cbLight._m0[_1536].z + _363;
    float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
    float _1741 = _1740 * _1734;
    float _1742 = _1740 * _1735;
    float _1743 = _1740 * _1736;
    float _1744 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1536].xyz));
    float _3763 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1748 = dot(vec3(_278, _279, _280), vec3(_1741, _1742, _1743));
    float _3774 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1741, _1742, _1743));
    float _3785 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1733 * _1733;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1767 = exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0);
    float _1774 = 1.0 - _1733;
    float _1784 = (0.5 / (((_1665 * ((_1747 * _1774) + _1733)) + 9.9999999392252902907785028219223e-09) + (((_1665 * _1774) + _1733) * _1747))) * _1747;
    float _3796 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    float _1796 = (((((_1767 * _1687) + _436) * cbLight._m0[_1721].x) * _1786) * _1521) + (((((_1686 * _1687) + _436) * cbLight._m0[_1636].x) * _1710) * _1532);
    float _1797 = (((((_1767 * _1689) + _438) * cbLight._m0[_1721].y) * _1786) * _1521) + (((((_1686 * _1689) + _438) * cbLight._m0[_1636].y) * _1710) * _1532);
    float _1798 = (((((_1767 * _1690) + _439) * cbLight._m0[_1721].z) * _1786) * _1521) + (((((_1686 * _1690) + _439) * cbLight._m0[_1636].z) * _1710) * _1532);
    float _1860;
    float _1862;
    float _1864;
    if (_1573)
    {
        _1860 = _1796;
        _1862 = _1797;
        _1864 = _1798;
    }
    else
    {
        uint _1866 = _1498 + 2u;
        uint _1870 = _1498 + 10u;
        float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _282) * 0.949999988079071044921875);
        float _1885 = _1884 * _1884;
        float _1886 = cbLight._m0[_1866].x + _361;
        float _1887 = cbLight._m0[_1866].y + _362;
        float _1888 = cbLight._m0[_1866].z + _363;
        float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
        float _1893 = _1892 * _1886;
        float _1894 = _1892 * _1887;
        float _1895 = _1892 * _1888;
        float _1896 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1866].xyz));
        float _3807 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1899 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1900 = dot(vec3(_278, _279, _280), vec3(_1893, _1894, _1895));
        float _3818 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1903 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1904 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_1893, _1894, _1895));
        float _3829 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1908 = _1885 * _1885;
        float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
        float _1919 = exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0);
        float _1926 = 1.0 - _1885;
        float _1936 = (0.5 / (((_1665 * ((_1899 * _1926) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1665 * _1926) + _1885) * _1899))) * _1899;
        float _3840 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1938 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
        float _1939 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
        _1860 = (((((_1919 * _1687) + _436) * cbLight._m0[_1870].x) * _1938) * _1939) + _1796;
        _1862 = (((((_1919 * _1689) + _438) * cbLight._m0[_1870].y) * _1938) * _1939) + _1797;
        _1864 = (((((_1919 * _1690) + _439) * cbLight._m0[_1870].z) * _1938) * _1939) + _1798;
    }
    float _1974;
    float _1976;
    float _1978;
    if (_1591)
    {
        _1974 = _1860;
        _1976 = _1862;
        _1978 = _1864;
    }
    else
    {
        uint _1985 = _1498 + 3u;
        uint _1989 = _1498 + 11u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _282) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _361;
        float _2006 = cbLight._m0[_1985].y + _362;
        float _2007 = cbLight._m0[_1985].z + _363;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1985].xyz));
        float _3856 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _2019 = dot(vec3(_278, _279, _280), vec3(_2012, _2013, _2014));
        float _3867 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _3878 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0);
        float _2045 = 1.0 - _2004;
        float _2055 = (0.5 / (((_1665 * ((_2018 * _2045) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1665 * _2045) + _2004) * _2018))) * _2018;
        float _3889 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2057 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2058 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
        _1974 = (((((_2038 * _1687) + _436) * cbLight._m0[_1989].x) * _2057) * _2058) + _1860;
        _1976 = (((((_2038 * _1689) + _438) * cbLight._m0[_1989].y) * _2057) * _2058) + _1862;
        _1978 = (((((_2038 * _1690) + _439) * cbLight._m0[_1989].z) * _2057) * _2058) + _1864;
    }
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1496.y == 0u)
    {
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2133;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2133;
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2133;
        uvec4 _2148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2149 = _2148.x;
        uint _2160 = uint((float(_2148.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2149))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2149)));
        float _2170 = (log2(_2136 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2171 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        uint _2174 = uint(isnan(14.0) ? _2171 : (isnan(_2171) ? 14.0 : min(_2171, 14.0)));
        uvec4 _2179 = texelFetch(g_lightClusterGridBuffer, int(((_2174 << 2u) + (_2160 << 6u)) >> 2u));
        uint _2180 = _2179.x;
        uint _2181 = _2148.z;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        if (((((1u << ((_2181 >> 4u) & 15u)) + 4294967295u) & _2180) == 0u) || ((_2181 & 240u) == 0u))
        {
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
        }
        else
        {
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2426 = 0.0;
            float _2427 = 0.0;
            float _2428 = 0.0;
            float _2429 = 0.0;
            float _2430 = 0.0;
            float _2431 = 0.0;
            uint _2432 = 0u;
            uint _2441;
            bool _2442;
            for (;;)
            {
                _2441 = texelFetch(g_lightClassification, int((((_2174 << 5u) + (_2160 << 9u)) + (_2432 << 2u)) >> 2u)).x;
                _2442 = _2441 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2442)
                {
                    frontier_phi_63_pred = _2431;
                    frontier_phi_63_pred_1 = _2430;
                    frontier_phi_63_pred_2 = _2429;
                    frontier_phi_63_pred_3 = _2428;
                    frontier_phi_63_pred_4 = _2427;
                    frontier_phi_63_pred_5 = _2426;
                }
                else
                {
                    float _2550;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    uint _2556;
                    _2550 = _2426;
                    _2551 = _2427;
                    _2552 = _2428;
                    _2553 = _2429;
                    _2554 = _2430;
                    _2555 = _2431;
                    _2556 = _2441;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    for (;;)
                    {
                        uint _2560 = uint(findLSB(_2556)) + (_2432 << 5u);
                        uint _2557 = (_2556 + 4294967295u) & _2556;
                        uint _2562 = _2560 * 48u;
                        vec4 _2576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2562)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 3u)).x));
                        uint _2582 = (_2560 * 48u) + 4u;
                        vec4 _2595 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2601 = (_2560 * 48u) + 8u;
                        vec3 _2612 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x));
                        float _2616 = _2576.x - _2134;
                        float _2617 = _2576.y - _2135;
                        float _2618 = _2576.z - _2136;
                        float _2619 = dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618));
                        float _2622 = inversesqrt(_2619);
                        float _2623 = _2622 * _2616;
                        float _2624 = _2622 * _2617;
                        float _2625 = _2622 * _2618;
                        float _2626 = dot(vec3(_391, _394, _397), vec3(_2623, _2624, _2625));
                        float _2631 = 1.0 - (_2619 * _2576.w);
                        float _3915 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                        float _2632 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                        float _2633 = sqrt(_2619) * _2595.w;
                        float _2636 = 1.39999997615814208984375 / (_2633 + 1.39999997615814208984375);
                        float _2637 = _2636 * _2636;
                        float _2640 = ((1.0 - _2637) * _2626) + _2637;
                        float _2643 = _2633 * _2633;
                        float _2647 = ((isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))) * _2632) / ((_2643 * 0.699999988079071044921875) + 1.0);
                        float _2651 = (-0.0) - _2134;
                        float _2652 = (-0.0) - _2135;
                        float _2653 = (-0.0) - _2136;
                        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
                        float _2658 = _2657 * _2651;
                        float _2659 = _2657 * _2652;
                        float _2660 = _2657 * _2653;
                        float _2668 = exp2(log2(1.0 / ((_2643 * 3.5) + 5.0)) * 0.25);
                        float _2669 = 1.0 - _467;
                        float _2676 = sqrt(1.0 - ((1.0 - (_2669 * _2669)) * (1.0 - (_2668 * _2668))));
                        float _2677 = _2676 * _2676;
                        float _2678 = _2677 * _2677;
                        float _2679 = _2658 + _2623;
                        float _2680 = _2659 + _2624;
                        float _2681 = _2660 + _2625;
                        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
                        float _2689 = dot(vec3(_391, _394, _397), vec3(_2658, _2659, _2660));
                        float _3931 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2692 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                        float _2693 = dot(vec3(_391, _394, _397), vec3(_2685 * _2679, _2685 * _2680, _2685 * _2681));
                        float _3942 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2696 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                        float _2700 = ((_2696 * _2696) * (_2678 + (-1.0))) + 1.0;
                        float _2701 = _2636 * _2677;
                        float _2702 = _2701 * _2701;
                        float _2705 = ((1.0 - _2702) * _2626) + _2702;
                        float _3953 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2706 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2707 = 1.0 - _2677;
                        float _2717 = (0.5 / (((_2706 * ((_2692 * _2707) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2706 * _2707) + _2677) * _2692))) * _2706;
                        float _3964 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2728 = (((_2678 * 3.1415927410125732421875) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) / ((_2700 * _2700) * ((_2643 * 2.1991131305694580078125) + 3.141590118408203125))) * _2632;
                        _2485 = (_2647 * _2595.x) + _2553;
                        _2486 = (_2647 * _2595.y) + _2554;
                        _2487 = (_2647 * _2595.z) + _2555;
                        _2482 = (_2728 * _2612.x) + _2550;
                        _2483 = (_2728 * _2612.y) + _2551;
                        _2484 = (_2728 * _2612.z) + _2552;
                        if (_2557 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2550 = _2482;
                            _2551 = _2483;
                            _2552 = _2484;
                            _2553 = _2485;
                            _2554 = _2486;
                            _2555 = _2487;
                            _2556 = _2557;
                        }
                    }
                    frontier_phi_63_pred = _2487;
                    frontier_phi_63_pred_1 = _2486;
                    frontier_phi_63_pred_2 = _2485;
                    frontier_phi_63_pred_3 = _2484;
                    frontier_phi_63_pred_4 = _2483;
                    frontier_phi_63_pred_5 = _2482;
                }
                _2293 = frontier_phi_63_pred;
                _2291 = frontier_phi_63_pred_1;
                _2289 = frontier_phi_63_pred_2;
                _2287 = frontier_phi_63_pred_3;
                _2285 = frontier_phi_63_pred_4;
                _2283 = frontier_phi_63_pred_5;
                uint _2433 = _2432 + 1u;
                if (_2433 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2426 = _2283;
                    _2427 = _2285;
                    _2428 = _2287;
                    _2429 = _2289;
                    _2430 = _2291;
                    _2431 = _2293;
                    _2432 = _2433;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
        }
        uvec4 _2296 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2297 = _2296.z;
        uint _2299 = (_2297 >> 8u) & 15u;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        if (((4294967295u << _2299) & _2180) == 0u)
        {
            _2394 = _2282;
            _2396 = _2284;
            _2398 = _2286;
            _2400 = _2288;
            _2402 = _2290;
            _2404 = _2292;
        }
        else
        {
            float _2419 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
            float _2420 = _2419 * _2134;
            float _2421 = _2419 * _2135;
            float _2422 = _2419 * _2136;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2299 < ((_2297 >> 12u) & 15u))
            {
                float _2395;
                float _2397;
                float _2399;
                float _2401;
                float _2403;
                float _2405;
                float _2533 = _2282;
                float _2534 = _2284;
                float _2535 = _2286;
                float _2536 = _2288;
                float _2537 = _2290;
                float _2538 = _2292;
                uint _2539 = _2299;
                uint _2548;
                bool _2549;
                for (;;)
                {
                    _2548 = texelFetch(g_lightClassification, int((((_2174 << 5u) + (_2160 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                    _2549 = _2548 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2549)
                    {
                        frontier_phi_69_pred = _2538;
                        frontier_phi_69_pred_1 = _2537;
                        frontier_phi_69_pred_2 = _2536;
                        frontier_phi_69_pred_3 = _2535;
                        frontier_phi_69_pred_4 = _2534;
                        frontier_phi_69_pred_5 = _2533;
                    }
                    else
                    {
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _2746 = _2533;
                        float _2747 = _2534;
                        float _2748 = _2535;
                        float _2749 = _2536;
                        float _2750 = _2537;
                        float _2751 = _2538;
                        uint _2752 = _2548;
                        uint _2753;
                        vec4 _2778;
                        float _2779;
                        vec4 _2794;
                        vec3 _2806;
                        vec4 _2822;
                        vec4 _2838;
                        float _2885;
                        bool _2886;
                        for (;;)
                        {
                            uint _2763 = ((_2539 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2752));
                            _2753 = (_2752 + 4294967295u) & _2752;
                            uint _2765 = _2763 * 40u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            _2779 = _2778.w;
                            uint _2781 = (_2763 * 40u) + 4u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2796 = (_2763 * 40u) + 8u;
                            _2806 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x));
                            uint _2809 = (_2763 * 40u) + 16u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2825 = (_2763 * 40u) + 20u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            uint _2841 = (_2763 * 40u) + 24u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2860 = (_2763 * 40u) + 28u;
                            vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2885 = fma(_2136, _2873.z, fma(_2135, _2873.y, _2873.x * _2134)) + _2873.w;
                            _2886 = !((fma(_2136, _2854.z, fma(_2135, _2854.y, _2854.x * _2134)) + _2854.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2886)
                            {
                                float _2913 = _2778.x - _2134;
                                float _2914 = _2778.y - _2135;
                                float _2915 = _2778.z - _2136;
                                float _2916 = dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915));
                                float _2919 = inversesqrt(_2916);
                                float _2920 = _2919 * _2913;
                                float _2921 = _2919 * _2914;
                                float _2922 = _2919 * _2915;
                                float _2926 = 1.0 - (_2916 / (_2779 * _2779));
                                float _3975 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2927 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _2931 = sqrt(_2916) * _2794.w;
                                float _2933 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                                float _2934 = _2933 * _2933;
                                float _2937 = ((1.0 - _2934) * dot(vec3(_2920, _2921, _2922), vec3(_391, _394, _397))) + _2934;
                                float _2940 = _2931 * _2931;
                                float _2944 = (fma(_2136, _2822.z, fma(_2135, _2822.y, _2822.x * _2134)) + _2822.w) / _2885;
                                float _2945 = (fma(_2136, _2838.z, fma(_2135, _2838.y, _2838.x * _2134)) + _2838.w) / _2885;
                                float _2949 = 1.0 - dot(vec2(_2944, _2945), vec2(_2944, _2945));
                                float _3991 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2950 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                                float _2951 = _2950 * (((isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * _2927) / ((_2940 * 0.699999988079071044921875) + 1.0));
                                float _2963 = exp2(log2(1.0 / ((_2940 * 3.5) + 5.0)) * 0.25);
                                float _2964 = 1.0 - _467;
                                float _2971 = sqrt(1.0 - ((1.0 - (_2964 * _2964)) * (1.0 - (_2963 * _2963))));
                                float _2972 = _2971 * _2971;
                                float _2973 = _2972 * _2972;
                                float _2974 = _2920 - _2420;
                                float _2975 = _2921 - _2421;
                                float _2976 = _2922 - _2422;
                                float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                                float _2984 = dot(vec3(_391, _394, _397), vec3((-0.0) - _2420, (-0.0) - _2421, (-0.0) - _2422));
                                float _4002 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2987 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                                float _2988 = dot(vec3(_391, _394, _397), vec3(_2980 * _2974, _2980 * _2975, _2980 * _2976));
                                float _4013 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2991 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _2995 = ((_2991 * _2991) * (_2973 + (-1.0))) + 1.0;
                                float _2996 = _2933 * _2972;
                                float _2997 = _2996 * _2996;
                                float _3003 = ((1.0 - _2997) * dot(vec3(_391, _394, _397), vec3(_2920, _2921, _2922))) + _2997;
                                float _4024 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3005 = 1.0 - _2972;
                                float _3015 = (0.5 / (((_3004 * ((_2987 * _3005) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2972) * _2987))) * _3004;
                                float _4035 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3025 = (_2950 * _2927) * (((_2973 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_2995 * _2995) * ((_2940 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2951 * _2794.z;
                                frontier_phi_75_pred_1 = _2951 * _2794.y;
                                frontier_phi_75_pred_2 = _2951 * _2794.x;
                                frontier_phi_75_pred_3 = _3025 * _2806.z;
                                frontier_phi_75_pred_4 = _3025 * _2806.y;
                                frontier_phi_75_pred_5 = _3025 * _2806.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3034 = frontier_phi_75_pred;
                            _3033 = frontier_phi_75_pred_1;
                            _3032 = frontier_phi_75_pred_2;
                            _3031 = frontier_phi_75_pred_3;
                            _3030 = frontier_phi_75_pred_4;
                            _3029 = frontier_phi_75_pred_5;
                            _2736 = _3032 + _2749;
                            _2737 = _3033 + _2750;
                            _2738 = _3034 + _2751;
                            _2733 = _3029 + _2746;
                            _2734 = _3030 + _2747;
                            _2735 = _3031 + _2748;
                            if (_2753 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2746 = _2733;
                                _2747 = _2734;
                                _2748 = _2735;
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2753;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2738;
                        frontier_phi_69_pred_1 = _2737;
                        frontier_phi_69_pred_2 = _2736;
                        frontier_phi_69_pred_3 = _2735;
                        frontier_phi_69_pred_4 = _2734;
                        frontier_phi_69_pred_5 = _2733;
                    }
                    _2405 = frontier_phi_69_pred;
                    _2403 = frontier_phi_69_pred_1;
                    _2401 = frontier_phi_69_pred_2;
                    _2399 = frontier_phi_69_pred_3;
                    _2397 = frontier_phi_69_pred_4;
                    _2395 = frontier_phi_69_pred_5;
                    uint _2540 = _2539 + 1u;
                    if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2533 = _2395;
                        _2534 = _2397;
                        _2535 = _2399;
                        _2536 = _2401;
                        _2537 = _2403;
                        _2538 = _2405;
                        _2539 = _2540;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2405;
                frontier_phi_57_58_ladder_1 = _2403;
                frontier_phi_57_58_ladder_2 = _2401;
                frontier_phi_57_58_ladder_3 = _2399;
                frontier_phi_57_58_ladder_4 = _2397;
                frontier_phi_57_58_ladder_5 = _2395;
            }
            else
            {
                frontier_phi_57_58_ladder = _2292;
                frontier_phi_57_58_ladder_1 = _2290;
                frontier_phi_57_58_ladder_2 = _2288;
                frontier_phi_57_58_ladder_3 = _2286;
                frontier_phi_57_58_ladder_4 = _2284;
                frontier_phi_57_58_ladder_5 = _2282;
            }
            _2394 = frontier_phi_57_58_ladder_5;
            _2396 = frontier_phi_57_58_ladder_4;
            _2398 = frontier_phi_57_58_ladder_3;
            _2400 = frontier_phi_57_58_ladder_2;
            _2402 = frontier_phi_57_58_ladder_1;
            _2404 = frontier_phi_57_58_ladder;
        }
        float _2409 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2192 = (_2409 * _2400) + _1629;
        _2194 = (_2409 * _2402) + _1631;
        _2196 = (_2409 * _2404) + _1633;
        _2198 = ((_2394 * _436) * _2409) + _1974;
        _2200 = ((_2396 * _438) * _2409) + _1976;
        _2202 = ((_2398 * _439) * _2409) + _1978;
    }
    else
    {
        _2192 = _1629;
        _2194 = _1631;
        _2196 = _1633;
        _2198 = _1974;
        _2200 = _1976;
        _2202 = _1978;
    }
    float _4051 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4062 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4073 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4084 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _2227 = cbInstanceData._m0[_410 + 6u].w * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)));
    float _2232 = _369 / cbSceneParam._m0[86u].x;
    float _2233 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2247 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2232, _2233, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2249 = _2247.x;
    float _2250 = _2247.y;
    float _2251 = _2247.z;
    float _2252 = _2247.w;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2307 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2308 = _2307 / _302;
        float _2319 = _2308 * _354;
        float _2320 = _355 * _2308;
        float _2321 = (-0.0) - _2320;
        float _2322 = _2308 * _356;
        float _2324 = (cbSceneParam._m0[77u].w * _2321) / _2307;
        float _2325 = _2324 + cbSceneParam._m0[79u].w;
        float _2326 = cbSceneParam._m0[79u].w - _2320;
        float _2332 = sqrt(((_2319 * _2319) + (_2320 * _2320)) + (_2322 * _2322));
        float _2335 = (1.0 - (cbSceneParam._m0[77u].w / _2307)) * _2332;
        float _2340 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2342 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2495;
        if (abs((_2321 - _2324) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2495 = ((((_2325 > 0.0) ? exp2(_2340 * _2325) : (2.0 - exp2(_2342 * _2325))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2335;
        }
        else
        {
            float _2455 = 1.0 / cbSceneParam._m0[80u].x;
            float _2456 = isnan(_2326) ? _2325 : (isnan(_2325) ? _2326 : max(_2325, _2326));
            float _2457 = isnan(_2326) ? _2325 : (isnan(_2325) ? _2326 : min(_2325, _2326));
            float _2466 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : min(_2456, 0.0));
            float _2467 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : min(_2457, 0.0));
            _2495 = ((abs(_2332 / _2321) * cbSceneParam._m0[80u].y) * ((((_2466 - _2467) * 2.0) - ((exp2(_2340 * (isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0)))) - exp2(_2340 * (isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0))))) * _2455)) - ((exp2(_2342 * _2466) - exp2(_2342 * _2467)) * _2455))) + (_2335 * cbSceneParam._m0[80u].z);
        }
        vec4 _2497 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2232, _2233, 1.0), 0.0);
        float _2506 = exp2((_2495 * (-1.44269502162933349609375)) * (1.0 - _2497.w));
        float _2507 = log2(_2506);
        float _2523 = log2(_2252);
        _2344 = (exp2(_2523 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].x)) * _2497.x) / cbSceneParam._m0[78u].x)) + _2249;
        _2346 = (exp2(_2523 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].y)) * _2497.y) / cbSceneParam._m0[78u].y)) + _2250;
        _2348 = (exp2(_2523 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].z)) * _2497.z) / cbSceneParam._m0[78u].z)) + _2251;
        _2350 = _2506 * _2252;
    }
    else
    {
        _2344 = _2249;
        _2346 = _2250;
        _2348 = _2251;
        _2350 = _2252;
    }
    float _2362 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2363 = _2362 == 3.0;
    float _2364 = log2(_2350);
    float _2371 = exp2(_2364 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2192 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _451))) + ((_2198 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1261)) * cbPerFrame._m0[3u].x));
    float _2372 = exp2(_2364 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2194 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _451))) + ((_2200 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1261)) * cbPerFrame._m0[3u].x));
    float _2373 = exp2(_2364 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2196 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _451))) + ((_2202 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1261)) * cbPerFrame._m0[3u].x));
    float _2382 = (_2362 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2382 * (_2363 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2344)));
    SV_Target.y = _2382 * (_2363 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2346)));
    SV_Target.z = _2382 * (_2363 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2348)));
    SV_Target.w = _2227;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2227;
}


