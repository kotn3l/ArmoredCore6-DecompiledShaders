#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _948;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _296 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3283 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _304 = (_297 * ((_265.x * cbMtdParam._m0[10u].x) - _240)) + _240;
    float _305 = (_297 * ((_265.y * cbMtdParam._m0[10u].y) - _241)) + _241;
    float _306 = (_297 * ((_265.z * cbMtdParam._m0[10u].z) - _242)) + _242;
    vec4 _318 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _320 = _318.x;
    float _322 = _320 - (_320 * TEXCOORD_5.x);
    vec4 _339 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _347 = (_339.x * 2.0) + (-1.0);
    float _349 = (_339.y * 2.0) + (-1.0);
    float _350 = dot(vec2(_347, _349), vec2(_347, _349));
    float _3294 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    float _356 = _339.z * cbMtdParam._m0[12u].y;
    vec4 _369 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _383 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_369.z * cbMtdParam._m0[12u].x) - _356)) + _356;
    float _389 = ((((_369.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _347;
    float _390 = ((((_369.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _349;
    float _393 = fma(_355, _204 * NORMAL.x, fma(_390, _211 * TANGENT.x, (_197 * _189) * _389));
    float _396 = fma(_355, _204 * NORMAL.y, fma(_390, _211 * TANGENT.y, (_197 * _190) * _389));
    float _399 = fma(_355, _204 * NORMAL.z, fma(_390, _211 * TANGENT.z, (_197 * _191) * _389));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _3305 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _407 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3327 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3338 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3349 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _411 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _427 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _478 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _468);
    float _479 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _468);
    float _480 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _468);
    float _484 = inversesqrt(dot(vec3(_478, _479, _480), vec3(_478, _479, _480)));
    float _485 = _478 * _484;
    float _486 = _479 * _484;
    float _487 = _480 * _484;
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_406, cbSceneParam._m0[5u].z, fma(_405, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _404));
    float _517 = fma(_406, cbSceneParam._m0[6u].z, fma(_405, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _404));
    float _520 = fma(_406, cbSceneParam._m0[7u].z, fma(_405, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _404));
    uint _533 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = (_533 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _541 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_535].x;
    float _542 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_535].y;
    float _543 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_535].z;
    float _3360 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _547 = 1.0 - _411;
    float _548 = _544 * _547;
    float _549 = _545 * _547;
    float _550 = _546 * _547;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _411;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _411;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _411;
    float _558 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    float _561 = _557 + 0.039999999105930328369140625;
    vec4 _570 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _573 = _570.x * TEXCOORD_5.w;
    float _574 = dot(vec3(_404, _405, _406), vec3(_485, _486, _487));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _404) - _485;
    float _582 = (_577 * _405) - _486;
    float _583 = (_577 * _406) - _487;
    float _587 = abs(dot(vec3(_485, _486, _487), vec3(_404, _405, _406)));
    float _3393 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_407);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _608 = (1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _609 = _602 * _589;
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _676 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _680 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _705 = _637 + _404;
        float _706 = _641 + _405;
        float _707 = _645 + _406;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _672;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _676;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _680;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_404, _405, _406), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3441 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_404, _405, _406), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3474 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_404, _405, _406), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3507 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _992 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _996 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1019 = _637 + _404;
        float _1020 = _641 + _405;
        float _1021 = _645 + _406;
        float _1031 = fma(_1021, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019)) - _988;
        float _1032 = fma(_1021, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019)) - _992;
        float _1033 = fma(_1021, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019)) - _996;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_988 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_992 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[35u].z) + ((((((_996 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1087 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1054.x + (-0.5));
        float _1089 = _1087 * (_1054.y + (-0.5));
        float _1090 = _1087 * (_1054.z + (-0.5));
        float _1097 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1061.x + (-0.5));
        float _1099 = _1097 * (_1061.y + (-0.5));
        float _1100 = _1097 * (_1061.z + (-0.5));
        float _1107 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1068.x + (-0.5));
        float _1109 = _1107 * (_1068.y + (-0.5));
        float _1110 = _1107 * (_1068.z + (-0.5));
        float _1117 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1075.x + (-0.5));
        float _1119 = _1117 * (_1075.y + (-0.5));
        float _1120 = _1117 * (_1075.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_404, _405, _406), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3570 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1151 + 1.0))) + _1156) * _1121;
        float _1166 = _1089 * 0.5;
        float _1167 = _1099 * 0.5;
        float _1168 = _1109 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_404, _405, _406), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3603 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1193 + 1.0))) + _1198) * _1122;
        float _1208 = _1090 * 0.5;
        float _1209 = _1100 * 0.5;
        float _1210 = _1110 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_404, _405, _406), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3636 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1235 + 1.0))) + _1240) * _1123;
        _1257 = _1090;
        _1258 = _1089;
        _1259 = _1088;
        _1260 = _1100;
        _1261 = _1099;
        _1262 = _1098;
        _1263 = _1110;
        _1264 = _1109;
        _1265 = _1108;
        _1266 = _1123;
        _1267 = _1122;
        _1268 = _1121;
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _948;
        _1258 = _948;
        _1259 = _948;
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1304 = fma(_1283, cbSceneParam._m0[89u].z, fma(_1282, cbSceneParam._m0[89u].y, _1281 * cbSceneParam._m0[89u].x));
    float _1307 = fma(_1283, cbSceneParam._m0[90u].z, fma(_1282, cbSceneParam._m0[90u].y, _1281 * cbSceneParam._m0[90u].x));
    float _1310 = fma(_1283, cbSceneParam._m0[91u].z, fma(_1282, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1281));
    float _1325 = _581 * 0.5;
    float _1326 = _582 * 0.5;
    float _1327 = _583 * 0.5;
    float _1328 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1331 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1334 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1368;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1341 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_947, _951, _954, _957));
        float _1345 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_949, _952, _955, _958));
        float _1349 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_950, _953, _956, _959));
        float _1356 = dot(vec4(cbModelParam._m0[39u]), vec4(_1325, _1326, _1327, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1379;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1370 = dot(vec4(cbModelParam._m0[40u]), vec4(_1325, _1326, _1327, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1383 = (_1379 * cbModelParam._m0[1u].x) + (_1368 * (1.0 - cbModelParam._m0[1u].x));
    float _1393 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _407);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1393 : min(cbModelParam._m0[25u].z, _1393));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1443 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1447 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1451 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1454 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1457 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1460 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1488;
        if (_1454 > 0.0)
        {
            _1488 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1488 = frontier_phi_14_12_ladder;
        }
        float _1694;
        if (_1457 > 0.0)
        {
            _1694 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1694 = frontier_phi_23_19_ladder;
        }
        float _1948;
        if (_1460 > 0.0)
        {
            _1948 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1948 = frontier_phi_35_30_ladder;
        }
        float _1950 = isnan(_1694) ? _1488 : (isnan(_1488) ? _1694 : min(_1488, _1694));
        float _1951 = isnan(_1948) ? _1950 : (isnan(_1950) ? _1948 : min(_1950, _1948));
        float _1955 = (_1951 * _1454) + _1443;
        float _1956 = (_1951 * _1457) + _1447;
        float _1957 = (_1951 * _1460) + _1451;
        float _1958 = _1951 * 9.9999997473787516355514526367188e-05;
        float _1960 = (-1.0) - _1958;
        float _1962 = _1958 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1957 > _1962) || ((_1957 < _1960) || ((_1956 > _1962) || ((_1956 < _1960) || ((_1955 < _1960) || (_1955 > _1962))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2085 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1957, cbModelParam._m0[9u].z, fma(_1956, cbModelParam._m0[9u].y, _1955 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1957, cbModelParam._m0[10u].z, fma(_1956, cbModelParam._m0[10u].y, _1955 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1957, cbModelParam._m0[11u].z, fma(_1956, cbModelParam._m0[11u].y, _1955 * cbModelParam._m0[11u].x))), _1394);
            frontier_phi_13_35_ladder = _2085.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2085.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2085.x * cbModelParam._m0[1u].y;
        }
        _1476 = frontier_phi_13_35_ladder_2;
        _1478 = frontier_phi_13_35_ladder_1;
        _1480 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1394);
        _1476 = _1464.x * cbModelParam._m0[1u].y;
        _1478 = _1464.y * cbModelParam._m0[1u].y;
        _1480 = _1464.z * cbModelParam._m0[1u].y;
    }
    float _1484 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _407);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1484 : min(cbModelParam._m0[25u].w, _1484));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1542 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1546 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1550 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1553 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1556 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1559 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1699;
        if (_1553 > 0.0)
        {
            _1699 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1699 = frontier_phi_25_21_ladder;
        }
        float _1975;
        if (_1556 > 0.0)
        {
            _1975 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1975 = frontier_phi_37_32_ladder;
        }
        float _2188;
        if (_1559 > 0.0)
        {
            _2188 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2188 = frontier_phi_46_43_ladder;
        }
        float _2190 = isnan(_1975) ? _1699 : (isnan(_1699) ? _1975 : min(_1699, _1975));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1553) + _1542;
        float _2196 = (_2191 * _1556) + _1546;
        float _2197 = (_2191 * _1559) + _1550;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2198;
        float _2201 = _2198 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2197 > _2201) || ((_2197 < _2199) || ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 < _2199) || (_2195 > _2201))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2197, cbModelParam._m0[17u].z, fma(_2196, cbModelParam._m0[17u].y, _2195 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2197, cbModelParam._m0[18u].z, fma(_2196, cbModelParam._m0[18u].y, _2195 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2197, cbModelParam._m0[19u].z, fma(_2196, cbModelParam._m0[19u].y, _2195 * cbModelParam._m0[19u].x))), _1485);
            frontier_phi_22_46_ladder = _2396.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2396.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2396.x * cbModelParam._m0[1u].z;
        }
        _1578 = frontier_phi_22_46_ladder_2;
        _1580 = frontier_phi_22_46_ladder_1;
        _1582 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1485);
        _1578 = _1562.x * cbModelParam._m0[1u].z;
        _1580 = _1562.y * cbModelParam._m0[1u].z;
        _1582 = _1562.z * cbModelParam._m0[1u].z;
    }
    float _1595 = (((_608 * _558) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1597 = (((_608 * _560) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1599 = (((_608 * _561) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1602 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, _1595 * cbSceneParam._m0[91u].x));
    uvec4 _1618 = floatBitsToUint(cbInstanceData._m0[_533 + 5u]);
    uint _1620 = _1618.x * 14u;
    uint _1621 = _1620 + 13u;
    float _1628 = _573 + (-1.0);
    float _1633 = (cbLight._m0[_1621].x * _1628) + 1.0;
    float _1634 = (cbLight._m0[_1621].y * _1628) + 1.0;
    float _1635 = (cbLight._m0[_1621].z * _1628) + 1.0;
    float _1636 = (cbLight._m0[_1621].w * _1628) + 1.0;
    uint _1637 = _1620 + 5u;
    float _1643 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
    uint _1647 = _1620 + 4u;
    float _1653 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1657 = _1620 | 1u;
    float _1668 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_404, _405, _406));
    float _1671 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_404, _405, _406));
    float _3772 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _3783 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1676 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.3183098733425140380859375;
    float _1678 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.3183098733425140380859375;
    float _1685 = ((cbLight._m0[_1637].x * _1643) * _1678) + ((cbLight._m0[_1647].x * _1653) * _1676);
    float _1686 = ((_1643 * cbLight._m0[_1637].y) * _1678) + ((_1653 * cbLight._m0[_1647].y) * _1676);
    float _1687 = ((_1643 * cbLight._m0[_1637].z) * _1678) + ((_1653 * cbLight._m0[_1647].z) * _1676);
    uvec4 _1691 = floatBitsToUint(cbLight._m0[_1620 + 12u]);
    bool _1693 = _1691.x == 0u;
    float _1704;
    float _1706;
    float _1708;
    if (_1693)
    {
        _1704 = _1685;
        _1706 = _1686;
        _1708 = _1687;
    }
    else
    {
        uint _1712 = _1620 + 6u;
        float _1728 = (dot(vec3(cbLight._m0[_1620 + 2u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1729 = _1728 * _1728;
        float _3794 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1731 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1704 = (((cbLight._m0[_1712].x * 0.3183098733425140380859375) * _1730) * _1731) + _1685;
        _1706 = (((cbLight._m0[_1712].y * 0.3183098733425140380859375) * _1730) * _1731) + _1686;
        _1708 = (((cbLight._m0[_1712].z * 0.3183098733425140380859375) * _1730) * _1731) + _1687;
    }
    bool _1711 = _1691.y == 0u;
    float _1749;
    float _1751;
    float _1753;
    if (_1711)
    {
        _1749 = _1704;
        _1751 = _1706;
        _1753 = _1708;
    }
    else
    {
        uint _1919 = _1620 + 7u;
        float _1935 = (dot(vec3(cbLight._m0[_1620 + 3u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1936 = _1935 * _1935;
        float _3810 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1938 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1749 = (((cbLight._m0[_1919].x * 0.3183098733425140380859375) * _1937) * _1938) + _1704;
        _1751 = (((cbLight._m0[_1919].y * 0.3183098733425140380859375) * _1937) * _1938) + _1706;
        _1753 = (((cbLight._m0[_1919].z * 0.3183098733425140380859375) * _1937) * _1938) + _1708;
    }
    uint _1756 = _1620 + 8u;
    float _1769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1620].w)) * _407) * 0.949999988079071044921875);
    float _1770 = _1769 * _1769;
    float _1771 = cbLight._m0[_1620].x + _485;
    float _1772 = cbLight._m0[_1620].y + _486;
    float _1773 = cbLight._m0[_1620].z + _487;
    float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
    float _1778 = _1777 * _1771;
    float _1779 = _1777 * _1772;
    float _1780 = _1777 * _1773;
    float _1781 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1620].xyz));
    float _3826 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _1785 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1786 = dot(vec3(_404, _405, _406), vec3(_1778, _1779, _1780));
    float _3848 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1790 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_1778, _1779, _1780));
    float _3859 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1794 = _1770 * _1770;
    float _1798 = ((_1789 * _1789) * (_1794 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
    float _1807 = 0.959999978542327880859375 - _555;
    float _1809 = 0.959999978542327880859375 - _556;
    float _1810 = 0.959999978542327880859375 - _557;
    float _1817 = 1.0 - _1770;
    float _1828 = (0.5 / (((_1785 * ((_1784 * _1817) + _1770)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _1817) + _1770) * _1784))) * _1784;
    float _3870 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1794 / ((_1798 * _1798) * 3.141590118408203125));
    uint _1841 = _1620 + 9u;
    float _1852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1657].w)) * _407) * 0.949999988079071044921875);
    float _1853 = _1852 * _1852;
    float _1854 = cbLight._m0[_1657].x + _485;
    float _1855 = cbLight._m0[_1657].y + _486;
    float _1856 = cbLight._m0[_1657].z + _487;
    float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
    float _1861 = _1860 * _1854;
    float _1862 = _1860 * _1855;
    float _1863 = _1860 * _1856;
    float _1864 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1657].xyz));
    float _3881 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1868 = dot(vec3(_404, _405, _406), vec3(_1861, _1862, _1863));
    float _3892 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_1861, _1862, _1863));
    float _3903 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1853 * _1853;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1887 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
    float _1894 = 1.0 - _1853;
    float _1904 = (0.5 / (((_1785 * ((_1867 * _1894) + _1853)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _1894) + _1853) * _1867))) * _1867;
    float _3914 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    float _1916 = (((((_1887 * _1807) + _558) * cbLight._m0[_1841].x) * _1906) * _1643) + (((((_1806 * _1807) + _558) * cbLight._m0[_1756].x) * _1830) * _1653);
    float _1917 = (((((_1887 * _1809) + _560) * cbLight._m0[_1841].y) * _1906) * _1643) + (((((_1806 * _1809) + _560) * cbLight._m0[_1756].y) * _1830) * _1653);
    float _1918 = (((((_1887 * _1810) + _561) * cbLight._m0[_1841].z) * _1906) * _1643) + (((((_1806 * _1810) + _561) * cbLight._m0[_1756].z) * _1830) * _1653);
    float _1980;
    float _1982;
    float _1984;
    if (_1693)
    {
        _1980 = _1916;
        _1982 = _1917;
        _1984 = _1918;
    }
    else
    {
        uint _1986 = _1620 + 2u;
        uint _1990 = _1620 + 10u;
        float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _407) * 0.949999988079071044921875);
        float _2005 = _2004 * _2004;
        float _2006 = cbLight._m0[_1986].x + _485;
        float _2007 = cbLight._m0[_1986].y + _486;
        float _2008 = cbLight._m0[_1986].z + _487;
        float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
        float _2013 = _2012 * _2006;
        float _2014 = _2012 * _2007;
        float _2015 = _2012 * _2008;
        float _2016 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1986].xyz));
        float _3925 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2019 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2020 = dot(vec3(_404, _405, _406), vec3(_2013, _2014, _2015));
        float _3936 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2023 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2024 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2013, _2014, _2015));
        float _3947 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2028 = _2005 * _2005;
        float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
        float _2039 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
        float _2046 = 1.0 - _2005;
        float _2056 = (0.5 / (((_1785 * ((_2019 * _2046) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _2046) + _2005) * _2019))) * _2019;
        float _3958 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2058 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
        float _2059 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1980 = (((((_2039 * _1807) + _558) * cbLight._m0[_1990].x) * _2058) * _2059) + _1916;
        _1982 = (((((_2039 * _1809) + _560) * cbLight._m0[_1990].y) * _2058) * _2059) + _1917;
        _1984 = (((((_2039 * _1810) + _561) * cbLight._m0[_1990].z) * _2058) * _2059) + _1918;
    }
    float _2094;
    float _2096;
    float _2098;
    if (_1711)
    {
        _2094 = _1980;
        _2096 = _1982;
        _2098 = _1984;
    }
    else
    {
        uint _2105 = _1620 + 3u;
        uint _2109 = _1620 + 11u;
        float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _407) * 0.949999988079071044921875);
        float _2124 = _2123 * _2123;
        float _2125 = cbLight._m0[_2105].x + _485;
        float _2126 = cbLight._m0[_2105].y + _486;
        float _2127 = cbLight._m0[_2105].z + _487;
        float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
        float _2132 = _2131 * _2125;
        float _2133 = _2131 * _2126;
        float _2134 = _2131 * _2127;
        float _2135 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2105].xyz));
        float _3974 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2139 = dot(vec3(_404, _405, _406), vec3(_2132, _2133, _2134));
        float _3985 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2142 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2143 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2132, _2133, _2134));
        float _3996 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2147 = _2124 * _2124;
        float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
        float _2158 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
        float _2165 = 1.0 - _2124;
        float _2175 = (0.5 / (((_1785 * ((_2138 * _2165) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _2165) + _2124) * _2138))) * _2138;
        float _4007 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2177 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
        float _2178 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _2094 = (((((_2158 * _1807) + _558) * cbLight._m0[_2109].x) * _2177) * _2178) + _1980;
        _2096 = (((((_2158 * _1809) + _560) * cbLight._m0[_2109].y) * _2177) * _2178) + _1982;
        _2098 = (((((_2158 * _1810) + _561) * cbLight._m0[_2109].z) * _2177) * _2178) + _1984;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1618.y == 0u)
    {
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2253;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2253;
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2253;
        uvec4 _2268 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2269 = _2268.x;
        uint _2280 = uint((float(_2268.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2269))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2269)));
        float _2290 = (log2(_2256 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2291 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        uint _2294 = uint(isnan(14.0) ? _2291 : (isnan(_2291) ? 14.0 : min(_2291, 14.0)));
        uvec4 _2299 = texelFetch(g_lightClusterGridBuffer, int(((_2294 << 2u) + (_2280 << 6u)) >> 2u));
        uint _2300 = _2299.x;
        uint _2301 = _2268.z;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((((1u << ((_2301 >> 4u) & 15u)) + 4294967295u) & _2300) == 0u) || ((_2301 & 240u) == 0u))
        {
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
        }
        else
        {
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            uint _2552 = 0u;
            uint _2561;
            bool _2562;
            for (;;)
            {
                _2561 = texelFetch(g_lightClassification, int((((_2294 << 5u) + (_2280 << 9u)) + (_2552 << 2u)) >> 2u)).x;
                _2562 = _2561 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2562)
                {
                    frontier_phi_61_pred = _2546;
                    frontier_phi_61_pred_1 = _2551;
                    frontier_phi_61_pred_2 = _2550;
                    frontier_phi_61_pred_3 = _2549;
                    frontier_phi_61_pred_4 = _2548;
                    frontier_phi_61_pred_5 = _2547;
                }
                else
                {
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    uint _2676;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2561;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    for (;;)
                    {
                        uint _2680 = uint(findLSB(_2676)) + (_2552 << 5u);
                        uint _2677 = (_2676 + 4294967295u) & _2676;
                        uint _2682 = _2680 * 48u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2682)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 3u)).x));
                        uint _2702 = (_2680 * 48u) + 4u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2721 = (_2680 * 48u) + 8u;
                        vec3 _2732 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x));
                        float _2736 = _2696.x - _2254;
                        float _2737 = _2696.y - _2255;
                        float _2738 = _2696.z - _2256;
                        float _2739 = dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738));
                        float _2742 = inversesqrt(_2739);
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2746 = dot(vec3(_514, _517, _520), vec3(_2743, _2744, _2745));
                        float _2751 = 1.0 - (_2739 * _2696.w);
                        float _4033 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2753 = sqrt(_2739) * _2715.w;
                        float _2756 = 1.39999997615814208984375 / (_2753 + 1.39999997615814208984375);
                        float _2757 = _2756 * _2756;
                        float _2760 = ((1.0 - _2757) * _2746) + _2757;
                        float _2763 = _2753 * _2753;
                        float _2767 = ((isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))) * _2752) / ((_2763 * 0.699999988079071044921875) + 1.0);
                        float _2771 = (-0.0) - _2254;
                        float _2772 = (-0.0) - _2255;
                        float _2773 = (-0.0) - _2256;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2778 = _2777 * _2771;
                        float _2779 = _2777 * _2772;
                        float _2780 = _2777 * _2773;
                        float _2788 = exp2(log2(1.0 / ((_2763 * 3.5) + 5.0)) * 0.25);
                        float _2789 = 1.0 - _589;
                        float _2796 = sqrt(1.0 - ((1.0 - (_2789 * _2789)) * (1.0 - (_2788 * _2788))));
                        float _2797 = _2796 * _2796;
                        float _2798 = _2797 * _2797;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2801 = _2780 + _2745;
                        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
                        float _2809 = dot(vec3(_514, _517, _520), vec3(_2778, _2779, _2780));
                        float _4049 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2812 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2813 = dot(vec3(_514, _517, _520), vec3(_2805 * _2799, _2805 * _2800, _2805 * _2801));
                        float _4060 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2820 = ((_2816 * _2816) * (_2798 + (-1.0))) + 1.0;
                        float _2821 = _2756 * _2797;
                        float _2822 = _2821 * _2821;
                        float _2825 = ((1.0 - _2822) * _2746) + _2822;
                        float _4071 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2827 = 1.0 - _2797;
                        float _2837 = (0.5 / (((_2826 * ((_2812 * _2827) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2826 * _2827) + _2797) * _2812))) * _2826;
                        float _4082 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2848 = (((_2798 * 3.1415927410125732421875) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) / ((_2820 * _2820) * ((_2763 * 2.1991131305694580078125) + 3.141590118408203125))) * _2752;
                        _2605 = (_2767 * _2715.x) + _2673;
                        _2606 = (_2767 * _2715.y) + _2674;
                        _2607 = (_2767 * _2715.z) + _2675;
                        _2602 = (_2848 * _2732.x) + _2670;
                        _2603 = (_2848 * _2732.y) + _2671;
                        _2604 = (_2848 * _2732.z) + _2672;
                        if (_2677 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2677;
                        }
                    }
                    frontier_phi_61_pred = _2602;
                    frontier_phi_61_pred_1 = _2607;
                    frontier_phi_61_pred_2 = _2606;
                    frontier_phi_61_pred_3 = _2605;
                    frontier_phi_61_pred_4 = _2604;
                    frontier_phi_61_pred_5 = _2603;
                }
                _2402 = frontier_phi_61_pred;
                _2412 = frontier_phi_61_pred_1;
                _2410 = frontier_phi_61_pred_2;
                _2408 = frontier_phi_61_pred_3;
                _2406 = frontier_phi_61_pred_4;
                _2404 = frontier_phi_61_pred_5;
                uint _2553 = _2552 + 1u;
                if (_2553 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2546 = _2402;
                    _2547 = _2404;
                    _2548 = _2406;
                    _2549 = _2408;
                    _2550 = _2410;
                    _2551 = _2412;
                    _2552 = _2553;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
        }
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.z;
        uint _2418 = (_2416 >> 8u) & 15u;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((4294967295u << _2418) & _2300) == 0u)
        {
            _2514 = _2401;
            _2516 = _2403;
            _2518 = _2405;
            _2520 = _2407;
            _2522 = _2409;
            _2524 = _2411;
        }
        else
        {
            float _2539 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
            float _2540 = _2539 * _2254;
            float _2541 = _2539 * _2255;
            float _2542 = _2539 * _2256;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2418 < ((_2416 >> 12u) & 15u))
            {
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2653 = _2401;
                float _2654 = _2403;
                float _2655 = _2405;
                float _2656 = _2407;
                float _2657 = _2409;
                float _2658 = _2411;
                uint _2659 = _2418;
                uint _2668;
                bool _2669;
                for (;;)
                {
                    _2668 = texelFetch(g_lightClassification, int((((_2294 << 5u) + (_2280 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                    _2669 = _2668 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2669)
                    {
                        frontier_phi_67_pred = _2656;
                        frontier_phi_67_pred_1 = _2657;
                        frontier_phi_67_pred_2 = _2658;
                        frontier_phi_67_pred_3 = _2655;
                        frontier_phi_67_pred_4 = _2654;
                        frontier_phi_67_pred_5 = _2653;
                    }
                    else
                    {
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        uint _2872 = _2668;
                        uint _2873;
                        vec4 _2898;
                        float _2899;
                        vec4 _2914;
                        vec3 _2926;
                        vec4 _2942;
                        vec4 _2958;
                        float _3005;
                        bool _3006;
                        for (;;)
                        {
                            uint _2883 = ((_2659 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2872));
                            _2873 = (_2872 + 4294967295u) & _2872;
                            uint _2885 = _2883 * 40u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2899 = _2898.w;
                            uint _2901 = (_2883 * 40u) + 4u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2883 * 40u) + 8u;
                            _2926 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x));
                            uint _2929 = (_2883 * 40u) + 16u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2883 * 40u) + 20u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2883 * 40u) + 24u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2980 = (_2883 * 40u) + 28u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _3005 = fma(_2256, _2993.z, fma(_2255, _2993.y, _2993.x * _2254)) + _2993.w;
                            _3006 = !((fma(_2256, _2974.z, fma(_2255, _2974.y, _2974.x * _2254)) + _2974.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3006)
                            {
                                float _3033 = _2898.x - _2254;
                                float _3034 = _2898.y - _2255;
                                float _3035 = _2898.z - _2256;
                                float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                                float _3039 = inversesqrt(_3036);
                                float _3040 = _3039 * _3033;
                                float _3041 = _3039 * _3034;
                                float _3042 = _3039 * _3035;
                                float _3046 = 1.0 - (_3036 / (_2899 * _2899));
                                float _4093 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3051 = sqrt(_3036) * _2914.w;
                                float _3053 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                                float _3054 = _3053 * _3053;
                                float _3057 = ((1.0 - _3054) * dot(vec3(_3040, _3041, _3042), vec3(_514, _517, _520))) + _3054;
                                float _3060 = _3051 * _3051;
                                float _3064 = (fma(_2256, _2942.z, fma(_2255, _2942.y, _2942.x * _2254)) + _2942.w) / _3005;
                                float _3065 = (fma(_2256, _2958.z, fma(_2255, _2958.y, _2958.x * _2254)) + _2958.w) / _3005;
                                float _3069 = 1.0 - dot(vec2(_3064, _3065), vec2(_3064, _3065));
                                float _4109 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3071 = _3070 * (((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3047) / ((_3060 * 0.699999988079071044921875) + 1.0));
                                float _3083 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                                float _3084 = 1.0 - _589;
                                float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                                float _3092 = _3091 * _3091;
                                float _3093 = _3092 * _3092;
                                float _3094 = _3040 - _2540;
                                float _3095 = _3041 - _2541;
                                float _3096 = _3042 - _2542;
                                float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                                float _3104 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2540, (-0.0) - _2541, (-0.0) - _2542));
                                float _4120 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3108 = dot(vec3(_514, _517, _520), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                                float _4131 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                                float _3116 = _3053 * _3092;
                                float _3117 = _3116 * _3116;
                                float _3123 = ((1.0 - _3117) * dot(vec3(_514, _517, _520), vec3(_3040, _3041, _3042))) + _3117;
                                float _4142 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3125 = 1.0 - _3092;
                                float _3135 = (0.5 / (((_3124 * ((_3107 * _3125) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3092) * _3107))) * _3124;
                                float _4153 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3145 = (_3070 * _3047) * (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) / ((_3115 * _3115) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3145 * _2926.x;
                                frontier_phi_73_pred_1 = _3145 * _2926.y;
                                frontier_phi_73_pred_2 = _3071 * _2914.z;
                                frontier_phi_73_pred_3 = _3071 * _2914.y;
                                frontier_phi_73_pred_4 = _3071 * _2914.x;
                                frontier_phi_73_pred_5 = _3145 * _2926.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_73_pred;
                            _3150 = frontier_phi_73_pred_1;
                            _3154 = frontier_phi_73_pred_2;
                            _3153 = frontier_phi_73_pred_3;
                            _3152 = frontier_phi_73_pred_4;
                            _3151 = frontier_phi_73_pred_5;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            if (_2873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2873;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2856;
                        frontier_phi_67_pred_1 = _2857;
                        frontier_phi_67_pred_2 = _2858;
                        frontier_phi_67_pred_3 = _2855;
                        frontier_phi_67_pred_4 = _2854;
                        frontier_phi_67_pred_5 = _2853;
                    }
                    _2521 = frontier_phi_67_pred;
                    _2523 = frontier_phi_67_pred_1;
                    _2525 = frontier_phi_67_pred_2;
                    _2519 = frontier_phi_67_pred_3;
                    _2517 = frontier_phi_67_pred_4;
                    _2515 = frontier_phi_67_pred_5;
                    uint _2660 = _2659 + 1u;
                    if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2653 = _2515;
                        _2654 = _2517;
                        _2655 = _2519;
                        _2656 = _2521;
                        _2657 = _2523;
                        _2658 = _2525;
                        _2659 = _2660;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2523;
                frontier_phi_55_56_ladder_1 = _2525;
                frontier_phi_55_56_ladder_2 = _2521;
                frontier_phi_55_56_ladder_3 = _2519;
                frontier_phi_55_56_ladder_4 = _2517;
                frontier_phi_55_56_ladder_5 = _2515;
            }
            else
            {
                frontier_phi_55_56_ladder = _2409;
                frontier_phi_55_56_ladder_1 = _2411;
                frontier_phi_55_56_ladder_2 = _2407;
                frontier_phi_55_56_ladder_3 = _2405;
                frontier_phi_55_56_ladder_4 = _2403;
                frontier_phi_55_56_ladder_5 = _2401;
            }
            _2514 = frontier_phi_55_56_ladder_5;
            _2516 = frontier_phi_55_56_ladder_4;
            _2518 = frontier_phi_55_56_ladder_3;
            _2520 = frontier_phi_55_56_ladder_2;
            _2522 = frontier_phi_55_56_ladder;
            _2524 = frontier_phi_55_56_ladder_1;
        }
        float _2529 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _2313 = (_2529 * _2520) + _1749;
        _2315 = (_2529 * _2522) + _1751;
        _2317 = (_2529 * _2524) + _1753;
        _2319 = ((_2514 * _558) * _2529) + _2094;
        _2321 = ((_2516 * _560) * _2529) + _2096;
        _2323 = ((_2518 * _561) * _2529) + _2098;
    }
    else
    {
        _2313 = _1749;
        _2315 = _1751;
        _2317 = _1753;
        _2319 = _2094;
        _2321 = _2096;
        _2323 = _2098;
    }
    float _4169 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4180 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4191 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    uint _2343 = _533 + 6u;
    float _2351 = _493 / cbSceneParam._m0[86u].x;
    float _2352 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _427 : (isnan(_427) ? cbSceneParam._m0[77u].w : min(_427, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    if (_427 > cbSceneParam._m0[78u].w)
    {
        float _2426 = isnan(_427) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _427 : min(cbSceneParam._m0[80u].w, _427));
        float _2427 = _2426 / _427;
        float _2438 = _2427 * _478;
        float _2439 = _479 * _2427;
        float _2440 = (-0.0) - _2439;
        float _2442 = _2427 * _480;
        float _2444 = (cbSceneParam._m0[77u].w * _2440) / _2426;
        float _2445 = _2444 + cbSceneParam._m0[79u].w;
        float _2446 = cbSceneParam._m0[79u].w - _2439;
        float _2452 = sqrt(((_2438 * _2438) + (_2439 * _2439)) + (_2442 * _2442));
        float _2455 = (1.0 - (cbSceneParam._m0[77u].w / _2426)) * _2452;
        float _2460 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2462 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2615;
        if (abs((_2440 - _2444) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2615 = ((((_2445 > 0.0) ? exp2(_2460 * _2445) : (2.0 - exp2(_2462 * _2445))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2455;
        }
        else
        {
            float _2575 = 1.0 / cbSceneParam._m0[80u].x;
            float _2576 = isnan(_2446) ? _2445 : (isnan(_2445) ? _2446 : max(_2445, _2446));
            float _2577 = isnan(_2446) ? _2445 : (isnan(_2445) ? _2446 : min(_2445, _2446));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            _2615 = ((abs(_2452 / _2440) * cbSceneParam._m0[80u].y) * ((((_2586 - _2587) * 2.0) - ((exp2(_2460 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)))) - exp2(_2460 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0))))) * _2575)) - ((exp2(_2462 * _2586) - exp2(_2462 * _2587)) * _2575))) + (_2455 * cbSceneParam._m0[80u].z);
        }
        vec4 _2617 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2626 = exp2((_2615 * (-1.44269502162933349609375)) * (1.0 - _2617.w));
        float _2627 = log2(_2626);
        float _2643 = log2(_2371);
        _2464 = (exp2(_2643 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].x)) * _2617.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2466 = (exp2(_2643 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].y)) * _2617.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2468 = (exp2(_2643 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].z)) * _2617.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2470 = _2626 * _2371;
    }
    else
    {
        _2464 = _2368;
        _2466 = _2369;
        _2468 = _2370;
        _2470 = _2371;
    }
    float _2482 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2483 = _2482 == 3.0;
    float _2484 = log2(_2470);
    float _2491 = exp2(_2484 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2313 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _573))) + ((_2319 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2492 = exp2(_2484 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2315 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _573))) + ((_2321 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2493 = exp2(_2484 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2317 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _573))) + ((_2323 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2502 = (_2482 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2502 * (_2483 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2464)));
    SV_Target.y = _2502 * (_2483 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2466)));
    SV_Target.z = _2502 * (_2483 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2468)));
    SV_Target.w = cbInstanceData._m0[_2343].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
}


