#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _887;
float _3559;
float _3560;
float _3561;
float _3562;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _250 = _248.x;
    vec4 _267 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3571 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))));
    float _285 = _267.z * cbMtdParam._m0[12u].y;
    float _288 = fma(_284, _198 * NORMAL.x, fma(_277, _205 * TANGENT.x, (_191 * _183) * _275));
    float _291 = fma(_284, _198 * NORMAL.y, fma(_277, _205 * TANGENT.y, (_191 * _184) * _275));
    float _294 = fma(_284, _198 * NORMAL.z, fma(_277, _205 * TANGENT.z, (_191 * _185) * _275));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3582 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _302 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3604 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3615 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3626 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _306 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    vec4 _389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _391 = _389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _566 = sqrt(((_375 * _375) + (_376 * _376)) + (_377 * _377));
        float _572 = (cbMatDynParam._m0[5u].x * _566) + cbMatDynParam._m0[5u].y;
        float _3637 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        float _573 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _577 = (cbMatDynParam._m0[5u].z * _566) + cbMatDynParam._m0[5u].w;
        float _3648 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) - _573)) + _573) < ((_391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _427 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _430 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _443 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3659 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _457 = 1.0 - _306;
    float _458 = _454 * _457;
    float _459 = _455 * _457;
    float _460 = _456 * _457;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _306;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _306;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _306;
    float _468 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    vec4 _480 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _483 = _480.x * TEXCOORD_5.w;
    float _484 = dot(vec3(_299, _300, _301), vec3(_382, _383, _384));
    float _487 = _484 * 2.0;
    float _491 = (_487 * _299) - _382;
    float _492 = (_487 * _300) - _383;
    float _493 = (_487 * _301) - _384;
    float _497 = abs(dot(vec3(_382, _383, _384), vec3(_299, _300, _301)));
    float _3692 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = sqrt(_302);
    float _512 = exp2((_499 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_499 * 3.0));
    float _518 = (1.0 - _512) * ((_499 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _519 = _512 * _499;
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _611 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _615 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _619 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _644 = _547 + _299;
        float _645 = _551 + _300;
        float _646 = _555 + _301;
        float _656 = fma(_646, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) - _611;
        float _657 = fma(_646, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) - _615;
        float _658 = fma(_646, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) - _619;
        float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
        float _675 = ((_662 * _656) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_611 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_662 * _657) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_615 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_662 * _658) / cbModelParam._m0[34u].z) + ((((((_619 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        float _714 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_680.x + (-0.5));
        float _716 = _714 * (_680.y + (-0.5));
        float _717 = _714 * (_680.z + (-0.5));
        float _724 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_687.x + (-0.5));
        float _726 = _724 * (_687.y + (-0.5));
        float _727 = _724 * (_687.z + (-0.5));
        float _734 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_694.x + (-0.5));
        float _736 = _734 * (_694.y + (-0.5));
        float _737 = _734 * (_694.z + (-0.5));
        float _744 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_701.x + (-0.5));
        float _746 = _744 * (_701.y + (-0.5));
        float _747 = _744 * (_701.z + (-0.5));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = _715 * 0.5;
        float _752 = _725 * 0.5;
        float _753 = _735 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _768 = (dot(vec3(_299, _300, _301), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _778 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3740 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_780 + 1.0))) + _785) * _748;
        float _795 = _716 * 0.5;
        float _796 = _726 * 0.5;
        float _797 = _736 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_299, _300, _301), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3773 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_822 + 1.0))) + _827) * _749;
        float _837 = _717 * 0.5;
        float _838 = _727 * 0.5;
        float _839 = _737 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_299, _300, _301), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3806 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_864 + 1.0))) + _869) * _750;
        _886 = _717;
        _888 = _716;
        _889 = _715;
        _890 = _727;
        _891 = _726;
        _892 = _725;
        _893 = _737;
        _894 = _736;
        _895 = _735;
        _896 = _750;
        _897 = _749;
        _898 = _748;
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
        _899 = 0.0;
        _900 = 0.0;
        _901 = 0.0;
    }
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _930 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _934 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _938 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _961 = _547 + _299;
        float _962 = _551 + _300;
        float _963 = _555 + _301;
        float _973 = fma(_963, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_930 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_934 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[35u].z) + ((((((_938 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1029 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_996.x + (-0.5));
        float _1031 = _1029 * (_996.y + (-0.5));
        float _1032 = _1029 * (_996.z + (-0.5));
        float _1039 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1003.x + (-0.5));
        float _1041 = _1039 * (_1003.y + (-0.5));
        float _1042 = _1039 * (_1003.z + (-0.5));
        float _1049 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1010.x + (-0.5));
        float _1051 = _1049 * (_1010.y + (-0.5));
        float _1052 = _1049 * (_1010.z + (-0.5));
        float _1059 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1017.x + (-0.5));
        float _1061 = _1059 * (_1017.y + (-0.5));
        float _1062 = _1059 * (_1017.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_299, _300, _301), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3869 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1093 + 1.0))) + _1098) * _1063;
        float _1108 = _1031 * 0.5;
        float _1109 = _1041 * 0.5;
        float _1110 = _1051 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_299, _300, _301), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3902 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1135 + 1.0))) + _1140) * _1064;
        float _1150 = _1032 * 0.5;
        float _1151 = _1042 * 0.5;
        float _1152 = _1052 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_299, _300, _301), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3935 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1177 + 1.0))) + _1182) * _1065;
        _1199 = _1032;
        _1200 = _1031;
        _1201 = _1030;
        _1202 = _1042;
        _1203 = _1041;
        _1204 = _1040;
        _1205 = _1052;
        _1206 = _1051;
        _1207 = _1050;
        _1208 = _1065;
        _1209 = _1064;
        _1210 = _1063;
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _887;
        _1200 = _887;
        _1201 = _887;
        _1202 = _887;
        _1203 = _887;
        _1204 = _887;
        _1205 = _887;
        _1206 = _887;
        _1207 = _887;
        _1208 = _887;
        _1209 = _887;
        _1210 = _887;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _899)) + _899;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _900)) + _900;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1246 = fma(_1225, cbSceneParam._m0[89u].z, fma(_1224, cbSceneParam._m0[89u].y, _1223 * cbSceneParam._m0[89u].x));
    float _1249 = fma(_1225, cbSceneParam._m0[90u].z, fma(_1224, cbSceneParam._m0[90u].y, _1223 * cbSceneParam._m0[90u].x));
    float _1252 = fma(_1225, cbSceneParam._m0[91u].z, fma(_1224, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1223));
    float _1267 = _491 * 0.5;
    float _1268 = _492 * 0.5;
    float _1269 = _493 * 0.5;
    float _1270 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1273 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1276 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1310;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1283 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_886, _890, _893, _896));
        float _1287 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_888, _891, _894, _897));
        float _1291 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_889, _892, _895, _898));
        float _1298 = dot(vec4(cbModelParam._m0[39u]), vec4(_1267, _1268, _1269, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1321;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1312 = dot(vec4(cbModelParam._m0[40u]), vec4(_1267, _1268, _1269, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1325 = (_1321 * cbModelParam._m0[1u].x) + (_1310 * (1.0 - cbModelParam._m0[1u].x));
    float _1335 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _302);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1335 : min(cbModelParam._m0[25u].z, _1335));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1385 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1389 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1393 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1396 = fma(_493, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491));
        float _1399 = fma(_493, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491));
        float _1402 = fma(_493, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491));
        float _1430;
        if (_1396 > 0.0)
        {
            _1430 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1430 = frontier_phi_17_15_ladder;
        }
        float _1605;
        if (_1399 > 0.0)
        {
            _1605 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1605 = frontier_phi_26_22_ladder;
        }
        float _1900;
        if (_1402 > 0.0)
        {
            _1900 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1900 = frontier_phi_38_33_ladder;
        }
        float _1902 = isnan(_1605) ? _1430 : (isnan(_1430) ? _1605 : min(_1430, _1605));
        float _1903 = isnan(_1900) ? _1902 : (isnan(_1902) ? _1900 : min(_1902, _1900));
        float _1907 = (_1903 * _1396) + _1385;
        float _1908 = (_1903 * _1399) + _1389;
        float _1909 = (_1903 * _1402) + _1393;
        float _1910 = _1903 * 9.9999997473787516355514526367188e-05;
        float _1912 = (-1.0) - _1910;
        float _1914 = _1910 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1909 > _1914) || ((_1909 < _1912) || ((_1908 > _1914) || ((_1908 < _1912) || ((_1907 < _1912) || (_1907 > _1914))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1909, cbModelParam._m0[9u].z, fma(_1908, cbModelParam._m0[9u].y, _1907 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1909, cbModelParam._m0[10u].z, fma(_1908, cbModelParam._m0[10u].y, _1907 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1909, cbModelParam._m0[11u].z, fma(_1908, cbModelParam._m0[11u].y, _1907 * cbModelParam._m0[11u].x))), _1336);
            frontier_phi_16_38_ladder = _2054.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2054.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2054.x * cbModelParam._m0[1u].y;
        }
        _1418 = frontier_phi_16_38_ladder_2;
        _1420 = frontier_phi_16_38_ladder_1;
        _1422 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_491, _492, _493), _1336);
        _1418 = _1406.x * cbModelParam._m0[1u].y;
        _1420 = _1406.y * cbModelParam._m0[1u].y;
        _1422 = _1406.z * cbModelParam._m0[1u].y;
    }
    float _1426 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _302);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1426 : min(cbModelParam._m0[25u].w, _1426));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_493, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491));
        float _1498 = fma(_493, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491));
        float _1501 = fma(_493, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491));
        float _1610;
        if (_1495 > 0.0)
        {
            _1610 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1610 = frontier_phi_28_24_ladder;
        }
        float _1927;
        if (_1498 > 0.0)
        {
            _1927 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1927 = frontier_phi_40_35_ladder;
        }
        float _2265;
        if (_1501 > 0.0)
        {
            _2265 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2265 = frontier_phi_50_47_ladder;
        }
        float _2267 = isnan(_1927) ? _1610 : (isnan(_1610) ? _1927 : min(_1610, _1927));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1495) + _1484;
        float _2273 = (_2268 * _1498) + _1488;
        float _2274 = (_2268 * _1501) + _1492;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2275;
        float _2278 = _2275 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2274 > _2278) || ((_2274 < _2276) || ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 < _2276) || (_2272 > _2278))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2274, cbModelParam._m0[17u].z, fma(_2273, cbModelParam._m0[17u].y, _2272 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2274, cbModelParam._m0[18u].z, fma(_2273, cbModelParam._m0[18u].y, _2272 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2274, cbModelParam._m0[19u].z, fma(_2273, cbModelParam._m0[19u].y, _2272 * cbModelParam._m0[19u].x))), _1427);
            frontier_phi_25_50_ladder = _2396.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2396.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2396.x * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_25_50_ladder_2;
        _1522 = frontier_phi_25_50_ladder_1;
        _1524 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_491, _492, _493), _1427);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1537 = (((_518 * _468) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1539 = (((_518 * _470) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1541 = (((_518 * _471) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1544 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, _1537 * cbSceneParam._m0[91u].x));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1597 = _1584 / _1596;
    float _1598 = _1588 / _1596;
    float _1599 = _1592 / _1596;
    float _1746;
    float _1747;
    float _1748;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1626 = ((uint(_1599 > cbSceneParam._m0[59u].y) + uint(_1599 > cbSceneParam._m0[59u].x)) + uint(_1599 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1627 = _1626 + 43u;
        uint _1635 = _1626 + 44u;
        uint _1643 = _1626 + 45u;
        uint _1651 = _1626 + 46u;
        float _1662 = fma(_1596, cbSceneParam._m0[_1627].w, fma(_1592, cbSceneParam._m0[_1627].z, fma(_1588, cbSceneParam._m0[_1627].y, _1584 * cbSceneParam._m0[_1627].x)));
        float _1666 = fma(_1596, cbSceneParam._m0[_1635].w, fma(_1592, cbSceneParam._m0[_1635].z, fma(_1588, cbSceneParam._m0[_1635].y, _1584 * cbSceneParam._m0[_1635].x)));
        float _1674 = fma(_1596, cbSceneParam._m0[_1651].w, fma(_1592, cbSceneParam._m0[_1651].z, fma(_1588, cbSceneParam._m0[_1651].y, _1584 * cbSceneParam._m0[_1651].x)));
        float _1679 = cbSceneParam._m0[33u].z * _1674;
        float _1681 = cbSceneParam._m0[33u].w * _1674;
        float _1684 = fma(_1596, cbSceneParam._m0[_1643].w, fma(_1592, cbSceneParam._m0[_1643].z, fma(_1588, cbSceneParam._m0[_1643].y, _1584 * cbSceneParam._m0[_1643].x))) / _1674;
        float _1732 = (cbSceneParam._m0[33u].x - sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599))) * cbSceneParam._m0[33u].y;
        float _4061 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1739 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 + _1662) / _1674, (_1681 + _1666) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 + _1662) / _1674, (_1666 - _1679) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 - _1679) / _1674, (_1666 - _1681) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 - _1681) / _1674, (_1679 + _1666) / _1674), _1684), 0.0)).x), vec4(0.25)));
        _1746 = 1.0 - (_1739 * cbSceneParam._m0[34u].x);
        _1747 = 1.0 - (_1739 * cbSceneParam._m0[34u].y);
        _1748 = 1.0 - (_1739 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1746 = 1.0;
        _1747 = 1.0;
        _1748 = 1.0;
    }
    float _1812;
    float _1814;
    float _1816;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1800 = fma(_1596, cbSceneParam._m0[63u].w, fma(_1592, cbSceneParam._m0[63u].z, fma(_1588, cbSceneParam._m0[63u].y, _1584 * cbSceneParam._m0[63u].x)));
        float _1801 = fma(_1596, cbSceneParam._m0[60u].w, fma(_1592, cbSceneParam._m0[60u].z, fma(_1588, cbSceneParam._m0[60u].y, _1584 * cbSceneParam._m0[60u].x))) / _1800;
        float _1802 = fma(_1596, cbSceneParam._m0[61u].w, fma(_1592, cbSceneParam._m0[61u].z, fma(_1588, cbSceneParam._m0[61u].y, _1584 * cbSceneParam._m0[61u].x))) / _1800;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1801 >= cbSceneParam._m0[64u].x) && (_1802 >= cbSceneParam._m0[64u].y)) && (_1801 <= cbSceneParam._m0[64u].z)) && (_1802 <= cbSceneParam._m0[64u].w))
        {
            float _1940 = fma(_1596, cbSceneParam._m0[62u].w, fma(_1592, cbSceneParam._m0[62u].z, fma(_1588, cbSceneParam._m0[62u].y, _1584 * cbSceneParam._m0[62u].x))) / _1800;
            float _1944 = isnan(cbSceneParam._m0[41u].w) ? _1940 : (isnan(_1940) ? cbSceneParam._m0[41u].w : max(_1940, cbSceneParam._m0[41u].w));
            float _1987 = (cbSceneParam._m0[33u].x - sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599))) * cbSceneParam._m0[33u].y;
            float _4077 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
            float _1994 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1801, cbSceneParam._m0[33u].w + _1802), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1801, _1802 - cbSceneParam._m0[33u].z), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1801 - cbSceneParam._m0[33u].z, _1802 - cbSceneParam._m0[33u].w), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1801 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1802), _1944), 0.0)).x), vec4(0.25)));
            float _1998 = 1.0 - (_1994 * cbSceneParam._m0[34u].x);
            float _1999 = 1.0 - (_1994 * cbSceneParam._m0[34u].y);
            float _2000 = 1.0 - (_1994 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2000) ? _1748 : (isnan(_1748) ? _2000 : min(_1748, _2000));
            frontier_phi_37_36_ladder_1 = isnan(_1999) ? _1747 : (isnan(_1747) ? _1999 : min(_1747, _1999));
            frontier_phi_37_36_ladder_2 = isnan(_1998) ? _1746 : (isnan(_1746) ? _1998 : min(_1746, _1998));
        }
        else
        {
            frontier_phi_37_36_ladder = _1748;
            frontier_phi_37_36_ladder_1 = _1747;
            frontier_phi_37_36_ladder_2 = _1746;
        }
        _1812 = frontier_phi_37_36_ladder_2;
        _1814 = frontier_phi_37_36_ladder_1;
        _1816 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1812 = _1746;
        _1814 = _1747;
        _1816 = _1748;
    }
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1831 = _483 + (-1.0);
    float _1836 = (cbLight._m0[_1824].x * _1831) + 1.0;
    float _1837 = (cbLight._m0[_1824].y * _1831) + 1.0;
    float _1838 = (cbLight._m0[_1824].z * _1831) + 1.0;
    float _1839 = (cbLight._m0[_1824].w * _1831) + 1.0;
    uint _1840 = _1823 + 5u;
    float _1846 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1850 = _1823 + 4u;
    float _1859 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1863 = _1823 | 1u;
    float _1874 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_299, _300, _301));
    float _1877 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_299, _300, _301));
    float _4113 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _4124 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1882 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.3183098733425140380859375;
    float _1884 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1891 = ((cbLight._m0[_1840].x * _1846) * _1884) + (((cbLight._m0[_1850].x * _1812) * _1859) * _1882);
    float _1892 = ((_1846 * cbLight._m0[_1840].y) * _1884) + (((cbLight._m0[_1850].y * _1814) * _1859) * _1882);
    float _1893 = ((_1846 * cbLight._m0[_1840].z) * _1884) + (((cbLight._m0[_1850].z * _1816) * _1859) * _1882);
    uvec4 _1897 = floatBitsToUint(cbLight._m0[_1823 + 12u]);
    bool _1899 = _1897.x == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1899)
    {
        _2001 = _1891;
        _2003 = _1892;
        _2005 = _1893;
    }
    else
    {
        uint _2009 = _1823 + 6u;
        float _2025 = (dot(vec3(cbLight._m0[_1823 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _4135 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2028 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2001 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1891;
        _2003 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1892;
        _2005 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1893;
    }
    bool _2008 = _1897.y == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2008)
    {
        _2063 = _2001;
        _2065 = _2003;
        _2067 = _2005;
    }
    else
    {
        uint _2236 = _1823 + 7u;
        float _2252 = (dot(vec3(cbLight._m0[_1823 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4151 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2255 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2063 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2001;
        _2065 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2003;
        _2067 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2005;
    }
    uint _2070 = _1823 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _302) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1823].x + _382;
    float _2086 = cbLight._m0[_1823].y + _383;
    float _2087 = cbLight._m0[_1823].z + _384;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1823].xyz));
    float _4167 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2099 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2100 = dot(vec3(_299, _300, _301), vec3(_2092, _2093, _2094));
    float _4189 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2092, _2093, _2094));
    float _4200 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
    float _2121 = 0.959999978542327880859375 - _465;
    float _2123 = 0.959999978542327880859375 - _466;
    float _2124 = 0.959999978542327880859375 - _467;
    float _2131 = 1.0 - _2084;
    float _2142 = (0.5 / (((_2099 * ((_2098 * _2131) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2131) + _2084) * _2098))) * _2098;
    float _4211 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2158 = _1823 + 9u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1863].w)) * _302) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_1863].x + _382;
    float _2172 = cbLight._m0[_1863].y + _383;
    float _2173 = cbLight._m0[_1863].z + _384;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1863].xyz));
    float _4222 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2185 = dot(vec3(_299, _300, _301), vec3(_2178, _2179, _2180));
    float _4233 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_2178, _2179, _2180));
    float _4244 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2170 * _2170;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
    float _2211 = 1.0 - _2170;
    float _2221 = (0.5 / (((_2099 * ((_2184 * _2211) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2211) + _2170) * _2184))) * _2184;
    float _4255 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    float _2233 = (((((_2204 * _2121) + _468) * cbLight._m0[_2158].x) * _2223) * _1846) + ((((cbLight._m0[_2070].x * _1812) * ((_2120 * _2121) + _468)) * _2144) * _1859);
    float _2234 = (((((_2204 * _2123) + _470) * cbLight._m0[_2158].y) * _2223) * _1846) + ((((cbLight._m0[_2070].y * _1814) * ((_2120 * _2123) + _470)) * _2144) * _1859);
    float _2235 = (((((_2204 * _2124) + _471) * cbLight._m0[_2158].z) * _2223) * _1846) + ((((cbLight._m0[_2070].z * _1816) * ((_2120 * _2124) + _471)) * _2144) * _1859);
    float _2291;
    float _2293;
    float _2295;
    if (_1899)
    {
        _2291 = _2233;
        _2293 = _2234;
        _2295 = _2235;
    }
    else
    {
        uint _2297 = _1823 + 2u;
        uint _2301 = _1823 + 10u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _302) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _382;
        float _2318 = cbLight._m0[_2297].y + _383;
        float _2319 = cbLight._m0[_2297].z + _384;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2297].xyz));
        float _4266 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2331 = dot(vec3(_299, _300, _301), vec3(_2324, _2325, _2326));
        float _4277 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4288 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
        float _2357 = 1.0 - _2316;
        float _2367 = (0.5 / (((_2099 * ((_2330 * _2357) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2357) + _2316) * _2330))) * _2330;
        float _4299 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2369 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2370 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2291 = (((((_2350 * _2121) + _468) * cbLight._m0[_2301].x) * _2369) * _2370) + _2233;
        _2293 = (((((_2350 * _2123) + _470) * cbLight._m0[_2301].y) * _2369) * _2370) + _2234;
        _2295 = (((((_2350 * _2124) + _471) * cbLight._m0[_2301].z) * _2369) * _2370) + _2235;
    }
    float _2401;
    float _2403;
    float _2405;
    if (_2008)
    {
        _2401 = _2291;
        _2403 = _2293;
        _2405 = _2295;
    }
    else
    {
        uint _2412 = _1823 + 3u;
        uint _2416 = _1823 + 11u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _302) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _382;
        float _2433 = cbLight._m0[_2412].y + _383;
        float _2434 = cbLight._m0[_2412].z + _384;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2412].xyz));
        float _4315 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2446 = dot(vec3(_299, _300, _301), vec3(_2439, _2440, _2441));
        float _4326 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4337 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
        float _2472 = 1.0 - _2431;
        float _2482 = (0.5 / (((_2099 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2472) + _2431) * _2445))) * _2445;
        float _4348 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2401 = (((((_2465 * _2121) + _468) * cbLight._m0[_2416].x) * _2484) * _2485) + _2291;
        _2403 = (((((_2465 * _2123) + _470) * cbLight._m0[_2416].y) * _2484) * _2485) + _2293;
        _2405 = (((((_2465 * _2124) + _471) * cbLight._m0[_2416].z) * _2484) * _2485) + _2295;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1821.y == 0u)
    {
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2507)));
        float _2528 = (log2(_1599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2787)
                {
                    frontier_phi_71_pred = _2776;
                    frontier_phi_71_pred_1 = _2775;
                    frontier_phi_71_pred_2 = _2774;
                    frontier_phi_71_pred_3 = _2773;
                    frontier_phi_71_pred_4 = _2772;
                    frontier_phi_71_pred_5 = _2771;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2786;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2777 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _1597;
                        float _2983 = _2942.y - _1598;
                        float _2984 = _2942.z - _1599;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_424, _427, _430), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4374 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _1597;
                        float _3018 = (-0.0) - _1598;
                        float _3019 = (-0.0) - _1599;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3033 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3034 = 1.0 - _499;
                        float _3041 = sqrt(1.0 - ((1.0 - (_3034 * _3034)) * (1.0 - (_3033 * _3033))));
                        float _3042 = _3041 * _3041;
                        float _3043 = _3042 * _3042;
                        float _3044 = _3024 + _2989;
                        float _3045 = _3025 + _2990;
                        float _3046 = _3026 + _2991;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3054 = dot(vec3(_424, _427, _430), vec3(_3024, _3025, _3026));
                        float _4390 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3058 = dot(vec3(_424, _427, _430), vec3(_3050 * _3044, _3050 * _3045, _3050 * _3046));
                        float _4401 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3065 = ((_3061 * _3061) * (_3043 + (-1.0))) + 1.0;
                        float _3066 = _3002 * _3042;
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _2992) + _3067;
                        float _4412 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3072 = 1.0 - _3042;
                        float _3082 = (0.5 / (((_3071 * ((_3057 * _3072) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3042) * _3057))) * _3071;
                        float _4423 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3093 = (((_3043 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3065 * _3065) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2846 = (_3013 * _2961.x) + _2919;
                        _2847 = (_3013 * _2961.y) + _2920;
                        _2848 = (_3013 * _2961.z) + _2921;
                        _2843 = (_3093 * _2978.x) + _2916;
                        _2844 = (_3093 * _2978.y) + _2917;
                        _2845 = (_3093 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_71_pred = _2848;
                    frontier_phi_71_pred_1 = _2847;
                    frontier_phi_71_pred_2 = _2846;
                    frontier_phi_71_pred_3 = _2845;
                    frontier_phi_71_pred_4 = _2844;
                    frontier_phi_71_pred_5 = _2843;
                }
                _2629 = frontier_phi_71_pred;
                _2627 = frontier_phi_71_pred_1;
                _2625 = frontier_phi_71_pred_2;
                _2623 = frontier_phi_71_pred_3;
                _2621 = frontier_phi_71_pred_4;
                _2619 = frontier_phi_71_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2619;
                    _2772 = _2621;
                    _2773 = _2623;
                    _2774 = _2625;
                    _2775 = _2627;
                    _2776 = _2629;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2635) & _2538) == 0u)
        {
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
            float _2765 = _2764 * _1597;
            float _2766 = _2764 * _1598;
            float _2767 = _2764 * _1599;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2899 = _2618;
                float _2900 = _2620;
                float _2901 = _2622;
                float _2902 = _2624;
                float _2903 = _2626;
                float _2904 = _2628;
                uint _2905 = _2635;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2915)
                    {
                        frontier_phi_82_pred = _2904;
                        frontier_phi_82_pred_1 = _2903;
                        frontier_phi_82_pred_2 = _2902;
                        frontier_phi_82_pred_3 = _2901;
                        frontier_phi_82_pred_4 = _2900;
                        frontier_phi_82_pred_5 = _2899;
                    }
                    else
                    {
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3120 = _2899;
                        float _3121 = _2900;
                        float _3122 = _2901;
                        float _3123 = _2902;
                        float _3124 = _2903;
                        float _3125 = _2904;
                        uint _3126 = _2914;
                        uint _3127;
                        vec4 _3152;
                        float _3153;
                        vec4 _3168;
                        vec3 _3180;
                        vec4 _3196;
                        vec4 _3212;
                        float _3259;
                        bool _3260;
                        for (;;)
                        {
                            uint _3137 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3126));
                            _3127 = (_3126 + 4294967295u) & _3126;
                            uint _3139 = _3137 * 40u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3153 = _3152.w;
                            uint _3155 = (_3137 * 40u) + 4u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3137 * 40u) + 8u;
                            _3180 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x));
                            uint _3183 = (_3137 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3137 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3137 * 40u) + 24u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3234 = (_3137 * 40u) + 28u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3259 = fma(_1599, _3247.z, fma(_1598, _3247.y, _3247.x * _1597)) + _3247.w;
                            _3260 = !((fma(_1599, _3228.z, fma(_1598, _3228.y, _3228.x * _1597)) + _3228.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3260)
                            {
                                float _3287 = _3152.x - _1597;
                                float _3288 = _3152.y - _1598;
                                float _3289 = _3152.z - _1599;
                                float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                                float _3293 = inversesqrt(_3290);
                                float _3294 = _3293 * _3287;
                                float _3295 = _3293 * _3288;
                                float _3296 = _3293 * _3289;
                                float _3300 = 1.0 - (_3290 / (_3153 * _3153));
                                float _4434 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3305 = sqrt(_3290) * _3168.w;
                                float _3307 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                                float _3308 = _3307 * _3307;
                                float _3311 = ((1.0 - _3308) * dot(vec3(_3294, _3295, _3296), vec3(_424, _427, _430))) + _3308;
                                float _3314 = _3305 * _3305;
                                float _3318 = (fma(_1599, _3196.z, fma(_1598, _3196.y, _3196.x * _1597)) + _3196.w) / _3259;
                                float _3319 = (fma(_1599, _3212.z, fma(_1598, _3212.y, _3212.x * _1597)) + _3212.w) / _3259;
                                float _3323 = 1.0 - dot(vec2(_3318, _3319), vec2(_3318, _3319));
                                float _4450 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3325 = _3324 * (((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3301) / ((_3314 * 0.699999988079071044921875) + 1.0));
                                float _3337 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                                float _3338 = 1.0 - _499;
                                float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                                float _3346 = _3345 * _3345;
                                float _3347 = _3346 * _3346;
                                float _3348 = _3294 - _2765;
                                float _3349 = _3295 - _2766;
                                float _3350 = _3296 - _2767;
                                float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                                float _3358 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4461 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3362 = dot(vec3(_424, _427, _430), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                                float _4472 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                                float _3370 = _3307 * _3346;
                                float _3371 = _3370 * _3370;
                                float _3377 = ((1.0 - _3371) * dot(vec3(_424, _427, _430), vec3(_3294, _3295, _3296))) + _3371;
                                float _4483 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3379 = 1.0 - _3346;
                                float _3389 = (0.5 / (((_3378 * ((_3361 * _3379) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3346) * _3361))) * _3378;
                                float _4494 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3399 = (_3324 * _3301) * (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) / ((_3369 * _3369) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3325 * _3168.z;
                                frontier_phi_88_pred_1 = _3325 * _3168.y;
                                frontier_phi_88_pred_2 = _3325 * _3168.x;
                                frontier_phi_88_pred_3 = _3399 * _3180.z;
                                frontier_phi_88_pred_4 = _3399 * _3180.y;
                                frontier_phi_88_pred_5 = _3399 * _3180.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_88_pred;
                            _3407 = frontier_phi_88_pred_1;
                            _3406 = frontier_phi_88_pred_2;
                            _3405 = frontier_phi_88_pred_3;
                            _3404 = frontier_phi_88_pred_4;
                            _3403 = frontier_phi_88_pred_5;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            if (_3127 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3127;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3112;
                        frontier_phi_82_pred_1 = _3111;
                        frontier_phi_82_pred_2 = _3110;
                        frontier_phi_82_pred_3 = _3109;
                        frontier_phi_82_pred_4 = _3108;
                        frontier_phi_82_pred_5 = _3107;
                    }
                    _2750 = frontier_phi_82_pred;
                    _2748 = frontier_phi_82_pred_1;
                    _2746 = frontier_phi_82_pred_2;
                    _2744 = frontier_phi_82_pred_3;
                    _2742 = frontier_phi_82_pred_4;
                    _2740 = frontier_phi_82_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2740;
                        _2900 = _2742;
                        _2901 = _2744;
                        _2902 = _2746;
                        _2903 = _2748;
                        _2904 = _2750;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2746;
                frontier_phi_63_64_ladder_1 = _2750;
                frontier_phi_63_64_ladder_2 = _2748;
                frontier_phi_63_64_ladder_3 = _2744;
                frontier_phi_63_64_ladder_4 = _2742;
                frontier_phi_63_64_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_63_64_ladder = _2624;
                frontier_phi_63_64_ladder_1 = _2628;
                frontier_phi_63_64_ladder_2 = _2626;
                frontier_phi_63_64_ladder_3 = _2622;
                frontier_phi_63_64_ladder_4 = _2620;
                frontier_phi_63_64_ladder_5 = _2618;
            }
            _2739 = frontier_phi_63_64_ladder_5;
            _2741 = frontier_phi_63_64_ladder_4;
            _2743 = frontier_phi_63_64_ladder_3;
            _2745 = frontier_phi_63_64_ladder;
            _2747 = frontier_phi_63_64_ladder_2;
            _2749 = frontier_phi_63_64_ladder_1;
        }
        float _2754 = isnan(1.0) ? _483 : (isnan(_483) ? 1.0 : min(_483, 1.0));
        _2551 = (_2754 * _2745) + _2063;
        _2553 = (_2754 * _2747) + _2065;
        _2555 = (_2754 * _2749) + _2067;
        _2557 = ((_2739 * _468) * _2754) + _2401;
        _2559 = ((_2741 * _470) * _2754) + _2403;
        _2561 = ((_2743 * _471) * _2754) + _2405;
    }
    else
    {
        _2551 = _2063;
        _2553 = _2065;
        _2555 = _2067;
        _2557 = _2401;
        _2559 = _2403;
        _2561 = _2405;
    }
    float _4510 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4521 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4532 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2578 = ((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2551 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _483))) + ((_2557 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2579 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2553 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _483))) + ((_2559 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2580 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2555 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _483))) + ((_2561 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    uint _2581 = _443 + 6u;
    float _2589 = _403 / cbSceneParam._m0[86u].x;
    float _2590 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2644 = _2643 / _322;
        float _2655 = _2644 * _375;
        float _2656 = _376 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2659 = _2644 * _377;
        float _2661 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2656;
        float _2669 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2657 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2802 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2856 = ((abs(_2669 / _2657) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2679 * _2811) - exp2(_2679 * _2812)) * _2800))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2609);
        _2681 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2683 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2685 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2687 = _2867 * _2609;
    }
    else
    {
        _2681 = _2606;
        _2683 = _2607;
        _2685 = _2608;
        _2687 = _2609;
    }
    bool _2894;
    vec4 _2697;
    vec4 _2719;
    float _2721;
    float _2725;
    float _2726;
    float _2727;
    float _2728;
    bool _2738;
    for (;;)
    {
        _2697 = cbMatDynParam._m0[0u];
        float _2699 = roundEven(_2697.y);
        bool _2700 = _2699 == 3.0;
        float _2701 = log2(_2687);
        float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * _2578;
        float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * _2579;
        float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * _2580;
        float _2717 = _391 + (-0.5);
        _2719 = cbMtdParam._m0[1u];
        _2721 = _2719.y * _2717;
        float _2724 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2725 = _2724 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
        _2726 = _2724 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
        _2727 = _2724 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
        _2728 = _2717 * 0.999000012874603271484375;
        _2738 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2738)
        {
            if ((cbInstanceData._m0[_443 + 7u].x + _2728) < 0.5)
            {
                _2894 = true;
                break;
            }
        }
        uint _2835 = _444 + uint(_2697.w);
        if ((cbInstanceData._m0[_2835].w < 1.0) && ((cbInstanceData._m0[_2835].w + _2728) < 0.5))
        {
            _2894 = true;
            break;
        }
        if ((_2721 + 1.0) < _2719.x)
        {
            _2894 = true;
            break;
        }
        _2894 = false;
        break;
    }
    float _3098;
    if (_2894)
    {
        discard_state = true;
        _3098 = 0.0;
    }
    else
    {
        _3098 = cbInstanceData._m0[_2581].w;
    }
    SV_Target.x = _2725;
    SV_Target.y = _2726;
    SV_Target.z = _2727;
    SV_Target.w = _3098;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2581].w;
    discard_exit();
}


