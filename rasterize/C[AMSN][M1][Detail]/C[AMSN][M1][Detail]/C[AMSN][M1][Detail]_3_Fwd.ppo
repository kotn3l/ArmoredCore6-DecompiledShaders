#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _803;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _174 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _175 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _218 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = _218.x * cbMtdParam._m0[9u].x;
    float _225 = _218.y * cbMtdParam._m0[9u].y;
    float _226 = _218.z * cbMtdParam._m0[9u].z;
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _251 = (_243.x * 2.0) + (-1.0);
    float _253 = (_243.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3117 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))));
    float _261 = _243.z * cbMtdParam._m0[12u].y;
    float _264 = fma(_260, _188 * NORMAL.x, fma(_253, _195 * TANGENT.x, (_181 * _173) * _251));
    float _267 = fma(_260, _188 * NORMAL.y, fma(_253, _195 * TANGENT.y, (_181 * _174) * _251));
    float _270 = fma(_260, _188 * NORMAL.z, fma(_253, _195 * TANGENT.z, (_181 * _175) * _251));
    float _274 = inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270)));
    float _275 = _274 * _264;
    float _276 = _274 * _267;
    float _277 = _274 * _270;
    float _3128 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _278 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _3150 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3161 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _297 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _340 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _350 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _340);
    float _351 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _340);
    float _352 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _340);
    float _356 = inversesqrt(dot(vec3(_350, _351, _352), vec3(_350, _351, _352)));
    float _357 = _350 * _356;
    float _358 = _351 * _356;
    float _359 = _352 * _356;
    float _365 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _366 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _387 = fma(_277, cbSceneParam._m0[5u].z, fma(_276, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _275));
    float _390 = fma(_277, cbSceneParam._m0[6u].z, fma(_276, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _275));
    float _393 = fma(_277, cbSceneParam._m0[7u].z, fma(_276, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _275));
    uint _406 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = (_406 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _414 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * cbInstanceData._m0[_408].x;
    float _415 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * cbInstanceData._m0[_408].y;
    float _416 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * cbInstanceData._m0[_408].z;
    float _3172 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _3183 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    vec4 _428 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _365, cbSceneParam._m0[86u].y * _366));
    float _431 = _428.x * TEXCOORD_5.w;
    float _432 = dot(vec3(_275, _276, _277), vec3(_357, _358, _359));
    float _435 = _432 * 2.0;
    float _439 = (_435 * _275) - _357;
    float _440 = (_435 * _276) - _358;
    float _441 = (_435 * _277) - _359;
    float _445 = abs(dot(vec3(_357, _358, _359), vec3(_275, _276, _277)));
    float _3205 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _447 = sqrt(_278);
    float _460 = exp2((_447 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_447 * 3.0));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _802;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _527 = fma(_500, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _492));
        float _531 = fma(_500, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _492));
        float _535 = fma(_500, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _492));
        float _560 = _492 + _275;
        float _561 = _496 + _276;
        float _562 = _500 + _277;
        float _572 = fma(_562, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560)) - _527;
        float _573 = fma(_562, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560)) - _531;
        float _574 = fma(_562, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560)) - _535;
        float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
        float _591 = ((_578 * _572) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_527 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _592 = ((_578 * _573) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_531 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_578 * _574) / cbModelParam._m0[34u].z) + ((((((_535 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        float _630 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_596.x + (-0.5));
        float _632 = _630 * (_596.y + (-0.5));
        float _633 = _630 * (_596.z + (-0.5));
        float _640 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_603.x + (-0.5));
        float _642 = _640 * (_603.y + (-0.5));
        float _643 = _640 * (_603.z + (-0.5));
        float _650 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_610.x + (-0.5));
        float _652 = _650 * (_610.y + (-0.5));
        float _653 = _650 * (_610.z + (-0.5));
        float _660 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_617.x + (-0.5));
        float _662 = _660 * (_617.y + (-0.5));
        float _663 = _660 * (_617.z + (-0.5));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = _631 * 0.5;
        float _668 = _641 * 0.5;
        float _669 = _651 * 0.5;
        float _670 = dot(vec3(_667, _668, _669), vec3(_667, _668, _669));
        float _675 = (_670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_670);
        float _684 = (dot(vec3(_275, _276, _277), vec3(_675 * _667, _675 * _668, _675 * _669)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _694 = sqrt(((_668 * _668) + (_667 * _667)) + (_669 * _669)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _696 = _695 * 2.0;
        float _700 = (1.0 - _695) / (_695 + 1.0);
        float _3253 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _710 = ((((1.0 - _701) * (_696 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_696 + 1.0))) + _701) * _664;
        float _711 = _632 * 0.5;
        float _712 = _642 * 0.5;
        float _713 = _652 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _727 = (dot(vec3(_275, _276, _277), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _736 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3286 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_738 + 1.0))) + _743) * _665;
        float _753 = _633 * 0.5;
        float _754 = _643 * 0.5;
        float _755 = _653 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_275, _276, _277), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3319 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_780 + 1.0))) + _785) * _666;
        _802 = _633;
        _804 = _632;
        _805 = _631;
        _806 = _643;
        _807 = _642;
        _808 = _641;
        _809 = _653;
        _810 = _652;
        _811 = _651;
        _812 = _666;
        _813 = _665;
        _814 = _664;
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0)));
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
    }
    else
    {
        _802 = _803;
        _804 = _803;
        _805 = _803;
        _806 = _803;
        _807 = _803;
        _808 = _803;
        _809 = _803;
        _810 = _803;
        _811 = _803;
        _812 = _803;
        _813 = _803;
        _814 = _803;
        _815 = 0.0;
        _816 = 0.0;
        _817 = 0.0;
    }
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _843 = fma(_500, cbModelParam._m0[30u].z, fma(_496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _492));
        float _847 = fma(_500, cbModelParam._m0[31u].z, fma(_496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _492));
        float _851 = fma(_500, cbModelParam._m0[32u].z, fma(_496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _492));
        float _874 = _492 + _275;
        float _875 = _496 + _276;
        float _876 = _500 + _277;
        float _886 = fma(_876, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874)) - _843;
        float _887 = fma(_876, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874)) - _847;
        float _888 = fma(_876, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874)) - _851;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_843 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_847 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[35u].z) + ((((((_851 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _942 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_909.x + (-0.5));
        float _944 = _942 * (_909.y + (-0.5));
        float _945 = _942 * (_909.z + (-0.5));
        float _952 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_916.x + (-0.5));
        float _954 = _952 * (_916.y + (-0.5));
        float _955 = _952 * (_916.z + (-0.5));
        float _962 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_923.x + (-0.5));
        float _964 = _962 * (_923.y + (-0.5));
        float _965 = _962 * (_923.z + (-0.5));
        float _972 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_930.x + (-0.5));
        float _974 = _972 * (_930.y + (-0.5));
        float _975 = _972 * (_930.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_275, _276, _277), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3382 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1006 + 1.0))) + _1011) * _976;
        float _1021 = _944 * 0.5;
        float _1022 = _954 * 0.5;
        float _1023 = _964 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_275, _276, _277), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3415 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1048 + 1.0))) + _1053) * _977;
        float _1063 = _945 * 0.5;
        float _1064 = _955 * 0.5;
        float _1065 = _965 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_275, _276, _277), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3448 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1090 + 1.0))) + _1095) * _978;
        _1112 = _945;
        _1113 = _944;
        _1114 = _943;
        _1115 = _955;
        _1116 = _954;
        _1117 = _953;
        _1118 = _965;
        _1119 = _964;
        _1120 = _963;
        _1121 = _978;
        _1122 = _977;
        _1123 = _976;
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _803;
        _1113 = _803;
        _1114 = _803;
        _1115 = _803;
        _1116 = _803;
        _1117 = _803;
        _1118 = _803;
        _1119 = _803;
        _1120 = _803;
        _1121 = _803;
        _1122 = _803;
        _1123 = _803;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _816)) + _816;
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _817)) + _817;
    float _1159 = fma(_1138, cbSceneParam._m0[89u].z, fma(_1137, cbSceneParam._m0[89u].y, _1136 * cbSceneParam._m0[89u].x));
    float _1162 = fma(_1138, cbSceneParam._m0[90u].z, fma(_1137, cbSceneParam._m0[90u].y, _1136 * cbSceneParam._m0[90u].x));
    float _1165 = fma(_1138, cbSceneParam._m0[91u].z, fma(_1137, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1136));
    float _1180 = _439 * 0.5;
    float _1181 = _440 * 0.5;
    float _1182 = _441 * 0.5;
    float _1183 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1186 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1189 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1223;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1196 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_802, _806, _809, _812));
        float _1200 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_804, _807, _810, _813));
        float _1204 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_805, _808, _811, _814));
        float _1211 = dot(vec4(cbModelParam._m0[39u]), vec4(_1180, _1181, _1182, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1211) ? 0.0 : (isnan(0.0) ? _1211 : max(0.0, _1211))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1234;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1225 = dot(vec4(cbModelParam._m0[40u]), vec4(_1180, _1181, _1182, 1.0));
        _1234 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1225) ? 0.0 : (isnan(0.0) ? _1225 : max(0.0, _1225))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1234 = 1.0;
    }
    float _1238 = (_1234 * cbModelParam._m0[1u].x) + (_1223 * (1.0 - cbModelParam._m0[1u].x));
    float _1248 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _278);
    float _1249 = isnan(_1248) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1248 : min(cbModelParam._m0[25u].z, _1248));
    float _1331;
    float _1333;
    float _1335;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1298 = fma(_500, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492)) + cbModelParam._m0[13u].w;
        float _1302 = fma(_500, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492)) + cbModelParam._m0[14u].w;
        float _1306 = fma(_500, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492)) + cbModelParam._m0[15u].w;
        float _1309 = fma(_441, cbModelParam._m0[13u].z, fma(_440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439));
        float _1312 = fma(_441, cbModelParam._m0[14u].z, fma(_440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439));
        float _1315 = fma(_441, cbModelParam._m0[15u].z, fma(_440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439));
        float _1343;
        if (_1309 > 0.0)
        {
            _1343 = abs((1.0 - _1298) / _1309);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1298 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1343 = frontier_phi_14_12_ladder;
        }
        float _1547;
        if (_1312 > 0.0)
        {
            _1547 = abs((1.0 - _1302) / _1312);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1302 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1547 = frontier_phi_23_19_ladder;
        }
        float _1790;
        if (_1315 > 0.0)
        {
            _1790 = abs((1.0 - _1306) / _1315);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1306 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1790 = frontier_phi_35_30_ladder;
        }
        float _1792 = isnan(_1547) ? _1343 : (isnan(_1343) ? _1547 : min(_1343, _1547));
        float _1793 = isnan(_1790) ? _1792 : (isnan(_1792) ? _1790 : min(_1792, _1790));
        float _1797 = (_1793 * _1309) + _1298;
        float _1798 = (_1793 * _1312) + _1302;
        float _1799 = (_1793 * _1315) + _1306;
        float _1800 = _1793 * 9.9999997473787516355514526367188e-05;
        float _1802 = (-1.0) - _1800;
        float _1804 = _1800 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1799 > _1804) || ((_1799 < _1802) || ((_1798 > _1804) || ((_1798 < _1802) || ((_1797 < _1802) || (_1797 > _1804))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1799, cbModelParam._m0[9u].z, fma(_1798, cbModelParam._m0[9u].y, _1797 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1799, cbModelParam._m0[10u].z, fma(_1798, cbModelParam._m0[10u].y, _1797 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1799, cbModelParam._m0[11u].z, fma(_1798, cbModelParam._m0[11u].y, _1797 * cbModelParam._m0[11u].x))), _1249);
            frontier_phi_13_35_ladder = _1923.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1923.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1923.x * cbModelParam._m0[1u].y;
        }
        _1331 = frontier_phi_13_35_ladder_2;
        _1333 = frontier_phi_13_35_ladder_1;
        _1335 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_439, _440, _441), _1249);
        _1331 = _1319.x * cbModelParam._m0[1u].y;
        _1333 = _1319.y * cbModelParam._m0[1u].y;
        _1335 = _1319.z * cbModelParam._m0[1u].y;
    }
    float _1339 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _278);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1339 : min(cbModelParam._m0[25u].w, _1339));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1397 = fma(_500, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492)) + cbModelParam._m0[21u].w;
        float _1401 = fma(_500, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492)) + cbModelParam._m0[22u].w;
        float _1405 = fma(_500, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492)) + cbModelParam._m0[23u].w;
        float _1408 = fma(_441, cbModelParam._m0[21u].z, fma(_440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439));
        float _1411 = fma(_441, cbModelParam._m0[22u].z, fma(_440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439));
        float _1414 = fma(_441, cbModelParam._m0[23u].z, fma(_440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439));
        float _1552;
        if (_1408 > 0.0)
        {
            _1552 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1552 = frontier_phi_25_21_ladder;
        }
        float _1817;
        if (_1411 > 0.0)
        {
            _1817 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1817 = frontier_phi_37_32_ladder;
        }
        float _2022;
        if (_1414 > 0.0)
        {
            _2022 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2022 = frontier_phi_46_43_ladder;
        }
        float _2024 = isnan(_1817) ? _1552 : (isnan(_1552) ? _1817 : min(_1552, _1817));
        float _2025 = isnan(_2022) ? _2024 : (isnan(_2024) ? _2022 : min(_2024, _2022));
        float _2029 = (_2025 * _1408) + _1397;
        float _2030 = (_2025 * _1411) + _1401;
        float _2031 = (_2025 * _1414) + _1405;
        float _2032 = _2025 * 9.9999997473787516355514526367188e-05;
        float _2033 = (-1.0) - _2032;
        float _2035 = _2032 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2031 > _2035) || ((_2031 < _2033) || ((_2030 > _2035) || ((_2030 < _2033) || ((_2029 < _2033) || (_2029 > _2035))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2031, cbModelParam._m0[17u].z, fma(_2030, cbModelParam._m0[17u].y, _2029 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2031, cbModelParam._m0[18u].z, fma(_2030, cbModelParam._m0[18u].y, _2029 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2031, cbModelParam._m0[19u].z, fma(_2030, cbModelParam._m0[19u].y, _2029 * cbModelParam._m0[19u].x))), _1340);
            frontier_phi_22_46_ladder = _2230.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2230.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2230.x * cbModelParam._m0[1u].z;
        }
        _1433 = frontier_phi_22_46_ladder_2;
        _1435 = frontier_phi_22_46_ladder_1;
        _1437 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_439, _440, _441), _1340);
        _1433 = _1417.x * cbModelParam._m0[1u].z;
        _1435 = _1417.y * cbModelParam._m0[1u].z;
        _1437 = _1417.z * cbModelParam._m0[1u].z;
    }
    float _1449 = ((((1.0 - _460) * ((_447 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_460 * _447)) * _431;
    float _1450 = _1449 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1451 = _1449 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1452 = _1449 * ((cbModelParam._m0[1u].w * (_1437 - _1335)) + _1335);
    float _1455 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, _1450 * cbSceneParam._m0[91u].x));
    uvec4 _1471 = floatBitsToUint(cbInstanceData._m0[_406 + 5u]);
    uint _1473 = _1471.x * 14u;
    uint _1474 = _1473 + 13u;
    float _1481 = _431 + (-1.0);
    float _1486 = (cbLight._m0[_1474].x * _1481) + 1.0;
    float _1487 = (cbLight._m0[_1474].y * _1481) + 1.0;
    float _1488 = (cbLight._m0[_1474].z * _1481) + 1.0;
    float _1489 = (cbLight._m0[_1474].w * _1481) + 1.0;
    uint _1490 = _1473 + 5u;
    float _1496 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
    uint _1500 = _1473 + 4u;
    float _1506 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
    uint _1510 = _1473 | 1u;
    float _1521 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_275, _276, _277));
    float _1524 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_275, _276, _277));
    float _3584 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _3595 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
    float _1529 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.3183098733425140380859375;
    float _1531 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.3183098733425140380859375;
    float _1538 = ((cbLight._m0[_1490].x * _1496) * _1531) + ((cbLight._m0[_1500].x * _1506) * _1529);
    float _1539 = ((_1496 * cbLight._m0[_1490].y) * _1531) + ((_1506 * cbLight._m0[_1500].y) * _1529);
    float _1540 = ((_1496 * cbLight._m0[_1490].z) * _1531) + ((_1506 * cbLight._m0[_1500].z) * _1529);
    uvec4 _1544 = floatBitsToUint(cbLight._m0[_1473 + 12u]);
    bool _1546 = _1544.x == 0u;
    float _1557;
    float _1559;
    float _1561;
    if (_1546)
    {
        _1557 = _1538;
        _1559 = _1539;
        _1561 = _1540;
    }
    else
    {
        uint _1565 = _1473 + 6u;
        float _1581 = (dot(vec3(cbLight._m0[_1473 + 2u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1582 = _1581 * _1581;
        float _3606 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1584 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1557 = (((cbLight._m0[_1565].x * 0.3183098733425140380859375) * _1583) * _1584) + _1538;
        _1559 = (((cbLight._m0[_1565].y * 0.3183098733425140380859375) * _1583) * _1584) + _1539;
        _1561 = (((cbLight._m0[_1565].z * 0.3183098733425140380859375) * _1583) * _1584) + _1540;
    }
    bool _1564 = _1544.y == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1564)
    {
        _1602 = _1557;
        _1604 = _1559;
        _1606 = _1561;
    }
    else
    {
        uint _1761 = _1473 + 7u;
        float _1777 = (dot(vec3(cbLight._m0[_1473 + 3u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1778 = _1777 * _1777;
        float _3622 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1780 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        _1602 = (((cbLight._m0[_1761].x * 0.3183098733425140380859375) * _1779) * _1780) + _1557;
        _1604 = (((cbLight._m0[_1761].y * 0.3183098733425140380859375) * _1779) * _1780) + _1559;
        _1606 = (((cbLight._m0[_1761].z * 0.3183098733425140380859375) * _1779) * _1780) + _1561;
    }
    uint _1609 = _1473 + 8u;
    float _1622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1473].w)) * _278) * 0.949999988079071044921875);
    float _1623 = _1622 * _1622;
    float _1624 = cbLight._m0[_1473].x + _357;
    float _1625 = cbLight._m0[_1473].y + _358;
    float _1626 = cbLight._m0[_1473].z + _359;
    float _1630 = inversesqrt(dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626)));
    float _1631 = _1630 * _1624;
    float _1632 = _1630 * _1625;
    float _1633 = _1630 * _1626;
    float _1634 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1473].xyz));
    float _3638 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1637 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _1638 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _1639 = dot(vec3(_275, _276, _277), vec3(_1631, _1632, _1633));
    float _3660 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1642 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_1631, _1632, _1633));
    float _3671 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1647 = _1623 * _1623;
    float _1651 = ((_1642 * _1642) * (_1647 + (-1.0))) + 1.0;
    float _1662 = (exp2(log2(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1663 = 1.0 - _1623;
    float _1674 = (0.5 / (((_1638 * ((_1637 * _1663) + _1623)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1663) + _1623) * _1637))) * _1637;
    float _3682 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1676 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1647 / ((_1651 * _1651) * 3.141590118408203125));
    uint _1687 = _1473 + 9u;
    float _1698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1510].w)) * _278) * 0.949999988079071044921875);
    float _1699 = _1698 * _1698;
    float _1700 = cbLight._m0[_1510].x + _357;
    float _1701 = cbLight._m0[_1510].y + _358;
    float _1702 = cbLight._m0[_1510].z + _359;
    float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
    float _1707 = _1706 * _1700;
    float _1708 = _1706 * _1701;
    float _1709 = _1706 * _1702;
    float _1710 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1510].xyz));
    float _3693 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _1714 = dot(vec3(_275, _276, _277), vec3(_1707, _1708, _1709));
    float _3704 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _1718 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_1707, _1708, _1709));
    float _3715 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1722 = _1699 * _1699;
    float _1726 = ((_1717 * _1717) * (_1722 + (-1.0))) + 1.0;
    float _1735 = (exp2(log2(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1736 = 1.0 - _1699;
    float _1746 = (0.5 / (((_1638 * ((_1713 * _1736) + _1699)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1736) + _1699) * _1713))) * _1713;
    float _3726 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1748 = (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1722 / ((_1726 * _1726) * 3.141590118408203125));
    float _1758 = (((_1735 * cbLight._m0[_1687].x) * _1748) * _1496) + (((_1662 * cbLight._m0[_1609].x) * _1676) * _1506);
    float _1759 = (((_1735 * cbLight._m0[_1687].y) * _1748) * _1496) + (((_1662 * cbLight._m0[_1609].y) * _1676) * _1506);
    float _1760 = (((_1735 * cbLight._m0[_1687].z) * _1748) * _1496) + (((_1662 * cbLight._m0[_1609].z) * _1676) * _1506);
    float _1822;
    float _1824;
    float _1826;
    if (_1546)
    {
        _1822 = _1758;
        _1824 = _1759;
        _1826 = _1760;
    }
    else
    {
        uint _1828 = _1473 + 2u;
        uint _1832 = _1473 + 10u;
        float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _278) * 0.949999988079071044921875);
        float _1847 = _1846 * _1846;
        float _1848 = cbLight._m0[_1828].x + _357;
        float _1849 = cbLight._m0[_1828].y + _358;
        float _1850 = cbLight._m0[_1828].z + _359;
        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
        float _1855 = _1854 * _1848;
        float _1856 = _1854 * _1849;
        float _1857 = _1854 * _1850;
        float _1858 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1828].xyz));
        float _3737 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1862 = dot(vec3(_275, _276, _277), vec3(_1855, _1856, _1857));
        float _3748 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1865 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1866 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1855, _1856, _1857));
        float _3759 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1870 = _1847 * _1847;
        float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
        float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1884 = 1.0 - _1847;
        float _1894 = (0.5 / (((_1638 * ((_1861 * _1884) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1884) + _1847) * _1861))) * _1861;
        float _3770 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1896 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
        float _1897 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1822 = (((_1883 * cbLight._m0[_1832].x) * _1896) * _1897) + _1758;
        _1824 = (((_1883 * cbLight._m0[_1832].y) * _1896) * _1897) + _1759;
        _1826 = (((_1883 * cbLight._m0[_1832].z) * _1896) * _1897) + _1760;
    }
    float _1932;
    float _1934;
    float _1936;
    if (_1564)
    {
        _1932 = _1822;
        _1934 = _1824;
        _1936 = _1826;
    }
    else
    {
        uint _1943 = _1473 + 3u;
        uint _1947 = _1473 + 11u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _278) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _357;
        float _1964 = cbLight._m0[_1943].y + _358;
        float _1965 = cbLight._m0[_1943].z + _359;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1943].xyz));
        float _3786 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1977 = dot(vec3(_275, _276, _277), vec3(_1970, _1971, _1972));
        float _3797 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _3808 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1999 = 1.0 - _1962;
        float _2009 = (0.5 / (((_1638 * ((_1976 * _1999) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1999) + _1962) * _1976))) * _1976;
        float _3819 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2011 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2012 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        _1932 = (((_1998 * cbLight._m0[_1947].x) * _2011) * _2012) + _1822;
        _1934 = (((_1998 * cbLight._m0[_1947].y) * _2011) * _2012) + _1824;
        _1936 = (((_1998 * cbLight._m0[_1947].z) * _2011) * _2012) + _1826;
    }
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    if (_1471.y == 0u)
    {
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2088 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2087;
        float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2087;
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2087;
        uvec4 _2102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2103 = _2102.x;
        uint _2114 = uint((float(_2102.y) * floor(float(uint(cbSceneParam._m0[85u].y * _366) / _2103))) + floor(float(uint(cbSceneParam._m0[85u].x * _365) / _2103)));
        float _2124 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2125 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        uint _2128 = uint(isnan(14.0) ? _2125 : (isnan(_2125) ? 14.0 : min(_2125, 14.0)));
        uvec4 _2133 = texelFetch(g_lightClusterGridBuffer, int(((_2128 << 2u) + (_2114 << 6u)) >> 2u));
        uint _2134 = _2133.x;
        uint _2135 = _2102.z;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((((1u << ((_2135 >> 4u) & 15u)) + 4294967295u) & _2134) == 0u) || ((_2135 & 240u) == 0u))
        {
            _2235 = 0.0;
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
        }
        else
        {
            float _2236;
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            uint _2386 = 0u;
            uint _2395;
            bool _2396;
            for (;;)
            {
                _2395 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2386 << 2u)) >> 2u)).x;
                _2396 = _2395 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2396)
                {
                    frontier_phi_61_pred = _2380;
                    frontier_phi_61_pred_1 = _2385;
                    frontier_phi_61_pred_2 = _2384;
                    frontier_phi_61_pred_3 = _2383;
                    frontier_phi_61_pred_4 = _2382;
                    frontier_phi_61_pred_5 = _2381;
                }
                else
                {
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    uint _2510;
                    _2504 = _2380;
                    _2505 = _2381;
                    _2506 = _2382;
                    _2507 = _2383;
                    _2508 = _2384;
                    _2509 = _2385;
                    _2510 = _2395;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    for (;;)
                    {
                        uint _2514 = uint(findLSB(_2510)) + (_2386 << 5u);
                        uint _2511 = (_2510 + 4294967295u) & _2510;
                        uint _2516 = _2514 * 48u;
                        vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2516)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 3u)).x));
                        uint _2536 = (_2514 * 48u) + 4u;
                        vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2536)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 3u)).x));
                        uint _2555 = (_2514 * 48u) + 8u;
                        vec3 _2566 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x));
                        float _2570 = _2530.x - _2088;
                        float _2571 = _2530.y - _2089;
                        float _2572 = _2530.z - _2090;
                        float _2573 = dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572));
                        float _2576 = inversesqrt(_2573);
                        float _2577 = _2576 * _2570;
                        float _2578 = _2576 * _2571;
                        float _2579 = _2576 * _2572;
                        float _2580 = dot(vec3(_387, _390, _393), vec3(_2577, _2578, _2579));
                        float _2585 = 1.0 - (_2573 * _2530.w);
                        float _3845 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2586 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2587 = sqrt(_2573) * _2549.w;
                        float _2590 = 1.39999997615814208984375 / (_2587 + 1.39999997615814208984375);
                        float _2591 = _2590 * _2590;
                        float _2594 = ((1.0 - _2591) * _2580) + _2591;
                        float _2597 = _2587 * _2587;
                        float _2601 = ((isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))) * _2586) / ((_2597 * 0.699999988079071044921875) + 1.0);
                        float _2605 = (-0.0) - _2088;
                        float _2606 = (-0.0) - _2089;
                        float _2607 = (-0.0) - _2090;
                        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
                        float _2612 = _2611 * _2605;
                        float _2613 = _2611 * _2606;
                        float _2614 = _2611 * _2607;
                        float _2622 = exp2(log2(1.0 / ((_2597 * 3.5) + 5.0)) * 0.25);
                        float _2623 = 1.0 - _447;
                        float _2630 = sqrt(1.0 - ((1.0 - (_2623 * _2623)) * (1.0 - (_2622 * _2622))));
                        float _2631 = _2630 * _2630;
                        float _2632 = _2631 * _2631;
                        float _2633 = _2612 + _2577;
                        float _2634 = _2613 + _2578;
                        float _2635 = _2614 + _2579;
                        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
                        float _2643 = dot(vec3(_387, _390, _393), vec3(_2612, _2613, _2614));
                        float _3861 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2646 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2647 = dot(vec3(_387, _390, _393), vec3(_2639 * _2633, _2639 * _2634, _2639 * _2635));
                        float _3872 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2650 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                        float _2654 = ((_2650 * _2650) * (_2632 + (-1.0))) + 1.0;
                        float _2655 = _2590 * _2631;
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2580) + _2656;
                        float _3883 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                        float _2661 = 1.0 - _2631;
                        float _2671 = (0.5 / (((_2660 * ((_2646 * _2661) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2661) + _2631) * _2646))) * _2660;
                        float _3894 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2682 = (((_2632 * 3.1415927410125732421875) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) / ((_2654 * _2654) * ((_2597 * 2.1991131305694580078125) + 3.141590118408203125))) * _2586;
                        _2439 = (_2601 * _2549.x) + _2507;
                        _2440 = (_2601 * _2549.y) + _2508;
                        _2441 = (_2601 * _2549.z) + _2509;
                        _2436 = (_2682 * _2566.x) + _2504;
                        _2437 = (_2682 * _2566.y) + _2505;
                        _2438 = (_2682 * _2566.z) + _2506;
                        if (_2511 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2504 = _2436;
                            _2505 = _2437;
                            _2506 = _2438;
                            _2507 = _2439;
                            _2508 = _2440;
                            _2509 = _2441;
                            _2510 = _2511;
                        }
                    }
                    frontier_phi_61_pred = _2436;
                    frontier_phi_61_pred_1 = _2441;
                    frontier_phi_61_pred_2 = _2440;
                    frontier_phi_61_pred_3 = _2439;
                    frontier_phi_61_pred_4 = _2438;
                    frontier_phi_61_pred_5 = _2437;
                }
                _2236 = frontier_phi_61_pred;
                _2246 = frontier_phi_61_pred_1;
                _2244 = frontier_phi_61_pred_2;
                _2242 = frontier_phi_61_pred_3;
                _2240 = frontier_phi_61_pred_4;
                _2238 = frontier_phi_61_pred_5;
                uint _2387 = _2386 + 1u;
                if (_2387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2380 = _2236;
                    _2381 = _2238;
                    _2382 = _2240;
                    _2383 = _2242;
                    _2384 = _2244;
                    _2385 = _2246;
                    _2386 = _2387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2235 = _2236;
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
        }
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.z;
        uint _2252 = (_2250 >> 8u) & 15u;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((4294967295u << _2252) & _2134) == 0u)
        {
            _2348 = _2235;
            _2350 = _2237;
            _2352 = _2239;
            _2354 = _2241;
            _2356 = _2243;
            _2358 = _2245;
        }
        else
        {
            float _2373 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _2374 = _2373 * _2088;
            float _2375 = _2373 * _2089;
            float _2376 = _2373 * _2090;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2252 < ((_2250 >> 12u) & 15u))
            {
                float _2349;
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2487 = _2235;
                float _2488 = _2237;
                float _2489 = _2239;
                float _2490 = _2241;
                float _2491 = _2243;
                float _2492 = _2245;
                uint _2493 = _2252;
                uint _2502;
                bool _2503;
                for (;;)
                {
                    _2502 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2493 << 2u)) >> 2u)).x;
                    _2503 = _2502 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2503)
                    {
                        frontier_phi_67_pred = _2490;
                        frontier_phi_67_pred_1 = _2491;
                        frontier_phi_67_pred_2 = _2492;
                        frontier_phi_67_pred_3 = _2489;
                        frontier_phi_67_pred_4 = _2488;
                        frontier_phi_67_pred_5 = _2487;
                    }
                    else
                    {
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2700 = _2487;
                        float _2701 = _2488;
                        float _2702 = _2489;
                        float _2703 = _2490;
                        float _2704 = _2491;
                        float _2705 = _2492;
                        uint _2706 = _2502;
                        uint _2707;
                        vec4 _2732;
                        float _2733;
                        vec4 _2748;
                        vec3 _2760;
                        vec4 _2776;
                        vec4 _2792;
                        float _2839;
                        bool _2840;
                        for (;;)
                        {
                            uint _2717 = ((_2493 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2706));
                            _2707 = (_2706 + 4294967295u) & _2706;
                            uint _2719 = _2717 * 40u;
                            _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            _2733 = _2732.w;
                            uint _2735 = (_2717 * 40u) + 4u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2750 = (_2717 * 40u) + 8u;
                            _2760 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x));
                            uint _2763 = (_2717 * 40u) + 16u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2779 = (_2717 * 40u) + 20u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2795 = (_2717 * 40u) + 24u;
                            vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2814 = (_2717 * 40u) + 28u;
                            vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            _2839 = fma(_2090, _2827.z, fma(_2089, _2827.y, _2827.x * _2088)) + _2827.w;
                            _2840 = !((fma(_2090, _2808.z, fma(_2089, _2808.y, _2808.x * _2088)) + _2808.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2840)
                            {
                                float _2867 = _2732.x - _2088;
                                float _2868 = _2732.y - _2089;
                                float _2869 = _2732.z - _2090;
                                float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                                float _2873 = inversesqrt(_2870);
                                float _2874 = _2873 * _2867;
                                float _2875 = _2873 * _2868;
                                float _2876 = _2873 * _2869;
                                float _2880 = 1.0 - (_2870 / (_2733 * _2733));
                                float _3905 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2881 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2885 = sqrt(_2870) * _2748.w;
                                float _2887 = 1.39999997615814208984375 / (_2885 + 1.39999997615814208984375);
                                float _2888 = _2887 * _2887;
                                float _2891 = ((1.0 - _2888) * dot(vec3(_2874, _2875, _2876), vec3(_387, _390, _393))) + _2888;
                                float _2894 = _2885 * _2885;
                                float _2898 = (fma(_2090, _2776.z, fma(_2089, _2776.y, _2776.x * _2088)) + _2776.w) / _2839;
                                float _2899 = (fma(_2090, _2792.z, fma(_2089, _2792.y, _2792.x * _2088)) + _2792.w) / _2839;
                                float _2903 = 1.0 - dot(vec2(_2898, _2899), vec2(_2898, _2899));
                                float _3921 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2904 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2905 = _2904 * (((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2881) / ((_2894 * 0.699999988079071044921875) + 1.0));
                                float _2917 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                                float _2918 = 1.0 - _447;
                                float _2925 = sqrt(1.0 - ((1.0 - (_2918 * _2918)) * (1.0 - (_2917 * _2917))));
                                float _2926 = _2925 * _2925;
                                float _2927 = _2926 * _2926;
                                float _2928 = _2874 - _2374;
                                float _2929 = _2875 - _2375;
                                float _2930 = _2876 - _2376;
                                float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                                float _2938 = dot(vec3(_387, _390, _393), vec3((-0.0) - _2374, (-0.0) - _2375, (-0.0) - _2376));
                                float _3932 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                                float _2941 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _2942 = dot(vec3(_387, _390, _393), vec3(_2934 * _2928, _2934 * _2929, _2934 * _2930));
                                float _3943 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                                float _2945 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _2949 = ((_2945 * _2945) * (_2927 + (-1.0))) + 1.0;
                                float _2950 = _2887 * _2926;
                                float _2951 = _2950 * _2950;
                                float _2957 = ((1.0 - _2951) * dot(vec3(_387, _390, _393), vec3(_2874, _2875, _2876))) + _2951;
                                float _3954 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _2959 = 1.0 - _2926;
                                float _2969 = (0.5 / (((_2958 * ((_2941 * _2959) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2958 * _2959) + _2926) * _2941))) * _2958;
                                float _3965 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2979 = (_2904 * _2881) * (((_2927 * 3.1415927410125732421875) * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) / ((_2949 * _2949) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2979 * _2760.x;
                                frontier_phi_73_pred_1 = _2979 * _2760.y;
                                frontier_phi_73_pred_2 = _2905 * _2748.z;
                                frontier_phi_73_pred_3 = _2905 * _2748.y;
                                frontier_phi_73_pred_4 = _2905 * _2748.x;
                                frontier_phi_73_pred_5 = _2979 * _2760.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2983 = frontier_phi_73_pred;
                            _2984 = frontier_phi_73_pred_1;
                            _2988 = frontier_phi_73_pred_2;
                            _2987 = frontier_phi_73_pred_3;
                            _2986 = frontier_phi_73_pred_4;
                            _2985 = frontier_phi_73_pred_5;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2692 = _2988 + _2705;
                            _2687 = _2983 + _2700;
                            _2688 = _2984 + _2701;
                            _2689 = _2985 + _2702;
                            if (_2707 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2707;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2690;
                        frontier_phi_67_pred_1 = _2691;
                        frontier_phi_67_pred_2 = _2692;
                        frontier_phi_67_pred_3 = _2689;
                        frontier_phi_67_pred_4 = _2688;
                        frontier_phi_67_pred_5 = _2687;
                    }
                    _2355 = frontier_phi_67_pred;
                    _2357 = frontier_phi_67_pred_1;
                    _2359 = frontier_phi_67_pred_2;
                    _2353 = frontier_phi_67_pred_3;
                    _2351 = frontier_phi_67_pred_4;
                    _2349 = frontier_phi_67_pred_5;
                    uint _2494 = _2493 + 1u;
                    if (_2494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2487 = _2349;
                        _2488 = _2351;
                        _2489 = _2353;
                        _2490 = _2355;
                        _2491 = _2357;
                        _2492 = _2359;
                        _2493 = _2494;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2357;
                frontier_phi_55_56_ladder_1 = _2359;
                frontier_phi_55_56_ladder_2 = _2355;
                frontier_phi_55_56_ladder_3 = _2353;
                frontier_phi_55_56_ladder_4 = _2351;
                frontier_phi_55_56_ladder_5 = _2349;
            }
            else
            {
                frontier_phi_55_56_ladder = _2243;
                frontier_phi_55_56_ladder_1 = _2245;
                frontier_phi_55_56_ladder_2 = _2241;
                frontier_phi_55_56_ladder_3 = _2239;
                frontier_phi_55_56_ladder_4 = _2237;
                frontier_phi_55_56_ladder_5 = _2235;
            }
            _2348 = frontier_phi_55_56_ladder_5;
            _2350 = frontier_phi_55_56_ladder_4;
            _2352 = frontier_phi_55_56_ladder_3;
            _2354 = frontier_phi_55_56_ladder_2;
            _2356 = frontier_phi_55_56_ladder;
            _2358 = frontier_phi_55_56_ladder_1;
        }
        float _2363 = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
        _2147 = (_2363 * _2354) + _1602;
        _2149 = (_2363 * _2356) + _1604;
        _2151 = (_2363 * _2358) + _1606;
        _2153 = ((_2348 * 0.039999999105930328369140625) * _2363) + _1932;
        _2155 = ((_2350 * 0.039999999105930328369140625) * _2363) + _1934;
        _2157 = ((_2352 * 0.039999999105930328369140625) * _2363) + _1936;
    }
    else
    {
        _2147 = _1602;
        _2149 = _1604;
        _2151 = _1606;
        _2153 = _1932;
        _2155 = _1934;
        _2157 = _1936;
    }
    float _3981 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3992 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _4003 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    uint _2177 = _406 + 6u;
    float _2185 = _365 / cbSceneParam._m0[86u].x;
    float _2186 = _366 / cbSceneParam._m0[86u].y;
    vec4 _2200 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2185, _2186, (log2((isnan(cbSceneParam._m0[77u].w) ? _297 : (isnan(_297) ? cbSceneParam._m0[77u].w : min(_297, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2202 = _2200.x;
    float _2203 = _2200.y;
    float _2204 = _2200.z;
    float _2205 = _2200.w;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_297 > cbSceneParam._m0[78u].w)
    {
        float _2260 = isnan(_297) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _297 : min(cbSceneParam._m0[80u].w, _297));
        float _2261 = _2260 / _297;
        float _2272 = _2261 * _350;
        float _2273 = _351 * _2261;
        float _2274 = (-0.0) - _2273;
        float _2276 = _2261 * _352;
        float _2278 = (cbSceneParam._m0[77u].w * _2274) / _2260;
        float _2279 = _2278 + cbSceneParam._m0[79u].w;
        float _2280 = cbSceneParam._m0[79u].w - _2273;
        float _2286 = sqrt(((_2272 * _2272) + (_2273 * _2273)) + (_2276 * _2276));
        float _2289 = (1.0 - (cbSceneParam._m0[77u].w / _2260)) * _2286;
        float _2294 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2296 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2449;
        if (abs((_2274 - _2278) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2449 = ((((_2279 > 0.0) ? exp2(_2294 * _2279) : (2.0 - exp2(_2296 * _2279))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2289;
        }
        else
        {
            float _2409 = 1.0 / cbSceneParam._m0[80u].x;
            float _2410 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : max(_2279, _2280));
            float _2411 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : min(_2279, _2280));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            float _2421 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : min(_2411, 0.0));
            _2449 = ((abs(_2286 / _2274) * cbSceneParam._m0[80u].y) * ((((_2420 - _2421) * 2.0) - ((exp2(_2294 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)))) - exp2(_2294 * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))))) * _2409)) - ((exp2(_2296 * _2420) - exp2(_2296 * _2421)) * _2409))) + (_2289 * cbSceneParam._m0[80u].z);
        }
        vec4 _2451 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2185, _2186, 1.0), 0.0);
        float _2460 = exp2((_2449 * (-1.44269502162933349609375)) * (1.0 - _2451.w));
        float _2461 = log2(_2460);
        float _2477 = log2(_2205);
        _2298 = (exp2(_2477 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].x)) * _2451.x) / cbSceneParam._m0[78u].x)) + _2202;
        _2300 = (exp2(_2477 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].y)) * _2451.y) / cbSceneParam._m0[78u].y)) + _2203;
        _2302 = (exp2(_2477 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].z)) * _2451.z) / cbSceneParam._m0[78u].z)) + _2204;
        _2304 = _2460 * _2205;
    }
    else
    {
        _2298 = _2202;
        _2300 = _2203;
        _2302 = _2204;
        _2304 = _2205;
    }
    float _2316 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2317 = _2316 == 3.0;
    float _2318 = log2(_2304);
    float _2325 = exp2(_2318 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2147 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _431))) + ((_2153 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1238)) * cbPerFrame._m0[3u].x));
    float _2326 = exp2(_2318 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2149 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _431))) + ((_2155 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1238)) * cbPerFrame._m0[3u].x));
    float _2327 = exp2(_2318 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2151 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _431))) + ((_2157 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1238)) * cbPerFrame._m0[3u].x));
    float _2336 = (_2316 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2336 * (_2317 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2298)));
    SV_Target.y = _2336 * (_2317 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.z = _2336 * (_2317 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.w = cbInstanceData._m0[_2177].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2177].w;
}


