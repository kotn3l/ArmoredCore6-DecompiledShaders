#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _950;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _298 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3309 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _306 = (_299 * ((_267.x * cbMtdParam._m0[10u].x) - _242)) + _242;
    float _307 = (_299 * ((_267.y * cbMtdParam._m0[10u].y) - _243)) + _243;
    float _308 = (_299 * ((_267.z * cbMtdParam._m0[10u].z) - _244)) + _244;
    vec4 _320 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _322 = _320.x;
    float _324 = _322 - (_322 * TEXCOORD_5.x);
    vec4 _341 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _352 = dot(vec2(_349, _351), vec2(_349, _351));
    float _3320 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _357 = sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))));
    float _358 = _341.z * cbMtdParam._m0[12u].y;
    vec4 _371 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _385 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_371.z * cbMtdParam._m0[12u].x) - _358)) + _358;
    float _391 = ((((_371.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _349;
    float _392 = ((((_371.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _351;
    float _395 = fma(_357, _206 * NORMAL.x, fma(_392, _213 * TANGENT.x, (_199 * _191) * _391));
    float _398 = fma(_357, _206 * NORMAL.y, fma(_392, _213 * TANGENT.y, (_199 * _192) * _391));
    float _401 = fma(_357, _206 * NORMAL.z, fma(_392, _213 * TANGENT.z, (_199 * _193) * _391));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3331 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _409 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3353 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3364 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3375 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _413 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _480 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _470);
    float _481 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _470);
    float _482 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _470);
    float _486 = inversesqrt(dot(vec3(_480, _481, _482), vec3(_480, _481, _482)));
    float _487 = _480 * _486;
    float _488 = _481 * _486;
    float _489 = _482 * _486;
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _516 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _519 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _522 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _535 = uint(roundEven(NORMAL.w)) * 13u;
    uint _537 = (_535 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _543 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_537].x;
    float _544 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_537].y;
    float _545 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_537].z;
    float _3386 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _549 = 1.0 - _413;
    float _550 = _546 * _549;
    float _551 = _547 * _549;
    float _552 = _548 * _549;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _413;
    float _558 = (_547 + (-0.039999999105930328369140625)) * _413;
    float _559 = (_548 + (-0.039999999105930328369140625)) * _413;
    float _560 = _557 + 0.039999999105930328369140625;
    float _562 = _558 + 0.039999999105930328369140625;
    float _563 = _559 + 0.039999999105930328369140625;
    vec4 _572 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _575 = _572.x * TEXCOORD_5.w;
    float _576 = dot(vec3(_406, _407, _408), vec3(_487, _488, _489));
    float _579 = _576 * 2.0;
    float _583 = (_579 * _406) - _487;
    float _584 = (_579 * _407) - _488;
    float _585 = (_579 * _408) - _489;
    float _589 = abs(dot(vec3(_487, _488, _489), vec3(_406, _407, _408)));
    float _3419 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _591 = sqrt(_409);
    float _604 = exp2((_591 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_591 * 3.0));
    float _610 = (1.0 - _604) * ((_591 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _611 = _604 * _591;
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639));
        float _678 = fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639));
        float _682 = fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639));
        float _707 = _639 + _406;
        float _708 = _643 + _407;
        float _709 = _647 + _408;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _674;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _678;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _682;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_406, _407, _408), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3467 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_406, _407, _408), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3500 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_406, _407, _408), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3533 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _990 = fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639));
        float _994 = fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639));
        float _998 = fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639));
        float _1021 = _639 + _406;
        float _1022 = _643 + _407;
        float _1023 = _647 + _408;
        float _1033 = fma(_1023, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021)) - _990;
        float _1034 = fma(_1023, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021)) - _994;
        float _1035 = fma(_1023, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021)) - _998;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_990 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_994 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[35u].z) + ((((((_998 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1089 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1056.x + (-0.5));
        float _1091 = _1089 * (_1056.y + (-0.5));
        float _1092 = _1089 * (_1056.z + (-0.5));
        float _1099 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1063.x + (-0.5));
        float _1101 = _1099 * (_1063.y + (-0.5));
        float _1102 = _1099 * (_1063.z + (-0.5));
        float _1109 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1070.x + (-0.5));
        float _1111 = _1109 * (_1070.y + (-0.5));
        float _1112 = _1109 * (_1070.z + (-0.5));
        float _1119 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1077.x + (-0.5));
        float _1121 = _1119 * (_1077.y + (-0.5));
        float _1122 = _1119 * (_1077.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_406, _407, _408), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3596 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1153 + 1.0))) + _1158) * _1123;
        float _1168 = _1091 * 0.5;
        float _1169 = _1101 * 0.5;
        float _1170 = _1111 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_406, _407, _408), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3629 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1195 + 1.0))) + _1200) * _1124;
        float _1210 = _1092 * 0.5;
        float _1211 = _1102 * 0.5;
        float _1212 = _1112 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_406, _407, _408), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3662 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1237 + 1.0))) + _1242) * _1125;
        _1259 = _1092;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1102;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1112;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1125;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _950;
        _1260 = _950;
        _1261 = _950;
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1284, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1284, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1284, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1283));
    float _1327 = _583 * 0.5;
    float _1328 = _584 * 0.5;
    float _1329 = _585 * 0.5;
    float _1330 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1333 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1336 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1370;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1343 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_949, _953, _956, _959));
        float _1347 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_951, _954, _957, _960));
        float _1351 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_952, _955, _958, _961));
        float _1358 = dot(vec4(cbModelParam._m0[39u]), vec4(_1327, _1328, _1329, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1381;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1372 = dot(vec4(cbModelParam._m0[40u]), vec4(_1327, _1328, _1329, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1385 = (_1381 * cbModelParam._m0[1u].x) + (_1370 * (1.0 - cbModelParam._m0[1u].x));
    float _1395 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _409);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1395 : min(cbModelParam._m0[25u].z, _1395));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_585, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _583));
        float _1459 = fma(_585, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _583));
        float _1462 = fma(_585, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _583));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1490 = frontier_phi_14_12_ladder;
        }
        float _1717;
        if (_1459 > 0.0)
        {
            _1717 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1717 = frontier_phi_23_19_ladder;
        }
        float _1974;
        if (_1462 > 0.0)
        {
            _1974 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1974 = frontier_phi_35_30_ladder;
        }
        float _1976 = isnan(_1717) ? _1490 : (isnan(_1490) ? _1717 : min(_1490, _1717));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1456) + _1445;
        float _1982 = (_1977 * _1459) + _1449;
        float _1983 = (_1977 * _1462) + _1453;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1986 = (-1.0) - _1984;
        float _1988 = _1984 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1983 > _1988) || ((_1983 < _1986) || ((_1982 > _1988) || ((_1982 < _1986) || ((_1981 < _1986) || (_1981 > _1988))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2111 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1983, cbModelParam._m0[9u].z, fma(_1982, cbModelParam._m0[9u].y, _1981 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1983, cbModelParam._m0[10u].z, fma(_1982, cbModelParam._m0[10u].y, _1981 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1983, cbModelParam._m0[11u].z, fma(_1982, cbModelParam._m0[11u].y, _1981 * cbModelParam._m0[11u].x))), _1396);
            frontier_phi_13_35_ladder = _2111.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2111.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2111.x * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_13_35_ladder_2;
        _1480 = frontier_phi_13_35_ladder_1;
        _1482 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_583, _584, _585), _1396);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _409);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_585, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _583));
        float _1558 = fma(_585, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _583));
        float _1561 = fma(_585, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _583));
        float _1722;
        if (_1555 > 0.0)
        {
            _1722 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _2001;
        if (_1558 > 0.0)
        {
            _2001 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2001 = frontier_phi_37_32_ladder;
        }
        float _2214;
        if (_1561 > 0.0)
        {
            _2214 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2214 = frontier_phi_46_43_ladder;
        }
        float _2216 = isnan(_2001) ? _1722 : (isnan(_1722) ? _2001 : min(_1722, _2001));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1555) + _1544;
        float _2222 = (_2217 * _1558) + _1548;
        float _2223 = (_2217 * _1561) + _1552;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_22_46_ladder = _2422.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2422.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2422.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_22_46_ladder_2;
        _1582 = frontier_phi_22_46_ladder_1;
        _1584 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_583, _584, _585), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1597 = (((_610 * _560) + _611) * _575) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1599 = (((_610 * _562) + _611) * _575) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_610 * _563) + _611) * _575) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1604 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    vec4 _1618 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_495, _496));
    float _1620 = _1618.w;
    float _1632 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1620);
    float _1633 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1620);
    float _1634 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1620);
    uvec4 _1638 = floatBitsToUint(cbInstanceData._m0[_535 + 5u]);
    uint _1640 = _1638.x * 14u;
    uint _1641 = _1640 + 13u;
    float _1648 = _575 + (-1.0);
    float _1653 = (cbLight._m0[_1641].x * _1648) + 1.0;
    float _1654 = (cbLight._m0[_1641].y * _1648) + 1.0;
    float _1655 = (cbLight._m0[_1641].z * _1648) + 1.0;
    float _1656 = (cbLight._m0[_1641].w * _1648) + 1.0;
    uint _1657 = _1640 + 5u;
    float _1663 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
    uint _1667 = _1640 + 4u;
    float _1676 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
    uint _1680 = _1640 | 1u;
    float _1691 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_406, _407, _408));
    float _1694 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_406, _407, _408));
    float _3798 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _3809 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1699 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1701 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1708 = ((cbLight._m0[_1657].x * _1663) * _1701) + (((cbLight._m0[_1667].x * _1632) * _1676) * _1699);
    float _1709 = ((_1663 * cbLight._m0[_1657].y) * _1701) + (((cbLight._m0[_1667].y * _1633) * _1676) * _1699);
    float _1710 = ((_1663 * cbLight._m0[_1657].z) * _1701) + (((cbLight._m0[_1667].z * _1634) * _1676) * _1699);
    uvec4 _1714 = floatBitsToUint(cbLight._m0[_1640 + 12u]);
    bool _1716 = _1714.x == 0u;
    float _1727;
    float _1729;
    float _1731;
    if (_1716)
    {
        _1727 = _1708;
        _1729 = _1709;
        _1731 = _1710;
    }
    else
    {
        uint _1735 = _1640 + 6u;
        float _1751 = (dot(vec3(cbLight._m0[_1640 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3820 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1754 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _1727 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1708;
        _1729 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1709;
        _1731 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1710;
    }
    bool _1734 = _1714.y == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1734)
    {
        _1772 = _1727;
        _1774 = _1729;
        _1776 = _1731;
    }
    else
    {
        uint _1945 = _1640 + 7u;
        float _1961 = (dot(vec3(cbLight._m0[_1640 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1962 = _1961 * _1961;
        float _3836 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1963 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1964 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
        _1772 = (((cbLight._m0[_1945].x * 0.3183098733425140380859375) * _1963) * _1964) + _1727;
        _1774 = (((cbLight._m0[_1945].y * 0.3183098733425140380859375) * _1963) * _1964) + _1729;
        _1776 = (((cbLight._m0[_1945].z * 0.3183098733425140380859375) * _1963) * _1964) + _1731;
    }
    uint _1779 = _1640 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _409) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1640].x + _487;
    float _1795 = cbLight._m0[_1640].y + _488;
    float _1796 = cbLight._m0[_1640].z + _489;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1640].xyz));
    float _3852 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _1808 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1809 = dot(vec3(_406, _407, _408), vec3(_1801, _1802, _1803));
    float _3874 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1801, _1802, _1803));
    float _3885 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1830 = 0.959999978542327880859375 - _557;
    float _1832 = 0.959999978542327880859375 - _558;
    float _1833 = 0.959999978542327880859375 - _559;
    float _1840 = 1.0 - _1793;
    float _1851 = (0.5 / (((_1808 * ((_1807 * _1840) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1840) + _1793) * _1807))) * _1807;
    float _3896 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    uint _1867 = _1640 + 9u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1680].w)) * _409) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1680].x + _487;
    float _1881 = cbLight._m0[_1680].y + _488;
    float _1882 = cbLight._m0[_1680].z + _489;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1680].xyz));
    float _3907 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1894 = dot(vec3(_406, _407, _408), vec3(_1887, _1888, _1889));
    float _3918 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1898 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1887, _1888, _1889));
    float _3929 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1902 = _1879 * _1879;
    float _1906 = ((_1897 * _1897) * (_1902 + (-1.0))) + 1.0;
    float _1913 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
    float _1920 = 1.0 - _1879;
    float _1930 = (0.5 / (((_1808 * ((_1893 * _1920) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1920) + _1879) * _1893))) * _1893;
    float _3940 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1902 / ((_1906 * _1906) * 3.141590118408203125));
    float _1942 = (((((_1913 * _1830) + _560) * cbLight._m0[_1867].x) * _1932) * _1663) + ((((cbLight._m0[_1779].x * _1632) * ((_1829 * _1830) + _560)) * _1853) * _1676);
    float _1943 = (((((_1913 * _1832) + _562) * cbLight._m0[_1867].y) * _1932) * _1663) + ((((cbLight._m0[_1779].y * _1633) * ((_1829 * _1832) + _562)) * _1853) * _1676);
    float _1944 = (((((_1913 * _1833) + _563) * cbLight._m0[_1867].z) * _1932) * _1663) + ((((cbLight._m0[_1779].z * _1634) * ((_1829 * _1833) + _563)) * _1853) * _1676);
    float _2006;
    float _2008;
    float _2010;
    if (_1716)
    {
        _2006 = _1942;
        _2008 = _1943;
        _2010 = _1944;
    }
    else
    {
        uint _2012 = _1640 + 2u;
        uint _2016 = _1640 + 10u;
        float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _409) * 0.949999988079071044921875);
        float _2031 = _2030 * _2030;
        float _2032 = cbLight._m0[_2012].x + _487;
        float _2033 = cbLight._m0[_2012].y + _488;
        float _2034 = cbLight._m0[_2012].z + _489;
        float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
        float _2039 = _2038 * _2032;
        float _2040 = _2038 * _2033;
        float _2041 = _2038 * _2034;
        float _2042 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2012].xyz));
        float _3951 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2045 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2046 = dot(vec3(_406, _407, _408), vec3(_2039, _2040, _2041));
        float _3962 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2050 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2039, _2040, _2041));
        float _3973 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2054 = _2031 * _2031;
        float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
        float _2065 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
        float _2072 = 1.0 - _2031;
        float _2082 = (0.5 / (((_1808 * ((_2045 * _2072) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2072) + _2031) * _2045))) * _2045;
        float _3984 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2084 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
        float _2085 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _2006 = (((((_2065 * _1830) + _560) * cbLight._m0[_2016].x) * _2084) * _2085) + _1942;
        _2008 = (((((_2065 * _1832) + _562) * cbLight._m0[_2016].y) * _2084) * _2085) + _1943;
        _2010 = (((((_2065 * _1833) + _563) * cbLight._m0[_2016].z) * _2084) * _2085) + _1944;
    }
    float _2120;
    float _2122;
    float _2124;
    if (_1734)
    {
        _2120 = _2006;
        _2122 = _2008;
        _2124 = _2010;
    }
    else
    {
        uint _2131 = _1640 + 3u;
        uint _2135 = _1640 + 11u;
        float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _409) * 0.949999988079071044921875);
        float _2150 = _2149 * _2149;
        float _2151 = cbLight._m0[_2131].x + _487;
        float _2152 = cbLight._m0[_2131].y + _488;
        float _2153 = cbLight._m0[_2131].z + _489;
        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
        float _2158 = _2157 * _2151;
        float _2159 = _2157 * _2152;
        float _2160 = _2157 * _2153;
        float _2161 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2131].xyz));
        float _4000 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2165 = dot(vec3(_406, _407, _408), vec3(_2158, _2159, _2160));
        float _4011 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2158, _2159, _2160));
        float _4022 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2173 = _2150 * _2150;
        float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
        float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
        float _2191 = 1.0 - _2150;
        float _2201 = (0.5 / (((_1808 * ((_2164 * _2191) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2191) + _2150) * _2164))) * _2164;
        float _4033 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
        float _2204 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
        _2120 = (((((_2184 * _1830) + _560) * cbLight._m0[_2135].x) * _2203) * _2204) + _2006;
        _2122 = (((((_2184 * _1832) + _562) * cbLight._m0[_2135].y) * _2203) * _2204) + _2008;
        _2124 = (((((_2184 * _1833) + _563) * cbLight._m0[_2135].z) * _2203) * _2204) + _2010;
    }
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_1638.y == 0u)
    {
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2279;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2279;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2279;
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.x;
        uint _2306 = uint((float(_2294.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _2295))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _2295)));
        float _2316 = (log2(_2282 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2317 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        uint _2320 = uint(isnan(14.0) ? _2317 : (isnan(_2317) ? 14.0 : min(_2317, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2320 << 2u) + (_2306 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2294.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            uint _2578 = 0u;
            uint _2587;
            bool _2588;
            for (;;)
            {
                _2587 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                _2588 = _2587 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2588)
                {
                    frontier_phi_61_pred = _2572;
                    frontier_phi_61_pred_1 = _2577;
                    frontier_phi_61_pred_2 = _2576;
                    frontier_phi_61_pred_3 = _2575;
                    frontier_phi_61_pred_4 = _2574;
                    frontier_phi_61_pred_5 = _2573;
                }
                else
                {
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    uint _2702;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2587;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    for (;;)
                    {
                        uint _2706 = uint(findLSB(_2702)) + (_2578 << 5u);
                        uint _2703 = (_2702 + 4294967295u) & _2702;
                        uint _2708 = _2706 * 48u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2728 = (_2706 * 48u) + 4u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2747 = (_2706 * 48u) + 8u;
                        vec3 _2758 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x));
                        float _2762 = _2722.x - _2280;
                        float _2763 = _2722.y - _2281;
                        float _2764 = _2722.z - _2282;
                        float _2765 = dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764));
                        float _2768 = inversesqrt(_2765);
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2772 = dot(vec3(_516, _519, _522), vec3(_2769, _2770, _2771));
                        float _2777 = 1.0 - (_2765 * _2722.w);
                        float _4059 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2778 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2779 = sqrt(_2765) * _2741.w;
                        float _2782 = 1.39999997615814208984375 / (_2779 + 1.39999997615814208984375);
                        float _2783 = _2782 * _2782;
                        float _2786 = ((1.0 - _2783) * _2772) + _2783;
                        float _2789 = _2779 * _2779;
                        float _2793 = ((isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * _2778) / ((_2789 * 0.699999988079071044921875) + 1.0);
                        float _2797 = (-0.0) - _2280;
                        float _2798 = (-0.0) - _2281;
                        float _2799 = (-0.0) - _2282;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2814 = exp2(log2(1.0 / ((_2789 * 3.5) + 5.0)) * 0.25);
                        float _2815 = 1.0 - _591;
                        float _2822 = sqrt(1.0 - ((1.0 - (_2815 * _2815)) * (1.0 - (_2814 * _2814))));
                        float _2823 = _2822 * _2822;
                        float _2824 = _2823 * _2823;
                        float _2825 = _2804 + _2769;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2835 = dot(vec3(_516, _519, _522), vec3(_2804, _2805, _2806));
                        float _4075 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2839 = dot(vec3(_516, _519, _522), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827));
                        float _4086 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2846 = ((_2842 * _2842) * (_2824 + (-1.0))) + 1.0;
                        float _2847 = _2782 * _2823;
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2772) + _2848;
                        float _4097 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2853 = 1.0 - _2823;
                        float _2863 = (0.5 / (((_2852 * ((_2838 * _2853) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2852 * _2853) + _2823) * _2838))) * _2852;
                        float _4108 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2874 = (((_2824 * 3.1415927410125732421875) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) / ((_2846 * _2846) * ((_2789 * 2.1991131305694580078125) + 3.141590118408203125))) * _2778;
                        _2631 = (_2793 * _2741.x) + _2699;
                        _2632 = (_2793 * _2741.y) + _2700;
                        _2633 = (_2793 * _2741.z) + _2701;
                        _2628 = (_2874 * _2758.x) + _2696;
                        _2629 = (_2874 * _2758.y) + _2697;
                        _2630 = (_2874 * _2758.z) + _2698;
                        if (_2703 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2703;
                        }
                    }
                    frontier_phi_61_pred = _2628;
                    frontier_phi_61_pred_1 = _2633;
                    frontier_phi_61_pred_2 = _2632;
                    frontier_phi_61_pred_3 = _2631;
                    frontier_phi_61_pred_4 = _2630;
                    frontier_phi_61_pred_5 = _2629;
                }
                _2428 = frontier_phi_61_pred;
                _2438 = frontier_phi_61_pred_1;
                _2436 = frontier_phi_61_pred_2;
                _2434 = frontier_phi_61_pred_3;
                _2432 = frontier_phi_61_pred_4;
                _2430 = frontier_phi_61_pred_5;
                uint _2579 = _2578 + 1u;
                if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2572 = _2428;
                    _2573 = _2430;
                    _2574 = _2432;
                    _2575 = _2434;
                    _2576 = _2436;
                    _2577 = _2438;
                    _2578 = _2579;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((4294967295u << _2444) & _2326) == 0u)
        {
            _2540 = _2427;
            _2542 = _2429;
            _2544 = _2431;
            _2546 = _2433;
            _2548 = _2435;
            _2550 = _2437;
        }
        else
        {
            float _2565 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
            float _2566 = _2565 * _2280;
            float _2567 = _2565 * _2281;
            float _2568 = _2565 * _2282;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2679 = _2427;
                float _2680 = _2429;
                float _2681 = _2431;
                float _2682 = _2433;
                float _2683 = _2435;
                float _2684 = _2437;
                uint _2685 = _2444;
                uint _2694;
                bool _2695;
                for (;;)
                {
                    _2694 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                    _2695 = _2694 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2695)
                    {
                        frontier_phi_67_pred = _2682;
                        frontier_phi_67_pred_1 = _2683;
                        frontier_phi_67_pred_2 = _2684;
                        frontier_phi_67_pred_3 = _2681;
                        frontier_phi_67_pred_4 = _2680;
                        frontier_phi_67_pred_5 = _2679;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        uint _2898 = _2694;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2968;
                        vec4 _2984;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2909 = ((_2685 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2955 = (_2909 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2909 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2909 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2909 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2282, _3019.z, fma(_2281, _3019.y, _3019.x * _2280)) + _3019.w;
                            _3032 = !((fma(_2282, _3000.z, fma(_2281, _3000.y, _3000.x * _2280)) + _3000.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2924.x - _2280;
                                float _3060 = _2924.y - _2281;
                                float _3061 = _2924.z - _2282;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2925 * _2925));
                                float _4119 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3077 = sqrt(_3062) * _2940.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_516, _519, _522))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2282, _2968.z, fma(_2281, _2968.y, _2968.x * _2280)) + _2968.w) / _3031;
                                float _3091 = (fma(_2282, _2984.z, fma(_2281, _2984.y, _2984.x * _2280)) + _2984.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4135 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _591;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2566;
                                float _3121 = _3067 - _2567;
                                float _3122 = _3068 - _2568;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_516, _519, _522), vec3((-0.0) - _2566, (-0.0) - _2567, (-0.0) - _2568));
                                float _4146 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3134 = dot(vec3(_516, _519, _522), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4157 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_516, _519, _522), vec3(_3066, _3067, _3068))) + _3143;
                                float _4168 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4179 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3171 * _2952.x;
                                frontier_phi_73_pred_1 = _3171 * _2952.y;
                                frontier_phi_73_pred_2 = _3097 * _2940.z;
                                frontier_phi_73_pred_3 = _3097 * _2940.y;
                                frontier_phi_73_pred_4 = _3097 * _2940.x;
                                frontier_phi_73_pred_5 = _3171 * _2952.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_73_pred;
                            _3176 = frontier_phi_73_pred_1;
                            _3180 = frontier_phi_73_pred_2;
                            _3179 = frontier_phi_73_pred_3;
                            _3178 = frontier_phi_73_pred_4;
                            _3177 = frontier_phi_73_pred_5;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2882;
                        frontier_phi_67_pred_1 = _2883;
                        frontier_phi_67_pred_2 = _2884;
                        frontier_phi_67_pred_3 = _2881;
                        frontier_phi_67_pred_4 = _2880;
                        frontier_phi_67_pred_5 = _2879;
                    }
                    _2547 = frontier_phi_67_pred;
                    _2549 = frontier_phi_67_pred_1;
                    _2551 = frontier_phi_67_pred_2;
                    _2545 = frontier_phi_67_pred_3;
                    _2543 = frontier_phi_67_pred_4;
                    _2541 = frontier_phi_67_pred_5;
                    uint _2686 = _2685 + 1u;
                    if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2679 = _2541;
                        _2680 = _2543;
                        _2681 = _2545;
                        _2682 = _2547;
                        _2683 = _2549;
                        _2684 = _2551;
                        _2685 = _2686;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2549;
                frontier_phi_55_56_ladder_1 = _2551;
                frontier_phi_55_56_ladder_2 = _2547;
                frontier_phi_55_56_ladder_3 = _2545;
                frontier_phi_55_56_ladder_4 = _2543;
                frontier_phi_55_56_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_55_56_ladder = _2435;
                frontier_phi_55_56_ladder_1 = _2437;
                frontier_phi_55_56_ladder_2 = _2433;
                frontier_phi_55_56_ladder_3 = _2431;
                frontier_phi_55_56_ladder_4 = _2429;
                frontier_phi_55_56_ladder_5 = _2427;
            }
            _2540 = frontier_phi_55_56_ladder_5;
            _2542 = frontier_phi_55_56_ladder_4;
            _2544 = frontier_phi_55_56_ladder_3;
            _2546 = frontier_phi_55_56_ladder_2;
            _2548 = frontier_phi_55_56_ladder;
            _2550 = frontier_phi_55_56_ladder_1;
        }
        float _2555 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
        _2339 = (_2555 * _2546) + _1772;
        _2341 = (_2555 * _2548) + _1774;
        _2343 = (_2555 * _2550) + _1776;
        _2345 = ((_2540 * _560) * _2555) + _2120;
        _2347 = ((_2542 * _562) * _2555) + _2122;
        _2349 = ((_2544 * _563) * _2555) + _2124;
    }
    else
    {
        _2339 = _1772;
        _2341 = _1774;
        _2343 = _1776;
        _2345 = _2120;
        _2347 = _2122;
        _2349 = _2124;
    }
    float _4195 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4206 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4217 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    uint _2369 = _535 + 6u;
    float _2377 = _495 / cbSceneParam._m0[86u].x;
    float _2378 = _496 / cbSceneParam._m0[86u].y;
    vec4 _2392 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2394 = _2392.x;
    float _2395 = _2392.y;
    float _2396 = _2392.z;
    float _2397 = _2392.w;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2453 = _2452 / _429;
        float _2464 = _2453 * _480;
        float _2465 = _481 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2468 = _2453 * _482;
        float _2470 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2471 = _2470 + cbSceneParam._m0[79u].w;
        float _2472 = cbSceneParam._m0[79u].w - _2465;
        float _2478 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2468 * _2468));
        float _2481 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2478;
        float _2486 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2488 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2641;
        if (abs((_2466 - _2470) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2641 = ((((_2471 > 0.0) ? exp2(_2486 * _2471) : (2.0 - exp2(_2488 * _2471))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2481;
        }
        else
        {
            float _2601 = 1.0 / cbSceneParam._m0[80u].x;
            float _2602 = isnan(_2472) ? _2471 : (isnan(_2471) ? _2472 : max(_2471, _2472));
            float _2603 = isnan(_2472) ? _2471 : (isnan(_2471) ? _2472 : min(_2471, _2472));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            _2641 = ((abs(_2478 / _2466) * cbSceneParam._m0[80u].y) * ((((_2612 - _2613) * 2.0) - ((exp2(_2486 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0)))) - exp2(_2486 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))))) * _2601)) - ((exp2(_2488 * _2612) - exp2(_2488 * _2613)) * _2601))) + (_2481 * cbSceneParam._m0[80u].z);
        }
        vec4 _2643 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, 1.0), 0.0);
        float _2652 = exp2((_2641 * (-1.44269502162933349609375)) * (1.0 - _2643.w));
        float _2653 = log2(_2652);
        float _2669 = log2(_2397);
        _2490 = (exp2(_2669 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].x)) * _2643.x) / cbSceneParam._m0[78u].x)) + _2394;
        _2492 = (exp2(_2669 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].y)) * _2643.y) / cbSceneParam._m0[78u].y)) + _2395;
        _2494 = (exp2(_2669 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].z)) * _2643.z) / cbSceneParam._m0[78u].z)) + _2396;
        _2496 = _2652 * _2397;
    }
    else
    {
        _2490 = _2394;
        _2492 = _2395;
        _2494 = _2396;
        _2496 = _2397;
    }
    float _2508 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2509 = _2508 == 3.0;
    float _2510 = log2(_2496);
    float _2517 = exp2(_2510 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2339 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _575))) + ((_2345 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2518 = exp2(_2510 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2341 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _575))) + ((_2347 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2519 = exp2(_2510 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2343 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _575))) + ((_2349 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2528 = (_2508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2528 * (_2509 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2490)));
    SV_Target.y = _2528 * (_2509 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2492)));
    SV_Target.z = _2528 * (_2509 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2494)));
    SV_Target.w = cbInstanceData._m0[_2369].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2369].w;
}


