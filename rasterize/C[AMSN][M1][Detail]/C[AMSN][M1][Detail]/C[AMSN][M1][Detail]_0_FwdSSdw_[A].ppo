#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _994;
float _3407;
float _3408;
float _3409;
float _3410;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _302 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3419 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _310 = (_303 * ((_271.x * cbMtdParam._m0[10u].x) - _246)) + _246;
    float _311 = (_303 * ((_271.y * cbMtdParam._m0[10u].y) - _247)) + _247;
    float _312 = (_303 * ((_271.z * cbMtdParam._m0[10u].z) - _248)) + _248;
    vec4 _324 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _326 = _324.x;
    float _328 = _326 - (_326 * TEXCOORD_5.x);
    vec4 _345 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_353, _355), vec2(_353, _355));
    float _3430 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))));
    float _362 = _345.z * cbMtdParam._m0[12u].y;
    vec4 _375 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _389 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_375.z * cbMtdParam._m0[12u].x) - _362)) + _362;
    float _395 = ((((_375.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _353;
    float _396 = ((((_375.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _355;
    float _399 = fma(_361, _210 * NORMAL.x, fma(_396, _217 * TANGENT.x, (_203 * _195) * _395));
    float _402 = fma(_361, _210 * NORMAL.y, fma(_396, _217 * TANGENT.y, (_203 * _196) * _395));
    float _405 = fma(_361, _210 * NORMAL.z, fma(_396, _217 * TANGENT.z, (_203 * _197) * _395));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3441 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _413 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3463 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3474 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3485 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _417 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _474 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _484 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _474);
    float _485 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _474);
    float _486 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _474);
    float _490 = inversesqrt(dot(vec3(_484, _485, _486), vec3(_484, _485, _486)));
    float _491 = _484 * _490;
    float _492 = _485 * _490;
    float _493 = _486 * _490;
    vec4 _498 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _500 = _498.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _674 = sqrt(((_484 * _484) + (_485 * _485)) + (_486 * _486));
        float _680 = (cbMatDynParam._m0[5u].x * _674) + cbMatDynParam._m0[5u].y;
        float _3496 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _685 = (cbMatDynParam._m0[5u].z * _674) + cbMatDynParam._m0[5u].w;
        float _3507 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) - _681)) + _681) < ((_500 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _512 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _513 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _532 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _535 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _538 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _551 = uint(roundEven(NORMAL.w)) * 13u;
    uint _552 = _551 + 9u;
    uint _553 = _552 + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3518 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _565 = 1.0 - _417;
    float _566 = _562 * _565;
    float _567 = _563 * _565;
    float _568 = _564 * _565;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _417;
    float _574 = (_563 + (-0.039999999105930328369140625)) * _417;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _417;
    float _576 = _573 + 0.039999999105930328369140625;
    float _578 = _574 + 0.039999999105930328369140625;
    float _579 = _575 + 0.039999999105930328369140625;
    vec4 _588 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _512, cbSceneParam._m0[86u].y * _513));
    float _591 = _588.x * TEXCOORD_5.w;
    float _592 = dot(vec3(_410, _411, _412), vec3(_491, _492, _493));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _410) - _491;
    float _600 = (_595 * _411) - _492;
    float _601 = (_595 * _412) - _493;
    float _605 = abs(dot(vec3(_491, _492, _493), vec3(_410, _411, _412)));
    float _3551 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_413);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _626 = (1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _627 = _620 * _607;
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _993;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _722 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _726 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _751 = _655 + _410;
        float _752 = _659 + _411;
        float _753 = _663 + _412;
        float _763 = fma(_753, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751)) - _718;
        float _764 = fma(_753, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751)) - _722;
        float _765 = fma(_753, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751)) - _726;
        float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
        float _782 = ((_769 * _763) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_769 * _764) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_769 * _765) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        float _821 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_787.x + (-0.5));
        float _823 = _821 * (_787.y + (-0.5));
        float _824 = _821 * (_787.z + (-0.5));
        float _831 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_794.x + (-0.5));
        float _833 = _831 * (_794.y + (-0.5));
        float _834 = _831 * (_794.z + (-0.5));
        float _841 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_801.x + (-0.5));
        float _843 = _841 * (_801.y + (-0.5));
        float _844 = _841 * (_801.z + (-0.5));
        float _851 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_808.x + (-0.5));
        float _853 = _851 * (_808.y + (-0.5));
        float _854 = _851 * (_808.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = _822 * 0.5;
        float _859 = _832 * 0.5;
        float _860 = _842 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _875 = (dot(vec3(_410, _411, _412), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _885 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3599 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_887 + 1.0))) + _892) * _855;
        float _902 = _823 * 0.5;
        float _903 = _833 * 0.5;
        float _904 = _843 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_410, _411, _412), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3632 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_929 + 1.0))) + _934) * _856;
        float _944 = _824 * 0.5;
        float _945 = _834 * 0.5;
        float _946 = _844 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_410, _411, _412), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3665 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_971 + 1.0))) + _976) * _857;
        _993 = _824;
        _995 = _823;
        _996 = _822;
        _997 = _834;
        _998 = _833;
        _999 = _832;
        _1000 = _844;
        _1001 = _843;
        _1002 = _842;
        _1003 = _857;
        _1004 = _856;
        _1005 = _855;
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
    }
    else
    {
        _993 = _994;
        _995 = _994;
        _996 = _994;
        _997 = _994;
        _998 = _994;
        _999 = _994;
        _1000 = _994;
        _1001 = _994;
        _1002 = _994;
        _1003 = _994;
        _1004 = _994;
        _1005 = _994;
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1041 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1045 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1068 = _655 + _410;
        float _1069 = _659 + _411;
        float _1070 = _663 + _412;
        float _1080 = fma(_1070, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1037 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1041 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[35u].z) + ((((((_1045 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1136 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1103.x + (-0.5));
        float _1138 = _1136 * (_1103.y + (-0.5));
        float _1139 = _1136 * (_1103.z + (-0.5));
        float _1146 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1110.x + (-0.5));
        float _1148 = _1146 * (_1110.y + (-0.5));
        float _1149 = _1146 * (_1110.z + (-0.5));
        float _1156 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1117.x + (-0.5));
        float _1158 = _1156 * (_1117.y + (-0.5));
        float _1159 = _1156 * (_1117.z + (-0.5));
        float _1166 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1124.x + (-0.5));
        float _1168 = _1166 * (_1124.y + (-0.5));
        float _1169 = _1166 * (_1124.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_410, _411, _412), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3728 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1200 + 1.0))) + _1205) * _1170;
        float _1215 = _1138 * 0.5;
        float _1216 = _1148 * 0.5;
        float _1217 = _1158 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_410, _411, _412), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3761 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1242 + 1.0))) + _1247) * _1171;
        float _1257 = _1139 * 0.5;
        float _1258 = _1149 * 0.5;
        float _1259 = _1159 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_410, _411, _412), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3794 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1284 + 1.0))) + _1289) * _1172;
        _1306 = _1139;
        _1307 = _1138;
        _1308 = _1137;
        _1309 = _1149;
        _1310 = _1148;
        _1311 = _1147;
        _1312 = _1159;
        _1313 = _1158;
        _1314 = _1157;
        _1315 = _1172;
        _1316 = _1171;
        _1317 = _1170;
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _994;
        _1307 = _994;
        _1308 = _994;
        _1309 = _994;
        _1310 = _994;
        _1311 = _994;
        _1312 = _994;
        _1313 = _994;
        _1314 = _994;
        _1315 = _994;
        _1316 = _994;
        _1317 = _994;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1353 = fma(_1332, cbSceneParam._m0[89u].z, fma(_1331, cbSceneParam._m0[89u].y, _1330 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1332, cbSceneParam._m0[90u].z, fma(_1331, cbSceneParam._m0[90u].y, _1330 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1332, cbSceneParam._m0[91u].z, fma(_1331, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1330));
    float _1374 = _599 * 0.5;
    float _1375 = _600 * 0.5;
    float _1376 = _601 * 0.5;
    float _1377 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1380 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1383 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1417;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1390 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_993, _997, _1000, _1003));
        float _1394 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_995, _998, _1001, _1004));
        float _1398 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_996, _999, _1002, _1005));
        float _1405 = dot(vec4(cbModelParam._m0[39u]), vec4(_1374, _1375, _1376, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1428;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1419 = dot(vec4(cbModelParam._m0[40u]), vec4(_1374, _1375, _1376, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1432 = (_1428 * cbModelParam._m0[1u].x) + (_1417 * (1.0 - cbModelParam._m0[1u].x));
    float _1442 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _413);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1442 : min(cbModelParam._m0[25u].z, _1442));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1506 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1509 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1537 = frontier_phi_17_15_ladder;
        }
        float _1764;
        if (_1506 > 0.0)
        {
            _1764 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1764 = frontier_phi_26_22_ladder;
        }
        float _2021;
        if (_1509 > 0.0)
        {
            _2021 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2021 = frontier_phi_38_33_ladder;
        }
        float _2023 = isnan(_1764) ? _1537 : (isnan(_1537) ? _1764 : min(_1537, _1764));
        float _2024 = isnan(_2021) ? _2023 : (isnan(_2023) ? _2021 : min(_2023, _2021));
        float _2028 = (_2024 * _1503) + _1492;
        float _2029 = (_2024 * _1506) + _1496;
        float _2030 = (_2024 * _1509) + _1500;
        float _2031 = _2024 * 9.9999997473787516355514526367188e-05;
        float _2033 = (-1.0) - _2031;
        float _2035 = _2031 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2030 > _2035) || ((_2030 < _2033) || ((_2029 > _2035) || ((_2029 < _2033) || ((_2028 < _2033) || (_2028 > _2035))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2030, cbModelParam._m0[9u].z, fma(_2029, cbModelParam._m0[9u].y, _2028 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2030, cbModelParam._m0[10u].z, fma(_2029, cbModelParam._m0[10u].y, _2028 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2030, cbModelParam._m0[11u].z, fma(_2029, cbModelParam._m0[11u].y, _2028 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_16_38_ladder = _2158.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2158.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2158.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_16_38_ladder_2;
        _1527 = frontier_phi_16_38_ladder_1;
        _1529 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1443);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _413);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1605 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1608 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1769;
        if (_1602 > 0.0)
        {
            _1769 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1769 = frontier_phi_28_24_ladder;
        }
        float _2048;
        if (_1605 > 0.0)
        {
            _2048 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2048 = frontier_phi_40_35_ladder;
        }
        float _2261;
        if (_1608 > 0.0)
        {
            _2261 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2261 = frontier_phi_49_46_ladder;
        }
        float _2263 = isnan(_2048) ? _1769 : (isnan(_1769) ? _2048 : min(_1769, _2048));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1602) + _1591;
        float _2269 = (_2264 * _1605) + _1595;
        float _2270 = (_2264 * _1608) + _1599;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2271;
        float _2274 = _2271 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2270 > _2274) || ((_2270 < _2272) || ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 < _2272) || (_2268 > _2274))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2270, cbModelParam._m0[17u].z, fma(_2269, cbModelParam._m0[17u].y, _2268 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2270, cbModelParam._m0[18u].z, fma(_2269, cbModelParam._m0[18u].y, _2268 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2270, cbModelParam._m0[19u].z, fma(_2269, cbModelParam._m0[19u].y, _2268 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_25_49_ladder = _2469.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2469.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2469.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_25_49_ladder_2;
        _1629 = frontier_phi_25_49_ladder_1;
        _1631 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1534);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1644 = (((_626 * _576) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1646 = (((_626 * _578) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1648 = (((_626 * _579) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1651 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    vec4 _1665 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_512, _513));
    float _1667 = _1665.w;
    float _1679 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1667);
    float _1680 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1667);
    float _1681 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1667);
    uvec4 _1685 = floatBitsToUint(cbInstanceData._m0[_551 + 5u]);
    uint _1687 = _1685.x * 14u;
    uint _1688 = _1687 + 13u;
    float _1695 = _591 + (-1.0);
    float _1700 = (cbLight._m0[_1688].x * _1695) + 1.0;
    float _1701 = (cbLight._m0[_1688].y * _1695) + 1.0;
    float _1702 = (cbLight._m0[_1688].z * _1695) + 1.0;
    float _1703 = (cbLight._m0[_1688].w * _1695) + 1.0;
    uint _1704 = _1687 + 5u;
    float _1710 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1714 = _1687 + 4u;
    float _1723 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1727 = _1687 | 1u;
    float _1738 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_410, _411, _412));
    float _1741 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_410, _411, _412));
    float _3930 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _3941 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1746 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1748 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1755 = ((cbLight._m0[_1704].x * _1710) * _1748) + (((cbLight._m0[_1714].x * _1679) * _1723) * _1746);
    float _1756 = ((_1710 * cbLight._m0[_1704].y) * _1748) + (((cbLight._m0[_1714].y * _1680) * _1723) * _1746);
    float _1757 = ((_1710 * cbLight._m0[_1704].z) * _1748) + (((cbLight._m0[_1714].z * _1681) * _1723) * _1746);
    uvec4 _1761 = floatBitsToUint(cbLight._m0[_1687 + 12u]);
    bool _1763 = _1761.x == 0u;
    float _1774;
    float _1776;
    float _1778;
    if (_1763)
    {
        _1774 = _1755;
        _1776 = _1756;
        _1778 = _1757;
    }
    else
    {
        uint _1782 = _1687 + 6u;
        float _1798 = (dot(vec3(cbLight._m0[_1687 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1799 = _1798 * _1798;
        float _3952 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1801 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1774 = (((cbLight._m0[_1782].x * 0.3183098733425140380859375) * _1800) * _1801) + _1755;
        _1776 = (((cbLight._m0[_1782].y * 0.3183098733425140380859375) * _1800) * _1801) + _1756;
        _1778 = (((cbLight._m0[_1782].z * 0.3183098733425140380859375) * _1800) * _1801) + _1757;
    }
    bool _1781 = _1761.y == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1781)
    {
        _1819 = _1774;
        _1821 = _1776;
        _1823 = _1778;
    }
    else
    {
        uint _1992 = _1687 + 7u;
        float _2008 = (dot(vec3(cbLight._m0[_1687 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2009 = _2008 * _2008;
        float _3968 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2011 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1819 = (((cbLight._m0[_1992].x * 0.3183098733425140380859375) * _2010) * _2011) + _1774;
        _1821 = (((cbLight._m0[_1992].y * 0.3183098733425140380859375) * _2010) * _2011) + _1776;
        _1823 = (((cbLight._m0[_1992].z * 0.3183098733425140380859375) * _2010) * _2011) + _1778;
    }
    uint _1826 = _1687 + 8u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _413) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1687].x + _491;
    float _1842 = cbLight._m0[_1687].y + _492;
    float _1843 = cbLight._m0[_1687].z + _493;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1687].xyz));
    float _3984 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _1855 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1856 = dot(vec3(_410, _411, _412), vec3(_1848, _1849, _1850));
    float _4006 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1848, _1849, _1850));
    float _4017 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1840 * _1840;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1876 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
    float _1877 = 0.959999978542327880859375 - _573;
    float _1879 = 0.959999978542327880859375 - _574;
    float _1880 = 0.959999978542327880859375 - _575;
    float _1887 = 1.0 - _1840;
    float _1898 = (0.5 / (((_1855 * ((_1854 * _1887) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1887) + _1840) * _1854))) * _1854;
    float _4028 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1900 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    uint _1914 = _1687 + 9u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _413) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1727].x + _491;
    float _1928 = cbLight._m0[_1727].y + _492;
    float _1929 = cbLight._m0[_1727].z + _493;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1727].xyz));
    float _4039 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1941 = dot(vec3(_410, _411, _412), vec3(_1934, _1935, _1936));
    float _4050 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1934, _1935, _1936));
    float _4061 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1926 * _1926;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1960 = exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0);
    float _1967 = 1.0 - _1926;
    float _1977 = (0.5 / (((_1855 * ((_1940 * _1967) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1967) + _1926) * _1940))) * _1940;
    float _4072 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    float _1989 = (((((_1960 * _1877) + _576) * cbLight._m0[_1914].x) * _1979) * _1710) + ((((cbLight._m0[_1826].x * _1679) * ((_1876 * _1877) + _576)) * _1900) * _1723);
    float _1990 = (((((_1960 * _1879) + _578) * cbLight._m0[_1914].y) * _1979) * _1710) + ((((cbLight._m0[_1826].y * _1680) * ((_1876 * _1879) + _578)) * _1900) * _1723);
    float _1991 = (((((_1960 * _1880) + _579) * cbLight._m0[_1914].z) * _1979) * _1710) + ((((cbLight._m0[_1826].z * _1681) * ((_1876 * _1880) + _579)) * _1900) * _1723);
    float _2053;
    float _2055;
    float _2057;
    if (_1763)
    {
        _2053 = _1989;
        _2055 = _1990;
        _2057 = _1991;
    }
    else
    {
        uint _2059 = _1687 + 2u;
        uint _2063 = _1687 + 10u;
        float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _413) * 0.949999988079071044921875);
        float _2078 = _2077 * _2077;
        float _2079 = cbLight._m0[_2059].x + _491;
        float _2080 = cbLight._m0[_2059].y + _492;
        float _2081 = cbLight._m0[_2059].z + _493;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2086 = _2085 * _2079;
        float _2087 = _2085 * _2080;
        float _2088 = _2085 * _2081;
        float _2089 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2059].xyz));
        float _4083 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2093 = dot(vec3(_410, _411, _412), vec3(_2086, _2087, _2088));
        float _4094 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2097 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2086, _2087, _2088));
        float _4105 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2101 = _2078 * _2078;
        float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
        float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
        float _2119 = 1.0 - _2078;
        float _2129 = (0.5 / (((_1855 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2119) + _2078) * _2092))) * _2092;
        float _4116 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2131 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
        float _2132 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2053 = (((((_2112 * _1877) + _576) * cbLight._m0[_2063].x) * _2131) * _2132) + _1989;
        _2055 = (((((_2112 * _1879) + _578) * cbLight._m0[_2063].y) * _2131) * _2132) + _1990;
        _2057 = (((((_2112 * _1880) + _579) * cbLight._m0[_2063].z) * _2131) * _2132) + _1991;
    }
    float _2167;
    float _2169;
    float _2171;
    if (_1781)
    {
        _2167 = _2053;
        _2169 = _2055;
        _2171 = _2057;
    }
    else
    {
        uint _2178 = _1687 + 3u;
        uint _2182 = _1687 + 11u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _413) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _491;
        float _2199 = cbLight._m0[_2178].y + _492;
        float _2200 = cbLight._m0[_2178].z + _493;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2178].xyz));
        float _4132 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2212 = dot(vec3(_410, _411, _412), vec3(_2205, _2206, _2207));
        float _4143 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4154 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2231 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
        float _2238 = 1.0 - _2197;
        float _2248 = (0.5 / (((_1855 * ((_2211 * _2238) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2238) + _2197) * _2211))) * _2211;
        float _4165 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2167 = (((((_2231 * _1877) + _576) * cbLight._m0[_2182].x) * _2250) * _2251) + _2053;
        _2169 = (((((_2231 * _1879) + _578) * cbLight._m0[_2182].y) * _2250) * _2251) + _2055;
        _2171 = (((((_2231 * _1880) + _579) * cbLight._m0[_2182].z) * _2250) * _2251) + _2057;
    }
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_1685.y == 0u)
    {
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2326;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2326;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2326;
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.x;
        uint _2353 = uint((float(_2341.y) * floor(float(uint(cbSceneParam._m0[85u].y * _513) / _2342))) + floor(float(uint(cbSceneParam._m0[85u].x * _512) / _2342)));
        float _2363 = (log2(_2329 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2364 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        uint _2367 = uint(isnan(14.0) ? _2364 : (isnan(_2364) ? 14.0 : min(_2364, 14.0)));
        uvec4 _2372 = texelFetch(g_lightClusterGridBuffer, int(((_2367 << 2u) + (_2353 << 6u)) >> 2u));
        uint _2373 = _2372.x;
        uint _2374 = _2341.z;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((((1u << ((_2374 >> 4u) & 15u)) + 4294967295u) & _2373) == 0u) || ((_2374 & 240u) == 0u))
        {
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
        }
        else
        {
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            uint _2633 = 0u;
            uint _2642;
            bool _2643;
            for (;;)
            {
                _2642 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2633 << 2u)) >> 2u)).x;
                _2643 = _2642 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2643)
                {
                    frontier_phi_66_pred = _2627;
                    frontier_phi_66_pred_1 = _2632;
                    frontier_phi_66_pred_2 = _2631;
                    frontier_phi_66_pred_3 = _2630;
                    frontier_phi_66_pred_4 = _2629;
                    frontier_phi_66_pred_5 = _2628;
                }
                else
                {
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    uint _2778;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2630;
                    _2776 = _2631;
                    _2777 = _2632;
                    _2778 = _2642;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    for (;;)
                    {
                        uint _2782 = uint(findLSB(_2778)) + (_2633 << 5u);
                        uint _2779 = (_2778 + 4294967295u) & _2778;
                        uint _2784 = _2782 * 48u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2804 = (_2782 * 48u) + 4u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2823 = (_2782 * 48u) + 8u;
                        vec3 _2834 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x));
                        float _2838 = _2798.x - _2327;
                        float _2839 = _2798.y - _2328;
                        float _2840 = _2798.z - _2329;
                        float _2841 = dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840));
                        float _2844 = inversesqrt(_2841);
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2848 = dot(vec3(_532, _535, _538), vec3(_2845, _2846, _2847));
                        float _2853 = 1.0 - (_2841 * _2798.w);
                        float _4191 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2855 = sqrt(_2841) * _2817.w;
                        float _2858 = 1.39999997615814208984375 / (_2855 + 1.39999997615814208984375);
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2848) + _2859;
                        float _2865 = _2855 * _2855;
                        float _2869 = ((isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))) * _2854) / ((_2865 * 0.699999988079071044921875) + 1.0);
                        float _2873 = (-0.0) - _2327;
                        float _2874 = (-0.0) - _2328;
                        float _2875 = (-0.0) - _2329;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2890 = exp2(log2(1.0 / ((_2865 * 3.5) + 5.0)) * 0.25);
                        float _2891 = 1.0 - _607;
                        float _2898 = sqrt(1.0 - ((1.0 - (_2891 * _2891)) * (1.0 - (_2890 * _2890))));
                        float _2899 = _2898 * _2898;
                        float _2900 = _2899 * _2899;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2903 = _2882 + _2847;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2911 = dot(vec3(_532, _535, _538), vec3(_2880, _2881, _2882));
                        float _4207 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2915 = dot(vec3(_532, _535, _538), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                        float _4218 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2922 = ((_2918 * _2918) * (_2900 + (-1.0))) + 1.0;
                        float _2923 = _2858 * _2899;
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2848) + _2924;
                        float _4229 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2929 = 1.0 - _2899;
                        float _2939 = (0.5 / (((_2928 * ((_2914 * _2929) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2929) + _2899) * _2914))) * _2928;
                        float _4240 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2950 = (((_2900 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_2922 * _2922) * ((_2865 * 2.1991131305694580078125) + 3.141590118408203125))) * _2854;
                        _2702 = (_2869 * _2817.x) + _2775;
                        _2703 = (_2869 * _2817.y) + _2776;
                        _2704 = (_2869 * _2817.z) + _2777;
                        _2699 = (_2950 * _2834.x) + _2772;
                        _2700 = (_2950 * _2834.y) + _2773;
                        _2701 = (_2950 * _2834.z) + _2774;
                        if (_2779 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2779;
                        }
                    }
                    frontier_phi_66_pred = _2699;
                    frontier_phi_66_pred_1 = _2704;
                    frontier_phi_66_pred_2 = _2703;
                    frontier_phi_66_pred_3 = _2702;
                    frontier_phi_66_pred_4 = _2701;
                    frontier_phi_66_pred_5 = _2700;
                }
                _2475 = frontier_phi_66_pred;
                _2485 = frontier_phi_66_pred_1;
                _2483 = frontier_phi_66_pred_2;
                _2481 = frontier_phi_66_pred_3;
                _2479 = frontier_phi_66_pred_4;
                _2477 = frontier_phi_66_pred_5;
                uint _2634 = _2633 + 1u;
                if (_2634 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2627 = _2475;
                    _2628 = _2477;
                    _2629 = _2479;
                    _2630 = _2481;
                    _2631 = _2483;
                    _2632 = _2485;
                    _2633 = _2634;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
        }
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.z;
        uint _2491 = (_2489 >> 8u) & 15u;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        if (((4294967295u << _2491) & _2373) == 0u)
        {
            _2595 = _2474;
            _2597 = _2476;
            _2599 = _2478;
            _2601 = _2480;
            _2603 = _2482;
            _2605 = _2484;
        }
        else
        {
            float _2620 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
            float _2621 = _2620 * _2327;
            float _2622 = _2620 * _2328;
            float _2623 = _2620 * _2329;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2491 < ((_2489 >> 12u) & 15u))
            {
                float _2596;
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2755 = _2474;
                float _2756 = _2476;
                float _2757 = _2478;
                float _2758 = _2480;
                float _2759 = _2482;
                float _2760 = _2484;
                uint _2761 = _2491;
                uint _2770;
                bool _2771;
                for (;;)
                {
                    _2770 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                    _2771 = _2770 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2771)
                    {
                        frontier_phi_77_pred = _2760;
                        frontier_phi_77_pred_1 = _2759;
                        frontier_phi_77_pred_2 = _2758;
                        frontier_phi_77_pred_3 = _2757;
                        frontier_phi_77_pred_4 = _2756;
                        frontier_phi_77_pred_5 = _2755;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        float _2980 = _2758;
                        float _2981 = _2759;
                        float _2982 = _2760;
                        uint _2983 = _2770;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3069;
                        float _3116;
                        bool _3117;
                        for (;;)
                        {
                            uint _2994 = ((_2761 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2994 * 40u) + 20u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_2994 * 40u) + 24u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3091 = (_2994 * 40u) + 28u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3116 = fma(_2329, _3104.z, fma(_2328, _3104.y, _3104.x * _2327)) + _3104.w;
                            _3117 = !((fma(_2329, _3085.z, fma(_2328, _3085.y, _3085.x * _2327)) + _3085.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3117)
                            {
                                float _3144 = _3009.x - _2327;
                                float _3145 = _3009.y - _2328;
                                float _3146 = _3009.z - _2329;
                                float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                                float _3150 = inversesqrt(_3147);
                                float _3151 = _3150 * _3144;
                                float _3152 = _3150 * _3145;
                                float _3153 = _3150 * _3146;
                                float _3157 = 1.0 - (_3147 / (_3010 * _3010));
                                float _4251 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3162 = sqrt(_3147) * _3025.w;
                                float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                                float _3165 = _3164 * _3164;
                                float _3168 = ((1.0 - _3165) * dot(vec3(_3151, _3152, _3153), vec3(_532, _535, _538))) + _3165;
                                float _3171 = _3162 * _3162;
                                float _3175 = (fma(_2329, _3053.z, fma(_2328, _3053.y, _3053.x * _2327)) + _3053.w) / _3116;
                                float _3176 = (fma(_2329, _3069.z, fma(_2328, _3069.y, _3069.x * _2327)) + _3069.w) / _3116;
                                float _3180 = 1.0 - dot(vec2(_3175, _3176), vec2(_3175, _3176));
                                float _4267 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3182 = _3181 * (((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3158) / ((_3171 * 0.699999988079071044921875) + 1.0));
                                float _3194 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _607;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3151 - _2621;
                                float _3206 = _3152 - _2622;
                                float _3207 = _3153 - _2623;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2621, (-0.0) - _2622, (-0.0) - _2623));
                                float _4278 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3219 = dot(vec3(_532, _535, _538), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4289 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3164 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_532, _535, _538), vec3(_3151, _3152, _3153))) + _3228;
                                float _4300 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4311 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3181 * _3158) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3226 * _3226) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3182 * _3025.y;
                                frontier_phi_83_pred_1 = _3182 * _3025.x;
                                frontier_phi_83_pred_2 = _3256 * _3037.z;
                                frontier_phi_83_pred_3 = _3256 * _3037.y;
                                frontier_phi_83_pred_4 = _3256 * _3037.x;
                                frontier_phi_83_pred_5 = _3182 * _3025.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_83_pred;
                            _3263 = frontier_phi_83_pred_1;
                            _3262 = frontier_phi_83_pred_2;
                            _3261 = frontier_phi_83_pred_3;
                            _3260 = frontier_phi_83_pred_4;
                            _3265 = frontier_phi_83_pred_5;
                            _2967 = _3263 + _2980;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2969;
                        frontier_phi_77_pred_1 = _2968;
                        frontier_phi_77_pred_2 = _2967;
                        frontier_phi_77_pred_3 = _2966;
                        frontier_phi_77_pred_4 = _2965;
                        frontier_phi_77_pred_5 = _2964;
                    }
                    _2606 = frontier_phi_77_pred;
                    _2604 = frontier_phi_77_pred_1;
                    _2602 = frontier_phi_77_pred_2;
                    _2600 = frontier_phi_77_pred_3;
                    _2598 = frontier_phi_77_pred_4;
                    _2596 = frontier_phi_77_pred_5;
                    uint _2762 = _2761 + 1u;
                    if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2755 = _2596;
                        _2756 = _2598;
                        _2757 = _2600;
                        _2758 = _2602;
                        _2759 = _2604;
                        _2760 = _2606;
                        _2761 = _2762;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2600;
                frontier_phi_58_59_ladder_1 = _2606;
                frontier_phi_58_59_ladder_2 = _2604;
                frontier_phi_58_59_ladder_3 = _2602;
                frontier_phi_58_59_ladder_4 = _2598;
                frontier_phi_58_59_ladder_5 = _2596;
            }
            else
            {
                frontier_phi_58_59_ladder = _2478;
                frontier_phi_58_59_ladder_1 = _2484;
                frontier_phi_58_59_ladder_2 = _2482;
                frontier_phi_58_59_ladder_3 = _2480;
                frontier_phi_58_59_ladder_4 = _2476;
                frontier_phi_58_59_ladder_5 = _2474;
            }
            _2595 = frontier_phi_58_59_ladder_5;
            _2597 = frontier_phi_58_59_ladder_4;
            _2599 = frontier_phi_58_59_ladder;
            _2601 = frontier_phi_58_59_ladder_3;
            _2603 = frontier_phi_58_59_ladder_2;
            _2605 = frontier_phi_58_59_ladder_1;
        }
        float _2610 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2386 = (_2610 * _2601) + _1819;
        _2388 = (_2610 * _2603) + _1821;
        _2390 = (_2610 * _2605) + _1823;
        _2392 = ((_2595 * _576) * _2610) + _2167;
        _2394 = ((_2597 * _578) * _2610) + _2169;
        _2396 = ((_2599 * _579) * _2610) + _2171;
    }
    else
    {
        _2386 = _1819;
        _2388 = _1821;
        _2390 = _1823;
        _2392 = _2167;
        _2394 = _2169;
        _2396 = _2171;
    }
    float _4327 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4338 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4349 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _2413 = ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2386 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _591))) + ((_2392 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    float _2414 = ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2388 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _591))) + ((_2394 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    float _2415 = ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2390 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _591))) + ((_2396 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    uint _2416 = _551 + 6u;
    float _2424 = _512 / cbSceneParam._m0[86u].x;
    float _2425 = _513 / cbSceneParam._m0[86u].y;
    vec4 _2439 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2424, _2425, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2441 = _2439.x;
    float _2442 = _2439.y;
    float _2443 = _2439.z;
    float _2444 = _2439.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2499 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2500 = _2499 / _433;
        float _2511 = _2500 * _484;
        float _2512 = _485 * _2500;
        float _2513 = (-0.0) - _2512;
        float _2515 = _2500 * _486;
        float _2517 = (cbSceneParam._m0[77u].w * _2513) / _2499;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2512;
        float _2525 = sqrt(((_2511 * _2511) + (_2512 * _2512)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2499)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2712;
        if (abs((_2513 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2712 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2656 = 1.0 / cbSceneParam._m0[80u].x;
            float _2657 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2658 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2667 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : min(_2657, 0.0));
            float _2668 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : min(_2658, 0.0));
            _2712 = ((abs(_2525 / _2513) * cbSceneParam._m0[80u].y) * ((((_2667 - _2668) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))))) * _2656)) - ((exp2(_2535 * _2667) - exp2(_2535 * _2668)) * _2656))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2714 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2424, _2425, 1.0), 0.0);
        float _2723 = exp2((_2712 * (-1.44269502162933349609375)) * (1.0 - _2714.w));
        float _2724 = log2(_2723);
        float _2740 = log2(_2444);
        _2537 = (exp2(_2740 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].x)) * _2714.x) / cbSceneParam._m0[78u].x)) + _2441;
        _2539 = (exp2(_2740 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].y)) * _2714.y) / cbSceneParam._m0[78u].y)) + _2442;
        _2541 = (exp2(_2740 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].z)) * _2714.z) / cbSceneParam._m0[78u].z)) + _2443;
        _2543 = _2723 * _2444;
    }
    else
    {
        _2537 = _2441;
        _2539 = _2442;
        _2541 = _2443;
        _2543 = _2444;
    }
    bool _2750;
    vec4 _2553;
    vec4 _2575;
    float _2577;
    float _2581;
    float _2582;
    float _2583;
    float _2584;
    bool _2594;
    for (;;)
    {
        _2553 = cbMatDynParam._m0[0u];
        float _2555 = roundEven(_2553.y);
        bool _2556 = _2555 == 3.0;
        float _2557 = log2(_2543);
        float _2564 = exp2(_2557 * cbSceneParam._m0[78u].x) * _2413;
        float _2565 = exp2(_2557 * cbSceneParam._m0[78u].y) * _2414;
        float _2566 = exp2(_2557 * cbSceneParam._m0[78u].z) * _2415;
        float _2573 = _500 + (-0.5);
        _2575 = cbMtdParam._m0[1u];
        _2577 = _2575.y * _2573;
        float _2580 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2581 = _2580 * (_2556 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2537)));
        _2582 = _2580 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2539)));
        _2583 = _2580 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2541)));
        _2584 = _2573 * 0.999000012874603271484375;
        _2594 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2594)
        {
            if ((cbInstanceData._m0[_551 + 7u].x + _2584) < 0.5)
            {
                _2750 = true;
                break;
            }
        }
        uint _2691 = _552 + uint(_2553.w);
        if ((cbInstanceData._m0[_2691].w < 1.0) && ((cbInstanceData._m0[_2691].w + _2584) < 0.5))
        {
            _2750 = true;
            break;
        }
        if ((_2577 + 1.0) < _2575.x)
        {
            _2750 = true;
            break;
        }
        _2750 = false;
        break;
    }
    float _2955;
    if (_2750)
    {
        discard_state = true;
        _2955 = 0.0;
    }
    else
    {
        _2955 = cbInstanceData._m0[_2416].w;
    }
    SV_Target.x = _2581;
    SV_Target.y = _2582;
    SV_Target.z = _2583;
    SV_Target.w = _2955;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2416].w;
    discard_exit();
}


