#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _848;
float _3216;
float _3217;
float _3218;
float _3219;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _178 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _179 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _255 = (_247.x * 2.0) + (-1.0);
    float _257 = (_247.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3228 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))));
    float _265 = _247.z * cbMtdParam._m0[12u].y;
    float _268 = fma(_264, _192 * NORMAL.x, fma(_257, _199 * TANGENT.x, (_185 * _177) * _255));
    float _271 = fma(_264, _192 * NORMAL.y, fma(_257, _199 * TANGENT.y, (_185 * _178) * _255));
    float _274 = fma(_264, _192 * NORMAL.z, fma(_257, _199 * TANGENT.z, (_185 * _179) * _255));
    float _278 = inversesqrt(dot(vec3(_268, _271, _274), vec3(_268, _271, _274)));
    float _279 = _278 * _268;
    float _280 = _278 * _271;
    float _281 = _278 * _274;
    float _3239 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _282 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3261 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3272 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _301 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _344 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _354 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _344);
    float _355 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _344);
    float _356 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _344);
    float _360 = inversesqrt(dot(vec3(_354, _355, _356), vec3(_354, _355, _356)));
    float _361 = _354 * _360;
    float _362 = _355 * _360;
    float _363 = _356 * _360;
    vec4 _368 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _370 = _368.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _527 = sqrt(((_354 * _354) + (_355 * _355)) + (_356 * _356));
        float _533 = (cbMatDynParam._m0[5u].x * _527) + cbMatDynParam._m0[5u].y;
        float _3283 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
        float _534 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _538 = (cbMatDynParam._m0[5u].z * _527) + cbMatDynParam._m0[5u].w;
        float _3294 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) - _534)) + _534) < ((_370 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _382 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _383 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_281, cbSceneParam._m0[5u].z, fma(_280, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _279));
    float _406 = fma(_281, cbSceneParam._m0[6u].z, fma(_280, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _279));
    float _409 = fma(_281, cbSceneParam._m0[7u].z, fma(_280, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _279));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = _422 + 9u;
    uint _424 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3305 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _382, cbSceneParam._m0[86u].y * _383));
    float _447 = _444.x * TEXCOORD_5.w;
    float _448 = dot(vec3(_279, _280, _281), vec3(_361, _362, _363));
    float _451 = _448 * 2.0;
    float _455 = (_451 * _279) - _361;
    float _456 = (_451 * _280) - _362;
    float _457 = (_451 * _281) - _363;
    float _461 = abs(dot(vec3(_361, _362, _363), vec3(_279, _280, _281)));
    float _3338 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = sqrt(_282);
    float _476 = exp2((_463 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_463 * 3.0));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_516, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508));
        float _576 = fma(_516, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508));
        float _580 = fma(_516, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508));
        float _605 = _508 + _279;
        float _606 = _512 + _280;
        float _607 = _516 + _281;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_279, _280, _281), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3386 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_279, _280, _281), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3419 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_279, _280, _281), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3452 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_516, cbModelParam._m0[30u].z, fma(_512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _508));
        float _895 = fma(_516, cbModelParam._m0[31u].z, fma(_512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _508));
        float _899 = fma(_516, cbModelParam._m0[32u].z, fma(_512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _508));
        float _922 = _508 + _279;
        float _923 = _512 + _280;
        float _924 = _516 + _281;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_957.x + (-0.5));
        float _992 = _990 * (_957.y + (-0.5));
        float _993 = _990 * (_957.z + (-0.5));
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_964.x + (-0.5));
        float _1002 = _1000 * (_964.y + (-0.5));
        float _1003 = _1000 * (_964.z + (-0.5));
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_971.x + (-0.5));
        float _1012 = _1010 * (_971.y + (-0.5));
        float _1013 = _1010 * (_971.z + (-0.5));
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_279, _280, _281), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3515 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1054 + 1.0))) + _1059) * _1024;
        float _1069 = _992 * 0.5;
        float _1070 = _1002 * 0.5;
        float _1071 = _1012 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_279, _280, _281), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3548 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1096 + 1.0))) + _1101) * _1025;
        float _1111 = _993 * 0.5;
        float _1112 = _1003 * 0.5;
        float _1113 = _1013 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_279, _280, _281), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3581 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1138 + 1.0))) + _1143) * _1026;
        _1160 = _993;
        _1161 = _992;
        _1162 = _991;
        _1163 = _1003;
        _1164 = _1002;
        _1165 = _1001;
        _1166 = _1013;
        _1167 = _1012;
        _1168 = _1011;
        _1169 = _1026;
        _1170 = _1025;
        _1171 = _1024;
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = _848;
        _1170 = _848;
        _1171 = _848;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _861)) + _861;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1207 = fma(_1186, cbSceneParam._m0[89u].z, fma(_1185, cbSceneParam._m0[89u].y, _1184 * cbSceneParam._m0[89u].x));
    float _1210 = fma(_1186, cbSceneParam._m0[90u].z, fma(_1185, cbSceneParam._m0[90u].y, _1184 * cbSceneParam._m0[90u].x));
    float _1213 = fma(_1186, cbSceneParam._m0[91u].z, fma(_1185, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1184));
    float _1228 = _455 * 0.5;
    float _1229 = _456 * 0.5;
    float _1230 = _457 * 0.5;
    float _1231 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1234 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1237 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1271;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1244 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_847, _851, _854, _857));
        float _1248 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_849, _852, _855, _858));
        float _1252 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_850, _853, _856, _859));
        float _1259 = dot(vec4(cbModelParam._m0[39u]), vec4(_1228, _1229, _1230, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1282;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1273 = dot(vec4(cbModelParam._m0[40u]), vec4(_1228, _1229, _1230, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1286 = (_1282 * cbModelParam._m0[1u].x) + (_1271 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _282);
    float _1297 = isnan(_1296) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1296 : min(cbModelParam._m0[25u].z, _1296));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1346 = fma(_516, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508)) + cbModelParam._m0[13u].w;
        float _1350 = fma(_516, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508)) + cbModelParam._m0[14u].w;
        float _1354 = fma(_516, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508)) + cbModelParam._m0[15u].w;
        float _1357 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _1360 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _1363 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _1391;
        if (_1357 > 0.0)
        {
            _1391 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1391 = frontier_phi_17_15_ladder;
        }
        float _1595;
        if (_1360 > 0.0)
        {
            _1595 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1595 = frontier_phi_26_22_ladder;
        }
        float _1838;
        if (_1363 > 0.0)
        {
            _1838 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1838 = frontier_phi_38_33_ladder;
        }
        float _1840 = isnan(_1595) ? _1391 : (isnan(_1391) ? _1595 : min(_1391, _1595));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1357) + _1346;
        float _1846 = (_1841 * _1360) + _1350;
        float _1847 = (_1841 * _1363) + _1354;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1297);
            frontier_phi_16_38_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1379 = frontier_phi_16_38_ladder_2;
        _1381 = frontier_phi_16_38_ladder_1;
        _1383 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _1297);
        _1379 = _1367.x * cbModelParam._m0[1u].y;
        _1381 = _1367.y * cbModelParam._m0[1u].y;
        _1383 = _1367.z * cbModelParam._m0[1u].y;
    }
    float _1387 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _282);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1387 : min(cbModelParam._m0[25u].w, _1387));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1445 = fma(_516, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508)) + cbModelParam._m0[21u].w;
        float _1449 = fma(_516, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508)) + cbModelParam._m0[22u].w;
        float _1453 = fma(_516, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508)) + cbModelParam._m0[23u].w;
        float _1456 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1459 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1462 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1600;
        if (_1456 > 0.0)
        {
            _1600 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1600 = frontier_phi_28_24_ladder;
        }
        float _1865;
        if (_1459 > 0.0)
        {
            _1865 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1865 = frontier_phi_40_35_ladder;
        }
        float _2070;
        if (_1462 > 0.0)
        {
            _2070 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2070 = frontier_phi_49_46_ladder;
        }
        float _2072 = isnan(_1865) ? _1600 : (isnan(_1600) ? _1865 : min(_1600, _1865));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1456) + _1445;
        float _2078 = (_2073 * _1459) + _1449;
        float _2079 = (_2073 * _1462) + _1453;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2080;
        float _2083 = _2080 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2079 > _2083) || ((_2079 < _2081) || ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 < _2081) || (_2077 > _2083))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2079, cbModelParam._m0[17u].z, fma(_2078, cbModelParam._m0[17u].y, _2077 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2079, cbModelParam._m0[18u].z, fma(_2078, cbModelParam._m0[18u].y, _2077 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2079, cbModelParam._m0[19u].z, fma(_2078, cbModelParam._m0[19u].y, _2077 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_25_49_ladder = _2278.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2278.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2278.x * cbModelParam._m0[1u].z;
        }
        _1481 = frontier_phi_25_49_ladder_2;
        _1483 = frontier_phi_25_49_ladder_1;
        _1485 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _1388);
        _1481 = _1465.x * cbModelParam._m0[1u].z;
        _1483 = _1465.y * cbModelParam._m0[1u].z;
        _1485 = _1465.z * cbModelParam._m0[1u].z;
    }
    float _1497 = ((((1.0 - _476) * ((_463 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_476 * _463)) * _447;
    float _1498 = _1497 * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1499 = _1497 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1500 = _1497 * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    uvec4 _1519 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1521 = _1519.x * 14u;
    uint _1522 = _1521 + 13u;
    float _1529 = _447 + (-1.0);
    float _1534 = (cbLight._m0[_1522].x * _1529) + 1.0;
    float _1535 = (cbLight._m0[_1522].y * _1529) + 1.0;
    float _1536 = (cbLight._m0[_1522].z * _1529) + 1.0;
    float _1537 = (cbLight._m0[_1522].w * _1529) + 1.0;
    uint _1538 = _1521 + 5u;
    float _1544 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1548 = _1521 + 4u;
    float _1554 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
    uint _1558 = _1521 | 1u;
    float _1569 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_279, _280, _281));
    float _1572 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_279, _280, _281));
    float _3717 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _3728 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1577 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.3183098733425140380859375;
    float _1579 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1586 = ((cbLight._m0[_1538].x * _1544) * _1579) + ((cbLight._m0[_1548].x * _1554) * _1577);
    float _1587 = ((_1544 * cbLight._m0[_1538].y) * _1579) + ((_1554 * cbLight._m0[_1548].y) * _1577);
    float _1588 = ((_1544 * cbLight._m0[_1538].z) * _1579) + ((_1554 * cbLight._m0[_1548].z) * _1577);
    uvec4 _1592 = floatBitsToUint(cbLight._m0[_1521 + 12u]);
    bool _1594 = _1592.x == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1594)
    {
        _1605 = _1586;
        _1607 = _1587;
        _1609 = _1588;
    }
    else
    {
        uint _1613 = _1521 + 6u;
        float _1629 = (dot(vec3(cbLight._m0[_1521 + 2u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1630 = _1629 * _1629;
        float _3739 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1632 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1605 = (((cbLight._m0[_1613].x * 0.3183098733425140380859375) * _1631) * _1632) + _1586;
        _1607 = (((cbLight._m0[_1613].y * 0.3183098733425140380859375) * _1631) * _1632) + _1587;
        _1609 = (((cbLight._m0[_1613].z * 0.3183098733425140380859375) * _1631) * _1632) + _1588;
    }
    bool _1612 = _1592.y == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1612)
    {
        _1650 = _1605;
        _1652 = _1607;
        _1654 = _1609;
    }
    else
    {
        uint _1809 = _1521 + 7u;
        float _1825 = (dot(vec3(cbLight._m0[_1521 + 3u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3755 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1828 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1650 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1605;
        _1652 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1607;
        _1654 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1609;
    }
    uint _1657 = _1521 + 8u;
    float _1670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1521].w)) * _282) * 0.949999988079071044921875);
    float _1671 = _1670 * _1670;
    float _1672 = cbLight._m0[_1521].x + _361;
    float _1673 = cbLight._m0[_1521].y + _362;
    float _1674 = cbLight._m0[_1521].z + _363;
    float _1678 = inversesqrt(dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674)));
    float _1679 = _1678 * _1672;
    float _1680 = _1678 * _1673;
    float _1681 = _1678 * _1674;
    float _1682 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1521].xyz));
    float _3771 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1685 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _1686 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1687 = dot(vec3(_279, _280, _281), vec3(_1679, _1680, _1681));
    float _3793 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_1679, _1680, _1681));
    float _3804 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1695 = _1671 * _1671;
    float _1699 = ((_1690 * _1690) * (_1695 + (-1.0))) + 1.0;
    float _1710 = (exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1711 = 1.0 - _1671;
    float _1722 = (0.5 / (((_1686 * ((_1685 * _1711) + _1671)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1711) + _1671) * _1685))) * _1685;
    float _3815 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1724 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1695 / ((_1699 * _1699) * 3.141590118408203125));
    uint _1735 = _1521 + 9u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _282) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1558].x + _361;
    float _1749 = cbLight._m0[_1558].y + _362;
    float _1750 = cbLight._m0[_1558].z + _363;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1558].xyz));
    float _3826 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1762 = dot(vec3(_279, _280, _281), vec3(_1755, _1756, _1757));
    float _3837 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1755, _1756, _1757));
    float _3848 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1747 * _1747;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1784 = 1.0 - _1747;
    float _1794 = (0.5 / (((_1686 * ((_1761 * _1784) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1784) + _1747) * _1761))) * _1761;
    float _3859 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    float _1806 = (((_1783 * cbLight._m0[_1735].x) * _1796) * _1544) + (((_1710 * cbLight._m0[_1657].x) * _1724) * _1554);
    float _1807 = (((_1783 * cbLight._m0[_1735].y) * _1796) * _1544) + (((_1710 * cbLight._m0[_1657].y) * _1724) * _1554);
    float _1808 = (((_1783 * cbLight._m0[_1735].z) * _1796) * _1544) + (((_1710 * cbLight._m0[_1657].z) * _1724) * _1554);
    float _1870;
    float _1872;
    float _1874;
    if (_1594)
    {
        _1870 = _1806;
        _1872 = _1807;
        _1874 = _1808;
    }
    else
    {
        uint _1876 = _1521 + 2u;
        uint _1880 = _1521 + 10u;
        float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _282) * 0.949999988079071044921875);
        float _1895 = _1894 * _1894;
        float _1896 = cbLight._m0[_1876].x + _361;
        float _1897 = cbLight._m0[_1876].y + _362;
        float _1898 = cbLight._m0[_1876].z + _363;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1903 = _1902 * _1896;
        float _1904 = _1902 * _1897;
        float _1905 = _1902 * _1898;
        float _1906 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1876].xyz));
        float _3870 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1910 = dot(vec3(_279, _280, _281), vec3(_1903, _1904, _1905));
        float _3881 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1914 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1903, _1904, _1905));
        float _3892 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1918 = _1895 * _1895;
        float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
        float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1932 = 1.0 - _1895;
        float _1942 = (0.5 / (((_1686 * ((_1909 * _1932) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1932) + _1895) * _1909))) * _1909;
        float _3903 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1944 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
        float _1945 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1870 = (((_1931 * cbLight._m0[_1880].x) * _1944) * _1945) + _1806;
        _1872 = (((_1931 * cbLight._m0[_1880].y) * _1944) * _1945) + _1807;
        _1874 = (((_1931 * cbLight._m0[_1880].z) * _1944) * _1945) + _1808;
    }
    float _1980;
    float _1982;
    float _1984;
    if (_1612)
    {
        _1980 = _1870;
        _1982 = _1872;
        _1984 = _1874;
    }
    else
    {
        uint _1991 = _1521 + 3u;
        uint _1995 = _1521 + 11u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _282) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _361;
        float _2012 = cbLight._m0[_1991].y + _362;
        float _2013 = cbLight._m0[_1991].z + _363;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1991].xyz));
        float _3919 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2025 = dot(vec3(_279, _280, _281), vec3(_2018, _2019, _2020));
        float _3930 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _3941 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2047 = 1.0 - _2010;
        float _2057 = (0.5 / (((_1686 * ((_2024 * _2047) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _2047) + _2010) * _2024))) * _2024;
        float _3952 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1980 = (((_2046 * cbLight._m0[_1995].x) * _2059) * _2060) + _1870;
        _1982 = (((_2046 * cbLight._m0[_1995].y) * _2059) * _2060) + _1872;
        _1984 = (((_2046 * cbLight._m0[_1995].z) * _2059) * _2060) + _1874;
    }
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_1519.y == 0u)
    {
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2135;
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2135;
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2135;
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.x;
        uint _2162 = uint((float(_2150.y) * floor(float(uint(cbSceneParam._m0[85u].y * _383) / _2151))) + floor(float(uint(cbSceneParam._m0[85u].x * _382) / _2151)));
        float _2172 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2173 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        uint _2176 = uint(isnan(14.0) ? _2173 : (isnan(_2173) ? 14.0 : min(_2173, 14.0)));
        uvec4 _2181 = texelFetch(g_lightClusterGridBuffer, int(((_2176 << 2u) + (_2162 << 6u)) >> 2u));
        uint _2182 = _2181.x;
        uint _2183 = _2150.z;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        if (((((1u << ((_2183 >> 4u) & 15u)) + 4294967295u) & _2182) == 0u) || ((_2183 & 240u) == 0u))
        {
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
        }
        else
        {
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            uint _2442 = 0u;
            uint _2451;
            bool _2452;
            for (;;)
            {
                _2451 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                _2452 = _2451 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2452)
                {
                    frontier_phi_66_pred = _2436;
                    frontier_phi_66_pred_1 = _2441;
                    frontier_phi_66_pred_2 = _2440;
                    frontier_phi_66_pred_3 = _2439;
                    frontier_phi_66_pred_4 = _2438;
                    frontier_phi_66_pred_5 = _2437;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2438;
                    _2584 = _2439;
                    _2585 = _2440;
                    _2586 = _2441;
                    _2587 = _2451;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2442 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2136;
                        float _2648 = _2607.y - _2137;
                        float _2649 = _2607.z - _2138;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_403, _406, _409), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3978 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2136;
                        float _2683 = (-0.0) - _2137;
                        float _2684 = (-0.0) - _2138;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _463;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_403, _406, _409), vec3(_2689, _2690, _2691));
                        float _3994 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2724 = dot(vec3(_403, _406, _409), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _4005 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _4016 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _4027 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2511 = (_2678 * _2626.x) + _2584;
                        _2512 = (_2678 * _2626.y) + _2585;
                        _2513 = (_2678 * _2626.z) + _2586;
                        _2508 = (_2759 * _2643.x) + _2581;
                        _2509 = (_2759 * _2643.y) + _2582;
                        _2510 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2510;
                            _2584 = _2511;
                            _2585 = _2512;
                            _2586 = _2513;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_66_pred = _2508;
                    frontier_phi_66_pred_1 = _2513;
                    frontier_phi_66_pred_2 = _2512;
                    frontier_phi_66_pred_3 = _2511;
                    frontier_phi_66_pred_4 = _2510;
                    frontier_phi_66_pred_5 = _2509;
                }
                _2284 = frontier_phi_66_pred;
                _2294 = frontier_phi_66_pred_1;
                _2292 = frontier_phi_66_pred_2;
                _2290 = frontier_phi_66_pred_3;
                _2288 = frontier_phi_66_pred_4;
                _2286 = frontier_phi_66_pred_5;
                uint _2443 = _2442 + 1u;
                if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2436 = _2284;
                    _2437 = _2286;
                    _2438 = _2288;
                    _2439 = _2290;
                    _2440 = _2292;
                    _2441 = _2294;
                    _2442 = _2443;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
        }
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.z;
        uint _2300 = (_2298 >> 8u) & 15u;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((4294967295u << _2300) & _2182) == 0u)
        {
            _2404 = _2283;
            _2406 = _2285;
            _2408 = _2287;
            _2410 = _2289;
            _2412 = _2291;
            _2414 = _2293;
        }
        else
        {
            float _2429 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _2430 = _2429 * _2136;
            float _2431 = _2429 * _2137;
            float _2432 = _2429 * _2138;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2300 < ((_2298 >> 12u) & 15u))
            {
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2415;
                float _2564 = _2283;
                float _2565 = _2285;
                float _2566 = _2287;
                float _2567 = _2289;
                float _2568 = _2291;
                float _2569 = _2293;
                uint _2570 = _2300;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2580)
                    {
                        frontier_phi_77_pred = _2569;
                        frontier_phi_77_pred_1 = _2568;
                        frontier_phi_77_pred_2 = _2567;
                        frontier_phi_77_pred_3 = _2566;
                        frontier_phi_77_pred_4 = _2565;
                        frontier_phi_77_pred_5 = _2564;
                    }
                    else
                    {
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        float _2788 = _2566;
                        float _2789 = _2567;
                        float _2790 = _2568;
                        float _2791 = _2569;
                        uint _2792 = _2579;
                        uint _2793;
                        vec4 _2818;
                        float _2819;
                        vec4 _2834;
                        vec3 _2846;
                        vec4 _2862;
                        vec4 _2878;
                        float _2925;
                        bool _2926;
                        for (;;)
                        {
                            uint _2803 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2792));
                            _2793 = (_2792 + 4294967295u) & _2792;
                            uint _2805 = _2803 * 40u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            _2819 = _2818.w;
                            uint _2821 = (_2803 * 40u) + 4u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2836 = (_2803 * 40u) + 8u;
                            _2846 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x));
                            uint _2849 = (_2803 * 40u) + 16u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2865 = (_2803 * 40u) + 20u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2803 * 40u) + 24u;
                            vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2900 = (_2803 * 40u) + 28u;
                            vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            _2925 = fma(_2138, _2913.z, fma(_2137, _2913.y, _2913.x * _2136)) + _2913.w;
                            _2926 = !((fma(_2138, _2894.z, fma(_2137, _2894.y, _2894.x * _2136)) + _2894.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2926)
                            {
                                float _2953 = _2818.x - _2136;
                                float _2954 = _2818.y - _2137;
                                float _2955 = _2818.z - _2138;
                                float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                                float _2959 = inversesqrt(_2956);
                                float _2960 = _2959 * _2953;
                                float _2961 = _2959 * _2954;
                                float _2962 = _2959 * _2955;
                                float _2966 = 1.0 - (_2956 / (_2819 * _2819));
                                float _4038 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _2971 = sqrt(_2956) * _2834.w;
                                float _2973 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                                float _2974 = _2973 * _2973;
                                float _2977 = ((1.0 - _2974) * dot(vec3(_2960, _2961, _2962), vec3(_403, _406, _409))) + _2974;
                                float _2980 = _2971 * _2971;
                                float _2984 = (fma(_2138, _2862.z, fma(_2137, _2862.y, _2862.x * _2136)) + _2862.w) / _2925;
                                float _2985 = (fma(_2138, _2878.z, fma(_2137, _2878.y, _2878.x * _2136)) + _2878.w) / _2925;
                                float _2989 = 1.0 - dot(vec2(_2984, _2985), vec2(_2984, _2985));
                                float _4054 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _2991 = _2990 * (((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2967) / ((_2980 * 0.699999988079071044921875) + 1.0));
                                float _3003 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                                float _3004 = 1.0 - _463;
                                float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                                float _3012 = _3011 * _3011;
                                float _3013 = _3012 * _3012;
                                float _3014 = _2960 - _2430;
                                float _3015 = _2961 - _2431;
                                float _3016 = _2962 - _2432;
                                float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                                float _3024 = dot(vec3(_403, _406, _409), vec3((-0.0) - _2430, (-0.0) - _2431, (-0.0) - _2432));
                                float _4065 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3028 = dot(vec3(_403, _406, _409), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                                float _4076 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3031 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                                float _3036 = _2973 * _3012;
                                float _3037 = _3036 * _3036;
                                float _3043 = ((1.0 - _3037) * dot(vec3(_403, _406, _409), vec3(_2960, _2961, _2962))) + _3037;
                                float _4087 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3045 = 1.0 - _3012;
                                float _3055 = (0.5 / (((_3044 * ((_3027 * _3045) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3012) * _3027))) * _3044;
                                float _4098 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3065 = (_2990 * _2967) * (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_3035 * _3035) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2991 * _2834.y;
                                frontier_phi_83_pred_1 = _2991 * _2834.x;
                                frontier_phi_83_pred_2 = _3065 * _2846.z;
                                frontier_phi_83_pred_3 = _3065 * _2846.y;
                                frontier_phi_83_pred_4 = _3065 * _2846.x;
                                frontier_phi_83_pred_5 = _2991 * _2834.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3073 = frontier_phi_83_pred;
                            _3072 = frontier_phi_83_pred_1;
                            _3071 = frontier_phi_83_pred_2;
                            _3070 = frontier_phi_83_pred_3;
                            _3069 = frontier_phi_83_pred_4;
                            _3074 = frontier_phi_83_pred_5;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            if (_2793 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2793;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2778;
                        frontier_phi_77_pred_1 = _2777;
                        frontier_phi_77_pred_2 = _2776;
                        frontier_phi_77_pred_3 = _2775;
                        frontier_phi_77_pred_4 = _2774;
                        frontier_phi_77_pred_5 = _2773;
                    }
                    _2415 = frontier_phi_77_pred;
                    _2413 = frontier_phi_77_pred_1;
                    _2411 = frontier_phi_77_pred_2;
                    _2409 = frontier_phi_77_pred_3;
                    _2407 = frontier_phi_77_pred_4;
                    _2405 = frontier_phi_77_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2405;
                        _2565 = _2407;
                        _2566 = _2409;
                        _2567 = _2411;
                        _2568 = _2413;
                        _2569 = _2415;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2409;
                frontier_phi_58_59_ladder_1 = _2415;
                frontier_phi_58_59_ladder_2 = _2413;
                frontier_phi_58_59_ladder_3 = _2411;
                frontier_phi_58_59_ladder_4 = _2407;
                frontier_phi_58_59_ladder_5 = _2405;
            }
            else
            {
                frontier_phi_58_59_ladder = _2287;
                frontier_phi_58_59_ladder_1 = _2293;
                frontier_phi_58_59_ladder_2 = _2291;
                frontier_phi_58_59_ladder_3 = _2289;
                frontier_phi_58_59_ladder_4 = _2285;
                frontier_phi_58_59_ladder_5 = _2283;
            }
            _2404 = frontier_phi_58_59_ladder_5;
            _2406 = frontier_phi_58_59_ladder_4;
            _2408 = frontier_phi_58_59_ladder;
            _2410 = frontier_phi_58_59_ladder_3;
            _2412 = frontier_phi_58_59_ladder_2;
            _2414 = frontier_phi_58_59_ladder_1;
        }
        float _2419 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2195 = (_2419 * _2410) + _1650;
        _2197 = (_2419 * _2412) + _1652;
        _2199 = (_2419 * _2414) + _1654;
        _2201 = ((_2404 * 0.039999999105930328369140625) * _2419) + _1980;
        _2203 = ((_2406 * 0.039999999105930328369140625) * _2419) + _1982;
        _2205 = ((_2408 * 0.039999999105930328369140625) * _2419) + _1984;
    }
    else
    {
        _2195 = _1650;
        _2197 = _1652;
        _2199 = _1654;
        _2201 = _1980;
        _2203 = _1982;
        _2205 = _1984;
    }
    float _4114 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4125 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4136 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _2222 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2195 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _447))) + ((_2201 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2223 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2197 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _447))) + ((_2203 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2224 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2199 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _447))) + ((_2205 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    uint _2225 = _422 + 6u;
    float _2233 = _382 / cbSceneParam._m0[86u].x;
    float _2234 = _383 / cbSceneParam._m0[86u].y;
    vec4 _2248 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, (log2((isnan(cbSceneParam._m0[77u].w) ? _301 : (isnan(_301) ? cbSceneParam._m0[77u].w : min(_301, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2250 = _2248.x;
    float _2251 = _2248.y;
    float _2252 = _2248.z;
    float _2253 = _2248.w;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_301 > cbSceneParam._m0[78u].w)
    {
        float _2308 = isnan(_301) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _301 : min(cbSceneParam._m0[80u].w, _301));
        float _2309 = _2308 / _301;
        float _2320 = _2309 * _354;
        float _2321 = _355 * _2309;
        float _2322 = (-0.0) - _2321;
        float _2324 = _2309 * _356;
        float _2326 = (cbSceneParam._m0[77u].w * _2322) / _2308;
        float _2327 = _2326 + cbSceneParam._m0[79u].w;
        float _2328 = cbSceneParam._m0[79u].w - _2321;
        float _2334 = sqrt(((_2320 * _2320) + (_2321 * _2321)) + (_2324 * _2324));
        float _2337 = (1.0 - (cbSceneParam._m0[77u].w / _2308)) * _2334;
        float _2342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2521;
        if (abs((_2322 - _2326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2521 = ((((_2327 > 0.0) ? exp2(_2342 * _2327) : (2.0 - exp2(_2344 * _2327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2337;
        }
        else
        {
            float _2465 = 1.0 / cbSceneParam._m0[80u].x;
            float _2466 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : max(_2327, _2328));
            float _2467 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : min(_2327, _2328));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            float _2477 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : min(_2467, 0.0));
            _2521 = ((abs(_2334 / _2322) * cbSceneParam._m0[80u].y) * ((((_2476 - _2477) * 2.0) - ((exp2(_2342 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)))) - exp2(_2342 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))))) * _2465)) - ((exp2(_2344 * _2476) - exp2(_2344 * _2477)) * _2465))) + (_2337 * cbSceneParam._m0[80u].z);
        }
        vec4 _2523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, 1.0), 0.0);
        float _2532 = exp2((_2521 * (-1.44269502162933349609375)) * (1.0 - _2523.w));
        float _2533 = log2(_2532);
        float _2549 = log2(_2253);
        _2346 = (exp2(_2549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].x)) * _2523.x) / cbSceneParam._m0[78u].x)) + _2250;
        _2348 = (exp2(_2549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].y)) * _2523.y) / cbSceneParam._m0[78u].y)) + _2251;
        _2350 = (exp2(_2549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].z)) * _2523.z) / cbSceneParam._m0[78u].z)) + _2252;
        _2352 = _2532 * _2253;
    }
    else
    {
        _2346 = _2250;
        _2348 = _2251;
        _2350 = _2252;
        _2352 = _2253;
    }
    bool _2559;
    vec4 _2362;
    vec4 _2384;
    float _2386;
    float _2390;
    float _2391;
    float _2392;
    float _2393;
    bool _2403;
    for (;;)
    {
        _2362 = cbMatDynParam._m0[0u];
        float _2364 = roundEven(_2362.y);
        bool _2365 = _2364 == 3.0;
        float _2366 = log2(_2352);
        float _2373 = exp2(_2366 * cbSceneParam._m0[78u].x) * _2222;
        float _2374 = exp2(_2366 * cbSceneParam._m0[78u].y) * _2223;
        float _2375 = exp2(_2366 * cbSceneParam._m0[78u].z) * _2224;
        float _2382 = _370 + (-0.5);
        _2384 = cbMtdParam._m0[1u];
        _2386 = _2384.y * _2382;
        float _2389 = (_2364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2390 = _2389 * (_2365 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2346)));
        _2391 = _2389 * (_2365 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2348)));
        _2392 = _2389 * (_2365 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2350)));
        _2393 = _2382 * 0.999000012874603271484375;
        _2403 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2403)
        {
            if ((cbInstanceData._m0[_422 + 7u].x + _2393) < 0.5)
            {
                _2559 = true;
                break;
            }
        }
        uint _2500 = _423 + uint(_2362.w);
        if ((cbInstanceData._m0[_2500].w < 1.0) && ((cbInstanceData._m0[_2500].w + _2393) < 0.5))
        {
            _2559 = true;
            break;
        }
        if ((_2386 + 1.0) < _2384.x)
        {
            _2559 = true;
            break;
        }
        _2559 = false;
        break;
    }
    float _2764;
    if (_2559)
    {
        discard_state = true;
        _2764 = 0.0;
    }
    else
    {
        _2764 = cbInstanceData._m0[_2225].w;
    }
    SV_Target.x = _2390;
    SV_Target.y = _2391;
    SV_Target.z = _2392;
    SV_Target.w = _2764;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2225].w;
    discard_exit();
}


