#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _996;
float _3668;
float _3669;
float _3670;
float _3671;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _304 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3680 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _312 = (_305 * ((_273.x * cbMtdParam._m0[10u].x) - _248)) + _248;
    float _313 = (_305 * ((_273.y * cbMtdParam._m0[10u].y) - _249)) + _249;
    float _314 = (_305 * ((_273.z * cbMtdParam._m0[10u].z) - _250)) + _250;
    vec4 _326 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _328 = _326.x;
    float _330 = _328 - (_328 * TEXCOORD_5.x);
    vec4 _347 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _355 = (_347.x * 2.0) + (-1.0);
    float _357 = (_347.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_355, _357), vec2(_355, _357));
    float _3691 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _363 = sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))));
    float _364 = _347.z * cbMtdParam._m0[12u].y;
    vec4 _377 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _391 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_377.z * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _397 = ((((_377.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _355;
    float _398 = ((((_377.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _357;
    float _401 = fma(_363, _212 * NORMAL.x, fma(_398, _219 * TANGENT.x, (_205 * _197) * _397));
    float _404 = fma(_363, _212 * NORMAL.y, fma(_398, _219 * TANGENT.y, (_205 * _198) * _397));
    float _407 = fma(_363, _212 * NORMAL.z, fma(_398, _219 * TANGENT.z, (_205 * _199) * _397));
    float _411 = inversesqrt(dot(vec3(_401, _404, _407), vec3(_401, _404, _407)));
    float _412 = _411 * _401;
    float _413 = _411 * _404;
    float _414 = _411 * _407;
    float _3702 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _415 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3724 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3735 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3746 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _419 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _435 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _476 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _486 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _476);
    float _487 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _476);
    float _488 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _476);
    float _492 = inversesqrt(dot(vec3(_486, _487, _488), vec3(_486, _487, _488)));
    float _493 = _486 * _492;
    float _494 = _487 * _492;
    float _495 = _488 * _492;
    vec4 _500 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _502 = _500.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _676 = sqrt(((_486 * _486) + (_487 * _487)) + (_488 * _488));
        float _682 = (cbMatDynParam._m0[5u].x * _676) + cbMatDynParam._m0[5u].y;
        float _3757 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _687 = (cbMatDynParam._m0[5u].z * _676) + cbMatDynParam._m0[5u].w;
        float _3768 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) - _683)) + _683) < ((_502 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _514 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _515 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _534 = fma(_414, cbSceneParam._m0[5u].z, fma(_413, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _412));
    float _537 = fma(_414, cbSceneParam._m0[6u].z, fma(_413, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _412));
    float _540 = fma(_414, cbSceneParam._m0[7u].z, fma(_413, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _412));
    uint _553 = uint(roundEven(NORMAL.w)) * 13u;
    uint _554 = _553 + 9u;
    uint _555 = _554 + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3779 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _567 = 1.0 - _419;
    float _568 = _564 * _567;
    float _569 = _565 * _567;
    float _570 = _566 * _567;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _419;
    float _576 = (_565 + (-0.039999999105930328369140625)) * _419;
    float _577 = (_566 + (-0.039999999105930328369140625)) * _419;
    float _578 = _575 + 0.039999999105930328369140625;
    float _580 = _576 + 0.039999999105930328369140625;
    float _581 = _577 + 0.039999999105930328369140625;
    vec4 _590 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _514, cbSceneParam._m0[86u].y * _515));
    float _593 = _590.x * TEXCOORD_5.w;
    float _594 = dot(vec3(_412, _413, _414), vec3(_493, _494, _495));
    float _597 = _594 * 2.0;
    float _601 = (_597 * _412) - _493;
    float _602 = (_597 * _413) - _494;
    float _603 = (_597 * _414) - _495;
    float _607 = abs(dot(vec3(_493, _494, _495), vec3(_412, _413, _414)));
    float _3812 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _609 = sqrt(_415);
    float _622 = exp2((_609 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_609 * 3.0));
    float _628 = (1.0 - _622) * ((_609 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _629 = _622 * _609;
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _995;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = fma(_665, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657));
        float _724 = fma(_665, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657));
        float _728 = fma(_665, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657));
        float _753 = _657 + _412;
        float _754 = _661 + _413;
        float _755 = _665 + _414;
        float _765 = fma(_755, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753)) - _720;
        float _766 = fma(_755, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753)) - _724;
        float _767 = fma(_755, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753)) - _728;
        float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
        float _784 = ((_771 * _765) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_720 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_771 * _766) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_724 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_771 * _767) / cbModelParam._m0[34u].z) + ((((((_728 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        float _823 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_789.x + (-0.5));
        float _825 = _823 * (_789.y + (-0.5));
        float _826 = _823 * (_789.z + (-0.5));
        float _833 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_796.x + (-0.5));
        float _835 = _833 * (_796.y + (-0.5));
        float _836 = _833 * (_796.z + (-0.5));
        float _843 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_803.x + (-0.5));
        float _845 = _843 * (_803.y + (-0.5));
        float _846 = _843 * (_803.z + (-0.5));
        float _853 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_810.x + (-0.5));
        float _855 = _853 * (_810.y + (-0.5));
        float _856 = _853 * (_810.z + (-0.5));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = _824 * 0.5;
        float _861 = _834 * 0.5;
        float _862 = _844 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _877 = (dot(vec3(_412, _413, _414), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _887 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3860 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_889 + 1.0))) + _894) * _857;
        float _904 = _825 * 0.5;
        float _905 = _835 * 0.5;
        float _906 = _845 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_412, _413, _414), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3893 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_931 + 1.0))) + _936) * _858;
        float _946 = _826 * 0.5;
        float _947 = _836 * 0.5;
        float _948 = _846 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_412, _413, _414), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3926 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_973 + 1.0))) + _978) * _859;
        _995 = _826;
        _997 = _825;
        _998 = _824;
        _999 = _836;
        _1000 = _835;
        _1001 = _834;
        _1002 = _846;
        _1003 = _845;
        _1004 = _844;
        _1005 = _859;
        _1006 = _858;
        _1007 = _857;
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
    }
    else
    {
        _995 = _996;
        _997 = _996;
        _998 = _996;
        _999 = _996;
        _1000 = _996;
        _1001 = _996;
        _1002 = _996;
        _1003 = _996;
        _1004 = _996;
        _1005 = _996;
        _1006 = _996;
        _1007 = _996;
        _1008 = 0.0;
        _1009 = 0.0;
        _1010 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_665, cbModelParam._m0[30u].z, fma(_661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _657));
        float _1043 = fma(_665, cbModelParam._m0[31u].z, fma(_661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _657));
        float _1047 = fma(_665, cbModelParam._m0[32u].z, fma(_661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _657));
        float _1070 = _657 + _412;
        float _1071 = _661 + _413;
        float _1072 = _665 + _414;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_412, _413, _414), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3989 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_412, _413, _414), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4022 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_412, _413, _414), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4055 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _996;
        _1309 = _996;
        _1310 = _996;
        _1311 = _996;
        _1312 = _996;
        _1313 = _996;
        _1314 = _996;
        _1315 = _996;
        _1316 = _996;
        _1317 = _996;
        _1318 = _996;
        _1319 = _996;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1010)) + _1010;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _601 * 0.5;
    float _1377 = _602 * 0.5;
    float _1378 = _603 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_995, _999, _1002, _1005));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _415);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1494 = fma(_665, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657)) + cbModelParam._m0[13u].w;
        float _1498 = fma(_665, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657)) + cbModelParam._m0[14u].w;
        float _1502 = fma(_665, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657)) + cbModelParam._m0[15u].w;
        float _1505 = fma(_603, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601));
        float _1508 = fma(_603, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601));
        float _1511 = fma(_603, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601));
        float _1539;
        if (_1505 > 0.0)
        {
            _1539 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1539 = frontier_phi_17_15_ladder;
        }
        float _1714;
        if (_1508 > 0.0)
        {
            _1714 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1714 = frontier_phi_26_22_ladder;
        }
        float _2009;
        if (_1511 > 0.0)
        {
            _2009 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2009 = frontier_phi_38_33_ladder;
        }
        float _2011 = isnan(_1714) ? _1539 : (isnan(_1539) ? _1714 : min(_1539, _1714));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1505) + _1494;
        float _2017 = (_2012 * _1508) + _1498;
        float _2018 = (_2012 * _1511) + _1502;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_16_38_ladder = _2163.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2163.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2163.x * cbModelParam._m0[1u].y;
        }
        _1527 = frontier_phi_16_38_ladder_2;
        _1529 = frontier_phi_16_38_ladder_1;
        _1531 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_601, _602, _603), _1445);
        _1527 = _1515.x * cbModelParam._m0[1u].y;
        _1529 = _1515.y * cbModelParam._m0[1u].y;
        _1531 = _1515.z * cbModelParam._m0[1u].y;
    }
    float _1535 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _415);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1535 : min(cbModelParam._m0[25u].w, _1535));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1593 = fma(_665, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657)) + cbModelParam._m0[21u].w;
        float _1597 = fma(_665, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657)) + cbModelParam._m0[22u].w;
        float _1601 = fma(_665, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657)) + cbModelParam._m0[23u].w;
        float _1604 = fma(_603, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601));
        float _1607 = fma(_603, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601));
        float _1610 = fma(_603, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601));
        float _1719;
        if (_1604 > 0.0)
        {
            _1719 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1719 = frontier_phi_28_24_ladder;
        }
        float _2036;
        if (_1607 > 0.0)
        {
            _2036 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2036 = frontier_phi_40_35_ladder;
        }
        float _2374;
        if (_1610 > 0.0)
        {
            _2374 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2374 = frontier_phi_50_47_ladder;
        }
        float _2376 = isnan(_2036) ? _1719 : (isnan(_1719) ? _2036 : min(_1719, _2036));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1604) + _1593;
        float _2382 = (_2377 * _1607) + _1597;
        float _2383 = (_2377 * _1610) + _1601;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2384;
        float _2387 = _2384 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2383 > _2387) || ((_2383 < _2385) || ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 < _2385) || (_2381 > _2387))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2383, cbModelParam._m0[17u].z, fma(_2382, cbModelParam._m0[17u].y, _2381 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2383, cbModelParam._m0[18u].z, fma(_2382, cbModelParam._m0[18u].y, _2381 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2383, cbModelParam._m0[19u].z, fma(_2382, cbModelParam._m0[19u].y, _2381 * cbModelParam._m0[19u].x))), _1536);
            frontier_phi_25_50_ladder = _2505.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2505.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2505.x * cbModelParam._m0[1u].z;
        }
        _1629 = frontier_phi_25_50_ladder_2;
        _1631 = frontier_phi_25_50_ladder_1;
        _1633 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_601, _602, _603), _1536);
        _1629 = _1613.x * cbModelParam._m0[1u].z;
        _1631 = _1613.y * cbModelParam._m0[1u].z;
        _1633 = _1613.z * cbModelParam._m0[1u].z;
    }
    float _1646 = (((_628 * _578) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1648 = (((_628 * _580) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1650 = (((_628 * _581) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1633 - _1531)) + _1531);
    float _1653 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, _1646 * cbSceneParam._m0[91u].x));
    float _1693 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1706 = _1693 / _1705;
    float _1707 = _1697 / _1705;
    float _1708 = _1701 / _1705;
    float _1855;
    float _1856;
    float _1857;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1735 = ((uint(_1708 > cbSceneParam._m0[59u].y) + uint(_1708 > cbSceneParam._m0[59u].x)) + uint(_1708 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1736 = _1735 + 43u;
        uint _1744 = _1735 + 44u;
        uint _1752 = _1735 + 45u;
        uint _1760 = _1735 + 46u;
        float _1771 = fma(_1705, cbSceneParam._m0[_1736].w, fma(_1701, cbSceneParam._m0[_1736].z, fma(_1697, cbSceneParam._m0[_1736].y, _1693 * cbSceneParam._m0[_1736].x)));
        float _1775 = fma(_1705, cbSceneParam._m0[_1744].w, fma(_1701, cbSceneParam._m0[_1744].z, fma(_1697, cbSceneParam._m0[_1744].y, _1693 * cbSceneParam._m0[_1744].x)));
        float _1783 = fma(_1705, cbSceneParam._m0[_1760].w, fma(_1701, cbSceneParam._m0[_1760].z, fma(_1697, cbSceneParam._m0[_1760].y, _1693 * cbSceneParam._m0[_1760].x)));
        float _1788 = cbSceneParam._m0[33u].z * _1783;
        float _1790 = cbSceneParam._m0[33u].w * _1783;
        float _1793 = fma(_1705, cbSceneParam._m0[_1752].w, fma(_1701, cbSceneParam._m0[_1752].z, fma(_1697, cbSceneParam._m0[_1752].y, _1693 * cbSceneParam._m0[_1752].x))) / _1783;
        float _1841 = (cbSceneParam._m0[33u].x - sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708))) * cbSceneParam._m0[33u].y;
        float _4181 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1848 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 + _1771) / _1783, (_1790 + _1775) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1790 + _1771) / _1783, (_1775 - _1788) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 - _1788) / _1783, (_1775 - _1790) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 - _1790) / _1783, (_1788 + _1775) / _1783), _1793), 0.0)).x), vec4(0.25)));
        _1855 = 1.0 - (_1848 * cbSceneParam._m0[34u].x);
        _1856 = 1.0 - (_1848 * cbSceneParam._m0[34u].y);
        _1857 = 1.0 - (_1848 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1855 = 1.0;
        _1856 = 1.0;
        _1857 = 1.0;
    }
    float _1921;
    float _1923;
    float _1925;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1909 = fma(_1705, cbSceneParam._m0[63u].w, fma(_1701, cbSceneParam._m0[63u].z, fma(_1697, cbSceneParam._m0[63u].y, _1693 * cbSceneParam._m0[63u].x)));
        float _1910 = fma(_1705, cbSceneParam._m0[60u].w, fma(_1701, cbSceneParam._m0[60u].z, fma(_1697, cbSceneParam._m0[60u].y, _1693 * cbSceneParam._m0[60u].x))) / _1909;
        float _1911 = fma(_1705, cbSceneParam._m0[61u].w, fma(_1701, cbSceneParam._m0[61u].z, fma(_1697, cbSceneParam._m0[61u].y, _1693 * cbSceneParam._m0[61u].x))) / _1909;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1910 >= cbSceneParam._m0[64u].x) && (_1911 >= cbSceneParam._m0[64u].y)) && (_1910 <= cbSceneParam._m0[64u].z)) && (_1911 <= cbSceneParam._m0[64u].w))
        {
            float _2049 = fma(_1705, cbSceneParam._m0[62u].w, fma(_1701, cbSceneParam._m0[62u].z, fma(_1697, cbSceneParam._m0[62u].y, _1693 * cbSceneParam._m0[62u].x))) / _1909;
            float _2053 = isnan(cbSceneParam._m0[41u].w) ? _2049 : (isnan(_2049) ? cbSceneParam._m0[41u].w : max(_2049, cbSceneParam._m0[41u].w));
            float _2096 = (cbSceneParam._m0[33u].x - sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708))) * cbSceneParam._m0[33u].y;
            float _4197 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
            float _2103 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1910, cbSceneParam._m0[33u].w + _1911), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1910, _1911 - cbSceneParam._m0[33u].z), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1910 - cbSceneParam._m0[33u].z, _1911 - cbSceneParam._m0[33u].w), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1910 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1911), _2053), 0.0)).x), vec4(0.25)));
            float _2107 = 1.0 - (_2103 * cbSceneParam._m0[34u].x);
            float _2108 = 1.0 - (_2103 * cbSceneParam._m0[34u].y);
            float _2109 = 1.0 - (_2103 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2109) ? _1857 : (isnan(_1857) ? _2109 : min(_1857, _2109));
            frontier_phi_37_36_ladder_1 = isnan(_2108) ? _1856 : (isnan(_1856) ? _2108 : min(_1856, _2108));
            frontier_phi_37_36_ladder_2 = isnan(_2107) ? _1855 : (isnan(_1855) ? _2107 : min(_1855, _2107));
        }
        else
        {
            frontier_phi_37_36_ladder = _1857;
            frontier_phi_37_36_ladder_1 = _1856;
            frontier_phi_37_36_ladder_2 = _1855;
        }
        _1921 = frontier_phi_37_36_ladder_2;
        _1923 = frontier_phi_37_36_ladder_1;
        _1925 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1921 = _1855;
        _1923 = _1856;
        _1925 = _1857;
    }
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_553 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1940 = _593 + (-1.0);
    float _1945 = (cbLight._m0[_1933].x * _1940) + 1.0;
    float _1946 = (cbLight._m0[_1933].y * _1940) + 1.0;
    float _1947 = (cbLight._m0[_1933].z * _1940) + 1.0;
    float _1948 = (cbLight._m0[_1933].w * _1940) + 1.0;
    uint _1949 = _1932 + 5u;
    float _1955 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1959 = _1932 + 4u;
    float _1968 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1972 = _1932 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_412, _413, _414));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_412, _413, _414));
    float _4233 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _4244 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1949].x * _1955) * _1993) + (((cbLight._m0[_1959].x * _1921) * _1968) * _1991);
    float _2001 = ((_1955 * cbLight._m0[_1949].y) * _1993) + (((cbLight._m0[_1959].y * _1923) * _1968) * _1991);
    float _2002 = ((_1955 * cbLight._m0[_1949].z) * _1993) + (((cbLight._m0[_1959].z * _1925) * _1968) * _1991);
    uvec4 _2006 = floatBitsToUint(cbLight._m0[_1932 + 12u]);
    bool _2008 = _2006.x == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2008)
    {
        _2110 = _2000;
        _2112 = _2001;
        _2114 = _2002;
    }
    else
    {
        uint _2118 = _1932 + 6u;
        float _2134 = (dot(vec3(cbLight._m0[_1932 + 2u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4255 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2137 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2110 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _2000;
        _2112 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _2001;
        _2114 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _2002;
    }
    bool _2117 = _2006.y == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2117)
    {
        _2172 = _2110;
        _2174 = _2112;
        _2176 = _2114;
    }
    else
    {
        uint _2345 = _1932 + 7u;
        float _2361 = (dot(vec3(cbLight._m0[_1932 + 3u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4271 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2364 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2172 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2110;
        _2174 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2112;
        _2176 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2114;
    }
    uint _2179 = _1932 + 8u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _415) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1932].x + _493;
    float _2195 = cbLight._m0[_1932].y + _494;
    float _2196 = cbLight._m0[_1932].z + _495;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1932].xyz));
    float _4287 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2208 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2209 = dot(vec3(_412, _413, _414), vec3(_2201, _2202, _2203));
    float _4309 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2201, _2202, _2203));
    float _4320 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2193 * _2193;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
    float _2230 = 0.959999978542327880859375 - _575;
    float _2232 = 0.959999978542327880859375 - _576;
    float _2233 = 0.959999978542327880859375 - _577;
    float _2240 = 1.0 - _2193;
    float _2251 = (0.5 / (((_2208 * ((_2207 * _2240) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2240) + _2193) * _2207))) * _2207;
    float _4331 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    uint _2267 = _1932 + 9u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _415) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_1972].x + _493;
    float _2281 = cbLight._m0[_1972].y + _494;
    float _2282 = cbLight._m0[_1972].z + _495;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1972].xyz));
    float _4342 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2294 = dot(vec3(_412, _413, _414), vec3(_2287, _2288, _2289));
    float _4353 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2287, _2288, _2289));
    float _4364 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2279 * _2279;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
    float _2320 = 1.0 - _2279;
    float _2330 = (0.5 / (((_2208 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2320) + _2279) * _2293))) * _2293;
    float _4375 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    float _2342 = (((((_2313 * _2230) + _578) * cbLight._m0[_2267].x) * _2332) * _1955) + ((((cbLight._m0[_2179].x * _1921) * ((_2229 * _2230) + _578)) * _2253) * _1968);
    float _2343 = (((((_2313 * _2232) + _580) * cbLight._m0[_2267].y) * _2332) * _1955) + ((((cbLight._m0[_2179].y * _1923) * ((_2229 * _2232) + _580)) * _2253) * _1968);
    float _2344 = (((((_2313 * _2233) + _581) * cbLight._m0[_2267].z) * _2332) * _1955) + ((((cbLight._m0[_2179].z * _1925) * ((_2229 * _2233) + _581)) * _2253) * _1968);
    float _2400;
    float _2402;
    float _2404;
    if (_2008)
    {
        _2400 = _2342;
        _2402 = _2343;
        _2404 = _2344;
    }
    else
    {
        uint _2406 = _1932 + 2u;
        uint _2410 = _1932 + 10u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _415) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _493;
        float _2427 = cbLight._m0[_2406].y + _494;
        float _2428 = cbLight._m0[_2406].z + _495;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2406].xyz));
        float _4386 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2440 = dot(vec3(_412, _413, _414), vec3(_2433, _2434, _2435));
        float _4397 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4408 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
        float _2466 = 1.0 - _2425;
        float _2476 = (0.5 / (((_2208 * ((_2439 * _2466) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2466) + _2425) * _2439))) * _2439;
        float _4419 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2400 = (((((_2459 * _2230) + _578) * cbLight._m0[_2410].x) * _2478) * _2479) + _2342;
        _2402 = (((((_2459 * _2232) + _580) * cbLight._m0[_2410].y) * _2478) * _2479) + _2343;
        _2404 = (((((_2459 * _2233) + _581) * cbLight._m0[_2410].z) * _2478) * _2479) + _2344;
    }
    float _2510;
    float _2512;
    float _2514;
    if (_2117)
    {
        _2510 = _2400;
        _2512 = _2402;
        _2514 = _2404;
    }
    else
    {
        uint _2521 = _1932 + 3u;
        uint _2525 = _1932 + 11u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _415) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _493;
        float _2542 = cbLight._m0[_2521].y + _494;
        float _2543 = cbLight._m0[_2521].z + _495;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2521].xyz));
        float _4435 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2555 = dot(vec3(_412, _413, _414), vec3(_2548, _2549, _2550));
        float _4446 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4457 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2208 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2581) + _2540) * _2554))) * _2554;
        float _4468 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2510 = (((((_2574 * _2230) + _578) * cbLight._m0[_2525].x) * _2593) * _2594) + _2400;
        _2512 = (((((_2574 * _2232) + _580) * cbLight._m0[_2525].y) * _2593) * _2594) + _2402;
        _2514 = (((((_2574 * _2233) + _581) * cbLight._m0[_2525].z) * _2593) * _2594) + _2404;
    }
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_1930.y == 0u)
    {
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.x;
        uint _2627 = uint((float(_2615.y) * floor(float(uint(cbSceneParam._m0[85u].y * _515) / _2616))) + floor(float(uint(cbSceneParam._m0[85u].x * _514) / _2616)));
        float _2637 = (log2(_1708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2638 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        uint _2641 = uint(isnan(14.0) ? _2638 : (isnan(_2638) ? 14.0 : min(_2638, 14.0)));
        uvec4 _2646 = texelFetch(g_lightClusterGridBuffer, int(((_2641 << 2u) + (_2627 << 6u)) >> 2u));
        uint _2647 = _2646.x;
        uint _2648 = _2615.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2648 >> 4u) & 15u)) + 4294967295u) & _2647) == 0u) || ((_2648 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2896)
                {
                    frontier_phi_71_pred = _2885;
                    frontier_phi_71_pred_1 = _2884;
                    frontier_phi_71_pred_2 = _2883;
                    frontier_phi_71_pred_3 = _2882;
                    frontier_phi_71_pred_4 = _2881;
                    frontier_phi_71_pred_5 = _2880;
                }
                else
                {
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    uint _3031;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2895;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3035 = uint(findLSB(_3031)) + (_2886 << 5u);
                        uint _3032 = (_3031 + 4294967295u) & _3031;
                        uint _3037 = _3035 * 48u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3057 = (_3035 * 48u) + 4u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3076 = (_3035 * 48u) + 8u;
                        vec3 _3087 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x));
                        float _3091 = _3051.x - _1706;
                        float _3092 = _3051.y - _1707;
                        float _3093 = _3051.z - _1708;
                        float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                        float _3097 = inversesqrt(_3094);
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3101 = dot(vec3(_534, _537, _540), vec3(_3098, _3099, _3100));
                        float _3106 = 1.0 - (_3094 * _3051.w);
                        float _4494 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3108 = sqrt(_3094) * _3070.w;
                        float _3111 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3101) + _3112;
                        float _3118 = _3108 * _3108;
                        float _3122 = ((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3107) / ((_3118 * 0.699999988079071044921875) + 1.0);
                        float _3126 = (-0.0) - _1706;
                        float _3127 = (-0.0) - _1707;
                        float _3128 = (-0.0) - _1708;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3142 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                        float _3143 = 1.0 - _609;
                        float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                        float _3151 = _3150 * _3150;
                        float _3152 = _3151 * _3151;
                        float _3153 = _3133 + _3098;
                        float _3154 = _3134 + _3099;
                        float _3155 = _3135 + _3100;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3163 = dot(vec3(_534, _537, _540), vec3(_3133, _3134, _3135));
                        float _4510 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3167 = dot(vec3(_534, _537, _540), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                        float _4521 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                        float _3175 = _3111 * _3151;
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3101) + _3176;
                        float _4532 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3181 = 1.0 - _3151;
                        float _3191 = (0.5 / (((_3180 * ((_3166 * _3181) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3151) * _3166))) * _3180;
                        float _4543 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3202 = (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3174 * _3174) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125))) * _3107;
                        _2955 = (_3122 * _3070.x) + _3028;
                        _2956 = (_3122 * _3070.y) + _3029;
                        _2957 = (_3122 * _3070.z) + _3030;
                        _2952 = (_3202 * _3087.x) + _3025;
                        _2953 = (_3202 * _3087.y) + _3026;
                        _2954 = (_3202 * _3087.z) + _3027;
                        if (_3032 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _3032;
                        }
                    }
                    frontier_phi_71_pred = _2957;
                    frontier_phi_71_pred_1 = _2956;
                    frontier_phi_71_pred_2 = _2955;
                    frontier_phi_71_pred_3 = _2954;
                    frontier_phi_71_pred_4 = _2953;
                    frontier_phi_71_pred_5 = _2952;
                }
                _2738 = frontier_phi_71_pred;
                _2736 = frontier_phi_71_pred_1;
                _2734 = frontier_phi_71_pred_2;
                _2732 = frontier_phi_71_pred_3;
                _2730 = frontier_phi_71_pred_4;
                _2728 = frontier_phi_71_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2728;
                    _2881 = _2730;
                    _2882 = _2732;
                    _2883 = _2734;
                    _2884 = _2736;
                    _2885 = _2738;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2744) & _2647) == 0u)
        {
            _2848 = _2727;
            _2850 = _2729;
            _2852 = _2731;
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
            float _2874 = _2873 * _1706;
            float _2875 = _2873 * _1707;
            float _2876 = _2873 * _1708;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _3008 = _2727;
                float _3009 = _2729;
                float _3010 = _2731;
                float _3011 = _2733;
                float _3012 = _2735;
                float _3013 = _2737;
                uint _3014 = _2744;
                uint _3023;
                bool _3024;
                for (;;)
                {
                    _3023 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                    _3024 = _3023 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3024)
                    {
                        frontier_phi_82_pred = _3013;
                        frontier_phi_82_pred_1 = _3012;
                        frontier_phi_82_pred_2 = _3011;
                        frontier_phi_82_pred_3 = _3010;
                        frontier_phi_82_pred_4 = _3009;
                        frontier_phi_82_pred_5 = _3008;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3229 = _3008;
                        float _3230 = _3009;
                        float _3231 = _3010;
                        float _3232 = _3011;
                        float _3233 = _3012;
                        float _3234 = _3013;
                        uint _3235 = _3023;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3305;
                        vec4 _3321;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3246 = ((_3014 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3292 = (_3246 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3246 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3246 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3246 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_1708, _3356.z, fma(_1707, _3356.y, _3356.x * _1706)) + _3356.w;
                            _3369 = !((fma(_1708, _3337.z, fma(_1707, _3337.y, _3337.x * _1706)) + _3337.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3261.x - _1706;
                                float _3397 = _3261.y - _1707;
                                float _3398 = _3261.z - _1708;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3262 * _3262));
                                float _4554 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3414 = sqrt(_3399) * _3277.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_534, _537, _540))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_1708, _3305.z, fma(_1707, _3305.y, _3305.x * _1706)) + _3305.w) / _3368;
                                float _3428 = (fma(_1708, _3321.z, fma(_1707, _3321.y, _3321.x * _1706)) + _3321.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4570 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _609;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2874;
                                float _3458 = _3404 - _2875;
                                float _3459 = _3405 - _2876;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_534, _537, _540), vec3((-0.0) - _2874, (-0.0) - _2875, (-0.0) - _2876));
                                float _4581 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3471 = dot(vec3(_534, _537, _540), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4592 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_534, _537, _540), vec3(_3403, _3404, _3405))) + _3480;
                                float _4603 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4614 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3434 * _3277.z;
                                frontier_phi_88_pred_1 = _3434 * _3277.y;
                                frontier_phi_88_pred_2 = _3434 * _3277.x;
                                frontier_phi_88_pred_3 = _3508 * _3289.z;
                                frontier_phi_88_pred_4 = _3508 * _3289.y;
                                frontier_phi_88_pred_5 = _3508 * _3289.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_88_pred;
                            _3516 = frontier_phi_88_pred_1;
                            _3515 = frontier_phi_88_pred_2;
                            _3514 = frontier_phi_88_pred_3;
                            _3513 = frontier_phi_88_pred_4;
                            _3512 = frontier_phi_88_pred_5;
                            _3219 = _3515 + _3232;
                            _3220 = _3516 + _3233;
                            _3221 = _3517 + _3234;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            _3218 = _3514 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3221;
                        frontier_phi_82_pred_1 = _3220;
                        frontier_phi_82_pred_2 = _3219;
                        frontier_phi_82_pred_3 = _3218;
                        frontier_phi_82_pred_4 = _3217;
                        frontier_phi_82_pred_5 = _3216;
                    }
                    _2859 = frontier_phi_82_pred;
                    _2857 = frontier_phi_82_pred_1;
                    _2855 = frontier_phi_82_pred_2;
                    _2853 = frontier_phi_82_pred_3;
                    _2851 = frontier_phi_82_pred_4;
                    _2849 = frontier_phi_82_pred_5;
                    uint _3015 = _3014 + 1u;
                    if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3008 = _2849;
                        _3009 = _2851;
                        _3010 = _2853;
                        _3011 = _2855;
                        _3012 = _2857;
                        _3013 = _2859;
                        _3014 = _3015;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2855;
                frontier_phi_63_64_ladder_1 = _2859;
                frontier_phi_63_64_ladder_2 = _2857;
                frontier_phi_63_64_ladder_3 = _2853;
                frontier_phi_63_64_ladder_4 = _2851;
                frontier_phi_63_64_ladder_5 = _2849;
            }
            else
            {
                frontier_phi_63_64_ladder = _2733;
                frontier_phi_63_64_ladder_1 = _2737;
                frontier_phi_63_64_ladder_2 = _2735;
                frontier_phi_63_64_ladder_3 = _2731;
                frontier_phi_63_64_ladder_4 = _2729;
                frontier_phi_63_64_ladder_5 = _2727;
            }
            _2848 = frontier_phi_63_64_ladder_5;
            _2850 = frontier_phi_63_64_ladder_4;
            _2852 = frontier_phi_63_64_ladder_3;
            _2854 = frontier_phi_63_64_ladder;
            _2856 = frontier_phi_63_64_ladder_2;
            _2858 = frontier_phi_63_64_ladder_1;
        }
        float _2863 = isnan(1.0) ? _593 : (isnan(_593) ? 1.0 : min(_593, 1.0));
        _2660 = (_2863 * _2854) + _2172;
        _2662 = (_2863 * _2856) + _2174;
        _2664 = (_2863 * _2858) + _2176;
        _2666 = ((_2848 * _578) * _2863) + _2510;
        _2668 = ((_2850 * _580) * _2863) + _2512;
        _2670 = ((_2852 * _581) * _2863) + _2514;
    }
    else
    {
        _2660 = _2172;
        _2662 = _2174;
        _2664 = _2176;
        _2666 = _2510;
        _2668 = _2512;
        _2670 = _2514;
    }
    float _4630 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4641 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4652 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _2687 = ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2660 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _593))) + ((_2666 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    float _2688 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2662 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _593))) + ((_2668 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2664 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _593))) + ((_2670 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    uint _2690 = _553 + 6u;
    float _2698 = _514 / cbSceneParam._m0[86u].x;
    float _2699 = _515 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _435 : (isnan(_435) ? cbSceneParam._m0[77u].w : min(_435, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_435 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_435) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _435 : min(cbSceneParam._m0[80u].w, _435));
        float _2753 = _2752 / _435;
        float _2764 = _2753 * _486;
        float _2765 = _487 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2768 = _2753 * _488;
        float _2770 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2771 = _2770 + cbSceneParam._m0[79u].w;
        float _2772 = cbSceneParam._m0[79u].w - _2765;
        float _2778 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2768 * _2768));
        float _2781 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2778;
        float _2786 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2766 - _2770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2771 > 0.0) ? exp2(_2786 * _2771) : (2.0 - exp2(_2788 * _2771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2781;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : max(_2771, _2772));
            float _2911 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : min(_2771, _2772));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2965 = ((abs(_2778 / _2766) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2786 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2786 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2788 * _2920) - exp2(_2788 * _2921)) * _2909))) + (_2781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2718);
        _2790 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2792 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2794 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2796 = _2976 * _2718;
    }
    else
    {
        _2790 = _2715;
        _2792 = _2716;
        _2794 = _2717;
        _2796 = _2718;
    }
    bool _3003;
    vec4 _2806;
    vec4 _2828;
    float _2830;
    float _2834;
    float _2835;
    float _2836;
    float _2837;
    bool _2847;
    for (;;)
    {
        _2806 = cbMatDynParam._m0[0u];
        float _2808 = roundEven(_2806.y);
        bool _2809 = _2808 == 3.0;
        float _2810 = log2(_2796);
        float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * _2687;
        float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * _2688;
        float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * _2689;
        float _2826 = _502 + (-0.5);
        _2828 = cbMtdParam._m0[1u];
        _2830 = _2828.y * _2826;
        float _2833 = (_2808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2834 = _2833 * (_2809 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
        _2835 = _2833 * (_2809 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
        _2836 = _2833 * (_2809 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
        _2837 = _2826 * 0.999000012874603271484375;
        _2847 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2847)
        {
            if ((cbInstanceData._m0[_553 + 7u].x + _2837) < 0.5)
            {
                _3003 = true;
                break;
            }
        }
        uint _2944 = _554 + uint(_2806.w);
        if ((cbInstanceData._m0[_2944].w < 1.0) && ((cbInstanceData._m0[_2944].w + _2837) < 0.5))
        {
            _3003 = true;
            break;
        }
        if ((_2830 + 1.0) < _2828.x)
        {
            _3003 = true;
            break;
        }
        _3003 = false;
        break;
    }
    float _3207;
    if (_3003)
    {
        discard_state = true;
        _3207 = 0.0;
    }
    else
    {
        _3207 = cbInstanceData._m0[_2690].w;
    }
    SV_Target.x = _2834;
    SV_Target.y = _2835;
    SV_Target.z = _2836;
    SV_Target.w = _3207;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
    discard_exit();
}


