#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _911;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _294 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3225 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
    float _302 = (_295 * ((_263.x * cbMtdParam._m0[10u].x) - _238)) + _238;
    float _303 = (_295 * ((_263.y * cbMtdParam._m0[10u].y) - _239)) + _239;
    float _304 = (_295 * ((_263.z * cbMtdParam._m0[10u].z) - _240)) + _240;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _329 = (_321.x * 2.0) + (-1.0);
    float _331 = (_321.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3236 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))));
    float _338 = _321.z * cbMtdParam._m0[12u].y;
    vec4 _351 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _365 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_351.z * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _371 = ((((_351.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _329;
    float _372 = ((((_351.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _331;
    float _375 = fma(_337, _202 * NORMAL.x, fma(_372, _209 * TANGENT.x, (_195 * _187) * _371));
    float _378 = fma(_337, _202 * NORMAL.y, fma(_372, _209 * TANGENT.y, (_195 * _188) * _371));
    float _381 = fma(_337, _202 * NORMAL.z, fma(_372, _209 * TANGENT.z, (_195 * _189) * _371));
    float _385 = inversesqrt(dot(vec3(_375, _378, _381), vec3(_375, _378, _381)));
    float _386 = _385 * _375;
    float _387 = _385 * _378;
    float _388 = _385 * _381;
    float _3247 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _389 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3269 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3280 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _459 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _449);
    float _460 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _449);
    float _461 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _449);
    float _465 = inversesqrt(dot(vec3(_459, _460, _461), vec3(_459, _460, _461)));
    float _466 = _459 * _465;
    float _467 = _460 * _465;
    float _468 = _461 * _465;
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _495 = fma(_388, cbSceneParam._m0[5u].z, fma(_387, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _386));
    float _498 = fma(_388, cbSceneParam._m0[6u].z, fma(_387, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _386));
    float _501 = fma(_388, cbSceneParam._m0[7u].z, fma(_387, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _386));
    uint _514 = uint(roundEven(NORMAL.w)) * 13u;
    uint _516 = (_514 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _522 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_516].x;
    float _523 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_516].y;
    float _524 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_516].z;
    float _3291 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    vec4 _536 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _539 = _536.x * TEXCOORD_5.w;
    float _540 = dot(vec3(_386, _387, _388), vec3(_466, _467, _468));
    float _543 = _540 * 2.0;
    float _547 = (_543 * _386) - _466;
    float _548 = (_543 * _387) - _467;
    float _549 = (_543 * _388) - _468;
    float _553 = abs(dot(vec3(_466, _467, _468), vec3(_386, _387, _388)));
    float _3324 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _555 = sqrt(_389);
    float _568 = exp2((_555 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_555 * 3.0));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _639 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _643 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _668 = _600 + _386;
        float _669 = _604 + _387;
        float _670 = _608 + _388;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_386, _387, _388), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3372 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_386, _387, _388), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3405 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_386, _387, _388), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3438 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _955 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _959 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _982 = _600 + _386;
        float _983 = _604 + _387;
        float _984 = _608 + _388;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_386, _387, _388), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3501 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_386, _387, _388), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3534 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_386, _387, _388), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3567 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _547 * 0.5;
    float _1289 = _548 * 0.5;
    float _1290 = _549 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _389);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_549, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547));
        float _1420 = fma(_549, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547));
        float _1423 = fma(_549, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1451 = frontier_phi_14_12_ladder;
        }
        float _1655;
        if (_1420 > 0.0)
        {
            _1655 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1655 = frontier_phi_23_19_ladder;
        }
        float _1898;
        if (_1423 > 0.0)
        {
            _1898 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1898 = frontier_phi_35_30_ladder;
        }
        float _1900 = isnan(_1655) ? _1451 : (isnan(_1451) ? _1655 : min(_1451, _1655));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1417) + _1406;
        float _1906 = (_1901 * _1420) + _1410;
        float _1907 = (_1901 * _1423) + _1414;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_13_35_ladder = _2031.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2031.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2031.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_13_35_ladder_2;
        _1441 = frontier_phi_13_35_ladder_1;
        _1443 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_547, _548, _549), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _389);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_549, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547));
        float _1519 = fma(_549, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547));
        float _1522 = fma(_549, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547));
        float _1660;
        if (_1516 > 0.0)
        {
            _1660 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1660 = frontier_phi_25_21_ladder;
        }
        float _1925;
        if (_1519 > 0.0)
        {
            _1925 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1925 = frontier_phi_37_32_ladder;
        }
        float _2130;
        if (_1522 > 0.0)
        {
            _2130 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2130 = frontier_phi_46_43_ladder;
        }
        float _2132 = isnan(_1925) ? _1660 : (isnan(_1660) ? _1925 : min(_1660, _1925));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1516) + _1505;
        float _2138 = (_2133 * _1519) + _1509;
        float _2139 = (_2133 * _1522) + _1513;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2140;
        float _2143 = _2140 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2139 > _2143) || ((_2139 < _2141) || ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 < _2141) || (_2137 > _2143))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2139, cbModelParam._m0[17u].z, fma(_2138, cbModelParam._m0[17u].y, _2137 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2139, cbModelParam._m0[18u].z, fma(_2138, cbModelParam._m0[18u].y, _2137 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2139, cbModelParam._m0[19u].z, fma(_2138, cbModelParam._m0[19u].y, _2137 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_22_46_ladder = _2338.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2338.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2338.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_22_46_ladder_2;
        _1543 = frontier_phi_22_46_ladder_1;
        _1545 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_547, _548, _549), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1557 = ((((1.0 - _568) * ((_555 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_568 * _555)) * _539;
    float _1558 = _1557 * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1559 = _1557 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1560 = _1557 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    uvec4 _1579 = floatBitsToUint(cbInstanceData._m0[_514 + 5u]);
    uint _1581 = _1579.x * 14u;
    uint _1582 = _1581 + 13u;
    float _1589 = _539 + (-1.0);
    float _1594 = (cbLight._m0[_1582].x * _1589) + 1.0;
    float _1595 = (cbLight._m0[_1582].y * _1589) + 1.0;
    float _1596 = (cbLight._m0[_1582].z * _1589) + 1.0;
    float _1597 = (cbLight._m0[_1582].w * _1589) + 1.0;
    uint _1598 = _1581 + 5u;
    float _1604 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1608 = _1581 + 4u;
    float _1614 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1618 = _1581 | 1u;
    float _1629 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_386, _387, _388));
    float _1632 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_386, _387, _388));
    float _3703 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _3714 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1637 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1639 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1646 = ((cbLight._m0[_1598].x * _1604) * _1639) + ((cbLight._m0[_1608].x * _1614) * _1637);
    float _1647 = ((_1604 * cbLight._m0[_1598].y) * _1639) + ((_1614 * cbLight._m0[_1608].y) * _1637);
    float _1648 = ((_1604 * cbLight._m0[_1598].z) * _1639) + ((_1614 * cbLight._m0[_1608].z) * _1637);
    uvec4 _1652 = floatBitsToUint(cbLight._m0[_1581 + 12u]);
    bool _1654 = _1652.x == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1654)
    {
        _1665 = _1646;
        _1667 = _1647;
        _1669 = _1648;
    }
    else
    {
        uint _1673 = _1581 + 6u;
        float _1689 = (dot(vec3(cbLight._m0[_1581 + 2u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3725 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1692 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1665 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1646;
        _1667 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1647;
        _1669 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1648;
    }
    bool _1672 = _1652.y == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1672)
    {
        _1710 = _1665;
        _1712 = _1667;
        _1714 = _1669;
    }
    else
    {
        uint _1869 = _1581 + 7u;
        float _1885 = (dot(vec3(cbLight._m0[_1581 + 3u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3741 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1888 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1710 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1665;
        _1712 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1667;
        _1714 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1669;
    }
    uint _1717 = _1581 + 8u;
    float _1730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _389) * 0.949999988079071044921875);
    float _1731 = _1730 * _1730;
    float _1732 = cbLight._m0[_1581].x + _466;
    float _1733 = cbLight._m0[_1581].y + _467;
    float _1734 = cbLight._m0[_1581].z + _468;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1739 = _1738 * _1732;
    float _1740 = _1738 * _1733;
    float _1741 = _1738 * _1734;
    float _1742 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1581].xyz));
    float _3757 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _1746 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1747 = dot(vec3(_386, _387, _388), vec3(_1739, _1740, _1741));
    float _3779 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1739, _1740, _1741));
    float _3790 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1731 * _1731;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1770 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1771 = 1.0 - _1731;
    float _1782 = (0.5 / (((_1746 * ((_1745 * _1771) + _1731)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1771) + _1731) * _1745))) * _1745;
    float _3801 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1784 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    uint _1795 = _1581 + 9u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _389) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1618].x + _466;
    float _1809 = cbLight._m0[_1618].y + _467;
    float _1810 = cbLight._m0[_1618].z + _468;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1618].xyz));
    float _3812 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1822 = dot(vec3(_386, _387, _388), vec3(_1815, _1816, _1817));
    float _3823 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1815, _1816, _1817));
    float _3834 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1807 * _1807;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1807;
    float _1854 = (0.5 / (((_1746 * ((_1821 * _1844) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1844) + _1807) * _1821))) * _1821;
    float _3845 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    float _1866 = (((_1843 * cbLight._m0[_1795].x) * _1856) * _1604) + (((_1770 * cbLight._m0[_1717].x) * _1784) * _1614);
    float _1867 = (((_1843 * cbLight._m0[_1795].y) * _1856) * _1604) + (((_1770 * cbLight._m0[_1717].y) * _1784) * _1614);
    float _1868 = (((_1843 * cbLight._m0[_1795].z) * _1856) * _1604) + (((_1770 * cbLight._m0[_1717].z) * _1784) * _1614);
    float _1930;
    float _1932;
    float _1934;
    if (_1654)
    {
        _1930 = _1866;
        _1932 = _1867;
        _1934 = _1868;
    }
    else
    {
        uint _1936 = _1581 + 2u;
        uint _1940 = _1581 + 10u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _389) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _466;
        float _1957 = cbLight._m0[_1936].y + _467;
        float _1958 = cbLight._m0[_1936].z + _468;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1936].xyz));
        float _3856 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1970 = dot(vec3(_386, _387, _388), vec3(_1963, _1964, _1965));
        float _3867 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _3878 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1992 = 1.0 - _1955;
        float _2002 = (0.5 / (((_1746 * ((_1969 * _1992) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1992) + _1955) * _1969))) * _1969;
        float _3889 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2004 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2005 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1930 = (((_1991 * cbLight._m0[_1940].x) * _2004) * _2005) + _1866;
        _1932 = (((_1991 * cbLight._m0[_1940].y) * _2004) * _2005) + _1867;
        _1934 = (((_1991 * cbLight._m0[_1940].z) * _2004) * _2005) + _1868;
    }
    float _2040;
    float _2042;
    float _2044;
    if (_1672)
    {
        _2040 = _1930;
        _2042 = _1932;
        _2044 = _1934;
    }
    else
    {
        uint _2051 = _1581 + 3u;
        uint _2055 = _1581 + 11u;
        float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _389) * 0.949999988079071044921875);
        float _2070 = _2069 * _2069;
        float _2071 = cbLight._m0[_2051].x + _466;
        float _2072 = cbLight._m0[_2051].y + _467;
        float _2073 = cbLight._m0[_2051].z + _468;
        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
        float _2078 = _2077 * _2071;
        float _2079 = _2077 * _2072;
        float _2080 = _2077 * _2073;
        float _2081 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_2051].xyz));
        float _3905 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2085 = dot(vec3(_386, _387, _388), vec3(_2078, _2079, _2080));
        float _3916 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2078, _2079, _2080));
        float _3927 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2093 = _2070 * _2070;
        float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
        float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2107 = 1.0 - _2070;
        float _2117 = (0.5 / (((_1746 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2107) + _2070) * _2084))) * _2084;
        float _3938 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _2040 = (((_2106 * cbLight._m0[_2055].x) * _2119) * _2120) + _1930;
        _2042 = (((_2106 * cbLight._m0[_2055].y) * _2119) * _2120) + _1932;
        _2044 = (((_2106 * cbLight._m0[_2055].z) * _2119) * _2120) + _1934;
    }
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    if (_1579.y == 0u)
    {
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2195;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2195;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2195;
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.x;
        uint _2222 = uint((float(_2210.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2211))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2211)));
        float _2232 = (log2(_2198 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2233 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        uint _2236 = uint(isnan(14.0) ? _2233 : (isnan(_2233) ? 14.0 : min(_2233, 14.0)));
        uvec4 _2241 = texelFetch(g_lightClusterGridBuffer, int(((_2236 << 2u) + (_2222 << 6u)) >> 2u));
        uint _2242 = _2241.x;
        uint _2243 = _2210.z;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((((1u << ((_2243 >> 4u) & 15u)) + 4294967295u) & _2242) == 0u) || ((_2243 & 240u) == 0u))
        {
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
        }
        else
        {
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            uint _2494 = 0u;
            uint _2503;
            bool _2504;
            for (;;)
            {
                _2503 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                _2504 = _2503 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2504)
                {
                    frontier_phi_61_pred = _2488;
                    frontier_phi_61_pred_1 = _2493;
                    frontier_phi_61_pred_2 = _2492;
                    frontier_phi_61_pred_3 = _2491;
                    frontier_phi_61_pred_4 = _2490;
                    frontier_phi_61_pred_5 = _2489;
                }
                else
                {
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    uint _2618;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2503;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2622 = uint(findLSB(_2618)) + (_2494 << 5u);
                        uint _2619 = (_2618 + 4294967295u) & _2618;
                        uint _2624 = _2622 * 48u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2644 = (_2622 * 48u) + 4u;
                        vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2663 = (_2622 * 48u) + 8u;
                        vec3 _2674 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x));
                        float _2678 = _2638.x - _2196;
                        float _2679 = _2638.y - _2197;
                        float _2680 = _2638.z - _2198;
                        float _2681 = dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680));
                        float _2684 = inversesqrt(_2681);
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2688 = dot(vec3(_495, _498, _501), vec3(_2685, _2686, _2687));
                        float _2693 = 1.0 - (_2681 * _2638.w);
                        float _3964 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2695 = sqrt(_2681) * _2657.w;
                        float _2698 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                        float _2699 = _2698 * _2698;
                        float _2702 = ((1.0 - _2699) * _2688) + _2699;
                        float _2705 = _2695 * _2695;
                        float _2709 = ((isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))) * _2694) / ((_2705 * 0.699999988079071044921875) + 1.0);
                        float _2713 = (-0.0) - _2196;
                        float _2714 = (-0.0) - _2197;
                        float _2715 = (-0.0) - _2198;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2730 = exp2(log2(1.0 / ((_2705 * 3.5) + 5.0)) * 0.25);
                        float _2731 = 1.0 - _555;
                        float _2738 = sqrt(1.0 - ((1.0 - (_2731 * _2731)) * (1.0 - (_2730 * _2730))));
                        float _2739 = _2738 * _2738;
                        float _2740 = _2739 * _2739;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2751 = dot(vec3(_495, _498, _501), vec3(_2720, _2721, _2722));
                        float _3980 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2755 = dot(vec3(_495, _498, _501), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743));
                        float _3991 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2762 = ((_2758 * _2758) * (_2740 + (-1.0))) + 1.0;
                        float _2763 = _2698 * _2739;
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2688) + _2764;
                        float _4002 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2769 = 1.0 - _2739;
                        float _2779 = (0.5 / (((_2768 * ((_2754 * _2769) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2768 * _2769) + _2739) * _2754))) * _2768;
                        float _4013 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2790 = (((_2740 * 3.1415927410125732421875) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) / ((_2762 * _2762) * ((_2705 * 2.1991131305694580078125) + 3.141590118408203125))) * _2694;
                        _2547 = (_2709 * _2657.x) + _2615;
                        _2548 = (_2709 * _2657.y) + _2616;
                        _2549 = (_2709 * _2657.z) + _2617;
                        _2544 = (_2790 * _2674.x) + _2612;
                        _2545 = (_2790 * _2674.y) + _2613;
                        _2546 = (_2790 * _2674.z) + _2614;
                        if (_2619 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2619;
                        }
                    }
                    frontier_phi_61_pred = _2544;
                    frontier_phi_61_pred_1 = _2549;
                    frontier_phi_61_pred_2 = _2548;
                    frontier_phi_61_pred_3 = _2547;
                    frontier_phi_61_pred_4 = _2546;
                    frontier_phi_61_pred_5 = _2545;
                }
                _2344 = frontier_phi_61_pred;
                _2354 = frontier_phi_61_pred_1;
                _2352 = frontier_phi_61_pred_2;
                _2350 = frontier_phi_61_pred_3;
                _2348 = frontier_phi_61_pred_4;
                _2346 = frontier_phi_61_pred_5;
                uint _2495 = _2494 + 1u;
                if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2488 = _2344;
                    _2489 = _2346;
                    _2490 = _2348;
                    _2491 = _2350;
                    _2492 = _2352;
                    _2493 = _2354;
                    _2494 = _2495;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
        }
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.z;
        uint _2360 = (_2358 >> 8u) & 15u;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((4294967295u << _2360) & _2242) == 0u)
        {
            _2456 = _2343;
            _2458 = _2345;
            _2460 = _2347;
            _2462 = _2349;
            _2464 = _2351;
            _2466 = _2353;
        }
        else
        {
            float _2481 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
            float _2482 = _2481 * _2196;
            float _2483 = _2481 * _2197;
            float _2484 = _2481 * _2198;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2360 < ((_2358 >> 12u) & 15u))
            {
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2595 = _2343;
                float _2596 = _2345;
                float _2597 = _2347;
                float _2598 = _2349;
                float _2599 = _2351;
                float _2600 = _2353;
                uint _2601 = _2360;
                uint _2610;
                bool _2611;
                for (;;)
                {
                    _2610 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                    _2611 = _2610 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2611)
                    {
                        frontier_phi_67_pred = _2598;
                        frontier_phi_67_pred_1 = _2599;
                        frontier_phi_67_pred_2 = _2600;
                        frontier_phi_67_pred_3 = _2597;
                        frontier_phi_67_pred_4 = _2596;
                        frontier_phi_67_pred_5 = _2595;
                    }
                    else
                    {
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        uint _2814 = _2610;
                        uint _2815;
                        vec4 _2840;
                        float _2841;
                        vec4 _2856;
                        vec3 _2868;
                        vec4 _2884;
                        vec4 _2900;
                        float _2947;
                        bool _2948;
                        for (;;)
                        {
                            uint _2825 = ((_2601 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2814));
                            _2815 = (_2814 + 4294967295u) & _2814;
                            uint _2827 = _2825 * 40u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            _2841 = _2840.w;
                            uint _2843 = (_2825 * 40u) + 4u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2825 * 40u) + 8u;
                            _2868 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x));
                            uint _2871 = (_2825 * 40u) + 16u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2825 * 40u) + 20u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2825 * 40u) + 24u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2922 = (_2825 * 40u) + 28u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2947 = fma(_2198, _2935.z, fma(_2197, _2935.y, _2935.x * _2196)) + _2935.w;
                            _2948 = !((fma(_2198, _2916.z, fma(_2197, _2916.y, _2916.x * _2196)) + _2916.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2948)
                            {
                                float _2975 = _2840.x - _2196;
                                float _2976 = _2840.y - _2197;
                                float _2977 = _2840.z - _2198;
                                float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                                float _2981 = inversesqrt(_2978);
                                float _2982 = _2981 * _2975;
                                float _2983 = _2981 * _2976;
                                float _2984 = _2981 * _2977;
                                float _2988 = 1.0 - (_2978 / (_2841 * _2841));
                                float _4024 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2993 = sqrt(_2978) * _2856.w;
                                float _2995 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                                float _2996 = _2995 * _2995;
                                float _2999 = ((1.0 - _2996) * dot(vec3(_2982, _2983, _2984), vec3(_495, _498, _501))) + _2996;
                                float _3002 = _2993 * _2993;
                                float _3006 = (fma(_2198, _2884.z, fma(_2197, _2884.y, _2884.x * _2196)) + _2884.w) / _2947;
                                float _3007 = (fma(_2198, _2900.z, fma(_2197, _2900.y, _2900.x * _2196)) + _2900.w) / _2947;
                                float _3011 = 1.0 - dot(vec2(_3006, _3007), vec2(_3006, _3007));
                                float _4040 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3013 = _3012 * (((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2989) / ((_3002 * 0.699999988079071044921875) + 1.0));
                                float _3025 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                                float _3026 = 1.0 - _555;
                                float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                                float _3034 = _3033 * _3033;
                                float _3035 = _3034 * _3034;
                                float _3036 = _2982 - _2482;
                                float _3037 = _2983 - _2483;
                                float _3038 = _2984 - _2484;
                                float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                                float _3046 = dot(vec3(_495, _498, _501), vec3((-0.0) - _2482, (-0.0) - _2483, (-0.0) - _2484));
                                float _4051 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3049 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3050 = dot(vec3(_495, _498, _501), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                                float _4062 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3053 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                                float _3058 = _2995 * _3034;
                                float _3059 = _3058 * _3058;
                                float _3065 = ((1.0 - _3059) * dot(vec3(_495, _498, _501), vec3(_2982, _2983, _2984))) + _3059;
                                float _4073 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3067 = 1.0 - _3034;
                                float _3077 = (0.5 / (((_3066 * ((_3049 * _3067) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3034) * _3049))) * _3066;
                                float _4084 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3087 = (_3012 * _2989) * (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_3057 * _3057) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3087 * _2868.x;
                                frontier_phi_73_pred_1 = _3087 * _2868.y;
                                frontier_phi_73_pred_2 = _3013 * _2856.z;
                                frontier_phi_73_pred_3 = _3013 * _2856.y;
                                frontier_phi_73_pred_4 = _3013 * _2856.x;
                                frontier_phi_73_pred_5 = _3087 * _2868.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3091 = frontier_phi_73_pred;
                            _3092 = frontier_phi_73_pred_1;
                            _3096 = frontier_phi_73_pred_2;
                            _3095 = frontier_phi_73_pred_3;
                            _3094 = frontier_phi_73_pred_4;
                            _3093 = frontier_phi_73_pred_5;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            _2795 = _3091 + _2808;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            if (_2815 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2815;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2798;
                        frontier_phi_67_pred_1 = _2799;
                        frontier_phi_67_pred_2 = _2800;
                        frontier_phi_67_pred_3 = _2797;
                        frontier_phi_67_pred_4 = _2796;
                        frontier_phi_67_pred_5 = _2795;
                    }
                    _2463 = frontier_phi_67_pred;
                    _2465 = frontier_phi_67_pred_1;
                    _2467 = frontier_phi_67_pred_2;
                    _2461 = frontier_phi_67_pred_3;
                    _2459 = frontier_phi_67_pred_4;
                    _2457 = frontier_phi_67_pred_5;
                    uint _2602 = _2601 + 1u;
                    if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2595 = _2457;
                        _2596 = _2459;
                        _2597 = _2461;
                        _2598 = _2463;
                        _2599 = _2465;
                        _2600 = _2467;
                        _2601 = _2602;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2465;
                frontier_phi_55_56_ladder_1 = _2467;
                frontier_phi_55_56_ladder_2 = _2463;
                frontier_phi_55_56_ladder_3 = _2461;
                frontier_phi_55_56_ladder_4 = _2459;
                frontier_phi_55_56_ladder_5 = _2457;
            }
            else
            {
                frontier_phi_55_56_ladder = _2351;
                frontier_phi_55_56_ladder_1 = _2353;
                frontier_phi_55_56_ladder_2 = _2349;
                frontier_phi_55_56_ladder_3 = _2347;
                frontier_phi_55_56_ladder_4 = _2345;
                frontier_phi_55_56_ladder_5 = _2343;
            }
            _2456 = frontier_phi_55_56_ladder_5;
            _2458 = frontier_phi_55_56_ladder_4;
            _2460 = frontier_phi_55_56_ladder_3;
            _2462 = frontier_phi_55_56_ladder_2;
            _2464 = frontier_phi_55_56_ladder;
            _2466 = frontier_phi_55_56_ladder_1;
        }
        float _2471 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
        _2255 = (_2471 * _2462) + _1710;
        _2257 = (_2471 * _2464) + _1712;
        _2259 = (_2471 * _2466) + _1714;
        _2261 = ((_2456 * 0.039999999105930328369140625) * _2471) + _2040;
        _2263 = ((_2458 * 0.039999999105930328369140625) * _2471) + _2042;
        _2265 = ((_2460 * 0.039999999105930328369140625) * _2471) + _2044;
    }
    else
    {
        _2255 = _1710;
        _2257 = _1712;
        _2259 = _1714;
        _2261 = _2040;
        _2263 = _2042;
        _2265 = _2044;
    }
    float _4100 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4111 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4122 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    uint _2285 = _514 + 6u;
    float _2293 = _474 / cbSceneParam._m0[86u].x;
    float _2294 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2308 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2310 = _2308.x;
    float _2311 = _2308.y;
    float _2312 = _2308.z;
    float _2313 = _2308.w;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2368 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2369 = _2368 / _408;
        float _2380 = _2369 * _459;
        float _2381 = _460 * _2369;
        float _2382 = (-0.0) - _2381;
        float _2384 = _2369 * _461;
        float _2386 = (cbSceneParam._m0[77u].w * _2382) / _2368;
        float _2387 = _2386 + cbSceneParam._m0[79u].w;
        float _2388 = cbSceneParam._m0[79u].w - _2381;
        float _2394 = sqrt(((_2380 * _2380) + (_2381 * _2381)) + (_2384 * _2384));
        float _2397 = (1.0 - (cbSceneParam._m0[77u].w / _2368)) * _2394;
        float _2402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2382 - _2386) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2387 > 0.0) ? exp2(_2402 * _2387) : (2.0 - exp2(_2404 * _2387))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2397;
        }
        else
        {
            float _2517 = 1.0 / cbSceneParam._m0[80u].x;
            float _2518 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : max(_2387, _2388));
            float _2519 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : min(_2387, _2388));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            _2557 = ((abs(_2394 / _2382) * cbSceneParam._m0[80u].y) * ((((_2528 - _2529) * 2.0) - ((exp2(_2402 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)))) - exp2(_2402 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0))))) * _2517)) - ((exp2(_2404 * _2528) - exp2(_2404 * _2529)) * _2517))) + (_2397 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2313);
        _2406 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2310;
        _2408 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2311;
        _2410 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2312;
        _2412 = _2568 * _2313;
    }
    else
    {
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
        _2412 = _2313;
    }
    float _2424 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2425 = _2424 == 3.0;
    float _2426 = log2(_2412);
    float _2433 = exp2(_2426 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2255 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _539))) + ((_2261 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2434 = exp2(_2426 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2257 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _539))) + ((_2263 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2435 = exp2(_2426 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2259 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _539))) + ((_2265 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2444 = (_2424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2444 * (_2425 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.y = _2444 * (_2425 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.z = _2444 * (_2425 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.w = cbInstanceData._m0[_2285].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2285].w;
}


