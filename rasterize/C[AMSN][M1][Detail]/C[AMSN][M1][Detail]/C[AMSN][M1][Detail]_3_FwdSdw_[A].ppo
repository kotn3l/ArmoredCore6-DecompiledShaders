#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _852;
float _3503;
float _3504;
float _3505;
float _3506;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3515 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))));
    float _269 = _251.z * cbMtdParam._m0[12u].y;
    float _272 = fma(_268, _196 * NORMAL.x, fma(_261, _203 * TANGENT.x, (_189 * _181) * _259));
    float _275 = fma(_268, _196 * NORMAL.y, fma(_261, _203 * TANGENT.y, (_189 * _182) * _259));
    float _278 = fma(_268, _196 * NORMAL.z, fma(_261, _203 * TANGENT.z, (_189 * _183) * _259));
    float _282 = inversesqrt(dot(vec3(_272, _275, _278), vec3(_272, _275, _278)));
    float _283 = _282 * _272;
    float _284 = _282 * _275;
    float _285 = _282 * _278;
    float _3526 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _286 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3548 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3559 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _305 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    vec4 _372 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _374 = _372.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _531 = sqrt(((_358 * _358) + (_359 * _359)) + (_360 * _360));
        float _537 = (cbMatDynParam._m0[5u].x * _531) + cbMatDynParam._m0[5u].y;
        float _3570 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
        float _538 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _542 = (cbMatDynParam._m0[5u].z * _531) + cbMatDynParam._m0[5u].w;
        float _3581 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) - _538)) + _538) < ((_374 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_285, cbSceneParam._m0[5u].z, fma(_284, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _283));
    float _410 = fma(_285, cbSceneParam._m0[6u].z, fma(_284, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _283));
    float _413 = fma(_285, cbSceneParam._m0[7u].z, fma(_284, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _283));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = _426 + 9u;
    uint _428 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_428].z;
    float _3592 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _451 = _448.x * TEXCOORD_5.w;
    float _452 = dot(vec3(_283, _284, _285), vec3(_365, _366, _367));
    float _455 = _452 * 2.0;
    float _459 = (_455 * _283) - _365;
    float _460 = (_455 * _284) - _366;
    float _461 = (_455 * _285) - _367;
    float _465 = abs(dot(vec3(_365, _366, _367), vec3(_283, _284, _285)));
    float _3625 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = sqrt(_286);
    float _480 = exp2((_467 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_467 * 3.0));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _851;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _576 = fma(_520, cbModelParam._m0[26u].z, fma(_516, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _512));
        float _580 = fma(_520, cbModelParam._m0[27u].z, fma(_516, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _512));
        float _584 = fma(_520, cbModelParam._m0[28u].z, fma(_516, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _512));
        float _609 = _512 + _283;
        float _610 = _516 + _284;
        float _611 = _520 + _285;
        float _621 = fma(_611, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) - _576;
        float _622 = fma(_611, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) - _580;
        float _623 = fma(_611, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) - _584;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_576 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_580 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[34u].z) + ((((((_584 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _679 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_645.x + (-0.5));
        float _681 = _679 * (_645.y + (-0.5));
        float _682 = _679 * (_645.z + (-0.5));
        float _689 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_652.x + (-0.5));
        float _691 = _689 * (_652.y + (-0.5));
        float _692 = _689 * (_652.z + (-0.5));
        float _699 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_659.x + (-0.5));
        float _701 = _699 * (_659.y + (-0.5));
        float _702 = _699 * (_659.z + (-0.5));
        float _709 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_666.x + (-0.5));
        float _711 = _709 * (_666.y + (-0.5));
        float _712 = _709 * (_666.z + (-0.5));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = _680 * 0.5;
        float _717 = _690 * 0.5;
        float _718 = _700 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _733 = (dot(vec3(_283, _284, _285), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _743 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3673 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_745 + 1.0))) + _750) * _713;
        float _760 = _681 * 0.5;
        float _761 = _691 * 0.5;
        float _762 = _701 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_283, _284, _285), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3706 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_787 + 1.0))) + _792) * _714;
        float _802 = _682 * 0.5;
        float _803 = _692 * 0.5;
        float _804 = _702 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_283, _284, _285), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3739 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_829 + 1.0))) + _834) * _715;
        _851 = _682;
        _853 = _681;
        _854 = _680;
        _855 = _692;
        _856 = _691;
        _857 = _690;
        _858 = _702;
        _859 = _701;
        _860 = _700;
        _861 = _715;
        _862 = _714;
        _863 = _713;
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
    }
    else
    {
        _851 = _852;
        _853 = _852;
        _854 = _852;
        _855 = _852;
        _856 = _852;
        _857 = _852;
        _858 = _852;
        _859 = _852;
        _860 = _852;
        _861 = _852;
        _862 = _852;
        _863 = _852;
        _864 = 0.0;
        _865 = 0.0;
        _866 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_520, cbModelParam._m0[30u].z, fma(_516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _512));
        float _899 = fma(_520, cbModelParam._m0[31u].z, fma(_516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _512));
        float _903 = fma(_520, cbModelParam._m0[32u].z, fma(_516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _512));
        float _926 = _512 + _283;
        float _927 = _516 + _284;
        float _928 = _520 + _285;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_283, _284, _285), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3802 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_283, _284, _285), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3835 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_283, _284, _285), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3868 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _852;
        _1165 = _852;
        _1166 = _852;
        _1167 = _852;
        _1168 = _852;
        _1169 = _852;
        _1170 = _852;
        _1171 = _852;
        _1172 = _852;
        _1173 = _852;
        _1174 = _852;
        _1175 = _852;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _459 * 0.5;
    float _1233 = _460 * 0.5;
    float _1234 = _461 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_851, _855, _858, _861));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_853, _856, _859, _862));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _857, _860, _863));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _286);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_520, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_520, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_520, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1364 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1367 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1395 = frontier_phi_17_15_ladder;
        }
        float _1568;
        if (_1364 > 0.0)
        {
            _1568 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1568 = frontier_phi_26_22_ladder;
        }
        float _1863;
        if (_1367 > 0.0)
        {
            _1863 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1863 = frontier_phi_38_33_ladder;
        }
        float _1865 = isnan(_1568) ? _1395 : (isnan(_1395) ? _1568 : min(_1395, _1568));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1361) + _1350;
        float _1871 = (_1866 * _1364) + _1354;
        float _1872 = (_1866 * _1367) + _1358;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1875 = (-1.0) - _1873;
        float _1877 = _1873 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1872 > _1877) || ((_1872 < _1875) || ((_1871 > _1877) || ((_1871 < _1875) || ((_1870 < _1875) || (_1870 > _1877))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1872, cbModelParam._m0[9u].z, fma(_1871, cbModelParam._m0[9u].y, _1870 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1872, cbModelParam._m0[10u].z, fma(_1871, cbModelParam._m0[10u].y, _1870 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1872, cbModelParam._m0[11u].z, fma(_1871, cbModelParam._m0[11u].y, _1870 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_16_38_ladder = _2017.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2017.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2017.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_16_38_ladder_2;
        _1385 = frontier_phi_16_38_ladder_1;
        _1387 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _286);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_520, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_520, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_520, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1463 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1466 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1573;
        if (_1460 > 0.0)
        {
            _1573 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1573 = frontier_phi_28_24_ladder;
        }
        float _1890;
        if (_1463 > 0.0)
        {
            _1890 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1890 = frontier_phi_40_35_ladder;
        }
        float _2217;
        if (_1466 > 0.0)
        {
            _2217 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2217 = frontier_phi_50_47_ladder;
        }
        float _2219 = isnan(_1890) ? _1573 : (isnan(_1573) ? _1890 : min(_1573, _1890));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1460) + _1449;
        float _2225 = (_2220 * _1463) + _1453;
        float _2226 = (_2220 * _1466) + _1457;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_25_50_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_25_50_ladder_2;
        _1487 = frontier_phi_25_50_ladder_1;
        _1489 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1501 = ((((1.0 - _480) * ((_467 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_480 * _467)) * _451;
    float _1502 = _1501 * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1503 = _1501 * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1504 = _1501 * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1507 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1560 = _1547 / _1559;
    float _1561 = _1551 / _1559;
    float _1562 = _1555 / _1559;
    float _1709;
    float _1710;
    float _1711;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1589 = ((uint(_1562 > cbSceneParam._m0[59u].y) + uint(_1562 > cbSceneParam._m0[59u].x)) + uint(_1562 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1590 = _1589 + 43u;
        uint _1598 = _1589 + 44u;
        uint _1606 = _1589 + 45u;
        uint _1614 = _1589 + 46u;
        float _1625 = fma(_1559, cbSceneParam._m0[_1590].w, fma(_1555, cbSceneParam._m0[_1590].z, fma(_1551, cbSceneParam._m0[_1590].y, _1547 * cbSceneParam._m0[_1590].x)));
        float _1629 = fma(_1559, cbSceneParam._m0[_1598].w, fma(_1555, cbSceneParam._m0[_1598].z, fma(_1551, cbSceneParam._m0[_1598].y, _1547 * cbSceneParam._m0[_1598].x)));
        float _1637 = fma(_1559, cbSceneParam._m0[_1614].w, fma(_1555, cbSceneParam._m0[_1614].z, fma(_1551, cbSceneParam._m0[_1614].y, _1547 * cbSceneParam._m0[_1614].x)));
        float _1642 = cbSceneParam._m0[33u].z * _1637;
        float _1644 = cbSceneParam._m0[33u].w * _1637;
        float _1647 = fma(_1559, cbSceneParam._m0[_1606].w, fma(_1555, cbSceneParam._m0[_1606].z, fma(_1551, cbSceneParam._m0[_1606].y, _1547 * cbSceneParam._m0[_1606].x))) / _1637;
        float _1695 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
        float _3994 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1702 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 + _1625) / _1637, (_1644 + _1629) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 + _1625) / _1637, (_1629 - _1642) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1642) / _1637, (_1629 - _1644) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1644) / _1637, (_1642 + _1629) / _1637), _1647), 0.0)).x), vec4(0.25)));
        _1709 = 1.0 - (_1702 * cbSceneParam._m0[34u].x);
        _1710 = 1.0 - (_1702 * cbSceneParam._m0[34u].y);
        _1711 = 1.0 - (_1702 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1709 = 1.0;
        _1710 = 1.0;
        _1711 = 1.0;
    }
    float _1775;
    float _1777;
    float _1779;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1763 = fma(_1559, cbSceneParam._m0[63u].w, fma(_1555, cbSceneParam._m0[63u].z, fma(_1551, cbSceneParam._m0[63u].y, _1547 * cbSceneParam._m0[63u].x)));
        float _1764 = fma(_1559, cbSceneParam._m0[60u].w, fma(_1555, cbSceneParam._m0[60u].z, fma(_1551, cbSceneParam._m0[60u].y, _1547 * cbSceneParam._m0[60u].x))) / _1763;
        float _1765 = fma(_1559, cbSceneParam._m0[61u].w, fma(_1555, cbSceneParam._m0[61u].z, fma(_1551, cbSceneParam._m0[61u].y, _1547 * cbSceneParam._m0[61u].x))) / _1763;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1764 >= cbSceneParam._m0[64u].x) && (_1765 >= cbSceneParam._m0[64u].y)) && (_1764 <= cbSceneParam._m0[64u].z)) && (_1765 <= cbSceneParam._m0[64u].w))
        {
            float _1903 = fma(_1559, cbSceneParam._m0[62u].w, fma(_1555, cbSceneParam._m0[62u].z, fma(_1551, cbSceneParam._m0[62u].y, _1547 * cbSceneParam._m0[62u].x))) / _1763;
            float _1907 = isnan(cbSceneParam._m0[41u].w) ? _1903 : (isnan(_1903) ? cbSceneParam._m0[41u].w : max(_1903, cbSceneParam._m0[41u].w));
            float _1950 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
            float _4010 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
            float _1957 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1764, cbSceneParam._m0[33u].w + _1765), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1764, _1765 - cbSceneParam._m0[33u].z), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].z, _1765 - cbSceneParam._m0[33u].w), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1765), _1907), 0.0)).x), vec4(0.25)));
            float _1961 = 1.0 - (_1957 * cbSceneParam._m0[34u].x);
            float _1962 = 1.0 - (_1957 * cbSceneParam._m0[34u].y);
            float _1963 = 1.0 - (_1957 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1963) ? _1711 : (isnan(_1711) ? _1963 : min(_1711, _1963));
            frontier_phi_37_36_ladder_1 = isnan(_1962) ? _1710 : (isnan(_1710) ? _1962 : min(_1710, _1962));
            frontier_phi_37_36_ladder_2 = isnan(_1961) ? _1709 : (isnan(_1709) ? _1961 : min(_1709, _1961));
        }
        else
        {
            frontier_phi_37_36_ladder = _1711;
            frontier_phi_37_36_ladder_1 = _1710;
            frontier_phi_37_36_ladder_2 = _1709;
        }
        _1775 = frontier_phi_37_36_ladder_2;
        _1777 = frontier_phi_37_36_ladder_1;
        _1779 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1775 = _1709;
        _1777 = _1710;
        _1779 = _1711;
    }
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _451 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1822 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1826 = _1786 | 1u;
    float _1837 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_283, _284, _285));
    float _1840 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_283, _284, _285));
    float _4046 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _4057 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1845 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1847 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1854 = ((cbLight._m0[_1803].x * _1809) * _1847) + (((cbLight._m0[_1813].x * _1775) * _1822) * _1845);
    float _1855 = ((_1809 * cbLight._m0[_1803].y) * _1847) + (((cbLight._m0[_1813].y * _1777) * _1822) * _1845);
    float _1856 = ((_1809 * cbLight._m0[_1803].z) * _1847) + (((cbLight._m0[_1813].z * _1779) * _1822) * _1845);
    uvec4 _1860 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1862 = _1860.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1862)
    {
        _1964 = _1854;
        _1966 = _1855;
        _1968 = _1856;
    }
    else
    {
        uint _1972 = _1786 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4068 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1991 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1854;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1855;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1856;
    }
    bool _1971 = _1860.y == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1971)
    {
        _2026 = _1964;
        _2028 = _1966;
        _2030 = _1968;
    }
    else
    {
        uint _2188 = _1786 + 7u;
        float _2204 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4084 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2207 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2026 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _1964;
        _2028 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _1966;
        _2030 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _1968;
    }
    uint _2033 = _1786 + 8u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _286) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1786].x + _365;
    float _2049 = cbLight._m0[_1786].y + _366;
    float _2050 = cbLight._m0[_1786].z + _367;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1786].xyz));
    float _4100 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2062 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2063 = dot(vec3(_283, _284, _285), vec3(_2055, _2056, _2057));
    float _4122 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_2055, _2056, _2057));
    float _4133 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2047 * _2047;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2087 = 1.0 - _2047;
    float _2098 = (0.5 / (((_2062 * ((_2061 * _2087) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2087) + _2047) * _2061))) * _2061;
    float _4144 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2100 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    uint _2114 = _1786 + 9u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _286) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1826].x + _365;
    float _2128 = cbLight._m0[_1826].y + _366;
    float _2129 = cbLight._m0[_1826].z + _367;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1826].xyz));
    float _4155 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2141 = dot(vec3(_283, _284, _285), vec3(_2134, _2135, _2136));
    float _4166 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2134, _2135, _2136));
    float _4177 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2126 * _2126;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2162 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2163 = 1.0 - _2126;
    float _2173 = (0.5 / (((_2062 * ((_2140 * _2163) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2163) + _2126) * _2140))) * _2140;
    float _4188 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    float _2185 = (((_2162 * cbLight._m0[_2114].x) * _2175) * _1809) + ((((cbLight._m0[_2033].x * _1775) * _2086) * _2100) * _1822);
    float _2186 = (((_2162 * cbLight._m0[_2114].y) * _2175) * _1809) + ((((cbLight._m0[_2033].y * _1777) * _2086) * _2100) * _1822);
    float _2187 = (((_2162 * cbLight._m0[_2114].z) * _2175) * _1809) + ((((cbLight._m0[_2033].z * _1779) * _2086) * _2100) * _1822);
    float _2243;
    float _2245;
    float _2247;
    if (_1862)
    {
        _2243 = _2185;
        _2245 = _2186;
        _2247 = _2187;
    }
    else
    {
        uint _2249 = _1786 + 2u;
        uint _2253 = _1786 + 10u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _286) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _365;
        float _2270 = cbLight._m0[_2249].y + _366;
        float _2271 = cbLight._m0[_2249].z + _367;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_2249].xyz));
        float _4199 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2283 = dot(vec3(_283, _284, _285), vec3(_2276, _2277, _2278));
        float _4210 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4221 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2305 = 1.0 - _2268;
        float _2315 = (0.5 / (((_2062 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2305) + _2268) * _2282))) * _2282;
        float _4232 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2243 = (((_2304 * cbLight._m0[_2253].x) * _2317) * _2318) + _2185;
        _2245 = (((_2304 * cbLight._m0[_2253].y) * _2317) * _2318) + _2186;
        _2247 = (((_2304 * cbLight._m0[_2253].z) * _2317) * _2318) + _2187;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1971)
    {
        _2349 = _2243;
        _2351 = _2245;
        _2353 = _2247;
    }
    else
    {
        uint _2360 = _1786 + 3u;
        uint _2364 = _1786 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _286) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _365;
        float _2381 = cbLight._m0[_2360].y + _366;
        float _2382 = cbLight._m0[_2360].z + _367;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_2360].xyz));
        float _4248 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2394 = dot(vec3(_283, _284, _285), vec3(_2387, _2388, _2389));
        float _4259 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4270 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2062 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2416) + _2379) * _2393))) * _2393;
        float _4281 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2349 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2243;
        _2351 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2245;
        _2353 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2247;
    }
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_1784.y == 0u)
    {
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.x;
        uint _2462 = uint((float(_2450.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2451))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2451)));
        float _2472 = (log2(_1562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2473 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        uint _2476 = uint(isnan(14.0) ? _2473 : (isnan(_2473) ? 14.0 : min(_2473, 14.0)));
        uvec4 _2481 = texelFetch(g_lightClusterGridBuffer, int(((_2476 << 2u) + (_2462 << 6u)) >> 2u));
        uint _2482 = _2481.x;
        uint _2483 = _2450.z;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((((1u << ((_2483 >> 4u) & 15u)) + 4294967295u) & _2482) == 0u) || ((_2483 & 240u) == 0u))
        {
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
        }
        else
        {
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2731)
                {
                    frontier_phi_71_pred = _2720;
                    frontier_phi_71_pred_1 = _2719;
                    frontier_phi_71_pred_2 = _2718;
                    frontier_phi_71_pred_3 = _2717;
                    frontier_phi_71_pred_4 = _2716;
                    frontier_phi_71_pred_5 = _2715;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2730;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2721 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _1560;
                        float _2927 = _2886.y - _1561;
                        float _2928 = _2886.z - _1562;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_407, _410, _413), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4307 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2957 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2961 = (-0.0) - _1560;
                        float _2962 = (-0.0) - _1561;
                        float _2963 = (-0.0) - _1562;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2977 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _467;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2968 + _2933;
                        float _2989 = _2969 + _2934;
                        float _2990 = _2970 + _2935;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_407, _410, _413), vec3(_2968, _2969, _2970));
                        float _4323 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3002 = dot(vec3(_407, _410, _413), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4334 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2946 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2936) + _3011;
                        float _4345 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4356 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3009 * _3009) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2790 = (_2957 * _2905.x) + _2863;
                        _2791 = (_2957 * _2905.y) + _2864;
                        _2792 = (_2957 * _2905.z) + _2865;
                        _2787 = (_3037 * _2922.x) + _2860;
                        _2788 = (_3037 * _2922.y) + _2861;
                        _2789 = (_3037 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_71_pred = _2792;
                    frontier_phi_71_pred_1 = _2791;
                    frontier_phi_71_pred_2 = _2790;
                    frontier_phi_71_pred_3 = _2789;
                    frontier_phi_71_pred_4 = _2788;
                    frontier_phi_71_pred_5 = _2787;
                }
                _2573 = frontier_phi_71_pred;
                _2571 = frontier_phi_71_pred_1;
                _2569 = frontier_phi_71_pred_2;
                _2567 = frontier_phi_71_pred_3;
                _2565 = frontier_phi_71_pred_4;
                _2563 = frontier_phi_71_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2563;
                    _2716 = _2565;
                    _2717 = _2567;
                    _2718 = _2569;
                    _2719 = _2571;
                    _2720 = _2573;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
        }
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.z;
        uint _2579 = (_2577 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2579) & _2482) == 0u)
        {
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
            _2693 = _2572;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
            float _2709 = _2708 * _1560;
            float _2710 = _2708 * _1561;
            float _2711 = _2708 * _1562;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2579 < ((_2577 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2843 = _2562;
                float _2844 = _2564;
                float _2845 = _2566;
                float _2846 = _2568;
                float _2847 = _2570;
                float _2848 = _2572;
                uint _2849 = _2579;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2859)
                    {
                        frontier_phi_82_pred = _2848;
                        frontier_phi_82_pred_1 = _2847;
                        frontier_phi_82_pred_2 = _2846;
                        frontier_phi_82_pred_3 = _2845;
                        frontier_phi_82_pred_4 = _2844;
                        frontier_phi_82_pred_5 = _2843;
                    }
                    else
                    {
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3064 = _2843;
                        float _3065 = _2844;
                        float _3066 = _2845;
                        float _3067 = _2846;
                        float _3068 = _2847;
                        float _3069 = _2848;
                        uint _3070 = _2858;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        vec3 _3124;
                        vec4 _3140;
                        vec4 _3156;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3081 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3081 * 40u) + 8u;
                            _3124 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x));
                            uint _3127 = (_3081 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3081 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3081 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3081 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_1562, _3191.z, fma(_1561, _3191.y, _3191.x * _1560)) + _3191.w;
                            _3204 = !((fma(_1562, _3172.z, fma(_1561, _3172.y, _3172.x * _1560)) + _3172.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3096.x - _1560;
                                float _3232 = _3096.y - _1561;
                                float _3233 = _3096.z - _1562;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3097 * _3097));
                                float _4367 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3249 = sqrt(_3234) * _3112.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_407, _410, _413))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_1562, _3140.z, fma(_1561, _3140.y, _3140.x * _1560)) + _3140.w) / _3203;
                                float _3263 = (fma(_1562, _3156.z, fma(_1561, _3156.y, _3156.x * _1560)) + _3156.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4383 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _467;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2709;
                                float _3293 = _3239 - _2710;
                                float _3294 = _3240 - _2711;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4394 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3306 = dot(vec3(_407, _410, _413), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4405 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_407, _410, _413), vec3(_3238, _3239, _3240))) + _3315;
                                float _4416 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4427 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3269 * _3112.z;
                                frontier_phi_88_pred_1 = _3269 * _3112.y;
                                frontier_phi_88_pred_2 = _3269 * _3112.x;
                                frontier_phi_88_pred_3 = _3343 * _3124.z;
                                frontier_phi_88_pred_4 = _3343 * _3124.y;
                                frontier_phi_88_pred_5 = _3343 * _3124.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3352 = frontier_phi_88_pred;
                            _3351 = frontier_phi_88_pred_1;
                            _3350 = frontier_phi_88_pred_2;
                            _3349 = frontier_phi_88_pred_3;
                            _3348 = frontier_phi_88_pred_4;
                            _3347 = frontier_phi_88_pred_5;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3056;
                        frontier_phi_82_pred_1 = _3055;
                        frontier_phi_82_pred_2 = _3054;
                        frontier_phi_82_pred_3 = _3053;
                        frontier_phi_82_pred_4 = _3052;
                        frontier_phi_82_pred_5 = _3051;
                    }
                    _2694 = frontier_phi_82_pred;
                    _2692 = frontier_phi_82_pred_1;
                    _2690 = frontier_phi_82_pred_2;
                    _2688 = frontier_phi_82_pred_3;
                    _2686 = frontier_phi_82_pred_4;
                    _2684 = frontier_phi_82_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2684;
                        _2844 = _2686;
                        _2845 = _2688;
                        _2846 = _2690;
                        _2847 = _2692;
                        _2848 = _2694;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2690;
                frontier_phi_63_64_ladder_1 = _2694;
                frontier_phi_63_64_ladder_2 = _2692;
                frontier_phi_63_64_ladder_3 = _2688;
                frontier_phi_63_64_ladder_4 = _2686;
                frontier_phi_63_64_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_63_64_ladder = _2568;
                frontier_phi_63_64_ladder_1 = _2572;
                frontier_phi_63_64_ladder_2 = _2570;
                frontier_phi_63_64_ladder_3 = _2566;
                frontier_phi_63_64_ladder_4 = _2564;
                frontier_phi_63_64_ladder_5 = _2562;
            }
            _2683 = frontier_phi_63_64_ladder_5;
            _2685 = frontier_phi_63_64_ladder_4;
            _2687 = frontier_phi_63_64_ladder_3;
            _2689 = frontier_phi_63_64_ladder;
            _2691 = frontier_phi_63_64_ladder_2;
            _2693 = frontier_phi_63_64_ladder_1;
        }
        float _2698 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2495 = (_2698 * _2689) + _2026;
        _2497 = (_2698 * _2691) + _2028;
        _2499 = (_2698 * _2693) + _2030;
        _2501 = ((_2683 * 0.039999999105930328369140625) * _2698) + _2349;
        _2503 = ((_2685 * 0.039999999105930328369140625) * _2698) + _2351;
        _2505 = ((_2687 * 0.039999999105930328369140625) * _2698) + _2353;
    }
    else
    {
        _2495 = _2026;
        _2497 = _2028;
        _2499 = _2030;
        _2501 = _2349;
        _2503 = _2351;
        _2505 = _2353;
    }
    float _4443 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4454 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4465 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2522 = ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2495 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _451))) + ((_2501 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _2523 = ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2497 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _451))) + ((_2503 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2499 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _451))) + ((_2505 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    uint _2525 = _426 + 6u;
    float _2533 = _386 / cbSceneParam._m0[86u].x;
    float _2534 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2548 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, (log2((isnan(cbSceneParam._m0[77u].w) ? _305 : (isnan(_305) ? cbSceneParam._m0[77u].w : min(_305, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2550 = _2548.x;
    float _2551 = _2548.y;
    float _2552 = _2548.z;
    float _2553 = _2548.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_305 > cbSceneParam._m0[78u].w)
    {
        float _2587 = isnan(_305) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _305 : min(cbSceneParam._m0[80u].w, _305));
        float _2588 = _2587 / _305;
        float _2599 = _2588 * _358;
        float _2600 = _359 * _2588;
        float _2601 = (-0.0) - _2600;
        float _2603 = _2588 * _360;
        float _2605 = (cbSceneParam._m0[77u].w * _2601) / _2587;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2600;
        float _2613 = sqrt(((_2599 * _2599) + (_2600 * _2600)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2587)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2601 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2746 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2800 = ((abs(_2613 / _2601) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2623 * _2755) - exp2(_2623 * _2756)) * _2744))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2553);
        _2625 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2550;
        _2627 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2551;
        _2629 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2552;
        _2631 = _2811 * _2553;
    }
    else
    {
        _2625 = _2550;
        _2627 = _2551;
        _2629 = _2552;
        _2631 = _2553;
    }
    bool _2838;
    vec4 _2641;
    vec4 _2663;
    float _2665;
    float _2669;
    float _2670;
    float _2671;
    float _2672;
    bool _2682;
    for (;;)
    {
        _2641 = cbMatDynParam._m0[0u];
        float _2643 = roundEven(_2641.y);
        bool _2644 = _2643 == 3.0;
        float _2645 = log2(_2631);
        float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * _2522;
        float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * _2523;
        float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * _2524;
        float _2661 = _374 + (-0.5);
        _2663 = cbMtdParam._m0[1u];
        _2665 = _2663.y * _2661;
        float _2668 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2669 = _2668 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
        _2670 = _2668 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
        _2671 = _2668 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
        _2672 = _2661 * 0.999000012874603271484375;
        _2682 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2682)
        {
            if ((cbInstanceData._m0[_426 + 7u].x + _2672) < 0.5)
            {
                _2838 = true;
                break;
            }
        }
        uint _2779 = _427 + uint(_2641.w);
        if ((cbInstanceData._m0[_2779].w < 1.0) && ((cbInstanceData._m0[_2779].w + _2672) < 0.5))
        {
            _2838 = true;
            break;
        }
        if ((_2665 + 1.0) < _2663.x)
        {
            _2838 = true;
            break;
        }
        _2838 = false;
        break;
    }
    float _3042;
    if (_2838)
    {
        discard_state = true;
        _3042 = 0.0;
    }
    else
    {
        _3042 = cbInstanceData._m0[_2525].w;
    }
    SV_Target.x = _2669;
    SV_Target.y = _2670;
    SV_Target.z = _2671;
    SV_Target.w = _3042;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2525].w;
    discard_exit();
}


