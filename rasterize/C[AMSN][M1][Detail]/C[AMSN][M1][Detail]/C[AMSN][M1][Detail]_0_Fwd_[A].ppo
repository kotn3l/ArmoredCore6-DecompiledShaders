#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _992;
float _3381;
float _3382;
float _3383;
float _3384;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _300 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3393 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _308 = (_301 * ((_269.x * cbMtdParam._m0[10u].x) - _244)) + _244;
    float _309 = (_301 * ((_269.y * cbMtdParam._m0[10u].y) - _245)) + _245;
    float _310 = (_301 * ((_269.z * cbMtdParam._m0[10u].z) - _246)) + _246;
    vec4 _322 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _324 = _322.x;
    float _326 = _324 - (_324 * TEXCOORD_5.x);
    vec4 _343 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_351, _353), vec2(_351, _353));
    float _3404 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))));
    float _360 = _343.z * cbMtdParam._m0[12u].y;
    vec4 _373 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _387 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_373.z * cbMtdParam._m0[12u].x) - _360)) + _360;
    float _393 = ((((_373.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _351;
    float _394 = ((((_373.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _353;
    float _397 = fma(_359, _208 * NORMAL.x, fma(_394, _215 * TANGENT.x, (_201 * _193) * _393));
    float _400 = fma(_359, _208 * NORMAL.y, fma(_394, _215 * TANGENT.y, (_201 * _194) * _393));
    float _403 = fma(_359, _208 * NORMAL.z, fma(_394, _215 * TANGENT.z, (_201 * _195) * _393));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3415 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _411 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3437 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3448 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3459 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _415 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _482 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _472);
    float _483 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _472);
    float _484 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _472);
    float _488 = inversesqrt(dot(vec3(_482, _483, _484), vec3(_482, _483, _484)));
    float _489 = _482 * _488;
    float _490 = _483 * _488;
    float _491 = _484 * _488;
    vec4 _496 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _498 = _496.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _672 = sqrt(((_482 * _482) + (_483 * _483)) + (_484 * _484));
        float _678 = (cbMatDynParam._m0[5u].x * _672) + cbMatDynParam._m0[5u].y;
        float _3470 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _683 = (cbMatDynParam._m0[5u].z * _672) + cbMatDynParam._m0[5u].w;
        float _3481 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) - _679)) + _679) < ((_498 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _510 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _511 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _530 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _533 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _536 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _549 = uint(roundEven(NORMAL.w)) * 13u;
    uint _550 = _549 + 9u;
    uint _551 = _550 + uint(cbMatDynParam._m0[0u].w);
    float _557 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_551].x;
    float _558 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_551].y;
    float _559 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_551].z;
    float _3492 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _563 = 1.0 - _415;
    float _564 = _560 * _563;
    float _565 = _561 * _563;
    float _566 = _562 * _563;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _415;
    float _572 = (_561 + (-0.039999999105930328369140625)) * _415;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _415;
    float _574 = _571 + 0.039999999105930328369140625;
    float _576 = _572 + 0.039999999105930328369140625;
    float _577 = _573 + 0.039999999105930328369140625;
    vec4 _586 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _510, cbSceneParam._m0[86u].y * _511));
    float _589 = _586.x * TEXCOORD_5.w;
    float _590 = dot(vec3(_408, _409, _410), vec3(_489, _490, _491));
    float _593 = _590 * 2.0;
    float _597 = (_593 * _408) - _489;
    float _598 = (_593 * _409) - _490;
    float _599 = (_593 * _410) - _491;
    float _603 = abs(dot(vec3(_489, _490, _491), vec3(_408, _409, _410)));
    float _3525 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = sqrt(_411);
    float _618 = exp2((_605 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _624 = (1.0 - _618) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _625 = _618 * _605;
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _991;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _720 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _724 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _749 = _653 + _408;
        float _750 = _657 + _409;
        float _751 = _661 + _410;
        float _761 = fma(_751, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749)) - _716;
        float _762 = fma(_751, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749)) - _720;
        float _763 = fma(_751, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749)) - _724;
        float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
        float _780 = ((_767 * _761) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_767 * _762) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_767 * _763) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        float _819 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_785.x + (-0.5));
        float _821 = _819 * (_785.y + (-0.5));
        float _822 = _819 * (_785.z + (-0.5));
        float _829 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_792.x + (-0.5));
        float _831 = _829 * (_792.y + (-0.5));
        float _832 = _829 * (_792.z + (-0.5));
        float _839 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_799.x + (-0.5));
        float _841 = _839 * (_799.y + (-0.5));
        float _842 = _839 * (_799.z + (-0.5));
        float _849 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_806.x + (-0.5));
        float _851 = _849 * (_806.y + (-0.5));
        float _852 = _849 * (_806.z + (-0.5));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = _820 * 0.5;
        float _857 = _830 * 0.5;
        float _858 = _840 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _873 = (dot(vec3(_408, _409, _410), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _883 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3573 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_885 + 1.0))) + _890) * _853;
        float _900 = _821 * 0.5;
        float _901 = _831 * 0.5;
        float _902 = _841 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_408, _409, _410), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3606 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_927 + 1.0))) + _932) * _854;
        float _942 = _822 * 0.5;
        float _943 = _832 * 0.5;
        float _944 = _842 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_408, _409, _410), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3639 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_969 + 1.0))) + _974) * _855;
        _991 = _822;
        _993 = _821;
        _994 = _820;
        _995 = _832;
        _996 = _831;
        _997 = _830;
        _998 = _842;
        _999 = _841;
        _1000 = _840;
        _1001 = _855;
        _1002 = _854;
        _1003 = _853;
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
    }
    else
    {
        _991 = _992;
        _993 = _992;
        _994 = _992;
        _995 = _992;
        _996 = _992;
        _997 = _992;
        _998 = _992;
        _999 = _992;
        _1000 = _992;
        _1001 = _992;
        _1002 = _992;
        _1003 = _992;
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1039 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1043 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1066 = _653 + _408;
        float _1067 = _657 + _409;
        float _1068 = _661 + _410;
        float _1078 = fma(_1068, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066)) - _1035;
        float _1079 = fma(_1068, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066)) - _1039;
        float _1080 = fma(_1068, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066)) - _1043;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1035 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1039 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[35u].z) + ((((((_1043 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1134 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1101.x + (-0.5));
        float _1136 = _1134 * (_1101.y + (-0.5));
        float _1137 = _1134 * (_1101.z + (-0.5));
        float _1144 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1108.x + (-0.5));
        float _1146 = _1144 * (_1108.y + (-0.5));
        float _1147 = _1144 * (_1108.z + (-0.5));
        float _1154 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1115.x + (-0.5));
        float _1156 = _1154 * (_1115.y + (-0.5));
        float _1157 = _1154 * (_1115.z + (-0.5));
        float _1164 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1122.x + (-0.5));
        float _1166 = _1164 * (_1122.y + (-0.5));
        float _1167 = _1164 * (_1122.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_408, _409, _410), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3702 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1198 + 1.0))) + _1203) * _1168;
        float _1213 = _1136 * 0.5;
        float _1214 = _1146 * 0.5;
        float _1215 = _1156 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_408, _409, _410), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3735 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1240 + 1.0))) + _1245) * _1169;
        float _1255 = _1137 * 0.5;
        float _1256 = _1147 * 0.5;
        float _1257 = _1157 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_408, _409, _410), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3768 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1282 + 1.0))) + _1287) * _1170;
        _1304 = _1137;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1147;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1157;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1170;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _992;
        _1305 = _992;
        _1306 = _992;
        _1307 = _992;
        _1308 = _992;
        _1309 = _992;
        _1310 = _992;
        _1311 = _992;
        _1312 = _992;
        _1313 = _992;
        _1314 = _992;
        _1315 = _992;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1004)) + _1004;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1351 = fma(_1330, cbSceneParam._m0[89u].z, fma(_1329, cbSceneParam._m0[89u].y, _1328 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1330, cbSceneParam._m0[90u].z, fma(_1329, cbSceneParam._m0[90u].y, _1328 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1330, cbSceneParam._m0[91u].z, fma(_1329, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1328));
    float _1372 = _597 * 0.5;
    float _1373 = _598 * 0.5;
    float _1374 = _599 * 0.5;
    float _1375 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1378 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1381 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1415;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1388 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_991, _995, _998, _1001));
        float _1392 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_993, _996, _999, _1002));
        float _1396 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_994, _997, _1000, _1003));
        float _1403 = dot(vec4(cbModelParam._m0[39u]), vec4(_1372, _1373, _1374, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1426;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1417 = dot(vec4(cbModelParam._m0[40u]), vec4(_1372, _1373, _1374, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1430 = (_1426 * cbModelParam._m0[1u].x) + (_1415 * (1.0 - cbModelParam._m0[1u].x));
    float _1440 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1440 : min(cbModelParam._m0[25u].z, _1440));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1490 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1494 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1498 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1501 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1504 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1507 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1535;
        if (_1501 > 0.0)
        {
            _1535 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1535 = frontier_phi_17_15_ladder;
        }
        float _1741;
        if (_1504 > 0.0)
        {
            _1741 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1741 = frontier_phi_26_22_ladder;
        }
        float _1995;
        if (_1507 > 0.0)
        {
            _1995 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1995 = frontier_phi_38_33_ladder;
        }
        float _1997 = isnan(_1741) ? _1535 : (isnan(_1535) ? _1741 : min(_1535, _1741));
        float _1998 = isnan(_1995) ? _1997 : (isnan(_1997) ? _1995 : min(_1997, _1995));
        float _2002 = (_1998 * _1501) + _1490;
        float _2003 = (_1998 * _1504) + _1494;
        float _2004 = (_1998 * _1507) + _1498;
        float _2005 = _1998 * 9.9999997473787516355514526367188e-05;
        float _2007 = (-1.0) - _2005;
        float _2009 = _2005 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2004 > _2009) || ((_2004 < _2007) || ((_2003 > _2009) || ((_2003 < _2007) || ((_2002 < _2007) || (_2002 > _2009))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2132 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2004, cbModelParam._m0[9u].z, fma(_2003, cbModelParam._m0[9u].y, _2002 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2004, cbModelParam._m0[10u].z, fma(_2003, cbModelParam._m0[10u].y, _2002 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2004, cbModelParam._m0[11u].z, fma(_2003, cbModelParam._m0[11u].y, _2002 * cbModelParam._m0[11u].x))), _1441);
            frontier_phi_16_38_ladder = _2132.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2132.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2132.x * cbModelParam._m0[1u].y;
        }
        _1523 = frontier_phi_16_38_ladder_2;
        _1525 = frontier_phi_16_38_ladder_1;
        _1527 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1441);
        _1523 = _1511.x * cbModelParam._m0[1u].y;
        _1525 = _1511.y * cbModelParam._m0[1u].y;
        _1527 = _1511.z * cbModelParam._m0[1u].y;
    }
    float _1531 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1531 : min(cbModelParam._m0[25u].w, _1531));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1589 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1593 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1597 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1600 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1603 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1606 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1746;
        if (_1600 > 0.0)
        {
            _1746 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1746 = frontier_phi_28_24_ladder;
        }
        float _2022;
        if (_1603 > 0.0)
        {
            _2022 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2022 = frontier_phi_40_35_ladder;
        }
        float _2235;
        if (_1606 > 0.0)
        {
            _2235 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2235 = frontier_phi_49_46_ladder;
        }
        float _2237 = isnan(_2022) ? _1746 : (isnan(_1746) ? _2022 : min(_1746, _2022));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1600) + _1589;
        float _2243 = (_2238 * _1603) + _1593;
        float _2244 = (_2238 * _1606) + _1597;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2245;
        float _2248 = _2245 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2244 > _2248) || ((_2244 < _2246) || ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 < _2246) || (_2242 > _2248))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2244, cbModelParam._m0[17u].z, fma(_2243, cbModelParam._m0[17u].y, _2242 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2244, cbModelParam._m0[18u].z, fma(_2243, cbModelParam._m0[18u].y, _2242 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2244, cbModelParam._m0[19u].z, fma(_2243, cbModelParam._m0[19u].y, _2242 * cbModelParam._m0[19u].x))), _1532);
            frontier_phi_25_49_ladder = _2443.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2443.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2443.x * cbModelParam._m0[1u].z;
        }
        _1625 = frontier_phi_25_49_ladder_2;
        _1627 = frontier_phi_25_49_ladder_1;
        _1629 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1532);
        _1625 = _1609.x * cbModelParam._m0[1u].z;
        _1627 = _1609.y * cbModelParam._m0[1u].z;
        _1629 = _1609.z * cbModelParam._m0[1u].z;
    }
    float _1642 = (((_624 * _574) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1625 - _1523)) + _1523);
    float _1644 = (((_624 * _576) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1646 = (((_624 * _577) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1642 * cbSceneParam._m0[91u].x));
    uvec4 _1665 = floatBitsToUint(cbInstanceData._m0[_549 + 5u]);
    uint _1667 = _1665.x * 14u;
    uint _1668 = _1667 + 13u;
    float _1675 = _589 + (-1.0);
    float _1680 = (cbLight._m0[_1668].x * _1675) + 1.0;
    float _1681 = (cbLight._m0[_1668].y * _1675) + 1.0;
    float _1682 = (cbLight._m0[_1668].z * _1675) + 1.0;
    float _1683 = (cbLight._m0[_1668].w * _1675) + 1.0;
    uint _1684 = _1667 + 5u;
    float _1690 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1694 = _1667 + 4u;
    float _1700 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    uint _1704 = _1667 | 1u;
    float _1715 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_408, _409, _410));
    float _1718 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_408, _409, _410));
    float _3904 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _3915 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1723 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
    float _1725 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1732 = ((cbLight._m0[_1684].x * _1690) * _1725) + ((cbLight._m0[_1694].x * _1700) * _1723);
    float _1733 = ((_1690 * cbLight._m0[_1684].y) * _1725) + ((_1700 * cbLight._m0[_1694].y) * _1723);
    float _1734 = ((_1690 * cbLight._m0[_1684].z) * _1725) + ((_1700 * cbLight._m0[_1694].z) * _1723);
    uvec4 _1738 = floatBitsToUint(cbLight._m0[_1667 + 12u]);
    bool _1740 = _1738.x == 0u;
    float _1751;
    float _1753;
    float _1755;
    if (_1740)
    {
        _1751 = _1732;
        _1753 = _1733;
        _1755 = _1734;
    }
    else
    {
        uint _1759 = _1667 + 6u;
        float _1775 = (dot(vec3(cbLight._m0[_1667 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1776 = _1775 * _1775;
        float _3926 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1778 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _1751 = (((cbLight._m0[_1759].x * 0.3183098733425140380859375) * _1777) * _1778) + _1732;
        _1753 = (((cbLight._m0[_1759].y * 0.3183098733425140380859375) * _1777) * _1778) + _1733;
        _1755 = (((cbLight._m0[_1759].z * 0.3183098733425140380859375) * _1777) * _1778) + _1734;
    }
    bool _1758 = _1738.y == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1758)
    {
        _1796 = _1751;
        _1798 = _1753;
        _1800 = _1755;
    }
    else
    {
        uint _1966 = _1667 + 7u;
        float _1982 = (dot(vec3(cbLight._m0[_1667 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _3942 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1985 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1796 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1751;
        _1798 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1753;
        _1800 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1755;
    }
    uint _1803 = _1667 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1667].w)) * _411) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1667].x + _489;
    float _1819 = cbLight._m0[_1667].y + _490;
    float _1820 = cbLight._m0[_1667].z + _491;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1667].xyz));
    float _3958 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _1832 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1833 = dot(vec3(_408, _409, _410), vec3(_1825, _1826, _1827));
    float _3980 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_1825, _1826, _1827));
    float _3991 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1853 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
    float _1854 = 0.959999978542327880859375 - _571;
    float _1856 = 0.959999978542327880859375 - _572;
    float _1857 = 0.959999978542327880859375 - _573;
    float _1864 = 1.0 - _1817;
    float _1875 = (0.5 / (((_1832 * ((_1831 * _1864) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1864) + _1817) * _1831))) * _1831;
    float _4002 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1888 = _1667 + 9u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _411) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1704].x + _489;
    float _1902 = cbLight._m0[_1704].y + _490;
    float _1903 = cbLight._m0[_1704].z + _491;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1704].xyz));
    float _4013 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1915 = dot(vec3(_408, _409, _410), vec3(_1908, _1909, _1910));
    float _4024 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1908, _1909, _1910));
    float _4035 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1900 * _1900;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1934 = exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0);
    float _1941 = 1.0 - _1900;
    float _1951 = (0.5 / (((_1832 * ((_1914 * _1941) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1941) + _1900) * _1914))) * _1914;
    float _4046 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1953 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    float _1963 = (((((_1934 * _1854) + _574) * cbLight._m0[_1888].x) * _1953) * _1690) + (((((_1853 * _1854) + _574) * cbLight._m0[_1803].x) * _1877) * _1700);
    float _1964 = (((((_1934 * _1856) + _576) * cbLight._m0[_1888].y) * _1953) * _1690) + (((((_1853 * _1856) + _576) * cbLight._m0[_1803].y) * _1877) * _1700);
    float _1965 = (((((_1934 * _1857) + _577) * cbLight._m0[_1888].z) * _1953) * _1690) + (((((_1853 * _1857) + _577) * cbLight._m0[_1803].z) * _1877) * _1700);
    float _2027;
    float _2029;
    float _2031;
    if (_1740)
    {
        _2027 = _1963;
        _2029 = _1964;
        _2031 = _1965;
    }
    else
    {
        uint _2033 = _1667 + 2u;
        uint _2037 = _1667 + 10u;
        float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _411) * 0.949999988079071044921875);
        float _2052 = _2051 * _2051;
        float _2053 = cbLight._m0[_2033].x + _489;
        float _2054 = cbLight._m0[_2033].y + _490;
        float _2055 = cbLight._m0[_2033].z + _491;
        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
        float _2060 = _2059 * _2053;
        float _2061 = _2059 * _2054;
        float _2062 = _2059 * _2055;
        float _2063 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2033].xyz));
        float _4057 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2067 = dot(vec3(_408, _409, _410), vec3(_2060, _2061, _2062));
        float _4068 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2060, _2061, _2062));
        float _4079 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2052 * _2052;
        float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
        float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
        float _2093 = 1.0 - _2052;
        float _2103 = (0.5 / (((_1832 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2093) + _2052) * _2066))) * _2066;
        float _4090 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2105 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
        float _2106 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _2027 = (((((_2086 * _1854) + _574) * cbLight._m0[_2037].x) * _2105) * _2106) + _1963;
        _2029 = (((((_2086 * _1856) + _576) * cbLight._m0[_2037].y) * _2105) * _2106) + _1964;
        _2031 = (((((_2086 * _1857) + _577) * cbLight._m0[_2037].z) * _2105) * _2106) + _1965;
    }
    float _2141;
    float _2143;
    float _2145;
    if (_1758)
    {
        _2141 = _2027;
        _2143 = _2029;
        _2145 = _2031;
    }
    else
    {
        uint _2152 = _1667 + 3u;
        uint _2156 = _1667 + 11u;
        float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _411) * 0.949999988079071044921875);
        float _2171 = _2170 * _2170;
        float _2172 = cbLight._m0[_2152].x + _489;
        float _2173 = cbLight._m0[_2152].y + _490;
        float _2174 = cbLight._m0[_2152].z + _491;
        float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
        float _2179 = _2178 * _2172;
        float _2180 = _2178 * _2173;
        float _2181 = _2178 * _2174;
        float _2182 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2152].xyz));
        float _4106 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2186 = dot(vec3(_408, _409, _410), vec3(_2179, _2180, _2181));
        float _4117 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2190 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2179, _2180, _2181));
        float _4128 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2194 = _2171 * _2171;
        float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
        float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2212 = 1.0 - _2171;
        float _2222 = (0.5 / (((_1832 * ((_2185 * _2212) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2212) + _2171) * _2185))) * _2185;
        float _4139 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
        float _2225 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2141 = (((((_2205 * _1854) + _574) * cbLight._m0[_2156].x) * _2224) * _2225) + _2027;
        _2143 = (((((_2205 * _1856) + _576) * cbLight._m0[_2156].y) * _2224) * _2225) + _2029;
        _2145 = (((((_2205 * _1857) + _577) * cbLight._m0[_2156].z) * _2224) * _2225) + _2031;
    }
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_1665.y == 0u)
    {
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2300;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2300;
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2300;
        uvec4 _2315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2316 = _2315.x;
        uint _2327 = uint((float(_2315.y) * floor(float(uint(cbSceneParam._m0[85u].y * _511) / _2316))) + floor(float(uint(cbSceneParam._m0[85u].x * _510) / _2316)));
        float _2337 = (log2(_2303 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2338 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        uint _2341 = uint(isnan(14.0) ? _2338 : (isnan(_2338) ? 14.0 : min(_2338, 14.0)));
        uvec4 _2346 = texelFetch(g_lightClusterGridBuffer, int(((_2341 << 2u) + (_2327 << 6u)) >> 2u));
        uint _2347 = _2346.x;
        uint _2348 = _2315.z;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((((1u << ((_2348 >> 4u) & 15u)) + 4294967295u) & _2347) == 0u) || ((_2348 & 240u) == 0u))
        {
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
        }
        else
        {
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            uint _2607 = 0u;
            uint _2616;
            bool _2617;
            for (;;)
            {
                _2616 = texelFetch(g_lightClassification, int((((_2341 << 5u) + (_2327 << 9u)) + (_2607 << 2u)) >> 2u)).x;
                _2617 = _2616 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2617)
                {
                    frontier_phi_66_pred = _2601;
                    frontier_phi_66_pred_1 = _2606;
                    frontier_phi_66_pred_2 = _2605;
                    frontier_phi_66_pred_3 = _2604;
                    frontier_phi_66_pred_4 = _2603;
                    frontier_phi_66_pred_5 = _2602;
                }
                else
                {
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    uint _2752;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2616;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    for (;;)
                    {
                        uint _2756 = uint(findLSB(_2752)) + (_2607 << 5u);
                        uint _2753 = (_2752 + 4294967295u) & _2752;
                        uint _2758 = _2756 * 48u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2778 = (_2756 * 48u) + 4u;
                        vec4 _2791 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 3u)).x));
                        uint _2797 = (_2756 * 48u) + 8u;
                        vec3 _2808 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2797)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 2u)).x));
                        float _2812 = _2772.x - _2301;
                        float _2813 = _2772.y - _2302;
                        float _2814 = _2772.z - _2303;
                        float _2815 = dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814));
                        float _2818 = inversesqrt(_2815);
                        float _2819 = _2818 * _2812;
                        float _2820 = _2818 * _2813;
                        float _2821 = _2818 * _2814;
                        float _2822 = dot(vec3(_530, _533, _536), vec3(_2819, _2820, _2821));
                        float _2827 = 1.0 - (_2815 * _2772.w);
                        float _4165 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2828 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2829 = sqrt(_2815) * _2791.w;
                        float _2832 = 1.39999997615814208984375 / (_2829 + 1.39999997615814208984375);
                        float _2833 = _2832 * _2832;
                        float _2836 = ((1.0 - _2833) * _2822) + _2833;
                        float _2839 = _2829 * _2829;
                        float _2843 = ((isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))) * _2828) / ((_2839 * 0.699999988079071044921875) + 1.0);
                        float _2847 = (-0.0) - _2301;
                        float _2848 = (-0.0) - _2302;
                        float _2849 = (-0.0) - _2303;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2864 = exp2(log2(1.0 / ((_2839 * 3.5) + 5.0)) * 0.25);
                        float _2865 = 1.0 - _605;
                        float _2872 = sqrt(1.0 - ((1.0 - (_2865 * _2865)) * (1.0 - (_2864 * _2864))));
                        float _2873 = _2872 * _2872;
                        float _2874 = _2873 * _2873;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2877 = _2856 + _2821;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2885 = dot(vec3(_530, _533, _536), vec3(_2854, _2855, _2856));
                        float _4181 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2889 = dot(vec3(_530, _533, _536), vec3(_2881 * _2875, _2881 * _2876, _2881 * _2877));
                        float _4192 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2892 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2896 = ((_2892 * _2892) * (_2874 + (-1.0))) + 1.0;
                        float _2897 = _2832 * _2873;
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2822) + _2898;
                        float _4203 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2902 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2903 = 1.0 - _2873;
                        float _2913 = (0.5 / (((_2902 * ((_2888 * _2903) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2902 * _2903) + _2873) * _2888))) * _2902;
                        float _4214 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2924 = (((_2874 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_2896 * _2896) * ((_2839 * 2.1991131305694580078125) + 3.141590118408203125))) * _2828;
                        _2676 = (_2843 * _2791.x) + _2749;
                        _2677 = (_2843 * _2791.y) + _2750;
                        _2678 = (_2843 * _2791.z) + _2751;
                        _2673 = (_2924 * _2808.x) + _2746;
                        _2674 = (_2924 * _2808.y) + _2747;
                        _2675 = (_2924 * _2808.z) + _2748;
                        if (_2753 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2753;
                        }
                    }
                    frontier_phi_66_pred = _2673;
                    frontier_phi_66_pred_1 = _2678;
                    frontier_phi_66_pred_2 = _2677;
                    frontier_phi_66_pred_3 = _2676;
                    frontier_phi_66_pred_4 = _2675;
                    frontier_phi_66_pred_5 = _2674;
                }
                _2449 = frontier_phi_66_pred;
                _2459 = frontier_phi_66_pred_1;
                _2457 = frontier_phi_66_pred_2;
                _2455 = frontier_phi_66_pred_3;
                _2453 = frontier_phi_66_pred_4;
                _2451 = frontier_phi_66_pred_5;
                uint _2608 = _2607 + 1u;
                if (_2608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2601 = _2449;
                    _2602 = _2451;
                    _2603 = _2453;
                    _2604 = _2455;
                    _2605 = _2457;
                    _2606 = _2459;
                    _2607 = _2608;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
        }
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.z;
        uint _2465 = (_2463 >> 8u) & 15u;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((4294967295u << _2465) & _2347) == 0u)
        {
            _2569 = _2448;
            _2571 = _2450;
            _2573 = _2452;
            _2575 = _2454;
            _2577 = _2456;
            _2579 = _2458;
        }
        else
        {
            float _2594 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
            float _2595 = _2594 * _2301;
            float _2596 = _2594 * _2302;
            float _2597 = _2594 * _2303;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2465 < ((_2463 >> 12u) & 15u))
            {
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2729 = _2448;
                float _2730 = _2450;
                float _2731 = _2452;
                float _2732 = _2454;
                float _2733 = _2456;
                float _2734 = _2458;
                uint _2735 = _2465;
                uint _2744;
                bool _2745;
                for (;;)
                {
                    _2744 = texelFetch(g_lightClassification, int((((_2341 << 5u) + (_2327 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                    _2745 = _2744 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2745)
                    {
                        frontier_phi_77_pred = _2734;
                        frontier_phi_77_pred_1 = _2733;
                        frontier_phi_77_pred_2 = _2732;
                        frontier_phi_77_pred_3 = _2731;
                        frontier_phi_77_pred_4 = _2730;
                        frontier_phi_77_pred_5 = _2729;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2951 = _2729;
                        float _2952 = _2730;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        uint _2957 = _2744;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3027;
                        vec4 _3043;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2968 = ((_2735 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3014 = (_2968 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2968 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2968 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2968 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2303, _3078.z, fma(_2302, _3078.y, _3078.x * _2301)) + _3078.w;
                            _3091 = !((fma(_2303, _3059.z, fma(_2302, _3059.y, _3059.x * _2301)) + _3059.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2983.x - _2301;
                                float _3119 = _2983.y - _2302;
                                float _3120 = _2983.z - _2303;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2984 * _2984));
                                float _4225 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3136 = sqrt(_3121) * _2999.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_530, _533, _536))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2303, _3027.z, fma(_2302, _3027.y, _3027.x * _2301)) + _3027.w) / _3090;
                                float _3150 = (fma(_2303, _3043.z, fma(_2302, _3043.y, _3043.x * _2301)) + _3043.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4241 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _605;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2595;
                                float _3180 = _3126 - _2596;
                                float _3181 = _3127 - _2597;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2595, (-0.0) - _2596, (-0.0) - _2597));
                                float _4252 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3193 = dot(vec3(_530, _533, _536), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4263 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_530, _533, _536), vec3(_3125, _3126, _3127))) + _3202;
                                float _4274 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4285 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3156 * _2999.y;
                                frontier_phi_83_pred_1 = _3156 * _2999.x;
                                frontier_phi_83_pred_2 = _3230 * _3011.z;
                                frontier_phi_83_pred_3 = _3230 * _3011.y;
                                frontier_phi_83_pred_4 = _3230 * _3011.x;
                                frontier_phi_83_pred_5 = _3156 * _2999.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3238 = frontier_phi_83_pred;
                            _3237 = frontier_phi_83_pred_1;
                            _3236 = frontier_phi_83_pred_2;
                            _3235 = frontier_phi_83_pred_3;
                            _3234 = frontier_phi_83_pred_4;
                            _3239 = frontier_phi_83_pred_5;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            _2940 = _3236 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2943;
                        frontier_phi_77_pred_1 = _2942;
                        frontier_phi_77_pred_2 = _2941;
                        frontier_phi_77_pred_3 = _2940;
                        frontier_phi_77_pred_4 = _2939;
                        frontier_phi_77_pred_5 = _2938;
                    }
                    _2580 = frontier_phi_77_pred;
                    _2578 = frontier_phi_77_pred_1;
                    _2576 = frontier_phi_77_pred_2;
                    _2574 = frontier_phi_77_pred_3;
                    _2572 = frontier_phi_77_pred_4;
                    _2570 = frontier_phi_77_pred_5;
                    uint _2736 = _2735 + 1u;
                    if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2729 = _2570;
                        _2730 = _2572;
                        _2731 = _2574;
                        _2732 = _2576;
                        _2733 = _2578;
                        _2734 = _2580;
                        _2735 = _2736;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2574;
                frontier_phi_58_59_ladder_1 = _2580;
                frontier_phi_58_59_ladder_2 = _2578;
                frontier_phi_58_59_ladder_3 = _2576;
                frontier_phi_58_59_ladder_4 = _2572;
                frontier_phi_58_59_ladder_5 = _2570;
            }
            else
            {
                frontier_phi_58_59_ladder = _2452;
                frontier_phi_58_59_ladder_1 = _2458;
                frontier_phi_58_59_ladder_2 = _2456;
                frontier_phi_58_59_ladder_3 = _2454;
                frontier_phi_58_59_ladder_4 = _2450;
                frontier_phi_58_59_ladder_5 = _2448;
            }
            _2569 = frontier_phi_58_59_ladder_5;
            _2571 = frontier_phi_58_59_ladder_4;
            _2573 = frontier_phi_58_59_ladder;
            _2575 = frontier_phi_58_59_ladder_3;
            _2577 = frontier_phi_58_59_ladder_2;
            _2579 = frontier_phi_58_59_ladder_1;
        }
        float _2584 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
        _2360 = (_2584 * _2575) + _1796;
        _2362 = (_2584 * _2577) + _1798;
        _2364 = (_2584 * _2579) + _1800;
        _2366 = ((_2569 * _574) * _2584) + _2141;
        _2368 = ((_2571 * _576) * _2584) + _2143;
        _2370 = ((_2573 * _577) * _2584) + _2145;
    }
    else
    {
        _2360 = _1796;
        _2362 = _1798;
        _2364 = _1800;
        _2366 = _2141;
        _2368 = _2143;
        _2370 = _2145;
    }
    float _4301 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4312 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4323 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2387 = ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2360 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _589))) + ((_2366 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    float _2388 = ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2362 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _589))) + ((_2368 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2364 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _589))) + ((_2370 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    uint _2390 = _549 + 6u;
    float _2398 = _510 / cbSceneParam._m0[86u].x;
    float _2399 = _511 / cbSceneParam._m0[86u].y;
    vec4 _2413 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2415 = _2413.x;
    float _2416 = _2413.y;
    float _2417 = _2413.z;
    float _2418 = _2413.w;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2474 = _2473 / _431;
        float _2485 = _2474 * _482;
        float _2486 = _483 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2489 = _2474 * _484;
        float _2491 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2492 = _2491 + cbSceneParam._m0[79u].w;
        float _2493 = cbSceneParam._m0[79u].w - _2486;
        float _2499 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2489 * _2489));
        float _2502 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2499;
        float _2507 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2509 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2686;
        if (abs((_2487 - _2491) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2686 = ((((_2492 > 0.0) ? exp2(_2507 * _2492) : (2.0 - exp2(_2509 * _2492))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2502;
        }
        else
        {
            float _2630 = 1.0 / cbSceneParam._m0[80u].x;
            float _2631 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : max(_2492, _2493));
            float _2632 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : min(_2492, _2493));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            _2686 = ((abs(_2499 / _2487) * cbSceneParam._m0[80u].y) * ((((_2641 - _2642) * 2.0) - ((exp2(_2507 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)))) - exp2(_2507 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))))) * _2630)) - ((exp2(_2509 * _2641) - exp2(_2509 * _2642)) * _2630))) + (_2502 * cbSceneParam._m0[80u].z);
        }
        vec4 _2688 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, 1.0), 0.0);
        float _2697 = exp2((_2686 * (-1.44269502162933349609375)) * (1.0 - _2688.w));
        float _2698 = log2(_2697);
        float _2714 = log2(_2418);
        _2511 = (exp2(_2714 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].x)) * _2688.x) / cbSceneParam._m0[78u].x)) + _2415;
        _2513 = (exp2(_2714 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].y)) * _2688.y) / cbSceneParam._m0[78u].y)) + _2416;
        _2515 = (exp2(_2714 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].z)) * _2688.z) / cbSceneParam._m0[78u].z)) + _2417;
        _2517 = _2697 * _2418;
    }
    else
    {
        _2511 = _2415;
        _2513 = _2416;
        _2515 = _2417;
        _2517 = _2418;
    }
    bool _2724;
    vec4 _2527;
    vec4 _2549;
    float _2551;
    float _2555;
    float _2556;
    float _2557;
    float _2558;
    bool _2568;
    for (;;)
    {
        _2527 = cbMatDynParam._m0[0u];
        float _2529 = roundEven(_2527.y);
        bool _2530 = _2529 == 3.0;
        float _2531 = log2(_2517);
        float _2538 = exp2(_2531 * cbSceneParam._m0[78u].x) * _2387;
        float _2539 = exp2(_2531 * cbSceneParam._m0[78u].y) * _2388;
        float _2540 = exp2(_2531 * cbSceneParam._m0[78u].z) * _2389;
        float _2547 = _498 + (-0.5);
        _2549 = cbMtdParam._m0[1u];
        _2551 = _2549.y * _2547;
        float _2554 = (_2529 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2555 = _2554 * (_2530 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2511)));
        _2556 = _2554 * (_2530 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2513)));
        _2557 = _2554 * (_2530 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2515)));
        _2558 = _2547 * 0.999000012874603271484375;
        _2568 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2568)
        {
            if ((cbInstanceData._m0[_549 + 7u].x + _2558) < 0.5)
            {
                _2724 = true;
                break;
            }
        }
        uint _2665 = _550 + uint(_2527.w);
        if ((cbInstanceData._m0[_2665].w < 1.0) && ((cbInstanceData._m0[_2665].w + _2558) < 0.5))
        {
            _2724 = true;
            break;
        }
        if ((_2551 + 1.0) < _2549.x)
        {
            _2724 = true;
            break;
        }
        _2724 = false;
        break;
    }
    float _2929;
    if (_2724)
    {
        discard_state = true;
        _2929 = 0.0;
    }
    else
    {
        _2929 = cbInstanceData._m0[_2390].w;
    }
    SV_Target.x = _2555;
    SV_Target.y = _2556;
    SV_Target.z = _2557;
    SV_Target.w = _2929;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2390].w;
    discard_exit();
}


