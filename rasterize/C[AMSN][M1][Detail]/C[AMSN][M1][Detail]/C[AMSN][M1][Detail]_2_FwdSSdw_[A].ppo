#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _885;
float _3298;
float _3299;
float _3300;
float _3301;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _248 = _246.x;
    vec4 _265 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3310 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))));
    float _283 = _265.z * cbMtdParam._m0[12u].y;
    float _286 = fma(_282, _196 * NORMAL.x, fma(_275, _203 * TANGENT.x, (_189 * _181) * _273));
    float _289 = fma(_282, _196 * NORMAL.y, fma(_275, _203 * TANGENT.y, (_189 * _182) * _273));
    float _292 = fma(_282, _196 * NORMAL.z, fma(_275, _203 * TANGENT.z, (_189 * _183) * _273));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3321 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _300 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3343 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3354 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3365 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _304 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    vec4 _387 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _389 = _387.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _564 = sqrt(((_373 * _373) + (_374 * _374)) + (_375 * _375));
        float _570 = (cbMatDynParam._m0[5u].x * _564) + cbMatDynParam._m0[5u].y;
        float _3376 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        float _571 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _575 = (cbMatDynParam._m0[5u].z * _564) + cbMatDynParam._m0[5u].w;
        float _3387 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) - _571)) + _571) < ((_389 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _425 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _428 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = _441 + 9u;
    uint _443 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3398 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _455 = 1.0 - _304;
    float _456 = _452 * _455;
    float _457 = _453 * _455;
    float _458 = _454 * _455;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _304;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _304;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _304;
    float _466 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    vec4 _478 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _481 = _478.x * TEXCOORD_5.w;
    float _482 = dot(vec3(_297, _298, _299), vec3(_380, _381, _382));
    float _485 = _482 * 2.0;
    float _489 = (_485 * _297) - _380;
    float _490 = (_485 * _298) - _381;
    float _491 = (_485 * _299) - _382;
    float _495 = abs(dot(vec3(_380, _381, _382), vec3(_297, _298, _299)));
    float _3431 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = sqrt(_300);
    float _510 = exp2((_497 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_497 * 3.0));
    float _516 = (1.0 - _510) * ((_497 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _517 = _510 * _497;
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _884;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _609 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _613 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _617 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _642 = _545 + _297;
        float _643 = _549 + _298;
        float _644 = _553 + _299;
        float _654 = fma(_644, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642)) - _609;
        float _655 = fma(_644, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642)) - _613;
        float _656 = fma(_644, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642)) - _617;
        float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
        float _673 = ((_660 * _654) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_609 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _674 = ((_660 * _655) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_613 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _675 = ((_660 * _656) / cbModelParam._m0[34u].z) + ((((((_617 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        float _712 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_678.x + (-0.5));
        float _714 = _712 * (_678.y + (-0.5));
        float _715 = _712 * (_678.z + (-0.5));
        float _722 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_685.x + (-0.5));
        float _724 = _722 * (_685.y + (-0.5));
        float _725 = _722 * (_685.z + (-0.5));
        float _732 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_692.x + (-0.5));
        float _734 = _732 * (_692.y + (-0.5));
        float _735 = _732 * (_692.z + (-0.5));
        float _742 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_699.x + (-0.5));
        float _744 = _742 * (_699.y + (-0.5));
        float _745 = _742 * (_699.z + (-0.5));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = _713 * 0.5;
        float _750 = _723 * 0.5;
        float _751 = _733 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _766 = (dot(vec3(_297, _298, _299), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _776 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3479 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_778 + 1.0))) + _783) * _746;
        float _793 = _714 * 0.5;
        float _794 = _724 * 0.5;
        float _795 = _734 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _809 = (dot(vec3(_297, _298, _299), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _818 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3512 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_820 + 1.0))) + _825) * _747;
        float _835 = _715 * 0.5;
        float _836 = _725 * 0.5;
        float _837 = _735 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_297, _298, _299), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3545 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_862 + 1.0))) + _867) * _748;
        _884 = _715;
        _886 = _714;
        _887 = _713;
        _888 = _725;
        _889 = _724;
        _890 = _723;
        _891 = _735;
        _892 = _734;
        _893 = _733;
        _894 = _748;
        _895 = _747;
        _896 = _746;
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
    }
    else
    {
        _884 = _885;
        _886 = _885;
        _887 = _885;
        _888 = _885;
        _889 = _885;
        _890 = _885;
        _891 = _885;
        _892 = _885;
        _893 = _885;
        _894 = _885;
        _895 = _885;
        _896 = _885;
        _897 = 0.0;
        _898 = 0.0;
        _899 = 0.0;
    }
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _928 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _932 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _936 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _959 = _545 + _297;
        float _960 = _549 + _298;
        float _961 = _553 + _299;
        float _971 = fma(_961, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959)) - _928;
        float _972 = fma(_961, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959)) - _932;
        float _973 = fma(_961, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959)) - _936;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_928 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_932 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[35u].z) + ((((((_936 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1027 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_994.x + (-0.5));
        float _1029 = _1027 * (_994.y + (-0.5));
        float _1030 = _1027 * (_994.z + (-0.5));
        float _1037 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1001.x + (-0.5));
        float _1039 = _1037 * (_1001.y + (-0.5));
        float _1040 = _1037 * (_1001.z + (-0.5));
        float _1047 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1008.x + (-0.5));
        float _1049 = _1047 * (_1008.y + (-0.5));
        float _1050 = _1047 * (_1008.z + (-0.5));
        float _1057 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1015.x + (-0.5));
        float _1059 = _1057 * (_1015.y + (-0.5));
        float _1060 = _1057 * (_1015.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_297, _298, _299), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3608 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1091 + 1.0))) + _1096) * _1061;
        float _1106 = _1029 * 0.5;
        float _1107 = _1039 * 0.5;
        float _1108 = _1049 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_297, _298, _299), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3641 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1133 + 1.0))) + _1138) * _1062;
        float _1148 = _1030 * 0.5;
        float _1149 = _1040 * 0.5;
        float _1150 = _1050 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_297, _298, _299), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3674 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1175 + 1.0))) + _1180) * _1063;
        _1197 = _1030;
        _1198 = _1029;
        _1199 = _1028;
        _1200 = _1040;
        _1201 = _1039;
        _1202 = _1038;
        _1203 = _1050;
        _1204 = _1049;
        _1205 = _1048;
        _1206 = _1063;
        _1207 = _1062;
        _1208 = _1061;
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _885;
        _1198 = _885;
        _1199 = _885;
        _1200 = _885;
        _1201 = _885;
        _1202 = _885;
        _1203 = _885;
        _1204 = _885;
        _1205 = _885;
        _1206 = _885;
        _1207 = _885;
        _1208 = _885;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _897)) + _897;
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _898)) + _898;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _899)) + _899;
    float _1244 = fma(_1223, cbSceneParam._m0[89u].z, fma(_1222, cbSceneParam._m0[89u].y, _1221 * cbSceneParam._m0[89u].x));
    float _1247 = fma(_1223, cbSceneParam._m0[90u].z, fma(_1222, cbSceneParam._m0[90u].y, _1221 * cbSceneParam._m0[90u].x));
    float _1250 = fma(_1223, cbSceneParam._m0[91u].z, fma(_1222, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1221));
    float _1265 = _489 * 0.5;
    float _1266 = _490 * 0.5;
    float _1267 = _491 * 0.5;
    float _1268 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1271 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1274 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1308;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1281 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_884, _888, _891, _894));
        float _1285 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_886, _889, _892, _895));
        float _1289 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_887, _890, _893, _896));
        float _1296 = dot(vec4(cbModelParam._m0[39u]), vec4(_1265, _1266, _1267, 1.0));
        _1308 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1308 = 1.0;
    }
    float _1319;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1310 = dot(vec4(cbModelParam._m0[40u]), vec4(_1265, _1266, _1267, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1323 = (_1319 * cbModelParam._m0[1u].x) + (_1308 * (1.0 - cbModelParam._m0[1u].x));
    float _1333 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _300);
    float _1334 = isnan(_1333) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1333 : min(cbModelParam._m0[25u].z, _1333));
    float _1416;
    float _1418;
    float _1420;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1383 = fma(_553, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545)) + cbModelParam._m0[13u].w;
        float _1387 = fma(_553, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545)) + cbModelParam._m0[14u].w;
        float _1391 = fma(_553, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545)) + cbModelParam._m0[15u].w;
        float _1394 = fma(_491, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489));
        float _1397 = fma(_491, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489));
        float _1400 = fma(_491, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489));
        float _1428;
        if (_1394 > 0.0)
        {
            _1428 = abs((1.0 - _1383) / _1394);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1383 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1428 = frontier_phi_17_15_ladder;
        }
        float _1655;
        if (_1397 > 0.0)
        {
            _1655 = abs((1.0 - _1387) / _1397);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1387 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1655 = frontier_phi_26_22_ladder;
        }
        float _1912;
        if (_1400 > 0.0)
        {
            _1912 = abs((1.0 - _1391) / _1400);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1391 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1912 = frontier_phi_38_33_ladder;
        }
        float _1914 = isnan(_1655) ? _1428 : (isnan(_1428) ? _1655 : min(_1428, _1655));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1394) + _1383;
        float _1920 = (_1915 * _1397) + _1387;
        float _1921 = (_1915 * _1400) + _1391;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1334);
            frontier_phi_16_38_ladder = _2049.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2049.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2049.x * cbModelParam._m0[1u].y;
        }
        _1416 = frontier_phi_16_38_ladder_2;
        _1418 = frontier_phi_16_38_ladder_1;
        _1420 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_489, _490, _491), _1334);
        _1416 = _1404.x * cbModelParam._m0[1u].y;
        _1418 = _1404.y * cbModelParam._m0[1u].y;
        _1420 = _1404.z * cbModelParam._m0[1u].y;
    }
    float _1424 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _300);
    float _1425 = isnan(_1424) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1424 : min(cbModelParam._m0[25u].w, _1424));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1482 = fma(_553, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545)) + cbModelParam._m0[21u].w;
        float _1486 = fma(_553, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545)) + cbModelParam._m0[22u].w;
        float _1490 = fma(_553, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545)) + cbModelParam._m0[23u].w;
        float _1493 = fma(_491, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489));
        float _1496 = fma(_491, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489));
        float _1499 = fma(_491, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489));
        float _1660;
        if (_1493 > 0.0)
        {
            _1660 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1660 = frontier_phi_28_24_ladder;
        }
        float _1939;
        if (_1496 > 0.0)
        {
            _1939 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1939 = frontier_phi_40_35_ladder;
        }
        float _2152;
        if (_1499 > 0.0)
        {
            _2152 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2152 = frontier_phi_49_46_ladder;
        }
        float _2154 = isnan(_1939) ? _1660 : (isnan(_1660) ? _1939 : min(_1660, _1939));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1493) + _1482;
        float _2160 = (_2155 * _1496) + _1486;
        float _2161 = (_2155 * _1499) + _1490;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1425);
            frontier_phi_25_49_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1518 = frontier_phi_25_49_ladder_2;
        _1520 = frontier_phi_25_49_ladder_1;
        _1522 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_489, _490, _491), _1425);
        _1518 = _1502.x * cbModelParam._m0[1u].z;
        _1520 = _1502.y * cbModelParam._m0[1u].z;
        _1522 = _1502.z * cbModelParam._m0[1u].z;
    }
    float _1535 = (((_516 * _466) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1537 = (((_516 * _468) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1539 = (((_516 * _469) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1542 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, _1535 * cbSceneParam._m0[91u].x));
    vec4 _1556 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_401, _402));
    float _1558 = _1556.w;
    float _1570 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1558);
    float _1571 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1558);
    float _1572 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1558);
    uvec4 _1576 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1578 = _1576.x * 14u;
    uint _1579 = _1578 + 13u;
    float _1586 = _481 + (-1.0);
    float _1591 = (cbLight._m0[_1579].x * _1586) + 1.0;
    float _1592 = (cbLight._m0[_1579].y * _1586) + 1.0;
    float _1593 = (cbLight._m0[_1579].z * _1586) + 1.0;
    float _1594 = (cbLight._m0[_1579].w * _1586) + 1.0;
    uint _1595 = _1578 + 5u;
    float _1601 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1605 = _1578 + 4u;
    float _1614 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
    uint _1618 = _1578 | 1u;
    float _1629 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_297, _298, _299));
    float _1632 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_297, _298, _299));
    float _3810 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _3821 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1637 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 0.3183098733425140380859375;
    float _1639 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.3183098733425140380859375;
    float _1646 = ((cbLight._m0[_1595].x * _1601) * _1639) + (((cbLight._m0[_1605].x * _1570) * _1614) * _1637);
    float _1647 = ((_1601 * cbLight._m0[_1595].y) * _1639) + (((cbLight._m0[_1605].y * _1571) * _1614) * _1637);
    float _1648 = ((_1601 * cbLight._m0[_1595].z) * _1639) + (((cbLight._m0[_1605].z * _1572) * _1614) * _1637);
    uvec4 _1652 = floatBitsToUint(cbLight._m0[_1578 + 12u]);
    bool _1654 = _1652.x == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1654)
    {
        _1665 = _1646;
        _1667 = _1647;
        _1669 = _1648;
    }
    else
    {
        uint _1673 = _1578 + 6u;
        float _1689 = (dot(vec3(cbLight._m0[_1578 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3832 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1692 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1665 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1646;
        _1667 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1647;
        _1669 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1648;
    }
    bool _1672 = _1652.y == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1672)
    {
        _1710 = _1665;
        _1712 = _1667;
        _1714 = _1669;
    }
    else
    {
        uint _1883 = _1578 + 7u;
        float _1899 = (dot(vec3(cbLight._m0[_1578 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3848 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1902 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1710 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1665;
        _1712 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1667;
        _1714 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1669;
    }
    uint _1717 = _1578 + 8u;
    float _1730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1578].w)) * _300) * 0.949999988079071044921875);
    float _1731 = _1730 * _1730;
    float _1732 = cbLight._m0[_1578].x + _380;
    float _1733 = cbLight._m0[_1578].y + _381;
    float _1734 = cbLight._m0[_1578].z + _382;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1739 = _1738 * _1732;
    float _1740 = _1738 * _1733;
    float _1741 = _1738 * _1734;
    float _1742 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1578].xyz));
    float _3864 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _1746 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1747 = dot(vec3(_297, _298, _299), vec3(_1739, _1740, _1741));
    float _3886 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1739, _1740, _1741));
    float _3897 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1731 * _1731;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1767 = exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * 5.0);
    float _1768 = 0.959999978542327880859375 - _463;
    float _1770 = 0.959999978542327880859375 - _464;
    float _1771 = 0.959999978542327880859375 - _465;
    float _1778 = 1.0 - _1731;
    float _1789 = (0.5 / (((_1746 * ((_1745 * _1778) + _1731)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1778) + _1731) * _1745))) * _1745;
    float _3908 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    uint _1805 = _1578 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _300) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1618].x + _380;
    float _1819 = cbLight._m0[_1618].y + _381;
    float _1820 = cbLight._m0[_1618].z + _382;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1618].xyz));
    float _3919 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1832 = dot(vec3(_297, _298, _299), vec3(_1825, _1826, _1827));
    float _3930 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1825, _1826, _1827));
    float _3941 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1851 = exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0);
    float _1858 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1746 * ((_1831 * _1858) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1858) + _1817) * _1831))) * _1831;
    float _3952 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1880 = (((((_1851 * _1768) + _466) * cbLight._m0[_1805].x) * _1870) * _1601) + ((((cbLight._m0[_1717].x * _1570) * ((_1767 * _1768) + _466)) * _1791) * _1614);
    float _1881 = (((((_1851 * _1770) + _468) * cbLight._m0[_1805].y) * _1870) * _1601) + ((((cbLight._m0[_1717].y * _1571) * ((_1767 * _1770) + _468)) * _1791) * _1614);
    float _1882 = (((((_1851 * _1771) + _469) * cbLight._m0[_1805].z) * _1870) * _1601) + ((((cbLight._m0[_1717].z * _1572) * ((_1767 * _1771) + _469)) * _1791) * _1614);
    float _1944;
    float _1946;
    float _1948;
    if (_1654)
    {
        _1944 = _1880;
        _1946 = _1881;
        _1948 = _1882;
    }
    else
    {
        uint _1950 = _1578 + 2u;
        uint _1954 = _1578 + 10u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _300) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _380;
        float _1971 = cbLight._m0[_1950].y + _381;
        float _1972 = cbLight._m0[_1950].z + _382;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1950].xyz));
        float _3963 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1984 = dot(vec3(_297, _298, _299), vec3(_1977, _1978, _1979));
        float _3974 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3985 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2003 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
        float _2010 = 1.0 - _1969;
        float _2020 = (0.5 / (((_1746 * ((_1983 * _2010) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2010) + _1969) * _1983))) * _1983;
        float _3996 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2022 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2023 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1944 = (((((_2003 * _1768) + _466) * cbLight._m0[_1954].x) * _2022) * _2023) + _1880;
        _1946 = (((((_2003 * _1770) + _468) * cbLight._m0[_1954].y) * _2022) * _2023) + _1881;
        _1948 = (((((_2003 * _1771) + _469) * cbLight._m0[_1954].z) * _2022) * _2023) + _1882;
    }
    float _2058;
    float _2060;
    float _2062;
    if (_1672)
    {
        _2058 = _1944;
        _2060 = _1946;
        _2062 = _1948;
    }
    else
    {
        uint _2069 = _1578 + 3u;
        uint _2073 = _1578 + 11u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _300) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _380;
        float _2090 = cbLight._m0[_2069].y + _381;
        float _2091 = cbLight._m0[_2069].z + _382;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2069].xyz));
        float _4012 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2103 = dot(vec3(_297, _298, _299), vec3(_2096, _2097, _2098));
        float _4023 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4034 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0);
        float _2129 = 1.0 - _2088;
        float _2139 = (0.5 / (((_1746 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2129) + _2088) * _2102))) * _2102;
        float _4045 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _2058 = (((((_2122 * _1768) + _466) * cbLight._m0[_2073].x) * _2141) * _2142) + _1944;
        _2060 = (((((_2122 * _1770) + _468) * cbLight._m0[_2073].y) * _2141) * _2142) + _1946;
        _2062 = (((((_2122 * _1771) + _469) * cbLight._m0[_2073].z) * _2141) * _2142) + _1948;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1576.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            uint _2524 = 0u;
            uint _2533;
            bool _2534;
            for (;;)
            {
                _2533 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                _2534 = _2533 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2534)
                {
                    frontier_phi_66_pred = _2518;
                    frontier_phi_66_pred_1 = _2523;
                    frontier_phi_66_pred_2 = _2522;
                    frontier_phi_66_pred_3 = _2521;
                    frontier_phi_66_pred_4 = _2520;
                    frontier_phi_66_pred_5 = _2519;
                }
                else
                {
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    uint _2669;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2533;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    for (;;)
                    {
                        uint _2673 = uint(findLSB(_2669)) + (_2524 << 5u);
                        uint _2670 = (_2669 + 4294967295u) & _2669;
                        uint _2675 = _2673 * 48u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2695 = (_2673 * 48u) + 4u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2714 = (_2673 * 48u) + 8u;
                        vec3 _2725 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x));
                        float _2729 = _2689.x - _2218;
                        float _2730 = _2689.y - _2219;
                        float _2731 = _2689.z - _2220;
                        float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                        float _2735 = inversesqrt(_2732);
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2739 = dot(vec3(_422, _425, _428), vec3(_2736, _2737, _2738));
                        float _2744 = 1.0 - (_2732 * _2689.w);
                        float _4071 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2746 = sqrt(_2732) * _2708.w;
                        float _2749 = 1.39999997615814208984375 / (_2746 + 1.39999997615814208984375);
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2739) + _2750;
                        float _2756 = _2746 * _2746;
                        float _2760 = ((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2745) / ((_2756 * 0.699999988079071044921875) + 1.0);
                        float _2764 = (-0.0) - _2218;
                        float _2765 = (-0.0) - _2219;
                        float _2766 = (-0.0) - _2220;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2781 = exp2(log2(1.0 / ((_2756 * 3.5) + 5.0)) * 0.25);
                        float _2782 = 1.0 - _497;
                        float _2789 = sqrt(1.0 - ((1.0 - (_2782 * _2782)) * (1.0 - (_2781 * _2781))));
                        float _2790 = _2789 * _2789;
                        float _2791 = _2790 * _2790;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2802 = dot(vec3(_422, _425, _428), vec3(_2771, _2772, _2773));
                        float _4087 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2806 = dot(vec3(_422, _425, _428), vec3(_2798 * _2792, _2798 * _2793, _2798 * _2794));
                        float _4098 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2813 = ((_2809 * _2809) * (_2791 + (-1.0))) + 1.0;
                        float _2814 = _2749 * _2790;
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2739) + _2815;
                        float _4109 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2820 = 1.0 - _2790;
                        float _2830 = (0.5 / (((_2819 * ((_2805 * _2820) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2819 * _2820) + _2790) * _2805))) * _2819;
                        float _4120 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2841 = (((_2791 * 3.1415927410125732421875) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) / ((_2813 * _2813) * ((_2756 * 2.1991131305694580078125) + 3.141590118408203125))) * _2745;
                        _2593 = (_2760 * _2708.x) + _2666;
                        _2594 = (_2760 * _2708.y) + _2667;
                        _2595 = (_2760 * _2708.z) + _2668;
                        _2590 = (_2841 * _2725.x) + _2663;
                        _2591 = (_2841 * _2725.y) + _2664;
                        _2592 = (_2841 * _2725.z) + _2665;
                        if (_2670 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2595;
                            _2669 = _2670;
                        }
                    }
                    frontier_phi_66_pred = _2590;
                    frontier_phi_66_pred_1 = _2595;
                    frontier_phi_66_pred_2 = _2594;
                    frontier_phi_66_pred_3 = _2593;
                    frontier_phi_66_pred_4 = _2592;
                    frontier_phi_66_pred_5 = _2591;
                }
                _2366 = frontier_phi_66_pred;
                _2376 = frontier_phi_66_pred_1;
                _2374 = frontier_phi_66_pred_2;
                _2372 = frontier_phi_66_pred_3;
                _2370 = frontier_phi_66_pred_4;
                _2368 = frontier_phi_66_pred_5;
                uint _2525 = _2524 + 1u;
                if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2518 = _2366;
                    _2519 = _2368;
                    _2520 = _2370;
                    _2521 = _2372;
                    _2522 = _2374;
                    _2523 = _2376;
                    _2524 = _2525;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2382) & _2264) == 0u)
        {
            _2486 = _2365;
            _2488 = _2367;
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
            _2496 = _2375;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2512 = _2511 * _2218;
            float _2513 = _2511 * _2219;
            float _2514 = _2511 * _2220;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2646 = _2365;
                float _2647 = _2367;
                float _2648 = _2369;
                float _2649 = _2371;
                float _2650 = _2373;
                float _2651 = _2375;
                uint _2652 = _2382;
                uint _2661;
                bool _2662;
                for (;;)
                {
                    _2661 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                    _2662 = _2661 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2662)
                    {
                        frontier_phi_77_pred = _2651;
                        frontier_phi_77_pred_1 = _2650;
                        frontier_phi_77_pred_2 = _2649;
                        frontier_phi_77_pred_3 = _2648;
                        frontier_phi_77_pred_4 = _2647;
                        frontier_phi_77_pred_5 = _2646;
                    }
                    else
                    {
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        float _2873 = _2651;
                        uint _2874 = _2661;
                        uint _2875;
                        vec4 _2900;
                        float _2901;
                        vec4 _2916;
                        vec3 _2928;
                        vec4 _2944;
                        vec4 _2960;
                        float _3007;
                        bool _3008;
                        for (;;)
                        {
                            uint _2885 = ((_2652 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2874));
                            _2875 = (_2874 + 4294967295u) & _2874;
                            uint _2887 = _2885 * 40u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2901 = _2900.w;
                            uint _2903 = (_2885 * 40u) + 4u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2918 = (_2885 * 40u) + 8u;
                            _2928 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x));
                            uint _2931 = (_2885 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2885 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2885 * 40u) + 24u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2982 = (_2885 * 40u) + 28u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _3007 = fma(_2220, _2995.z, fma(_2219, _2995.y, _2995.x * _2218)) + _2995.w;
                            _3008 = !((fma(_2220, _2976.z, fma(_2219, _2976.y, _2976.x * _2218)) + _2976.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3008)
                            {
                                float _3035 = _2900.x - _2218;
                                float _3036 = _2900.y - _2219;
                                float _3037 = _2900.z - _2220;
                                float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                                float _3041 = inversesqrt(_3038);
                                float _3042 = _3041 * _3035;
                                float _3043 = _3041 * _3036;
                                float _3044 = _3041 * _3037;
                                float _3048 = 1.0 - (_3038 / (_2901 * _2901));
                                float _4131 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3053 = sqrt(_3038) * _2916.w;
                                float _3055 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                                float _3056 = _3055 * _3055;
                                float _3059 = ((1.0 - _3056) * dot(vec3(_3042, _3043, _3044), vec3(_422, _425, _428))) + _3056;
                                float _3062 = _3053 * _3053;
                                float _3066 = (fma(_2220, _2944.z, fma(_2219, _2944.y, _2944.x * _2218)) + _2944.w) / _3007;
                                float _3067 = (fma(_2220, _2960.z, fma(_2219, _2960.y, _2960.x * _2218)) + _2960.w) / _3007;
                                float _3071 = 1.0 - dot(vec2(_3066, _3067), vec2(_3066, _3067));
                                float _4147 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3073 = _3072 * (((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3049) / ((_3062 * 0.699999988079071044921875) + 1.0));
                                float _3085 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                                float _3086 = 1.0 - _497;
                                float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                                float _3094 = _3093 * _3093;
                                float _3095 = _3094 * _3094;
                                float _3096 = _3042 - _2512;
                                float _3097 = _3043 - _2513;
                                float _3098 = _3044 - _2514;
                                float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                                float _3106 = dot(vec3(_422, _425, _428), vec3((-0.0) - _2512, (-0.0) - _2513, (-0.0) - _2514));
                                float _4158 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3110 = dot(vec3(_422, _425, _428), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                                float _4169 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                                float _3118 = _3055 * _3094;
                                float _3119 = _3118 * _3118;
                                float _3125 = ((1.0 - _3119) * dot(vec3(_422, _425, _428), vec3(_3042, _3043, _3044))) + _3119;
                                float _4180 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3127 = 1.0 - _3094;
                                float _3137 = (0.5 / (((_3126 * ((_3109 * _3127) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3094) * _3109))) * _3126;
                                float _4191 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3147 = (_3072 * _3049) * (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) / ((_3117 * _3117) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3073 * _2916.y;
                                frontier_phi_83_pred_1 = _3073 * _2916.x;
                                frontier_phi_83_pred_2 = _3147 * _2928.z;
                                frontier_phi_83_pred_3 = _3147 * _2928.y;
                                frontier_phi_83_pred_4 = _3147 * _2928.x;
                                frontier_phi_83_pred_5 = _3073 * _2916.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_83_pred;
                            _3154 = frontier_phi_83_pred_1;
                            _3153 = frontier_phi_83_pred_2;
                            _3152 = frontier_phi_83_pred_3;
                            _3151 = frontier_phi_83_pred_4;
                            _3156 = frontier_phi_83_pred_5;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            if (_2875 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2875;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2860;
                        frontier_phi_77_pred_1 = _2859;
                        frontier_phi_77_pred_2 = _2858;
                        frontier_phi_77_pred_3 = _2857;
                        frontier_phi_77_pred_4 = _2856;
                        frontier_phi_77_pred_5 = _2855;
                    }
                    _2497 = frontier_phi_77_pred;
                    _2495 = frontier_phi_77_pred_1;
                    _2493 = frontier_phi_77_pred_2;
                    _2491 = frontier_phi_77_pred_3;
                    _2489 = frontier_phi_77_pred_4;
                    _2487 = frontier_phi_77_pred_5;
                    uint _2653 = _2652 + 1u;
                    if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2646 = _2487;
                        _2647 = _2489;
                        _2648 = _2491;
                        _2649 = _2493;
                        _2650 = _2495;
                        _2651 = _2497;
                        _2652 = _2653;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2491;
                frontier_phi_58_59_ladder_1 = _2497;
                frontier_phi_58_59_ladder_2 = _2495;
                frontier_phi_58_59_ladder_3 = _2493;
                frontier_phi_58_59_ladder_4 = _2489;
                frontier_phi_58_59_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_58_59_ladder = _2369;
                frontier_phi_58_59_ladder_1 = _2375;
                frontier_phi_58_59_ladder_2 = _2373;
                frontier_phi_58_59_ladder_3 = _2371;
                frontier_phi_58_59_ladder_4 = _2367;
                frontier_phi_58_59_ladder_5 = _2365;
            }
            _2486 = frontier_phi_58_59_ladder_5;
            _2488 = frontier_phi_58_59_ladder_4;
            _2490 = frontier_phi_58_59_ladder;
            _2492 = frontier_phi_58_59_ladder_3;
            _2494 = frontier_phi_58_59_ladder_2;
            _2496 = frontier_phi_58_59_ladder_1;
        }
        float _2501 = isnan(1.0) ? _481 : (isnan(_481) ? 1.0 : min(_481, 1.0));
        _2277 = (_2501 * _2492) + _1710;
        _2279 = (_2501 * _2494) + _1712;
        _2281 = (_2501 * _2496) + _1714;
        _2283 = ((_2486 * _466) * _2501) + _2058;
        _2285 = ((_2488 * _468) * _2501) + _2060;
        _2287 = ((_2490 * _469) * _2501) + _2062;
    }
    else
    {
        _2277 = _1710;
        _2279 = _1712;
        _2281 = _1714;
        _2283 = _2058;
        _2285 = _2060;
        _2287 = _2062;
    }
    float _4207 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4218 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4229 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2304 = ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2277 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _481))) + ((_2283 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1323)) * cbPerFrame._m0[3u].x);
    float _2305 = ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2279 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _481))) + ((_2285 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1323)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2281 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _481))) + ((_2287 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1323)) * cbPerFrame._m0[3u].x);
    uint _2307 = _441 + 6u;
    float _2315 = _401 / cbSceneParam._m0[86u].x;
    float _2316 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2391 = _2390 / _320;
        float _2402 = _2391 * _373;
        float _2403 = _374 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _375;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2603;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2603 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2549 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2603 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2426 * _2558) - exp2(_2426 * _2559)) * _2547))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2605 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2614 = exp2((_2603 * (-1.44269502162933349609375)) * (1.0 - _2605.w));
        float _2615 = log2(_2614);
        float _2631 = log2(_2335);
        _2428 = (exp2(_2631 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].x)) * _2605.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2631 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].y)) * _2605.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2631 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].z)) * _2605.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2614 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    bool _2641;
    vec4 _2444;
    vec4 _2466;
    float _2468;
    float _2472;
    float _2473;
    float _2474;
    float _2475;
    bool _2485;
    for (;;)
    {
        _2444 = cbMatDynParam._m0[0u];
        float _2446 = roundEven(_2444.y);
        bool _2447 = _2446 == 3.0;
        float _2448 = log2(_2434);
        float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * _2304;
        float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * _2305;
        float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * _2306;
        float _2464 = _389 + (-0.5);
        _2466 = cbMtdParam._m0[1u];
        _2468 = _2466.y * _2464;
        float _2471 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2472 = _2471 * (_2447 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
        _2473 = _2471 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
        _2474 = _2471 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
        _2475 = _2464 * 0.999000012874603271484375;
        _2485 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2485)
        {
            if ((cbInstanceData._m0[_441 + 7u].x + _2475) < 0.5)
            {
                _2641 = true;
                break;
            }
        }
        uint _2582 = _442 + uint(_2444.w);
        if ((cbInstanceData._m0[_2582].w < 1.0) && ((cbInstanceData._m0[_2582].w + _2475) < 0.5))
        {
            _2641 = true;
            break;
        }
        if ((_2468 + 1.0) < _2466.x)
        {
            _2641 = true;
            break;
        }
        _2641 = false;
        break;
    }
    float _2846;
    if (_2641)
    {
        discard_state = true;
        _2846 = 0.0;
    }
    else
    {
        _2846 = cbInstanceData._m0[_2307].w;
    }
    SV_Target.x = _2472;
    SV_Target.y = _2473;
    SV_Target.z = _2474;
    SV_Target.w = _2846;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2307].w;
    discard_exit();
}


