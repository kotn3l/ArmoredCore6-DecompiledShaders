#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _805;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _176 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _177 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _253 = (_245.x * 2.0) + (-1.0);
    float _255 = (_245.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3143 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))));
    float _263 = _245.z * cbMtdParam._m0[12u].y;
    float _266 = fma(_262, _190 * NORMAL.x, fma(_255, _197 * TANGENT.x, (_183 * _175) * _253));
    float _269 = fma(_262, _190 * NORMAL.y, fma(_255, _197 * TANGENT.y, (_183 * _176) * _253));
    float _272 = fma(_262, _190 * NORMAL.z, fma(_255, _197 * TANGENT.z, (_183 * _177) * _253));
    float _276 = inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272)));
    float _277 = _276 * _266;
    float _278 = _276 * _269;
    float _279 = _276 * _272;
    float _3154 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _280 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
    float _3165 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3176 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3187 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _299 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _342 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _352 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _342);
    float _353 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _342);
    float _354 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _342);
    float _358 = inversesqrt(dot(vec3(_352, _353, _354), vec3(_352, _353, _354)));
    float _359 = _352 * _358;
    float _360 = _353 * _358;
    float _361 = _354 * _358;
    float _367 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _368 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _389 = fma(_279, cbSceneParam._m0[5u].z, fma(_278, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _277));
    float _392 = fma(_279, cbSceneParam._m0[6u].z, fma(_278, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _277));
    float _395 = fma(_279, cbSceneParam._m0[7u].z, fma(_278, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _277));
    uint _408 = uint(roundEven(NORMAL.w)) * 13u;
    uint _410 = (_408 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _416 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)))) * cbInstanceData._m0[_410].x;
    float _417 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) * cbInstanceData._m0[_410].y;
    float _418 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_410].z;
    float _3198 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _3209 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    vec4 _430 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _367, cbSceneParam._m0[86u].y * _368));
    float _433 = _430.x * TEXCOORD_5.w;
    float _434 = dot(vec3(_277, _278, _279), vec3(_359, _360, _361));
    float _437 = _434 * 2.0;
    float _441 = (_437 * _277) - _359;
    float _442 = (_437 * _278) - _360;
    float _443 = (_437 * _279) - _361;
    float _447 = abs(dot(vec3(_359, _360, _361), vec3(_277, _278, _279)));
    float _3231 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _449 = sqrt(_280);
    float _462 = exp2((_449 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_449 * 3.0));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _804;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _529 = fma(_502, cbModelParam._m0[26u].z, fma(_498, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _494));
        float _533 = fma(_502, cbModelParam._m0[27u].z, fma(_498, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _494));
        float _537 = fma(_502, cbModelParam._m0[28u].z, fma(_498, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _494));
        float _562 = _494 + _277;
        float _563 = _498 + _278;
        float _564 = _502 + _279;
        float _574 = fma(_564, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562)) - _529;
        float _575 = fma(_564, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562)) - _533;
        float _576 = fma(_564, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562)) - _537;
        float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
        float _593 = ((_580 * _574) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_529 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _594 = ((_580 * _575) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_533 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _595 = ((_580 * _576) / cbModelParam._m0[34u].z) + ((((((_537 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        float _632 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_598.x + (-0.5));
        float _634 = _632 * (_598.y + (-0.5));
        float _635 = _632 * (_598.z + (-0.5));
        float _642 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_605.x + (-0.5));
        float _644 = _642 * (_605.y + (-0.5));
        float _645 = _642 * (_605.z + (-0.5));
        float _652 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_612.x + (-0.5));
        float _654 = _652 * (_612.y + (-0.5));
        float _655 = _652 * (_612.z + (-0.5));
        float _662 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_619.x + (-0.5));
        float _664 = _662 * (_619.y + (-0.5));
        float _665 = _662 * (_619.z + (-0.5));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = _633 * 0.5;
        float _670 = _643 * 0.5;
        float _671 = _653 * 0.5;
        float _672 = dot(vec3(_669, _670, _671), vec3(_669, _670, _671));
        float _677 = (_672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_672);
        float _686 = (dot(vec3(_277, _278, _279), vec3(_677 * _669, _677 * _670, _677 * _671)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _696 = sqrt(((_670 * _670) + (_669 * _669)) + (_671 * _671)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _698 = _697 * 2.0;
        float _702 = (1.0 - _697) / (_697 + 1.0);
        float _3279 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _712 = ((((1.0 - _703) * (_698 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_698 + 1.0))) + _703) * _666;
        float _713 = _634 * 0.5;
        float _714 = _644 * 0.5;
        float _715 = _654 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _729 = (dot(vec3(_277, _278, _279), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3290 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _738 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3301 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3312 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * (_740 + 1.0))) + _745) * _667;
        float _755 = _635 * 0.5;
        float _756 = _645 * 0.5;
        float _757 = _655 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_277, _278, _279), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3345 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_782 + 1.0))) + _787) * _668;
        _804 = _635;
        _806 = _634;
        _807 = _633;
        _808 = _645;
        _809 = _644;
        _810 = _643;
        _811 = _655;
        _812 = _654;
        _813 = _653;
        _814 = _668;
        _815 = _667;
        _816 = _666;
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0)));
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
    }
    else
    {
        _804 = _805;
        _806 = _805;
        _807 = _805;
        _808 = _805;
        _809 = _805;
        _810 = _805;
        _811 = _805;
        _812 = _805;
        _813 = _805;
        _814 = _805;
        _815 = _805;
        _816 = _805;
        _817 = 0.0;
        _818 = 0.0;
        _819 = 0.0;
    }
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _845 = fma(_502, cbModelParam._m0[30u].z, fma(_498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _494));
        float _849 = fma(_502, cbModelParam._m0[31u].z, fma(_498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _494));
        float _853 = fma(_502, cbModelParam._m0[32u].z, fma(_498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _494));
        float _876 = _494 + _277;
        float _877 = _498 + _278;
        float _878 = _502 + _279;
        float _888 = fma(_878, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876)) - _845;
        float _889 = fma(_878, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876)) - _849;
        float _890 = fma(_878, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876)) - _853;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_845 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_849 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[35u].z) + ((((((_853 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _944 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_911.x + (-0.5));
        float _946 = _944 * (_911.y + (-0.5));
        float _947 = _944 * (_911.z + (-0.5));
        float _954 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_918.x + (-0.5));
        float _956 = _954 * (_918.y + (-0.5));
        float _957 = _954 * (_918.z + (-0.5));
        float _964 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_925.x + (-0.5));
        float _966 = _964 * (_925.y + (-0.5));
        float _967 = _964 * (_925.z + (-0.5));
        float _974 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_932.x + (-0.5));
        float _976 = _974 * (_932.y + (-0.5));
        float _977 = _974 * (_932.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_277, _278, _279), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3408 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_1008 + 1.0))) + _1013) * _978;
        float _1023 = _946 * 0.5;
        float _1024 = _956 * 0.5;
        float _1025 = _966 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_277, _278, _279), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3441 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_1050 + 1.0))) + _1055) * _979;
        float _1065 = _947 * 0.5;
        float _1066 = _957 * 0.5;
        float _1067 = _967 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_277, _278, _279), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3474 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1092 + 1.0))) + _1097) * _980;
        _1114 = _947;
        _1115 = _946;
        _1116 = _945;
        _1117 = _957;
        _1118 = _956;
        _1119 = _955;
        _1120 = _967;
        _1121 = _966;
        _1122 = _965;
        _1123 = _980;
        _1124 = _979;
        _1125 = _978;
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1127 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _805;
        _1115 = _805;
        _1116 = _805;
        _1117 = _805;
        _1118 = _805;
        _1119 = _805;
        _1120 = _805;
        _1121 = _805;
        _1122 = _805;
        _1123 = _805;
        _1124 = _805;
        _1125 = _805;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _817)) + _817;
    float _1139 = (cbModelParam._m0[1u].x * (_1127 - _818)) + _818;
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _819)) + _819;
    float _1161 = fma(_1140, cbSceneParam._m0[89u].z, fma(_1139, cbSceneParam._m0[89u].y, _1138 * cbSceneParam._m0[89u].x));
    float _1164 = fma(_1140, cbSceneParam._m0[90u].z, fma(_1139, cbSceneParam._m0[90u].y, _1138 * cbSceneParam._m0[90u].x));
    float _1167 = fma(_1140, cbSceneParam._m0[91u].z, fma(_1139, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1138));
    float _1182 = _441 * 0.5;
    float _1183 = _442 * 0.5;
    float _1184 = _443 * 0.5;
    float _1185 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1188 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1115, _1118, _1121, _1124));
    float _1191 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1225;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1198 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_804, _808, _811, _814));
        float _1202 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_806, _809, _812, _815));
        float _1206 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_807, _810, _813, _816));
        float _1213 = dot(vec4(cbModelParam._m0[39u]), vec4(_1182, _1183, _1184, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1213) ? 0.0 : (isnan(0.0) ? _1213 : max(0.0, _1213))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1236;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1227 = dot(vec4(cbModelParam._m0[40u]), vec4(_1182, _1183, _1184, 1.0));
        _1236 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1227) ? 0.0 : (isnan(0.0) ? _1227 : max(0.0, _1227))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1236 = 1.0;
    }
    float _1240 = (_1236 * cbModelParam._m0[1u].x) + (_1225 * (1.0 - cbModelParam._m0[1u].x));
    float _1250 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _280);
    float _1251 = isnan(_1250) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1250 : min(cbModelParam._m0[25u].z, _1250));
    float _1333;
    float _1335;
    float _1337;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1300 = fma(_502, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494)) + cbModelParam._m0[13u].w;
        float _1304 = fma(_502, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494)) + cbModelParam._m0[14u].w;
        float _1308 = fma(_502, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494)) + cbModelParam._m0[15u].w;
        float _1311 = fma(_443, cbModelParam._m0[13u].z, fma(_442, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441));
        float _1314 = fma(_443, cbModelParam._m0[14u].z, fma(_442, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441));
        float _1317 = fma(_443, cbModelParam._m0[15u].z, fma(_442, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441));
        float _1345;
        if (_1311 > 0.0)
        {
            _1345 = abs((1.0 - _1300) / _1311);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1300 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1345 = frontier_phi_14_12_ladder;
        }
        float _1570;
        if (_1314 > 0.0)
        {
            _1570 = abs((1.0 - _1304) / _1314);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1304 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1570 = frontier_phi_23_19_ladder;
        }
        float _1816;
        if (_1317 > 0.0)
        {
            _1816 = abs((1.0 - _1308) / _1317);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1308 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1816 = frontier_phi_35_30_ladder;
        }
        float _1818 = isnan(_1570) ? _1345 : (isnan(_1345) ? _1570 : min(_1345, _1570));
        float _1819 = isnan(_1816) ? _1818 : (isnan(_1818) ? _1816 : min(_1818, _1816));
        float _1823 = (_1819 * _1311) + _1300;
        float _1824 = (_1819 * _1314) + _1304;
        float _1825 = (_1819 * _1317) + _1308;
        float _1826 = _1819 * 9.9999997473787516355514526367188e-05;
        float _1828 = (-1.0) - _1826;
        float _1830 = _1826 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1825 > _1830) || ((_1825 < _1828) || ((_1824 > _1830) || ((_1824 < _1828) || ((_1823 < _1828) || (_1823 > _1830))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1825, cbModelParam._m0[9u].z, fma(_1824, cbModelParam._m0[9u].y, _1823 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1825, cbModelParam._m0[10u].z, fma(_1824, cbModelParam._m0[10u].y, _1823 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1825, cbModelParam._m0[11u].z, fma(_1824, cbModelParam._m0[11u].y, _1823 * cbModelParam._m0[11u].x))), _1251);
            frontier_phi_13_35_ladder = _1949.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1949.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1949.x * cbModelParam._m0[1u].y;
        }
        _1333 = frontier_phi_13_35_ladder_2;
        _1335 = frontier_phi_13_35_ladder_1;
        _1337 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1321 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_441, _442, _443), _1251);
        _1333 = _1321.x * cbModelParam._m0[1u].y;
        _1335 = _1321.y * cbModelParam._m0[1u].y;
        _1337 = _1321.z * cbModelParam._m0[1u].y;
    }
    float _1341 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _280);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1341 : min(cbModelParam._m0[25u].w, _1341));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1399 = fma(_502, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494)) + cbModelParam._m0[21u].w;
        float _1403 = fma(_502, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494)) + cbModelParam._m0[22u].w;
        float _1407 = fma(_502, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494)) + cbModelParam._m0[23u].w;
        float _1410 = fma(_443, cbModelParam._m0[21u].z, fma(_442, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441));
        float _1413 = fma(_443, cbModelParam._m0[22u].z, fma(_442, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441));
        float _1416 = fma(_443, cbModelParam._m0[23u].z, fma(_442, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441));
        float _1575;
        if (_1410 > 0.0)
        {
            _1575 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1575 = frontier_phi_25_21_ladder;
        }
        float _1843;
        if (_1413 > 0.0)
        {
            _1843 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1843 = frontier_phi_37_32_ladder;
        }
        float _2048;
        if (_1416 > 0.0)
        {
            _2048 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2048 = frontier_phi_46_43_ladder;
        }
        float _2050 = isnan(_1843) ? _1575 : (isnan(_1575) ? _1843 : min(_1575, _1843));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1410) + _1399;
        float _2056 = (_2051 * _1413) + _1403;
        float _2057 = (_2051 * _1416) + _1407;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2058;
        float _2061 = _2058 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2057 > _2061) || ((_2057 < _2059) || ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 < _2059) || (_2055 > _2061))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2256 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2057, cbModelParam._m0[17u].z, fma(_2056, cbModelParam._m0[17u].y, _2055 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2057, cbModelParam._m0[18u].z, fma(_2056, cbModelParam._m0[18u].y, _2055 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2057, cbModelParam._m0[19u].z, fma(_2056, cbModelParam._m0[19u].y, _2055 * cbModelParam._m0[19u].x))), _1342);
            frontier_phi_22_46_ladder = _2256.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2256.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2256.x * cbModelParam._m0[1u].z;
        }
        _1435 = frontier_phi_22_46_ladder_2;
        _1437 = frontier_phi_22_46_ladder_1;
        _1439 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_441, _442, _443), _1342);
        _1435 = _1419.x * cbModelParam._m0[1u].z;
        _1437 = _1419.y * cbModelParam._m0[1u].z;
        _1439 = _1419.z * cbModelParam._m0[1u].z;
    }
    float _1451 = ((((1.0 - _462) * ((_449 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_462 * _449)) * _433;
    float _1452 = _1451 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1453 = _1451 * ((cbModelParam._m0[1u].w * (_1437 - _1335)) + _1335);
    float _1454 = _1451 * ((cbModelParam._m0[1u].w * (_1439 - _1337)) + _1337);
    float _1457 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, _1452 * cbSceneParam._m0[91u].x));
    vec4 _1471 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_367, _368));
    float _1473 = _1471.w;
    float _1485 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1473);
    float _1486 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1473);
    float _1487 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1473);
    uvec4 _1491 = floatBitsToUint(cbInstanceData._m0[_408 + 5u]);
    uint _1493 = _1491.x * 14u;
    uint _1494 = _1493 + 13u;
    float _1501 = _433 + (-1.0);
    float _1506 = (cbLight._m0[_1494].x * _1501) + 1.0;
    float _1507 = (cbLight._m0[_1494].y * _1501) + 1.0;
    float _1508 = (cbLight._m0[_1494].z * _1501) + 1.0;
    float _1509 = (cbLight._m0[_1494].w * _1501) + 1.0;
    uint _1510 = _1493 + 5u;
    float _1516 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1520 = _1493 + 4u;
    float _1529 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
    uint _1533 = _1493 | 1u;
    float _1544 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_277, _278, _279));
    float _1547 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_277, _278, _279));
    float _3610 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _3621 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _1552 = (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 0.3183098733425140380859375;
    float _1554 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
    float _1561 = ((cbLight._m0[_1510].x * _1516) * _1554) + (((cbLight._m0[_1520].x * _1485) * _1529) * _1552);
    float _1562 = ((_1516 * cbLight._m0[_1510].y) * _1554) + (((cbLight._m0[_1520].y * _1486) * _1529) * _1552);
    float _1563 = ((_1516 * cbLight._m0[_1510].z) * _1554) + (((cbLight._m0[_1520].z * _1487) * _1529) * _1552);
    uvec4 _1567 = floatBitsToUint(cbLight._m0[_1493 + 12u]);
    bool _1569 = _1567.x == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1569)
    {
        _1580 = _1561;
        _1582 = _1562;
        _1584 = _1563;
    }
    else
    {
        uint _1588 = _1493 + 6u;
        float _1604 = (dot(vec3(cbLight._m0[_1493 + 2u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1605 = _1604 * _1604;
        float _3632 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1607 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1580 = (((cbLight._m0[_1588].x * 0.3183098733425140380859375) * _1606) * _1607) + _1561;
        _1582 = (((cbLight._m0[_1588].y * 0.3183098733425140380859375) * _1606) * _1607) + _1562;
        _1584 = (((cbLight._m0[_1588].z * 0.3183098733425140380859375) * _1606) * _1607) + _1563;
    }
    bool _1587 = _1567.y == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1587)
    {
        _1625 = _1580;
        _1627 = _1582;
        _1629 = _1584;
    }
    else
    {
        uint _1787 = _1493 + 7u;
        float _1803 = (dot(vec3(cbLight._m0[_1493 + 3u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1804 = _1803 * _1803;
        float _3648 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1806 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1625 = (((cbLight._m0[_1787].x * 0.3183098733425140380859375) * _1805) * _1806) + _1580;
        _1627 = (((cbLight._m0[_1787].y * 0.3183098733425140380859375) * _1805) * _1806) + _1582;
        _1629 = (((cbLight._m0[_1787].z * 0.3183098733425140380859375) * _1805) * _1806) + _1584;
    }
    uint _1632 = _1493 + 8u;
    float _1645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1493].w)) * _280) * 0.949999988079071044921875);
    float _1646 = _1645 * _1645;
    float _1647 = cbLight._m0[_1493].x + _359;
    float _1648 = cbLight._m0[_1493].y + _360;
    float _1649 = cbLight._m0[_1493].z + _361;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1654 = _1653 * _1647;
    float _1655 = _1653 * _1648;
    float _1656 = _1653 * _1649;
    float _1657 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1493].xyz));
    float _3664 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _1661 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _1662 = dot(vec3(_277, _278, _279), vec3(_1654, _1655, _1656));
    float _3686 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _1666 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_1654, _1655, _1656));
    float _3697 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1670 = _1646 * _1646;
    float _1674 = ((_1665 * _1665) * (_1670 + (-1.0))) + 1.0;
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1686 = 1.0 - _1646;
    float _1697 = (0.5 / (((_1661 * ((_1660 * _1686) + _1646)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1686) + _1646) * _1660))) * _1660;
    float _3708 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1699 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1670 / ((_1674 * _1674) * 3.141590118408203125));
    uint _1713 = _1493 + 9u;
    float _1724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1533].w)) * _280) * 0.949999988079071044921875);
    float _1725 = _1724 * _1724;
    float _1726 = cbLight._m0[_1533].x + _359;
    float _1727 = cbLight._m0[_1533].y + _360;
    float _1728 = cbLight._m0[_1533].z + _361;
    float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
    float _1733 = _1732 * _1726;
    float _1734 = _1732 * _1727;
    float _1735 = _1732 * _1728;
    float _1736 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1533].xyz));
    float _3719 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1740 = dot(vec3(_277, _278, _279), vec3(_1733, _1734, _1735));
    float _3730 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1733, _1734, _1735));
    float _3741 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1748 = _1725 * _1725;
    float _1752 = ((_1743 * _1743) * (_1748 + (-1.0))) + 1.0;
    float _1761 = (exp2(log2(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1762 = 1.0 - _1725;
    float _1772 = (0.5 / (((_1661 * ((_1739 * _1762) + _1725)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1762) + _1725) * _1739))) * _1739;
    float _3752 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1774 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1748 / ((_1752 * _1752) * 3.141590118408203125));
    float _1784 = (((_1761 * cbLight._m0[_1713].x) * _1774) * _1516) + ((((cbLight._m0[_1632].x * _1485) * _1685) * _1699) * _1529);
    float _1785 = (((_1761 * cbLight._m0[_1713].y) * _1774) * _1516) + ((((cbLight._m0[_1632].y * _1486) * _1685) * _1699) * _1529);
    float _1786 = (((_1761 * cbLight._m0[_1713].z) * _1774) * _1516) + ((((cbLight._m0[_1632].z * _1487) * _1685) * _1699) * _1529);
    float _1848;
    float _1850;
    float _1852;
    if (_1569)
    {
        _1848 = _1784;
        _1850 = _1785;
        _1852 = _1786;
    }
    else
    {
        uint _1854 = _1493 + 2u;
        uint _1858 = _1493 + 10u;
        float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _280) * 0.949999988079071044921875);
        float _1873 = _1872 * _1872;
        float _1874 = cbLight._m0[_1854].x + _359;
        float _1875 = cbLight._m0[_1854].y + _360;
        float _1876 = cbLight._m0[_1854].z + _361;
        float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
        float _1881 = _1880 * _1874;
        float _1882 = _1880 * _1875;
        float _1883 = _1880 * _1876;
        float _1884 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1854].xyz));
        float _3763 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1888 = dot(vec3(_277, _278, _279), vec3(_1881, _1882, _1883));
        float _3774 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1891 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1892 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1881, _1882, _1883));
        float _3785 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1896 = _1873 * _1873;
        float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
        float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1910 = 1.0 - _1873;
        float _1920 = (0.5 / (((_1661 * ((_1887 * _1910) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1910) + _1873) * _1887))) * _1887;
        float _3796 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1922 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
        float _1923 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1848 = (((_1909 * cbLight._m0[_1858].x) * _1922) * _1923) + _1784;
        _1850 = (((_1909 * cbLight._m0[_1858].y) * _1922) * _1923) + _1785;
        _1852 = (((_1909 * cbLight._m0[_1858].z) * _1922) * _1923) + _1786;
    }
    float _1958;
    float _1960;
    float _1962;
    if (_1587)
    {
        _1958 = _1848;
        _1960 = _1850;
        _1962 = _1852;
    }
    else
    {
        uint _1969 = _1493 + 3u;
        uint _1973 = _1493 + 11u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _280) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _359;
        float _1990 = cbLight._m0[_1969].y + _360;
        float _1991 = cbLight._m0[_1969].z + _361;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1969].xyz));
        float _3812 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _2003 = dot(vec3(_277, _278, _279), vec3(_1996, _1997, _1998));
        float _3823 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _3834 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2025 = 1.0 - _1988;
        float _2035 = (0.5 / (((_1661 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _2025) + _1988) * _2002))) * _2002;
        float _3845 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1958 = (((_2024 * cbLight._m0[_1973].x) * _2037) * _2038) + _1848;
        _1960 = (((_2024 * cbLight._m0[_1973].y) * _2037) * _2038) + _1850;
        _1962 = (((_2024 * cbLight._m0[_1973].z) * _2037) * _2038) + _1852;
    }
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    if (_1491.y == 0u)
    {
        float _2113 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2113;
        float _2115 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2113;
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2113;
        uvec4 _2128 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2129 = _2128.x;
        uint _2140 = uint((float(_2128.y) * floor(float(uint(cbSceneParam._m0[85u].y * _368) / _2129))) + floor(float(uint(cbSceneParam._m0[85u].x * _367) / _2129)));
        float _2150 = (log2(_2116 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2151 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        uint _2154 = uint(isnan(14.0) ? _2151 : (isnan(_2151) ? 14.0 : min(_2151, 14.0)));
        uvec4 _2159 = texelFetch(g_lightClusterGridBuffer, int(((_2154 << 2u) + (_2140 << 6u)) >> 2u));
        uint _2160 = _2159.x;
        uint _2161 = _2128.z;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((((1u << ((_2161 >> 4u) & 15u)) + 4294967295u) & _2160) == 0u) || ((_2161 & 240u) == 0u))
        {
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
        }
        else
        {
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2272;
            float _2406 = 0.0;
            float _2407 = 0.0;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            uint _2412 = 0u;
            uint _2421;
            bool _2422;
            for (;;)
            {
                _2421 = texelFetch(g_lightClassification, int((((_2154 << 5u) + (_2140 << 9u)) + (_2412 << 2u)) >> 2u)).x;
                _2422 = _2421 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2422)
                {
                    frontier_phi_61_pred = _2406;
                    frontier_phi_61_pred_1 = _2411;
                    frontier_phi_61_pred_2 = _2410;
                    frontier_phi_61_pred_3 = _2409;
                    frontier_phi_61_pred_4 = _2408;
                    frontier_phi_61_pred_5 = _2407;
                }
                else
                {
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    uint _2536;
                    _2530 = _2406;
                    _2531 = _2407;
                    _2532 = _2408;
                    _2533 = _2409;
                    _2534 = _2410;
                    _2535 = _2411;
                    _2536 = _2421;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    for (;;)
                    {
                        uint _2540 = uint(findLSB(_2536)) + (_2412 << 5u);
                        uint _2537 = (_2536 + 4294967295u) & _2536;
                        uint _2542 = _2540 * 48u;
                        vec4 _2556 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2542)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 3u)).x));
                        uint _2562 = (_2540 * 48u) + 4u;
                        vec4 _2575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2562)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 3u)).x));
                        uint _2581 = (_2540 * 48u) + 8u;
                        vec3 _2592 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2581)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 2u)).x));
                        float _2596 = _2556.x - _2114;
                        float _2597 = _2556.y - _2115;
                        float _2598 = _2556.z - _2116;
                        float _2599 = dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598));
                        float _2602 = inversesqrt(_2599);
                        float _2603 = _2602 * _2596;
                        float _2604 = _2602 * _2597;
                        float _2605 = _2602 * _2598;
                        float _2606 = dot(vec3(_389, _392, _395), vec3(_2603, _2604, _2605));
                        float _2611 = 1.0 - (_2599 * _2556.w);
                        float _3871 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2612 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2613 = sqrt(_2599) * _2575.w;
                        float _2616 = 1.39999997615814208984375 / (_2613 + 1.39999997615814208984375);
                        float _2617 = _2616 * _2616;
                        float _2620 = ((1.0 - _2617) * _2606) + _2617;
                        float _2623 = _2613 * _2613;
                        float _2627 = ((isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))) * _2612) / ((_2623 * 0.699999988079071044921875) + 1.0);
                        float _2631 = (-0.0) - _2114;
                        float _2632 = (-0.0) - _2115;
                        float _2633 = (-0.0) - _2116;
                        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
                        float _2638 = _2637 * _2631;
                        float _2639 = _2637 * _2632;
                        float _2640 = _2637 * _2633;
                        float _2648 = exp2(log2(1.0 / ((_2623 * 3.5) + 5.0)) * 0.25);
                        float _2649 = 1.0 - _449;
                        float _2656 = sqrt(1.0 - ((1.0 - (_2649 * _2649)) * (1.0 - (_2648 * _2648))));
                        float _2657 = _2656 * _2656;
                        float _2658 = _2657 * _2657;
                        float _2659 = _2638 + _2603;
                        float _2660 = _2639 + _2604;
                        float _2661 = _2640 + _2605;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2669 = dot(vec3(_389, _392, _395), vec3(_2638, _2639, _2640));
                        float _3887 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2672 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2673 = dot(vec3(_389, _392, _395), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661));
                        float _3898 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2676 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2680 = ((_2676 * _2676) * (_2658 + (-1.0))) + 1.0;
                        float _2681 = _2616 * _2657;
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * _2606) + _2682;
                        float _3909 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                        float _2687 = 1.0 - _2657;
                        float _2697 = (0.5 / (((_2686 * ((_2672 * _2687) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2687) + _2657) * _2672))) * _2686;
                        float _3920 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2708 = (((_2658 * 3.1415927410125732421875) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) / ((_2680 * _2680) * ((_2623 * 2.1991131305694580078125) + 3.141590118408203125))) * _2612;
                        _2465 = (_2627 * _2575.x) + _2533;
                        _2466 = (_2627 * _2575.y) + _2534;
                        _2467 = (_2627 * _2575.z) + _2535;
                        _2462 = (_2708 * _2592.x) + _2530;
                        _2463 = (_2708 * _2592.y) + _2531;
                        _2464 = (_2708 * _2592.z) + _2532;
                        if (_2537 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2530 = _2462;
                            _2531 = _2463;
                            _2532 = _2464;
                            _2533 = _2465;
                            _2534 = _2466;
                            _2535 = _2467;
                            _2536 = _2537;
                        }
                    }
                    frontier_phi_61_pred = _2462;
                    frontier_phi_61_pred_1 = _2467;
                    frontier_phi_61_pred_2 = _2466;
                    frontier_phi_61_pred_3 = _2465;
                    frontier_phi_61_pred_4 = _2464;
                    frontier_phi_61_pred_5 = _2463;
                }
                _2262 = frontier_phi_61_pred;
                _2272 = frontier_phi_61_pred_1;
                _2270 = frontier_phi_61_pred_2;
                _2268 = frontier_phi_61_pred_3;
                _2266 = frontier_phi_61_pred_4;
                _2264 = frontier_phi_61_pred_5;
                uint _2413 = _2412 + 1u;
                if (_2413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2406 = _2262;
                    _2407 = _2264;
                    _2408 = _2266;
                    _2409 = _2268;
                    _2410 = _2270;
                    _2411 = _2272;
                    _2412 = _2413;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
        }
        uvec4 _2275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2276 = _2275.z;
        uint _2278 = (_2276 >> 8u) & 15u;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((4294967295u << _2278) & _2160) == 0u)
        {
            _2374 = _2261;
            _2376 = _2263;
            _2378 = _2265;
            _2380 = _2267;
            _2382 = _2269;
            _2384 = _2271;
        }
        else
        {
            float _2399 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
            float _2400 = _2399 * _2114;
            float _2401 = _2399 * _2115;
            float _2402 = _2399 * _2116;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2278 < ((_2276 >> 12u) & 15u))
            {
                float _2375;
                float _2377;
                float _2379;
                float _2381;
                float _2383;
                float _2385;
                float _2513 = _2261;
                float _2514 = _2263;
                float _2515 = _2265;
                float _2516 = _2267;
                float _2517 = _2269;
                float _2518 = _2271;
                uint _2519 = _2278;
                uint _2528;
                bool _2529;
                for (;;)
                {
                    _2528 = texelFetch(g_lightClassification, int((((_2154 << 5u) + (_2140 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                    _2529 = _2528 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2529)
                    {
                        frontier_phi_67_pred = _2516;
                        frontier_phi_67_pred_1 = _2517;
                        frontier_phi_67_pred_2 = _2518;
                        frontier_phi_67_pred_3 = _2515;
                        frontier_phi_67_pred_4 = _2514;
                        frontier_phi_67_pred_5 = _2513;
                    }
                    else
                    {
                        float _2713;
                        float _2714;
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _2726 = _2513;
                        float _2727 = _2514;
                        float _2728 = _2515;
                        float _2729 = _2516;
                        float _2730 = _2517;
                        float _2731 = _2518;
                        uint _2732 = _2528;
                        uint _2733;
                        vec4 _2758;
                        float _2759;
                        vec4 _2774;
                        vec3 _2786;
                        vec4 _2802;
                        vec4 _2818;
                        float _2865;
                        bool _2866;
                        for (;;)
                        {
                            uint _2743 = ((_2519 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2732));
                            _2733 = (_2732 + 4294967295u) & _2732;
                            uint _2745 = _2743 * 40u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            _2759 = _2758.w;
                            uint _2761 = (_2743 * 40u) + 4u;
                            _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            uint _2776 = (_2743 * 40u) + 8u;
                            _2786 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x));
                            uint _2789 = (_2743 * 40u) + 16u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            uint _2805 = (_2743 * 40u) + 20u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2821 = (_2743 * 40u) + 24u;
                            vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2840 = (_2743 * 40u) + 28u;
                            vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2865 = fma(_2116, _2853.z, fma(_2115, _2853.y, _2853.x * _2114)) + _2853.w;
                            _2866 = !((fma(_2116, _2834.z, fma(_2115, _2834.y, _2834.x * _2114)) + _2834.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2866)
                            {
                                float _2893 = _2758.x - _2114;
                                float _2894 = _2758.y - _2115;
                                float _2895 = _2758.z - _2116;
                                float _2896 = dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895));
                                float _2899 = inversesqrt(_2896);
                                float _2900 = _2899 * _2893;
                                float _2901 = _2899 * _2894;
                                float _2902 = _2899 * _2895;
                                float _2906 = 1.0 - (_2896 / (_2759 * _2759));
                                float _3931 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _2911 = sqrt(_2896) * _2774.w;
                                float _2913 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                                float _2914 = _2913 * _2913;
                                float _2917 = ((1.0 - _2914) * dot(vec3(_2900, _2901, _2902), vec3(_389, _392, _395))) + _2914;
                                float _2920 = _2911 * _2911;
                                float _2924 = (fma(_2116, _2802.z, fma(_2115, _2802.y, _2802.x * _2114)) + _2802.w) / _2865;
                                float _2925 = (fma(_2116, _2818.z, fma(_2115, _2818.y, _2818.x * _2114)) + _2818.w) / _2865;
                                float _2929 = 1.0 - dot(vec2(_2924, _2925), vec2(_2924, _2925));
                                float _3947 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2930 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _2931 = _2930 * (((isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))) * _2907) / ((_2920 * 0.699999988079071044921875) + 1.0));
                                float _2943 = exp2(log2(1.0 / ((_2920 * 3.5) + 5.0)) * 0.25);
                                float _2944 = 1.0 - _449;
                                float _2951 = sqrt(1.0 - ((1.0 - (_2944 * _2944)) * (1.0 - (_2943 * _2943))));
                                float _2952 = _2951 * _2951;
                                float _2953 = _2952 * _2952;
                                float _2954 = _2900 - _2400;
                                float _2955 = _2901 - _2401;
                                float _2956 = _2902 - _2402;
                                float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                                float _2964 = dot(vec3(_389, _392, _395), vec3((-0.0) - _2400, (-0.0) - _2401, (-0.0) - _2402));
                                float _3958 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2967 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _2968 = dot(vec3(_389, _392, _395), vec3(_2960 * _2954, _2960 * _2955, _2960 * _2956));
                                float _3969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2971 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                                float _2975 = ((_2971 * _2971) * (_2953 + (-1.0))) + 1.0;
                                float _2976 = _2913 * _2952;
                                float _2977 = _2976 * _2976;
                                float _2983 = ((1.0 - _2977) * dot(vec3(_389, _392, _395), vec3(_2900, _2901, _2902))) + _2977;
                                float _3980 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                                float _2985 = 1.0 - _2952;
                                float _2995 = (0.5 / (((_2984 * ((_2967 * _2985) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2952) * _2967))) * _2984;
                                float _3991 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _3005 = (_2930 * _2907) * (((_2953 * 3.1415927410125732421875) * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) / ((_2975 * _2975) * ((_2920 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3005 * _2786.x;
                                frontier_phi_73_pred_1 = _3005 * _2786.y;
                                frontier_phi_73_pred_2 = _2931 * _2774.z;
                                frontier_phi_73_pred_3 = _2931 * _2774.y;
                                frontier_phi_73_pred_4 = _2931 * _2774.x;
                                frontier_phi_73_pred_5 = _3005 * _2786.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3009 = frontier_phi_73_pred;
                            _3010 = frontier_phi_73_pred_1;
                            _3014 = frontier_phi_73_pred_2;
                            _3013 = frontier_phi_73_pred_3;
                            _3012 = frontier_phi_73_pred_4;
                            _3011 = frontier_phi_73_pred_5;
                            _2716 = _3012 + _2729;
                            _2717 = _3013 + _2730;
                            _2718 = _3014 + _2731;
                            _2713 = _3009 + _2726;
                            _2714 = _3010 + _2727;
                            _2715 = _3011 + _2728;
                            if (_2733 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2733;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2716;
                        frontier_phi_67_pred_1 = _2717;
                        frontier_phi_67_pred_2 = _2718;
                        frontier_phi_67_pred_3 = _2715;
                        frontier_phi_67_pred_4 = _2714;
                        frontier_phi_67_pred_5 = _2713;
                    }
                    _2381 = frontier_phi_67_pred;
                    _2383 = frontier_phi_67_pred_1;
                    _2385 = frontier_phi_67_pred_2;
                    _2379 = frontier_phi_67_pred_3;
                    _2377 = frontier_phi_67_pred_4;
                    _2375 = frontier_phi_67_pred_5;
                    uint _2520 = _2519 + 1u;
                    if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2513 = _2375;
                        _2514 = _2377;
                        _2515 = _2379;
                        _2516 = _2381;
                        _2517 = _2383;
                        _2518 = _2385;
                        _2519 = _2520;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2383;
                frontier_phi_55_56_ladder_1 = _2385;
                frontier_phi_55_56_ladder_2 = _2381;
                frontier_phi_55_56_ladder_3 = _2379;
                frontier_phi_55_56_ladder_4 = _2377;
                frontier_phi_55_56_ladder_5 = _2375;
            }
            else
            {
                frontier_phi_55_56_ladder = _2269;
                frontier_phi_55_56_ladder_1 = _2271;
                frontier_phi_55_56_ladder_2 = _2267;
                frontier_phi_55_56_ladder_3 = _2265;
                frontier_phi_55_56_ladder_4 = _2263;
                frontier_phi_55_56_ladder_5 = _2261;
            }
            _2374 = frontier_phi_55_56_ladder_5;
            _2376 = frontier_phi_55_56_ladder_4;
            _2378 = frontier_phi_55_56_ladder_3;
            _2380 = frontier_phi_55_56_ladder_2;
            _2382 = frontier_phi_55_56_ladder;
            _2384 = frontier_phi_55_56_ladder_1;
        }
        float _2389 = isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0));
        _2173 = (_2389 * _2380) + _1625;
        _2175 = (_2389 * _2382) + _1627;
        _2177 = (_2389 * _2384) + _1629;
        _2179 = ((_2374 * 0.039999999105930328369140625) * _2389) + _1958;
        _2181 = ((_2376 * 0.039999999105930328369140625) * _2389) + _1960;
        _2183 = ((_2378 * 0.039999999105930328369140625) * _2389) + _1962;
    }
    else
    {
        _2173 = _1625;
        _2175 = _1627;
        _2177 = _1629;
        _2179 = _1958;
        _2181 = _1960;
        _2183 = _1962;
    }
    float _4007 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _4018 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _4029 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    uint _2203 = _408 + 6u;
    float _2211 = _367 / cbSceneParam._m0[86u].x;
    float _2212 = _368 / cbSceneParam._m0[86u].y;
    vec4 _2226 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2211, _2212, (log2((isnan(cbSceneParam._m0[77u].w) ? _299 : (isnan(_299) ? cbSceneParam._m0[77u].w : min(_299, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2228 = _2226.x;
    float _2229 = _2226.y;
    float _2230 = _2226.z;
    float _2231 = _2226.w;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    if (_299 > cbSceneParam._m0[78u].w)
    {
        float _2286 = isnan(_299) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _299 : min(cbSceneParam._m0[80u].w, _299));
        float _2287 = _2286 / _299;
        float _2298 = _2287 * _352;
        float _2299 = _353 * _2287;
        float _2300 = (-0.0) - _2299;
        float _2302 = _2287 * _354;
        float _2304 = (cbSceneParam._m0[77u].w * _2300) / _2286;
        float _2305 = _2304 + cbSceneParam._m0[79u].w;
        float _2306 = cbSceneParam._m0[79u].w - _2299;
        float _2312 = sqrt(((_2298 * _2298) + (_2299 * _2299)) + (_2302 * _2302));
        float _2315 = (1.0 - (cbSceneParam._m0[77u].w / _2286)) * _2312;
        float _2320 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2322 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2475;
        if (abs((_2300 - _2304) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2475 = ((((_2305 > 0.0) ? exp2(_2320 * _2305) : (2.0 - exp2(_2322 * _2305))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2315;
        }
        else
        {
            float _2435 = 1.0 / cbSceneParam._m0[80u].x;
            float _2436 = isnan(_2306) ? _2305 : (isnan(_2305) ? _2306 : max(_2305, _2306));
            float _2437 = isnan(_2306) ? _2305 : (isnan(_2305) ? _2306 : min(_2305, _2306));
            float _2446 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : min(_2436, 0.0));
            float _2447 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : min(_2437, 0.0));
            _2475 = ((abs(_2312 / _2300) * cbSceneParam._m0[80u].y) * ((((_2446 - _2447) * 2.0) - ((exp2(_2320 * (isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0)))) - exp2(_2320 * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0))))) * _2435)) - ((exp2(_2322 * _2446) - exp2(_2322 * _2447)) * _2435))) + (_2315 * cbSceneParam._m0[80u].z);
        }
        vec4 _2477 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2211, _2212, 1.0), 0.0);
        float _2486 = exp2((_2475 * (-1.44269502162933349609375)) * (1.0 - _2477.w));
        float _2487 = log2(_2486);
        float _2503 = log2(_2231);
        _2324 = (exp2(_2503 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2487 * cbSceneParam._m0[78u].x)) * _2477.x) / cbSceneParam._m0[78u].x)) + _2228;
        _2326 = (exp2(_2503 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2487 * cbSceneParam._m0[78u].y)) * _2477.y) / cbSceneParam._m0[78u].y)) + _2229;
        _2328 = (exp2(_2503 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2487 * cbSceneParam._m0[78u].z)) * _2477.z) / cbSceneParam._m0[78u].z)) + _2230;
        _2330 = _2486 * _2231;
    }
    else
    {
        _2324 = _2228;
        _2326 = _2229;
        _2328 = _2230;
        _2330 = _2231;
    }
    float _2342 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2343 = _2342 == 3.0;
    float _2344 = log2(_2330);
    float _2351 = exp2(_2344 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2173 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _433))) + ((_2179 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1240)) * cbPerFrame._m0[3u].x));
    float _2352 = exp2(_2344 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2175 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _433))) + ((_2181 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1240)) * cbPerFrame._m0[3u].x));
    float _2353 = exp2(_2344 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2177 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _433))) + ((_2183 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1240)) * cbPerFrame._m0[3u].x));
    float _2362 = (_2342 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2362 * (_2343 ? _2351 : (_2351 + (cbSceneParam._m0[72u].w * _2324)));
    SV_Target.y = _2362 * (_2343 ? _2352 : (_2352 + (cbSceneParam._m0[72u].w * _2326)));
    SV_Target.z = _2362 * (_2343 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2328)));
    SV_Target.w = cbInstanceData._m0[_2203].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2203].w;
}


