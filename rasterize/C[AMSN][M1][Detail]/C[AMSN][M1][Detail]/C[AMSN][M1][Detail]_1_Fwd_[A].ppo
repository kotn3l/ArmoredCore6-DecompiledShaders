#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _955;
float _3323;
float _3324;
float _3325;
float _3326;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _298 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3335 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _306 = (_299 * ((_267.x * cbMtdParam._m0[10u].x) - _242)) + _242;
    float _307 = (_299 * ((_267.y * cbMtdParam._m0[10u].y) - _243)) + _243;
    float _308 = (_299 * ((_267.z * cbMtdParam._m0[10u].z) - _244)) + _244;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = (_325.x * 2.0) + (-1.0);
    float _335 = (_325.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_333, _335), vec2(_333, _335));
    float _3346 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))));
    float _342 = _325.z * cbMtdParam._m0[12u].y;
    vec4 _355 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _369 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_355.z * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _375 = ((((_355.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _333;
    float _376 = ((((_355.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _335;
    float _379 = fma(_341, _206 * NORMAL.x, fma(_376, _213 * TANGENT.x, (_199 * _191) * _375));
    float _382 = fma(_341, _206 * NORMAL.y, fma(_376, _213 * TANGENT.y, (_199 * _192) * _375));
    float _385 = fma(_341, _206 * NORMAL.z, fma(_376, _213 * TANGENT.z, (_199 * _193) * _375));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3357 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _393 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3379 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3390 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    vec4 _477 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _479 = _477.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_463 * _463) + (_464 * _464)) + (_465 * _465));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3401 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3412 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) - _642)) + _642) < ((_479 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _511 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _514 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _517 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _530 = uint(roundEven(NORMAL.w)) * 13u;
    uint _531 = _530 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3423 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _555 = _552.x * TEXCOORD_5.w;
    float _556 = dot(vec3(_390, _391, _392), vec3(_470, _471, _472));
    float _559 = _556 * 2.0;
    float _563 = (_559 * _390) - _470;
    float _564 = (_559 * _391) - _471;
    float _565 = (_559 * _392) - _472;
    float _569 = abs(dot(vec3(_470, _471, _472), vec3(_390, _391, _392)));
    float _3456 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _571 = sqrt(_393);
    float _584 = exp2((_571 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _954;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _679 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _683 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _687 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _712 = _616 + _390;
        float _713 = _620 + _391;
        float _714 = _624 + _392;
        float _724 = fma(_714, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712)) - _679;
        float _725 = fma(_714, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712)) - _683;
        float _726 = fma(_714, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712)) - _687;
        float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
        float _743 = ((_730 * _724) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_679 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_730 * _725) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_683 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_730 * _726) / cbModelParam._m0[34u].z) + ((((((_687 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        float _782 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_748.x + (-0.5));
        float _784 = _782 * (_748.y + (-0.5));
        float _785 = _782 * (_748.z + (-0.5));
        float _792 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_755.x + (-0.5));
        float _794 = _792 * (_755.y + (-0.5));
        float _795 = _792 * (_755.z + (-0.5));
        float _802 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_762.x + (-0.5));
        float _804 = _802 * (_762.y + (-0.5));
        float _805 = _802 * (_762.z + (-0.5));
        float _812 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_769.x + (-0.5));
        float _814 = _812 * (_769.y + (-0.5));
        float _815 = _812 * (_769.z + (-0.5));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = _783 * 0.5;
        float _820 = _793 * 0.5;
        float _821 = _803 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _836 = (dot(vec3(_390, _391, _392), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _846 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3504 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_848 + 1.0))) + _853) * _816;
        float _863 = _784 * 0.5;
        float _864 = _794 * 0.5;
        float _865 = _804 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_390, _391, _392), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3537 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_890 + 1.0))) + _895) * _817;
        float _905 = _785 * 0.5;
        float _906 = _795 * 0.5;
        float _907 = _805 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_390, _391, _392), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3570 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_932 + 1.0))) + _937) * _818;
        _954 = _785;
        _956 = _784;
        _957 = _783;
        _958 = _795;
        _959 = _794;
        _960 = _793;
        _961 = _805;
        _962 = _804;
        _963 = _803;
        _964 = _818;
        _965 = _817;
        _966 = _816;
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
    }
    else
    {
        _954 = _955;
        _956 = _955;
        _957 = _955;
        _958 = _955;
        _959 = _955;
        _960 = _955;
        _961 = _955;
        _962 = _955;
        _963 = _955;
        _964 = _955;
        _965 = _955;
        _966 = _955;
        _967 = 0.0;
        _968 = 0.0;
        _969 = 0.0;
    }
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _998 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1002 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1006 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1029 = _616 + _390;
        float _1030 = _620 + _391;
        float _1031 = _624 + _392;
        float _1041 = fma(_1031, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_998 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1002 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[35u].z) + ((((((_1006 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1097 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1064.x + (-0.5));
        float _1099 = _1097 * (_1064.y + (-0.5));
        float _1100 = _1097 * (_1064.z + (-0.5));
        float _1107 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1071.x + (-0.5));
        float _1109 = _1107 * (_1071.y + (-0.5));
        float _1110 = _1107 * (_1071.z + (-0.5));
        float _1117 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1078.x + (-0.5));
        float _1119 = _1117 * (_1078.y + (-0.5));
        float _1120 = _1117 * (_1078.z + (-0.5));
        float _1127 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1085.x + (-0.5));
        float _1129 = _1127 * (_1085.y + (-0.5));
        float _1130 = _1127 * (_1085.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_390, _391, _392), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3633 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1161 + 1.0))) + _1166) * _1131;
        float _1176 = _1099 * 0.5;
        float _1177 = _1109 * 0.5;
        float _1178 = _1119 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_390, _391, _392), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3666 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1203 + 1.0))) + _1208) * _1132;
        float _1218 = _1100 * 0.5;
        float _1219 = _1110 * 0.5;
        float _1220 = _1120 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_390, _391, _392), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3699 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1245 + 1.0))) + _1250) * _1133;
        _1267 = _1100;
        _1268 = _1099;
        _1269 = _1098;
        _1270 = _1110;
        _1271 = _1109;
        _1272 = _1108;
        _1273 = _1120;
        _1274 = _1119;
        _1275 = _1118;
        _1276 = _1133;
        _1277 = _1132;
        _1278 = _1131;
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _955;
        _1268 = _955;
        _1269 = _955;
        _1270 = _955;
        _1271 = _955;
        _1272 = _955;
        _1273 = _955;
        _1274 = _955;
        _1275 = _955;
        _1276 = _955;
        _1277 = _955;
        _1278 = _955;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1314 = fma(_1293, cbSceneParam._m0[89u].z, fma(_1292, cbSceneParam._m0[89u].y, _1291 * cbSceneParam._m0[89u].x));
    float _1317 = fma(_1293, cbSceneParam._m0[90u].z, fma(_1292, cbSceneParam._m0[90u].y, _1291 * cbSceneParam._m0[90u].x));
    float _1320 = fma(_1293, cbSceneParam._m0[91u].z, fma(_1292, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1291));
    float _1335 = _563 * 0.5;
    float _1336 = _564 * 0.5;
    float _1337 = _565 * 0.5;
    float _1338 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1341 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1344 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1378;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1351 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_954, _958, _961, _964));
        float _1355 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_956, _959, _962, _965));
        float _1359 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_957, _960, _963, _966));
        float _1366 = dot(vec4(cbModelParam._m0[39u]), vec4(_1335, _1336, _1337, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1389;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1380 = dot(vec4(cbModelParam._m0[40u]), vec4(_1335, _1336, _1337, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1393 = (_1389 * cbModelParam._m0[1u].x) + (_1378 * (1.0 - cbModelParam._m0[1u].x));
    float _1403 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1403 : min(cbModelParam._m0[25u].z, _1403));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_565, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563));
        float _1467 = fma(_565, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563));
        float _1470 = fma(_565, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1498 = frontier_phi_17_15_ladder;
        }
        float _1702;
        if (_1467 > 0.0)
        {
            _1702 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1702 = frontier_phi_26_22_ladder;
        }
        float _1945;
        if (_1470 > 0.0)
        {
            _1945 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1945 = frontier_phi_38_33_ladder;
        }
        float _1947 = isnan(_1702) ? _1498 : (isnan(_1498) ? _1702 : min(_1498, _1702));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1464) + _1453;
        float _1953 = (_1948 * _1467) + _1457;
        float _1954 = (_1948 * _1470) + _1461;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1404);
            frontier_phi_16_38_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_16_38_ladder_2;
        _1488 = frontier_phi_16_38_ladder_1;
        _1490 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_563, _564, _565), _1404);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1552 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1556 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1560 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1563 = fma(_565, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563));
        float _1566 = fma(_565, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563));
        float _1569 = fma(_565, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563));
        float _1707;
        if (_1563 > 0.0)
        {
            _1707 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1707 = frontier_phi_28_24_ladder;
        }
        float _1972;
        if (_1566 > 0.0)
        {
            _1972 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1972 = frontier_phi_40_35_ladder;
        }
        float _2177;
        if (_1569 > 0.0)
        {
            _2177 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2177 = frontier_phi_49_46_ladder;
        }
        float _2179 = isnan(_1972) ? _1707 : (isnan(_1707) ? _1972 : min(_1707, _1972));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1563) + _1552;
        float _2185 = (_2180 * _1566) + _1556;
        float _2186 = (_2180 * _1569) + _1560;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_25_49_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1588 = frontier_phi_25_49_ladder_2;
        _1590 = frontier_phi_25_49_ladder_1;
        _1592 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_563, _564, _565), _1495);
        _1588 = _1572.x * cbModelParam._m0[1u].z;
        _1590 = _1572.y * cbModelParam._m0[1u].z;
        _1592 = _1572.z * cbModelParam._m0[1u].z;
    }
    float _1604 = ((((1.0 - _584) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_584 * _571)) * _555;
    float _1605 = _1604 * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1606 = _1604 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1607 = _1604 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1610 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1605 * cbSceneParam._m0[91u].x));
    uvec4 _1626 = floatBitsToUint(cbInstanceData._m0[_530 + 5u]);
    uint _1628 = _1626.x * 14u;
    uint _1629 = _1628 + 13u;
    float _1636 = _555 + (-1.0);
    float _1641 = (cbLight._m0[_1629].x * _1636) + 1.0;
    float _1642 = (cbLight._m0[_1629].y * _1636) + 1.0;
    float _1643 = (cbLight._m0[_1629].z * _1636) + 1.0;
    float _1644 = (cbLight._m0[_1629].w * _1636) + 1.0;
    uint _1645 = _1628 + 5u;
    float _1651 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1655 = _1628 + 4u;
    float _1661 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1665 = _1628 | 1u;
    float _1676 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_390, _391, _392));
    float _1679 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_390, _391, _392));
    float _3835 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _3846 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1684 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1686 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1693 = ((cbLight._m0[_1645].x * _1651) * _1686) + ((cbLight._m0[_1655].x * _1661) * _1684);
    float _1694 = ((_1651 * cbLight._m0[_1645].y) * _1686) + ((_1661 * cbLight._m0[_1655].y) * _1684);
    float _1695 = ((_1651 * cbLight._m0[_1645].z) * _1686) + ((_1661 * cbLight._m0[_1655].z) * _1684);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1628 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1693;
        _1714 = _1694;
        _1716 = _1695;
    }
    else
    {
        uint _1720 = _1628 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1628 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3857 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1739 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1695;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1916 = _1628 + 7u;
        float _1932 = (dot(vec3(cbLight._m0[_1628 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _3873 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1935 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1757 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1712;
        _1759 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1714;
        _1761 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1716;
    }
    uint _1764 = _1628 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1628].w)) * _393) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1628].x + _470;
    float _1780 = cbLight._m0[_1628].y + _471;
    float _1781 = cbLight._m0[_1628].z + _472;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1628].xyz));
    float _3889 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1793 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1794 = dot(vec3(_390, _391, _392), vec3(_1786, _1787, _1788));
    float _3911 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_1786, _1787, _1788));
    float _3922 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1818 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1793 * ((_1792 * _1818) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1818) + _1778) * _1792))) * _1792;
    float _3933 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1842 = _1628 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1665].w)) * _393) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1665].x + _470;
    float _1856 = cbLight._m0[_1665].y + _471;
    float _1857 = cbLight._m0[_1665].z + _472;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1665].xyz));
    float _3944 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1869 = dot(vec3(_390, _391, _392), vec3(_1862, _1863, _1864));
    float _3955 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_1862, _1863, _1864));
    float _3966 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1854;
    float _1901 = (0.5 / (((_1793 * ((_1868 * _1891) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1891) + _1854) * _1868))) * _1868;
    float _3977 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1913 = (((_1890 * cbLight._m0[_1842].x) * _1903) * _1651) + (((_1817 * cbLight._m0[_1764].x) * _1831) * _1661);
    float _1914 = (((_1890 * cbLight._m0[_1842].y) * _1903) * _1651) + (((_1817 * cbLight._m0[_1764].y) * _1831) * _1661);
    float _1915 = (((_1890 * cbLight._m0[_1842].z) * _1903) * _1651) + (((_1817 * cbLight._m0[_1764].z) * _1831) * _1661);
    float _1977;
    float _1979;
    float _1981;
    if (_1701)
    {
        _1977 = _1913;
        _1979 = _1914;
        _1981 = _1915;
    }
    else
    {
        uint _1983 = _1628 + 2u;
        uint _1987 = _1628 + 10u;
        float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _393) * 0.949999988079071044921875);
        float _2002 = _2001 * _2001;
        float _2003 = cbLight._m0[_1983].x + _470;
        float _2004 = cbLight._m0[_1983].y + _471;
        float _2005 = cbLight._m0[_1983].z + _472;
        float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
        float _2010 = _2009 * _2003;
        float _2011 = _2009 * _2004;
        float _2012 = _2009 * _2005;
        float _2013 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1983].xyz));
        float _3988 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2017 = dot(vec3(_390, _391, _392), vec3(_2010, _2011, _2012));
        float _3999 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2021 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2010, _2011, _2012));
        float _4010 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2025 = _2002 * _2002;
        float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
        float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2039 = 1.0 - _2002;
        float _2049 = (0.5 / (((_1793 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2039) + _2002) * _2016))) * _2016;
        float _4021 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2051 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
        float _2052 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1977 = (((_2038 * cbLight._m0[_1987].x) * _2051) * _2052) + _1913;
        _1979 = (((_2038 * cbLight._m0[_1987].y) * _2051) * _2052) + _1914;
        _1981 = (((_2038 * cbLight._m0[_1987].z) * _2051) * _2052) + _1915;
    }
    float _2087;
    float _2089;
    float _2091;
    if (_1719)
    {
        _2087 = _1977;
        _2089 = _1979;
        _2091 = _1981;
    }
    else
    {
        uint _2098 = _1628 + 3u;
        uint _2102 = _1628 + 11u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _393) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _470;
        float _2119 = cbLight._m0[_2098].y + _471;
        float _2120 = cbLight._m0[_2098].z + _472;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2098].xyz));
        float _4037 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2132 = dot(vec3(_390, _391, _392), vec3(_2125, _2126, _2127));
        float _4048 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4059 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = 1.0 - _2117;
        float _2164 = (0.5 / (((_1793 * ((_2131 * _2154) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2154) + _2117) * _2131))) * _2131;
        float _4070 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _2087 = (((_2153 * cbLight._m0[_2102].x) * _2166) * _2167) + _1977;
        _2089 = (((_2153 * cbLight._m0[_2102].y) * _2166) * _2167) + _1979;
        _2091 = (((_2153 * cbLight._m0[_2102].z) * _2166) * _2167) + _1981;
    }
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    if (_1626.y == 0u)
    {
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2242;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2242;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2242;
        uvec4 _2257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2258 = _2257.x;
        uint _2269 = uint((float(_2257.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2258))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2258)));
        float _2279 = (log2(_2245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        uint _2283 = uint(isnan(14.0) ? _2280 : (isnan(_2280) ? 14.0 : min(_2280, 14.0)));
        uvec4 _2288 = texelFetch(g_lightClusterGridBuffer, int(((_2283 << 2u) + (_2269 << 6u)) >> 2u));
        uint _2289 = _2288.x;
        uint _2290 = _2257.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2290 >> 4u) & 15u)) + 4294967295u) & _2289) == 0u) || ((_2290 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2559)
                {
                    frontier_phi_66_pred = _2543;
                    frontier_phi_66_pred_1 = _2548;
                    frontier_phi_66_pred_2 = _2547;
                    frontier_phi_66_pred_3 = _2546;
                    frontier_phi_66_pred_4 = _2545;
                    frontier_phi_66_pred_5 = _2544;
                }
                else
                {
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    uint _2694;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2558;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    for (;;)
                    {
                        uint _2698 = uint(findLSB(_2694)) + (_2549 << 5u);
                        uint _2695 = (_2694 + 4294967295u) & _2694;
                        uint _2700 = _2698 * 48u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2720 = (_2698 * 48u) + 4u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 3u)).x));
                        uint _2739 = (_2698 * 48u) + 8u;
                        vec3 _2750 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x));
                        float _2754 = _2714.x - _2243;
                        float _2755 = _2714.y - _2244;
                        float _2756 = _2714.z - _2245;
                        float _2757 = dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756));
                        float _2760 = inversesqrt(_2757);
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2764 = dot(vec3(_511, _514, _517), vec3(_2761, _2762, _2763));
                        float _2769 = 1.0 - (_2757 * _2714.w);
                        float _4096 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2770 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2771 = sqrt(_2757) * _2733.w;
                        float _2774 = 1.39999997615814208984375 / (_2771 + 1.39999997615814208984375);
                        float _2775 = _2774 * _2774;
                        float _2778 = ((1.0 - _2775) * _2764) + _2775;
                        float _2781 = _2771 * _2771;
                        float _2785 = ((isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))) * _2770) / ((_2781 * 0.699999988079071044921875) + 1.0);
                        float _2789 = (-0.0) - _2243;
                        float _2790 = (-0.0) - _2244;
                        float _2791 = (-0.0) - _2245;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2806 = exp2(log2(1.0 / ((_2781 * 3.5) + 5.0)) * 0.25);
                        float _2807 = 1.0 - _571;
                        float _2814 = sqrt(1.0 - ((1.0 - (_2807 * _2807)) * (1.0 - (_2806 * _2806))));
                        float _2815 = _2814 * _2814;
                        float _2816 = _2815 * _2815;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2827 = dot(vec3(_511, _514, _517), vec3(_2796, _2797, _2798));
                        float _4112 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2831 = dot(vec3(_511, _514, _517), vec3(_2823 * _2817, _2823 * _2818, _2823 * _2819));
                        float _4123 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2838 = ((_2834 * _2834) * (_2816 + (-1.0))) + 1.0;
                        float _2839 = _2774 * _2815;
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2764) + _2840;
                        float _4134 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2845 = 1.0 - _2815;
                        float _2855 = (0.5 / (((_2844 * ((_2830 * _2845) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2844 * _2845) + _2815) * _2830))) * _2844;
                        float _4145 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2866 = (((_2816 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_2838 * _2838) * ((_2781 * 2.1991131305694580078125) + 3.141590118408203125))) * _2770;
                        _2618 = (_2785 * _2733.x) + _2691;
                        _2619 = (_2785 * _2733.y) + _2692;
                        _2620 = (_2785 * _2733.z) + _2693;
                        _2615 = (_2866 * _2750.x) + _2688;
                        _2616 = (_2866 * _2750.y) + _2689;
                        _2617 = (_2866 * _2750.z) + _2690;
                        if (_2695 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2695;
                        }
                    }
                    frontier_phi_66_pred = _2615;
                    frontier_phi_66_pred_1 = _2620;
                    frontier_phi_66_pred_2 = _2619;
                    frontier_phi_66_pred_3 = _2618;
                    frontier_phi_66_pred_4 = _2617;
                    frontier_phi_66_pred_5 = _2616;
                }
                _2391 = frontier_phi_66_pred;
                _2401 = frontier_phi_66_pred_1;
                _2399 = frontier_phi_66_pred_2;
                _2397 = frontier_phi_66_pred_3;
                _2395 = frontier_phi_66_pred_4;
                _2393 = frontier_phi_66_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2391;
                    _2544 = _2393;
                    _2545 = _2395;
                    _2546 = _2397;
                    _2547 = _2399;
                    _2548 = _2401;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2407) & _2289) == 0u)
        {
            _2511 = _2390;
            _2513 = _2392;
            _2515 = _2394;
            _2517 = _2396;
            _2519 = _2398;
            _2521 = _2400;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
            float _2537 = _2536 * _2243;
            float _2538 = _2536 * _2244;
            float _2539 = _2536 * _2245;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2671 = _2390;
                float _2672 = _2392;
                float _2673 = _2394;
                float _2674 = _2396;
                float _2675 = _2398;
                float _2676 = _2400;
                uint _2677 = _2407;
                uint _2686;
                bool _2687;
                for (;;)
                {
                    _2686 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                    _2687 = _2686 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2687)
                    {
                        frontier_phi_77_pred = _2676;
                        frontier_phi_77_pred_1 = _2675;
                        frontier_phi_77_pred_2 = _2674;
                        frontier_phi_77_pred_3 = _2673;
                        frontier_phi_77_pred_4 = _2672;
                        frontier_phi_77_pred_5 = _2671;
                    }
                    else
                    {
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        uint _2899 = _2686;
                        uint _2900;
                        vec4 _2925;
                        float _2926;
                        vec4 _2941;
                        vec3 _2953;
                        vec4 _2969;
                        vec4 _2985;
                        float _3032;
                        bool _3033;
                        for (;;)
                        {
                            uint _2910 = ((_2677 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2899));
                            _2900 = (_2899 + 4294967295u) & _2899;
                            uint _2912 = _2910 * 40u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2926 = _2925.w;
                            uint _2928 = (_2910 * 40u) + 4u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2910 * 40u) + 8u;
                            _2953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x));
                            uint _2956 = (_2910 * 40u) + 16u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2972 = (_2910 * 40u) + 20u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2988 = (_2910 * 40u) + 24u;
                            vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3007 = (_2910 * 40u) + 28u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            _3032 = fma(_2245, _3020.z, fma(_2244, _3020.y, _3020.x * _2243)) + _3020.w;
                            _3033 = !((fma(_2245, _3001.z, fma(_2244, _3001.y, _3001.x * _2243)) + _3001.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3033)
                            {
                                float _3060 = _2925.x - _2243;
                                float _3061 = _2925.y - _2244;
                                float _3062 = _2925.z - _2245;
                                float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                                float _3066 = inversesqrt(_3063);
                                float _3067 = _3066 * _3060;
                                float _3068 = _3066 * _3061;
                                float _3069 = _3066 * _3062;
                                float _3073 = 1.0 - (_3063 / (_2926 * _2926));
                                float _4156 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3078 = sqrt(_3063) * _2941.w;
                                float _3080 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                                float _3081 = _3080 * _3080;
                                float _3084 = ((1.0 - _3081) * dot(vec3(_3067, _3068, _3069), vec3(_511, _514, _517))) + _3081;
                                float _3087 = _3078 * _3078;
                                float _3091 = (fma(_2245, _2969.z, fma(_2244, _2969.y, _2969.x * _2243)) + _2969.w) / _3032;
                                float _3092 = (fma(_2245, _2985.z, fma(_2244, _2985.y, _2985.x * _2243)) + _2985.w) / _3032;
                                float _3096 = 1.0 - dot(vec2(_3091, _3092), vec2(_3091, _3092));
                                float _4172 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3098 = _3097 * (((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3074) / ((_3087 * 0.699999988079071044921875) + 1.0));
                                float _3110 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                                float _3111 = 1.0 - _571;
                                float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                                float _3119 = _3118 * _3118;
                                float _3120 = _3119 * _3119;
                                float _3121 = _3067 - _2537;
                                float _3122 = _3068 - _2538;
                                float _3123 = _3069 - _2539;
                                float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                                float _3131 = dot(vec3(_511, _514, _517), vec3((-0.0) - _2537, (-0.0) - _2538, (-0.0) - _2539));
                                float _4183 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3135 = dot(vec3(_511, _514, _517), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                                float _4194 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                                float _3143 = _3080 * _3119;
                                float _3144 = _3143 * _3143;
                                float _3150 = ((1.0 - _3144) * dot(vec3(_511, _514, _517), vec3(_3067, _3068, _3069))) + _3144;
                                float _4205 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3152 = 1.0 - _3119;
                                float _3162 = (0.5 / (((_3151 * ((_3134 * _3152) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3119) * _3134))) * _3151;
                                float _4216 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3172 = (_3097 * _3074) * (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_3142 * _3142) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3098 * _2941.y;
                                frontier_phi_83_pred_1 = _3098 * _2941.x;
                                frontier_phi_83_pred_2 = _3172 * _2953.z;
                                frontier_phi_83_pred_3 = _3172 * _2953.y;
                                frontier_phi_83_pred_4 = _3172 * _2953.x;
                                frontier_phi_83_pred_5 = _3098 * _2941.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_83_pred;
                            _3179 = frontier_phi_83_pred_1;
                            _3178 = frontier_phi_83_pred_2;
                            _3177 = frontier_phi_83_pred_3;
                            _3176 = frontier_phi_83_pred_4;
                            _3181 = frontier_phi_83_pred_5;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            if (_2900 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2900;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2885;
                        frontier_phi_77_pred_1 = _2884;
                        frontier_phi_77_pred_2 = _2883;
                        frontier_phi_77_pred_3 = _2882;
                        frontier_phi_77_pred_4 = _2881;
                        frontier_phi_77_pred_5 = _2880;
                    }
                    _2522 = frontier_phi_77_pred;
                    _2520 = frontier_phi_77_pred_1;
                    _2518 = frontier_phi_77_pred_2;
                    _2516 = frontier_phi_77_pred_3;
                    _2514 = frontier_phi_77_pred_4;
                    _2512 = frontier_phi_77_pred_5;
                    uint _2678 = _2677 + 1u;
                    if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2671 = _2512;
                        _2672 = _2514;
                        _2673 = _2516;
                        _2674 = _2518;
                        _2675 = _2520;
                        _2676 = _2522;
                        _2677 = _2678;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2516;
                frontier_phi_58_59_ladder_1 = _2522;
                frontier_phi_58_59_ladder_2 = _2520;
                frontier_phi_58_59_ladder_3 = _2518;
                frontier_phi_58_59_ladder_4 = _2514;
                frontier_phi_58_59_ladder_5 = _2512;
            }
            else
            {
                frontier_phi_58_59_ladder = _2394;
                frontier_phi_58_59_ladder_1 = _2400;
                frontier_phi_58_59_ladder_2 = _2398;
                frontier_phi_58_59_ladder_3 = _2396;
                frontier_phi_58_59_ladder_4 = _2392;
                frontier_phi_58_59_ladder_5 = _2390;
            }
            _2511 = frontier_phi_58_59_ladder_5;
            _2513 = frontier_phi_58_59_ladder_4;
            _2515 = frontier_phi_58_59_ladder;
            _2517 = frontier_phi_58_59_ladder_3;
            _2519 = frontier_phi_58_59_ladder_2;
            _2521 = frontier_phi_58_59_ladder_1;
        }
        float _2526 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
        _2302 = (_2526 * _2517) + _1757;
        _2304 = (_2526 * _2519) + _1759;
        _2306 = (_2526 * _2521) + _1761;
        _2308 = ((_2511 * 0.039999999105930328369140625) * _2526) + _2087;
        _2310 = ((_2513 * 0.039999999105930328369140625) * _2526) + _2089;
        _2312 = ((_2515 * 0.039999999105930328369140625) * _2526) + _2091;
    }
    else
    {
        _2302 = _1757;
        _2304 = _1759;
        _2306 = _1761;
        _2308 = _2087;
        _2310 = _2089;
        _2312 = _2091;
    }
    float _4232 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4243 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4254 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _2329 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2302 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _555))) + ((_2308 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2304 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _555))) + ((_2310 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _2331 = ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2306 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _555))) + ((_2312 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    uint _2332 = _530 + 6u;
    float _2340 = _491 / cbSceneParam._m0[86u].x;
    float _2341 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2416 = _2415 / _412;
        float _2427 = _2416 * _463;
        float _2428 = _464 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2431 = _2416 * _465;
        float _2433 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2434 = _2433 + cbSceneParam._m0[79u].w;
        float _2435 = cbSceneParam._m0[79u].w - _2428;
        float _2441 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2431 * _2431));
        float _2444 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2441;
        float _2449 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2451 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2628;
        if (abs((_2429 - _2433) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2628 = ((((_2434 > 0.0) ? exp2(_2449 * _2434) : (2.0 - exp2(_2451 * _2434))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2444;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : max(_2434, _2435));
            float _2574 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : min(_2434, _2435));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2628 = ((abs(_2441 / _2429) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2449 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2449 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2451 * _2583) - exp2(_2451 * _2584)) * _2572))) + (_2444 * cbSceneParam._m0[80u].z);
        }
        vec4 _2630 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2639 = exp2((_2628 * (-1.44269502162933349609375)) * (1.0 - _2630.w));
        float _2640 = log2(_2639);
        float _2656 = log2(_2360);
        _2453 = (exp2(_2656 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].x)) * _2630.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2455 = (exp2(_2656 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].y)) * _2630.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2457 = (exp2(_2656 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].z)) * _2630.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2459 = _2639 * _2360;
    }
    else
    {
        _2453 = _2357;
        _2455 = _2358;
        _2457 = _2359;
        _2459 = _2360;
    }
    bool _2666;
    vec4 _2469;
    vec4 _2491;
    float _2493;
    float _2497;
    float _2498;
    float _2499;
    float _2500;
    bool _2510;
    for (;;)
    {
        _2469 = cbMatDynParam._m0[0u];
        float _2471 = roundEven(_2469.y);
        bool _2472 = _2471 == 3.0;
        float _2473 = log2(_2459);
        float _2480 = exp2(_2473 * cbSceneParam._m0[78u].x) * _2329;
        float _2481 = exp2(_2473 * cbSceneParam._m0[78u].y) * _2330;
        float _2482 = exp2(_2473 * cbSceneParam._m0[78u].z) * _2331;
        float _2489 = _479 + (-0.5);
        _2491 = cbMtdParam._m0[1u];
        _2493 = _2491.y * _2489;
        float _2496 = (_2471 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2497 = _2496 * (_2472 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2453)));
        _2498 = _2496 * (_2472 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2455)));
        _2499 = _2496 * (_2472 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2457)));
        _2500 = _2489 * 0.999000012874603271484375;
        _2510 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2510)
        {
            if ((cbInstanceData._m0[_530 + 7u].x + _2500) < 0.5)
            {
                _2666 = true;
                break;
            }
        }
        uint _2607 = _531 + uint(_2469.w);
        if ((cbInstanceData._m0[_2607].w < 1.0) && ((cbInstanceData._m0[_2607].w + _2500) < 0.5))
        {
            _2666 = true;
            break;
        }
        if ((_2493 + 1.0) < _2491.x)
        {
            _2666 = true;
            break;
        }
        _2666 = false;
        break;
    }
    float _2871;
    if (_2666)
    {
        discard_state = true;
        _2871 = 0.0;
    }
    else
    {
        _2871 = cbInstanceData._m0[_2332].w;
    }
    SV_Target.x = _2497;
    SV_Target.y = _2498;
    SV_Target.z = _2499;
    SV_Target.w = _2871;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2332].w;
    discard_exit();
}


