#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _957;
float _3349;
float _3350;
float _3351;
float _3352;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _300 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3361 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _308 = (_301 * ((_269.x * cbMtdParam._m0[10u].x) - _244)) + _244;
    float _309 = (_301 * ((_269.y * cbMtdParam._m0[10u].y) - _245)) + _245;
    float _310 = (_301 * ((_269.z * cbMtdParam._m0[10u].z) - _246)) + _246;
    vec4 _327 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _335 = (_327.x * 2.0) + (-1.0);
    float _337 = (_327.y * 2.0) + (-1.0);
    float _338 = dot(vec2(_335, _337), vec2(_335, _337));
    float _3372 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))));
    float _344 = _327.z * cbMtdParam._m0[12u].y;
    vec4 _357 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _371 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_357.z * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _377 = ((((_357.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _335;
    float _378 = ((((_357.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _337;
    float _381 = fma(_343, _208 * NORMAL.x, fma(_378, _215 * TANGENT.x, (_201 * _193) * _377));
    float _384 = fma(_343, _208 * NORMAL.y, fma(_378, _215 * TANGENT.y, (_201 * _194) * _377));
    float _387 = fma(_343, _208 * NORMAL.z, fma(_378, _215 * TANGENT.z, (_201 * _195) * _377));
    float _391 = inversesqrt(dot(vec3(_381, _384, _387), vec3(_381, _384, _387)));
    float _392 = _391 * _381;
    float _393 = _391 * _384;
    float _394 = _391 * _387;
    float _3383 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _395 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3405 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3416 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _414 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    vec4 _479 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _481 = _479.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _637 = sqrt(((_465 * _465) + (_466 * _466)) + (_467 * _467));
        float _643 = (cbMatDynParam._m0[5u].x * _637) + cbMatDynParam._m0[5u].y;
        float _3427 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _648 = (cbMatDynParam._m0[5u].z * _637) + cbMatDynParam._m0[5u].w;
        float _3438 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) - _644)) + _644) < ((_481 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _513 = fma(_394, cbSceneParam._m0[5u].z, fma(_393, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _392));
    float _516 = fma(_394, cbSceneParam._m0[6u].z, fma(_393, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _392));
    float _519 = fma(_394, cbSceneParam._m0[7u].z, fma(_393, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _392));
    uint _532 = uint(roundEven(NORMAL.w)) * 13u;
    uint _533 = _532 + 9u;
    uint _534 = _533 + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3449 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _557 = _554.x * TEXCOORD_5.w;
    float _558 = dot(vec3(_392, _393, _394), vec3(_472, _473, _474));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _392) - _472;
    float _566 = (_561 * _393) - _473;
    float _567 = (_561 * _394) - _474;
    float _571 = abs(dot(vec3(_472, _473, _474), vec3(_392, _393, _394)));
    float _3482 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_395);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _956;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _681 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _685 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _689 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _714 = _618 + _392;
        float _715 = _622 + _393;
        float _716 = _626 + _394;
        float _726 = fma(_716, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _714)) - _681;
        float _727 = fma(_716, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _714)) - _685;
        float _728 = fma(_716, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _714)) - _689;
        float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
        float _745 = ((_732 * _726) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_681 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_732 * _727) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_685 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_732 * _728) / cbModelParam._m0[34u].z) + ((((((_689 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        float _784 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_750.x + (-0.5));
        float _786 = _784 * (_750.y + (-0.5));
        float _787 = _784 * (_750.z + (-0.5));
        float _794 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_757.x + (-0.5));
        float _796 = _794 * (_757.y + (-0.5));
        float _797 = _794 * (_757.z + (-0.5));
        float _804 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_764.x + (-0.5));
        float _806 = _804 * (_764.y + (-0.5));
        float _807 = _804 * (_764.z + (-0.5));
        float _814 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_771.x + (-0.5));
        float _816 = _814 * (_771.y + (-0.5));
        float _817 = _814 * (_771.z + (-0.5));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = _785 * 0.5;
        float _822 = _795 * 0.5;
        float _823 = _805 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _838 = (dot(vec3(_392, _393, _394), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _848 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3530 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_850 + 1.0))) + _855) * _818;
        float _865 = _786 * 0.5;
        float _866 = _796 * 0.5;
        float _867 = _806 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_392, _393, _394), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3563 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_892 + 1.0))) + _897) * _819;
        float _907 = _787 * 0.5;
        float _908 = _797 * 0.5;
        float _909 = _807 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_392, _393, _394), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3596 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_934 + 1.0))) + _939) * _820;
        _956 = _787;
        _958 = _786;
        _959 = _785;
        _960 = _797;
        _961 = _796;
        _962 = _795;
        _963 = _807;
        _964 = _806;
        _965 = _805;
        _966 = _820;
        _967 = _819;
        _968 = _818;
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
    }
    else
    {
        _956 = _957;
        _958 = _957;
        _959 = _957;
        _960 = _957;
        _961 = _957;
        _962 = _957;
        _963 = _957;
        _964 = _957;
        _965 = _957;
        _966 = _957;
        _967 = _957;
        _968 = _957;
        _969 = 0.0;
        _970 = 0.0;
        _971 = 0.0;
    }
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1000 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _1004 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _1008 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1031 = _618 + _392;
        float _1032 = _622 + _393;
        float _1033 = _626 + _394;
        float _1043 = fma(_1033, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031)) - _1000;
        float _1044 = fma(_1033, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031)) - _1004;
        float _1045 = fma(_1033, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031)) - _1008;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1000 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1004 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[35u].z) + ((((((_1008 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1099 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1066.x + (-0.5));
        float _1101 = _1099 * (_1066.y + (-0.5));
        float _1102 = _1099 * (_1066.z + (-0.5));
        float _1109 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1073.x + (-0.5));
        float _1111 = _1109 * (_1073.y + (-0.5));
        float _1112 = _1109 * (_1073.z + (-0.5));
        float _1119 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1080.x + (-0.5));
        float _1121 = _1119 * (_1080.y + (-0.5));
        float _1122 = _1119 * (_1080.z + (-0.5));
        float _1129 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1087.x + (-0.5));
        float _1131 = _1129 * (_1087.y + (-0.5));
        float _1132 = _1129 * (_1087.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_392, _393, _394), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3659 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1163 + 1.0))) + _1168) * _1133;
        float _1178 = _1101 * 0.5;
        float _1179 = _1111 * 0.5;
        float _1180 = _1121 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_392, _393, _394), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3692 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1205 + 1.0))) + _1210) * _1134;
        float _1220 = _1102 * 0.5;
        float _1221 = _1112 * 0.5;
        float _1222 = _1122 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_392, _393, _394), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3725 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1247 + 1.0))) + _1252) * _1135;
        _1269 = _1102;
        _1270 = _1101;
        _1271 = _1100;
        _1272 = _1112;
        _1273 = _1111;
        _1274 = _1110;
        _1275 = _1122;
        _1276 = _1121;
        _1277 = _1120;
        _1278 = _1135;
        _1279 = _1134;
        _1280 = _1133;
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _957;
        _1270 = _957;
        _1271 = _957;
        _1272 = _957;
        _1273 = _957;
        _1274 = _957;
        _1275 = _957;
        _1276 = _957;
        _1277 = _957;
        _1278 = _957;
        _1279 = _957;
        _1280 = _957;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1316 = fma(_1295, cbSceneParam._m0[89u].z, fma(_1294, cbSceneParam._m0[89u].y, _1293 * cbSceneParam._m0[89u].x));
    float _1319 = fma(_1295, cbSceneParam._m0[90u].z, fma(_1294, cbSceneParam._m0[90u].y, _1293 * cbSceneParam._m0[90u].x));
    float _1322 = fma(_1295, cbSceneParam._m0[91u].z, fma(_1294, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1293));
    float _1337 = _565 * 0.5;
    float _1338 = _566 * 0.5;
    float _1339 = _567 * 0.5;
    float _1340 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1343 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1346 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1380;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1353 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_956, _960, _963, _966));
        float _1357 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_958, _961, _964, _967));
        float _1361 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_959, _962, _965, _968));
        float _1368 = dot(vec4(cbModelParam._m0[39u]), vec4(_1337, _1338, _1339, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1391;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1382 = dot(vec4(cbModelParam._m0[40u]), vec4(_1337, _1338, _1339, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1395 = (_1391 * cbModelParam._m0[1u].x) + (_1380 * (1.0 - cbModelParam._m0[1u].x));
    float _1405 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _395);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1405 : min(cbModelParam._m0[25u].z, _1405));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1455 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1459 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1463 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1466 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1469 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1472 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1500;
        if (_1466 > 0.0)
        {
            _1500 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1500 = frontier_phi_17_15_ladder;
        }
        float _1725;
        if (_1469 > 0.0)
        {
            _1725 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1725 = frontier_phi_26_22_ladder;
        }
        float _1971;
        if (_1472 > 0.0)
        {
            _1971 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1971 = frontier_phi_38_33_ladder;
        }
        float _1973 = isnan(_1725) ? _1500 : (isnan(_1500) ? _1725 : min(_1500, _1725));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1466) + _1455;
        float _1979 = (_1974 * _1469) + _1459;
        float _1980 = (_1974 * _1472) + _1463;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1406);
            frontier_phi_16_38_ladder = _2104.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2104.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2104.x * cbModelParam._m0[1u].y;
        }
        _1488 = frontier_phi_16_38_ladder_2;
        _1490 = frontier_phi_16_38_ladder_1;
        _1492 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1406);
        _1488 = _1476.x * cbModelParam._m0[1u].y;
        _1490 = _1476.y * cbModelParam._m0[1u].y;
        _1492 = _1476.z * cbModelParam._m0[1u].y;
    }
    float _1496 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _395);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1496 : min(cbModelParam._m0[25u].w, _1496));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1554 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1558 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1562 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1565 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1568 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1571 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1730;
        if (_1565 > 0.0)
        {
            _1730 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1730 = frontier_phi_28_24_ladder;
        }
        float _1998;
        if (_1568 > 0.0)
        {
            _1998 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1998 = frontier_phi_40_35_ladder;
        }
        float _2203;
        if (_1571 > 0.0)
        {
            _2203 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2203 = frontier_phi_49_46_ladder;
        }
        float _2205 = isnan(_1998) ? _1730 : (isnan(_1730) ? _1998 : min(_1730, _1998));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1565) + _1554;
        float _2211 = (_2206 * _1568) + _1558;
        float _2212 = (_2206 * _1571) + _1562;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1497);
            frontier_phi_25_49_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1590 = frontier_phi_25_49_ladder_2;
        _1592 = frontier_phi_25_49_ladder_1;
        _1594 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1497);
        _1590 = _1574.x * cbModelParam._m0[1u].z;
        _1592 = _1574.y * cbModelParam._m0[1u].z;
        _1594 = _1574.z * cbModelParam._m0[1u].z;
    }
    float _1606 = ((((1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_586 * _573)) * _557;
    float _1607 = _1606 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1608 = _1606 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1609 = _1606 * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1612 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1607 * cbSceneParam._m0[91u].x));
    vec4 _1626 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_493, _494));
    float _1628 = _1626.w;
    float _1640 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1628);
    float _1641 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1628);
    float _1642 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1628);
    uvec4 _1646 = floatBitsToUint(cbInstanceData._m0[_532 + 5u]);
    uint _1648 = _1646.x * 14u;
    uint _1649 = _1648 + 13u;
    float _1656 = _557 + (-1.0);
    float _1661 = (cbLight._m0[_1649].x * _1656) + 1.0;
    float _1662 = (cbLight._m0[_1649].y * _1656) + 1.0;
    float _1663 = (cbLight._m0[_1649].z * _1656) + 1.0;
    float _1664 = (cbLight._m0[_1649].w * _1656) + 1.0;
    uint _1665 = _1648 + 5u;
    float _1671 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1675 = _1648 + 4u;
    float _1684 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1688 = _1648 | 1u;
    float _1699 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_392, _393, _394));
    float _1702 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_392, _393, _394));
    float _3861 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _3872 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1707 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1709 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1716 = ((cbLight._m0[_1665].x * _1671) * _1709) + (((cbLight._m0[_1675].x * _1640) * _1684) * _1707);
    float _1717 = ((_1671 * cbLight._m0[_1665].y) * _1709) + (((cbLight._m0[_1675].y * _1641) * _1684) * _1707);
    float _1718 = ((_1671 * cbLight._m0[_1665].z) * _1709) + (((cbLight._m0[_1675].z * _1642) * _1684) * _1707);
    uvec4 _1722 = floatBitsToUint(cbLight._m0[_1648 + 12u]);
    bool _1724 = _1722.x == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1724)
    {
        _1735 = _1716;
        _1737 = _1717;
        _1739 = _1718;
    }
    else
    {
        uint _1743 = _1648 + 6u;
        float _1759 = (dot(vec3(cbLight._m0[_1648 + 2u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _1760 = _1759 * _1759;
        float _3883 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1762 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1735 = (((cbLight._m0[_1743].x * 0.3183098733425140380859375) * _1761) * _1762) + _1716;
        _1737 = (((cbLight._m0[_1743].y * 0.3183098733425140380859375) * _1761) * _1762) + _1717;
        _1739 = (((cbLight._m0[_1743].z * 0.3183098733425140380859375) * _1761) * _1762) + _1718;
    }
    bool _1742 = _1722.y == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1742)
    {
        _1780 = _1735;
        _1782 = _1737;
        _1784 = _1739;
    }
    else
    {
        uint _1942 = _1648 + 7u;
        float _1958 = (dot(vec3(cbLight._m0[_1648 + 3u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _3899 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1961 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1780 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1735;
        _1782 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1737;
        _1784 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1739;
    }
    uint _1787 = _1648 + 8u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1648].w)) * _395) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1648].x + _472;
    float _1803 = cbLight._m0[_1648].y + _473;
    float _1804 = cbLight._m0[_1648].z + _474;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1648].xyz));
    float _3915 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _1816 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1817 = dot(vec3(_392, _393, _394), vec3(_1809, _1810, _1811));
    float _3937 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1809, _1810, _1811));
    float _3948 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1801 * _1801;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1816 * ((_1815 * _1841) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1841) + _1801) * _1815))) * _1815;
    float _3959 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    uint _1868 = _1648 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _395) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1688].x + _472;
    float _1882 = cbLight._m0[_1688].y + _473;
    float _1883 = cbLight._m0[_1688].z + _474;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1688].xyz));
    float _3970 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1895 = dot(vec3(_392, _393, _394), vec3(_1888, _1889, _1890));
    float _3981 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1888, _1889, _1890));
    float _3992 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1880;
    float _1927 = (0.5 / (((_1816 * ((_1894 * _1917) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1917) + _1880) * _1894))) * _1894;
    float _4003 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1939 = (((_1916 * cbLight._m0[_1868].x) * _1929) * _1671) + ((((cbLight._m0[_1787].x * _1640) * _1840) * _1854) * _1684);
    float _1940 = (((_1916 * cbLight._m0[_1868].y) * _1929) * _1671) + ((((cbLight._m0[_1787].y * _1641) * _1840) * _1854) * _1684);
    float _1941 = (((_1916 * cbLight._m0[_1868].z) * _1929) * _1671) + ((((cbLight._m0[_1787].z * _1642) * _1840) * _1854) * _1684);
    float _2003;
    float _2005;
    float _2007;
    if (_1724)
    {
        _2003 = _1939;
        _2005 = _1940;
        _2007 = _1941;
    }
    else
    {
        uint _2009 = _1648 + 2u;
        uint _2013 = _1648 + 10u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _395) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _472;
        float _2030 = cbLight._m0[_2009].y + _473;
        float _2031 = cbLight._m0[_2009].z + _474;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2009].xyz));
        float _4014 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2043 = dot(vec3(_392, _393, _394), vec3(_2036, _2037, _2038));
        float _4025 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _4036 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2065 = 1.0 - _2028;
        float _2075 = (0.5 / (((_1816 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2065) + _2028) * _2042))) * _2042;
        float _4047 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2003 = (((_2064 * cbLight._m0[_2013].x) * _2077) * _2078) + _1939;
        _2005 = (((_2064 * cbLight._m0[_2013].y) * _2077) * _2078) + _1940;
        _2007 = (((_2064 * cbLight._m0[_2013].z) * _2077) * _2078) + _1941;
    }
    float _2113;
    float _2115;
    float _2117;
    if (_1742)
    {
        _2113 = _2003;
        _2115 = _2005;
        _2117 = _2007;
    }
    else
    {
        uint _2124 = _1648 + 3u;
        uint _2128 = _1648 + 11u;
        float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _395) * 0.949999988079071044921875);
        float _2143 = _2142 * _2142;
        float _2144 = cbLight._m0[_2124].x + _472;
        float _2145 = cbLight._m0[_2124].y + _473;
        float _2146 = cbLight._m0[_2124].z + _474;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2151 = _2150 * _2144;
        float _2152 = _2150 * _2145;
        float _2153 = _2150 * _2146;
        float _2154 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2124].xyz));
        float _4063 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2158 = dot(vec3(_392, _393, _394), vec3(_2151, _2152, _2153));
        float _4074 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2151, _2152, _2153));
        float _4085 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2166 = _2143 * _2143;
        float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
        float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2180 = 1.0 - _2143;
        float _2190 = (0.5 / (((_1816 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2180) + _2143) * _2157))) * _2157;
        float _4096 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2113 = (((_2179 * cbLight._m0[_2128].x) * _2192) * _2193) + _2003;
        _2115 = (((_2179 * cbLight._m0[_2128].y) * _2192) * _2193) + _2005;
        _2117 = (((_2179 * cbLight._m0[_2128].z) * _2192) * _2193) + _2007;
    }
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    if (_1646.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            uint _2575 = 0u;
            uint _2584;
            bool _2585;
            for (;;)
            {
                _2584 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                _2585 = _2584 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2585)
                {
                    frontier_phi_66_pred = _2569;
                    frontier_phi_66_pred_1 = _2574;
                    frontier_phi_66_pred_2 = _2573;
                    frontier_phi_66_pred_3 = _2572;
                    frontier_phi_66_pred_4 = _2571;
                    frontier_phi_66_pred_5 = _2570;
                }
                else
                {
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    uint _2720;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2584;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    for (;;)
                    {
                        uint _2724 = uint(findLSB(_2720)) + (_2575 << 5u);
                        uint _2721 = (_2720 + 4294967295u) & _2720;
                        uint _2726 = _2724 * 48u;
                        vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2746 = (_2724 * 48u) + 4u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2765 = (_2724 * 48u) + 8u;
                        vec3 _2776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x));
                        float _2780 = _2740.x - _2269;
                        float _2781 = _2740.y - _2270;
                        float _2782 = _2740.z - _2271;
                        float _2783 = dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782));
                        float _2786 = inversesqrt(_2783);
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2790 = dot(vec3(_513, _516, _519), vec3(_2787, _2788, _2789));
                        float _2795 = 1.0 - (_2783 * _2740.w);
                        float _4122 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2797 = sqrt(_2783) * _2759.w;
                        float _2800 = 1.39999997615814208984375 / (_2797 + 1.39999997615814208984375);
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2790) + _2801;
                        float _2807 = _2797 * _2797;
                        float _2811 = ((isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))) * _2796) / ((_2807 * 0.699999988079071044921875) + 1.0);
                        float _2815 = (-0.0) - _2269;
                        float _2816 = (-0.0) - _2270;
                        float _2817 = (-0.0) - _2271;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2832 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                        float _2833 = 1.0 - _573;
                        float _2840 = sqrt(1.0 - ((1.0 - (_2833 * _2833)) * (1.0 - (_2832 * _2832))));
                        float _2841 = _2840 * _2840;
                        float _2842 = _2841 * _2841;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2853 = dot(vec3(_513, _516, _519), vec3(_2822, _2823, _2824));
                        float _4138 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2857 = dot(vec3(_513, _516, _519), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845));
                        float _4149 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2864 = ((_2860 * _2860) * (_2842 + (-1.0))) + 1.0;
                        float _2865 = _2800 * _2841;
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2790) + _2866;
                        float _4160 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2871 = 1.0 - _2841;
                        float _2881 = (0.5 / (((_2870 * ((_2856 * _2871) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2870 * _2871) + _2841) * _2856))) * _2870;
                        float _4171 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2892 = (((_2842 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_2864 * _2864) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125))) * _2796;
                        _2644 = (_2811 * _2759.x) + _2717;
                        _2645 = (_2811 * _2759.y) + _2718;
                        _2646 = (_2811 * _2759.z) + _2719;
                        _2641 = (_2892 * _2776.x) + _2714;
                        _2642 = (_2892 * _2776.y) + _2715;
                        _2643 = (_2892 * _2776.z) + _2716;
                        if (_2721 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2721;
                        }
                    }
                    frontier_phi_66_pred = _2641;
                    frontier_phi_66_pred_1 = _2646;
                    frontier_phi_66_pred_2 = _2645;
                    frontier_phi_66_pred_3 = _2644;
                    frontier_phi_66_pred_4 = _2643;
                    frontier_phi_66_pred_5 = _2642;
                }
                _2417 = frontier_phi_66_pred;
                _2427 = frontier_phi_66_pred_1;
                _2425 = frontier_phi_66_pred_2;
                _2423 = frontier_phi_66_pred_3;
                _2421 = frontier_phi_66_pred_4;
                _2419 = frontier_phi_66_pred_5;
                uint _2576 = _2575 + 1u;
                if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2569 = _2417;
                    _2570 = _2419;
                    _2571 = _2421;
                    _2572 = _2423;
                    _2573 = _2425;
                    _2574 = _2427;
                    _2575 = _2576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2433) & _2315) == 0u)
        {
            _2537 = _2416;
            _2539 = _2418;
            _2541 = _2420;
            _2543 = _2422;
            _2545 = _2424;
            _2547 = _2426;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2563 = _2562 * _2269;
            float _2564 = _2562 * _2270;
            float _2565 = _2562 * _2271;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2697 = _2416;
                float _2698 = _2418;
                float _2699 = _2420;
                float _2700 = _2422;
                float _2701 = _2424;
                float _2702 = _2426;
                uint _2703 = _2433;
                uint _2712;
                bool _2713;
                for (;;)
                {
                    _2712 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                    _2713 = _2712 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2713)
                    {
                        frontier_phi_77_pred = _2702;
                        frontier_phi_77_pred_1 = _2701;
                        frontier_phi_77_pred_2 = _2700;
                        frontier_phi_77_pred_3 = _2699;
                        frontier_phi_77_pred_4 = _2698;
                        frontier_phi_77_pred_5 = _2697;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        uint _2925 = _2712;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2995;
                        vec4 _3011;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2936 = ((_2703 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2982 = (_2936 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2936 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2936 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2936 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_2271, _3046.z, fma(_2270, _3046.y, _3046.x * _2269)) + _3046.w;
                            _3059 = !((fma(_2271, _3027.z, fma(_2270, _3027.y, _3027.x * _2269)) + _3027.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2951.x - _2269;
                                float _3087 = _2951.y - _2270;
                                float _3088 = _2951.z - _2271;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2952 * _2952));
                                float _4182 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3104 = sqrt(_3089) * _2967.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_513, _516, _519))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_2271, _2995.z, fma(_2270, _2995.y, _2995.x * _2269)) + _2995.w) / _3058;
                                float _3118 = (fma(_2271, _3011.z, fma(_2270, _3011.y, _3011.x * _2269)) + _3011.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4198 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _573;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2563;
                                float _3148 = _3094 - _2564;
                                float _3149 = _3095 - _2565;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_513, _516, _519), vec3((-0.0) - _2563, (-0.0) - _2564, (-0.0) - _2565));
                                float _4209 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3161 = dot(vec3(_513, _516, _519), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4220 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_513, _516, _519), vec3(_3093, _3094, _3095))) + _3170;
                                float _4231 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4242 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3124 * _2967.y;
                                frontier_phi_83_pred_1 = _3124 * _2967.x;
                                frontier_phi_83_pred_2 = _3198 * _2979.z;
                                frontier_phi_83_pred_3 = _3198 * _2979.y;
                                frontier_phi_83_pred_4 = _3198 * _2979.x;
                                frontier_phi_83_pred_5 = _3124 * _2967.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3206 = frontier_phi_83_pred;
                            _3205 = frontier_phi_83_pred_1;
                            _3204 = frontier_phi_83_pred_2;
                            _3203 = frontier_phi_83_pred_3;
                            _3202 = frontier_phi_83_pred_4;
                            _3207 = frontier_phi_83_pred_5;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2911;
                        frontier_phi_77_pred_1 = _2910;
                        frontier_phi_77_pred_2 = _2909;
                        frontier_phi_77_pred_3 = _2908;
                        frontier_phi_77_pred_4 = _2907;
                        frontier_phi_77_pred_5 = _2906;
                    }
                    _2548 = frontier_phi_77_pred;
                    _2546 = frontier_phi_77_pred_1;
                    _2544 = frontier_phi_77_pred_2;
                    _2542 = frontier_phi_77_pred_3;
                    _2540 = frontier_phi_77_pred_4;
                    _2538 = frontier_phi_77_pred_5;
                    uint _2704 = _2703 + 1u;
                    if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2697 = _2538;
                        _2698 = _2540;
                        _2699 = _2542;
                        _2700 = _2544;
                        _2701 = _2546;
                        _2702 = _2548;
                        _2703 = _2704;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2542;
                frontier_phi_58_59_ladder_1 = _2548;
                frontier_phi_58_59_ladder_2 = _2546;
                frontier_phi_58_59_ladder_3 = _2544;
                frontier_phi_58_59_ladder_4 = _2540;
                frontier_phi_58_59_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_58_59_ladder = _2420;
                frontier_phi_58_59_ladder_1 = _2426;
                frontier_phi_58_59_ladder_2 = _2424;
                frontier_phi_58_59_ladder_3 = _2422;
                frontier_phi_58_59_ladder_4 = _2418;
                frontier_phi_58_59_ladder_5 = _2416;
            }
            _2537 = frontier_phi_58_59_ladder_5;
            _2539 = frontier_phi_58_59_ladder_4;
            _2541 = frontier_phi_58_59_ladder;
            _2543 = frontier_phi_58_59_ladder_3;
            _2545 = frontier_phi_58_59_ladder_2;
            _2547 = frontier_phi_58_59_ladder_1;
        }
        float _2552 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2328 = (_2552 * _2543) + _1780;
        _2330 = (_2552 * _2545) + _1782;
        _2332 = (_2552 * _2547) + _1784;
        _2334 = ((_2537 * 0.039999999105930328369140625) * _2552) + _2113;
        _2336 = ((_2539 * 0.039999999105930328369140625) * _2552) + _2115;
        _2338 = ((_2541 * 0.039999999105930328369140625) * _2552) + _2117;
    }
    else
    {
        _2328 = _1780;
        _2330 = _1782;
        _2332 = _1784;
        _2334 = _2113;
        _2336 = _2115;
        _2338 = _2117;
    }
    float _4258 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4269 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4280 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _2355 = ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2328 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _557))) + ((_2334 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1395)) * cbPerFrame._m0[3u].x);
    float _2356 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2330 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _557))) + ((_2336 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1395)) * cbPerFrame._m0[3u].x);
    float _2357 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2332 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _557))) + ((_2338 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1395)) * cbPerFrame._m0[3u].x);
    uint _2358 = _532 + 6u;
    float _2366 = _493 / cbSceneParam._m0[86u].x;
    float _2367 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2381 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, (log2((isnan(cbSceneParam._m0[77u].w) ? _414 : (isnan(_414) ? cbSceneParam._m0[77u].w : min(_414, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2383 = _2381.x;
    float _2384 = _2381.y;
    float _2385 = _2381.z;
    float _2386 = _2381.w;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_414 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_414) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _414 : min(cbSceneParam._m0[80u].w, _414));
        float _2442 = _2441 / _414;
        float _2453 = _2442 * _465;
        float _2454 = _466 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2457 = _2442 * _467;
        float _2459 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2460 = _2459 + cbSceneParam._m0[79u].w;
        float _2461 = cbSceneParam._m0[79u].w - _2454;
        float _2467 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2457 * _2457));
        float _2470 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2467;
        float _2475 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2477 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2654;
        if (abs((_2455 - _2459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2654 = ((((_2460 > 0.0) ? exp2(_2475 * _2460) : (2.0 - exp2(_2477 * _2460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2470;
        }
        else
        {
            float _2598 = 1.0 / cbSceneParam._m0[80u].x;
            float _2599 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : max(_2460, _2461));
            float _2600 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : min(_2460, _2461));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            _2654 = ((abs(_2467 / _2455) * cbSceneParam._m0[80u].y) * ((((_2609 - _2610) * 2.0) - ((exp2(_2475 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)))) - exp2(_2475 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))))) * _2598)) - ((exp2(_2477 * _2609) - exp2(_2477 * _2610)) * _2598))) + (_2470 * cbSceneParam._m0[80u].z);
        }
        vec4 _2656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, 1.0), 0.0);
        float _2665 = exp2((_2654 * (-1.44269502162933349609375)) * (1.0 - _2656.w));
        float _2666 = log2(_2665);
        float _2682 = log2(_2386);
        _2479 = (exp2(_2682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].x)) * _2656.x) / cbSceneParam._m0[78u].x)) + _2383;
        _2481 = (exp2(_2682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].y)) * _2656.y) / cbSceneParam._m0[78u].y)) + _2384;
        _2483 = (exp2(_2682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].z)) * _2656.z) / cbSceneParam._m0[78u].z)) + _2385;
        _2485 = _2665 * _2386;
    }
    else
    {
        _2479 = _2383;
        _2481 = _2384;
        _2483 = _2385;
        _2485 = _2386;
    }
    bool _2692;
    vec4 _2495;
    vec4 _2517;
    float _2519;
    float _2523;
    float _2524;
    float _2525;
    float _2526;
    bool _2536;
    for (;;)
    {
        _2495 = cbMatDynParam._m0[0u];
        float _2497 = roundEven(_2495.y);
        bool _2498 = _2497 == 3.0;
        float _2499 = log2(_2485);
        float _2506 = exp2(_2499 * cbSceneParam._m0[78u].x) * _2355;
        float _2507 = exp2(_2499 * cbSceneParam._m0[78u].y) * _2356;
        float _2508 = exp2(_2499 * cbSceneParam._m0[78u].z) * _2357;
        float _2515 = _481 + (-0.5);
        _2517 = cbMtdParam._m0[1u];
        _2519 = _2517.y * _2515;
        float _2522 = (_2497 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2523 = _2522 * (_2498 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2479)));
        _2524 = _2522 * (_2498 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2481)));
        _2525 = _2522 * (_2498 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2483)));
        _2526 = _2515 * 0.999000012874603271484375;
        _2536 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2536)
        {
            if ((cbInstanceData._m0[_532 + 7u].x + _2526) < 0.5)
            {
                _2692 = true;
                break;
            }
        }
        uint _2633 = _533 + uint(_2495.w);
        if ((cbInstanceData._m0[_2633].w < 1.0) && ((cbInstanceData._m0[_2633].w + _2526) < 0.5))
        {
            _2692 = true;
            break;
        }
        if ((_2519 + 1.0) < _2517.x)
        {
            _2692 = true;
            break;
        }
        _2692 = false;
        break;
    }
    float _2897;
    if (_2692)
    {
        discard_state = true;
        _2897 = 0.0;
    }
    else
    {
        _2897 = cbInstanceData._m0[_2358].w;
    }
    SV_Target.x = _2523;
    SV_Target.y = _2524;
    SV_Target.z = _2525;
    SV_Target.w = _2897;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2358].w;
    discard_exit();
}


