#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _807;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _178 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _179 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _255 = (_247.x * 2.0) + (-1.0);
    float _257 = (_247.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3404 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))));
    float _265 = _247.z * cbMtdParam._m0[12u].y;
    float _268 = fma(_264, _192 * NORMAL.x, fma(_257, _199 * TANGENT.x, (_185 * _177) * _255));
    float _271 = fma(_264, _192 * NORMAL.y, fma(_257, _199 * TANGENT.y, (_185 * _178) * _255));
    float _274 = fma(_264, _192 * NORMAL.z, fma(_257, _199 * TANGENT.z, (_185 * _179) * _255));
    float _278 = inversesqrt(dot(vec3(_268, _271, _274), vec3(_268, _271, _274)));
    float _279 = _278 * _268;
    float _280 = _278 * _271;
    float _281 = _278 * _274;
    float _3415 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _282 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3437 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3448 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _301 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _344 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _354 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _344);
    float _355 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _344);
    float _356 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _344);
    float _360 = inversesqrt(dot(vec3(_354, _355, _356), vec3(_354, _355, _356)));
    float _361 = _354 * _360;
    float _362 = _355 * _360;
    float _363 = _356 * _360;
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _391 = fma(_281, cbSceneParam._m0[5u].z, fma(_280, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _279));
    float _394 = fma(_281, cbSceneParam._m0[6u].z, fma(_280, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _279));
    float _397 = fma(_281, cbSceneParam._m0[7u].z, fma(_280, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _279));
    uint _410 = uint(roundEven(NORMAL.w)) * 13u;
    uint _412 = (_410 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _418 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_412].x;
    float _419 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_412].y;
    float _420 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_412].z;
    float _3459 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _432 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _435 = _432.x * TEXCOORD_5.w;
    float _436 = dot(vec3(_279, _280, _281), vec3(_361, _362, _363));
    float _439 = _436 * 2.0;
    float _443 = (_439 * _279) - _361;
    float _444 = (_439 * _280) - _362;
    float _445 = (_439 * _281) - _363;
    float _449 = abs(dot(vec3(_361, _362, _363), vec3(_279, _280, _281)));
    float _3492 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _451 = sqrt(_282);
    float _464 = exp2((_451 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_451 * 3.0));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _806;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _531 = fma(_504, cbModelParam._m0[26u].z, fma(_500, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _496));
        float _535 = fma(_504, cbModelParam._m0[27u].z, fma(_500, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _496));
        float _539 = fma(_504, cbModelParam._m0[28u].z, fma(_500, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _496));
        float _564 = _496 + _279;
        float _565 = _500 + _280;
        float _566 = _504 + _281;
        float _576 = fma(_566, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564)) - _531;
        float _577 = fma(_566, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564)) - _535;
        float _578 = fma(_566, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564)) - _539;
        float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
        float _595 = ((_582 * _576) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_531 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _596 = ((_582 * _577) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_535 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_582 * _578) / cbModelParam._m0[34u].z) + ((((((_539 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        float _634 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_600.x + (-0.5));
        float _636 = _634 * (_600.y + (-0.5));
        float _637 = _634 * (_600.z + (-0.5));
        float _644 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_607.x + (-0.5));
        float _646 = _644 * (_607.y + (-0.5));
        float _647 = _644 * (_607.z + (-0.5));
        float _654 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_614.x + (-0.5));
        float _656 = _654 * (_614.y + (-0.5));
        float _657 = _654 * (_614.z + (-0.5));
        float _664 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_621.x + (-0.5));
        float _666 = _664 * (_621.y + (-0.5));
        float _667 = _664 * (_621.z + (-0.5));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = _635 * 0.5;
        float _672 = _645 * 0.5;
        float _673 = _655 * 0.5;
        float _674 = dot(vec3(_671, _672, _673), vec3(_671, _672, _673));
        float _679 = (_674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_674);
        float _688 = (dot(vec3(_279, _280, _281), vec3(_679 * _671, _679 * _672, _679 * _673)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _698 = sqrt(((_672 * _672) + (_671 * _671)) + (_673 * _673)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3540 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_700 + 1.0))) + _705) * _668;
        float _715 = _636 * 0.5;
        float _716 = _646 * 0.5;
        float _717 = _656 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _731 = (dot(vec3(_279, _280, _281), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _740 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3573 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_742 + 1.0))) + _747) * _669;
        float _757 = _637 * 0.5;
        float _758 = _647 * 0.5;
        float _759 = _657 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_279, _280, _281), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3606 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_784 + 1.0))) + _789) * _670;
        _806 = _637;
        _808 = _636;
        _809 = _635;
        _810 = _647;
        _811 = _646;
        _812 = _645;
        _813 = _657;
        _814 = _656;
        _815 = _655;
        _816 = _670;
        _817 = _669;
        _818 = _668;
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
    }
    else
    {
        _806 = _807;
        _808 = _807;
        _809 = _807;
        _810 = _807;
        _811 = _807;
        _812 = _807;
        _813 = _807;
        _814 = _807;
        _815 = _807;
        _816 = _807;
        _817 = _807;
        _818 = _807;
        _819 = 0.0;
        _820 = 0.0;
        _821 = 0.0;
    }
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _847 = fma(_504, cbModelParam._m0[30u].z, fma(_500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _496));
        float _851 = fma(_504, cbModelParam._m0[31u].z, fma(_500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _496));
        float _855 = fma(_504, cbModelParam._m0[32u].z, fma(_500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _496));
        float _878 = _496 + _279;
        float _879 = _500 + _280;
        float _880 = _504 + _281;
        float _890 = fma(_880, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878)) - _847;
        float _891 = fma(_880, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878)) - _851;
        float _892 = fma(_880, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878)) - _855;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_847 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_851 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[35u].z) + ((((((_855 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _946 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_913.x + (-0.5));
        float _948 = _946 * (_913.y + (-0.5));
        float _949 = _946 * (_913.z + (-0.5));
        float _956 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_920.x + (-0.5));
        float _958 = _956 * (_920.y + (-0.5));
        float _959 = _956 * (_920.z + (-0.5));
        float _966 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_927.x + (-0.5));
        float _968 = _966 * (_927.y + (-0.5));
        float _969 = _966 * (_927.z + (-0.5));
        float _976 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_934.x + (-0.5));
        float _978 = _976 * (_934.y + (-0.5));
        float _979 = _976 * (_934.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_279, _280, _281), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3669 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1010 + 1.0))) + _1015) * _980;
        float _1025 = _948 * 0.5;
        float _1026 = _958 * 0.5;
        float _1027 = _968 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_279, _280, _281), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3702 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1052 + 1.0))) + _1057) * _981;
        float _1067 = _949 * 0.5;
        float _1068 = _959 * 0.5;
        float _1069 = _969 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_279, _280, _281), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3735 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1094 + 1.0))) + _1099) * _982;
        _1116 = _949;
        _1117 = _948;
        _1118 = _947;
        _1119 = _959;
        _1120 = _958;
        _1121 = _957;
        _1122 = _969;
        _1123 = _968;
        _1124 = _967;
        _1125 = _982;
        _1126 = _981;
        _1127 = _980;
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _807;
        _1117 = _807;
        _1118 = _807;
        _1119 = _807;
        _1120 = _807;
        _1121 = _807;
        _1122 = _807;
        _1123 = _807;
        _1124 = _807;
        _1125 = _807;
        _1126 = _807;
        _1127 = _807;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _819)) + _819;
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _820)) + _820;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1163 = fma(_1142, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1140 * cbSceneParam._m0[89u].x));
    float _1166 = fma(_1142, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1140 * cbSceneParam._m0[90u].x));
    float _1169 = fma(_1142, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1140));
    float _1184 = _443 * 0.5;
    float _1185 = _444 * 0.5;
    float _1186 = _445 * 0.5;
    float _1187 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1190 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1193 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1227;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1200 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_806, _810, _813, _816));
        float _1204 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_808, _811, _814, _817));
        float _1208 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_809, _812, _815, _818));
        float _1215 = dot(vec4(cbModelParam._m0[39u]), vec4(_1184, _1185, _1186, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1215) ? 0.0 : (isnan(0.0) ? _1215 : max(0.0, _1215))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1238;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1229 = dot(vec4(cbModelParam._m0[40u]), vec4(_1184, _1185, _1186, 1.0));
        _1238 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1238 = 1.0;
    }
    float _1242 = (_1238 * cbModelParam._m0[1u].x) + (_1227 * (1.0 - cbModelParam._m0[1u].x));
    float _1252 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _282);
    float _1253 = isnan(_1252) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1252 : min(cbModelParam._m0[25u].z, _1252));
    float _1335;
    float _1337;
    float _1339;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1302 = fma(_504, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496)) + cbModelParam._m0[13u].w;
        float _1306 = fma(_504, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496)) + cbModelParam._m0[14u].w;
        float _1310 = fma(_504, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496)) + cbModelParam._m0[15u].w;
        float _1313 = fma(_445, cbModelParam._m0[13u].z, fma(_444, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443));
        float _1316 = fma(_445, cbModelParam._m0[14u].z, fma(_444, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443));
        float _1319 = fma(_445, cbModelParam._m0[15u].z, fma(_444, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443));
        float _1347;
        if (_1313 > 0.0)
        {
            _1347 = abs((1.0 - _1302) / _1313);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1302 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1347 = frontier_phi_14_12_ladder;
        }
        float _1520;
        if (_1316 > 0.0)
        {
            _1520 = abs((1.0 - _1306) / _1316);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1306 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1520 = frontier_phi_23_19_ladder;
        }
        float _1815;
        if (_1319 > 0.0)
        {
            _1815 = abs((1.0 - _1310) / _1319);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1310 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1815 = frontier_phi_35_30_ladder;
        }
        float _1817 = isnan(_1520) ? _1347 : (isnan(_1347) ? _1520 : min(_1347, _1520));
        float _1818 = isnan(_1815) ? _1817 : (isnan(_1817) ? _1815 : min(_1817, _1815));
        float _1822 = (_1818 * _1313) + _1302;
        float _1823 = (_1818 * _1316) + _1306;
        float _1824 = (_1818 * _1319) + _1310;
        float _1825 = _1818 * 9.9999997473787516355514526367188e-05;
        float _1827 = (-1.0) - _1825;
        float _1829 = _1825 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1824 > _1829) || ((_1824 < _1827) || ((_1823 > _1829) || ((_1823 < _1827) || ((_1822 < _1827) || (_1822 > _1829))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1824, cbModelParam._m0[9u].z, fma(_1823, cbModelParam._m0[9u].y, _1822 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1824, cbModelParam._m0[10u].z, fma(_1823, cbModelParam._m0[10u].y, _1822 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1824, cbModelParam._m0[11u].z, fma(_1823, cbModelParam._m0[11u].y, _1822 * cbModelParam._m0[11u].x))), _1253);
            frontier_phi_13_35_ladder = _1969.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1969.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1969.x * cbModelParam._m0[1u].y;
        }
        _1335 = frontier_phi_13_35_ladder_2;
        _1337 = frontier_phi_13_35_ladder_1;
        _1339 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_443, _444, _445), _1253);
        _1335 = _1323.x * cbModelParam._m0[1u].y;
        _1337 = _1323.y * cbModelParam._m0[1u].y;
        _1339 = _1323.z * cbModelParam._m0[1u].y;
    }
    float _1343 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _282);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1343 : min(cbModelParam._m0[25u].w, _1343));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1401 = fma(_504, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496)) + cbModelParam._m0[21u].w;
        float _1405 = fma(_504, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496)) + cbModelParam._m0[22u].w;
        float _1409 = fma(_504, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496)) + cbModelParam._m0[23u].w;
        float _1412 = fma(_445, cbModelParam._m0[21u].z, fma(_444, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443));
        float _1415 = fma(_445, cbModelParam._m0[22u].z, fma(_444, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443));
        float _1418 = fma(_445, cbModelParam._m0[23u].z, fma(_444, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443));
        float _1525;
        if (_1412 > 0.0)
        {
            _1525 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1525 = frontier_phi_25_21_ladder;
        }
        float _1842;
        if (_1415 > 0.0)
        {
            _1842 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1842 = frontier_phi_37_32_ladder;
        }
        float _2169;
        if (_1418 > 0.0)
        {
            _2169 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2169 = frontier_phi_47_44_ladder;
        }
        float _2171 = isnan(_1842) ? _1525 : (isnan(_1525) ? _1842 : min(_1525, _1842));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1412) + _1401;
        float _2177 = (_2172 * _1415) + _1405;
        float _2178 = (_2172 * _1418) + _1409;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2179;
        float _2182 = _2179 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2178 > _2182) || ((_2178 < _2180) || ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 < _2180) || (_2176 > _2182))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2178, cbModelParam._m0[17u].z, fma(_2177, cbModelParam._m0[17u].y, _2176 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2178, cbModelParam._m0[18u].z, fma(_2177, cbModelParam._m0[18u].y, _2176 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2178, cbModelParam._m0[19u].z, fma(_2177, cbModelParam._m0[19u].y, _2176 * cbModelParam._m0[19u].x))), _1344);
            frontier_phi_22_47_ladder = _2296.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2296.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2296.x * cbModelParam._m0[1u].z;
        }
        _1437 = frontier_phi_22_47_ladder_2;
        _1439 = frontier_phi_22_47_ladder_1;
        _1441 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_443, _444, _445), _1344);
        _1437 = _1421.x * cbModelParam._m0[1u].z;
        _1439 = _1421.y * cbModelParam._m0[1u].z;
        _1441 = _1421.z * cbModelParam._m0[1u].z;
    }
    float _1453 = ((((1.0 - _464) * ((_451 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_464 * _451)) * _435;
    float _1454 = _1453 * ((cbModelParam._m0[1u].w * (_1437 - _1335)) + _1335);
    float _1455 = _1453 * ((cbModelParam._m0[1u].w * (_1439 - _1337)) + _1337);
    float _1456 = _1453 * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1459 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, _1454 * cbSceneParam._m0[91u].x));
    float _1499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1503 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1507 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1511 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1512 = _1499 / _1511;
    float _1513 = _1503 / _1511;
    float _1514 = _1507 / _1511;
    float _1661;
    float _1662;
    float _1663;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1541 = ((uint(_1514 > cbSceneParam._m0[59u].y) + uint(_1514 > cbSceneParam._m0[59u].x)) + uint(_1514 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1542 = _1541 + 43u;
        uint _1550 = _1541 + 44u;
        uint _1558 = _1541 + 45u;
        uint _1566 = _1541 + 46u;
        float _1577 = fma(_1511, cbSceneParam._m0[_1542].w, fma(_1507, cbSceneParam._m0[_1542].z, fma(_1503, cbSceneParam._m0[_1542].y, _1499 * cbSceneParam._m0[_1542].x)));
        float _1581 = fma(_1511, cbSceneParam._m0[_1550].w, fma(_1507, cbSceneParam._m0[_1550].z, fma(_1503, cbSceneParam._m0[_1550].y, _1499 * cbSceneParam._m0[_1550].x)));
        float _1589 = fma(_1511, cbSceneParam._m0[_1566].w, fma(_1507, cbSceneParam._m0[_1566].z, fma(_1503, cbSceneParam._m0[_1566].y, _1499 * cbSceneParam._m0[_1566].x)));
        float _1594 = cbSceneParam._m0[33u].z * _1589;
        float _1596 = cbSceneParam._m0[33u].w * _1589;
        float _1599 = fma(_1511, cbSceneParam._m0[_1558].w, fma(_1507, cbSceneParam._m0[_1558].z, fma(_1503, cbSceneParam._m0[_1558].y, _1499 * cbSceneParam._m0[_1558].x))) / _1589;
        float _1647 = (cbSceneParam._m0[33u].x - sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514))) * cbSceneParam._m0[33u].y;
        float _3861 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1654 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1594 + _1577) / _1589, (_1596 + _1581) / _1589), _1599), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1596 + _1577) / _1589, (_1581 - _1594) / _1589), _1599), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1577 - _1594) / _1589, (_1581 - _1596) / _1589), _1599), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1577 - _1596) / _1589, (_1594 + _1581) / _1589), _1599), 0.0)).x), vec4(0.25)));
        _1661 = 1.0 - (_1654 * cbSceneParam._m0[34u].x);
        _1662 = 1.0 - (_1654 * cbSceneParam._m0[34u].y);
        _1663 = 1.0 - (_1654 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1661 = 1.0;
        _1662 = 1.0;
        _1663 = 1.0;
    }
    float _1727;
    float _1729;
    float _1731;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1715 = fma(_1511, cbSceneParam._m0[63u].w, fma(_1507, cbSceneParam._m0[63u].z, fma(_1503, cbSceneParam._m0[63u].y, _1499 * cbSceneParam._m0[63u].x)));
        float _1716 = fma(_1511, cbSceneParam._m0[60u].w, fma(_1507, cbSceneParam._m0[60u].z, fma(_1503, cbSceneParam._m0[60u].y, _1499 * cbSceneParam._m0[60u].x))) / _1715;
        float _1717 = fma(_1511, cbSceneParam._m0[61u].w, fma(_1507, cbSceneParam._m0[61u].z, fma(_1503, cbSceneParam._m0[61u].y, _1499 * cbSceneParam._m0[61u].x))) / _1715;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1716 >= cbSceneParam._m0[64u].x) && (_1717 >= cbSceneParam._m0[64u].y)) && (_1716 <= cbSceneParam._m0[64u].z)) && (_1717 <= cbSceneParam._m0[64u].w))
        {
            float _1855 = fma(_1511, cbSceneParam._m0[62u].w, fma(_1507, cbSceneParam._m0[62u].z, fma(_1503, cbSceneParam._m0[62u].y, _1499 * cbSceneParam._m0[62u].x))) / _1715;
            float _1859 = isnan(cbSceneParam._m0[41u].w) ? _1855 : (isnan(_1855) ? cbSceneParam._m0[41u].w : max(_1855, cbSceneParam._m0[41u].w));
            float _1902 = (cbSceneParam._m0[33u].x - sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514))) * cbSceneParam._m0[33u].y;
            float _3877 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
            float _1909 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1716, cbSceneParam._m0[33u].w + _1717), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1716, _1717 - cbSceneParam._m0[33u].z), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1716 - cbSceneParam._m0[33u].z, _1717 - cbSceneParam._m0[33u].w), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1716 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1717), _1859), 0.0)).x), vec4(0.25)));
            float _1913 = 1.0 - (_1909 * cbSceneParam._m0[34u].x);
            float _1914 = 1.0 - (_1909 * cbSceneParam._m0[34u].y);
            float _1915 = 1.0 - (_1909 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1915) ? _1663 : (isnan(_1663) ? _1915 : min(_1663, _1915));
            frontier_phi_34_33_ladder_1 = isnan(_1914) ? _1662 : (isnan(_1662) ? _1914 : min(_1662, _1914));
            frontier_phi_34_33_ladder_2 = isnan(_1913) ? _1661 : (isnan(_1661) ? _1913 : min(_1661, _1913));
        }
        else
        {
            frontier_phi_34_33_ladder = _1663;
            frontier_phi_34_33_ladder_1 = _1662;
            frontier_phi_34_33_ladder_2 = _1661;
        }
        _1727 = frontier_phi_34_33_ladder_2;
        _1729 = frontier_phi_34_33_ladder_1;
        _1731 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1727 = _1661;
        _1729 = _1662;
        _1731 = _1663;
    }
    uvec4 _1736 = floatBitsToUint(cbInstanceData._m0[_410 + 5u]);
    uint _1738 = _1736.x * 14u;
    uint _1739 = _1738 + 13u;
    float _1746 = _435 + (-1.0);
    float _1751 = (cbLight._m0[_1739].x * _1746) + 1.0;
    float _1752 = (cbLight._m0[_1739].y * _1746) + 1.0;
    float _1753 = (cbLight._m0[_1739].z * _1746) + 1.0;
    float _1754 = (cbLight._m0[_1739].w * _1746) + 1.0;
    uint _1755 = _1738 + 5u;
    float _1761 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1765 = _1738 + 4u;
    float _1774 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1778 = _1738 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_279, _280, _281));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_279, _280, _281));
    float _3913 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _3924 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1755].x * _1761) * _1799) + (((cbLight._m0[_1765].x * _1727) * _1774) * _1797);
    float _1807 = ((_1761 * cbLight._m0[_1755].y) * _1799) + (((cbLight._m0[_1765].y * _1729) * _1774) * _1797);
    float _1808 = ((_1761 * cbLight._m0[_1755].z) * _1799) + (((cbLight._m0[_1765].z * _1731) * _1774) * _1797);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1738 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1814)
    {
        _1916 = _1806;
        _1918 = _1807;
        _1920 = _1808;
    }
    else
    {
        uint _1924 = _1738 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1738 + 2u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _3935 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1943 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1806;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1807;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1808;
    }
    bool _1923 = _1812.y == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1923)
    {
        _1978 = _1916;
        _1980 = _1918;
        _1982 = _1920;
    }
    else
    {
        uint _2140 = _1738 + 7u;
        float _2156 = (dot(vec3(cbLight._m0[_1738 + 3u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _3951 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2159 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1978 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _1916;
        _1980 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _1918;
        _1982 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _1920;
    }
    uint _1985 = _1738 + 8u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1738].w)) * _282) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1738].x + _361;
    float _2001 = cbLight._m0[_1738].y + _362;
    float _2002 = cbLight._m0[_1738].z + _363;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1738].xyz));
    float _3967 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _2014 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _2015 = dot(vec3(_279, _280, _281), vec3(_2007, _2008, _2009));
    float _3989 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_2007, _2008, _2009));
    float _4000 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _1999 * _1999;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = 1.0 - _1999;
    float _2050 = (0.5 / (((_2014 * ((_2013 * _2039) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2039) + _1999) * _2013))) * _2013;
    float _4011 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    uint _2066 = _1738 + 9u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _282) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1778].x + _361;
    float _2080 = cbLight._m0[_1778].y + _362;
    float _2081 = cbLight._m0[_1778].z + _363;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1778].xyz));
    float _4022 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _2093 = dot(vec3(_279, _280, _281), vec3(_2086, _2087, _2088));
    float _4033 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_2086, _2087, _2088));
    float _4044 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2078 * _2078;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2114 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2115 = 1.0 - _2078;
    float _2125 = (0.5 / (((_2014 * ((_2092 * _2115) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2115) + _2078) * _2092))) * _2092;
    float _4055 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2137 = (((_2114 * cbLight._m0[_2066].x) * _2127) * _1761) + ((((cbLight._m0[_1985].x * _1727) * _2038) * _2052) * _1774);
    float _2138 = (((_2114 * cbLight._m0[_2066].y) * _2127) * _1761) + ((((cbLight._m0[_1985].y * _1729) * _2038) * _2052) * _1774);
    float _2139 = (((_2114 * cbLight._m0[_2066].z) * _2127) * _1761) + ((((cbLight._m0[_1985].z * _1731) * _2038) * _2052) * _1774);
    float _2195;
    float _2197;
    float _2199;
    if (_1814)
    {
        _2195 = _2137;
        _2197 = _2138;
        _2199 = _2139;
    }
    else
    {
        uint _2201 = _1738 + 2u;
        uint _2205 = _1738 + 10u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _282) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _361;
        float _2222 = cbLight._m0[_2201].y + _362;
        float _2223 = cbLight._m0[_2201].z + _363;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_2201].xyz));
        float _4066 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2235 = dot(vec3(_279, _280, _281), vec3(_2228, _2229, _2230));
        float _4077 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4088 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2257 = 1.0 - _2220;
        float _2267 = (0.5 / (((_2014 * ((_2234 * _2257) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2257) + _2220) * _2234))) * _2234;
        float _4099 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2269 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2270 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2195 = (((_2256 * cbLight._m0[_2205].x) * _2269) * _2270) + _2137;
        _2197 = (((_2256 * cbLight._m0[_2205].y) * _2269) * _2270) + _2138;
        _2199 = (((_2256 * cbLight._m0[_2205].z) * _2269) * _2270) + _2139;
    }
    float _2301;
    float _2303;
    float _2305;
    if (_1923)
    {
        _2301 = _2195;
        _2303 = _2197;
        _2305 = _2199;
    }
    else
    {
        uint _2312 = _1738 + 3u;
        uint _2316 = _1738 + 11u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _282) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _361;
        float _2333 = cbLight._m0[_2312].y + _362;
        float _2334 = cbLight._m0[_2312].z + _363;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_2312].xyz));
        float _4115 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2346 = dot(vec3(_279, _280, _281), vec3(_2339, _2340, _2341));
        float _4126 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4137 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2368 = 1.0 - _2331;
        float _2378 = (0.5 / (((_2014 * ((_2345 * _2368) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2368) + _2331) * _2345))) * _2345;
        float _4148 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2301 = (((_2367 * cbLight._m0[_2316].x) * _2380) * _2381) + _2195;
        _2303 = (((_2367 * cbLight._m0[_2316].y) * _2380) * _2381) + _2197;
        _2305 = (((_2367 * cbLight._m0[_2316].z) * _2380) * _2381) + _2199;
    }
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_1736.y == 0u)
    {
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.x;
        uint _2414 = uint((float(_2402.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2403))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2403)));
        float _2424 = (log2(_1514 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2425 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        uint _2428 = uint(isnan(14.0) ? _2425 : (isnan(_2425) ? 14.0 : min(_2425, 14.0)));
        uvec4 _2433 = texelFetch(g_lightClusterGridBuffer, int(((_2428 << 2u) + (_2414 << 6u)) >> 2u));
        uint _2434 = _2433.x;
        uint _2435 = _2402.z;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((((1u << ((_2435 >> 4u) & 15u)) + 4294967295u) & _2434) == 0u) || ((_2435 & 240u) == 0u))
        {
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
        }
        else
        {
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            uint _2665 = 0u;
            uint _2674;
            bool _2675;
            for (;;)
            {
                _2674 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2665 << 2u)) >> 2u)).x;
                _2675 = _2674 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2675)
                {
                    frontier_phi_66_pred = _2664;
                    frontier_phi_66_pred_1 = _2663;
                    frontier_phi_66_pred_2 = _2662;
                    frontier_phi_66_pred_3 = _2661;
                    frontier_phi_66_pred_4 = _2660;
                    frontier_phi_66_pred_5 = _2659;
                }
                else
                {
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    uint _2789;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2674;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    for (;;)
                    {
                        uint _2793 = uint(findLSB(_2789)) + (_2665 << 5u);
                        uint _2790 = (_2789 + 4294967295u) & _2789;
                        uint _2795 = _2793 * 48u;
                        vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2815 = (_2793 * 48u) + 4u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2834 = (_2793 * 48u) + 8u;
                        vec3 _2845 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x));
                        float _2849 = _2809.x - _1512;
                        float _2850 = _2809.y - _1513;
                        float _2851 = _2809.z - _1514;
                        float _2852 = dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851));
                        float _2855 = inversesqrt(_2852);
                        float _2856 = _2855 * _2849;
                        float _2857 = _2855 * _2850;
                        float _2858 = _2855 * _2851;
                        float _2859 = dot(vec3(_391, _394, _397), vec3(_2856, _2857, _2858));
                        float _2864 = 1.0 - (_2852 * _2809.w);
                        float _4174 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2866 = sqrt(_2852) * _2828.w;
                        float _2869 = 1.39999997615814208984375 / (_2866 + 1.39999997615814208984375);
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2859) + _2870;
                        float _2876 = _2866 * _2866;
                        float _2880 = ((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2865) / ((_2876 * 0.699999988079071044921875) + 1.0);
                        float _2884 = (-0.0) - _1512;
                        float _2885 = (-0.0) - _1513;
                        float _2886 = (-0.0) - _1514;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2891 = _2890 * _2884;
                        float _2892 = _2890 * _2885;
                        float _2893 = _2890 * _2886;
                        float _2900 = exp2(log2(1.0 / ((_2876 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _451;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2891 + _2856;
                        float _2912 = _2892 + _2857;
                        float _2913 = _2893 + _2858;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_391, _394, _397), vec3(_2891, _2892, _2893));
                        float _4190 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2925 = dot(vec3(_391, _394, _397), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4201 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2869 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2859) + _2934;
                        float _4212 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4223 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_2932 * _2932) * ((_2876 * 2.1991131305694580078125) + 3.141590118408203125))) * _2865;
                        _2718 = (_2880 * _2828.x) + _2786;
                        _2719 = (_2880 * _2828.y) + _2787;
                        _2720 = (_2880 * _2828.z) + _2788;
                        _2715 = (_2960 * _2845.x) + _2783;
                        _2716 = (_2960 * _2845.y) + _2784;
                        _2717 = (_2960 * _2845.z) + _2785;
                        if (_2790 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2790;
                        }
                    }
                    frontier_phi_66_pred = _2720;
                    frontier_phi_66_pred_1 = _2719;
                    frontier_phi_66_pred_2 = _2718;
                    frontier_phi_66_pred_3 = _2717;
                    frontier_phi_66_pred_4 = _2716;
                    frontier_phi_66_pred_5 = _2715;
                }
                _2525 = frontier_phi_66_pred;
                _2523 = frontier_phi_66_pred_1;
                _2521 = frontier_phi_66_pred_2;
                _2519 = frontier_phi_66_pred_3;
                _2517 = frontier_phi_66_pred_4;
                _2515 = frontier_phi_66_pred_5;
                uint _2666 = _2665 + 1u;
                if (_2666 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2659 = _2515;
                    _2660 = _2517;
                    _2661 = _2519;
                    _2662 = _2521;
                    _2663 = _2523;
                    _2664 = _2525;
                    _2665 = _2666;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
        }
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.z;
        uint _2531 = (_2529 >> 8u) & 15u;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((4294967295u << _2531) & _2434) == 0u)
        {
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
            _2633 = _2520;
            _2635 = _2522;
            _2637 = _2524;
        }
        else
        {
            float _2652 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
            float _2653 = _2652 * _1512;
            float _2654 = _2652 * _1513;
            float _2655 = _2652 * _1514;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2531 < ((_2529 >> 12u) & 15u))
            {
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2766 = _2514;
                float _2767 = _2516;
                float _2768 = _2518;
                float _2769 = _2520;
                float _2770 = _2522;
                float _2771 = _2524;
                uint _2772 = _2531;
                uint _2781;
                bool _2782;
                for (;;)
                {
                    _2781 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                    _2782 = _2781 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2782)
                    {
                        frontier_phi_72_pred = _2771;
                        frontier_phi_72_pred_1 = _2770;
                        frontier_phi_72_pred_2 = _2769;
                        frontier_phi_72_pred_3 = _2768;
                        frontier_phi_72_pred_4 = _2767;
                        frontier_phi_72_pred_5 = _2766;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2978 = _2766;
                        float _2979 = _2767;
                        float _2980 = _2768;
                        float _2981 = _2769;
                        float _2982 = _2770;
                        float _2983 = _2771;
                        uint _2984 = _2781;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2995 = ((_2772 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2995 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2995 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_1514, _3105.z, fma(_1513, _3105.y, _3105.x * _1512)) + _3105.w;
                            _3118 = !((fma(_1514, _3086.z, fma(_1513, _3086.y, _3086.x * _1512)) + _3086.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3010.x - _1512;
                                float _3146 = _3010.y - _1513;
                                float _3147 = _3010.z - _1514;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3011 * _3011));
                                float _4234 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3163 = sqrt(_3148) * _3026.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_391, _394, _397))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_1514, _3054.z, fma(_1513, _3054.y, _3054.x * _1512)) + _3054.w) / _3117;
                                float _3177 = (fma(_1514, _3070.z, fma(_1513, _3070.y, _3070.x * _1512)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4250 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _451;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2653;
                                float _3207 = _3153 - _2654;
                                float _3208 = _3154 - _2655;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_391, _394, _397), vec3((-0.0) - _2653, (-0.0) - _2654, (-0.0) - _2655));
                                float _4261 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3220 = dot(vec3(_391, _394, _397), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4272 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_391, _394, _397), vec3(_3152, _3153, _3154))) + _3229;
                                float _4283 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4294 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3183 * _3026.y;
                                frontier_phi_78_pred_1 = _3183 * _3026.x;
                                frontier_phi_78_pred_2 = _3257 * _3038.z;
                                frontier_phi_78_pred_3 = _3257 * _3038.y;
                                frontier_phi_78_pred_4 = _3257 * _3038.x;
                                frontier_phi_78_pred_5 = _3183 * _3026.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_78_pred;
                            _3264 = frontier_phi_78_pred_1;
                            _3263 = frontier_phi_78_pred_2;
                            _3262 = frontier_phi_78_pred_3;
                            _3261 = frontier_phi_78_pred_4;
                            _3266 = frontier_phi_78_pred_5;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2970;
                        frontier_phi_72_pred_1 = _2969;
                        frontier_phi_72_pred_2 = _2968;
                        frontier_phi_72_pred_3 = _2967;
                        frontier_phi_72_pred_4 = _2966;
                        frontier_phi_72_pred_5 = _2965;
                    }
                    _2638 = frontier_phi_72_pred;
                    _2636 = frontier_phi_72_pred_1;
                    _2634 = frontier_phi_72_pred_2;
                    _2632 = frontier_phi_72_pred_3;
                    _2630 = frontier_phi_72_pred_4;
                    _2628 = frontier_phi_72_pred_5;
                    uint _2773 = _2772 + 1u;
                    if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2766 = _2628;
                        _2767 = _2630;
                        _2768 = _2632;
                        _2769 = _2634;
                        _2770 = _2636;
                        _2771 = _2638;
                        _2772 = _2773;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2638;
                frontier_phi_60_61_ladder_1 = _2636;
                frontier_phi_60_61_ladder_2 = _2632;
                frontier_phi_60_61_ladder_3 = _2630;
                frontier_phi_60_61_ladder_4 = _2628;
                frontier_phi_60_61_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_60_61_ladder = _2524;
                frontier_phi_60_61_ladder_1 = _2522;
                frontier_phi_60_61_ladder_2 = _2518;
                frontier_phi_60_61_ladder_3 = _2516;
                frontier_phi_60_61_ladder_4 = _2514;
                frontier_phi_60_61_ladder_5 = _2520;
            }
            _2627 = frontier_phi_60_61_ladder_4;
            _2629 = frontier_phi_60_61_ladder_3;
            _2631 = frontier_phi_60_61_ladder_2;
            _2633 = frontier_phi_60_61_ladder_5;
            _2635 = frontier_phi_60_61_ladder_1;
            _2637 = frontier_phi_60_61_ladder;
        }
        float _2642 = isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0));
        _2447 = (_2642 * _2633) + _1978;
        _2449 = (_2642 * _2635) + _1980;
        _2451 = (_2642 * _2637) + _1982;
        _2453 = ((_2627 * 0.039999999105930328369140625) * _2642) + _2301;
        _2455 = ((_2629 * 0.039999999105930328369140625) * _2642) + _2303;
        _2457 = ((_2631 * 0.039999999105930328369140625) * _2642) + _2305;
    }
    else
    {
        _2447 = _1978;
        _2449 = _1980;
        _2451 = _1982;
        _2453 = _2301;
        _2455 = _2303;
        _2457 = _2305;
    }
    float _4310 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _4321 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _4332 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    uint _2477 = _410 + 6u;
    float _2485 = _369 / cbSceneParam._m0[86u].x;
    float _2486 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2500 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, (log2((isnan(cbSceneParam._m0[77u].w) ? _301 : (isnan(_301) ? cbSceneParam._m0[77u].w : min(_301, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2502 = _2500.x;
    float _2503 = _2500.y;
    float _2504 = _2500.z;
    float _2505 = _2500.w;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_301 > cbSceneParam._m0[78u].w)
    {
        float _2539 = isnan(_301) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _301 : min(cbSceneParam._m0[80u].w, _301));
        float _2540 = _2539 / _301;
        float _2551 = _2540 * _354;
        float _2552 = _355 * _2540;
        float _2553 = (-0.0) - _2552;
        float _2555 = _2540 * _356;
        float _2557 = (cbSceneParam._m0[77u].w * _2553) / _2539;
        float _2558 = _2557 + cbSceneParam._m0[79u].w;
        float _2559 = cbSceneParam._m0[79u].w - _2552;
        float _2565 = sqrt(((_2551 * _2551) + (_2552 * _2552)) + (_2555 * _2555));
        float _2568 = (1.0 - (cbSceneParam._m0[77u].w / _2539)) * _2565;
        float _2573 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2575 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2728;
        if (abs((_2553 - _2557) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2728 = ((((_2558 > 0.0) ? exp2(_2573 * _2558) : (2.0 - exp2(_2575 * _2558))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2568;
        }
        else
        {
            float _2688 = 1.0 / cbSceneParam._m0[80u].x;
            float _2689 = isnan(_2559) ? _2558 : (isnan(_2558) ? _2559 : max(_2558, _2559));
            float _2690 = isnan(_2559) ? _2558 : (isnan(_2558) ? _2559 : min(_2558, _2559));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            float _2700 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : min(_2690, 0.0));
            _2728 = ((abs(_2565 / _2553) * cbSceneParam._m0[80u].y) * ((((_2699 - _2700) * 2.0) - ((exp2(_2573 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0)))) - exp2(_2573 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0))))) * _2688)) - ((exp2(_2575 * _2699) - exp2(_2575 * _2700)) * _2688))) + (_2568 * cbSceneParam._m0[80u].z);
        }
        vec4 _2730 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, 1.0), 0.0);
        float _2739 = exp2((_2728 * (-1.44269502162933349609375)) * (1.0 - _2730.w));
        float _2740 = log2(_2739);
        float _2756 = log2(_2505);
        _2577 = (exp2(_2756 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].x)) * _2730.x) / cbSceneParam._m0[78u].x)) + _2502;
        _2579 = (exp2(_2756 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].y)) * _2730.y) / cbSceneParam._m0[78u].y)) + _2503;
        _2581 = (exp2(_2756 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].z)) * _2730.z) / cbSceneParam._m0[78u].z)) + _2504;
        _2583 = _2739 * _2505;
    }
    else
    {
        _2577 = _2502;
        _2579 = _2503;
        _2581 = _2504;
        _2583 = _2505;
    }
    float _2595 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2596 = _2595 == 3.0;
    float _2597 = log2(_2583);
    float _2604 = exp2(_2597 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2447 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _435))) + ((_2453 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2605 = exp2(_2597 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2449 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _435))) + ((_2455 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2606 = exp2(_2597 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2451 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _435))) + ((_2457 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2615 = (_2595 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2615 * (_2596 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.y = _2615 * (_2596 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.z = _2615 * (_2596 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.w = cbInstanceData._m0[_2477].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2477].w;
}


