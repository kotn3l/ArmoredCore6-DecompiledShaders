#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _959;
float _3610;
float _3611;
float _3612;
float _3613;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _302 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3622 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _310 = (_303 * ((_271.x * cbMtdParam._m0[10u].x) - _246)) + _246;
    float _311 = (_303 * ((_271.y * cbMtdParam._m0[10u].y) - _247)) + _247;
    float _312 = (_303 * ((_271.z * cbMtdParam._m0[10u].z) - _248)) + _248;
    vec4 _329 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _337 = (_329.x * 2.0) + (-1.0);
    float _339 = (_329.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_337, _339), vec2(_337, _339));
    float _3633 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    float _346 = _329.z * cbMtdParam._m0[12u].y;
    vec4 _359 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _373 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_359.z * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _379 = ((((_359.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _337;
    float _380 = ((((_359.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _339;
    float _383 = fma(_345, _210 * NORMAL.x, fma(_380, _217 * TANGENT.x, (_203 * _195) * _379));
    float _386 = fma(_345, _210 * NORMAL.y, fma(_380, _217 * TANGENT.y, (_203 * _196) * _379));
    float _389 = fma(_345, _210 * NORMAL.z, fma(_380, _217 * TANGENT.z, (_203 * _197) * _379));
    float _393 = inversesqrt(dot(vec3(_383, _386, _389), vec3(_383, _386, _389)));
    float _394 = _393 * _383;
    float _395 = _393 * _386;
    float _396 = _393 * _389;
    float _3644 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _397 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3666 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3677 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _416 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _467 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _457);
    float _468 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _457);
    float _469 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _457);
    float _473 = inversesqrt(dot(vec3(_467, _468, _469), vec3(_467, _468, _469)));
    float _474 = _467 * _473;
    float _475 = _468 * _473;
    float _476 = _469 * _473;
    vec4 _481 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _483 = _481.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _639 = sqrt(((_467 * _467) + (_468 * _468)) + (_469 * _469));
        float _645 = (cbMatDynParam._m0[5u].x * _639) + cbMatDynParam._m0[5u].y;
        float _3688 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _650 = (cbMatDynParam._m0[5u].z * _639) + cbMatDynParam._m0[5u].w;
        float _3699 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) - _646)) + _646) < ((_483 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _515 = fma(_396, cbSceneParam._m0[5u].z, fma(_395, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _394));
    float _518 = fma(_396, cbSceneParam._m0[6u].z, fma(_395, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _394));
    float _521 = fma(_396, cbSceneParam._m0[7u].z, fma(_395, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _394));
    uint _534 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = _534 + 9u;
    uint _536 = _535 + uint(cbMatDynParam._m0[0u].w);
    float _542 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_536].x;
    float _543 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_536].y;
    float _544 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_536].z;
    float _3710 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _559 = _556.x * TEXCOORD_5.w;
    float _560 = dot(vec3(_394, _395, _396), vec3(_474, _475, _476));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _394) - _474;
    float _568 = (_563 * _395) - _475;
    float _569 = (_563 * _396) - _476;
    float _573 = abs(dot(vec3(_474, _475, _476), vec3(_394, _395, _396)));
    float _3743 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = sqrt(_397);
    float _588 = exp2((_575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_575 * 3.0));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _958;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _683 = fma(_628, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620));
        float _687 = fma(_628, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620));
        float _691 = fma(_628, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620));
        float _716 = _620 + _394;
        float _717 = _624 + _395;
        float _718 = _628 + _396;
        float _728 = fma(_718, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _716)) - _683;
        float _729 = fma(_718, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _716)) - _687;
        float _730 = fma(_718, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _716)) - _691;
        float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
        float _747 = ((_734 * _728) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_683 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_734 * _729) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_687 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_734 * _730) / cbModelParam._m0[34u].z) + ((((((_691 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        float _786 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_752.x + (-0.5));
        float _788 = _786 * (_752.y + (-0.5));
        float _789 = _786 * (_752.z + (-0.5));
        float _796 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_759.x + (-0.5));
        float _798 = _796 * (_759.y + (-0.5));
        float _799 = _796 * (_759.z + (-0.5));
        float _806 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_766.x + (-0.5));
        float _808 = _806 * (_766.y + (-0.5));
        float _809 = _806 * (_766.z + (-0.5));
        float _816 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_773.x + (-0.5));
        float _818 = _816 * (_773.y + (-0.5));
        float _819 = _816 * (_773.z + (-0.5));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = _787 * 0.5;
        float _824 = _797 * 0.5;
        float _825 = _807 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _840 = (dot(vec3(_394, _395, _396), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _850 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3791 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_852 + 1.0))) + _857) * _820;
        float _867 = _788 * 0.5;
        float _868 = _798 * 0.5;
        float _869 = _808 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_394, _395, _396), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3824 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_894 + 1.0))) + _899) * _821;
        float _909 = _789 * 0.5;
        float _910 = _799 * 0.5;
        float _911 = _809 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_394, _395, _396), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3857 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_936 + 1.0))) + _941) * _822;
        _958 = _789;
        _960 = _788;
        _961 = _787;
        _962 = _799;
        _963 = _798;
        _964 = _797;
        _965 = _809;
        _966 = _808;
        _967 = _807;
        _968 = _822;
        _969 = _821;
        _970 = _820;
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
    }
    else
    {
        _958 = _959;
        _960 = _959;
        _961 = _959;
        _962 = _959;
        _963 = _959;
        _964 = _959;
        _965 = _959;
        _966 = _959;
        _967 = _959;
        _968 = _959;
        _969 = _959;
        _970 = _959;
        _971 = 0.0;
        _972 = 0.0;
        _973 = 0.0;
    }
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1002 = fma(_628, cbModelParam._m0[30u].z, fma(_624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _620));
        float _1006 = fma(_628, cbModelParam._m0[31u].z, fma(_624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _620));
        float _1010 = fma(_628, cbModelParam._m0[32u].z, fma(_624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _620));
        float _1033 = _620 + _394;
        float _1034 = _624 + _395;
        float _1035 = _628 + _396;
        float _1045 = fma(_1035, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033)) - _1002;
        float _1046 = fma(_1035, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033)) - _1006;
        float _1047 = fma(_1035, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033)) - _1010;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1002 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1006 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[35u].z) + ((((((_1010 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1101 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1068.x + (-0.5));
        float _1103 = _1101 * (_1068.y + (-0.5));
        float _1104 = _1101 * (_1068.z + (-0.5));
        float _1111 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1075.x + (-0.5));
        float _1113 = _1111 * (_1075.y + (-0.5));
        float _1114 = _1111 * (_1075.z + (-0.5));
        float _1121 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1082.x + (-0.5));
        float _1123 = _1121 * (_1082.y + (-0.5));
        float _1124 = _1121 * (_1082.z + (-0.5));
        float _1131 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1089.x + (-0.5));
        float _1133 = _1131 * (_1089.y + (-0.5));
        float _1134 = _1131 * (_1089.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_394, _395, _396), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3920 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1165 + 1.0))) + _1170) * _1135;
        float _1180 = _1103 * 0.5;
        float _1181 = _1113 * 0.5;
        float _1182 = _1123 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_394, _395, _396), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3953 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1207 + 1.0))) + _1212) * _1136;
        float _1222 = _1104 * 0.5;
        float _1223 = _1114 * 0.5;
        float _1224 = _1124 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_394, _395, _396), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3986 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1249 + 1.0))) + _1254) * _1137;
        _1271 = _1104;
        _1272 = _1103;
        _1273 = _1102;
        _1274 = _1114;
        _1275 = _1113;
        _1276 = _1112;
        _1277 = _1124;
        _1278 = _1123;
        _1279 = _1122;
        _1280 = _1137;
        _1281 = _1136;
        _1282 = _1135;
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _959;
        _1272 = _959;
        _1273 = _959;
        _1274 = _959;
        _1275 = _959;
        _1276 = _959;
        _1277 = _959;
        _1278 = _959;
        _1279 = _959;
        _1280 = _959;
        _1281 = _959;
        _1282 = _959;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _973)) + _973;
    float _1318 = fma(_1297, cbSceneParam._m0[89u].z, fma(_1296, cbSceneParam._m0[89u].y, _1295 * cbSceneParam._m0[89u].x));
    float _1321 = fma(_1297, cbSceneParam._m0[90u].z, fma(_1296, cbSceneParam._m0[90u].y, _1295 * cbSceneParam._m0[90u].x));
    float _1324 = fma(_1297, cbSceneParam._m0[91u].z, fma(_1296, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1295));
    float _1339 = _567 * 0.5;
    float _1340 = _568 * 0.5;
    float _1341 = _569 * 0.5;
    float _1342 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1345 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1348 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1382;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1355 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_958, _962, _965, _968));
        float _1359 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_960, _963, _966, _969));
        float _1363 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_961, _964, _967, _970));
        float _1370 = dot(vec4(cbModelParam._m0[39u]), vec4(_1339, _1340, _1341, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1393;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1384 = dot(vec4(cbModelParam._m0[40u]), vec4(_1339, _1340, _1341, 1.0));
        _1393 = dot(vec3(isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1393 = 1.0;
    }
    float _1397 = (_1393 * cbModelParam._m0[1u].x) + (_1382 * (1.0 - cbModelParam._m0[1u].x));
    float _1407 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _397);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1407 : min(cbModelParam._m0[25u].z, _1407));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1457 = fma(_628, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620)) + cbModelParam._m0[13u].w;
        float _1461 = fma(_628, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620)) + cbModelParam._m0[14u].w;
        float _1465 = fma(_628, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620)) + cbModelParam._m0[15u].w;
        float _1468 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1471 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1474 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1502;
        if (_1468 > 0.0)
        {
            _1502 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1502 = frontier_phi_17_15_ladder;
        }
        float _1675;
        if (_1471 > 0.0)
        {
            _1675 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1675 = frontier_phi_26_22_ladder;
        }
        float _1970;
        if (_1474 > 0.0)
        {
            _1970 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1970 = frontier_phi_38_33_ladder;
        }
        float _1972 = isnan(_1675) ? _1502 : (isnan(_1502) ? _1675 : min(_1502, _1675));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1468) + _1457;
        float _1978 = (_1973 * _1471) + _1461;
        float _1979 = (_1973 * _1474) + _1465;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1980;
        float _1984 = _1980 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 > _1984) || ((_1978 < _1982) || ((_1977 < _1982) || (_1977 > _1984))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1979, cbModelParam._m0[9u].z, fma(_1978, cbModelParam._m0[9u].y, _1977 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1979, cbModelParam._m0[10u].z, fma(_1978, cbModelParam._m0[10u].y, _1977 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1979, cbModelParam._m0[11u].z, fma(_1978, cbModelParam._m0[11u].y, _1977 * cbModelParam._m0[11u].x))), _1408);
            frontier_phi_16_38_ladder = _2124.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2124.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2124.x * cbModelParam._m0[1u].y;
        }
        _1490 = frontier_phi_16_38_ladder_2;
        _1492 = frontier_phi_16_38_ladder_1;
        _1494 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1408);
        _1490 = _1478.x * cbModelParam._m0[1u].y;
        _1492 = _1478.y * cbModelParam._m0[1u].y;
        _1494 = _1478.z * cbModelParam._m0[1u].y;
    }
    float _1498 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _397);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1498 : min(cbModelParam._m0[25u].w, _1498));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1556 = fma(_628, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620)) + cbModelParam._m0[21u].w;
        float _1560 = fma(_628, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620)) + cbModelParam._m0[22u].w;
        float _1564 = fma(_628, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620)) + cbModelParam._m0[23u].w;
        float _1567 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1570 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1573 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1680;
        if (_1567 > 0.0)
        {
            _1680 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1680 = frontier_phi_28_24_ladder;
        }
        float _1997;
        if (_1570 > 0.0)
        {
            _1997 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1997 = frontier_phi_40_35_ladder;
        }
        float _2324;
        if (_1573 > 0.0)
        {
            _2324 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2324 = frontier_phi_50_47_ladder;
        }
        float _2326 = isnan(_1997) ? _1680 : (isnan(_1680) ? _1997 : min(_1680, _1997));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1567) + _1556;
        float _2332 = (_2327 * _1570) + _1560;
        float _2333 = (_2327 * _1573) + _1564;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1499);
            frontier_phi_25_50_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1592 = frontier_phi_25_50_ladder_2;
        _1594 = frontier_phi_25_50_ladder_1;
        _1596 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1499);
        _1592 = _1576.x * cbModelParam._m0[1u].z;
        _1594 = _1576.y * cbModelParam._m0[1u].z;
        _1596 = _1576.z * cbModelParam._m0[1u].z;
    }
    float _1608 = ((((1.0 - _588) * ((_575 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_588 * _575)) * _559;
    float _1609 = _1608 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1610 = _1608 * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1611 = _1608 * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1614 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, _1609 * cbSceneParam._m0[91u].x));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1667 = _1654 / _1666;
    float _1668 = _1658 / _1666;
    float _1669 = _1662 / _1666;
    float _1816;
    float _1817;
    float _1818;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1696 = ((uint(_1669 > cbSceneParam._m0[59u].y) + uint(_1669 > cbSceneParam._m0[59u].x)) + uint(_1669 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1697 = _1696 + 43u;
        uint _1705 = _1696 + 44u;
        uint _1713 = _1696 + 45u;
        uint _1721 = _1696 + 46u;
        float _1732 = fma(_1666, cbSceneParam._m0[_1697].w, fma(_1662, cbSceneParam._m0[_1697].z, fma(_1658, cbSceneParam._m0[_1697].y, _1654 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1666, cbSceneParam._m0[_1705].w, fma(_1662, cbSceneParam._m0[_1705].z, fma(_1658, cbSceneParam._m0[_1705].y, _1654 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1666, cbSceneParam._m0[_1721].w, fma(_1662, cbSceneParam._m0[_1721].z, fma(_1658, cbSceneParam._m0[_1721].y, _1654 * cbSceneParam._m0[_1721].x)));
        float _1749 = cbSceneParam._m0[33u].z * _1744;
        float _1751 = cbSceneParam._m0[33u].w * _1744;
        float _1754 = fma(_1666, cbSceneParam._m0[_1713].w, fma(_1662, cbSceneParam._m0[_1713].z, fma(_1658, cbSceneParam._m0[_1713].y, _1654 * cbSceneParam._m0[_1713].x))) / _1744;
        float _1802 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
        float _4112 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1809 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 + _1732) / _1744, (_1751 + _1736) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 + _1732) / _1744, (_1736 - _1749) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1749) / _1744, (_1736 - _1751) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1751) / _1744, (_1749 + _1736) / _1744), _1754), 0.0)).x), vec4(0.25)));
        _1816 = 1.0 - (_1809 * cbSceneParam._m0[34u].x);
        _1817 = 1.0 - (_1809 * cbSceneParam._m0[34u].y);
        _1818 = 1.0 - (_1809 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1816 = 1.0;
        _1817 = 1.0;
        _1818 = 1.0;
    }
    float _1882;
    float _1884;
    float _1886;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1870 = fma(_1666, cbSceneParam._m0[63u].w, fma(_1662, cbSceneParam._m0[63u].z, fma(_1658, cbSceneParam._m0[63u].y, _1654 * cbSceneParam._m0[63u].x)));
        float _1871 = fma(_1666, cbSceneParam._m0[60u].w, fma(_1662, cbSceneParam._m0[60u].z, fma(_1658, cbSceneParam._m0[60u].y, _1654 * cbSceneParam._m0[60u].x))) / _1870;
        float _1872 = fma(_1666, cbSceneParam._m0[61u].w, fma(_1662, cbSceneParam._m0[61u].z, fma(_1658, cbSceneParam._m0[61u].y, _1654 * cbSceneParam._m0[61u].x))) / _1870;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1871 >= cbSceneParam._m0[64u].x) && (_1872 >= cbSceneParam._m0[64u].y)) && (_1871 <= cbSceneParam._m0[64u].z)) && (_1872 <= cbSceneParam._m0[64u].w))
        {
            float _2010 = fma(_1666, cbSceneParam._m0[62u].w, fma(_1662, cbSceneParam._m0[62u].z, fma(_1658, cbSceneParam._m0[62u].y, _1654 * cbSceneParam._m0[62u].x))) / _1870;
            float _2014 = isnan(cbSceneParam._m0[41u].w) ? _2010 : (isnan(_2010) ? cbSceneParam._m0[41u].w : max(_2010, cbSceneParam._m0[41u].w));
            float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
            float _4128 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
            float _2064 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1871, cbSceneParam._m0[33u].w + _1872), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1871, _1872 - cbSceneParam._m0[33u].z), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].z, _1872 - cbSceneParam._m0[33u].w), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1872), _2014), 0.0)).x), vec4(0.25)));
            float _2068 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
            float _2069 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
            float _2070 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2070) ? _1818 : (isnan(_1818) ? _2070 : min(_1818, _2070));
            frontier_phi_37_36_ladder_1 = isnan(_2069) ? _1817 : (isnan(_1817) ? _2069 : min(_1817, _2069));
            frontier_phi_37_36_ladder_2 = isnan(_2068) ? _1816 : (isnan(_1816) ? _2068 : min(_1816, _2068));
        }
        else
        {
            frontier_phi_37_36_ladder = _1818;
            frontier_phi_37_36_ladder_1 = _1817;
            frontier_phi_37_36_ladder_2 = _1816;
        }
        _1882 = frontier_phi_37_36_ladder_2;
        _1884 = frontier_phi_37_36_ladder_1;
        _1886 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1882 = _1816;
        _1884 = _1817;
        _1886 = _1818;
    }
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_534 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _559 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1929 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1933 = _1893 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_394, _395, _396));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_394, _395, _396));
    float _4164 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4175 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1910].x * _1916) * _1954) + (((cbLight._m0[_1920].x * _1882) * _1929) * _1952);
    float _1962 = ((_1916 * cbLight._m0[_1910].y) * _1954) + (((cbLight._m0[_1920].y * _1884) * _1929) * _1952);
    float _1963 = ((_1916 * cbLight._m0[_1910].z) * _1954) + (((cbLight._m0[_1920].z * _1886) * _1929) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_1969)
    {
        _2071 = _1961;
        _2073 = _1962;
        _2075 = _1963;
    }
    else
    {
        uint _2079 = _1893 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_394, _395, _396)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4186 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2098 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1961;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1962;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1963;
    }
    bool _2078 = _1967.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2078)
    {
        _2133 = _2071;
        _2135 = _2073;
        _2137 = _2075;
    }
    else
    {
        uint _2295 = _1893 + 7u;
        float _2311 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_394, _395, _396)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4202 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2314 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2133 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2071;
        _2135 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2073;
        _2137 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2075;
    }
    uint _2140 = _1893 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _397) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1893].x + _474;
    float _2156 = cbLight._m0[_1893].y + _475;
    float _2157 = cbLight._m0[_1893].z + _476;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1893].xyz));
    float _4218 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _2169 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2170 = dot(vec3(_394, _395, _396), vec3(_2162, _2163, _2164));
    float _4240 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2162, _2163, _2164));
    float _4251 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2169 * ((_2168 * _2194) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2194) + _2154) * _2168))) * _2168;
    float _4262 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2221 = _1893 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _397) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_1933].x + _474;
    float _2235 = cbLight._m0[_1933].y + _475;
    float _2236 = cbLight._m0[_1933].z + _476;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1933].xyz));
    float _4273 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2248 = dot(vec3(_394, _395, _396), vec3(_2241, _2242, _2243));
    float _4284 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2241, _2242, _2243));
    float _4295 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2233;
    float _2280 = (0.5 / (((_2169 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2270) + _2233) * _2247))) * _2247;
    float _4306 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2292 = (((_2269 * cbLight._m0[_2221].x) * _2282) * _1916) + ((((cbLight._m0[_2140].x * _1882) * _2193) * _2207) * _1929);
    float _2293 = (((_2269 * cbLight._m0[_2221].y) * _2282) * _1916) + ((((cbLight._m0[_2140].y * _1884) * _2193) * _2207) * _1929);
    float _2294 = (((_2269 * cbLight._m0[_2221].z) * _2282) * _1916) + ((((cbLight._m0[_2140].z * _1886) * _2193) * _2207) * _1929);
    float _2350;
    float _2352;
    float _2354;
    if (_1969)
    {
        _2350 = _2292;
        _2352 = _2293;
        _2354 = _2294;
    }
    else
    {
        uint _2356 = _1893 + 2u;
        uint _2360 = _1893 + 10u;
        float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _397) * 0.949999988079071044921875);
        float _2375 = _2374 * _2374;
        float _2376 = cbLight._m0[_2356].x + _474;
        float _2377 = cbLight._m0[_2356].y + _475;
        float _2378 = cbLight._m0[_2356].z + _476;
        float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
        float _2383 = _2382 * _2376;
        float _2384 = _2382 * _2377;
        float _2385 = _2382 * _2378;
        float _2386 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_2356].xyz));
        float _4317 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2390 = dot(vec3(_394, _395, _396), vec3(_2383, _2384, _2385));
        float _4328 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2394 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2383, _2384, _2385));
        float _4339 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2398 = _2375 * _2375;
        float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
        float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2412 = 1.0 - _2375;
        float _2422 = (0.5 / (((_2169 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2412) + _2375) * _2389))) * _2389;
        float _4350 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2350 = (((_2411 * cbLight._m0[_2360].x) * _2424) * _2425) + _2292;
        _2352 = (((_2411 * cbLight._m0[_2360].y) * _2424) * _2425) + _2293;
        _2354 = (((_2411 * cbLight._m0[_2360].z) * _2424) * _2425) + _2294;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2078)
    {
        _2456 = _2350;
        _2458 = _2352;
        _2460 = _2354;
    }
    else
    {
        uint _2467 = _1893 + 3u;
        uint _2471 = _1893 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _397) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _474;
        float _2488 = cbLight._m0[_2467].y + _475;
        float _2489 = cbLight._m0[_2467].z + _476;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_2467].xyz));
        float _4366 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2501 = dot(vec3(_394, _395, _396), vec3(_2494, _2495, _2496));
        float _4377 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4388 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2169 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2523) + _2486) * _2500))) * _2500;
        float _4399 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2456 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2350;
        _2458 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2352;
        _2460 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2354;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1891.y == 0u)
    {
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _2558)));
        float _2579 = (log2(_1669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2838)
                {
                    frontier_phi_71_pred = _2827;
                    frontier_phi_71_pred_1 = _2826;
                    frontier_phi_71_pred_2 = _2825;
                    frontier_phi_71_pred_3 = _2824;
                    frontier_phi_71_pred_4 = _2823;
                    frontier_phi_71_pred_5 = _2822;
                }
                else
                {
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    uint _2973;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2837;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2977 = uint(findLSB(_2973)) + (_2828 << 5u);
                        uint _2974 = (_2973 + 4294967295u) & _2973;
                        uint _2979 = _2977 * 48u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2999 = (_2977 * 48u) + 4u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3018 = (_2977 * 48u) + 8u;
                        vec3 _3029 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x));
                        float _3033 = _2993.x - _1667;
                        float _3034 = _2993.y - _1668;
                        float _3035 = _2993.z - _1669;
                        float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                        float _3039 = inversesqrt(_3036);
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3043 = dot(vec3(_515, _518, _521), vec3(_3040, _3041, _3042));
                        float _3048 = 1.0 - (_3036 * _2993.w);
                        float _4425 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3050 = sqrt(_3036) * _3012.w;
                        float _3053 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _3043) + _3054;
                        float _3060 = _3050 * _3050;
                        float _3064 = ((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3049) / ((_3060 * 0.699999988079071044921875) + 1.0);
                        float _3068 = (-0.0) - _1667;
                        float _3069 = (-0.0) - _1668;
                        float _3070 = (-0.0) - _1669;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3084 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3085 = 1.0 - _575;
                        float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                        float _3093 = _3092 * _3092;
                        float _3094 = _3093 * _3093;
                        float _3095 = _3075 + _3040;
                        float _3096 = _3076 + _3041;
                        float _3097 = _3077 + _3042;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3105 = dot(vec3(_515, _518, _521), vec3(_3075, _3076, _3077));
                        float _4441 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3109 = dot(vec3(_515, _518, _521), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                        float _4452 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                        float _3117 = _3053 * _3093;
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3043) + _3118;
                        float _4463 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3123 = 1.0 - _3093;
                        float _3133 = (0.5 / (((_3122 * ((_3108 * _3123) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3093) * _3108))) * _3122;
                        float _4474 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3144 = (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3116 * _3116) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3049;
                        _2897 = (_3064 * _3012.x) + _2970;
                        _2898 = (_3064 * _3012.y) + _2971;
                        _2899 = (_3064 * _3012.z) + _2972;
                        _2894 = (_3144 * _3029.x) + _2967;
                        _2895 = (_3144 * _3029.y) + _2968;
                        _2896 = (_3144 * _3029.z) + _2969;
                        if (_2974 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2974;
                        }
                    }
                    frontier_phi_71_pred = _2899;
                    frontier_phi_71_pred_1 = _2898;
                    frontier_phi_71_pred_2 = _2897;
                    frontier_phi_71_pred_3 = _2896;
                    frontier_phi_71_pred_4 = _2895;
                    frontier_phi_71_pred_5 = _2894;
                }
                _2680 = frontier_phi_71_pred;
                _2678 = frontier_phi_71_pred_1;
                _2676 = frontier_phi_71_pred_2;
                _2674 = frontier_phi_71_pred_3;
                _2672 = frontier_phi_71_pred_4;
                _2670 = frontier_phi_71_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2670;
                    _2823 = _2672;
                    _2824 = _2674;
                    _2825 = _2676;
                    _2826 = _2678;
                    _2827 = _2680;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2686) & _2589) == 0u)
        {
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
            float _2816 = _2815 * _1667;
            float _2817 = _2815 * _1668;
            float _2818 = _2815 * _1669;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2950 = _2669;
                float _2951 = _2671;
                float _2952 = _2673;
                float _2953 = _2675;
                float _2954 = _2677;
                float _2955 = _2679;
                uint _2956 = _2686;
                uint _2965;
                bool _2966;
                for (;;)
                {
                    _2965 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                    _2966 = _2965 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2966)
                    {
                        frontier_phi_82_pred = _2955;
                        frontier_phi_82_pred_1 = _2954;
                        frontier_phi_82_pred_2 = _2953;
                        frontier_phi_82_pred_3 = _2952;
                        frontier_phi_82_pred_4 = _2951;
                        frontier_phi_82_pred_5 = _2950;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        float _3176 = _2955;
                        uint _3177 = _2965;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3247;
                        vec4 _3263;
                        float _3310;
                        bool _3311;
                        for (;;)
                        {
                            uint _3188 = ((_2956 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3234 = (_3188 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3250 = (_3188 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3188 * 40u) + 24u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3285 = (_3188 * 40u) + 28u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3310 = fma(_1669, _3298.z, fma(_1668, _3298.y, _3298.x * _1667)) + _3298.w;
                            _3311 = !((fma(_1669, _3279.z, fma(_1668, _3279.y, _3279.x * _1667)) + _3279.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3311)
                            {
                                float _3338 = _3203.x - _1667;
                                float _3339 = _3203.y - _1668;
                                float _3340 = _3203.z - _1669;
                                float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                                float _3344 = inversesqrt(_3341);
                                float _3345 = _3344 * _3338;
                                float _3346 = _3344 * _3339;
                                float _3347 = _3344 * _3340;
                                float _3351 = 1.0 - (_3341 / (_3204 * _3204));
                                float _4485 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3356 = sqrt(_3341) * _3219.w;
                                float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                                float _3359 = _3358 * _3358;
                                float _3362 = ((1.0 - _3359) * dot(vec3(_3345, _3346, _3347), vec3(_515, _518, _521))) + _3359;
                                float _3365 = _3356 * _3356;
                                float _3369 = (fma(_1669, _3247.z, fma(_1668, _3247.y, _3247.x * _1667)) + _3247.w) / _3310;
                                float _3370 = (fma(_1669, _3263.z, fma(_1668, _3263.y, _3263.x * _1667)) + _3263.w) / _3310;
                                float _3374 = 1.0 - dot(vec2(_3369, _3370), vec2(_3369, _3370));
                                float _4501 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3376 = _3375 * (((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3352) / ((_3365 * 0.699999988079071044921875) + 1.0));
                                float _3388 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3389 = 1.0 - _575;
                                float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                                float _3397 = _3396 * _3396;
                                float _3398 = _3397 * _3397;
                                float _3399 = _3345 - _2816;
                                float _3400 = _3346 - _2817;
                                float _3401 = _3347 - _2818;
                                float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                                float _3409 = dot(vec3(_515, _518, _521), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4512 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3413 = dot(vec3(_515, _518, _521), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                                float _4523 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                                float _3421 = _3358 * _3397;
                                float _3422 = _3421 * _3421;
                                float _3428 = ((1.0 - _3422) * dot(vec3(_515, _518, _521), vec3(_3345, _3346, _3347))) + _3422;
                                float _4534 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3430 = 1.0 - _3397;
                                float _3440 = (0.5 / (((_3429 * ((_3412 * _3430) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3397) * _3412))) * _3429;
                                float _4545 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3450 = (_3375 * _3352) * (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3420 * _3420) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3376 * _3219.z;
                                frontier_phi_88_pred_1 = _3376 * _3219.y;
                                frontier_phi_88_pred_2 = _3376 * _3219.x;
                                frontier_phi_88_pred_3 = _3450 * _3231.z;
                                frontier_phi_88_pred_4 = _3450 * _3231.y;
                                frontier_phi_88_pred_5 = _3450 * _3231.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_88_pred;
                            _3458 = frontier_phi_88_pred_1;
                            _3457 = frontier_phi_88_pred_2;
                            _3456 = frontier_phi_88_pred_3;
                            _3455 = frontier_phi_88_pred_4;
                            _3454 = frontier_phi_88_pred_5;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            _3160 = _3456 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3163;
                        frontier_phi_82_pred_1 = _3162;
                        frontier_phi_82_pred_2 = _3161;
                        frontier_phi_82_pred_3 = _3160;
                        frontier_phi_82_pred_4 = _3159;
                        frontier_phi_82_pred_5 = _3158;
                    }
                    _2801 = frontier_phi_82_pred;
                    _2799 = frontier_phi_82_pred_1;
                    _2797 = frontier_phi_82_pred_2;
                    _2795 = frontier_phi_82_pred_3;
                    _2793 = frontier_phi_82_pred_4;
                    _2791 = frontier_phi_82_pred_5;
                    uint _2957 = _2956 + 1u;
                    if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2950 = _2791;
                        _2951 = _2793;
                        _2952 = _2795;
                        _2953 = _2797;
                        _2954 = _2799;
                        _2955 = _2801;
                        _2956 = _2957;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2797;
                frontier_phi_63_64_ladder_1 = _2801;
                frontier_phi_63_64_ladder_2 = _2799;
                frontier_phi_63_64_ladder_3 = _2795;
                frontier_phi_63_64_ladder_4 = _2793;
                frontier_phi_63_64_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_63_64_ladder = _2675;
                frontier_phi_63_64_ladder_1 = _2679;
                frontier_phi_63_64_ladder_2 = _2677;
                frontier_phi_63_64_ladder_3 = _2673;
                frontier_phi_63_64_ladder_4 = _2671;
                frontier_phi_63_64_ladder_5 = _2669;
            }
            _2790 = frontier_phi_63_64_ladder_5;
            _2792 = frontier_phi_63_64_ladder_4;
            _2794 = frontier_phi_63_64_ladder_3;
            _2796 = frontier_phi_63_64_ladder;
            _2798 = frontier_phi_63_64_ladder_2;
            _2800 = frontier_phi_63_64_ladder_1;
        }
        float _2805 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2602 = (_2805 * _2796) + _2133;
        _2604 = (_2805 * _2798) + _2135;
        _2606 = (_2805 * _2800) + _2137;
        _2608 = ((_2790 * 0.039999999105930328369140625) * _2805) + _2456;
        _2610 = ((_2792 * 0.039999999105930328369140625) * _2805) + _2458;
        _2612 = ((_2794 * 0.039999999105930328369140625) * _2805) + _2460;
    }
    else
    {
        _2602 = _2133;
        _2604 = _2135;
        _2606 = _2137;
        _2608 = _2456;
        _2610 = _2458;
        _2612 = _2460;
    }
    float _4561 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4572 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4583 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2629 = ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2602 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _559))) + ((_2608 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1397)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2604 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _559))) + ((_2610 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1397)) * cbPerFrame._m0[3u].x);
    float _2631 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2606 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _559))) + ((_2612 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1397)) * cbPerFrame._m0[3u].x);
    uint _2632 = _534 + 6u;
    float _2640 = _495 / cbSceneParam._m0[86u].x;
    float _2641 = _496 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _416 : (isnan(_416) ? cbSceneParam._m0[77u].w : min(_416, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_416 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_416) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _416 : min(cbSceneParam._m0[80u].w, _416));
        float _2695 = _2694 / _416;
        float _2706 = _2695 * _467;
        float _2707 = _468 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2710 = _2695 * _469;
        float _2712 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2713 = _2712 + cbSceneParam._m0[79u].w;
        float _2714 = cbSceneParam._m0[79u].w - _2707;
        float _2720 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2710 * _2710));
        float _2723 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2720;
        float _2728 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2730 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2708 - _2712) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2713 > 0.0) ? exp2(_2728 * _2713) : (2.0 - exp2(_2730 * _2713))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2723;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : max(_2713, _2714));
            float _2853 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : min(_2713, _2714));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2907 = ((abs(_2720 / _2708) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2728 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2728 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2730 * _2862) - exp2(_2730 * _2863)) * _2851))) + (_2723 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2660);
        _2732 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2734 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2736 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2738 = _2918 * _2660;
    }
    else
    {
        _2732 = _2657;
        _2734 = _2658;
        _2736 = _2659;
        _2738 = _2660;
    }
    bool _2945;
    vec4 _2748;
    vec4 _2770;
    float _2772;
    float _2776;
    float _2777;
    float _2778;
    float _2779;
    bool _2789;
    for (;;)
    {
        _2748 = cbMatDynParam._m0[0u];
        float _2750 = roundEven(_2748.y);
        bool _2751 = _2750 == 3.0;
        float _2752 = log2(_2738);
        float _2759 = exp2(_2752 * cbSceneParam._m0[78u].x) * _2629;
        float _2760 = exp2(_2752 * cbSceneParam._m0[78u].y) * _2630;
        float _2761 = exp2(_2752 * cbSceneParam._m0[78u].z) * _2631;
        float _2768 = _483 + (-0.5);
        _2770 = cbMtdParam._m0[1u];
        _2772 = _2770.y * _2768;
        float _2775 = (_2750 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2776 = _2775 * (_2751 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2732)));
        _2777 = _2775 * (_2751 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2734)));
        _2778 = _2775 * (_2751 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2736)));
        _2779 = _2768 * 0.999000012874603271484375;
        _2789 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2789)
        {
            if ((cbInstanceData._m0[_534 + 7u].x + _2779) < 0.5)
            {
                _2945 = true;
                break;
            }
        }
        uint _2886 = _535 + uint(_2748.w);
        if ((cbInstanceData._m0[_2886].w < 1.0) && ((cbInstanceData._m0[_2886].w + _2779) < 0.5))
        {
            _2945 = true;
            break;
        }
        if ((_2772 + 1.0) < _2770.x)
        {
            _2945 = true;
            break;
        }
        _2945 = false;
        break;
    }
    float _3149;
    if (_2945)
    {
        discard_state = true;
        _3149 = 0.0;
    }
    else
    {
        _3149 = cbInstanceData._m0[_2632].w;
    }
    SV_Target.x = _2776;
    SV_Target.y = _2777;
    SV_Target.z = _2778;
    SV_Target.w = _3149;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
    discard_exit();
}


