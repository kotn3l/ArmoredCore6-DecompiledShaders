#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _850;
float _3242;
float _3243;
float _3244;
float _3245;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _180 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _181 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3254 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))));
    float _267 = _249.z * cbMtdParam._m0[12u].y;
    float _270 = fma(_266, _194 * NORMAL.x, fma(_259, _201 * TANGENT.x, (_187 * _179) * _257));
    float _273 = fma(_266, _194 * NORMAL.y, fma(_259, _201 * TANGENT.y, (_187 * _180) * _257));
    float _276 = fma(_266, _194 * NORMAL.z, fma(_259, _201 * TANGENT.z, (_187 * _181) * _257));
    float _280 = inversesqrt(dot(vec3(_270, _273, _276), vec3(_270, _273, _276)));
    float _281 = _280 * _270;
    float _282 = _280 * _273;
    float _283 = _280 * _276;
    float _3265 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _284 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3287 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3298 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _303 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _346 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _356 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _346);
    float _357 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _346);
    float _358 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _346);
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _356 * _362;
    float _364 = _357 * _362;
    float _365 = _358 * _362;
    vec4 _370 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _372 = _370.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _529 = sqrt(((_356 * _356) + (_357 * _357)) + (_358 * _358));
        float _535 = (cbMatDynParam._m0[5u].x * _529) + cbMatDynParam._m0[5u].y;
        float _3309 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
        float _536 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _540 = (cbMatDynParam._m0[5u].z * _529) + cbMatDynParam._m0[5u].w;
        float _3320 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) - _536)) + _536) < ((_372 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_283, cbSceneParam._m0[5u].z, fma(_282, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _281));
    float _408 = fma(_283, cbSceneParam._m0[6u].z, fma(_282, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _281));
    float _411 = fma(_283, cbSceneParam._m0[7u].z, fma(_282, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _281));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = _424 + 9u;
    uint _426 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _432 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_426].x;
    float _433 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_426].y;
    float _434 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_426].z;
    float _3331 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _449 = _446.x * TEXCOORD_5.w;
    float _450 = dot(vec3(_281, _282, _283), vec3(_363, _364, _365));
    float _453 = _450 * 2.0;
    float _457 = (_453 * _281) - _363;
    float _458 = (_453 * _282) - _364;
    float _459 = (_453 * _283) - _365;
    float _463 = abs(dot(vec3(_363, _364, _365), vec3(_281, _282, _283)));
    float _3364 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = sqrt(_284);
    float _478 = exp2((_465 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_465 * 3.0));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_518, cbModelParam._m0[26u].z, fma(_514, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510));
        float _578 = fma(_518, cbModelParam._m0[27u].z, fma(_514, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510));
        float _582 = fma(_518, cbModelParam._m0[28u].z, fma(_514, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510));
        float _607 = _510 + _281;
        float _608 = _514 + _282;
        float _609 = _518 + _283;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_281, _282, _283), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3412 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_281, _282, _283), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3445 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_281, _282, _283), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3478 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_518, cbModelParam._m0[30u].z, fma(_514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _510));
        float _897 = fma(_518, cbModelParam._m0[31u].z, fma(_514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _510));
        float _901 = fma(_518, cbModelParam._m0[32u].z, fma(_514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _510));
        float _924 = _510 + _281;
        float _925 = _514 + _282;
        float _926 = _518 + _283;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_959.x + (-0.5));
        float _994 = _992 * (_959.y + (-0.5));
        float _995 = _992 * (_959.z + (-0.5));
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_966.x + (-0.5));
        float _1004 = _1002 * (_966.y + (-0.5));
        float _1005 = _1002 * (_966.z + (-0.5));
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_973.x + (-0.5));
        float _1014 = _1012 * (_973.y + (-0.5));
        float _1015 = _1012 * (_973.z + (-0.5));
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_281, _282, _283), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3541 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1056 + 1.0))) + _1061) * _1026;
        float _1071 = _994 * 0.5;
        float _1072 = _1004 * 0.5;
        float _1073 = _1014 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_281, _282, _283), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3574 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1098 + 1.0))) + _1103) * _1027;
        float _1113 = _995 * 0.5;
        float _1114 = _1005 * 0.5;
        float _1115 = _1015 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_281, _282, _283), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3607 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1140 + 1.0))) + _1145) * _1028;
        _1162 = _995;
        _1163 = _994;
        _1164 = _993;
        _1165 = _1005;
        _1166 = _1004;
        _1167 = _1003;
        _1168 = _1015;
        _1169 = _1014;
        _1170 = _1013;
        _1171 = _1028;
        _1172 = _1027;
        _1173 = _1026;
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = _850;
        _1172 = _850;
        _1173 = _850;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _863)) + _863;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1209 = fma(_1188, cbSceneParam._m0[89u].z, fma(_1187, cbSceneParam._m0[89u].y, _1186 * cbSceneParam._m0[89u].x));
    float _1212 = fma(_1188, cbSceneParam._m0[90u].z, fma(_1187, cbSceneParam._m0[90u].y, _1186 * cbSceneParam._m0[90u].x));
    float _1215 = fma(_1188, cbSceneParam._m0[91u].z, fma(_1187, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1186));
    float _1230 = _457 * 0.5;
    float _1231 = _458 * 0.5;
    float _1232 = _459 * 0.5;
    float _1233 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1236 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1239 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1273;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1246 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_849, _853, _856, _859));
        float _1250 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_851, _854, _857, _860));
        float _1254 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_852, _855, _858, _861));
        float _1261 = dot(vec4(cbModelParam._m0[39u]), vec4(_1230, _1231, _1232, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1284;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1275 = dot(vec4(cbModelParam._m0[40u]), vec4(_1230, _1231, _1232, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1288 = (_1284 * cbModelParam._m0[1u].x) + (_1273 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _284);
    float _1299 = isnan(_1298) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1298 : min(cbModelParam._m0[25u].z, _1298));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1348 = fma(_518, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510)) + cbModelParam._m0[13u].w;
        float _1352 = fma(_518, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510)) + cbModelParam._m0[14u].w;
        float _1356 = fma(_518, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510)) + cbModelParam._m0[15u].w;
        float _1359 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1362 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1365 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1393;
        if (_1359 > 0.0)
        {
            _1393 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1393 = frontier_phi_17_15_ladder;
        }
        float _1618;
        if (_1362 > 0.0)
        {
            _1618 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1618 = frontier_phi_26_22_ladder;
        }
        float _1864;
        if (_1365 > 0.0)
        {
            _1864 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1864 = frontier_phi_38_33_ladder;
        }
        float _1866 = isnan(_1618) ? _1393 : (isnan(_1393) ? _1618 : min(_1393, _1618));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1359) + _1348;
        float _1872 = (_1867 * _1362) + _1352;
        float _1873 = (_1867 * _1365) + _1356;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1299);
            frontier_phi_16_38_ladder = _1997.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1997.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1997.x * cbModelParam._m0[1u].y;
        }
        _1381 = frontier_phi_16_38_ladder_2;
        _1383 = frontier_phi_16_38_ladder_1;
        _1385 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1299);
        _1381 = _1369.x * cbModelParam._m0[1u].y;
        _1383 = _1369.y * cbModelParam._m0[1u].y;
        _1385 = _1369.z * cbModelParam._m0[1u].y;
    }
    float _1389 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _284);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1389 : min(cbModelParam._m0[25u].w, _1389));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1447 = fma(_518, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510)) + cbModelParam._m0[21u].w;
        float _1451 = fma(_518, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510)) + cbModelParam._m0[22u].w;
        float _1455 = fma(_518, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510)) + cbModelParam._m0[23u].w;
        float _1458 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1461 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1464 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1623;
        if (_1458 > 0.0)
        {
            _1623 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1623 = frontier_phi_28_24_ladder;
        }
        float _1891;
        if (_1461 > 0.0)
        {
            _1891 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1891 = frontier_phi_40_35_ladder;
        }
        float _2096;
        if (_1464 > 0.0)
        {
            _2096 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2096 = frontier_phi_49_46_ladder;
        }
        float _2098 = isnan(_1891) ? _1623 : (isnan(_1623) ? _1891 : min(_1623, _1891));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1458) + _1447;
        float _2104 = (_2099 * _1461) + _1451;
        float _2105 = (_2099 * _1464) + _1455;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2106;
        float _2109 = _2106 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2105 > _2109) || ((_2105 < _2107) || ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 < _2107) || (_2103 > _2109))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2105, cbModelParam._m0[17u].z, fma(_2104, cbModelParam._m0[17u].y, _2103 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2105, cbModelParam._m0[18u].z, fma(_2104, cbModelParam._m0[18u].y, _2103 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2105, cbModelParam._m0[19u].z, fma(_2104, cbModelParam._m0[19u].y, _2103 * cbModelParam._m0[19u].x))), _1390);
            frontier_phi_25_49_ladder = _2304.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2304.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2304.x * cbModelParam._m0[1u].z;
        }
        _1483 = frontier_phi_25_49_ladder_2;
        _1485 = frontier_phi_25_49_ladder_1;
        _1487 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1390);
        _1483 = _1467.x * cbModelParam._m0[1u].z;
        _1485 = _1467.y * cbModelParam._m0[1u].z;
        _1487 = _1467.z * cbModelParam._m0[1u].z;
    }
    float _1499 = ((((1.0 - _478) * ((_465 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_478 * _465)) * _449;
    float _1500 = _1499 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1501 = _1499 * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1502 = _1499 * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1505 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1500 * cbSceneParam._m0[91u].x));
    vec4 _1519 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_384, _385));
    float _1521 = _1519.w;
    float _1533 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1521);
    float _1534 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1521);
    float _1535 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1521);
    uvec4 _1539 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1541 = _1539.x * 14u;
    uint _1542 = _1541 + 13u;
    float _1549 = _449 + (-1.0);
    float _1554 = (cbLight._m0[_1542].x * _1549) + 1.0;
    float _1555 = (cbLight._m0[_1542].y * _1549) + 1.0;
    float _1556 = (cbLight._m0[_1542].z * _1549) + 1.0;
    float _1557 = (cbLight._m0[_1542].w * _1549) + 1.0;
    uint _1558 = _1541 + 5u;
    float _1564 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1568 = _1541 + 4u;
    float _1577 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1581 = _1541 | 1u;
    float _1592 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_281, _282, _283));
    float _1595 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_281, _282, _283));
    float _3743 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _3754 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1600 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.3183098733425140380859375;
    float _1602 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1609 = ((cbLight._m0[_1558].x * _1564) * _1602) + (((cbLight._m0[_1568].x * _1533) * _1577) * _1600);
    float _1610 = ((_1564 * cbLight._m0[_1558].y) * _1602) + (((cbLight._m0[_1568].y * _1534) * _1577) * _1600);
    float _1611 = ((_1564 * cbLight._m0[_1558].z) * _1602) + (((cbLight._m0[_1568].z * _1535) * _1577) * _1600);
    uvec4 _1615 = floatBitsToUint(cbLight._m0[_1541 + 12u]);
    bool _1617 = _1615.x == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1617)
    {
        _1628 = _1609;
        _1630 = _1610;
        _1632 = _1611;
    }
    else
    {
        uint _1636 = _1541 + 6u;
        float _1652 = (dot(vec3(cbLight._m0[_1541 + 2u].xyz), vec3(_281, _282, _283)) * 0.5) + 0.5;
        float _1653 = _1652 * _1652;
        float _3765 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1655 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1628 = (((cbLight._m0[_1636].x * 0.3183098733425140380859375) * _1654) * _1655) + _1609;
        _1630 = (((cbLight._m0[_1636].y * 0.3183098733425140380859375) * _1654) * _1655) + _1610;
        _1632 = (((cbLight._m0[_1636].z * 0.3183098733425140380859375) * _1654) * _1655) + _1611;
    }
    bool _1635 = _1615.y == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1635)
    {
        _1673 = _1628;
        _1675 = _1630;
        _1677 = _1632;
    }
    else
    {
        uint _1835 = _1541 + 7u;
        float _1851 = (dot(vec3(cbLight._m0[_1541 + 3u].xyz), vec3(_281, _282, _283)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3781 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1854 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1673 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1628;
        _1675 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1630;
        _1677 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1632;
    }
    uint _1680 = _1541 + 8u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1541].w)) * _284) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1541].x + _363;
    float _1696 = cbLight._m0[_1541].y + _364;
    float _1697 = cbLight._m0[_1541].z + _365;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1541].xyz));
    float _3797 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _1709 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1710 = dot(vec3(_281, _282, _283), vec3(_1702, _1703, _1704));
    float _3819 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_1702, _1703, _1704));
    float _3830 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1694 * _1694;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1733 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1734 = 1.0 - _1694;
    float _1745 = (0.5 / (((_1709 * ((_1708 * _1734) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1734) + _1694) * _1708))) * _1708;
    float _3841 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1747 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    uint _1761 = _1541 + 9u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _284) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1581].x + _363;
    float _1775 = cbLight._m0[_1581].y + _364;
    float _1776 = cbLight._m0[_1581].z + _365;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1581].xyz));
    float _3852 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1788 = dot(vec3(_281, _282, _283), vec3(_1781, _1782, _1783));
    float _3863 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1781, _1782, _1783));
    float _3874 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1796 = _1773 * _1773;
    float _1800 = ((_1791 * _1791) * (_1796 + (-1.0))) + 1.0;
    float _1809 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1810 = 1.0 - _1773;
    float _1820 = (0.5 / (((_1709 * ((_1787 * _1810) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1810) + _1773) * _1787))) * _1787;
    float _3885 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1796 / ((_1800 * _1800) * 3.141590118408203125));
    float _1832 = (((_1809 * cbLight._m0[_1761].x) * _1822) * _1564) + ((((cbLight._m0[_1680].x * _1533) * _1733) * _1747) * _1577);
    float _1833 = (((_1809 * cbLight._m0[_1761].y) * _1822) * _1564) + ((((cbLight._m0[_1680].y * _1534) * _1733) * _1747) * _1577);
    float _1834 = (((_1809 * cbLight._m0[_1761].z) * _1822) * _1564) + ((((cbLight._m0[_1680].z * _1535) * _1733) * _1747) * _1577);
    float _1896;
    float _1898;
    float _1900;
    if (_1617)
    {
        _1896 = _1832;
        _1898 = _1833;
        _1900 = _1834;
    }
    else
    {
        uint _1902 = _1541 + 2u;
        uint _1906 = _1541 + 10u;
        float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _284) * 0.949999988079071044921875);
        float _1921 = _1920 * _1920;
        float _1922 = cbLight._m0[_1902].x + _363;
        float _1923 = cbLight._m0[_1902].y + _364;
        float _1924 = cbLight._m0[_1902].z + _365;
        float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
        float _1929 = _1928 * _1922;
        float _1930 = _1928 * _1923;
        float _1931 = _1928 * _1924;
        float _1932 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1902].xyz));
        float _3896 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1936 = dot(vec3(_281, _282, _283), vec3(_1929, _1930, _1931));
        float _3907 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1939 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1940 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_1929, _1930, _1931));
        float _3918 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = _1921 * _1921;
        float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
        float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1958 = 1.0 - _1921;
        float _1968 = (0.5 / (((_1709 * ((_1935 * _1958) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1958) + _1921) * _1935))) * _1935;
        float _3929 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1970 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
        float _1971 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1896 = (((_1957 * cbLight._m0[_1906].x) * _1970) * _1971) + _1832;
        _1898 = (((_1957 * cbLight._m0[_1906].y) * _1970) * _1971) + _1833;
        _1900 = (((_1957 * cbLight._m0[_1906].z) * _1970) * _1971) + _1834;
    }
    float _2006;
    float _2008;
    float _2010;
    if (_1635)
    {
        _2006 = _1896;
        _2008 = _1898;
        _2010 = _1900;
    }
    else
    {
        uint _2017 = _1541 + 3u;
        uint _2021 = _1541 + 11u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _284) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _363;
        float _2038 = cbLight._m0[_2017].y + _364;
        float _2039 = cbLight._m0[_2017].z + _365;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_2017].xyz));
        float _3945 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2051 = dot(vec3(_281, _282, _283), vec3(_2044, _2045, _2046));
        float _3956 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _3967 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2073 = 1.0 - _2036;
        float _2083 = (0.5 / (((_1709 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _2073) + _2036) * _2050))) * _2050;
        float _3978 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _2006 = (((_2072 * cbLight._m0[_2021].x) * _2085) * _2086) + _1896;
        _2008 = (((_2072 * cbLight._m0[_2021].y) * _2085) * _2086) + _1898;
        _2010 = (((_2072 * cbLight._m0[_2021].z) * _2085) * _2086) + _1900;
    }
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    if (_1539.y == 0u)
    {
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2161;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2161;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2161;
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.x;
        uint _2188 = uint((float(_2176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2177))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2177)));
        float _2198 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2199 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        uint _2202 = uint(isnan(14.0) ? _2199 : (isnan(_2199) ? 14.0 : min(_2199, 14.0)));
        uvec4 _2207 = texelFetch(g_lightClusterGridBuffer, int(((_2202 << 2u) + (_2188 << 6u)) >> 2u));
        uint _2208 = _2207.x;
        uint _2209 = _2176.z;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        if (((((1u << ((_2209 >> 4u) & 15u)) + 4294967295u) & _2208) == 0u) || ((_2209 & 240u) == 0u))
        {
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
        }
        else
        {
            float _2310;
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            uint _2468 = 0u;
            uint _2477;
            bool _2478;
            for (;;)
            {
                _2477 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2468 << 2u)) >> 2u)).x;
                _2478 = _2477 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2478)
                {
                    frontier_phi_66_pred = _2462;
                    frontier_phi_66_pred_1 = _2467;
                    frontier_phi_66_pred_2 = _2466;
                    frontier_phi_66_pred_3 = _2465;
                    frontier_phi_66_pred_4 = _2464;
                    frontier_phi_66_pred_5 = _2463;
                }
                else
                {
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    uint _2613;
                    _2607 = _2462;
                    _2608 = _2463;
                    _2609 = _2464;
                    _2610 = _2465;
                    _2611 = _2466;
                    _2612 = _2467;
                    _2613 = _2477;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    for (;;)
                    {
                        uint _2617 = uint(findLSB(_2613)) + (_2468 << 5u);
                        uint _2614 = (_2613 + 4294967295u) & _2613;
                        uint _2619 = _2617 * 48u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 3u)).x));
                        uint _2639 = (_2617 * 48u) + 4u;
                        vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2658 = (_2617 * 48u) + 8u;
                        vec3 _2669 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x));
                        float _2673 = _2633.x - _2162;
                        float _2674 = _2633.y - _2163;
                        float _2675 = _2633.z - _2164;
                        float _2676 = dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675));
                        float _2679 = inversesqrt(_2676);
                        float _2680 = _2679 * _2673;
                        float _2681 = _2679 * _2674;
                        float _2682 = _2679 * _2675;
                        float _2683 = dot(vec3(_405, _408, _411), vec3(_2680, _2681, _2682));
                        float _2688 = 1.0 - (_2676 * _2633.w);
                        float _4004 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2689 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2690 = sqrt(_2676) * _2652.w;
                        float _2693 = 1.39999997615814208984375 / (_2690 + 1.39999997615814208984375);
                        float _2694 = _2693 * _2693;
                        float _2697 = ((1.0 - _2694) * _2683) + _2694;
                        float _2700 = _2690 * _2690;
                        float _2704 = ((isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))) * _2689) / ((_2700 * 0.699999988079071044921875) + 1.0);
                        float _2708 = (-0.0) - _2162;
                        float _2709 = (-0.0) - _2163;
                        float _2710 = (-0.0) - _2164;
                        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2725 = exp2(log2(1.0 / ((_2700 * 3.5) + 5.0)) * 0.25);
                        float _2726 = 1.0 - _465;
                        float _2733 = sqrt(1.0 - ((1.0 - (_2726 * _2726)) * (1.0 - (_2725 * _2725))));
                        float _2734 = _2733 * _2733;
                        float _2735 = _2734 * _2734;
                        float _2736 = _2715 + _2680;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2746 = dot(vec3(_405, _408, _411), vec3(_2715, _2716, _2717));
                        float _4020 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2749 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2750 = dot(vec3(_405, _408, _411), vec3(_2742 * _2736, _2742 * _2737, _2742 * _2738));
                        float _4031 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2753 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2757 = ((_2753 * _2753) * (_2735 + (-1.0))) + 1.0;
                        float _2758 = _2693 * _2734;
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * _2683) + _2759;
                        float _4042 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2764 = 1.0 - _2734;
                        float _2774 = (0.5 / (((_2763 * ((_2749 * _2764) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2763 * _2764) + _2734) * _2749))) * _2763;
                        float _4053 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2785 = (((_2735 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_2757 * _2757) * ((_2700 * 2.1991131305694580078125) + 3.141590118408203125))) * _2689;
                        _2537 = (_2704 * _2652.x) + _2610;
                        _2538 = (_2704 * _2652.y) + _2611;
                        _2539 = (_2704 * _2652.z) + _2612;
                        _2534 = (_2785 * _2669.x) + _2607;
                        _2535 = (_2785 * _2669.y) + _2608;
                        _2536 = (_2785 * _2669.z) + _2609;
                        if (_2614 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2607 = _2534;
                            _2608 = _2535;
                            _2609 = _2536;
                            _2610 = _2537;
                            _2611 = _2538;
                            _2612 = _2539;
                            _2613 = _2614;
                        }
                    }
                    frontier_phi_66_pred = _2534;
                    frontier_phi_66_pred_1 = _2539;
                    frontier_phi_66_pred_2 = _2538;
                    frontier_phi_66_pred_3 = _2537;
                    frontier_phi_66_pred_4 = _2536;
                    frontier_phi_66_pred_5 = _2535;
                }
                _2310 = frontier_phi_66_pred;
                _2320 = frontier_phi_66_pred_1;
                _2318 = frontier_phi_66_pred_2;
                _2316 = frontier_phi_66_pred_3;
                _2314 = frontier_phi_66_pred_4;
                _2312 = frontier_phi_66_pred_5;
                uint _2469 = _2468 + 1u;
                if (_2469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2462 = _2310;
                    _2463 = _2312;
                    _2464 = _2314;
                    _2465 = _2316;
                    _2466 = _2318;
                    _2467 = _2320;
                    _2468 = _2469;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
        }
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.z;
        uint _2326 = (_2324 >> 8u) & 15u;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((4294967295u << _2326) & _2208) == 0u)
        {
            _2430 = _2309;
            _2432 = _2311;
            _2434 = _2313;
            _2436 = _2315;
            _2438 = _2317;
            _2440 = _2319;
        }
        else
        {
            float _2455 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _2456 = _2455 * _2162;
            float _2457 = _2455 * _2163;
            float _2458 = _2455 * _2164;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2326 < ((_2324 >> 12u) & 15u))
            {
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2590 = _2309;
                float _2591 = _2311;
                float _2592 = _2313;
                float _2593 = _2315;
                float _2594 = _2317;
                float _2595 = _2319;
                uint _2596 = _2326;
                uint _2605;
                bool _2606;
                for (;;)
                {
                    _2605 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                    _2606 = _2605 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2606)
                    {
                        frontier_phi_77_pred = _2595;
                        frontier_phi_77_pred_1 = _2594;
                        frontier_phi_77_pred_2 = _2593;
                        frontier_phi_77_pred_3 = _2592;
                        frontier_phi_77_pred_4 = _2591;
                        frontier_phi_77_pred_5 = _2590;
                    }
                    else
                    {
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _2812 = _2590;
                        float _2813 = _2591;
                        float _2814 = _2592;
                        float _2815 = _2593;
                        float _2816 = _2594;
                        float _2817 = _2595;
                        uint _2818 = _2605;
                        uint _2819;
                        vec4 _2844;
                        float _2845;
                        vec4 _2860;
                        vec3 _2872;
                        vec4 _2888;
                        vec4 _2904;
                        float _2951;
                        bool _2952;
                        for (;;)
                        {
                            uint _2829 = ((_2596 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2818));
                            _2819 = (_2818 + 4294967295u) & _2818;
                            uint _2831 = _2829 * 40u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            _2845 = _2844.w;
                            uint _2847 = (_2829 * 40u) + 4u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2862 = (_2829 * 40u) + 8u;
                            _2872 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x));
                            uint _2875 = (_2829 * 40u) + 16u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2891 = (_2829 * 40u) + 20u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2907 = (_2829 * 40u) + 24u;
                            vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2926 = (_2829 * 40u) + 28u;
                            vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2951 = fma(_2164, _2939.z, fma(_2163, _2939.y, _2939.x * _2162)) + _2939.w;
                            _2952 = !((fma(_2164, _2920.z, fma(_2163, _2920.y, _2920.x * _2162)) + _2920.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2952)
                            {
                                float _2979 = _2844.x - _2162;
                                float _2980 = _2844.y - _2163;
                                float _2981 = _2844.z - _2164;
                                float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                                float _2985 = inversesqrt(_2982);
                                float _2986 = _2985 * _2979;
                                float _2987 = _2985 * _2980;
                                float _2988 = _2985 * _2981;
                                float _2992 = 1.0 - (_2982 / (_2845 * _2845));
                                float _4064 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _2997 = sqrt(_2982) * _2860.w;
                                float _2999 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                                float _3000 = _2999 * _2999;
                                float _3003 = ((1.0 - _3000) * dot(vec3(_2986, _2987, _2988), vec3(_405, _408, _411))) + _3000;
                                float _3006 = _2997 * _2997;
                                float _3010 = (fma(_2164, _2888.z, fma(_2163, _2888.y, _2888.x * _2162)) + _2888.w) / _2951;
                                float _3011 = (fma(_2164, _2904.z, fma(_2163, _2904.y, _2904.x * _2162)) + _2904.w) / _2951;
                                float _3015 = 1.0 - dot(vec2(_3010, _3011), vec2(_3010, _3011));
                                float _4080 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3017 = _3016 * (((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2993) / ((_3006 * 0.699999988079071044921875) + 1.0));
                                float _3029 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                                float _3030 = 1.0 - _465;
                                float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                                float _3038 = _3037 * _3037;
                                float _3039 = _3038 * _3038;
                                float _3040 = _2986 - _2456;
                                float _3041 = _2987 - _2457;
                                float _3042 = _2988 - _2458;
                                float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                                float _3050 = dot(vec3(_405, _408, _411), vec3((-0.0) - _2456, (-0.0) - _2457, (-0.0) - _2458));
                                float _4091 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3053 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3054 = dot(vec3(_405, _408, _411), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                                float _4102 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3057 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                                float _3062 = _2999 * _3038;
                                float _3063 = _3062 * _3062;
                                float _3069 = ((1.0 - _3063) * dot(vec3(_405, _408, _411), vec3(_2986, _2987, _2988))) + _3063;
                                float _4113 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3071 = 1.0 - _3038;
                                float _3081 = (0.5 / (((_3070 * ((_3053 * _3071) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3070 * _3071) + _3038) * _3053))) * _3070;
                                float _4124 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3091 = (_3016 * _2993) * (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_3061 * _3061) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3017 * _2860.y;
                                frontier_phi_83_pred_1 = _3017 * _2860.x;
                                frontier_phi_83_pred_2 = _3091 * _2872.z;
                                frontier_phi_83_pred_3 = _3091 * _2872.y;
                                frontier_phi_83_pred_4 = _3091 * _2872.x;
                                frontier_phi_83_pred_5 = _3017 * _2860.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3099 = frontier_phi_83_pred;
                            _3098 = frontier_phi_83_pred_1;
                            _3097 = frontier_phi_83_pred_2;
                            _3096 = frontier_phi_83_pred_3;
                            _3095 = frontier_phi_83_pred_4;
                            _3100 = frontier_phi_83_pred_5;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            _2801 = _3097 + _2814;
                            if (_2819 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2819;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2804;
                        frontier_phi_77_pred_1 = _2803;
                        frontier_phi_77_pred_2 = _2802;
                        frontier_phi_77_pred_3 = _2801;
                        frontier_phi_77_pred_4 = _2800;
                        frontier_phi_77_pred_5 = _2799;
                    }
                    _2441 = frontier_phi_77_pred;
                    _2439 = frontier_phi_77_pred_1;
                    _2437 = frontier_phi_77_pred_2;
                    _2435 = frontier_phi_77_pred_3;
                    _2433 = frontier_phi_77_pred_4;
                    _2431 = frontier_phi_77_pred_5;
                    uint _2597 = _2596 + 1u;
                    if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2590 = _2431;
                        _2591 = _2433;
                        _2592 = _2435;
                        _2593 = _2437;
                        _2594 = _2439;
                        _2595 = _2441;
                        _2596 = _2597;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2435;
                frontier_phi_58_59_ladder_1 = _2441;
                frontier_phi_58_59_ladder_2 = _2439;
                frontier_phi_58_59_ladder_3 = _2437;
                frontier_phi_58_59_ladder_4 = _2433;
                frontier_phi_58_59_ladder_5 = _2431;
            }
            else
            {
                frontier_phi_58_59_ladder = _2313;
                frontier_phi_58_59_ladder_1 = _2319;
                frontier_phi_58_59_ladder_2 = _2317;
                frontier_phi_58_59_ladder_3 = _2315;
                frontier_phi_58_59_ladder_4 = _2311;
                frontier_phi_58_59_ladder_5 = _2309;
            }
            _2430 = frontier_phi_58_59_ladder_5;
            _2432 = frontier_phi_58_59_ladder_4;
            _2434 = frontier_phi_58_59_ladder;
            _2436 = frontier_phi_58_59_ladder_3;
            _2438 = frontier_phi_58_59_ladder_2;
            _2440 = frontier_phi_58_59_ladder_1;
        }
        float _2445 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _2221 = (_2445 * _2436) + _1673;
        _2223 = (_2445 * _2438) + _1675;
        _2225 = (_2445 * _2440) + _1677;
        _2227 = ((_2430 * 0.039999999105930328369140625) * _2445) + _2006;
        _2229 = ((_2432 * 0.039999999105930328369140625) * _2445) + _2008;
        _2231 = ((_2434 * 0.039999999105930328369140625) * _2445) + _2010;
    }
    else
    {
        _2221 = _1673;
        _2223 = _1675;
        _2225 = _1677;
        _2227 = _2006;
        _2229 = _2008;
        _2231 = _2010;
    }
    float _4140 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4151 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4162 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _2248 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2221 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _449))) + ((_2227 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2249 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2223 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _449))) + ((_2229 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2250 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2225 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _449))) + ((_2231 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    uint _2251 = _424 + 6u;
    float _2259 = _384 / cbSceneParam._m0[86u].x;
    float _2260 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2274 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2259, _2260, (log2((isnan(cbSceneParam._m0[77u].w) ? _303 : (isnan(_303) ? cbSceneParam._m0[77u].w : min(_303, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2276 = _2274.x;
    float _2277 = _2274.y;
    float _2278 = _2274.z;
    float _2279 = _2274.w;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_303 > cbSceneParam._m0[78u].w)
    {
        float _2334 = isnan(_303) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _303 : min(cbSceneParam._m0[80u].w, _303));
        float _2335 = _2334 / _303;
        float _2346 = _2335 * _356;
        float _2347 = _357 * _2335;
        float _2348 = (-0.0) - _2347;
        float _2350 = _2335 * _358;
        float _2352 = (cbSceneParam._m0[77u].w * _2348) / _2334;
        float _2353 = _2352 + cbSceneParam._m0[79u].w;
        float _2354 = cbSceneParam._m0[79u].w - _2347;
        float _2360 = sqrt(((_2346 * _2346) + (_2347 * _2347)) + (_2350 * _2350));
        float _2363 = (1.0 - (cbSceneParam._m0[77u].w / _2334)) * _2360;
        float _2368 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2370 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2547;
        if (abs((_2348 - _2352) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2547 = ((((_2353 > 0.0) ? exp2(_2368 * _2353) : (2.0 - exp2(_2370 * _2353))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2363;
        }
        else
        {
            float _2491 = 1.0 / cbSceneParam._m0[80u].x;
            float _2492 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : max(_2353, _2354));
            float _2493 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : min(_2353, _2354));
            float _2502 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : min(_2492, 0.0));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            _2547 = ((abs(_2360 / _2348) * cbSceneParam._m0[80u].y) * ((((_2502 - _2503) * 2.0) - ((exp2(_2368 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0)))) - exp2(_2368 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0))))) * _2491)) - ((exp2(_2370 * _2502) - exp2(_2370 * _2503)) * _2491))) + (_2363 * cbSceneParam._m0[80u].z);
        }
        vec4 _2549 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2259, _2260, 1.0), 0.0);
        float _2558 = exp2((_2547 * (-1.44269502162933349609375)) * (1.0 - _2549.w));
        float _2559 = log2(_2558);
        float _2575 = log2(_2279);
        _2372 = (exp2(_2575 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].x)) * _2549.x) / cbSceneParam._m0[78u].x)) + _2276;
        _2374 = (exp2(_2575 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].y)) * _2549.y) / cbSceneParam._m0[78u].y)) + _2277;
        _2376 = (exp2(_2575 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].z)) * _2549.z) / cbSceneParam._m0[78u].z)) + _2278;
        _2378 = _2558 * _2279;
    }
    else
    {
        _2372 = _2276;
        _2374 = _2277;
        _2376 = _2278;
        _2378 = _2279;
    }
    bool _2585;
    vec4 _2388;
    vec4 _2410;
    float _2412;
    float _2416;
    float _2417;
    float _2418;
    float _2419;
    bool _2429;
    for (;;)
    {
        _2388 = cbMatDynParam._m0[0u];
        float _2390 = roundEven(_2388.y);
        bool _2391 = _2390 == 3.0;
        float _2392 = log2(_2378);
        float _2399 = exp2(_2392 * cbSceneParam._m0[78u].x) * _2248;
        float _2400 = exp2(_2392 * cbSceneParam._m0[78u].y) * _2249;
        float _2401 = exp2(_2392 * cbSceneParam._m0[78u].z) * _2250;
        float _2408 = _372 + (-0.5);
        _2410 = cbMtdParam._m0[1u];
        _2412 = _2410.y * _2408;
        float _2415 = (_2390 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2416 = _2415 * (_2391 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2372)));
        _2417 = _2415 * (_2391 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2374)));
        _2418 = _2415 * (_2391 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2376)));
        _2419 = _2408 * 0.999000012874603271484375;
        _2429 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2429)
        {
            if ((cbInstanceData._m0[_424 + 7u].x + _2419) < 0.5)
            {
                _2585 = true;
                break;
            }
        }
        uint _2526 = _425 + uint(_2388.w);
        if ((cbInstanceData._m0[_2526].w < 1.0) && ((cbInstanceData._m0[_2526].w + _2419) < 0.5))
        {
            _2585 = true;
            break;
        }
        if ((_2412 + 1.0) < _2410.x)
        {
            _2585 = true;
            break;
        }
        _2585 = false;
        break;
    }
    float _2790;
    if (_2585)
    {
        discard_state = true;
        _2790 = 0.0;
    }
    else
    {
        _2790 = cbInstanceData._m0[_2251].w;
    }
    SV_Target.x = _2416;
    SV_Target.y = _2417;
    SV_Target.z = _2418;
    SV_Target.w = _2790;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2251].w;
    discard_exit();
}


