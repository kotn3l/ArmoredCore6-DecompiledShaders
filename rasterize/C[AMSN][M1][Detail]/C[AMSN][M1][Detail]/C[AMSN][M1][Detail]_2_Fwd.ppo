#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _838;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _176 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _177 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _240 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _242 = _240.x;
    vec4 _259 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3173 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0))));
    float _277 = _259.z * cbMtdParam._m0[12u].y;
    float _280 = fma(_276, _190 * NORMAL.x, fma(_269, _197 * TANGENT.x, (_183 * _175) * _267));
    float _283 = fma(_276, _190 * NORMAL.y, fma(_269, _197 * TANGENT.y, (_183 * _176) * _267));
    float _286 = fma(_276, _190 * NORMAL.z, fma(_269, _197 * TANGENT.z, (_183 * _177) * _267));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3184 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _294 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
    float _3195 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3206 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3217 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3228 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _298 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _314 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _357 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _367 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _357);
    float _368 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _357);
    float _369 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _357);
    float _373 = inversesqrt(dot(vec3(_367, _368, _369), vec3(_367, _368, _369)));
    float _374 = _367 * _373;
    float _375 = _368 * _373;
    float _376 = _369 * _373;
    float _382 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _383 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _404 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _407 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _410 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _423 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_423 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0)))) * cbInstanceData._m0[_425].z;
    float _3239 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _437 = 1.0 - _298;
    float _438 = _434 * _437;
    float _439 = _435 * _437;
    float _440 = _436 * _437;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _298;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _298;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _298;
    float _448 = _445 + 0.039999999105930328369140625;
    float _450 = _446 + 0.039999999105930328369140625;
    float _451 = _447 + 0.039999999105930328369140625;
    vec4 _460 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _382, cbSceneParam._m0[86u].y * _383));
    float _463 = _460.x * TEXCOORD_5.w;
    float _464 = dot(vec3(_291, _292, _293), vec3(_374, _375, _376));
    float _467 = _464 * 2.0;
    float _471 = (_467 * _291) - _374;
    float _472 = (_467 * _292) - _375;
    float _473 = (_467 * _293) - _376;
    float _477 = abs(dot(vec3(_374, _375, _376), vec3(_291, _292, _293)));
    float _3272 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _479 = sqrt(_294);
    float _492 = exp2((_479 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_479 * 3.0));
    float _498 = (1.0 - _492) * ((_479 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _499 = _492 * _479;
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _837;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _562 = fma(_535, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _527));
        float _566 = fma(_535, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _527));
        float _570 = fma(_535, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _527));
        float _595 = _527 + _291;
        float _596 = _531 + _292;
        float _597 = _535 + _293;
        float _607 = fma(_597, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _595)) - _562;
        float _608 = fma(_597, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _595)) - _566;
        float _609 = fma(_597, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _595)) - _570;
        float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
        float _626 = ((_613 * _607) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_562 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _627 = ((_613 * _608) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_566 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _628 = ((_613 * _609) / cbModelParam._m0[34u].z) + ((((((_570 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        float _665 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_631.x + (-0.5));
        float _667 = _665 * (_631.y + (-0.5));
        float _668 = _665 * (_631.z + (-0.5));
        float _675 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_638.x + (-0.5));
        float _677 = _675 * (_638.y + (-0.5));
        float _678 = _675 * (_638.z + (-0.5));
        float _685 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_645.x + (-0.5));
        float _687 = _685 * (_645.y + (-0.5));
        float _688 = _685 * (_645.z + (-0.5));
        float _695 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_652.x + (-0.5));
        float _697 = _695 * (_652.y + (-0.5));
        float _698 = _695 * (_652.z + (-0.5));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = _666 * 0.5;
        float _703 = _676 * 0.5;
        float _704 = _686 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _719 = (dot(vec3(_291, _292, _293), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3298 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _729 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3309 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3320 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_731 + 1.0))) + _736) * _699;
        float _746 = _667 * 0.5;
        float _747 = _677 * 0.5;
        float _748 = _687 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _762 = (dot(vec3(_291, _292, _293), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _771 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_700 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3353 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_773 + 1.0))) + _778) * _700;
        float _788 = _668 * 0.5;
        float _789 = _678 * 0.5;
        float _790 = _688 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _804 = (dot(vec3(_291, _292, _293), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _813 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3386 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_815 + 1.0))) + _820) * _701;
        _837 = _668;
        _839 = _667;
        _840 = _666;
        _841 = _678;
        _842 = _677;
        _843 = _676;
        _844 = _688;
        _845 = _687;
        _846 = _686;
        _847 = _701;
        _848 = _700;
        _849 = _699;
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
    }
    else
    {
        _837 = _838;
        _839 = _838;
        _840 = _838;
        _841 = _838;
        _842 = _838;
        _843 = _838;
        _844 = _838;
        _845 = _838;
        _846 = _838;
        _847 = _838;
        _848 = _838;
        _849 = _838;
        _850 = 0.0;
        _851 = 0.0;
        _852 = 0.0;
    }
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _878 = fma(_535, cbModelParam._m0[30u].z, fma(_531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _527));
        float _882 = fma(_535, cbModelParam._m0[31u].z, fma(_531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _527));
        float _886 = fma(_535, cbModelParam._m0[32u].z, fma(_531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _527));
        float _909 = _527 + _291;
        float _910 = _531 + _292;
        float _911 = _535 + _293;
        float _921 = fma(_911, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909)) - _878;
        float _922 = fma(_911, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909)) - _882;
        float _923 = fma(_911, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909)) - _886;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_878 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_882 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[35u].z) + ((((((_886 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _977 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_944.x + (-0.5));
        float _979 = _977 * (_944.y + (-0.5));
        float _980 = _977 * (_944.z + (-0.5));
        float _987 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_951.x + (-0.5));
        float _989 = _987 * (_951.y + (-0.5));
        float _990 = _987 * (_951.z + (-0.5));
        float _997 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_958.x + (-0.5));
        float _999 = _997 * (_958.y + (-0.5));
        float _1000 = _997 * (_958.z + (-0.5));
        float _1007 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_965.x + (-0.5));
        float _1009 = _1007 * (_965.y + (-0.5));
        float _1010 = _1007 * (_965.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_291, _292, _293), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3449 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_1041 + 1.0))) + _1046) * _1011;
        float _1056 = _979 * 0.5;
        float _1057 = _989 * 0.5;
        float _1058 = _999 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_291, _292, _293), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3482 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_1083 + 1.0))) + _1088) * _1012;
        float _1098 = _980 * 0.5;
        float _1099 = _990 * 0.5;
        float _1100 = _1000 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_291, _292, _293), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3515 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1125 + 1.0))) + _1130) * _1013;
        _1147 = _980;
        _1148 = _979;
        _1149 = _978;
        _1150 = _990;
        _1151 = _989;
        _1152 = _988;
        _1153 = _1000;
        _1154 = _999;
        _1155 = _998;
        _1156 = _1013;
        _1157 = _1012;
        _1158 = _1011;
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _838;
        _1148 = _838;
        _1149 = _838;
        _1150 = _838;
        _1151 = _838;
        _1152 = _838;
        _1153 = _838;
        _1154 = _838;
        _1155 = _838;
        _1156 = _838;
        _1157 = _838;
        _1158 = _838;
        _1159 = 0.0;
        _1160 = 0.0;
        _1161 = 0.0;
    }
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _851)) + _851;
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1194 = fma(_1173, cbSceneParam._m0[89u].z, fma(_1172, cbSceneParam._m0[89u].y, _1171 * cbSceneParam._m0[89u].x));
    float _1197 = fma(_1173, cbSceneParam._m0[90u].z, fma(_1172, cbSceneParam._m0[90u].y, _1171 * cbSceneParam._m0[90u].x));
    float _1200 = fma(_1173, cbSceneParam._m0[91u].z, fma(_1172, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1171));
    float _1215 = _471 * 0.5;
    float _1216 = _472 * 0.5;
    float _1217 = _473 * 0.5;
    float _1218 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1221 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1148, _1151, _1154, _1157));
    float _1224 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1258;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1231 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_837, _841, _844, _847));
        float _1235 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_839, _842, _845, _848));
        float _1239 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_840, _843, _846, _849));
        float _1246 = dot(vec4(cbModelParam._m0[39u]), vec4(_1215, _1216, _1217, 1.0));
        _1258 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1246) ? 0.0 : (isnan(0.0) ? _1246 : max(0.0, _1246))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1258 = 1.0;
    }
    float _1269;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1260 = dot(vec4(cbModelParam._m0[40u]), vec4(_1215, _1216, _1217, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1273 = (_1269 * cbModelParam._m0[1u].x) + (_1258 * (1.0 - cbModelParam._m0[1u].x));
    float _1283 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _294);
    float _1284 = isnan(_1283) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1283 : min(cbModelParam._m0[25u].z, _1283));
    float _1366;
    float _1368;
    float _1370;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1333 = fma(_535, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527)) + cbModelParam._m0[13u].w;
        float _1337 = fma(_535, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527)) + cbModelParam._m0[14u].w;
        float _1341 = fma(_535, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527)) + cbModelParam._m0[15u].w;
        float _1344 = fma(_473, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471));
        float _1347 = fma(_473, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471));
        float _1350 = fma(_473, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471));
        float _1378;
        if (_1344 > 0.0)
        {
            _1378 = abs((1.0 - _1333) / _1344);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1333 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1378 = frontier_phi_14_12_ladder;
        }
        float _1584;
        if (_1347 > 0.0)
        {
            _1584 = abs((1.0 - _1337) / _1347);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1337 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1584 = frontier_phi_23_19_ladder;
        }
        float _1838;
        if (_1350 > 0.0)
        {
            _1838 = abs((1.0 - _1341) / _1350);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1341 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1838 = frontier_phi_35_30_ladder;
        }
        float _1840 = isnan(_1584) ? _1378 : (isnan(_1378) ? _1584 : min(_1378, _1584));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1344) + _1333;
        float _1846 = (_1841 * _1347) + _1337;
        float _1847 = (_1841 * _1350) + _1341;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1975 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1284);
            frontier_phi_13_35_ladder = _1975.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1975.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1975.x * cbModelParam._m0[1u].y;
        }
        _1366 = frontier_phi_13_35_ladder_2;
        _1368 = frontier_phi_13_35_ladder_1;
        _1370 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_471, _472, _473), _1284);
        _1366 = _1354.x * cbModelParam._m0[1u].y;
        _1368 = _1354.y * cbModelParam._m0[1u].y;
        _1370 = _1354.z * cbModelParam._m0[1u].y;
    }
    float _1374 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _294);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1374 : min(cbModelParam._m0[25u].w, _1374));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1432 = fma(_535, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527)) + cbModelParam._m0[21u].w;
        float _1436 = fma(_535, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527)) + cbModelParam._m0[22u].w;
        float _1440 = fma(_535, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527)) + cbModelParam._m0[23u].w;
        float _1443 = fma(_473, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471));
        float _1446 = fma(_473, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471));
        float _1449 = fma(_473, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471));
        float _1589;
        if (_1443 > 0.0)
        {
            _1589 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1589 = frontier_phi_25_21_ladder;
        }
        float _1865;
        if (_1446 > 0.0)
        {
            _1865 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1865 = frontier_phi_37_32_ladder;
        }
        float _2078;
        if (_1449 > 0.0)
        {
            _2078 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2078 = frontier_phi_46_43_ladder;
        }
        float _2080 = isnan(_1865) ? _1589 : (isnan(_1589) ? _1865 : min(_1589, _1865));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1443) + _1432;
        float _2086 = (_2081 * _1446) + _1436;
        float _2087 = (_2081 * _1449) + _1440;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2088;
        float _2091 = _2088 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2087 > _2091) || ((_2087 < _2089) || ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 < _2089) || (_2085 > _2091))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2286 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2087, cbModelParam._m0[17u].z, fma(_2086, cbModelParam._m0[17u].y, _2085 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2087, cbModelParam._m0[18u].z, fma(_2086, cbModelParam._m0[18u].y, _2085 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2087, cbModelParam._m0[19u].z, fma(_2086, cbModelParam._m0[19u].y, _2085 * cbModelParam._m0[19u].x))), _1375);
            frontier_phi_22_46_ladder = _2286.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2286.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2286.x * cbModelParam._m0[1u].z;
        }
        _1468 = frontier_phi_22_46_ladder_2;
        _1470 = frontier_phi_22_46_ladder_1;
        _1472 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_471, _472, _473), _1375);
        _1468 = _1452.x * cbModelParam._m0[1u].z;
        _1470 = _1452.y * cbModelParam._m0[1u].z;
        _1472 = _1452.z * cbModelParam._m0[1u].z;
    }
    float _1485 = (((_498 * _448) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1487 = (((_498 * _450) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1489 = (((_498 * _451) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1492 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, _1485 * cbSceneParam._m0[91u].x));
    uvec4 _1508 = floatBitsToUint(cbInstanceData._m0[_423 + 5u]);
    uint _1510 = _1508.x * 14u;
    uint _1511 = _1510 + 13u;
    float _1518 = _463 + (-1.0);
    float _1523 = (cbLight._m0[_1511].x * _1518) + 1.0;
    float _1524 = (cbLight._m0[_1511].y * _1518) + 1.0;
    float _1525 = (cbLight._m0[_1511].z * _1518) + 1.0;
    float _1526 = (cbLight._m0[_1511].w * _1518) + 1.0;
    uint _1527 = _1510 + 5u;
    float _1533 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    uint _1537 = _1510 + 4u;
    float _1543 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
    uint _1547 = _1510 | 1u;
    float _1558 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_291, _292, _293));
    float _1561 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_291, _292, _293));
    float _3651 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
    float _3662 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1566 = (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * 0.3183098733425140380859375;
    float _1568 = (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.3183098733425140380859375;
    float _1575 = ((cbLight._m0[_1527].x * _1533) * _1568) + ((cbLight._m0[_1537].x * _1543) * _1566);
    float _1576 = ((_1533 * cbLight._m0[_1527].y) * _1568) + ((_1543 * cbLight._m0[_1537].y) * _1566);
    float _1577 = ((_1533 * cbLight._m0[_1527].z) * _1568) + ((_1543 * cbLight._m0[_1537].z) * _1566);
    uvec4 _1581 = floatBitsToUint(cbLight._m0[_1510 + 12u]);
    bool _1583 = _1581.x == 0u;
    float _1594;
    float _1596;
    float _1598;
    if (_1583)
    {
        _1594 = _1575;
        _1596 = _1576;
        _1598 = _1577;
    }
    else
    {
        uint _1602 = _1510 + 6u;
        float _1618 = (dot(vec3(cbLight._m0[_1510 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1619 = _1618 * _1618;
        float _3673 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1621 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        _1594 = (((cbLight._m0[_1602].x * 0.3183098733425140380859375) * _1620) * _1621) + _1575;
        _1596 = (((cbLight._m0[_1602].y * 0.3183098733425140380859375) * _1620) * _1621) + _1576;
        _1598 = (((cbLight._m0[_1602].z * 0.3183098733425140380859375) * _1620) * _1621) + _1577;
    }
    bool _1601 = _1581.y == 0u;
    float _1639;
    float _1641;
    float _1643;
    if (_1601)
    {
        _1639 = _1594;
        _1641 = _1596;
        _1643 = _1598;
    }
    else
    {
        uint _1809 = _1510 + 7u;
        float _1825 = (dot(vec3(cbLight._m0[_1510 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3689 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1828 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1639 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1594;
        _1641 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1596;
        _1643 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1598;
    }
    uint _1646 = _1510 + 8u;
    float _1659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1510].w)) * _294) * 0.949999988079071044921875);
    float _1660 = _1659 * _1659;
    float _1661 = cbLight._m0[_1510].x + _374;
    float _1662 = cbLight._m0[_1510].y + _375;
    float _1663 = cbLight._m0[_1510].z + _376;
    float _1667 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
    float _1668 = _1667 * _1661;
    float _1669 = _1667 * _1662;
    float _1670 = _1667 * _1663;
    float _1671 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1510].xyz));
    float _3705 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1674 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _1675 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _1676 = dot(vec3(_291, _292, _293), vec3(_1668, _1669, _1670));
    float _3727 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1680 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_1668, _1669, _1670));
    float _3738 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1684 = _1660 * _1660;
    float _1688 = ((_1679 * _1679) * (_1684 + (-1.0))) + 1.0;
    float _1696 = exp2(log2(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * 5.0);
    float _1697 = 0.959999978542327880859375 - _445;
    float _1699 = 0.959999978542327880859375 - _446;
    float _1700 = 0.959999978542327880859375 - _447;
    float _1707 = 1.0 - _1660;
    float _1718 = (0.5 / (((_1675 * ((_1674 * _1707) + _1660)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _1707) + _1660) * _1674))) * _1674;
    float _3749 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1720 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1684 / ((_1688 * _1688) * 3.141590118408203125));
    uint _1731 = _1510 + 9u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1547].w)) * _294) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1547].x + _374;
    float _1745 = cbLight._m0[_1547].y + _375;
    float _1746 = cbLight._m0[_1547].z + _376;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1547].xyz));
    float _3760 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1758 = dot(vec3(_291, _292, _293), vec3(_1751, _1752, _1753));
    float _3771 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1762 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_1751, _1752, _1753));
    float _3782 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = _1743 * _1743;
    float _1770 = ((_1761 * _1761) * (_1766 + (-1.0))) + 1.0;
    float _1777 = exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0);
    float _1784 = 1.0 - _1743;
    float _1794 = (0.5 / (((_1675 * ((_1757 * _1784) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _1784) + _1743) * _1757))) * _1757;
    float _3793 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1766 / ((_1770 * _1770) * 3.141590118408203125));
    float _1806 = (((((_1777 * _1697) + _448) * cbLight._m0[_1731].x) * _1796) * _1533) + (((((_1696 * _1697) + _448) * cbLight._m0[_1646].x) * _1720) * _1543);
    float _1807 = (((((_1777 * _1699) + _450) * cbLight._m0[_1731].y) * _1796) * _1533) + (((((_1696 * _1699) + _450) * cbLight._m0[_1646].y) * _1720) * _1543);
    float _1808 = (((((_1777 * _1700) + _451) * cbLight._m0[_1731].z) * _1796) * _1533) + (((((_1696 * _1700) + _451) * cbLight._m0[_1646].z) * _1720) * _1543);
    float _1870;
    float _1872;
    float _1874;
    if (_1583)
    {
        _1870 = _1806;
        _1872 = _1807;
        _1874 = _1808;
    }
    else
    {
        uint _1876 = _1510 + 2u;
        uint _1880 = _1510 + 10u;
        float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _294) * 0.949999988079071044921875);
        float _1895 = _1894 * _1894;
        float _1896 = cbLight._m0[_1876].x + _374;
        float _1897 = cbLight._m0[_1876].y + _375;
        float _1898 = cbLight._m0[_1876].z + _376;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1903 = _1902 * _1896;
        float _1904 = _1902 * _1897;
        float _1905 = _1902 * _1898;
        float _1906 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1876].xyz));
        float _3804 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1910 = dot(vec3(_291, _292, _293), vec3(_1903, _1904, _1905));
        float _3815 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1914 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1903, _1904, _1905));
        float _3826 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1918 = _1895 * _1895;
        float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
        float _1929 = exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0);
        float _1936 = 1.0 - _1895;
        float _1946 = (0.5 / (((_1675 * ((_1909 * _1936) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _1936) + _1895) * _1909))) * _1909;
        float _3837 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1948 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
        float _1949 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        _1870 = (((((_1929 * _1697) + _448) * cbLight._m0[_1880].x) * _1948) * _1949) + _1806;
        _1872 = (((((_1929 * _1699) + _450) * cbLight._m0[_1880].y) * _1948) * _1949) + _1807;
        _1874 = (((((_1929 * _1700) + _451) * cbLight._m0[_1880].z) * _1948) * _1949) + _1808;
    }
    float _1984;
    float _1986;
    float _1988;
    if (_1601)
    {
        _1984 = _1870;
        _1986 = _1872;
        _1988 = _1874;
    }
    else
    {
        uint _1995 = _1510 + 3u;
        uint _1999 = _1510 + 11u;
        float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _294) * 0.949999988079071044921875);
        float _2014 = _2013 * _2013;
        float _2015 = cbLight._m0[_1995].x + _374;
        float _2016 = cbLight._m0[_1995].y + _375;
        float _2017 = cbLight._m0[_1995].z + _376;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2022 = _2021 * _2015;
        float _2023 = _2021 * _2016;
        float _2024 = _2021 * _2017;
        float _2025 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1995].xyz));
        float _3853 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _2029 = dot(vec3(_291, _292, _293), vec3(_2022, _2023, _2024));
        float _3864 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _2033 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2022, _2023, _2024));
        float _3875 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2037 = _2014 * _2014;
        float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
        float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
        float _2055 = 1.0 - _2014;
        float _2065 = (0.5 / (((_1675 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _2055) + _2014) * _2028))) * _2028;
        float _3886 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1984 = (((((_2048 * _1697) + _448) * cbLight._m0[_1999].x) * _2067) * _2068) + _1870;
        _1986 = (((((_2048 * _1699) + _450) * cbLight._m0[_1999].y) * _2067) * _2068) + _1872;
        _1988 = (((((_2048 * _1700) + _451) * cbLight._m0[_1999].z) * _2067) * _2068) + _1874;
    }
    float _2203;
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    float _2213;
    if (_1508.y == 0u)
    {
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2143;
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2143;
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2143;
        uvec4 _2158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2159 = _2158.x;
        uint _2170 = uint((float(_2158.y) * floor(float(uint(cbSceneParam._m0[85u].y * _383) / _2159))) + floor(float(uint(cbSceneParam._m0[85u].x * _382) / _2159)));
        float _2180 = (log2(_2146 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2181 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        uint _2184 = uint(isnan(14.0) ? _2181 : (isnan(_2181) ? 14.0 : min(_2181, 14.0)));
        uvec4 _2189 = texelFetch(g_lightClusterGridBuffer, int(((_2184 << 2u) + (_2170 << 6u)) >> 2u));
        uint _2190 = _2189.x;
        uint _2191 = _2158.z;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        if (((((1u << ((_2191 >> 4u) & 15u)) + 4294967295u) & _2190) == 0u) || ((_2191 & 240u) == 0u))
        {
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
        }
        else
        {
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2302;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            uint _2442 = 0u;
            uint _2451;
            bool _2452;
            for (;;)
            {
                _2451 = texelFetch(g_lightClassification, int((((_2184 << 5u) + (_2170 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                _2452 = _2451 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2452)
                {
                    frontier_phi_61_pred = _2436;
                    frontier_phi_61_pred_1 = _2441;
                    frontier_phi_61_pred_2 = _2440;
                    frontier_phi_61_pred_3 = _2439;
                    frontier_phi_61_pred_4 = _2438;
                    frontier_phi_61_pred_5 = _2437;
                }
                else
                {
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    uint _2566;
                    _2560 = _2436;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2439;
                    _2564 = _2440;
                    _2565 = _2441;
                    _2566 = _2451;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    for (;;)
                    {
                        uint _2570 = uint(findLSB(_2566)) + (_2442 << 5u);
                        uint _2567 = (_2566 + 4294967295u) & _2566;
                        uint _2572 = _2570 * 48u;
                        vec4 _2586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 3u)).x));
                        uint _2592 = (_2570 * 48u) + 4u;
                        vec4 _2605 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2592)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 3u)).x));
                        uint _2611 = (_2570 * 48u) + 8u;
                        vec3 _2622 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x));
                        float _2626 = _2586.x - _2144;
                        float _2627 = _2586.y - _2145;
                        float _2628 = _2586.z - _2146;
                        float _2629 = dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628));
                        float _2632 = inversesqrt(_2629);
                        float _2633 = _2632 * _2626;
                        float _2634 = _2632 * _2627;
                        float _2635 = _2632 * _2628;
                        float _2636 = dot(vec3(_404, _407, _410), vec3(_2633, _2634, _2635));
                        float _2641 = 1.0 - (_2629 * _2586.w);
                        float _3912 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2642 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2643 = sqrt(_2629) * _2605.w;
                        float _2646 = 1.39999997615814208984375 / (_2643 + 1.39999997615814208984375);
                        float _2647 = _2646 * _2646;
                        float _2650 = ((1.0 - _2647) * _2636) + _2647;
                        float _2653 = _2643 * _2643;
                        float _2657 = ((isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0))) * _2642) / ((_2653 * 0.699999988079071044921875) + 1.0);
                        float _2661 = (-0.0) - _2144;
                        float _2662 = (-0.0) - _2145;
                        float _2663 = (-0.0) - _2146;
                        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
                        float _2668 = _2667 * _2661;
                        float _2669 = _2667 * _2662;
                        float _2670 = _2667 * _2663;
                        float _2678 = exp2(log2(1.0 / ((_2653 * 3.5) + 5.0)) * 0.25);
                        float _2679 = 1.0 - _479;
                        float _2686 = sqrt(1.0 - ((1.0 - (_2679 * _2679)) * (1.0 - (_2678 * _2678))));
                        float _2687 = _2686 * _2686;
                        float _2688 = _2687 * _2687;
                        float _2689 = _2668 + _2633;
                        float _2690 = _2669 + _2634;
                        float _2691 = _2670 + _2635;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2699 = dot(vec3(_404, _407, _410), vec3(_2668, _2669, _2670));
                        float _3928 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2702 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                        float _2703 = dot(vec3(_404, _407, _410), vec3(_2695 * _2689, _2695 * _2690, _2695 * _2691));
                        float _3939 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2706 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2710 = ((_2706 * _2706) * (_2688 + (-1.0))) + 1.0;
                        float _2711 = _2646 * _2687;
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2636) + _2712;
                        float _3950 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                        float _2717 = 1.0 - _2687;
                        float _2727 = (0.5 / (((_2716 * ((_2702 * _2717) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _2717) + _2687) * _2702))) * _2716;
                        float _3961 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2738 = (((_2688 * 3.1415927410125732421875) * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) / ((_2710 * _2710) * ((_2653 * 2.1991131305694580078125) + 3.141590118408203125))) * _2642;
                        _2495 = (_2657 * _2605.x) + _2563;
                        _2496 = (_2657 * _2605.y) + _2564;
                        _2497 = (_2657 * _2605.z) + _2565;
                        _2492 = (_2738 * _2622.x) + _2560;
                        _2493 = (_2738 * _2622.y) + _2561;
                        _2494 = (_2738 * _2622.z) + _2562;
                        if (_2567 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2560 = _2492;
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2495;
                            _2564 = _2496;
                            _2565 = _2497;
                            _2566 = _2567;
                        }
                    }
                    frontier_phi_61_pred = _2492;
                    frontier_phi_61_pred_1 = _2497;
                    frontier_phi_61_pred_2 = _2496;
                    frontier_phi_61_pred_3 = _2495;
                    frontier_phi_61_pred_4 = _2494;
                    frontier_phi_61_pred_5 = _2493;
                }
                _2292 = frontier_phi_61_pred;
                _2302 = frontier_phi_61_pred_1;
                _2300 = frontier_phi_61_pred_2;
                _2298 = frontier_phi_61_pred_3;
                _2296 = frontier_phi_61_pred_4;
                _2294 = frontier_phi_61_pred_5;
                uint _2443 = _2442 + 1u;
                if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2436 = _2292;
                    _2437 = _2294;
                    _2438 = _2296;
                    _2439 = _2298;
                    _2440 = _2300;
                    _2441 = _2302;
                    _2442 = _2443;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
        }
        uvec4 _2305 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2306 = _2305.z;
        uint _2308 = (_2306 >> 8u) & 15u;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((4294967295u << _2308) & _2190) == 0u)
        {
            _2404 = _2291;
            _2406 = _2293;
            _2408 = _2295;
            _2410 = _2297;
            _2412 = _2299;
            _2414 = _2301;
        }
        else
        {
            float _2429 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
            float _2430 = _2429 * _2144;
            float _2431 = _2429 * _2145;
            float _2432 = _2429 * _2146;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2308 < ((_2306 >> 12u) & 15u))
            {
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2415;
                float _2543 = _2291;
                float _2544 = _2293;
                float _2545 = _2295;
                float _2546 = _2297;
                float _2547 = _2299;
                float _2548 = _2301;
                uint _2549 = _2308;
                uint _2558;
                bool _2559;
                for (;;)
                {
                    _2558 = texelFetch(g_lightClassification, int((((_2184 << 5u) + (_2170 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                    _2559 = _2558 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2559)
                    {
                        frontier_phi_67_pred = _2546;
                        frontier_phi_67_pred_1 = _2547;
                        frontier_phi_67_pred_2 = _2548;
                        frontier_phi_67_pred_3 = _2545;
                        frontier_phi_67_pred_4 = _2544;
                        frontier_phi_67_pred_5 = _2543;
                    }
                    else
                    {
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _2756 = _2543;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        float _2759 = _2546;
                        float _2760 = _2547;
                        float _2761 = _2548;
                        uint _2762 = _2558;
                        uint _2763;
                        vec4 _2788;
                        float _2789;
                        vec4 _2804;
                        vec3 _2816;
                        vec4 _2832;
                        vec4 _2848;
                        float _2895;
                        bool _2896;
                        for (;;)
                        {
                            uint _2773 = ((_2549 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2762));
                            _2763 = (_2762 + 4294967295u) & _2762;
                            uint _2775 = _2773 * 40u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            _2789 = _2788.w;
                            uint _2791 = (_2773 * 40u) + 4u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2806 = (_2773 * 40u) + 8u;
                            _2816 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x));
                            uint _2819 = (_2773 * 40u) + 16u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2835 = (_2773 * 40u) + 20u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2851 = (_2773 * 40u) + 24u;
                            vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2870 = (_2773 * 40u) + 28u;
                            vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            _2895 = fma(_2146, _2883.z, fma(_2145, _2883.y, _2883.x * _2144)) + _2883.w;
                            _2896 = !((fma(_2146, _2864.z, fma(_2145, _2864.y, _2864.x * _2144)) + _2864.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2896)
                            {
                                float _2923 = _2788.x - _2144;
                                float _2924 = _2788.y - _2145;
                                float _2925 = _2788.z - _2146;
                                float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                                float _2929 = inversesqrt(_2926);
                                float _2930 = _2929 * _2923;
                                float _2931 = _2929 * _2924;
                                float _2932 = _2929 * _2925;
                                float _2936 = 1.0 - (_2926 / (_2789 * _2789));
                                float _3972 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2937 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _2941 = sqrt(_2926) * _2804.w;
                                float _2943 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                                float _2944 = _2943 * _2943;
                                float _2947 = ((1.0 - _2944) * dot(vec3(_2930, _2931, _2932), vec3(_404, _407, _410))) + _2944;
                                float _2950 = _2941 * _2941;
                                float _2954 = (fma(_2146, _2832.z, fma(_2145, _2832.y, _2832.x * _2144)) + _2832.w) / _2895;
                                float _2955 = (fma(_2146, _2848.z, fma(_2145, _2848.y, _2848.x * _2144)) + _2848.w) / _2895;
                                float _2959 = 1.0 - dot(vec2(_2954, _2955), vec2(_2954, _2955));
                                float _3988 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _2961 = _2960 * (((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2937) / ((_2950 * 0.699999988079071044921875) + 1.0));
                                float _2973 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                                float _2974 = 1.0 - _479;
                                float _2981 = sqrt(1.0 - ((1.0 - (_2974 * _2974)) * (1.0 - (_2973 * _2973))));
                                float _2982 = _2981 * _2981;
                                float _2983 = _2982 * _2982;
                                float _2984 = _2930 - _2430;
                                float _2985 = _2931 - _2431;
                                float _2986 = _2932 - _2432;
                                float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                                float _2994 = dot(vec3(_404, _407, _410), vec3((-0.0) - _2430, (-0.0) - _2431, (-0.0) - _2432));
                                float _3999 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2997 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _2998 = dot(vec3(_404, _407, _410), vec3(_2990 * _2984, _2990 * _2985, _2990 * _2986));
                                float _4010 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _3001 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _3005 = ((_3001 * _3001) * (_2983 + (-1.0))) + 1.0;
                                float _3006 = _2943 * _2982;
                                float _3007 = _3006 * _3006;
                                float _3013 = ((1.0 - _3007) * dot(vec3(_404, _407, _410), vec3(_2930, _2931, _2932))) + _3007;
                                float _4021 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _3015 = 1.0 - _2982;
                                float _3025 = (0.5 / (((_3014 * ((_2997 * _3015) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2982) * _2997))) * _3014;
                                float _4032 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3035 = (_2960 * _2937) * (((_2983 * 3.1415927410125732421875) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) / ((_3005 * _3005) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3035 * _2816.x;
                                frontier_phi_73_pred_1 = _3035 * _2816.y;
                                frontier_phi_73_pred_2 = _2961 * _2804.z;
                                frontier_phi_73_pred_3 = _2961 * _2804.y;
                                frontier_phi_73_pred_4 = _2961 * _2804.x;
                                frontier_phi_73_pred_5 = _3035 * _2816.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3039 = frontier_phi_73_pred;
                            _3040 = frontier_phi_73_pred_1;
                            _3044 = frontier_phi_73_pred_2;
                            _3043 = frontier_phi_73_pred_3;
                            _3042 = frontier_phi_73_pred_4;
                            _3041 = frontier_phi_73_pred_5;
                            _2746 = _3042 + _2759;
                            _2747 = _3043 + _2760;
                            _2748 = _3044 + _2761;
                            _2743 = _3039 + _2756;
                            _2744 = _3040 + _2757;
                            _2745 = _3041 + _2758;
                            if (_2763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2763;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2746;
                        frontier_phi_67_pred_1 = _2747;
                        frontier_phi_67_pred_2 = _2748;
                        frontier_phi_67_pred_3 = _2745;
                        frontier_phi_67_pred_4 = _2744;
                        frontier_phi_67_pred_5 = _2743;
                    }
                    _2411 = frontier_phi_67_pred;
                    _2413 = frontier_phi_67_pred_1;
                    _2415 = frontier_phi_67_pred_2;
                    _2409 = frontier_phi_67_pred_3;
                    _2407 = frontier_phi_67_pred_4;
                    _2405 = frontier_phi_67_pred_5;
                    uint _2550 = _2549 + 1u;
                    if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2543 = _2405;
                        _2544 = _2407;
                        _2545 = _2409;
                        _2546 = _2411;
                        _2547 = _2413;
                        _2548 = _2415;
                        _2549 = _2550;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2413;
                frontier_phi_55_56_ladder_1 = _2415;
                frontier_phi_55_56_ladder_2 = _2411;
                frontier_phi_55_56_ladder_3 = _2409;
                frontier_phi_55_56_ladder_4 = _2407;
                frontier_phi_55_56_ladder_5 = _2405;
            }
            else
            {
                frontier_phi_55_56_ladder = _2299;
                frontier_phi_55_56_ladder_1 = _2301;
                frontier_phi_55_56_ladder_2 = _2297;
                frontier_phi_55_56_ladder_3 = _2295;
                frontier_phi_55_56_ladder_4 = _2293;
                frontier_phi_55_56_ladder_5 = _2291;
            }
            _2404 = frontier_phi_55_56_ladder_5;
            _2406 = frontier_phi_55_56_ladder_4;
            _2408 = frontier_phi_55_56_ladder_3;
            _2410 = frontier_phi_55_56_ladder_2;
            _2412 = frontier_phi_55_56_ladder;
            _2414 = frontier_phi_55_56_ladder_1;
        }
        float _2419 = isnan(1.0) ? _463 : (isnan(_463) ? 1.0 : min(_463, 1.0));
        _2203 = (_2419 * _2410) + _1639;
        _2205 = (_2419 * _2412) + _1641;
        _2207 = (_2419 * _2414) + _1643;
        _2209 = ((_2404 * _448) * _2419) + _1984;
        _2211 = ((_2406 * _450) * _2419) + _1986;
        _2213 = ((_2408 * _451) * _2419) + _1988;
    }
    else
    {
        _2203 = _1639;
        _2205 = _1641;
        _2207 = _1643;
        _2209 = _1984;
        _2211 = _1986;
        _2213 = _1988;
    }
    float _4048 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4059 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4070 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    uint _2233 = _423 + 6u;
    float _2241 = _382 / cbSceneParam._m0[86u].x;
    float _2242 = _383 / cbSceneParam._m0[86u].y;
    vec4 _2256 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2241, _2242, (log2((isnan(cbSceneParam._m0[77u].w) ? _314 : (isnan(_314) ? cbSceneParam._m0[77u].w : min(_314, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2258 = _2256.x;
    float _2259 = _2256.y;
    float _2260 = _2256.z;
    float _2261 = _2256.w;
    float _2354;
    float _2356;
    float _2358;
    float _2360;
    if (_314 > cbSceneParam._m0[78u].w)
    {
        float _2316 = isnan(_314) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _314 : min(cbSceneParam._m0[80u].w, _314));
        float _2317 = _2316 / _314;
        float _2328 = _2317 * _367;
        float _2329 = _368 * _2317;
        float _2330 = (-0.0) - _2329;
        float _2332 = _2317 * _369;
        float _2334 = (cbSceneParam._m0[77u].w * _2330) / _2316;
        float _2335 = _2334 + cbSceneParam._m0[79u].w;
        float _2336 = cbSceneParam._m0[79u].w - _2329;
        float _2342 = sqrt(((_2328 * _2328) + (_2329 * _2329)) + (_2332 * _2332));
        float _2345 = (1.0 - (cbSceneParam._m0[77u].w / _2316)) * _2342;
        float _2350 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2352 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2505;
        if (abs((_2330 - _2334) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2505 = ((((_2335 > 0.0) ? exp2(_2350 * _2335) : (2.0 - exp2(_2352 * _2335))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2345;
        }
        else
        {
            float _2465 = 1.0 / cbSceneParam._m0[80u].x;
            float _2466 = isnan(_2336) ? _2335 : (isnan(_2335) ? _2336 : max(_2335, _2336));
            float _2467 = isnan(_2336) ? _2335 : (isnan(_2335) ? _2336 : min(_2335, _2336));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            float _2477 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : min(_2467, 0.0));
            _2505 = ((abs(_2342 / _2330) * cbSceneParam._m0[80u].y) * ((((_2476 - _2477) * 2.0) - ((exp2(_2350 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)))) - exp2(_2350 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))))) * _2465)) - ((exp2(_2352 * _2476) - exp2(_2352 * _2477)) * _2465))) + (_2345 * cbSceneParam._m0[80u].z);
        }
        vec4 _2507 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2241, _2242, 1.0), 0.0);
        float _2516 = exp2((_2505 * (-1.44269502162933349609375)) * (1.0 - _2507.w));
        float _2517 = log2(_2516);
        float _2533 = log2(_2261);
        _2354 = (exp2(_2533 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].x)) * _2507.x) / cbSceneParam._m0[78u].x)) + _2258;
        _2356 = (exp2(_2533 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].y)) * _2507.y) / cbSceneParam._m0[78u].y)) + _2259;
        _2358 = (exp2(_2533 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].z)) * _2507.z) / cbSceneParam._m0[78u].z)) + _2260;
        _2360 = _2516 * _2261;
    }
    else
    {
        _2354 = _2258;
        _2356 = _2259;
        _2358 = _2260;
        _2360 = _2261;
    }
    float _2372 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2373 = _2372 == 3.0;
    float _2374 = log2(_2360);
    float _2381 = exp2(_2374 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2203 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _463))) + ((_2209 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2382 = exp2(_2374 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2205 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _463))) + ((_2211 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2383 = exp2(_2374 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2207 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _463))) + ((_2213 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2392 = (_2372 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2392 * (_2373 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2354)));
    SV_Target.y = _2392 * (_2373 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2356)));
    SV_Target.z = _2392 * (_2373 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2358)));
    SV_Target.w = cbInstanceData._m0[_2233].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2233].w;
}


