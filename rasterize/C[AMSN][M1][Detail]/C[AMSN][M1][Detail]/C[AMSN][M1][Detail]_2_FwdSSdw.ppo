#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _840;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _178 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _179 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _244 = _242.x;
    vec4 _261 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3199 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))));
    float _279 = _261.z * cbMtdParam._m0[12u].y;
    float _282 = fma(_278, _192 * NORMAL.x, fma(_271, _199 * TANGENT.x, (_185 * _177) * _269));
    float _285 = fma(_278, _192 * NORMAL.y, fma(_271, _199 * TANGENT.y, (_185 * _178) * _269));
    float _288 = fma(_278, _192 * NORMAL.z, fma(_271, _199 * TANGENT.z, (_185 * _179) * _269));
    float _292 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    float _293 = _292 * _282;
    float _294 = _292 * _285;
    float _295 = _292 * _288;
    float _3210 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _296 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    float _3221 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3232 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3243 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3254 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _300 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _316 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _406 = fma(_295, cbSceneParam._m0[5u].z, fma(_294, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _293));
    float _409 = fma(_295, cbSceneParam._m0[6u].z, fma(_294, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _293));
    float _412 = fma(_295, cbSceneParam._m0[7u].z, fma(_294, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _293));
    uint _425 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_425 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0)))) * cbInstanceData._m0[_427].z;
    float _3265 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _439 = 1.0 - _300;
    float _440 = _436 * _439;
    float _441 = _437 * _439;
    float _442 = _438 * _439;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _300;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _300;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _300;
    float _450 = _447 + 0.039999999105930328369140625;
    float _452 = _448 + 0.039999999105930328369140625;
    float _453 = _449 + 0.039999999105930328369140625;
    vec4 _462 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _465 = _462.x * TEXCOORD_5.w;
    float _466 = dot(vec3(_293, _294, _295), vec3(_376, _377, _378));
    float _469 = _466 * 2.0;
    float _473 = (_469 * _293) - _376;
    float _474 = (_469 * _294) - _377;
    float _475 = (_469 * _295) - _378;
    float _479 = abs(dot(vec3(_376, _377, _378), vec3(_293, _294, _295)));
    float _3298 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _481 = sqrt(_296);
    float _494 = exp2((_481 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_481 * 3.0));
    float _500 = (1.0 - _494) * ((_481 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _501 = _494 * _481;
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _839;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _564 = fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529));
        float _568 = fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529));
        float _572 = fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529));
        float _597 = _529 + _293;
        float _598 = _533 + _294;
        float _599 = _537 + _295;
        float _609 = fma(_599, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597)) - _564;
        float _610 = fma(_599, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597)) - _568;
        float _611 = fma(_599, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597)) - _572;
        float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
        float _628 = ((_615 * _609) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_564 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _629 = ((_615 * _610) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_568 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _630 = ((_615 * _611) / cbModelParam._m0[34u].z) + ((((((_572 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        float _667 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_633.x + (-0.5));
        float _669 = _667 * (_633.y + (-0.5));
        float _670 = _667 * (_633.z + (-0.5));
        float _677 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_640.x + (-0.5));
        float _679 = _677 * (_640.y + (-0.5));
        float _680 = _677 * (_640.z + (-0.5));
        float _687 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_647.x + (-0.5));
        float _689 = _687 * (_647.y + (-0.5));
        float _690 = _687 * (_647.z + (-0.5));
        float _697 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_654.x + (-0.5));
        float _699 = _697 * (_654.y + (-0.5));
        float _700 = _697 * (_654.z + (-0.5));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = _668 * 0.5;
        float _705 = _678 * 0.5;
        float _706 = _688 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _721 = (dot(vec3(_293, _294, _295), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3324 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _731 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3335 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _3346 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_733 + 1.0))) + _738) * _701;
        float _748 = _669 * 0.5;
        float _749 = _679 * 0.5;
        float _750 = _689 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(_293, _294, _295), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3357 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_702 + 9.9999997473787516355514526367188e-06);
        float _3368 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3379 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * (_775 + 1.0))) + _780) * _702;
        float _790 = _670 * 0.5;
        float _791 = _680 * 0.5;
        float _792 = _690 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_293, _294, _295), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3412 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_817 + 1.0))) + _822) * _703;
        _839 = _670;
        _841 = _669;
        _842 = _668;
        _843 = _680;
        _844 = _679;
        _845 = _678;
        _846 = _690;
        _847 = _689;
        _848 = _688;
        _849 = _703;
        _850 = _702;
        _851 = _701;
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
    }
    else
    {
        _839 = _840;
        _841 = _840;
        _842 = _840;
        _843 = _840;
        _844 = _840;
        _845 = _840;
        _846 = _840;
        _847 = _840;
        _848 = _840;
        _849 = _840;
        _850 = _840;
        _851 = _840;
        _852 = 0.0;
        _853 = 0.0;
        _854 = 0.0;
    }
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _880 = fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529));
        float _884 = fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529));
        float _888 = fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529));
        float _911 = _529 + _293;
        float _912 = _533 + _294;
        float _913 = _537 + _295;
        float _923 = fma(_913, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911)) - _880;
        float _924 = fma(_913, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911)) - _884;
        float _925 = fma(_913, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911)) - _888;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_880 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_884 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[35u].z) + ((((((_888 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _979 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_946.x + (-0.5));
        float _981 = _979 * (_946.y + (-0.5));
        float _982 = _979 * (_946.z + (-0.5));
        float _989 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_953.x + (-0.5));
        float _991 = _989 * (_953.y + (-0.5));
        float _992 = _989 * (_953.z + (-0.5));
        float _999 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_960.x + (-0.5));
        float _1001 = _999 * (_960.y + (-0.5));
        float _1002 = _999 * (_960.z + (-0.5));
        float _1009 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_967.x + (-0.5));
        float _1011 = _1009 * (_967.y + (-0.5));
        float _1012 = _1009 * (_967.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_293, _294, _295), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3475 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_1043 + 1.0))) + _1048) * _1013;
        float _1058 = _981 * 0.5;
        float _1059 = _991 * 0.5;
        float _1060 = _1001 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_293, _294, _295), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3508 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_1085 + 1.0))) + _1090) * _1014;
        float _1100 = _982 * 0.5;
        float _1101 = _992 * 0.5;
        float _1102 = _1002 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_293, _294, _295), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3541 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1127 + 1.0))) + _1132) * _1015;
        _1149 = _982;
        _1150 = _981;
        _1151 = _980;
        _1152 = _992;
        _1153 = _991;
        _1154 = _990;
        _1155 = _1002;
        _1156 = _1001;
        _1157 = _1000;
        _1158 = _1015;
        _1159 = _1014;
        _1160 = _1013;
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _840;
        _1150 = _840;
        _1151 = _840;
        _1152 = _840;
        _1153 = _840;
        _1154 = _840;
        _1155 = _840;
        _1156 = _840;
        _1157 = _840;
        _1158 = _840;
        _1159 = _840;
        _1160 = _840;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _853)) + _853;
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1196 = fma(_1175, cbSceneParam._m0[89u].z, fma(_1174, cbSceneParam._m0[89u].y, _1173 * cbSceneParam._m0[89u].x));
    float _1199 = fma(_1175, cbSceneParam._m0[90u].z, fma(_1174, cbSceneParam._m0[90u].y, _1173 * cbSceneParam._m0[90u].x));
    float _1202 = fma(_1175, cbSceneParam._m0[91u].z, fma(_1174, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1173));
    float _1217 = _473 * 0.5;
    float _1218 = _474 * 0.5;
    float _1219 = _475 * 0.5;
    float _1220 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1223 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1150, _1153, _1156, _1159));
    float _1226 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1260;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1233 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_839, _843, _846, _849));
        float _1237 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_841, _844, _847, _850));
        float _1241 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_842, _845, _848, _851));
        float _1248 = dot(vec4(cbModelParam._m0[39u]), vec4(_1217, _1218, _1219, 1.0));
        _1260 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1260 = 1.0;
    }
    float _1271;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1262 = dot(vec4(cbModelParam._m0[40u]), vec4(_1217, _1218, _1219, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1275 = (_1271 * cbModelParam._m0[1u].x) + (_1260 * (1.0 - cbModelParam._m0[1u].x));
    float _1285 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _296);
    float _1286 = isnan(_1285) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1285 : min(cbModelParam._m0[25u].z, _1285));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1335 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1339 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1343 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1346 = fma(_475, cbModelParam._m0[13u].z, fma(_474, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473));
        float _1349 = fma(_475, cbModelParam._m0[14u].z, fma(_474, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473));
        float _1352 = fma(_475, cbModelParam._m0[15u].z, fma(_474, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473));
        float _1380;
        if (_1346 > 0.0)
        {
            _1380 = abs((1.0 - _1335) / _1346);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1335 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1380 = frontier_phi_14_12_ladder;
        }
        float _1607;
        if (_1349 > 0.0)
        {
            _1607 = abs((1.0 - _1339) / _1349);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1339 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1607 = frontier_phi_23_19_ladder;
        }
        float _1864;
        if (_1352 > 0.0)
        {
            _1864 = abs((1.0 - _1343) / _1352);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1343 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1864 = frontier_phi_35_30_ladder;
        }
        float _1866 = isnan(_1607) ? _1380 : (isnan(_1380) ? _1607 : min(_1380, _1607));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1346) + _1335;
        float _1872 = (_1867 * _1349) + _1339;
        float _1873 = (_1867 * _1352) + _1343;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1286);
            frontier_phi_13_35_ladder = _2001.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2001.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2001.x * cbModelParam._m0[1u].y;
        }
        _1368 = frontier_phi_13_35_ladder_2;
        _1370 = frontier_phi_13_35_ladder_1;
        _1372 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_473, _474, _475), _1286);
        _1368 = _1356.x * cbModelParam._m0[1u].y;
        _1370 = _1356.y * cbModelParam._m0[1u].y;
        _1372 = _1356.z * cbModelParam._m0[1u].y;
    }
    float _1376 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _296);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1376 : min(cbModelParam._m0[25u].w, _1376));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1434 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1438 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1442 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1445 = fma(_475, cbModelParam._m0[21u].z, fma(_474, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473));
        float _1448 = fma(_475, cbModelParam._m0[22u].z, fma(_474, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473));
        float _1451 = fma(_475, cbModelParam._m0[23u].z, fma(_474, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473));
        float _1612;
        if (_1445 > 0.0)
        {
            _1612 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1612 = frontier_phi_25_21_ladder;
        }
        float _1891;
        if (_1448 > 0.0)
        {
            _1891 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1891 = frontier_phi_37_32_ladder;
        }
        float _2104;
        if (_1451 > 0.0)
        {
            _2104 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2104 = frontier_phi_46_43_ladder;
        }
        float _2106 = isnan(_1891) ? _1612 : (isnan(_1612) ? _1891 : min(_1612, _1891));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1445) + _1434;
        float _2112 = (_2107 * _1448) + _1438;
        float _2113 = (_2107 * _1451) + _1442;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2114;
        float _2117 = _2114 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2113 > _2117) || ((_2113 < _2115) || ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 < _2115) || (_2111 > _2117))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2312 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2113, cbModelParam._m0[17u].z, fma(_2112, cbModelParam._m0[17u].y, _2111 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2113, cbModelParam._m0[18u].z, fma(_2112, cbModelParam._m0[18u].y, _2111 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2113, cbModelParam._m0[19u].z, fma(_2112, cbModelParam._m0[19u].y, _2111 * cbModelParam._m0[19u].x))), _1377);
            frontier_phi_22_46_ladder = _2312.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2312.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2312.x * cbModelParam._m0[1u].z;
        }
        _1470 = frontier_phi_22_46_ladder_2;
        _1472 = frontier_phi_22_46_ladder_1;
        _1474 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_473, _474, _475), _1377);
        _1470 = _1454.x * cbModelParam._m0[1u].z;
        _1472 = _1454.y * cbModelParam._m0[1u].z;
        _1474 = _1454.z * cbModelParam._m0[1u].z;
    }
    float _1487 = (((_500 * _450) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1489 = (((_500 * _452) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1491 = (((_500 * _453) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1494 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, _1487 * cbSceneParam._m0[91u].x));
    vec4 _1508 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_384, _385));
    float _1510 = _1508.w;
    float _1522 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1510);
    float _1523 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1510);
    float _1524 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1510);
    uvec4 _1528 = floatBitsToUint(cbInstanceData._m0[_425 + 5u]);
    uint _1530 = _1528.x * 14u;
    uint _1531 = _1530 + 13u;
    float _1538 = _465 + (-1.0);
    float _1543 = (cbLight._m0[_1531].x * _1538) + 1.0;
    float _1544 = (cbLight._m0[_1531].y * _1538) + 1.0;
    float _1545 = (cbLight._m0[_1531].z * _1538) + 1.0;
    float _1546 = (cbLight._m0[_1531].w * _1538) + 1.0;
    uint _1547 = _1530 + 5u;
    float _1553 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1557 = _1530 + 4u;
    float _1566 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
    uint _1570 = _1530 | 1u;
    float _1581 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_293, _294, _295));
    float _1584 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_293, _294, _295));
    float _3677 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _3688 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1589 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.3183098733425140380859375;
    float _1591 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.3183098733425140380859375;
    float _1598 = ((cbLight._m0[_1547].x * _1553) * _1591) + (((cbLight._m0[_1557].x * _1522) * _1566) * _1589);
    float _1599 = ((_1553 * cbLight._m0[_1547].y) * _1591) + (((cbLight._m0[_1557].y * _1523) * _1566) * _1589);
    float _1600 = ((_1553 * cbLight._m0[_1547].z) * _1591) + (((cbLight._m0[_1557].z * _1524) * _1566) * _1589);
    uvec4 _1604 = floatBitsToUint(cbLight._m0[_1530 + 12u]);
    bool _1606 = _1604.x == 0u;
    float _1617;
    float _1619;
    float _1621;
    if (_1606)
    {
        _1617 = _1598;
        _1619 = _1599;
        _1621 = _1600;
    }
    else
    {
        uint _1625 = _1530 + 6u;
        float _1641 = (dot(vec3(cbLight._m0[_1530 + 2u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1642 = _1641 * _1641;
        float _3699 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1644 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1617 = (((cbLight._m0[_1625].x * 0.3183098733425140380859375) * _1643) * _1644) + _1598;
        _1619 = (((cbLight._m0[_1625].y * 0.3183098733425140380859375) * _1643) * _1644) + _1599;
        _1621 = (((cbLight._m0[_1625].z * 0.3183098733425140380859375) * _1643) * _1644) + _1600;
    }
    bool _1624 = _1604.y == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1624)
    {
        _1662 = _1617;
        _1664 = _1619;
        _1666 = _1621;
    }
    else
    {
        uint _1835 = _1530 + 7u;
        float _1851 = (dot(vec3(cbLight._m0[_1530 + 3u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3715 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1854 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1662 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1617;
        _1664 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1619;
        _1666 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1621;
    }
    uint _1669 = _1530 + 8u;
    float _1682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1530].w)) * _296) * 0.949999988079071044921875);
    float _1683 = _1682 * _1682;
    float _1684 = cbLight._m0[_1530].x + _376;
    float _1685 = cbLight._m0[_1530].y + _377;
    float _1686 = cbLight._m0[_1530].z + _378;
    float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
    float _1691 = _1690 * _1684;
    float _1692 = _1690 * _1685;
    float _1693 = _1690 * _1686;
    float _1694 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1530].xyz));
    float _3731 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _1698 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1699 = dot(vec3(_293, _294, _295), vec3(_1691, _1692, _1693));
    float _3753 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1703 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_1691, _1692, _1693));
    float _3764 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1707 = _1683 * _1683;
    float _1711 = ((_1702 * _1702) * (_1707 + (-1.0))) + 1.0;
    float _1719 = exp2(log2(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * 5.0);
    float _1720 = 0.959999978542327880859375 - _447;
    float _1722 = 0.959999978542327880859375 - _448;
    float _1723 = 0.959999978542327880859375 - _449;
    float _1730 = 1.0 - _1683;
    float _1741 = (0.5 / (((_1698 * ((_1697 * _1730) + _1683)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1730) + _1683) * _1697))) * _1697;
    float _3775 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1743 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1707 / ((_1711 * _1711) * 3.141590118408203125));
    uint _1757 = _1530 + 9u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _296) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1570].x + _376;
    float _1771 = cbLight._m0[_1570].y + _377;
    float _1772 = cbLight._m0[_1570].z + _378;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1570].xyz));
    float _3786 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1784 = dot(vec3(_293, _294, _295), vec3(_1777, _1778, _1779));
    float _3797 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1777, _1778, _1779));
    float _3808 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1769 * _1769;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1803 = exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0);
    float _1810 = 1.0 - _1769;
    float _1820 = (0.5 / (((_1698 * ((_1783 * _1810) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1810) + _1769) * _1783))) * _1783;
    float _3819 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    float _1832 = (((((_1803 * _1720) + _450) * cbLight._m0[_1757].x) * _1822) * _1553) + ((((cbLight._m0[_1669].x * _1522) * ((_1719 * _1720) + _450)) * _1743) * _1566);
    float _1833 = (((((_1803 * _1722) + _452) * cbLight._m0[_1757].y) * _1822) * _1553) + ((((cbLight._m0[_1669].y * _1523) * ((_1719 * _1722) + _452)) * _1743) * _1566);
    float _1834 = (((((_1803 * _1723) + _453) * cbLight._m0[_1757].z) * _1822) * _1553) + ((((cbLight._m0[_1669].z * _1524) * ((_1719 * _1723) + _453)) * _1743) * _1566);
    float _1896;
    float _1898;
    float _1900;
    if (_1606)
    {
        _1896 = _1832;
        _1898 = _1833;
        _1900 = _1834;
    }
    else
    {
        uint _1902 = _1530 + 2u;
        uint _1906 = _1530 + 10u;
        float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _296) * 0.949999988079071044921875);
        float _1921 = _1920 * _1920;
        float _1922 = cbLight._m0[_1902].x + _376;
        float _1923 = cbLight._m0[_1902].y + _377;
        float _1924 = cbLight._m0[_1902].z + _378;
        float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
        float _1929 = _1928 * _1922;
        float _1930 = _1928 * _1923;
        float _1931 = _1928 * _1924;
        float _1932 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1902].xyz));
        float _3830 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1936 = dot(vec3(_293, _294, _295), vec3(_1929, _1930, _1931));
        float _3841 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1939 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1940 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_1929, _1930, _1931));
        float _3852 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = _1921 * _1921;
        float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
        float _1955 = exp2(log2(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * 5.0);
        float _1962 = 1.0 - _1921;
        float _1972 = (0.5 / (((_1698 * ((_1935 * _1962) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1962) + _1921) * _1935))) * _1935;
        float _3863 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1974 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
        float _1975 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1896 = (((((_1955 * _1720) + _450) * cbLight._m0[_1906].x) * _1974) * _1975) + _1832;
        _1898 = (((((_1955 * _1722) + _452) * cbLight._m0[_1906].y) * _1974) * _1975) + _1833;
        _1900 = (((((_1955 * _1723) + _453) * cbLight._m0[_1906].z) * _1974) * _1975) + _1834;
    }
    float _2010;
    float _2012;
    float _2014;
    if (_1624)
    {
        _2010 = _1896;
        _2012 = _1898;
        _2014 = _1900;
    }
    else
    {
        uint _2021 = _1530 + 3u;
        uint _2025 = _1530 + 11u;
        float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _296) * 0.949999988079071044921875);
        float _2040 = _2039 * _2039;
        float _2041 = cbLight._m0[_2021].x + _376;
        float _2042 = cbLight._m0[_2021].y + _377;
        float _2043 = cbLight._m0[_2021].z + _378;
        float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
        float _2048 = _2047 * _2041;
        float _2049 = _2047 * _2042;
        float _2050 = _2047 * _2043;
        float _2051 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_2021].xyz));
        float _3879 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _2055 = dot(vec3(_293, _294, _295), vec3(_2048, _2049, _2050));
        float _3890 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _2059 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2048, _2049, _2050));
        float _3901 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2063 = _2040 * _2040;
        float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
        float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0);
        float _2081 = 1.0 - _2040;
        float _2091 = (0.5 / (((_1698 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _2081) + _2040) * _2054))) * _2054;
        float _3912 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _2010 = (((((_2074 * _1720) + _450) * cbLight._m0[_2025].x) * _2093) * _2094) + _1896;
        _2012 = (((((_2074 * _1722) + _452) * cbLight._m0[_2025].y) * _2093) * _2094) + _1898;
        _2014 = (((((_2074 * _1723) + _453) * cbLight._m0[_2025].z) * _2093) * _2094) + _1900;
    }
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_1528.y == 0u)
    {
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2169;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2169;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2169;
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.x;
        uint _2196 = uint((float(_2184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2185))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2185)));
        float _2206 = (log2(_2172 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2207 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        uint _2210 = uint(isnan(14.0) ? _2207 : (isnan(_2207) ? 14.0 : min(_2207, 14.0)));
        uvec4 _2215 = texelFetch(g_lightClusterGridBuffer, int(((_2210 << 2u) + (_2196 << 6u)) >> 2u));
        uint _2216 = _2215.x;
        uint _2217 = _2184.z;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        if (((((1u << ((_2217 >> 4u) & 15u)) + 4294967295u) & _2216) == 0u) || ((_2217 & 240u) == 0u))
        {
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
        }
        else
        {
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            uint _2468 = 0u;
            uint _2477;
            bool _2478;
            for (;;)
            {
                _2477 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2468 << 2u)) >> 2u)).x;
                _2478 = _2477 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2478)
                {
                    frontier_phi_61_pred = _2462;
                    frontier_phi_61_pred_1 = _2467;
                    frontier_phi_61_pred_2 = _2466;
                    frontier_phi_61_pred_3 = _2465;
                    frontier_phi_61_pred_4 = _2464;
                    frontier_phi_61_pred_5 = _2463;
                }
                else
                {
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    uint _2592;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2467;
                    _2592 = _2477;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    for (;;)
                    {
                        uint _2596 = uint(findLSB(_2592)) + (_2468 << 5u);
                        uint _2593 = (_2592 + 4294967295u) & _2592;
                        uint _2598 = _2596 * 48u;
                        vec4 _2612 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2618 = (_2596 * 48u) + 4u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2637 = (_2596 * 48u) + 8u;
                        vec3 _2648 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x));
                        float _2652 = _2612.x - _2170;
                        float _2653 = _2612.y - _2171;
                        float _2654 = _2612.z - _2172;
                        float _2655 = dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654));
                        float _2658 = inversesqrt(_2655);
                        float _2659 = _2658 * _2652;
                        float _2660 = _2658 * _2653;
                        float _2661 = _2658 * _2654;
                        float _2662 = dot(vec3(_406, _409, _412), vec3(_2659, _2660, _2661));
                        float _2667 = 1.0 - (_2655 * _2612.w);
                        float _3938 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2668 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2669 = sqrt(_2655) * _2631.w;
                        float _2672 = 1.39999997615814208984375 / (_2669 + 1.39999997615814208984375);
                        float _2673 = _2672 * _2672;
                        float _2676 = ((1.0 - _2673) * _2662) + _2673;
                        float _2679 = _2669 * _2669;
                        float _2683 = ((isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0))) * _2668) / ((_2679 * 0.699999988079071044921875) + 1.0);
                        float _2687 = (-0.0) - _2170;
                        float _2688 = (-0.0) - _2171;
                        float _2689 = (-0.0) - _2172;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2704 = exp2(log2(1.0 / ((_2679 * 3.5) + 5.0)) * 0.25);
                        float _2705 = 1.0 - _481;
                        float _2712 = sqrt(1.0 - ((1.0 - (_2705 * _2705)) * (1.0 - (_2704 * _2704))));
                        float _2713 = _2712 * _2712;
                        float _2714 = _2713 * _2713;
                        float _2715 = _2694 + _2659;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
                        float _2725 = dot(vec3(_406, _409, _412), vec3(_2694, _2695, _2696));
                        float _3954 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2728 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                        float _2729 = dot(vec3(_406, _409, _412), vec3(_2721 * _2715, _2721 * _2716, _2721 * _2717));
                        float _3965 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2732 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2736 = ((_2732 * _2732) * (_2714 + (-1.0))) + 1.0;
                        float _2737 = _2672 * _2713;
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2662) + _2738;
                        float _3976 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _2743 = 1.0 - _2713;
                        float _2753 = (0.5 / (((_2742 * ((_2728 * _2743) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2743) + _2713) * _2728))) * _2742;
                        float _3987 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2764 = (((_2714 * 3.1415927410125732421875) * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) / ((_2736 * _2736) * ((_2679 * 2.1991131305694580078125) + 3.141590118408203125))) * _2668;
                        _2521 = (_2683 * _2631.x) + _2589;
                        _2522 = (_2683 * _2631.y) + _2590;
                        _2523 = (_2683 * _2631.z) + _2591;
                        _2518 = (_2764 * _2648.x) + _2586;
                        _2519 = (_2764 * _2648.y) + _2587;
                        _2520 = (_2764 * _2648.z) + _2588;
                        if (_2593 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2523;
                            _2592 = _2593;
                        }
                    }
                    frontier_phi_61_pred = _2518;
                    frontier_phi_61_pred_1 = _2523;
                    frontier_phi_61_pred_2 = _2522;
                    frontier_phi_61_pred_3 = _2521;
                    frontier_phi_61_pred_4 = _2520;
                    frontier_phi_61_pred_5 = _2519;
                }
                _2318 = frontier_phi_61_pred;
                _2328 = frontier_phi_61_pred_1;
                _2326 = frontier_phi_61_pred_2;
                _2324 = frontier_phi_61_pred_3;
                _2322 = frontier_phi_61_pred_4;
                _2320 = frontier_phi_61_pred_5;
                uint _2469 = _2468 + 1u;
                if (_2469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2462 = _2318;
                    _2463 = _2320;
                    _2464 = _2322;
                    _2465 = _2324;
                    _2466 = _2326;
                    _2467 = _2328;
                    _2468 = _2469;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
        }
        uvec4 _2331 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2332 = _2331.z;
        uint _2334 = (_2332 >> 8u) & 15u;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((4294967295u << _2334) & _2216) == 0u)
        {
            _2430 = _2317;
            _2432 = _2319;
            _2434 = _2321;
            _2436 = _2323;
            _2438 = _2325;
            _2440 = _2327;
        }
        else
        {
            float _2455 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
            float _2456 = _2455 * _2170;
            float _2457 = _2455 * _2171;
            float _2458 = _2455 * _2172;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2334 < ((_2332 >> 12u) & 15u))
            {
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2569 = _2317;
                float _2570 = _2319;
                float _2571 = _2321;
                float _2572 = _2323;
                float _2573 = _2325;
                float _2574 = _2327;
                uint _2575 = _2334;
                uint _2584;
                bool _2585;
                for (;;)
                {
                    _2584 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                    _2585 = _2584 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2585)
                    {
                        frontier_phi_67_pred = _2572;
                        frontier_phi_67_pred_1 = _2573;
                        frontier_phi_67_pred_2 = _2574;
                        frontier_phi_67_pred_3 = _2571;
                        frontier_phi_67_pred_4 = _2570;
                        frontier_phi_67_pred_5 = _2569;
                    }
                    else
                    {
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        float _2787 = _2574;
                        uint _2788 = _2584;
                        uint _2789;
                        vec4 _2814;
                        float _2815;
                        vec4 _2830;
                        vec3 _2842;
                        vec4 _2858;
                        vec4 _2874;
                        float _2921;
                        bool _2922;
                        for (;;)
                        {
                            uint _2799 = ((_2575 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2788));
                            _2789 = (_2788 + 4294967295u) & _2788;
                            uint _2801 = _2799 * 40u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            _2815 = _2814.w;
                            uint _2817 = (_2799 * 40u) + 4u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2832 = (_2799 * 40u) + 8u;
                            _2842 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x));
                            uint _2845 = (_2799 * 40u) + 16u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2799 * 40u) + 20u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2799 * 40u) + 24u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2896 = (_2799 * 40u) + 28u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2921 = fma(_2172, _2909.z, fma(_2171, _2909.y, _2909.x * _2170)) + _2909.w;
                            _2922 = !((fma(_2172, _2890.z, fma(_2171, _2890.y, _2890.x * _2170)) + _2890.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2922)
                            {
                                float _2949 = _2814.x - _2170;
                                float _2950 = _2814.y - _2171;
                                float _2951 = _2814.z - _2172;
                                float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                                float _2955 = inversesqrt(_2952);
                                float _2956 = _2955 * _2949;
                                float _2957 = _2955 * _2950;
                                float _2958 = _2955 * _2951;
                                float _2962 = 1.0 - (_2952 / (_2815 * _2815));
                                float _3998 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _2967 = sqrt(_2952) * _2830.w;
                                float _2969 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                                float _2970 = _2969 * _2969;
                                float _2973 = ((1.0 - _2970) * dot(vec3(_2956, _2957, _2958), vec3(_406, _409, _412))) + _2970;
                                float _2976 = _2967 * _2967;
                                float _2980 = (fma(_2172, _2858.z, fma(_2171, _2858.y, _2858.x * _2170)) + _2858.w) / _2921;
                                float _2981 = (fma(_2172, _2874.z, fma(_2171, _2874.y, _2874.x * _2170)) + _2874.w) / _2921;
                                float _2985 = 1.0 - dot(vec2(_2980, _2981), vec2(_2980, _2981));
                                float _4014 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                                float _2987 = _2986 * (((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2963) / ((_2976 * 0.699999988079071044921875) + 1.0));
                                float _2999 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                                float _3000 = 1.0 - _481;
                                float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                                float _3008 = _3007 * _3007;
                                float _3009 = _3008 * _3008;
                                float _3010 = _2956 - _2456;
                                float _3011 = _2957 - _2457;
                                float _3012 = _2958 - _2458;
                                float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                                float _3020 = dot(vec3(_406, _409, _412), vec3((-0.0) - _2456, (-0.0) - _2457, (-0.0) - _2458));
                                float _4025 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3023 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _3024 = dot(vec3(_406, _409, _412), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                                float _4036 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                                float _3032 = _2969 * _3008;
                                float _3033 = _3032 * _3032;
                                float _3039 = ((1.0 - _3033) * dot(vec3(_406, _409, _412), vec3(_2956, _2957, _2958))) + _3033;
                                float _4047 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3041 = 1.0 - _3008;
                                float _3051 = (0.5 / (((_3040 * ((_3023 * _3041) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3008) * _3023))) * _3040;
                                float _4058 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3061 = (_2986 * _2963) * (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) / ((_3031 * _3031) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3061 * _2842.x;
                                frontier_phi_73_pred_1 = _3061 * _2842.y;
                                frontier_phi_73_pred_2 = _2987 * _2830.z;
                                frontier_phi_73_pred_3 = _2987 * _2830.y;
                                frontier_phi_73_pred_4 = _2987 * _2830.x;
                                frontier_phi_73_pred_5 = _3061 * _2842.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3065 = frontier_phi_73_pred;
                            _3066 = frontier_phi_73_pred_1;
                            _3070 = frontier_phi_73_pred_2;
                            _3069 = frontier_phi_73_pred_3;
                            _3068 = frontier_phi_73_pred_4;
                            _3067 = frontier_phi_73_pred_5;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2769 = _3065 + _2782;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            if (_2789 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2789;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2772;
                        frontier_phi_67_pred_1 = _2773;
                        frontier_phi_67_pred_2 = _2774;
                        frontier_phi_67_pred_3 = _2771;
                        frontier_phi_67_pred_4 = _2770;
                        frontier_phi_67_pred_5 = _2769;
                    }
                    _2437 = frontier_phi_67_pred;
                    _2439 = frontier_phi_67_pred_1;
                    _2441 = frontier_phi_67_pred_2;
                    _2435 = frontier_phi_67_pred_3;
                    _2433 = frontier_phi_67_pred_4;
                    _2431 = frontier_phi_67_pred_5;
                    uint _2576 = _2575 + 1u;
                    if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2569 = _2431;
                        _2570 = _2433;
                        _2571 = _2435;
                        _2572 = _2437;
                        _2573 = _2439;
                        _2574 = _2441;
                        _2575 = _2576;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2439;
                frontier_phi_55_56_ladder_1 = _2441;
                frontier_phi_55_56_ladder_2 = _2437;
                frontier_phi_55_56_ladder_3 = _2435;
                frontier_phi_55_56_ladder_4 = _2433;
                frontier_phi_55_56_ladder_5 = _2431;
            }
            else
            {
                frontier_phi_55_56_ladder = _2325;
                frontier_phi_55_56_ladder_1 = _2327;
                frontier_phi_55_56_ladder_2 = _2323;
                frontier_phi_55_56_ladder_3 = _2321;
                frontier_phi_55_56_ladder_4 = _2319;
                frontier_phi_55_56_ladder_5 = _2317;
            }
            _2430 = frontier_phi_55_56_ladder_5;
            _2432 = frontier_phi_55_56_ladder_4;
            _2434 = frontier_phi_55_56_ladder_3;
            _2436 = frontier_phi_55_56_ladder_2;
            _2438 = frontier_phi_55_56_ladder;
            _2440 = frontier_phi_55_56_ladder_1;
        }
        float _2445 = isnan(1.0) ? _465 : (isnan(_465) ? 1.0 : min(_465, 1.0));
        _2229 = (_2445 * _2436) + _1662;
        _2231 = (_2445 * _2438) + _1664;
        _2233 = (_2445 * _2440) + _1666;
        _2235 = ((_2430 * _450) * _2445) + _2010;
        _2237 = ((_2432 * _452) * _2445) + _2012;
        _2239 = ((_2434 * _453) * _2445) + _2014;
    }
    else
    {
        _2229 = _1662;
        _2231 = _1664;
        _2233 = _1666;
        _2235 = _2010;
        _2237 = _2012;
        _2239 = _2014;
    }
    float _4074 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4085 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4096 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    uint _2259 = _425 + 6u;
    float _2267 = _384 / cbSceneParam._m0[86u].x;
    float _2268 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2282 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2267, _2268, (log2((isnan(cbSceneParam._m0[77u].w) ? _316 : (isnan(_316) ? cbSceneParam._m0[77u].w : min(_316, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2284 = _2282.x;
    float _2285 = _2282.y;
    float _2286 = _2282.z;
    float _2287 = _2282.w;
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    if (_316 > cbSceneParam._m0[78u].w)
    {
        float _2342 = isnan(_316) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _316 : min(cbSceneParam._m0[80u].w, _316));
        float _2343 = _2342 / _316;
        float _2354 = _2343 * _369;
        float _2355 = _370 * _2343;
        float _2356 = (-0.0) - _2355;
        float _2358 = _2343 * _371;
        float _2360 = (cbSceneParam._m0[77u].w * _2356) / _2342;
        float _2361 = _2360 + cbSceneParam._m0[79u].w;
        float _2362 = cbSceneParam._m0[79u].w - _2355;
        float _2368 = sqrt(((_2354 * _2354) + (_2355 * _2355)) + (_2358 * _2358));
        float _2371 = (1.0 - (cbSceneParam._m0[77u].w / _2342)) * _2368;
        float _2376 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2378 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2531;
        if (abs((_2356 - _2360) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2531 = ((((_2361 > 0.0) ? exp2(_2376 * _2361) : (2.0 - exp2(_2378 * _2361))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2371;
        }
        else
        {
            float _2491 = 1.0 / cbSceneParam._m0[80u].x;
            float _2492 = isnan(_2362) ? _2361 : (isnan(_2361) ? _2362 : max(_2361, _2362));
            float _2493 = isnan(_2362) ? _2361 : (isnan(_2361) ? _2362 : min(_2361, _2362));
            float _2502 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : min(_2492, 0.0));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            _2531 = ((abs(_2368 / _2356) * cbSceneParam._m0[80u].y) * ((((_2502 - _2503) * 2.0) - ((exp2(_2376 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0)))) - exp2(_2376 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0))))) * _2491)) - ((exp2(_2378 * _2502) - exp2(_2378 * _2503)) * _2491))) + (_2371 * cbSceneParam._m0[80u].z);
        }
        vec4 _2533 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2267, _2268, 1.0), 0.0);
        float _2542 = exp2((_2531 * (-1.44269502162933349609375)) * (1.0 - _2533.w));
        float _2543 = log2(_2542);
        float _2559 = log2(_2287);
        _2380 = (exp2(_2559 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].x)) * _2533.x) / cbSceneParam._m0[78u].x)) + _2284;
        _2382 = (exp2(_2559 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].y)) * _2533.y) / cbSceneParam._m0[78u].y)) + _2285;
        _2384 = (exp2(_2559 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].z)) * _2533.z) / cbSceneParam._m0[78u].z)) + _2286;
        _2386 = _2542 * _2287;
    }
    else
    {
        _2380 = _2284;
        _2382 = _2285;
        _2384 = _2286;
        _2386 = _2287;
    }
    float _2398 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2399 = _2398 == 3.0;
    float _2400 = log2(_2386);
    float _2407 = exp2(_2400 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2229 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _465))) + ((_2235 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2408 = exp2(_2400 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2231 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _465))) + ((_2237 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2409 = exp2(_2400 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2233 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _465))) + ((_2239 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2418 = (_2398 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2418 * (_2399 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2380)));
    SV_Target.y = _2418 * (_2399 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.z = _2418 * (_2399 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2384)));
    SV_Target.w = cbInstanceData._m0[_2259].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2259].w;
}


