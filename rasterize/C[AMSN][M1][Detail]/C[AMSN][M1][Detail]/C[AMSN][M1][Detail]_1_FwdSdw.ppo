#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _915;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _298 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3512 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _306 = (_299 * ((_267.x * cbMtdParam._m0[10u].x) - _242)) + _242;
    float _307 = (_299 * ((_267.y * cbMtdParam._m0[10u].y) - _243)) + _243;
    float _308 = (_299 * ((_267.z * cbMtdParam._m0[10u].z) - _244)) + _244;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = (_325.x * 2.0) + (-1.0);
    float _335 = (_325.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_333, _335), vec2(_333, _335));
    float _3523 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    float _342 = _325.z * cbMtdParam._m0[12u].y;
    vec4 _355 = texture(sampler2D(C_AMSN_M1_Detail_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _369 = ((cbMtdParam._m0[11u].w * TEXCOORD_5.x) * ((_355.z * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _375 = ((((_355.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[11u].x) + _333;
    float _376 = ((((_355.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[11u].x) + _335;
    float _379 = fma(_341, _206 * NORMAL.x, fma(_376, _213 * TANGENT.x, (_199 * _191) * _375));
    float _382 = fma(_341, _206 * NORMAL.y, fma(_376, _213 * TANGENT.y, (_199 * _192) * _375));
    float _385 = fma(_341, _206 * NORMAL.z, fma(_376, _213 * TANGENT.z, (_199 * _193) * _375));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3534 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _393 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3556 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3567 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    float _478 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _479 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _499 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _502 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _505 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _518 = uint(roundEven(NORMAL.w)) * 13u;
    uint _520 = (_518 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _526 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_520].x;
    float _527 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_520].y;
    float _528 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_520].z;
    float _3578 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    vec4 _540 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _478, cbSceneParam._m0[86u].y * _479));
    float _543 = _540.x * TEXCOORD_5.w;
    float _544 = dot(vec3(_390, _391, _392), vec3(_470, _471, _472));
    float _547 = _544 * 2.0;
    float _551 = (_547 * _390) - _470;
    float _552 = (_547 * _391) - _471;
    float _553 = (_547 * _392) - _472;
    float _557 = abs(dot(vec3(_470, _471, _472), vec3(_390, _391, _392)));
    float _3611 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _559 = sqrt(_393);
    float _572 = exp2((_559 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_559 * 3.0));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _914;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _639 = fma(_612, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604));
        float _643 = fma(_612, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604));
        float _647 = fma(_612, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604));
        float _672 = _604 + _390;
        float _673 = _608 + _391;
        float _674 = _612 + _392;
        float _684 = fma(_674, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _672)) - _639;
        float _685 = fma(_674, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _672)) - _643;
        float _686 = fma(_674, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _672)) - _647;
        float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
        float _703 = ((_690 * _684) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_639 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_690 * _685) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_643 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_690 * _686) / cbModelParam._m0[34u].z) + ((((((_647 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        float _742 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_708.x + (-0.5));
        float _744 = _742 * (_708.y + (-0.5));
        float _745 = _742 * (_708.z + (-0.5));
        float _752 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_715.x + (-0.5));
        float _754 = _752 * (_715.y + (-0.5));
        float _755 = _752 * (_715.z + (-0.5));
        float _762 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_722.x + (-0.5));
        float _764 = _762 * (_722.y + (-0.5));
        float _765 = _762 * (_722.z + (-0.5));
        float _772 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_729.x + (-0.5));
        float _774 = _772 * (_729.y + (-0.5));
        float _775 = _772 * (_729.z + (-0.5));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = _743 * 0.5;
        float _780 = _753 * 0.5;
        float _781 = _763 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _796 = (dot(vec3(_390, _391, _392), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _806 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3659 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_808 + 1.0))) + _813) * _776;
        float _823 = _744 * 0.5;
        float _824 = _754 * 0.5;
        float _825 = _764 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_390, _391, _392), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3692 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_850 + 1.0))) + _855) * _777;
        float _865 = _745 * 0.5;
        float _866 = _755 * 0.5;
        float _867 = _765 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_390, _391, _392), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3725 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_892 + 1.0))) + _897) * _778;
        _914 = _745;
        _916 = _744;
        _917 = _743;
        _918 = _755;
        _919 = _754;
        _920 = _753;
        _921 = _765;
        _922 = _764;
        _923 = _763;
        _924 = _778;
        _925 = _777;
        _926 = _776;
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
    }
    else
    {
        _914 = _915;
        _916 = _915;
        _917 = _915;
        _918 = _915;
        _919 = _915;
        _920 = _915;
        _921 = _915;
        _922 = _915;
        _923 = _915;
        _924 = _915;
        _925 = _915;
        _926 = _915;
        _927 = 0.0;
        _928 = 0.0;
        _929 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_612, cbModelParam._m0[30u].z, fma(_608, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _604));
        float _959 = fma(_612, cbModelParam._m0[31u].z, fma(_608, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _604));
        float _963 = fma(_612, cbModelParam._m0[32u].z, fma(_608, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _604));
        float _986 = _604 + _390;
        float _987 = _608 + _391;
        float _988 = _612 + _392;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_390, _391, _392), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3788 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_390, _391, _392), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3821 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_390, _391, _392), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3854 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _915;
        _1225 = _915;
        _1226 = _915;
        _1227 = _915;
        _1228 = _915;
        _1229 = _915;
        _1230 = _915;
        _1231 = _915;
        _1232 = _915;
        _1233 = _915;
        _1234 = _915;
        _1235 = _915;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _928)) + _928;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _929)) + _929;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _551 * 0.5;
    float _1293 = _552 * 0.5;
    float _1294 = _553 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _918, _921, _924));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_916, _919, _922, _925));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_917, _920, _923, _926));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_612, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_612, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_612, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_553, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551));
        float _1424 = fma(_553, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551));
        float _1427 = fma(_553, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1455 = frontier_phi_14_12_ladder;
        }
        float _1628;
        if (_1424 > 0.0)
        {
            _1628 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1628 = frontier_phi_23_19_ladder;
        }
        float _1923;
        if (_1427 > 0.0)
        {
            _1923 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1923 = frontier_phi_35_30_ladder;
        }
        float _1925 = isnan(_1628) ? _1455 : (isnan(_1455) ? _1628 : min(_1455, _1628));
        float _1926 = isnan(_1923) ? _1925 : (isnan(_1925) ? _1923 : min(_1925, _1923));
        float _1930 = (_1926 * _1421) + _1410;
        float _1931 = (_1926 * _1424) + _1414;
        float _1932 = (_1926 * _1427) + _1418;
        float _1933 = _1926 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1933;
        float _1937 = _1933 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 > _1937) || ((_1931 < _1935) || ((_1930 < _1935) || (_1930 > _1937))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2077 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1932, cbModelParam._m0[9u].z, fma(_1931, cbModelParam._m0[9u].y, _1930 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1932, cbModelParam._m0[10u].z, fma(_1931, cbModelParam._m0[10u].y, _1930 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1932, cbModelParam._m0[11u].z, fma(_1931, cbModelParam._m0[11u].y, _1930 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_13_35_ladder = _2077.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2077.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2077.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_13_35_ladder_2;
        _1445 = frontier_phi_13_35_ladder_1;
        _1447 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_551, _552, _553), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_612, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_612, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_612, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_553, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551));
        float _1523 = fma(_553, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551));
        float _1526 = fma(_553, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551));
        float _1633;
        if (_1520 > 0.0)
        {
            _1633 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1633 = frontier_phi_25_21_ladder;
        }
        float _1950;
        if (_1523 > 0.0)
        {
            _1950 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1950 = frontier_phi_37_32_ladder;
        }
        float _2277;
        if (_1526 > 0.0)
        {
            _2277 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2277 = frontier_phi_47_44_ladder;
        }
        float _2279 = isnan(_1950) ? _1633 : (isnan(_1633) ? _1950 : min(_1633, _1950));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1520) + _1509;
        float _2285 = (_2280 * _1523) + _1513;
        float _2286 = (_2280 * _1526) + _1517;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_22_47_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_22_47_ladder_2;
        _1547 = frontier_phi_22_47_ladder_1;
        _1549 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_551, _552, _553), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1561 = ((((1.0 - _572) * ((_559 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_572 * _559)) * _543;
    float _1562 = _1561 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1563 = _1561 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1564 = _1561 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1620 = _1607 / _1619;
    float _1621 = _1611 / _1619;
    float _1622 = _1615 / _1619;
    float _1769;
    float _1770;
    float _1771;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1649 = ((uint(_1622 > cbSceneParam._m0[59u].y) + uint(_1622 > cbSceneParam._m0[59u].x)) + uint(_1622 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1650 = _1649 + 43u;
        uint _1658 = _1649 + 44u;
        uint _1666 = _1649 + 45u;
        uint _1674 = _1649 + 46u;
        float _1685 = fma(_1619, cbSceneParam._m0[_1650].w, fma(_1615, cbSceneParam._m0[_1650].z, fma(_1611, cbSceneParam._m0[_1650].y, _1607 * cbSceneParam._m0[_1650].x)));
        float _1689 = fma(_1619, cbSceneParam._m0[_1658].w, fma(_1615, cbSceneParam._m0[_1658].z, fma(_1611, cbSceneParam._m0[_1658].y, _1607 * cbSceneParam._m0[_1658].x)));
        float _1697 = fma(_1619, cbSceneParam._m0[_1674].w, fma(_1615, cbSceneParam._m0[_1674].z, fma(_1611, cbSceneParam._m0[_1674].y, _1607 * cbSceneParam._m0[_1674].x)));
        float _1702 = cbSceneParam._m0[33u].z * _1697;
        float _1704 = cbSceneParam._m0[33u].w * _1697;
        float _1707 = fma(_1619, cbSceneParam._m0[_1666].w, fma(_1615, cbSceneParam._m0[_1666].z, fma(_1611, cbSceneParam._m0[_1666].y, _1607 * cbSceneParam._m0[_1666].x))) / _1697;
        float _1755 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
        float _3980 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1762 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1685) / _1697, (_1704 + _1689) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1685) / _1697, (_1689 - _1702) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1702) / _1697, (_1689 - _1704) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1704) / _1697, (_1702 + _1689) / _1697), _1707), 0.0)).x), vec4(0.25)));
        _1769 = 1.0 - (_1762 * cbSceneParam._m0[34u].x);
        _1770 = 1.0 - (_1762 * cbSceneParam._m0[34u].y);
        _1771 = 1.0 - (_1762 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1769 = 1.0;
        _1770 = 1.0;
        _1771 = 1.0;
    }
    float _1835;
    float _1837;
    float _1839;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1823 = fma(_1619, cbSceneParam._m0[63u].w, fma(_1615, cbSceneParam._m0[63u].z, fma(_1611, cbSceneParam._m0[63u].y, _1607 * cbSceneParam._m0[63u].x)));
        float _1824 = fma(_1619, cbSceneParam._m0[60u].w, fma(_1615, cbSceneParam._m0[60u].z, fma(_1611, cbSceneParam._m0[60u].y, _1607 * cbSceneParam._m0[60u].x))) / _1823;
        float _1825 = fma(_1619, cbSceneParam._m0[61u].w, fma(_1615, cbSceneParam._m0[61u].z, fma(_1611, cbSceneParam._m0[61u].y, _1607 * cbSceneParam._m0[61u].x))) / _1823;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1824 >= cbSceneParam._m0[64u].x) && (_1825 >= cbSceneParam._m0[64u].y)) && (_1824 <= cbSceneParam._m0[64u].z)) && (_1825 <= cbSceneParam._m0[64u].w))
        {
            float _1963 = fma(_1619, cbSceneParam._m0[62u].w, fma(_1615, cbSceneParam._m0[62u].z, fma(_1611, cbSceneParam._m0[62u].y, _1607 * cbSceneParam._m0[62u].x))) / _1823;
            float _1967 = isnan(cbSceneParam._m0[41u].w) ? _1963 : (isnan(_1963) ? cbSceneParam._m0[41u].w : max(_1963, cbSceneParam._m0[41u].w));
            float _2010 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
            float _3996 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
            float _2017 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1824, cbSceneParam._m0[33u].w + _1825), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1824, _1825 - cbSceneParam._m0[33u].z), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].z, _1825 - cbSceneParam._m0[33u].w), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1825), _1967), 0.0)).x), vec4(0.25)));
            float _2021 = 1.0 - (_2017 * cbSceneParam._m0[34u].x);
            float _2022 = 1.0 - (_2017 * cbSceneParam._m0[34u].y);
            float _2023 = 1.0 - (_2017 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2023) ? _1771 : (isnan(_1771) ? _2023 : min(_1771, _2023));
            frontier_phi_34_33_ladder_1 = isnan(_2022) ? _1770 : (isnan(_1770) ? _2022 : min(_1770, _2022));
            frontier_phi_34_33_ladder_2 = isnan(_2021) ? _1769 : (isnan(_1769) ? _2021 : min(_1769, _2021));
        }
        else
        {
            frontier_phi_34_33_ladder = _1771;
            frontier_phi_34_33_ladder_1 = _1770;
            frontier_phi_34_33_ladder_2 = _1769;
        }
        _1835 = frontier_phi_34_33_ladder_2;
        _1837 = frontier_phi_34_33_ladder_1;
        _1839 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1835 = _1769;
        _1837 = _1770;
        _1839 = _1771;
    }
    uvec4 _1844 = floatBitsToUint(cbInstanceData._m0[_518 + 5u]);
    uint _1846 = _1844.x * 14u;
    uint _1847 = _1846 + 13u;
    float _1854 = _543 + (-1.0);
    float _1859 = (cbLight._m0[_1847].x * _1854) + 1.0;
    float _1860 = (cbLight._m0[_1847].y * _1854) + 1.0;
    float _1861 = (cbLight._m0[_1847].z * _1854) + 1.0;
    float _1862 = (cbLight._m0[_1847].w * _1854) + 1.0;
    uint _1863 = _1846 + 5u;
    float _1869 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1873 = _1846 + 4u;
    float _1882 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1886 = _1846 | 1u;
    float _1897 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_390, _391, _392));
    float _1900 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_390, _391, _392));
    float _4032 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _4043 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1905 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1907 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1914 = ((cbLight._m0[_1863].x * _1869) * _1907) + (((cbLight._m0[_1873].x * _1835) * _1882) * _1905);
    float _1915 = ((_1869 * cbLight._m0[_1863].y) * _1907) + (((cbLight._m0[_1873].y * _1837) * _1882) * _1905);
    float _1916 = ((_1869 * cbLight._m0[_1863].z) * _1907) + (((cbLight._m0[_1873].z * _1839) * _1882) * _1905);
    uvec4 _1920 = floatBitsToUint(cbLight._m0[_1846 + 12u]);
    bool _1922 = _1920.x == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_1922)
    {
        _2024 = _1914;
        _2026 = _1915;
        _2028 = _1916;
    }
    else
    {
        uint _2032 = _1846 + 6u;
        float _2048 = (dot(vec3(cbLight._m0[_1846 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4054 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2051 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2024 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1914;
        _2026 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1915;
        _2028 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1916;
    }
    bool _2031 = _1920.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2031)
    {
        _2086 = _2024;
        _2088 = _2026;
        _2090 = _2028;
    }
    else
    {
        uint _2248 = _1846 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1846 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4070 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2267 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2086 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2024;
        _2088 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2026;
        _2090 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2028;
    }
    uint _2093 = _1846 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _393) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1846].x + _470;
    float _2109 = cbLight._m0[_1846].y + _471;
    float _2110 = cbLight._m0[_1846].z + _472;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1846].xyz));
    float _4086 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2122 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2123 = dot(vec3(_390, _391, _392), vec3(_2115, _2116, _2117));
    float _4108 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2115, _2116, _2117));
    float _4119 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2122 * ((_2121 * _2147) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2147) + _2107) * _2121))) * _2121;
    float _4130 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2174 = _1846 + 9u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _393) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_1886].x + _470;
    float _2188 = cbLight._m0[_1886].y + _471;
    float _2189 = cbLight._m0[_1886].z + _472;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1886].xyz));
    float _4141 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2201 = dot(vec3(_390, _391, _392), vec3(_2194, _2195, _2196));
    float _4152 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2194, _2195, _2196));
    float _4163 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2186 * _2186;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2223 = 1.0 - _2186;
    float _2233 = (0.5 / (((_2122 * ((_2200 * _2223) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2223) + _2186) * _2200))) * _2200;
    float _4174 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    float _2245 = (((_2222 * cbLight._m0[_2174].x) * _2235) * _1869) + ((((cbLight._m0[_2093].x * _1835) * _2146) * _2160) * _1882);
    float _2246 = (((_2222 * cbLight._m0[_2174].y) * _2235) * _1869) + ((((cbLight._m0[_2093].y * _1837) * _2146) * _2160) * _1882);
    float _2247 = (((_2222 * cbLight._m0[_2174].z) * _2235) * _1869) + ((((cbLight._m0[_2093].z * _1839) * _2146) * _2160) * _1882);
    float _2303;
    float _2305;
    float _2307;
    if (_1922)
    {
        _2303 = _2245;
        _2305 = _2246;
        _2307 = _2247;
    }
    else
    {
        uint _2309 = _1846 + 2u;
        uint _2313 = _1846 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _393) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _470;
        float _2330 = cbLight._m0[_2309].y + _471;
        float _2331 = cbLight._m0[_2309].z + _472;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2309].xyz));
        float _4185 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2343 = dot(vec3(_390, _391, _392), vec3(_2336, _2337, _2338));
        float _4196 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4207 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2365 = 1.0 - _2328;
        float _2375 = (0.5 / (((_2122 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2365) + _2328) * _2342))) * _2342;
        float _4218 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2303 = (((_2364 * cbLight._m0[_2313].x) * _2377) * _2378) + _2245;
        _2305 = (((_2364 * cbLight._m0[_2313].y) * _2377) * _2378) + _2246;
        _2307 = (((_2364 * cbLight._m0[_2313].z) * _2377) * _2378) + _2247;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2031)
    {
        _2409 = _2303;
        _2411 = _2305;
        _2413 = _2307;
    }
    else
    {
        uint _2420 = _1846 + 3u;
        uint _2424 = _1846 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _393) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _470;
        float _2441 = cbLight._m0[_2420].y + _471;
        float _2442 = cbLight._m0[_2420].z + _472;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2420].xyz));
        float _4234 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2454 = dot(vec3(_390, _391, _392), vec3(_2447, _2448, _2449));
        float _4245 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4256 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2476 = 1.0 - _2439;
        float _2486 = (0.5 / (((_2122 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2476) + _2439) * _2453))) * _2453;
        float _4267 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2409 = (((_2475 * cbLight._m0[_2424].x) * _2488) * _2489) + _2303;
        _2411 = (((_2475 * cbLight._m0[_2424].y) * _2488) * _2489) + _2305;
        _2413 = (((_2475 * cbLight._m0[_2424].z) * _2488) * _2489) + _2307;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1844.y == 0u)
    {
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.x;
        uint _2522 = uint((float(_2510.y) * floor(float(uint(cbSceneParam._m0[85u].y * _479) / _2511))) + floor(float(uint(cbSceneParam._m0[85u].x * _478) / _2511)));
        float _2532 = (log2(_1622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2533 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        uint _2536 = uint(isnan(14.0) ? _2533 : (isnan(_2533) ? 14.0 : min(_2533, 14.0)));
        uvec4 _2541 = texelFetch(g_lightClusterGridBuffer, int(((_2536 << 2u) + (_2522 << 6u)) >> 2u));
        uint _2542 = _2541.x;
        uint _2543 = _2510.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2543 >> 4u) & 15u)) + 4294967295u) & _2542) == 0u) || ((_2543 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            uint _2773 = 0u;
            uint _2782;
            bool _2783;
            for (;;)
            {
                _2782 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                _2783 = _2782 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2783)
                {
                    frontier_phi_66_pred = _2772;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2782;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2773 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _1620;
                        float _2958 = _2917.y - _1621;
                        float _2959 = _2917.z - _1622;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_499, _502, _505), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4293 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _1620;
                        float _2993 = (-0.0) - _1621;
                        float _2994 = (-0.0) - _1622;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3008 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _559;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2999 + _2964;
                        float _3020 = _3000 + _2965;
                        float _3021 = _3001 + _2966;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_499, _502, _505), vec3(_2999, _3000, _3001));
                        float _4309 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3033 = dot(vec3(_499, _502, _505), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4320 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2977 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2967) + _3042;
                        float _4331 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4342 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3040 * _3040) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2826 = (_2988 * _2936.x) + _2894;
                        _2827 = (_2988 * _2936.y) + _2895;
                        _2828 = (_2988 * _2936.z) + _2896;
                        _2823 = (_3068 * _2953.x) + _2891;
                        _2824 = (_3068 * _2953.y) + _2892;
                        _2825 = (_3068 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_66_pred = _2828;
                    frontier_phi_66_pred_1 = _2827;
                    frontier_phi_66_pred_2 = _2826;
                    frontier_phi_66_pred_3 = _2825;
                    frontier_phi_66_pred_4 = _2824;
                    frontier_phi_66_pred_5 = _2823;
                }
                _2633 = frontier_phi_66_pred;
                _2631 = frontier_phi_66_pred_1;
                _2629 = frontier_phi_66_pred_2;
                _2627 = frontier_phi_66_pred_3;
                _2625 = frontier_phi_66_pred_4;
                _2623 = frontier_phi_66_pred_5;
                uint _2774 = _2773 + 1u;
                if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2767 = _2623;
                    _2768 = _2625;
                    _2769 = _2627;
                    _2770 = _2629;
                    _2771 = _2631;
                    _2772 = _2633;
                    _2773 = _2774;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((4294967295u << _2639) & _2542) == 0u)
        {
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
        }
        else
        {
            float _2760 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
            float _2761 = _2760 * _1620;
            float _2762 = _2760 * _1621;
            float _2763 = _2760 * _1622;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2874 = _2622;
                float _2875 = _2624;
                float _2876 = _2626;
                float _2877 = _2628;
                float _2878 = _2630;
                float _2879 = _2632;
                uint _2880 = _2639;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2890)
                    {
                        frontier_phi_72_pred = _2879;
                        frontier_phi_72_pred_1 = _2878;
                        frontier_phi_72_pred_2 = _2877;
                        frontier_phi_72_pred_3 = _2876;
                        frontier_phi_72_pred_4 = _2875;
                        frontier_phi_72_pred_5 = _2874;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3086 = _2874;
                        float _3087 = _2875;
                        float _3088 = _2876;
                        float _3089 = _2877;
                        float _3090 = _2878;
                        float _3091 = _2879;
                        uint _3092 = _2889;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3162;
                        vec4 _3178;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3103 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3149 = (_3103 * 40u) + 16u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3103 * 40u) + 20u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3181 = (_3103 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3103 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_1622, _3213.z, fma(_1621, _3213.y, _3213.x * _1620)) + _3213.w;
                            _3226 = !((fma(_1622, _3194.z, fma(_1621, _3194.y, _3194.x * _1620)) + _3194.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3118.x - _1620;
                                float _3254 = _3118.y - _1621;
                                float _3255 = _3118.z - _1622;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3119 * _3119));
                                float _4353 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3271 = sqrt(_3256) * _3134.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_499, _502, _505))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_1622, _3162.z, fma(_1621, _3162.y, _3162.x * _1620)) + _3162.w) / _3225;
                                float _3285 = (fma(_1622, _3178.z, fma(_1621, _3178.y, _3178.x * _1620)) + _3178.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4369 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _559;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2761;
                                float _3315 = _3261 - _2762;
                                float _3316 = _3262 - _2763;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_499, _502, _505), vec3((-0.0) - _2761, (-0.0) - _2762, (-0.0) - _2763));
                                float _4380 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3328 = dot(vec3(_499, _502, _505), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4391 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_499, _502, _505), vec3(_3260, _3261, _3262))) + _3337;
                                float _4402 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4413 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3291 * _3134.y;
                                frontier_phi_78_pred_1 = _3291 * _3134.x;
                                frontier_phi_78_pred_2 = _3365 * _3146.z;
                                frontier_phi_78_pred_3 = _3365 * _3146.y;
                                frontier_phi_78_pred_4 = _3365 * _3146.x;
                                frontier_phi_78_pred_5 = _3291 * _3134.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_78_pred;
                            _3372 = frontier_phi_78_pred_1;
                            _3371 = frontier_phi_78_pred_2;
                            _3370 = frontier_phi_78_pred_3;
                            _3369 = frontier_phi_78_pred_4;
                            _3374 = frontier_phi_78_pred_5;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            _3073 = _3369 + _3086;
                            _3074 = _3370 + _3087;
                            _3075 = _3371 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3078;
                        frontier_phi_72_pred_1 = _3077;
                        frontier_phi_72_pred_2 = _3076;
                        frontier_phi_72_pred_3 = _3075;
                        frontier_phi_72_pred_4 = _3074;
                        frontier_phi_72_pred_5 = _3073;
                    }
                    _2746 = frontier_phi_72_pred;
                    _2744 = frontier_phi_72_pred_1;
                    _2742 = frontier_phi_72_pred_2;
                    _2740 = frontier_phi_72_pred_3;
                    _2738 = frontier_phi_72_pred_4;
                    _2736 = frontier_phi_72_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2736;
                        _2875 = _2738;
                        _2876 = _2740;
                        _2877 = _2742;
                        _2878 = _2744;
                        _2879 = _2746;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2746;
                frontier_phi_60_61_ladder_1 = _2744;
                frontier_phi_60_61_ladder_2 = _2740;
                frontier_phi_60_61_ladder_3 = _2738;
                frontier_phi_60_61_ladder_4 = _2736;
                frontier_phi_60_61_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_60_61_ladder = _2632;
                frontier_phi_60_61_ladder_1 = _2630;
                frontier_phi_60_61_ladder_2 = _2626;
                frontier_phi_60_61_ladder_3 = _2624;
                frontier_phi_60_61_ladder_4 = _2622;
                frontier_phi_60_61_ladder_5 = _2628;
            }
            _2735 = frontier_phi_60_61_ladder_4;
            _2737 = frontier_phi_60_61_ladder_3;
            _2739 = frontier_phi_60_61_ladder_2;
            _2741 = frontier_phi_60_61_ladder_5;
            _2743 = frontier_phi_60_61_ladder_1;
            _2745 = frontier_phi_60_61_ladder;
        }
        float _2750 = isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0));
        _2555 = (_2750 * _2741) + _2086;
        _2557 = (_2750 * _2743) + _2088;
        _2559 = (_2750 * _2745) + _2090;
        _2561 = ((_2735 * 0.039999999105930328369140625) * _2750) + _2409;
        _2563 = ((_2737 * 0.039999999105930328369140625) * _2750) + _2411;
        _2565 = ((_2739 * 0.039999999105930328369140625) * _2750) + _2413;
    }
    else
    {
        _2555 = _2086;
        _2557 = _2088;
        _2559 = _2090;
        _2561 = _2409;
        _2563 = _2411;
        _2565 = _2413;
    }
    float _4429 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4440 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4451 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    uint _2585 = _518 + 6u;
    float _2593 = _478 / cbSceneParam._m0[86u].x;
    float _2594 = _479 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2648 = _2647 / _412;
        float _2659 = _2648 * _463;
        float _2660 = _464 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2663 = _2648 * _465;
        float _2665 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2660;
        float _2673 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2661 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2796 = 1.0 / cbSceneParam._m0[80u].x;
            float _2797 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2798 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            _2836 = ((abs(_2673 / _2661) * cbSceneParam._m0[80u].y) * ((((_2807 - _2808) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))))) * _2796)) - ((exp2(_2683 * _2807) - exp2(_2683 * _2808)) * _2796))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2613);
        _2685 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2687 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2689 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2691 = _2847 * _2613;
    }
    else
    {
        _2685 = _2610;
        _2687 = _2611;
        _2689 = _2612;
        _2691 = _2613;
    }
    float _2703 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2704 = _2703 == 3.0;
    float _2705 = log2(_2691);
    float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2555 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _543))) + ((_2561 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1350)) * cbPerFrame._m0[3u].x));
    float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2557 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _543))) + ((_2563 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1350)) * cbPerFrame._m0[3u].x));
    float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2559 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _543))) + ((_2565 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1350)) * cbPerFrame._m0[3u].x));
    float _2723 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2723 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.y = _2723 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.z = _2723 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


