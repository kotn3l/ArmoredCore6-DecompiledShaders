#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_24;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 6) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 8) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_22;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1580;
float _4279;
float _4280;
float _4281;
float _4282;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[8u].w));
    vec4 _343 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _372 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w));
    float _395 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625;
    float _403 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * _395)) * (cbMtdParam._m0[17u].w + 1.0);
    float _4291 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _411 = (_404 * ((_372.x * cbMtdParam._m0[11u].x) - _286)) + _286;
    float _412 = (_404 * ((_372.y * cbMtdParam._m0[11u].y) - _287)) + _287;
    float _413 = (_404 * ((_372.z * cbMtdParam._m0[11u].z) - _288)) + _288;
    float _419 = (TEXCOORD_9.x - ((cbMtdParam._m0[19u].y * (1.0 - TEXCOORD_9.x)) * _395)) * (cbMtdParam._m0[19u].x + 1.0);
    float _4302 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _427 = (((_343.x * cbMtdParam._m0[14u].x) - _411) * _420) + _411;
    float _428 = (((_343.y * cbMtdParam._m0[14u].y) - _412) * _420) + _412;
    float _429 = (((_343.z * cbMtdParam._m0[14u].z) - _413) * _420) + _413;
    float _445 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    float _450 = 1.0 - _445;
    float _453 = cbMtdParam._m0[20u].x + 1.0;
    float _454 = (_445 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * _450)) * _453;
    float _4313 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _462 = (_455 * ((_315.x * cbMtdParam._m0[15u].x) - _427)) + _427;
    float _463 = (_455 * ((_315.y * cbMtdParam._m0[15u].y) - _428)) + _428;
    float _464 = (_455 * ((_315.z * cbMtdParam._m0[15u].z) - _429)) + _429;
    vec4 _477 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _479 = _477.x;
    float _497 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _479) * _404) + _479;
    float _499 = _497 - (_497 * _420);
    float _503 = (_445 - ((_395 * cbMtdParam._m0[19u].w) * _450)) * _453;
    float _4324 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = _499 - (_499 * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))));
    vec4 _522 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _544 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _560 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _562 = _560.x;
    float _563 = _560.y;
    float _564 = _560.z;
    float _573 = ((_544.z - _564) * _404) + _564;
    float _576 = ((((_544.x - _562) * _404) + _562) * 2.0) + (-1.0);
    float _577 = ((((_544.y - _563) * _404) + _563) * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _4335 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))));
    float _588 = (((_522.z - _573) * TEXCOORD_9.x) * cbMtdParam._m0[19u].z) + _573;
    vec4 _601 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[10u].w));
    float _618 = (((((((_601.z - _588) * TEXCOORD_15) * cbMtdParam._m0[21u].y) + _588) * cbMtdParam._m0[21u].z) - _588) * _455) + _588;
    float _634 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _637 = (_634 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _638 = (_634 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _663 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _667 = cbPerFrame._m0[22u].x * 2.0;
    float _668 = _667 * cbMtdParam._m0[22u].y;
    float _675 = ((_663.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _677 = (-0.0) - (cbMtdParam._m0[22u].x * ((_663.x * 0.5) + (-0.25)));
    float _679 = fract(_668);
    float _681 = fract(_668 + 0.5);
    float _692 = abs((_679 * 2.0) + (-1.0));
    vec4 _709 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_679 * _677) + _637) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_675 * _679) + _638) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _711 = _709.x;
    float _712 = _709.y;
    float _713 = _709.z;
    vec4 _714 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_681 * _677) + _637) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_675 * _681) + _638) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _756 = (cbMtdParam._m0[23u].y * _634) + TEXCOORD_6.w;
    float _757 = (cbMtdParam._m0[23u].z * _634) + TEXCOORD_9.w;
    vec4 _770 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _774 = _667 * cbMtdParam._m0[18u].x;
    float _779 = ((_770.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _781 = (-0.0) - (cbMtdParam._m0[20u].z * ((_770.x * 0.5) + (-0.25)));
    float _782 = fract(_774);
    float _784 = fract(_774 + 0.5);
    float _785 = _782 * _781;
    float _786 = _779 * _782;
    float _789 = _784 * _781;
    float _790 = _779 * _784;
    float _795 = abs((_782 * 2.0) + (-1.0));
    vec4 _811 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_785 + _756) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_786 + _757) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _813 = _811.x;
    float _814 = _811.y;
    float _815 = _811.z;
    vec4 _816 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_789 + _756) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_790 + _757) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _846 = (cbMtdParam._m0[22u].w * _634) + TEXCOORD_6.w;
    float _847 = (cbMtdParam._m0[23u].x * _634) + TEXCOORD_9.w;
    vec4 _867 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_785 + _846) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_786 + _847) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _869 = _867.x;
    float _870 = _867.y;
    float _871 = _867.z;
    vec4 _872 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_789 + _846) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_790 + _847) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _892 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4346 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _893 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _903 = (((_893 * _893) * (3.0 - (_893 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _936 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _846) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _847) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4357 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _937 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _941 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_872.x - _869) * _795) + _869)) * _903) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_816.x - _813) * _795) + _813)))) * _937;
    float _945 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_872.y - _870) * _795) + _870)) * _903) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_816.y - _814) * _795) + _814)))) * _937;
    float _949 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_872.z - _871) * _795) + _871)) * _903) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_816.z - _815) * _795) + _815)))) * _937;
    float _953 = _941 - (_941 * _445);
    float _954 = _945 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _945);
    float _955 = _949 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _949);
    float _984 = ((((((_522.x * 2.0) + (-1.0)) * TEXCOORD_9.x) * cbMtdParam._m0[18u].z) + _576) + (cbMtdParam._m0[20u].y * _576)) + (((((_601.x * 2.0) + (-1.0)) * TEXCOORD_15) * cbMtdParam._m0[21u].x) * _455);
    float _987 = ((((((_522.y * 2.0) + (-1.0)) * TEXCOORD_9.y) * cbMtdParam._m0[18u].z) + _577) + (cbMtdParam._m0[20u].y * _577)) + (((((_601.y * 2.0) + (-1.0)) * TEXCOORD_16) * cbMtdParam._m0[21u].x) * _455);
    float _990 = fma(_583, _251 * NORMAL.x, fma(_987, _258 * TANGENT.x, (_244 * _236) * _984));
    float _993 = fma(_583, _251 * NORMAL.y, fma(_987, _258 * TANGENT.y, (_244 * _237) * _984));
    float _996 = fma(_583, _251 * NORMAL.z, fma(_987, _258 * TANGENT.z, (_244 * _238) * _984));
    float _1000 = inversesqrt(dot(vec3(_990, _993, _996), vec3(_990, _993, _996)));
    float _1001 = _1000 * _990;
    float _1002 = _1000 * _993;
    float _1003 = _1000 * _996;
    float _4368 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1004 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4390 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4401 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4412 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _1008 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _1024 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1074 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1064);
    float _1075 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1064);
    float _1076 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1064);
    float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
    float _1081 = _1074 * _1080;
    float _1082 = _1075 * _1080;
    float _1083 = _1076 * _1080;
    vec4 _1088 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1090 = _1088.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1261 = sqrt(((_1074 * _1074) + (_1075 * _1075)) + (_1076 * _1076));
        float _1267 = (cbMatDynParam._m0[5u].x * _1261) + cbMatDynParam._m0[5u].y;
        float _4423 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1272 = (cbMatDynParam._m0[5u].z * _1261) + cbMatDynParam._m0[5u].w;
        float _4434 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) - _1268)) + _1268) < ((_1090 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1101 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1102 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1120 = fma(_1003, cbSceneParam._m0[5u].z, fma(_1002, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1001));
    float _1123 = fma(_1003, cbSceneParam._m0[6u].z, fma(_1002, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1001));
    float _1126 = fma(_1003, cbSceneParam._m0[7u].z, fma(_1002, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1001));
    uint _1139 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1140 = _1139 + 9u;
    uint _1141 = _1140 + uint(cbMatDynParam._m0[0u].w);
    float _1147 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * cbInstanceData._m0[_1141].x;
    float _1148 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * cbInstanceData._m0[_1141].y;
    float _1149 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * cbInstanceData._m0[_1141].z;
    float _4445 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _4456 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1151 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1152 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _1153 = 1.0 - _1008;
    float _1154 = _1150 * _1153;
    float _1155 = _1151 * _1153;
    float _1156 = _1152 * _1153;
    float _1161 = (_1150 + (-0.039999999105930328369140625)) * _1008;
    float _1162 = (_1151 + (-0.039999999105930328369140625)) * _1008;
    float _1163 = (_1152 + (-0.039999999105930328369140625)) * _1008;
    float _1164 = _1161 + 0.039999999105930328369140625;
    float _1166 = _1162 + 0.039999999105930328369140625;
    float _1167 = _1163 + 0.039999999105930328369140625;
    vec4 _1176 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1101, cbSceneParam._m0[86u].y * _1102));
    float _1179 = _1176.x * TEXCOORD_3.w;
    float _1180 = dot(vec3(_1001, _1002, _1003), vec3(_1081, _1082, _1083));
    float _1183 = _1180 * 2.0;
    float _1187 = (_1183 * _1001) - _1081;
    float _1188 = (_1183 * _1002) - _1082;
    float _1189 = (_1183 * _1003) - _1083;
    float _1193 = abs(dot(vec3(_1081, _1082, _1083), vec3(_1001, _1002, _1003)));
    float _4478 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1195 = sqrt(_1004);
    float _1207 = exp2((_1195 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1195 * 3.0));
    float _1213 = (1.0 - _1207) * ((_1195 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1214 = _1207 * _1195;
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1579;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1305 = fma(_1250, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242));
        float _1309 = fma(_1250, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242));
        float _1313 = fma(_1250, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242));
        float _1337 = _1242 + _1001;
        float _1338 = _1246 + _1002;
        float _1339 = _1250 + _1003;
        float _1349 = fma(_1339, cbModelParam._m0[26u].z, fma(_1338, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1337)) - _1305;
        float _1350 = fma(_1339, cbModelParam._m0[27u].z, fma(_1338, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1337)) - _1309;
        float _1351 = fma(_1339, cbModelParam._m0[28u].z, fma(_1338, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1337)) - _1313;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1305 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1309 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[34u].z) + ((((((_1313 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1407 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1373.x + (-0.5));
        float _1409 = _1407 * (_1373.y + (-0.5));
        float _1410 = _1407 * (_1373.z + (-0.5));
        float _1417 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1380.x + (-0.5));
        float _1419 = _1417 * (_1380.y + (-0.5));
        float _1420 = _1417 * (_1380.z + (-0.5));
        float _1427 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1387.x + (-0.5));
        float _1429 = _1427 * (_1387.y + (-0.5));
        float _1430 = _1427 * (_1387.z + (-0.5));
        float _1437 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1394.x + (-0.5));
        float _1439 = _1437 * (_1394.y + (-0.5));
        float _1440 = _1437 * (_1394.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1461 = (dot(vec3(_1001, _1002, _1003), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1471 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4526 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1473 + 1.0))) + _1478) * _1441;
        float _1488 = _1409 * 0.5;
        float _1489 = _1419 * 0.5;
        float _1490 = _1429 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_1001, _1002, _1003), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4537 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4548 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4559 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_1515 + 1.0))) + _1520) * _1442;
        float _1530 = _1410 * 0.5;
        float _1531 = _1420 * 0.5;
        float _1532 = _1430 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_1001, _1002, _1003), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4570 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4581 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4592 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_1557 + 1.0))) + _1562) * _1443;
        _1579 = _1410;
        _1581 = _1409;
        _1582 = _1408;
        _1583 = _1420;
        _1584 = _1419;
        _1585 = _1418;
        _1586 = _1430;
        _1587 = _1429;
        _1588 = _1428;
        _1589 = _1443;
        _1590 = _1442;
        _1591 = _1441;
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1580;
        _1581 = _1580;
        _1582 = _1580;
        _1583 = _1580;
        _1584 = _1580;
        _1585 = _1580;
        _1586 = _1580;
        _1587 = _1580;
        _1588 = _1580;
        _1589 = _1580;
        _1590 = _1580;
        _1591 = _1580;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1623 = fma(_1250, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242));
        float _1627 = fma(_1250, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242));
        float _1631 = fma(_1250, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242));
        float _1654 = _1242 + _1001;
        float _1655 = _1246 + _1002;
        float _1656 = _1250 + _1003;
        float _1666 = fma(_1656, cbModelParam._m0[30u].z, fma(_1655, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1654)) - _1623;
        float _1667 = fma(_1656, cbModelParam._m0[31u].z, fma(_1655, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1654)) - _1627;
        float _1668 = fma(_1656, cbModelParam._m0[32u].z, fma(_1655, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1654)) - _1631;
        float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
        float _1685 = ((_1672 * _1666) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1623 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1686 = ((_1672 * _1667) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1627 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1687 = ((_1672 * _1668) / cbModelParam._m0[35u].z) + ((((((_1631 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        float _1722 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1723 = _1722 * (_1689.x + (-0.5));
        float _1724 = _1722 * (_1689.y + (-0.5));
        float _1725 = _1722 * (_1689.z + (-0.5));
        float _1732 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1733 = _1732 * (_1696.x + (-0.5));
        float _1734 = _1732 * (_1696.y + (-0.5));
        float _1735 = _1732 * (_1696.z + (-0.5));
        float _1742 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1703.x + (-0.5));
        float _1744 = _1742 * (_1703.y + (-0.5));
        float _1745 = _1742 * (_1703.z + (-0.5));
        float _1752 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1710.x + (-0.5));
        float _1754 = _1752 * (_1710.y + (-0.5));
        float _1755 = _1752 * (_1710.z + (-0.5));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1759 = _1723 * 0.5;
        float _1760 = _1733 * 0.5;
        float _1761 = _1743 * 0.5;
        float _1762 = dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761));
        float _1767 = (_1762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1762);
        float _1775 = (dot(vec3(_1001, _1002, _1003), vec3(_1767 * _1759, _1767 * _1760, _1767 * _1761)) + 1.0) * 0.5;
        float _4633 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1784 = sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4644 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1786 = _1785 * 2.0;
        float _1790 = (1.0 - _1785) / (_1785 + 1.0);
        float _4655 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1800 = ((((1.0 - _1791) * (_1786 + 2.0)) * exp2(log2(isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_1786 + 1.0))) + _1791) * _1756;
        float _1801 = _1724 * 0.5;
        float _1802 = _1734 * 0.5;
        float _1803 = _1744 * 0.5;
        float _1804 = dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803));
        float _1809 = (_1804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1804);
        float _1817 = (dot(vec3(_1001, _1002, _1003), vec3(_1809 * _1801, _1809 * _1802, _1809 * _1803)) + 1.0) * 0.5;
        float _4666 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1826 = sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4677 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _1828 = _1827 * 2.0;
        float _1832 = (1.0 - _1827) / (_1827 + 1.0);
        float _4688 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _1842 = ((((1.0 - _1833) * (_1828 + 2.0)) * exp2(log2(isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_1828 + 1.0))) + _1833) * _1757;
        float _1843 = _1725 * 0.5;
        float _1844 = _1735 * 0.5;
        float _1845 = _1745 * 0.5;
        float _1846 = dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845));
        float _1851 = (_1846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1846);
        float _1859 = (dot(vec3(_1001, _1002, _1003), vec3(_1851 * _1843, _1851 * _1844, _1851 * _1845)) + 1.0) * 0.5;
        float _4699 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1868 = sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845)) / (_1758 + 9.9999997473787516355514526367188e-06);
        float _4710 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _1870 = _1869 * 2.0;
        float _1874 = (1.0 - _1869) / (_1869 + 1.0);
        float _4721 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _1884 = ((((1.0 - _1875) * (_1870 + 2.0)) * exp2(log2(isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_1870 + 1.0))) + _1875) * _1758;
        _1892 = _1725;
        _1893 = _1724;
        _1894 = _1723;
        _1895 = _1735;
        _1896 = _1734;
        _1897 = _1733;
        _1898 = _1745;
        _1899 = _1744;
        _1900 = _1743;
        _1901 = _1758;
        _1902 = _1757;
        _1903 = _1756;
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)));
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)));
        _1906 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)));
    }
    else
    {
        _1892 = _1580;
        _1893 = _1580;
        _1894 = _1580;
        _1895 = _1580;
        _1896 = _1580;
        _1897 = _1580;
        _1898 = _1580;
        _1899 = _1580;
        _1900 = _1580;
        _1901 = _1580;
        _1902 = _1580;
        _1903 = _1580;
        _1904 = 0.0;
        _1905 = 0.0;
        _1906 = 0.0;
    }
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1592)) + _1592;
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1593)) + _1593;
    float _1918 = (cbModelParam._m0[1u].x * (_1906 - _1594)) + _1594;
    float _1939 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1942 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1945 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1916));
    float _1960 = _1187 * 0.5;
    float _1961 = _1188 * 0.5;
    float _1962 = _1189 * 0.5;
    float _1963 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1894, _1897, _1900, _1903));
    float _1966 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _1969 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _2003;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1976 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1579, _1583, _1586, _1589));
        float _1980 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1581, _1584, _1587, _1590));
        float _1984 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1582, _1585, _1588, _1591));
        float _1991 = dot(vec4(cbModelParam._m0[39u]), vec4(_1960, _1961, _1962, 1.0));
        _2003 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1991) ? 0.0 : (isnan(0.0) ? _1991 : max(0.0, _1991))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2003 = 1.0;
    }
    float _2014;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2005 = dot(vec4(cbModelParam._m0[40u]), vec4(_1960, _1961, _1962, 1.0));
        _2014 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2005) ? 0.0 : (isnan(0.0) ? _2005 : max(0.0, _2005))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2014 = 1.0;
    }
    float _2018 = (_2014 * cbModelParam._m0[1u].x) + (_2003 * (1.0 - cbModelParam._m0[1u].x));
    float _2028 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1004);
    float _2029 = isnan(_2028) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2028 : min(cbModelParam._m0[25u].z, _2028));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2076 = fma(_1250, cbModelParam._m0[13u].z, fma(_1246, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1242)) + cbModelParam._m0[13u].w;
        float _2080 = fma(_1250, cbModelParam._m0[14u].z, fma(_1246, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1242)) + cbModelParam._m0[14u].w;
        float _2084 = fma(_1250, cbModelParam._m0[15u].z, fma(_1246, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1242)) + cbModelParam._m0[15u].w;
        float _2087 = fma(_1189, cbModelParam._m0[13u].z, fma(_1188, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1187));
        float _2090 = fma(_1189, cbModelParam._m0[14u].z, fma(_1188, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1187));
        float _2093 = fma(_1189, cbModelParam._m0[15u].z, fma(_1188, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1187));
        float _2121;
        if (_2087 > 0.0)
        {
            _2121 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2121 = frontier_phi_17_15_ladder;
        }
        float _2292;
        if (_2090 > 0.0)
        {
            _2292 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2292 = frontier_phi_26_22_ladder;
        }
        float _2587;
        if (_2093 > 0.0)
        {
            _2587 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2587 = frontier_phi_38_33_ladder;
        }
        float _2589 = isnan(_2292) ? _2121 : (isnan(_2121) ? _2292 : min(_2121, _2292));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _2087) + _2076;
        float _2595 = (_2590 * _2090) + _2080;
        float _2596 = (_2590 * _2093) + _2084;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2597;
        float _2601 = _2597 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 > _2601) || ((_2595 < _2599) || ((_2594 < _2599) || (_2594 > _2601))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2596, cbModelParam._m0[9u].z, fma(_2595, cbModelParam._m0[9u].y, _2594 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2596, cbModelParam._m0[10u].z, fma(_2595, cbModelParam._m0[10u].y, _2594 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2596, cbModelParam._m0[11u].z, fma(_2595, cbModelParam._m0[11u].y, _2594 * cbModelParam._m0[11u].x))), _2029);
            frontier_phi_16_38_ladder = _2741.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2741.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2741.x * cbModelParam._m0[1u].y;
        }
        _2109 = frontier_phi_16_38_ladder_2;
        _2111 = frontier_phi_16_38_ladder_1;
        _2113 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1187, _1188, _1189), _2029);
        _2109 = _2097.x * cbModelParam._m0[1u].y;
        _2111 = _2097.y * cbModelParam._m0[1u].y;
        _2113 = _2097.z * cbModelParam._m0[1u].y;
    }
    float _2117 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1004);
    float _2118 = isnan(_2117) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2117 : min(cbModelParam._m0[25u].w, _2117));
    float _2207;
    float _2209;
    float _2211;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2171 = fma(_1250, cbModelParam._m0[21u].z, fma(_1246, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1242)) + cbModelParam._m0[21u].w;
        float _2175 = fma(_1250, cbModelParam._m0[22u].z, fma(_1246, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1242)) + cbModelParam._m0[22u].w;
        float _2179 = fma(_1250, cbModelParam._m0[23u].z, fma(_1246, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1242)) + cbModelParam._m0[23u].w;
        float _2182 = fma(_1189, cbModelParam._m0[21u].z, fma(_1188, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1187));
        float _2185 = fma(_1189, cbModelParam._m0[22u].z, fma(_1188, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1187));
        float _2188 = fma(_1189, cbModelParam._m0[23u].z, fma(_1188, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1187));
        float _2297;
        if (_2182 > 0.0)
        {
            _2297 = abs((1.0 - _2171) / _2182);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2171 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2297 = frontier_phi_28_24_ladder;
        }
        float _2614;
        if (_2185 > 0.0)
        {
            _2614 = abs((1.0 - _2175) / _2185);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2175 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2614 = frontier_phi_40_35_ladder;
        }
        float _2952;
        if (_2188 > 0.0)
        {
            _2952 = abs((1.0 - _2179) / _2188);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2188 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2179 + 1.0) / _2188);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2952 = frontier_phi_50_47_ladder;
        }
        float _2954 = isnan(_2614) ? _2297 : (isnan(_2297) ? _2614 : min(_2297, _2614));
        float _2955 = isnan(_2952) ? _2954 : (isnan(_2954) ? _2952 : min(_2954, _2952));
        float _2959 = (_2955 * _2182) + _2171;
        float _2960 = (_2955 * _2185) + _2175;
        float _2961 = (_2955 * _2188) + _2179;
        float _2962 = _2955 * 9.9999997473787516355514526367188e-05;
        float _2963 = (-1.0) - _2962;
        float _2965 = _2962 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2961 > _2965) || ((_2961 < _2963) || ((_2960 > _2965) || ((_2960 < _2963) || ((_2959 < _2963) || (_2959 > _2965))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2961, cbModelParam._m0[17u].z, fma(_2960, cbModelParam._m0[17u].y, _2959 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2961, cbModelParam._m0[18u].z, fma(_2960, cbModelParam._m0[18u].y, _2959 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2961, cbModelParam._m0[19u].z, fma(_2960, cbModelParam._m0[19u].y, _2959 * cbModelParam._m0[19u].x))), _2118);
            frontier_phi_25_50_ladder = _3083.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3083.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3083.x * cbModelParam._m0[1u].z;
        }
        _2207 = frontier_phi_25_50_ladder_2;
        _2209 = frontier_phi_25_50_ladder_1;
        _2211 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2191 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1187, _1188, _1189), _2118);
        _2207 = _2191.x * cbModelParam._m0[1u].z;
        _2209 = _2191.y * cbModelParam._m0[1u].z;
        _2211 = _2191.z * cbModelParam._m0[1u].z;
    }
    float _2224 = (((_1213 * _1164) + _1214) * _1179) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2226 = (((_1213 * _1166) + _1214) * _1179) * ((cbModelParam._m0[1u].w * (_2209 - _2111)) + _2111);
    float _2228 = (((_1213 * _1167) + _1214) * _1179) * ((cbModelParam._m0[1u].w * (_2211 - _2113)) + _2113);
    float _2231 = fma(_2228, cbSceneParam._m0[89u].z, fma(_2226, cbSceneParam._m0[89u].y, _2224 * cbSceneParam._m0[89u].x));
    float _2234 = fma(_2228, cbSceneParam._m0[90u].z, fma(_2226, cbSceneParam._m0[90u].y, _2224 * cbSceneParam._m0[90u].x));
    float _2237 = fma(_2228, cbSceneParam._m0[91u].z, fma(_2226, cbSceneParam._m0[91u].y, _2224 * cbSceneParam._m0[91u].x));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2275 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2283 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2284 = _2271 / _2283;
    float _2285 = _2275 / _2283;
    float _2286 = _2279 / _2283;
    float _2433;
    float _2434;
    float _2435;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2313 = ((uint(_2286 > cbSceneParam._m0[59u].y) + uint(_2286 > cbSceneParam._m0[59u].x)) + uint(_2286 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2314 = _2313 + 43u;
        uint _2322 = _2313 + 44u;
        uint _2330 = _2313 + 45u;
        uint _2338 = _2313 + 46u;
        float _2349 = fma(_2283, cbSceneParam._m0[_2314].w, fma(_2279, cbSceneParam._m0[_2314].z, fma(_2275, cbSceneParam._m0[_2314].y, _2271 * cbSceneParam._m0[_2314].x)));
        float _2353 = fma(_2283, cbSceneParam._m0[_2322].w, fma(_2279, cbSceneParam._m0[_2322].z, fma(_2275, cbSceneParam._m0[_2322].y, _2271 * cbSceneParam._m0[_2322].x)));
        float _2361 = fma(_2283, cbSceneParam._m0[_2338].w, fma(_2279, cbSceneParam._m0[_2338].z, fma(_2275, cbSceneParam._m0[_2338].y, _2271 * cbSceneParam._m0[_2338].x)));
        float _2366 = cbSceneParam._m0[33u].z * _2361;
        float _2368 = cbSceneParam._m0[33u].w * _2361;
        float _2371 = fma(_2283, cbSceneParam._m0[_2330].w, fma(_2279, cbSceneParam._m0[_2330].z, fma(_2275, cbSceneParam._m0[_2330].y, _2271 * cbSceneParam._m0[_2330].x))) / _2361;
        float _2419 = (cbSceneParam._m0[33u].x - sqrt(((_2285 * _2285) + (_2284 * _2284)) + (_2286 * _2286))) * cbSceneParam._m0[33u].y;
        float _4847 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2426 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2366 + _2349) / _2361, (_2368 + _2353) / _2361), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2368 + _2349) / _2361, (_2353 - _2366) / _2361), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2349 - _2366) / _2361, (_2353 - _2368) / _2361), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2349 - _2368) / _2361, (_2366 + _2353) / _2361), _2371), 0.0)).x), vec4(0.25)));
        _2433 = 1.0 - (_2426 * cbSceneParam._m0[34u].x);
        _2434 = 1.0 - (_2426 * cbSceneParam._m0[34u].y);
        _2435 = 1.0 - (_2426 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2433 = 1.0;
        _2434 = 1.0;
        _2435 = 1.0;
    }
    float _2499;
    float _2501;
    float _2503;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2487 = fma(_2283, cbSceneParam._m0[63u].w, fma(_2279, cbSceneParam._m0[63u].z, fma(_2275, cbSceneParam._m0[63u].y, _2271 * cbSceneParam._m0[63u].x)));
        float _2488 = fma(_2283, cbSceneParam._m0[60u].w, fma(_2279, cbSceneParam._m0[60u].z, fma(_2275, cbSceneParam._m0[60u].y, _2271 * cbSceneParam._m0[60u].x))) / _2487;
        float _2489 = fma(_2283, cbSceneParam._m0[61u].w, fma(_2279, cbSceneParam._m0[61u].z, fma(_2275, cbSceneParam._m0[61u].y, _2271 * cbSceneParam._m0[61u].x))) / _2487;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2488 >= cbSceneParam._m0[64u].x) && (_2489 >= cbSceneParam._m0[64u].y)) && (_2488 <= cbSceneParam._m0[64u].z)) && (_2489 <= cbSceneParam._m0[64u].w))
        {
            float _2627 = fma(_2283, cbSceneParam._m0[62u].w, fma(_2279, cbSceneParam._m0[62u].z, fma(_2275, cbSceneParam._m0[62u].y, _2271 * cbSceneParam._m0[62u].x))) / _2487;
            float _2631 = isnan(cbSceneParam._m0[41u].w) ? _2627 : (isnan(_2627) ? cbSceneParam._m0[41u].w : max(_2627, cbSceneParam._m0[41u].w));
            float _2674 = (cbSceneParam._m0[33u].x - sqrt(((_2285 * _2285) + (_2284 * _2284)) + (_2286 * _2286))) * cbSceneParam._m0[33u].y;
            float _4863 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
            float _2681 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2488, cbSceneParam._m0[33u].w + _2489), _2631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2488, _2489 - cbSceneParam._m0[33u].z), _2631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2488 - cbSceneParam._m0[33u].z, _2489 - cbSceneParam._m0[33u].w), _2631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2488 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2489), _2631), 0.0)).x), vec4(0.25)));
            float _2685 = 1.0 - (_2681 * cbSceneParam._m0[34u].x);
            float _2686 = 1.0 - (_2681 * cbSceneParam._m0[34u].y);
            float _2687 = 1.0 - (_2681 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2687) ? _2435 : (isnan(_2435) ? _2687 : min(_2435, _2687));
            frontier_phi_37_36_ladder_1 = isnan(_2686) ? _2434 : (isnan(_2434) ? _2686 : min(_2434, _2686));
            frontier_phi_37_36_ladder_2 = isnan(_2685) ? _2433 : (isnan(_2433) ? _2685 : min(_2433, _2685));
        }
        else
        {
            frontier_phi_37_36_ladder = _2435;
            frontier_phi_37_36_ladder_1 = _2434;
            frontier_phi_37_36_ladder_2 = _2433;
        }
        _2499 = frontier_phi_37_36_ladder_2;
        _2501 = frontier_phi_37_36_ladder_1;
        _2503 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2499 = _2433;
        _2501 = _2434;
        _2503 = _2435;
    }
    uvec4 _2508 = floatBitsToUint(cbInstanceData._m0[_1139 + 5u]);
    uint _2510 = _2508.x * 14u;
    uint _2511 = _2510 + 13u;
    float _2518 = _1179 + (-1.0);
    float _2523 = (cbLight._m0[_2511].x * _2518) + 1.0;
    float _2524 = (cbLight._m0[_2511].y * _2518) + 1.0;
    float _2525 = (cbLight._m0[_2511].z * _2518) + 1.0;
    float _2526 = (cbLight._m0[_2511].w * _2518) + 1.0;
    uint _2527 = _2510 + 5u;
    float _2533 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
    uint _2537 = _2510 + 4u;
    float _2546 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
    uint _2550 = _2510 | 1u;
    float _2561 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_1001, _1002, _1003));
    float _2564 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_1001, _1002, _1003));
    float _4899 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _4910 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2569 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * 0.3183098733425140380859375;
    float _2571 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * 0.3183098733425140380859375;
    float _2578 = ((cbLight._m0[_2527].x * _2533) * _2571) + (((cbLight._m0[_2537].x * _2499) * _2546) * _2569);
    float _2579 = ((_2533 * cbLight._m0[_2527].y) * _2571) + (((cbLight._m0[_2537].y * _2501) * _2546) * _2569);
    float _2580 = ((_2533 * cbLight._m0[_2527].z) * _2571) + (((cbLight._m0[_2537].z * _2503) * _2546) * _2569);
    uvec4 _2584 = floatBitsToUint(cbLight._m0[_2510 + 12u]);
    bool _2586 = _2584.x == 0u;
    float _2688;
    float _2690;
    float _2692;
    if (_2586)
    {
        _2688 = _2578;
        _2690 = _2579;
        _2692 = _2580;
    }
    else
    {
        uint _2696 = _2510 + 6u;
        float _2712 = (dot(vec3(cbLight._m0[_2510 + 2u].xyz), vec3(_1001, _1002, _1003)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4921 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
        float _2715 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2688 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2578;
        _2690 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2579;
        _2692 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2580;
    }
    bool _2695 = _2584.y == 0u;
    float _2750;
    float _2752;
    float _2754;
    if (_2695)
    {
        _2750 = _2688;
        _2752 = _2690;
        _2754 = _2692;
    }
    else
    {
        uint _2923 = _2510 + 7u;
        float _2939 = (dot(vec3(cbLight._m0[_2510 + 3u].xyz), vec3(_1001, _1002, _1003)) * 0.5) + 0.5;
        float _2940 = _2939 * _2939;
        float _4937 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2941 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
        float _2942 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
        _2750 = (((cbLight._m0[_2923].x * 0.3183098733425140380859375) * _2941) * _2942) + _2688;
        _2752 = (((cbLight._m0[_2923].y * 0.3183098733425140380859375) * _2941) * _2942) + _2690;
        _2754 = (((cbLight._m0[_2923].z * 0.3183098733425140380859375) * _2941) * _2942) + _2692;
    }
    uint _2757 = _2510 + 8u;
    float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _1004) * 0.949999988079071044921875);
    float _2771 = _2770 * _2770;
    float _2772 = cbLight._m0[_2510].x + _1081;
    float _2773 = cbLight._m0[_2510].y + _1082;
    float _2774 = cbLight._m0[_2510].z + _1083;
    float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
    float _2779 = _2778 * _2772;
    float _2780 = _2778 * _2773;
    float _2781 = _2778 * _2774;
    float _2782 = dot(vec3(_1001, _1002, _1003), vec3(cbLight._m0[_2510].xyz));
    float _4953 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2785 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
    float _4964 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _2786 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
    float _2787 = dot(vec3(_1001, _1002, _1003), vec3(_2779, _2780, _2781));
    float _4975 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
    float _2791 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2779, _2780, _2781));
    float _4986 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2795 = _2771 * _2771;
    float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
    float _2807 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
    float _2808 = 0.959999978542327880859375 - _1161;
    float _2810 = 0.959999978542327880859375 - _1162;
    float _2811 = 0.959999978542327880859375 - _1163;
    float _2818 = 1.0 - _2771;
    float _2829 = (0.5 / (((_2786 * ((_2785 * _2818) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2818) + _2771) * _2785))) * _2785;
    float _4997 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2831 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
    uint _2845 = _2510 + 9u;
    float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _1004) * 0.949999988079071044921875);
    float _2857 = _2856 * _2856;
    float _2858 = cbLight._m0[_2550].x + _1081;
    float _2859 = cbLight._m0[_2550].y + _1082;
    float _2860 = cbLight._m0[_2550].z + _1083;
    float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
    float _2865 = _2864 * _2858;
    float _2866 = _2864 * _2859;
    float _2867 = _2864 * _2860;
    float _2868 = dot(vec3(_1001, _1002, _1003), vec3(cbLight._m0[_2550].xyz));
    float _5008 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2871 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
    float _2872 = dot(vec3(_1001, _1002, _1003), vec3(_2865, _2866, _2867));
    float _5019 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2875 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
    float _2876 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2865, _2866, _2867));
    float _5030 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2880 = _2857 * _2857;
    float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
    float _2891 = exp2(log2(1.0 - (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) * 5.0);
    float _2898 = 1.0 - _2857;
    float _2908 = (0.5 / (((_2786 * ((_2871 * _2898) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2898) + _2857) * _2871))) * _2871;
    float _5041 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2910 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
    float _2920 = (((((_2891 * _2808) + _1164) * cbLight._m0[_2845].x) * _2910) * _2533) + ((((cbLight._m0[_2757].x * _2499) * ((_2807 * _2808) + _1164)) * _2831) * _2546);
    float _2921 = (((((_2891 * _2810) + _1166) * cbLight._m0[_2845].y) * _2910) * _2533) + ((((cbLight._m0[_2757].y * _2501) * ((_2807 * _2810) + _1166)) * _2831) * _2546);
    float _2922 = (((((_2891 * _2811) + _1167) * cbLight._m0[_2845].z) * _2910) * _2533) + ((((cbLight._m0[_2757].z * _2503) * ((_2807 * _2811) + _1167)) * _2831) * _2546);
    float _2978;
    float _2980;
    float _2982;
    if (_2586)
    {
        _2978 = _2920;
        _2980 = _2921;
        _2982 = _2922;
    }
    else
    {
        uint _2984 = _2510 + 2u;
        uint _2988 = _2510 + 10u;
        float _3002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2984].w)) * _1004) * 0.949999988079071044921875);
        float _3003 = _3002 * _3002;
        float _3004 = cbLight._m0[_2984].x + _1081;
        float _3005 = cbLight._m0[_2984].y + _1082;
        float _3006 = cbLight._m0[_2984].z + _1083;
        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
        float _3011 = _3010 * _3004;
        float _3012 = _3010 * _3005;
        float _3013 = _3010 * _3006;
        float _3014 = dot(vec3(_1001, _1002, _1003), vec3(cbLight._m0[_2984].xyz));
        float _5052 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
        float _3018 = dot(vec3(_1001, _1002, _1003), vec3(_3011, _3012, _3013));
        float _5063 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3021 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
        float _3022 = dot(vec3(cbLight._m0[_2984].xyz), vec3(_3011, _3012, _3013));
        float _5074 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3026 = _3003 * _3003;
        float _3030 = ((_3021 * _3021) * (_3026 + (-1.0))) + 1.0;
        float _3037 = exp2(log2(1.0 - (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0)))) * 5.0);
        float _3044 = 1.0 - _3003;
        float _3054 = (0.5 / (((_2786 * ((_3017 * _3044) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _3044) + _3003) * _3017))) * _3017;
        float _5085 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3056 = (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3026 / ((_3030 * _3030) * 3.141590118408203125));
        float _3057 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2978 = (((((_3037 * _2808) + _1164) * cbLight._m0[_2988].x) * _3056) * _3057) + _2920;
        _2980 = (((((_3037 * _2810) + _1166) * cbLight._m0[_2988].y) * _3056) * _3057) + _2921;
        _2982 = (((((_3037 * _2811) + _1167) * cbLight._m0[_2988].z) * _3056) * _3057) + _2922;
    }
    float _3088;
    float _3090;
    float _3092;
    if (_2695)
    {
        _3088 = _2978;
        _3090 = _2980;
        _3092 = _2982;
    }
    else
    {
        uint _3099 = _2510 + 3u;
        uint _3103 = _2510 + 11u;
        float _3117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3099].w)) * _1004) * 0.949999988079071044921875);
        float _3118 = _3117 * _3117;
        float _3119 = cbLight._m0[_3099].x + _1081;
        float _3120 = cbLight._m0[_3099].y + _1082;
        float _3121 = cbLight._m0[_3099].z + _1083;
        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
        float _3126 = _3125 * _3119;
        float _3127 = _3125 * _3120;
        float _3128 = _3125 * _3121;
        float _3129 = dot(vec3(_1001, _1002, _1003), vec3(cbLight._m0[_3099].xyz));
        float _5101 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3132 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
        float _3133 = dot(vec3(_1001, _1002, _1003), vec3(_3126, _3127, _3128));
        float _5112 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
        float _3136 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
        float _3137 = dot(vec3(cbLight._m0[_3099].xyz), vec3(_3126, _3127, _3128));
        float _5123 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
        float _3141 = _3118 * _3118;
        float _3145 = ((_3136 * _3136) * (_3141 + (-1.0))) + 1.0;
        float _3152 = exp2(log2(1.0 - (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0)))) * 5.0);
        float _3159 = 1.0 - _3118;
        float _3169 = (0.5 / (((_2786 * ((_3132 * _3159) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _3159) + _3118) * _3132))) * _3132;
        float _5134 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        float _3171 = (isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * (_3141 / ((_3145 * _3145) * 3.141590118408203125));
        float _3172 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
        _3088 = (((((_3152 * _2808) + _1164) * cbLight._m0[_3103].x) * _3171) * _3172) + _2978;
        _3090 = (((((_3152 * _2810) + _1166) * cbLight._m0[_3103].y) * _3171) * _3172) + _2980;
        _3092 = (((((_3152 * _2811) + _1167) * cbLight._m0[_3103].z) * _3171) * _3172) + _2982;
    }
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    if (_2508.y == 0u)
    {
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.x;
        uint _3205 = uint((float(_3193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1102) / _3194))) + floor(float(uint(cbSceneParam._m0[85u].x * _1101) / _3194)));
        float _3215 = (log2(_2286 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3216 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        uint _3219 = uint(isnan(14.0) ? _3216 : (isnan(_3216) ? 14.0 : min(_3216, 14.0)));
        uvec4 _3224 = texelFetch(g_lightClusterGridBuffer, int(((_3219 << 2u) + (_3205 << 6u)) >> 2u));
        uint _3225 = _3224.x;
        uint _3226 = _3193.z;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        float _3344;
        if (((((1u << ((_3226 >> 4u) & 15u)) + 4294967295u) & _3225) == 0u) || ((_3226 & 240u) == 0u))
        {
            _3334 = 0.0;
            _3336 = 0.0;
            _3338 = 0.0;
            _3340 = 0.0;
            _3342 = 0.0;
            _3344 = 0.0;
        }
        else
        {
            float _3335;
            float _3337;
            float _3339;
            float _3341;
            float _3343;
            float _3345;
            float _3494 = 0.0;
            float _3495 = 0.0;
            float _3496 = 0.0;
            float _3497 = 0.0;
            float _3498 = 0.0;
            float _3499 = 0.0;
            uint _3500 = 0u;
            uint _3509;
            bool _3510;
            for (;;)
            {
                _3509 = texelFetch(g_lightClassification, int((((_3219 << 5u) + (_3205 << 9u)) + (_3500 << 2u)) >> 2u)).x;
                _3510 = _3509 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3510)
                {
                    frontier_phi_71_pred = _3499;
                    frontier_phi_71_pred_1 = _3498;
                    frontier_phi_71_pred_2 = _3497;
                    frontier_phi_71_pred_3 = _3496;
                    frontier_phi_71_pred_4 = _3495;
                    frontier_phi_71_pred_5 = _3494;
                }
                else
                {
                    float _3639;
                    float _3640;
                    float _3641;
                    float _3642;
                    float _3643;
                    float _3644;
                    uint _3645;
                    _3639 = _3494;
                    _3640 = _3495;
                    _3641 = _3496;
                    _3642 = _3497;
                    _3643 = _3498;
                    _3644 = _3499;
                    _3645 = _3509;
                    float _3566;
                    float _3567;
                    float _3568;
                    float _3569;
                    float _3570;
                    float _3571;
                    for (;;)
                    {
                        uint _3649 = uint(findLSB(_3645)) + (_3500 << 5u);
                        uint _3646 = (_3645 + 4294967295u) & _3645;
                        uint _3651 = _3649 * 48u;
                        vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3651)).x, texelFetch(g_PointLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3651 + 3u)).x));
                        uint _3671 = (_3649 * 48u) + 4u;
                        vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3671)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 3u)).x));
                        uint _3690 = (_3649 * 48u) + 8u;
                        vec3 _3701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3690)).x, texelFetch(g_PointLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3690 + 2u)).x));
                        float _3705 = _3665.x - _2284;
                        float _3706 = _3665.y - _2285;
                        float _3707 = _3665.z - _2286;
                        float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                        float _3711 = inversesqrt(_3708);
                        float _3712 = _3711 * _3705;
                        float _3713 = _3711 * _3706;
                        float _3714 = _3711 * _3707;
                        float _3715 = dot(vec3(_1120, _1123, _1126), vec3(_3712, _3713, _3714));
                        float _3720 = 1.0 - (_3708 * _3665.w);
                        float _5160 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                        float _3721 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                        float _3722 = sqrt(_3708) * _3684.w;
                        float _3725 = 1.39999997615814208984375 / (_3722 + 1.39999997615814208984375);
                        float _3726 = _3725 * _3725;
                        float _3729 = ((1.0 - _3726) * _3715) + _3726;
                        float _3732 = _3722 * _3722;
                        float _3736 = ((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3721) / ((_3732 * 0.699999988079071044921875) + 1.0);
                        float _3740 = (-0.0) - _2284;
                        float _3741 = (-0.0) - _2285;
                        float _3742 = (-0.0) - _2286;
                        float _3746 = inversesqrt(dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742)));
                        float _3747 = _3746 * _3740;
                        float _3748 = _3746 * _3741;
                        float _3749 = _3746 * _3742;
                        float _3756 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                        float _3757 = 1.0 - _1195;
                        float _3764 = sqrt(1.0 - ((1.0 - (_3757 * _3757)) * (1.0 - (_3756 * _3756))));
                        float _3765 = _3764 * _3764;
                        float _3766 = _3765 * _3765;
                        float _3767 = _3747 + _3712;
                        float _3768 = _3748 + _3713;
                        float _3769 = _3749 + _3714;
                        float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                        float _3777 = dot(vec3(_1120, _1123, _1126), vec3(_3747, _3748, _3749));
                        float _5176 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                        float _3780 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                        float _3781 = dot(vec3(_1120, _1123, _1126), vec3(_3773 * _3767, _3773 * _3768, _3773 * _3769));
                        float _5187 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                        float _3784 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
                        float _3788 = ((_3784 * _3784) * (_3766 + (-1.0))) + 1.0;
                        float _3789 = _3725 * _3765;
                        float _3790 = _3789 * _3789;
                        float _3793 = ((1.0 - _3790) * _3715) + _3790;
                        float _5198 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                        float _3794 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
                        float _3795 = 1.0 - _3765;
                        float _3805 = (0.5 / (((_3794 * ((_3780 * _3795) + _3765)) + 9.9999999392252902907785028219223e-09) + (((_3794 * _3795) + _3765) * _3780))) * _3794;
                        float _5209 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                        float _3816 = (((_3766 * 3.1415927410125732421875) * (isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0)))) / ((_3788 * _3788) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125))) * _3721;
                        _3569 = (_3736 * _3684.x) + _3642;
                        _3570 = (_3736 * _3684.y) + _3643;
                        _3571 = (_3736 * _3684.z) + _3644;
                        _3566 = (_3816 * _3701.x) + _3639;
                        _3567 = (_3816 * _3701.y) + _3640;
                        _3568 = (_3816 * _3701.z) + _3641;
                        if (_3646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3639 = _3566;
                            _3640 = _3567;
                            _3641 = _3568;
                            _3642 = _3569;
                            _3643 = _3570;
                            _3644 = _3571;
                            _3645 = _3646;
                        }
                    }
                    frontier_phi_71_pred = _3571;
                    frontier_phi_71_pred_1 = _3570;
                    frontier_phi_71_pred_2 = _3569;
                    frontier_phi_71_pred_3 = _3568;
                    frontier_phi_71_pred_4 = _3567;
                    frontier_phi_71_pred_5 = _3566;
                }
                _3345 = frontier_phi_71_pred;
                _3343 = frontier_phi_71_pred_1;
                _3341 = frontier_phi_71_pred_2;
                _3339 = frontier_phi_71_pred_3;
                _3337 = frontier_phi_71_pred_4;
                _3335 = frontier_phi_71_pred_5;
                uint _3501 = _3500 + 1u;
                if (_3501 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3494 = _3335;
                    _3495 = _3337;
                    _3496 = _3339;
                    _3497 = _3341;
                    _3498 = _3343;
                    _3499 = _3345;
                    _3500 = _3501;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3334 = _3335;
            _3336 = _3337;
            _3338 = _3339;
            _3340 = _3341;
            _3342 = _3343;
            _3344 = _3345;
        }
        uvec4 _3348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3349 = _3348.z;
        uint _3351 = (_3349 >> 8u) & 15u;
        float _3462;
        float _3464;
        float _3466;
        float _3468;
        float _3470;
        float _3472;
        if (((4294967295u << _3351) & _3225) == 0u)
        {
            _3462 = _3334;
            _3464 = _3336;
            _3466 = _3338;
            _3468 = _3340;
            _3470 = _3342;
            _3472 = _3344;
        }
        else
        {
            float _3487 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
            float _3488 = _3487 * _2284;
            float _3489 = _3487 * _2285;
            float _3490 = _3487 * _2286;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3351 < ((_3349 >> 12u) & 15u))
            {
                float _3463;
                float _3465;
                float _3467;
                float _3469;
                float _3471;
                float _3473;
                float _3622 = _3334;
                float _3623 = _3336;
                float _3624 = _3338;
                float _3625 = _3340;
                float _3626 = _3342;
                float _3627 = _3344;
                uint _3628 = _3351;
                uint _3637;
                bool _3638;
                for (;;)
                {
                    _3637 = texelFetch(g_lightClassification, int((((_3219 << 5u) + (_3205 << 9u)) + (_3628 << 2u)) >> 2u)).x;
                    _3638 = _3637 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3638)
                    {
                        frontier_phi_82_pred = _3627;
                        frontier_phi_82_pred_1 = _3626;
                        frontier_phi_82_pred_2 = _3625;
                        frontier_phi_82_pred_3 = _3624;
                        frontier_phi_82_pred_4 = _3623;
                        frontier_phi_82_pred_5 = _3622;
                    }
                    else
                    {
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _4123;
                        float _4124;
                        float _4125;
                        float _4126;
                        float _4127;
                        float _4128;
                        float _3843 = _3622;
                        float _3844 = _3623;
                        float _3845 = _3624;
                        float _3846 = _3625;
                        float _3847 = _3626;
                        float _3848 = _3627;
                        uint _3849 = _3637;
                        uint _3850;
                        vec4 _3875;
                        float _3876;
                        vec4 _3891;
                        vec3 _3903;
                        vec4 _3918;
                        vec4 _3933;
                        float _3979;
                        bool _3980;
                        for (;;)
                        {
                            uint _3860 = ((_3628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3849));
                            _3850 = (_3849 + 4294967295u) & _3849;
                            uint _3862 = _3860 * 40u;
                            _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            _3876 = _3875.w;
                            uint _3878 = (_3860 * 40u) + 4u;
                            _3891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 3u)).x));
                            uint _3893 = (_3860 * 40u) + 8u;
                            _3903 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 2u)).x));
                            uint _3905 = (_3860 * 40u) + 16u;
                            _3918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 3u)).x));
                            uint _3920 = (_3860 * 40u) + 20u;
                            _3933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 3u)).x));
                            uint _3935 = (_3860 * 40u) + 24u;
                            vec4 _3948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 3u)).x));
                            uint _3954 = (_3860 * 40u) + 28u;
                            vec4 _3967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 3u)).x));
                            _3979 = fma(_2286, _3967.z, fma(_2285, _3967.y, _3967.x * _2284)) + _3967.w;
                            _3980 = !((fma(_2286, _3948.z, fma(_2285, _3948.y, _3948.x * _2284)) + _3948.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3980)
                            {
                                float _4007 = _3875.x - _2284;
                                float _4008 = _3875.y - _2285;
                                float _4009 = _3875.z - _2286;
                                float _4010 = dot(vec3(_4007, _4008, _4009), vec3(_4007, _4008, _4009));
                                float _4013 = inversesqrt(_4010);
                                float _4014 = _4013 * _4007;
                                float _4015 = _4013 * _4008;
                                float _4016 = _4013 * _4009;
                                float _4020 = 1.0 - (_4010 / (_3876 * _3876));
                                float _5220 = isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0));
                                float _4021 = isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0));
                                float _4025 = sqrt(_4010) * _3891.w;
                                float _4027 = 1.39999997615814208984375 / (_4025 + 1.39999997615814208984375);
                                float _4028 = _4027 * _4027;
                                float _4031 = ((1.0 - _4028) * dot(vec3(_4014, _4015, _4016), vec3(_1120, _1123, _1126))) + _4028;
                                float _4034 = _4025 * _4025;
                                float _4038 = (fma(_2286, _3918.z, fma(_2285, _3918.y, _3918.x * _2284)) + _3918.w) / _3979;
                                float _4039 = (fma(_2286, _3933.z, fma(_2285, _3933.y, _3933.x * _2284)) + _3933.w) / _3979;
                                float _4043 = 1.0 - dot(vec2(_4038, _4039), vec2(_4038, _4039));
                                float _5236 = isnan(0.0) ? _4043 : (isnan(_4043) ? 0.0 : max(_4043, 0.0));
                                float _4044 = isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0));
                                float _4045 = _4044 * (((isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0))) * _4021) / ((_4034 * 0.699999988079071044921875) + 1.0));
                                float _4057 = exp2(log2(1.0 / ((_4034 * 3.5) + 5.0)) * 0.25);
                                float _4058 = 1.0 - _1195;
                                float _4065 = sqrt(1.0 - ((1.0 - (_4058 * _4058)) * (1.0 - (_4057 * _4057))));
                                float _4066 = _4065 * _4065;
                                float _4067 = _4066 * _4066;
                                float _4068 = _4014 - _3488;
                                float _4069 = _4015 - _3489;
                                float _4070 = _4016 - _3490;
                                float _4074 = inversesqrt(dot(vec3(_4068, _4069, _4070), vec3(_4068, _4069, _4070)));
                                float _4078 = dot(vec3(_1120, _1123, _1126), vec3((-0.0) - _3488, (-0.0) - _3489, (-0.0) - _3490));
                                float _5247 = isnan(0.0) ? _4078 : (isnan(_4078) ? 0.0 : max(_4078, 0.0));
                                float _4081 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
                                float _4082 = dot(vec3(_1120, _1123, _1126), vec3(_4074 * _4068, _4074 * _4069, _4074 * _4070));
                                float _5258 = isnan(0.0) ? _4082 : (isnan(_4082) ? 0.0 : max(_4082, 0.0));
                                float _4085 = isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0));
                                float _4089 = ((_4085 * _4085) * (_4067 + (-1.0))) + 1.0;
                                float _4090 = _4027 * _4066;
                                float _4091 = _4090 * _4090;
                                float _4097 = ((1.0 - _4091) * dot(vec3(_1120, _1123, _1126), vec3(_4014, _4015, _4016))) + _4091;
                                float _5269 = isnan(0.0) ? _4097 : (isnan(_4097) ? 0.0 : max(_4097, 0.0));
                                float _4098 = isnan(1.0) ? _5269 : (isnan(_5269) ? 1.0 : min(_5269, 1.0));
                                float _4099 = 1.0 - _4066;
                                float _4109 = (0.5 / (((_4098 * ((_4081 * _4099) + _4066)) + 9.9999999392252902907785028219223e-09) + (((_4098 * _4099) + _4066) * _4081))) * _4098;
                                float _5280 = isnan(0.0) ? _4109 : (isnan(_4109) ? 0.0 : max(_4109, 0.0));
                                float _4119 = (_4044 * _4021) * (((_4067 * 3.1415927410125732421875) * (isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0)))) / ((_4089 * _4089) * ((_4034 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4045 * _3891.z;
                                frontier_phi_88_pred_1 = _4045 * _3891.y;
                                frontier_phi_88_pred_2 = _4045 * _3891.x;
                                frontier_phi_88_pred_3 = _4119 * _3903.z;
                                frontier_phi_88_pred_4 = _4119 * _3903.y;
                                frontier_phi_88_pred_5 = _4119 * _3903.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4128 = frontier_phi_88_pred;
                            _4127 = frontier_phi_88_pred_1;
                            _4126 = frontier_phi_88_pred_2;
                            _4125 = frontier_phi_88_pred_3;
                            _4124 = frontier_phi_88_pred_4;
                            _4123 = frontier_phi_88_pred_5;
                            _3833 = _4126 + _3846;
                            _3834 = _4127 + _3847;
                            _3835 = _4128 + _3848;
                            _3830 = _4123 + _3843;
                            _3831 = _4124 + _3844;
                            _3832 = _4125 + _3845;
                            if (_3850 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3843 = _3830;
                                _3844 = _3831;
                                _3845 = _3832;
                                _3846 = _3833;
                                _3847 = _3834;
                                _3848 = _3835;
                                _3849 = _3850;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3835;
                        frontier_phi_82_pred_1 = _3834;
                        frontier_phi_82_pred_2 = _3833;
                        frontier_phi_82_pred_3 = _3832;
                        frontier_phi_82_pred_4 = _3831;
                        frontier_phi_82_pred_5 = _3830;
                    }
                    _3473 = frontier_phi_82_pred;
                    _3471 = frontier_phi_82_pred_1;
                    _3469 = frontier_phi_82_pred_2;
                    _3467 = frontier_phi_82_pred_3;
                    _3465 = frontier_phi_82_pred_4;
                    _3463 = frontier_phi_82_pred_5;
                    uint _3629 = _3628 + 1u;
                    if (_3629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3622 = _3463;
                        _3623 = _3465;
                        _3624 = _3467;
                        _3625 = _3469;
                        _3626 = _3471;
                        _3627 = _3473;
                        _3628 = _3629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3469;
                frontier_phi_63_64_ladder_1 = _3473;
                frontier_phi_63_64_ladder_2 = _3471;
                frontier_phi_63_64_ladder_3 = _3467;
                frontier_phi_63_64_ladder_4 = _3465;
                frontier_phi_63_64_ladder_5 = _3463;
            }
            else
            {
                frontier_phi_63_64_ladder = _3340;
                frontier_phi_63_64_ladder_1 = _3344;
                frontier_phi_63_64_ladder_2 = _3342;
                frontier_phi_63_64_ladder_3 = _3338;
                frontier_phi_63_64_ladder_4 = _3336;
                frontier_phi_63_64_ladder_5 = _3334;
            }
            _3462 = frontier_phi_63_64_ladder_5;
            _3464 = frontier_phi_63_64_ladder_4;
            _3466 = frontier_phi_63_64_ladder_3;
            _3468 = frontier_phi_63_64_ladder;
            _3470 = frontier_phi_63_64_ladder_2;
            _3472 = frontier_phi_63_64_ladder_1;
        }
        float _3477 = isnan(1.0) ? _1179 : (isnan(_1179) ? 1.0 : min(_1179, 1.0));
        _3238 = (_3477 * _3468) + _2750;
        _3240 = (_3477 * _3470) + _2752;
        _3242 = (_3477 * _3472) + _2754;
        _3244 = ((_3462 * _1164) * _3477) + _3088;
        _3246 = ((_3464 * _1166) * _3477) + _3090;
        _3248 = ((_3466 * _1167) * _3477) + _3092;
    }
    else
    {
        _3238 = _2750;
        _3240 = _2752;
        _3242 = _2754;
        _3244 = _3088;
        _3246 = _3090;
        _3248 = _3092;
    }
    uint _3254 = _1140 + uint(cbMatDynParam._m0[0u].w);
    float _3260 = cbInstanceData._m0[_3254].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_714.x - _711) * _692) + _711)) - _953) * _455) + _953);
    float _3261 = cbInstanceData._m0[_3254].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_714.y - _712) * _692) + _712)) - _954) * _455) + _954);
    float _3262 = cbInstanceData._m0[_3254].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_714.z - _713) * _692) + _713)) - _955) * _455) + _955);
    float _5296 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _5307 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _5318 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _3279 = (((isnan(1.0) ? _5296 : (isnan(_5296) ? 1.0 : min(_5296, 1.0))) * (_3238 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1179))) + ((_3244 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2018)) * cbPerFrame._m0[3u].x)) + _3260;
    float _3281 = (_3261 + ((_3246 + ((isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))) * _2018)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0))) * (_3240 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1179)));
    float _3283 = (_3262 + ((_3248 + ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2018)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5318 : (isnan(_5318) ? 1.0 : min(_5318, 1.0))) * (_3242 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1179)));
    float _3284 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
    float _3285 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
    float _3286 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
    float _3292 = cbMtdParam._m0[2u].x * _3260;
    float _3293 = cbMtdParam._m0[2u].y * _3261;
    float _3294 = cbMtdParam._m0[2u].z * _3262;
    float _5344 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3296 = isnan(1.0) ? _5344 : (isnan(_5344) ? 1.0 : min(_5344, 1.0));
    uint _3297 = _1139 + 6u;
    float _3305 = _1101 / cbSceneParam._m0[86u].x;
    float _3306 = _1102 / cbSceneParam._m0[86u].y;
    vec4 _3320 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3305, _3306, (log2((isnan(cbSceneParam._m0[77u].w) ? _1024 : (isnan(_1024) ? cbSceneParam._m0[77u].w : min(_1024, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3322 = _3320.x;
    float _3323 = _3320.y;
    float _3324 = _3320.z;
    float _3325 = _3320.w;
    float _3396;
    float _3398;
    float _3400;
    float _3402;
    if (_1024 > cbSceneParam._m0[78u].w)
    {
        float _3359 = isnan(_1024) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1024 : min(cbSceneParam._m0[80u].w, _1024));
        float _3360 = _3359 / _1024;
        float _3371 = _3360 * _1074;
        float _3372 = _1075 * _3360;
        float _3373 = (-0.0) - _3372;
        float _3374 = _3360 * _1076;
        float _3376 = (cbSceneParam._m0[77u].w * _3373) / _3359;
        float _3377 = _3376 + cbSceneParam._m0[79u].w;
        float _3378 = cbSceneParam._m0[79u].w - _3372;
        float _3384 = sqrt(((_3371 * _3371) + (_3372 * _3372)) + (_3374 * _3374));
        float _3387 = (1.0 - (cbSceneParam._m0[77u].w / _3359)) * _3384;
        float _3392 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3394 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3579;
        if (abs((_3373 - _3376) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3579 = ((((_3377 > 0.0) ? exp2(_3392 * _3377) : (2.0 - exp2(_3394 * _3377))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3387;
        }
        else
        {
            float _3523 = 1.0 / cbSceneParam._m0[80u].x;
            float _3524 = isnan(_3378) ? _3377 : (isnan(_3377) ? _3378 : max(_3377, _3378));
            float _3525 = isnan(_3378) ? _3377 : (isnan(_3377) ? _3378 : min(_3377, _3378));
            float _3534 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : min(_3524, 0.0));
            float _3535 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : min(_3525, 0.0));
            _3579 = ((abs(_3384 / _3373) * cbSceneParam._m0[80u].y) * ((((_3534 - _3535) * 2.0) - ((exp2(_3392 * (isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0)))) - exp2(_3392 * (isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))))) * _3523)) - ((exp2(_3394 * _3534) - exp2(_3394 * _3535)) * _3523))) + (_3387 * cbSceneParam._m0[80u].z);
        }
        vec4 _3581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3305, _3306, 1.0), 0.0);
        float _3590 = exp2((_3579 * (-1.44269502162933349609375)) * (1.0 - _3581.w));
        float _3591 = log2(_3590);
        float _3607 = log2(_3325);
        _3396 = (exp2(_3607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3591 * cbSceneParam._m0[78u].x)) * _3581.x) / cbSceneParam._m0[78u].x)) + _3322;
        _3398 = (exp2(_3607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3591 * cbSceneParam._m0[78u].y)) * _3581.y) / cbSceneParam._m0[78u].y)) + _3323;
        _3400 = (exp2(_3607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3591 * cbSceneParam._m0[78u].z)) * _3581.z) / cbSceneParam._m0[78u].z)) + _3324;
        _3402 = _3590 * _3325;
    }
    else
    {
        _3396 = _3322;
        _3398 = _3323;
        _3400 = _3324;
        _3402 = _3325;
    }
    bool _3617;
    vec4 _3411;
    vec4 _3433;
    float _3435;
    float _3439;
    float _3440;
    float _3441;
    float _3444;
    float _3447;
    float _3450;
    float _3451;
    bool _3461;
    for (;;)
    {
        _3411 = cbMatDynParam._m0[0u];
        float _3413 = roundEven(_3411.y);
        bool _3414 = _3413 == 3.0;
        float _3415 = log2(_3402);
        float _3419 = exp2(_3415 * cbSceneParam._m0[78u].x);
        float _3420 = exp2(_3415 * cbSceneParam._m0[78u].y);
        float _3421 = exp2(_3415 * cbSceneParam._m0[78u].z);
        float _3422 = _3419 * _3284;
        float _3423 = _3420 * _3285;
        float _3424 = _3421 * _3286;
        float _3431 = _1090 + (-0.5);
        _3433 = cbMtdParam._m0[1u];
        _3435 = _3433.y * _3431;
        float _3438 = (_3413 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3439 = _3438 * (_3414 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3396)));
        _3440 = _3438 * (_3414 ? _3423 : (_3423 + (cbSceneParam._m0[72u].w * _3398)));
        _3441 = _3438 * (_3414 ? _3424 : (_3424 + (cbSceneParam._m0[72u].w * _3400)));
        _3444 = ((_3292 * _3296) * _3419) * _3438;
        _3447 = ((_3293 * _3296) * _3420) * _3438;
        _3450 = ((_3294 * _3296) * _3421) * _3438;
        _3451 = _3431 * 0.999000012874603271484375;
        _3461 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3461)
        {
            if ((cbInstanceData._m0[_1139 + 7u].x + _3451) < 0.5)
            {
                _3617 = true;
                break;
            }
        }
        uint _3558 = _1140 + uint(_3411.w);
        if ((cbInstanceData._m0[_3558].w < 1.0) && ((cbInstanceData._m0[_3558].w + _3451) < 0.5))
        {
            _3617 = true;
            break;
        }
        if ((_3435 + 1.0) < _3433.x)
        {
            _3617 = true;
            break;
        }
        _3617 = false;
        break;
    }
    float _3821;
    if (_3617)
    {
        discard_state = true;
        _3821 = 0.0;
    }
    else
    {
        _3821 = cbInstanceData._m0[_3297].w;
    }
    SV_Target.x = _3439;
    SV_Target.y = _3440;
    SV_Target.z = _3441;
    SV_Target.w = _3821;
    SV_Target_1.x = _3444;
    SV_Target_1.y = _3447;
    SV_Target_1.z = _3450;
    SV_Target_1.w = cbInstanceData._m0[_3297].w;
    discard_exit();
}


