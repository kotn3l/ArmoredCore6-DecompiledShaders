#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_24;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 8) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_22;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1514;
float _4193;
float _4194;
float _4195;
float _4196;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[8u].w));
    vec4 _339 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _368 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w));
    float _391 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625;
    float _399 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * _391)) * (cbMtdParam._m0[17u].w + 1.0);
    float _4205 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _407 = (_400 * ((_368.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _408 = (_400 * ((_368.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _409 = (_400 * ((_368.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    float _415 = (TEXCOORD_9.x - ((cbMtdParam._m0[19u].y * (1.0 - TEXCOORD_9.x)) * _391)) * (cbMtdParam._m0[19u].x + 1.0);
    float _4216 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _423 = (((_339.x * cbMtdParam._m0[14u].x) - _407) * _416) + _407;
    float _424 = (((_339.y * cbMtdParam._m0[14u].y) - _408) * _416) + _408;
    float _425 = (((_339.z * cbMtdParam._m0[14u].z) - _409) * _416) + _409;
    float _441 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    float _450 = (_441 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _441))) * (cbMtdParam._m0[20u].x + 1.0);
    float _4227 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _458 = (_451 * ((_311.x * cbMtdParam._m0[15u].x) - _423)) + _423;
    float _459 = (_451 * ((_311.y * cbMtdParam._m0[15u].y) - _424)) + _424;
    float _460 = (_451 * ((_311.z * cbMtdParam._m0[15u].z) - _425)) + _425;
    vec4 _476 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _498 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _514 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_498.z - _518) * _400) + _518;
    float _530 = ((((_498.x - _516) * _400) + _516) * 2.0) + (-1.0);
    float _531 = ((((_498.y - _517) * _400) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _4238 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))));
    float _542 = (((_476.z - _527) * TEXCOORD_9.x) * cbMtdParam._m0[19u].z) + _527;
    vec4 _555 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[10u].w));
    float _572 = (((((((_555.z - _542) * TEXCOORD_15) * cbMtdParam._m0[21u].y) + _542) * cbMtdParam._m0[21u].z) - _542) * _451) + _542;
    float _588 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _591 = (_588 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _592 = (_588 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _617 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _621 = cbPerFrame._m0[22u].x * 2.0;
    float _622 = _621 * cbMtdParam._m0[22u].y;
    float _629 = ((_617.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _631 = (-0.0) - (cbMtdParam._m0[22u].x * ((_617.x * 0.5) + (-0.25)));
    float _633 = fract(_622);
    float _635 = fract(_622 + 0.5);
    float _646 = abs((_633 * 2.0) + (-1.0));
    vec4 _663 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_633 * _631) + _591) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_629 * _633) + _592) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _665 = _663.x;
    float _666 = _663.y;
    float _667 = _663.z;
    vec4 _668 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_635 * _631) + _591) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_629 * _635) + _592) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _710 = (cbMtdParam._m0[23u].y * _588) + TEXCOORD_6.w;
    float _711 = (cbMtdParam._m0[23u].z * _588) + TEXCOORD_9.w;
    vec4 _724 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _728 = _621 * cbMtdParam._m0[18u].x;
    float _733 = ((_724.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _735 = (-0.0) - (cbMtdParam._m0[20u].z * ((_724.x * 0.5) + (-0.25)));
    float _736 = fract(_728);
    float _738 = fract(_728 + 0.5);
    float _739 = _736 * _735;
    float _740 = _733 * _736;
    float _743 = _738 * _735;
    float _744 = _733 * _738;
    float _749 = abs((_736 * 2.0) + (-1.0));
    vec4 _765 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_739 + _710) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_740 + _711) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _767 = _765.x;
    float _768 = _765.y;
    float _769 = _765.z;
    vec4 _770 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_743 + _710) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_744 + _711) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _800 = (cbMtdParam._m0[22u].w * _588) + TEXCOORD_6.w;
    float _801 = (cbMtdParam._m0[23u].x * _588) + TEXCOORD_9.w;
    vec4 _821 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_739 + _800) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_740 + _801) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _823 = _821.x;
    float _824 = _821.y;
    float _825 = _821.z;
    vec4 _826 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_743 + _800) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_744 + _801) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _846 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4249 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _847 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _855 = (((_847 * _847) * (3.0 - (_847 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _888 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _800) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _801) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4260 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _889 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _893 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_826.x - _823) * _749) + _823)) * _855) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_770.x - _767) * _749) + _767)))) * _889;
    float _897 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_826.y - _824) * _749) + _824)) * _855) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_770.y - _768) * _749) + _768)))) * _889;
    float _901 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_826.z - _825) * _749) + _825)) * _855) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_770.z - _769) * _749) + _769)))) * _889;
    float _905 = _893 - (_893 * _441);
    float _906 = _897 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _897);
    float _907 = _901 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _901);
    float _936 = ((((((_476.x * 2.0) + (-1.0)) * TEXCOORD_9.x) * cbMtdParam._m0[18u].z) + _530) + (cbMtdParam._m0[20u].y * _530)) + (((((_555.x * 2.0) + (-1.0)) * TEXCOORD_15) * cbMtdParam._m0[21u].x) * _451);
    float _939 = ((((((_476.y * 2.0) + (-1.0)) * TEXCOORD_9.y) * cbMtdParam._m0[18u].z) + _531) + (cbMtdParam._m0[20u].y * _531)) + (((((_555.y * 2.0) + (-1.0)) * TEXCOORD_16) * cbMtdParam._m0[21u].x) * _451);
    float _942 = fma(_537, _247 * NORMAL.x, fma(_939, _254 * TANGENT.x, (_240 * _232) * _936));
    float _945 = fma(_537, _247 * NORMAL.y, fma(_939, _254 * TANGENT.y, (_240 * _233) * _936));
    float _948 = fma(_537, _247 * NORMAL.z, fma(_939, _254 * TANGENT.z, (_240 * _234) * _936));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4271 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _956 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4293 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4304 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1195 = sqrt(((_1025 * _1025) + (_1026 * _1026)) + (_1027 * _1027));
        float _1201 = (cbMatDynParam._m0[5u].x * _1195) + cbMatDynParam._m0[5u].y;
        float _4315 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1206 = (cbMatDynParam._m0[5u].z * _1195) + cbMatDynParam._m0[5u].w;
        float _4326 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) - _1202)) + _1202) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1075 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1078 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1091 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1092 = _1091 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4337 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    vec4 _1113 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1116 = _1113.x * TEXCOORD_3.w;
    float _1117 = dot(vec3(_953, _954, _955), vec3(_1032, _1033, _1034));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _953) - _1032;
    float _1125 = (_1120 * _954) - _1033;
    float _1126 = (_1120 * _955) - _1034;
    float _1130 = abs(dot(vec3(_1032, _1033, _1034), vec3(_953, _954, _955)));
    float _4370 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_956);
    float _1144 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1513;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1239 = fma(_1184, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176));
        float _1243 = fma(_1184, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176));
        float _1247 = fma(_1184, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176));
        float _1271 = _1176 + _953;
        float _1272 = _1180 + _954;
        float _1273 = _1184 + _955;
        float _1283 = fma(_1273, cbModelParam._m0[26u].z, fma(_1272, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1271)) - _1239;
        float _1284 = fma(_1273, cbModelParam._m0[27u].z, fma(_1272, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1271)) - _1243;
        float _1285 = fma(_1273, cbModelParam._m0[28u].z, fma(_1272, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1271)) - _1247;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1239 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1243 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[34u].z) + ((((((_1247 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1341 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1307.x + (-0.5));
        float _1343 = _1341 * (_1307.y + (-0.5));
        float _1344 = _1341 * (_1307.z + (-0.5));
        float _1351 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1314.x + (-0.5));
        float _1353 = _1351 * (_1314.y + (-0.5));
        float _1354 = _1351 * (_1314.z + (-0.5));
        float _1361 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1321.x + (-0.5));
        float _1363 = _1361 * (_1321.y + (-0.5));
        float _1364 = _1361 * (_1321.z + (-0.5));
        float _1371 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1328.x + (-0.5));
        float _1373 = _1371 * (_1328.y + (-0.5));
        float _1374 = _1371 * (_1328.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1395 = (dot(vec3(_953, _954, _955), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1405 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4418 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1407 + 1.0))) + _1412) * _1375;
        float _1422 = _1343 * 0.5;
        float _1423 = _1353 * 0.5;
        float _1424 = _1363 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_953, _954, _955), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4451 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1449 + 1.0))) + _1454) * _1376;
        float _1464 = _1344 * 0.5;
        float _1465 = _1354 * 0.5;
        float _1466 = _1364 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_953, _954, _955), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4484 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1491 + 1.0))) + _1496) * _1377;
        _1513 = _1344;
        _1515 = _1343;
        _1516 = _1342;
        _1517 = _1354;
        _1518 = _1353;
        _1519 = _1352;
        _1520 = _1364;
        _1521 = _1363;
        _1522 = _1362;
        _1523 = _1377;
        _1524 = _1376;
        _1525 = _1375;
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1528 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1514;
        _1515 = _1514;
        _1516 = _1514;
        _1517 = _1514;
        _1518 = _1514;
        _1519 = _1514;
        _1520 = _1514;
        _1521 = _1514;
        _1522 = _1514;
        _1523 = _1514;
        _1524 = _1514;
        _1525 = _1514;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1557 = fma(_1184, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176));
        float _1561 = fma(_1184, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176));
        float _1565 = fma(_1184, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176));
        float _1588 = _1176 + _953;
        float _1589 = _1180 + _954;
        float _1590 = _1184 + _955;
        float _1600 = fma(_1590, cbModelParam._m0[30u].z, fma(_1589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1588)) - _1557;
        float _1601 = fma(_1590, cbModelParam._m0[31u].z, fma(_1589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1588)) - _1561;
        float _1602 = fma(_1590, cbModelParam._m0[32u].z, fma(_1589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1588)) - _1565;
        float _1606 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
        float _1619 = ((_1606 * _1600) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1557 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1606 * _1601) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1561 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1606 * _1602) / cbModelParam._m0[35u].z) + ((((((_1565 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_953, _954, _955), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4547 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_953, _954, _955), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4558 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4569 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4580 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_953, _954, _955), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4613 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1514;
        _1827 = _1514;
        _1828 = _1514;
        _1829 = _1514;
        _1830 = _1514;
        _1831 = _1514;
        _1832 = _1514;
        _1833 = _1514;
        _1834 = _1514;
        _1835 = _1514;
        _1836 = _1514;
        _1837 = _1514;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1526)) + _1526;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1527)) + _1527;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1528)) + _1528;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1894 = _1124 * 0.5;
    float _1895 = _1125 * 0.5;
    float _1896 = _1126 * 0.5;
    float _1897 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1900 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1903 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1937;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1910 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1513, _1517, _1520, _1523));
        float _1914 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1515, _1518, _1521, _1524));
        float _1918 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1516, _1519, _1522, _1525));
        float _1925 = dot(vec4(cbModelParam._m0[39u]), vec4(_1894, _1895, _1896, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1948;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1939 = dot(vec4(cbModelParam._m0[40u]), vec4(_1894, _1895, _1896, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1952 = (_1948 * cbModelParam._m0[1u].x) + (_1937 * (1.0 - cbModelParam._m0[1u].x));
    float _1962 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1962 : min(cbModelParam._m0[25u].z, _1962));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1184, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1176)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1184, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1176)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1184, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1176)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _2024 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _2027 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2055 = frontier_phi_17_15_ladder;
        }
        float _2224;
        if (_2024 > 0.0)
        {
            _2224 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2224 = frontier_phi_26_22_ladder;
        }
        float _2520;
        if (_2027 > 0.0)
        {
            _2520 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2520 = frontier_phi_38_33_ladder;
        }
        float _2522 = isnan(_2224) ? _2055 : (isnan(_2055) ? _2224 : min(_2055, _2224));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _2021) + _2010;
        float _2528 = (_2523 * _2024) + _2014;
        float _2529 = (_2523 * _2027) + _2018;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2530;
        float _2534 = _2530 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 > _2534) || ((_2528 < _2532) || ((_2527 < _2532) || (_2527 > _2534))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2529, cbModelParam._m0[9u].z, fma(_2528, cbModelParam._m0[9u].y, _2527 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2529, cbModelParam._m0[10u].z, fma(_2528, cbModelParam._m0[10u].y, _2527 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2529, cbModelParam._m0[11u].z, fma(_2528, cbModelParam._m0[11u].y, _2527 * cbModelParam._m0[11u].x))), _1963);
            frontier_phi_16_38_ladder = _2674.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2674.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2674.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_16_38_ladder_2;
        _2045 = frontier_phi_16_38_ladder_1;
        _2047 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1963);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2141;
    float _2143;
    float _2145;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2105 = fma(_1184, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1176)) + cbModelParam._m0[21u].w;
        float _2109 = fma(_1184, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1176)) + cbModelParam._m0[22u].w;
        float _2113 = fma(_1184, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1176)) + cbModelParam._m0[23u].w;
        float _2116 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2119 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2122 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2229;
        if (_2116 > 0.0)
        {
            _2229 = abs((1.0 - _2105) / _2116);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2105 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2229 = frontier_phi_28_24_ladder;
        }
        float _2547;
        if (_2119 > 0.0)
        {
            _2547 = abs((1.0 - _2109) / _2119);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2109 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2547 = frontier_phi_40_35_ladder;
        }
        float _2874;
        if (_2122 > 0.0)
        {
            _2874 = abs((1.0 - _2113) / _2122);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2113 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2874 = frontier_phi_50_47_ladder;
        }
        float _2876 = isnan(_2547) ? _2229 : (isnan(_2229) ? _2547 : min(_2229, _2547));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2116) + _2105;
        float _2882 = (_2877 * _2119) + _2109;
        float _2883 = (_2877 * _2122) + _2113;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2885 = (-1.0) - _2884;
        float _2887 = _2884 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2883 > _2887) || ((_2883 < _2885) || ((_2882 > _2887) || ((_2882 < _2885) || ((_2881 < _2885) || (_2881 > _2887))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2883, cbModelParam._m0[17u].z, fma(_2882, cbModelParam._m0[17u].y, _2881 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2883, cbModelParam._m0[18u].z, fma(_2882, cbModelParam._m0[18u].y, _2881 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2883, cbModelParam._m0[19u].z, fma(_2882, cbModelParam._m0[19u].y, _2881 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_25_50_ladder = _3001.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3001.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3001.x * cbModelParam._m0[1u].z;
        }
        _2141 = frontier_phi_25_50_ladder_2;
        _2143 = frontier_phi_25_50_ladder_1;
        _2145 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2125 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2052);
        _2141 = _2125.x * cbModelParam._m0[1u].z;
        _2143 = _2125.y * cbModelParam._m0[1u].z;
        _2145 = _2125.z * cbModelParam._m0[1u].z;
    }
    float _2157 = ((((1.0 - _1144) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1144 * _1132)) * _1116;
    float _2158 = _2157 * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2159 = _2157 * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2160 = _2157 * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2163 = fma(_2160, cbSceneParam._m0[89u].z, fma(_2159, cbSceneParam._m0[89u].y, _2158 * cbSceneParam._m0[89u].x));
    float _2166 = fma(_2160, cbSceneParam._m0[90u].z, fma(_2159, cbSceneParam._m0[90u].y, _2158 * cbSceneParam._m0[90u].x));
    float _2169 = fma(_2160, cbSceneParam._m0[91u].z, fma(_2159, cbSceneParam._m0[91u].y, _2158 * cbSceneParam._m0[91u].x));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2216 = _2203 / _2215;
    float _2217 = _2207 / _2215;
    float _2218 = _2211 / _2215;
    float _2365;
    float _2366;
    float _2367;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2245 = ((uint(_2218 > cbSceneParam._m0[59u].y) + uint(_2218 > cbSceneParam._m0[59u].x)) + uint(_2218 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2246 = _2245 + 43u;
        uint _2254 = _2245 + 44u;
        uint _2262 = _2245 + 45u;
        uint _2270 = _2245 + 46u;
        float _2281 = fma(_2215, cbSceneParam._m0[_2246].w, fma(_2211, cbSceneParam._m0[_2246].z, fma(_2207, cbSceneParam._m0[_2246].y, _2203 * cbSceneParam._m0[_2246].x)));
        float _2285 = fma(_2215, cbSceneParam._m0[_2254].w, fma(_2211, cbSceneParam._m0[_2254].z, fma(_2207, cbSceneParam._m0[_2254].y, _2203 * cbSceneParam._m0[_2254].x)));
        float _2293 = fma(_2215, cbSceneParam._m0[_2270].w, fma(_2211, cbSceneParam._m0[_2270].z, fma(_2207, cbSceneParam._m0[_2270].y, _2203 * cbSceneParam._m0[_2270].x)));
        float _2298 = cbSceneParam._m0[33u].z * _2293;
        float _2300 = cbSceneParam._m0[33u].w * _2293;
        float _2303 = fma(_2215, cbSceneParam._m0[_2262].w, fma(_2211, cbSceneParam._m0[_2262].z, fma(_2207, cbSceneParam._m0[_2262].y, _2203 * cbSceneParam._m0[_2262].x))) / _2293;
        float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
        float _4739 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2358 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 + _2281) / _2293, (_2300 + _2285) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 + _2281) / _2293, (_2285 - _2298) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2298) / _2293, (_2285 - _2300) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2300) / _2293, (_2298 + _2285) / _2293), _2303), 0.0)).x), vec4(0.25)));
        _2365 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
        _2366 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
        _2367 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2365 = 1.0;
        _2366 = 1.0;
        _2367 = 1.0;
    }
    float _2431;
    float _2433;
    float _2435;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2419 = fma(_2215, cbSceneParam._m0[63u].w, fma(_2211, cbSceneParam._m0[63u].z, fma(_2207, cbSceneParam._m0[63u].y, _2203 * cbSceneParam._m0[63u].x)));
        float _2420 = fma(_2215, cbSceneParam._m0[60u].w, fma(_2211, cbSceneParam._m0[60u].z, fma(_2207, cbSceneParam._m0[60u].y, _2203 * cbSceneParam._m0[60u].x))) / _2419;
        float _2421 = fma(_2215, cbSceneParam._m0[61u].w, fma(_2211, cbSceneParam._m0[61u].z, fma(_2207, cbSceneParam._m0[61u].y, _2203 * cbSceneParam._m0[61u].x))) / _2419;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2420 >= cbSceneParam._m0[64u].x) && (_2421 >= cbSceneParam._m0[64u].y)) && (_2420 <= cbSceneParam._m0[64u].z)) && (_2421 <= cbSceneParam._m0[64u].w))
        {
            float _2560 = fma(_2215, cbSceneParam._m0[62u].w, fma(_2211, cbSceneParam._m0[62u].z, fma(_2207, cbSceneParam._m0[62u].y, _2203 * cbSceneParam._m0[62u].x))) / _2419;
            float _2564 = isnan(cbSceneParam._m0[41u].w) ? _2560 : (isnan(_2560) ? cbSceneParam._m0[41u].w : max(_2560, cbSceneParam._m0[41u].w));
            float _2607 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
            float _4755 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
            float _2614 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2420, cbSceneParam._m0[33u].w + _2421), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2420, _2421 - cbSceneParam._m0[33u].z), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].z, _2421 - cbSceneParam._m0[33u].w), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2421), _2564), 0.0)).x), vec4(0.25)));
            float _2618 = 1.0 - (_2614 * cbSceneParam._m0[34u].x);
            float _2619 = 1.0 - (_2614 * cbSceneParam._m0[34u].y);
            float _2620 = 1.0 - (_2614 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2620) ? _2367 : (isnan(_2367) ? _2620 : min(_2367, _2620));
            frontier_phi_37_36_ladder_1 = isnan(_2619) ? _2366 : (isnan(_2366) ? _2619 : min(_2366, _2619));
            frontier_phi_37_36_ladder_2 = isnan(_2618) ? _2365 : (isnan(_2365) ? _2618 : min(_2365, _2618));
        }
        else
        {
            frontier_phi_37_36_ladder = _2367;
            frontier_phi_37_36_ladder_1 = _2366;
            frontier_phi_37_36_ladder_2 = _2365;
        }
        _2431 = frontier_phi_37_36_ladder_2;
        _2433 = frontier_phi_37_36_ladder_1;
        _2435 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2431 = _2365;
        _2433 = _2366;
        _2435 = _2367;
    }
    uvec4 _2440 = floatBitsToUint(cbInstanceData._m0[_1091 + 5u]);
    uint _2442 = _2440.x * 14u;
    uint _2443 = _2442 + 13u;
    float _2450 = _1116 + (-1.0);
    float _2455 = (cbLight._m0[_2443].x * _2450) + 1.0;
    float _2456 = (cbLight._m0[_2443].y * _2450) + 1.0;
    float _2457 = (cbLight._m0[_2443].z * _2450) + 1.0;
    float _2458 = (cbLight._m0[_2443].w * _2450) + 1.0;
    uint _2459 = _2442 + 5u;
    float _2465 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
    uint _2469 = _2442 + 4u;
    float _2479 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
    uint _2483 = _2442 | 1u;
    float _2494 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_953, _954, _955));
    float _2497 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_953, _954, _955));
    float _4791 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _4802 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2502 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * 0.3183098733425140380859375;
    float _2504 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 0.3183098733425140380859375;
    float _2511 = ((cbLight._m0[_2459].x * _2465) * _2504) + (((cbLight._m0[_2469].x * _2431) * _2479) * _2502);
    float _2512 = ((_2465 * cbLight._m0[_2459].y) * _2504) + (((cbLight._m0[_2469].y * _2433) * _2479) * _2502);
    float _2513 = ((_2465 * cbLight._m0[_2459].z) * _2504) + (((cbLight._m0[_2469].z * _2435) * _2479) * _2502);
    uvec4 _2517 = floatBitsToUint(cbLight._m0[_2442 + 12u]);
    bool _2519 = _2517.x == 0u;
    float _2621;
    float _2623;
    float _2625;
    if (_2519)
    {
        _2621 = _2511;
        _2623 = _2512;
        _2625 = _2513;
    }
    else
    {
        uint _2629 = _2442 + 6u;
        float _2645 = (dot(vec3(cbLight._m0[_2442 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2646 = _2645 * _2645;
        float _4813 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2647 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2648 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2621 = (((cbLight._m0[_2629].x * 0.3183098733425140380859375) * _2647) * _2648) + _2511;
        _2623 = (((cbLight._m0[_2629].y * 0.3183098733425140380859375) * _2647) * _2648) + _2512;
        _2625 = (((cbLight._m0[_2629].z * 0.3183098733425140380859375) * _2647) * _2648) + _2513;
    }
    bool _2628 = _2517.y == 0u;
    float _2683;
    float _2685;
    float _2687;
    if (_2628)
    {
        _2683 = _2621;
        _2685 = _2623;
        _2687 = _2625;
    }
    else
    {
        uint _2845 = _2442 + 7u;
        float _2861 = (dot(vec3(cbLight._m0[_2442 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2862 = _2861 * _2861;
        float _4829 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2863 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2864 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _2683 = (((cbLight._m0[_2845].x * 0.3183098733425140380859375) * _2863) * _2864) + _2621;
        _2685 = (((cbLight._m0[_2845].y * 0.3183098733425140380859375) * _2863) * _2864) + _2623;
        _2687 = (((cbLight._m0[_2845].z * 0.3183098733425140380859375) * _2863) * _2864) + _2625;
    }
    uint _2690 = _2442 + 8u;
    float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _956) * 0.949999988079071044921875);
    float _2704 = _2703 * _2703;
    float _2705 = cbLight._m0[_2442].x + _1032;
    float _2706 = cbLight._m0[_2442].y + _1033;
    float _2707 = cbLight._m0[_2442].z + _1034;
    float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
    float _2712 = _2711 * _2705;
    float _2713 = _2711 * _2706;
    float _2714 = _2711 * _2707;
    float _2715 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2442].xyz));
    float _4845 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _4856 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2719 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2720 = dot(vec3(_953, _954, _955), vec3(_2712, _2713, _2714));
    float _4867 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2724 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2712, _2713, _2714));
    float _4878 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2728 = _2704 * _2704;
    float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
    float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2744 = 1.0 - _2704;
    float _2755 = (0.5 / (((_2719 * ((_2718 * _2744) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2744) + _2704) * _2718))) * _2718;
    float _4889 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2757 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
    uint _2771 = _2442 + 9u;
    float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _956) * 0.949999988079071044921875);
    float _2783 = _2782 * _2782;
    float _2784 = cbLight._m0[_2483].x + _1032;
    float _2785 = cbLight._m0[_2483].y + _1033;
    float _2786 = cbLight._m0[_2483].z + _1034;
    float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
    float _2791 = _2790 * _2784;
    float _2792 = _2790 * _2785;
    float _2793 = _2790 * _2786;
    float _2794 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2483].xyz));
    float _4900 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
    float _2798 = dot(vec3(_953, _954, _955), vec3(_2791, _2792, _2793));
    float _4911 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2801 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2802 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2791, _2792, _2793));
    float _4922 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2806 = _2783 * _2783;
    float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
    float _2819 = (exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2820 = 1.0 - _2783;
    float _2830 = (0.5 / (((_2719 * ((_2797 * _2820) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2820) + _2783) * _2797))) * _2797;
    float _4933 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2832 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
    float _2842 = (((_2819 * cbLight._m0[_2771].x) * _2832) * _2465) + ((((cbLight._m0[_2690].x * _2431) * _2743) * _2757) * _2479);
    float _2843 = (((_2819 * cbLight._m0[_2771].y) * _2832) * _2465) + ((((cbLight._m0[_2690].y * _2433) * _2743) * _2757) * _2479);
    float _2844 = (((_2819 * cbLight._m0[_2771].z) * _2832) * _2465) + ((((cbLight._m0[_2690].z * _2435) * _2743) * _2757) * _2479);
    float _2900;
    float _2902;
    float _2904;
    if (_2519)
    {
        _2900 = _2842;
        _2902 = _2843;
        _2904 = _2844;
    }
    else
    {
        uint _2906 = _2442 + 2u;
        uint _2910 = _2442 + 10u;
        float _2924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2906].w)) * _956) * 0.949999988079071044921875);
        float _2925 = _2924 * _2924;
        float _2926 = cbLight._m0[_2906].x + _1032;
        float _2927 = cbLight._m0[_2906].y + _1033;
        float _2928 = cbLight._m0[_2906].z + _1034;
        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
        float _2933 = _2932 * _2926;
        float _2934 = _2932 * _2927;
        float _2935 = _2932 * _2928;
        float _2936 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2906].xyz));
        float _4944 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2940 = dot(vec3(_953, _954, _955), vec3(_2933, _2934, _2935));
        float _4955 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2944 = dot(vec3(cbLight._m0[_2906].xyz), vec3(_2933, _2934, _2935));
        float _4966 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2948 = _2925 * _2925;
        float _2952 = ((_2943 * _2943) * (_2948 + (-1.0))) + 1.0;
        float _2961 = (exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2962 = 1.0 - _2925;
        float _2972 = (0.5 / (((_2719 * ((_2939 * _2962) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2962) + _2925) * _2939))) * _2939;
        float _4977 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2974 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2948 / ((_2952 * _2952) * 3.141590118408203125));
        float _2975 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2900 = (((_2961 * cbLight._m0[_2910].x) * _2974) * _2975) + _2842;
        _2902 = (((_2961 * cbLight._m0[_2910].y) * _2974) * _2975) + _2843;
        _2904 = (((_2961 * cbLight._m0[_2910].z) * _2974) * _2975) + _2844;
    }
    float _3006;
    float _3008;
    float _3010;
    if (_2628)
    {
        _3006 = _2900;
        _3008 = _2902;
        _3010 = _2904;
    }
    else
    {
        uint _3017 = _2442 + 3u;
        uint _3021 = _2442 + 11u;
        float _3035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3017].w)) * _956) * 0.949999988079071044921875);
        float _3036 = _3035 * _3035;
        float _3037 = cbLight._m0[_3017].x + _1032;
        float _3038 = cbLight._m0[_3017].y + _1033;
        float _3039 = cbLight._m0[_3017].z + _1034;
        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
        float _3044 = _3043 * _3037;
        float _3045 = _3043 * _3038;
        float _3046 = _3043 * _3039;
        float _3047 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_3017].xyz));
        float _4993 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3050 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _3051 = dot(vec3(_953, _954, _955), vec3(_3044, _3045, _3046));
        float _5004 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3054 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _3055 = dot(vec3(cbLight._m0[_3017].xyz), vec3(_3044, _3045, _3046));
        float _5015 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3059 = _3036 * _3036;
        float _3063 = ((_3054 * _3054) * (_3059 + (-1.0))) + 1.0;
        float _3072 = (exp2(log2(1.0 - (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3073 = 1.0 - _3036;
        float _3083 = (0.5 / (((_2719 * ((_3050 * _3073) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _3073) + _3036) * _3050))) * _3050;
        float _5026 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3085 = (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_3059 / ((_3063 * _3063) * 3.141590118408203125));
        float _3086 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _3006 = (((_3072 * cbLight._m0[_3021].x) * _3085) * _3086) + _2900;
        _3008 = (((_3072 * cbLight._m0[_3021].y) * _3085) * _3086) + _2902;
        _3010 = (((_3072 * cbLight._m0[_3021].z) * _3085) * _3086) + _2904;
    }
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    if (_2440.y == 0u)
    {
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.x;
        uint _3119 = uint((float(_3107.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _3108))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _3108)));
        float _3129 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3130 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        uint _3133 = uint(isnan(14.0) ? _3130 : (isnan(_3130) ? 14.0 : min(_3130, 14.0)));
        uvec4 _3138 = texelFetch(g_lightClusterGridBuffer, int(((_3133 << 2u) + (_3119 << 6u)) >> 2u));
        uint _3139 = _3138.x;
        uint _3140 = _3107.z;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        if (((((1u << ((_3140 >> 4u) & 15u)) + 4294967295u) & _3139) == 0u) || ((_3140 & 240u) == 0u))
        {
            _3248 = 0.0;
            _3250 = 0.0;
            _3252 = 0.0;
            _3254 = 0.0;
            _3256 = 0.0;
            _3258 = 0.0;
        }
        else
        {
            float _3249;
            float _3251;
            float _3253;
            float _3255;
            float _3257;
            float _3259;
            float _3408 = 0.0;
            float _3409 = 0.0;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            uint _3414 = 0u;
            uint _3423;
            bool _3424;
            for (;;)
            {
                _3423 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3414 << 2u)) >> 2u)).x;
                _3424 = _3423 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3424)
                {
                    frontier_phi_71_pred = _3413;
                    frontier_phi_71_pred_1 = _3412;
                    frontier_phi_71_pred_2 = _3411;
                    frontier_phi_71_pred_3 = _3410;
                    frontier_phi_71_pred_4 = _3409;
                    frontier_phi_71_pred_5 = _3408;
                }
                else
                {
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    uint _3559;
                    _3553 = _3408;
                    _3554 = _3409;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3423;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    for (;;)
                    {
                        uint _3563 = uint(findLSB(_3559)) + (_3414 << 5u);
                        uint _3560 = (_3559 + 4294967295u) & _3559;
                        uint _3565 = _3563 * 48u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 3u)).x));
                        uint _3585 = (_3563 * 48u) + 4u;
                        vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 3u)).x));
                        uint _3604 = (_3563 * 48u) + 8u;
                        vec3 _3615 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3604)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 2u)).x));
                        float _3619 = _3579.x - _2216;
                        float _3620 = _3579.y - _2217;
                        float _3621 = _3579.z - _2218;
                        float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                        float _3625 = inversesqrt(_3622);
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3629 = dot(vec3(_1072, _1075, _1078), vec3(_3626, _3627, _3628));
                        float _3634 = 1.0 - (_3622 * _3579.w);
                        float _5052 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                        float _3636 = sqrt(_3622) * _3598.w;
                        float _3639 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                        float _3640 = _3639 * _3639;
                        float _3643 = ((1.0 - _3640) * _3629) + _3640;
                        float _3646 = _3636 * _3636;
                        float _3650 = ((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3635) / ((_3646 * 0.699999988079071044921875) + 1.0);
                        float _3654 = (-0.0) - _2216;
                        float _3655 = (-0.0) - _2217;
                        float _3656 = (-0.0) - _2218;
                        float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                        float _3661 = _3660 * _3654;
                        float _3662 = _3660 * _3655;
                        float _3663 = _3660 * _3656;
                        float _3670 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                        float _3671 = 1.0 - _1132;
                        float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                        float _3679 = _3678 * _3678;
                        float _3680 = _3679 * _3679;
                        float _3681 = _3661 + _3626;
                        float _3682 = _3662 + _3627;
                        float _3683 = _3663 + _3628;
                        float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                        float _3691 = dot(vec3(_1072, _1075, _1078), vec3(_3661, _3662, _3663));
                        float _5068 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3694 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3695 = dot(vec3(_1072, _1075, _1078), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                        float _5079 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3698 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                        float _3703 = _3639 * _3679;
                        float _3704 = _3703 * _3703;
                        float _3707 = ((1.0 - _3704) * _3629) + _3704;
                        float _5090 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3708 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3709 = 1.0 - _3679;
                        float _3719 = (0.5 / (((_3708 * ((_3694 * _3709) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3679) * _3694))) * _3708;
                        float _5101 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3730 = (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0)))) / ((_3702 * _3702) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125))) * _3635;
                        _3483 = (_3650 * _3598.x) + _3556;
                        _3484 = (_3650 * _3598.y) + _3557;
                        _3485 = (_3650 * _3598.z) + _3558;
                        _3480 = (_3730 * _3615.x) + _3553;
                        _3481 = (_3730 * _3615.y) + _3554;
                        _3482 = (_3730 * _3615.z) + _3555;
                        if (_3560 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3553 = _3480;
                            _3554 = _3481;
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3560;
                        }
                    }
                    frontier_phi_71_pred = _3485;
                    frontier_phi_71_pred_1 = _3484;
                    frontier_phi_71_pred_2 = _3483;
                    frontier_phi_71_pred_3 = _3482;
                    frontier_phi_71_pred_4 = _3481;
                    frontier_phi_71_pred_5 = _3480;
                }
                _3259 = frontier_phi_71_pred;
                _3257 = frontier_phi_71_pred_1;
                _3255 = frontier_phi_71_pred_2;
                _3253 = frontier_phi_71_pred_3;
                _3251 = frontier_phi_71_pred_4;
                _3249 = frontier_phi_71_pred_5;
                uint _3415 = _3414 + 1u;
                if (_3415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3408 = _3249;
                    _3409 = _3251;
                    _3410 = _3253;
                    _3411 = _3255;
                    _3412 = _3257;
                    _3413 = _3259;
                    _3414 = _3415;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3248 = _3249;
            _3250 = _3251;
            _3252 = _3253;
            _3254 = _3255;
            _3256 = _3257;
            _3258 = _3259;
        }
        uvec4 _3262 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3263 = _3262.z;
        uint _3265 = (_3263 >> 8u) & 15u;
        float _3376;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        if (((4294967295u << _3265) & _3139) == 0u)
        {
            _3376 = _3248;
            _3378 = _3250;
            _3380 = _3252;
            _3382 = _3254;
            _3384 = _3256;
            _3386 = _3258;
        }
        else
        {
            float _3401 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _3402 = _3401 * _2216;
            float _3403 = _3401 * _2217;
            float _3404 = _3401 * _2218;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3265 < ((_3263 >> 12u) & 15u))
            {
                float _3377;
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3536 = _3248;
                float _3537 = _3250;
                float _3538 = _3252;
                float _3539 = _3254;
                float _3540 = _3256;
                float _3541 = _3258;
                uint _3542 = _3265;
                uint _3551;
                bool _3552;
                for (;;)
                {
                    _3551 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3542 << 2u)) >> 2u)).x;
                    _3552 = _3551 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3552)
                    {
                        frontier_phi_82_pred = _3541;
                        frontier_phi_82_pred_1 = _3540;
                        frontier_phi_82_pred_2 = _3539;
                        frontier_phi_82_pred_3 = _3538;
                        frontier_phi_82_pred_4 = _3537;
                        frontier_phi_82_pred_5 = _3536;
                    }
                    else
                    {
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _4037;
                        float _4038;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _3757 = _3536;
                        float _3758 = _3537;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        uint _3763 = _3551;
                        uint _3764;
                        vec4 _3789;
                        float _3790;
                        vec4 _3805;
                        vec3 _3817;
                        vec4 _3832;
                        vec4 _3847;
                        float _3893;
                        bool _3894;
                        for (;;)
                        {
                            uint _3774 = ((_3542 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3763));
                            _3764 = (_3763 + 4294967295u) & _3763;
                            uint _3776 = _3774 * 40u;
                            _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            _3790 = _3789.w;
                            uint _3792 = (_3774 * 40u) + 4u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3774 * 40u) + 8u;
                            _3817 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x));
                            uint _3819 = (_3774 * 40u) + 16u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3834 = (_3774 * 40u) + 20u;
                            _3847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 3u)).x));
                            uint _3849 = (_3774 * 40u) + 24u;
                            vec4 _3862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 3u)).x));
                            uint _3868 = (_3774 * 40u) + 28u;
                            vec4 _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            _3893 = fma(_2218, _3881.z, fma(_2217, _3881.y, _3881.x * _2216)) + _3881.w;
                            _3894 = !((fma(_2218, _3862.z, fma(_2217, _3862.y, _3862.x * _2216)) + _3862.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3894)
                            {
                                float _3921 = _3789.x - _2216;
                                float _3922 = _3789.y - _2217;
                                float _3923 = _3789.z - _2218;
                                float _3924 = dot(vec3(_3921, _3922, _3923), vec3(_3921, _3922, _3923));
                                float _3927 = inversesqrt(_3924);
                                float _3928 = _3927 * _3921;
                                float _3929 = _3927 * _3922;
                                float _3930 = _3927 * _3923;
                                float _3934 = 1.0 - (_3924 / (_3790 * _3790));
                                float _5112 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3939 = sqrt(_3924) * _3805.w;
                                float _3941 = 1.39999997615814208984375 / (_3939 + 1.39999997615814208984375);
                                float _3942 = _3941 * _3941;
                                float _3945 = ((1.0 - _3942) * dot(vec3(_3928, _3929, _3930), vec3(_1072, _1075, _1078))) + _3942;
                                float _3948 = _3939 * _3939;
                                float _3952 = (fma(_2218, _3832.z, fma(_2217, _3832.y, _3832.x * _2216)) + _3832.w) / _3893;
                                float _3953 = (fma(_2218, _3847.z, fma(_2217, _3847.y, _3847.x * _2216)) + _3847.w) / _3893;
                                float _3957 = 1.0 - dot(vec2(_3952, _3953), vec2(_3952, _3953));
                                float _5128 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3958 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3959 = _3958 * (((isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0))) * _3935) / ((_3948 * 0.699999988079071044921875) + 1.0));
                                float _3971 = exp2(log2(1.0 / ((_3948 * 3.5) + 5.0)) * 0.25);
                                float _3972 = 1.0 - _1132;
                                float _3979 = sqrt(1.0 - ((1.0 - (_3972 * _3972)) * (1.0 - (_3971 * _3971))));
                                float _3980 = _3979 * _3979;
                                float _3981 = _3980 * _3980;
                                float _3982 = _3928 - _3402;
                                float _3983 = _3929 - _3403;
                                float _3984 = _3930 - _3404;
                                float _3988 = inversesqrt(dot(vec3(_3982, _3983, _3984), vec3(_3982, _3983, _3984)));
                                float _3992 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3402, (-0.0) - _3403, (-0.0) - _3404));
                                float _5139 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _3995 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3996 = dot(vec3(_1072, _1075, _1078), vec3(_3988 * _3982, _3988 * _3983, _3988 * _3984));
                                float _5150 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3999 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _4003 = ((_3999 * _3999) * (_3981 + (-1.0))) + 1.0;
                                float _4004 = _3941 * _3980;
                                float _4005 = _4004 * _4004;
                                float _4011 = ((1.0 - _4005) * dot(vec3(_1072, _1075, _1078), vec3(_3928, _3929, _3930))) + _4005;
                                float _5161 = isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0));
                                float _4012 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _4013 = 1.0 - _3980;
                                float _4023 = (0.5 / (((_4012 * ((_3995 * _4013) + _3980)) + 9.9999999392252902907785028219223e-09) + (((_4012 * _4013) + _3980) * _3995))) * _4012;
                                float _5172 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4033 = (_3958 * _3935) * (((_3981 * 3.1415927410125732421875) * (isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0)))) / ((_4003 * _4003) * ((_3948 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3959 * _3805.z;
                                frontier_phi_88_pred_1 = _3959 * _3805.y;
                                frontier_phi_88_pred_2 = _3959 * _3805.x;
                                frontier_phi_88_pred_3 = _4033 * _3817.z;
                                frontier_phi_88_pred_4 = _4033 * _3817.y;
                                frontier_phi_88_pred_5 = _4033 * _3817.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4042 = frontier_phi_88_pred;
                            _4041 = frontier_phi_88_pred_1;
                            _4040 = frontier_phi_88_pred_2;
                            _4039 = frontier_phi_88_pred_3;
                            _4038 = frontier_phi_88_pred_4;
                            _4037 = frontier_phi_88_pred_5;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            _3744 = _4037 + _3757;
                            _3745 = _4038 + _3758;
                            _3746 = _4039 + _3759;
                            if (_3764 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3757 = _3744;
                                _3758 = _3745;
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3764;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3749;
                        frontier_phi_82_pred_1 = _3748;
                        frontier_phi_82_pred_2 = _3747;
                        frontier_phi_82_pred_3 = _3746;
                        frontier_phi_82_pred_4 = _3745;
                        frontier_phi_82_pred_5 = _3744;
                    }
                    _3387 = frontier_phi_82_pred;
                    _3385 = frontier_phi_82_pred_1;
                    _3383 = frontier_phi_82_pred_2;
                    _3381 = frontier_phi_82_pred_3;
                    _3379 = frontier_phi_82_pred_4;
                    _3377 = frontier_phi_82_pred_5;
                    uint _3543 = _3542 + 1u;
                    if (_3543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3536 = _3377;
                        _3537 = _3379;
                        _3538 = _3381;
                        _3539 = _3383;
                        _3540 = _3385;
                        _3541 = _3387;
                        _3542 = _3543;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3383;
                frontier_phi_63_64_ladder_1 = _3387;
                frontier_phi_63_64_ladder_2 = _3385;
                frontier_phi_63_64_ladder_3 = _3381;
                frontier_phi_63_64_ladder_4 = _3379;
                frontier_phi_63_64_ladder_5 = _3377;
            }
            else
            {
                frontier_phi_63_64_ladder = _3254;
                frontier_phi_63_64_ladder_1 = _3258;
                frontier_phi_63_64_ladder_2 = _3256;
                frontier_phi_63_64_ladder_3 = _3252;
                frontier_phi_63_64_ladder_4 = _3250;
                frontier_phi_63_64_ladder_5 = _3248;
            }
            _3376 = frontier_phi_63_64_ladder_5;
            _3378 = frontier_phi_63_64_ladder_4;
            _3380 = frontier_phi_63_64_ladder_3;
            _3382 = frontier_phi_63_64_ladder;
            _3384 = frontier_phi_63_64_ladder_2;
            _3386 = frontier_phi_63_64_ladder_1;
        }
        float _3391 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3152 = (_3391 * _3382) + _2683;
        _3154 = (_3391 * _3384) + _2685;
        _3156 = (_3391 * _3386) + _2687;
        _3158 = ((_3376 * 0.039999999105930328369140625) * _3391) + _3006;
        _3160 = ((_3378 * 0.039999999105930328369140625) * _3391) + _3008;
        _3162 = ((_3380 * 0.039999999105930328369140625) * _3391) + _3010;
    }
    else
    {
        _3152 = _2683;
        _3154 = _2685;
        _3156 = _2687;
        _3158 = _3006;
        _3160 = _3008;
        _3162 = _3010;
    }
    uint _3168 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _3174 = cbInstanceData._m0[_3168].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_668.x - _665) * _646) + _665)) - _905) * _451) + _905);
    float _3175 = cbInstanceData._m0[_3168].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_668.y - _666) * _646) + _666)) - _906) * _451) + _906);
    float _3176 = cbInstanceData._m0[_3168].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_668.z - _667) * _646) + _667)) - _907) * _451) + _907);
    float _5188 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _5199 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _5210 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _3193 = (((isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3152 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1116))) + ((_3158 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1952)) * cbPerFrame._m0[3u].x)) + _3174;
    float _3195 = (_3175 + ((_3160 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1952)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3154 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1116)));
    float _3197 = (_3176 + ((_3162 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1952)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3156 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1116)));
    float _3198 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
    float _3199 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
    float _3200 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
    float _3206 = cbMtdParam._m0[2u].x * _3174;
    float _3207 = cbMtdParam._m0[2u].y * _3175;
    float _3208 = cbMtdParam._m0[2u].z * _3176;
    float _5236 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3210 = isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0));
    uint _3211 = _1091 + 6u;
    float _3219 = _1052 / cbSceneParam._m0[86u].x;
    float _3220 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _3234 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3219, _3220, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3236 = _3234.x;
    float _3237 = _3234.y;
    float _3238 = _3234.z;
    float _3239 = _3234.w;
    float _3310;
    float _3312;
    float _3314;
    float _3316;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3273 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3274 = _3273 / _975;
        float _3285 = _3274 * _1025;
        float _3286 = _1026 * _3274;
        float _3287 = (-0.0) - _3286;
        float _3288 = _3274 * _1027;
        float _3290 = (cbSceneParam._m0[77u].w * _3287) / _3273;
        float _3291 = _3290 + cbSceneParam._m0[79u].w;
        float _3292 = cbSceneParam._m0[79u].w - _3286;
        float _3298 = sqrt(((_3285 * _3285) + (_3286 * _3286)) + (_3288 * _3288));
        float _3301 = (1.0 - (cbSceneParam._m0[77u].w / _3273)) * _3298;
        float _3306 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3308 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3493;
        if (abs((_3287 - _3290) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3493 = ((((_3291 > 0.0) ? exp2(_3306 * _3291) : (2.0 - exp2(_3308 * _3291))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3301;
        }
        else
        {
            float _3437 = 1.0 / cbSceneParam._m0[80u].x;
            float _3438 = isnan(_3292) ? _3291 : (isnan(_3291) ? _3292 : max(_3291, _3292));
            float _3439 = isnan(_3292) ? _3291 : (isnan(_3291) ? _3292 : min(_3291, _3292));
            float _3448 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : min(_3438, 0.0));
            float _3449 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : min(_3439, 0.0));
            _3493 = ((abs(_3298 / _3287) * cbSceneParam._m0[80u].y) * ((((_3448 - _3449) * 2.0) - ((exp2(_3306 * (isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0)))) - exp2(_3306 * (isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))))) * _3437)) - ((exp2(_3308 * _3448) - exp2(_3308 * _3449)) * _3437))) + (_3301 * cbSceneParam._m0[80u].z);
        }
        vec4 _3495 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3219, _3220, 1.0), 0.0);
        float _3504 = exp2((_3493 * (-1.44269502162933349609375)) * (1.0 - _3495.w));
        float _3505 = log2(_3504);
        float _3521 = log2(_3239);
        _3310 = (exp2(_3521 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].x)) * _3495.x) / cbSceneParam._m0[78u].x)) + _3236;
        _3312 = (exp2(_3521 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].y)) * _3495.y) / cbSceneParam._m0[78u].y)) + _3237;
        _3314 = (exp2(_3521 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].z)) * _3495.z) / cbSceneParam._m0[78u].z)) + _3238;
        _3316 = _3504 * _3239;
    }
    else
    {
        _3310 = _3236;
        _3312 = _3237;
        _3314 = _3238;
        _3316 = _3239;
    }
    bool _3531;
    vec4 _3325;
    vec4 _3347;
    float _3349;
    float _3353;
    float _3354;
    float _3355;
    float _3358;
    float _3361;
    float _3364;
    float _3365;
    bool _3375;
    for (;;)
    {
        _3325 = cbMatDynParam._m0[0u];
        float _3327 = roundEven(_3325.y);
        bool _3328 = _3327 == 3.0;
        float _3329 = log2(_3316);
        float _3333 = exp2(_3329 * cbSceneParam._m0[78u].x);
        float _3334 = exp2(_3329 * cbSceneParam._m0[78u].y);
        float _3335 = exp2(_3329 * cbSceneParam._m0[78u].z);
        float _3336 = _3333 * _3198;
        float _3337 = _3334 * _3199;
        float _3338 = _3335 * _3200;
        float _3345 = _1041 + (-0.5);
        _3347 = cbMtdParam._m0[1u];
        _3349 = _3347.y * _3345;
        float _3352 = (_3327 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3353 = _3352 * (_3328 ? _3336 : (_3336 + (cbSceneParam._m0[72u].w * _3310)));
        _3354 = _3352 * (_3328 ? _3337 : (_3337 + (cbSceneParam._m0[72u].w * _3312)));
        _3355 = _3352 * (_3328 ? _3338 : (_3338 + (cbSceneParam._m0[72u].w * _3314)));
        _3358 = ((_3206 * _3210) * _3333) * _3352;
        _3361 = ((_3207 * _3210) * _3334) * _3352;
        _3364 = ((_3208 * _3210) * _3335) * _3352;
        _3365 = _3345 * 0.999000012874603271484375;
        _3375 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3375)
        {
            if ((cbInstanceData._m0[_1091 + 7u].x + _3365) < 0.5)
            {
                _3531 = true;
                break;
            }
        }
        uint _3472 = _1092 + uint(_3325.w);
        if ((cbInstanceData._m0[_3472].w < 1.0) && ((cbInstanceData._m0[_3472].w + _3365) < 0.5))
        {
            _3531 = true;
            break;
        }
        if ((_3349 + 1.0) < _3347.x)
        {
            _3531 = true;
            break;
        }
        _3531 = false;
        break;
    }
    float _3735;
    if (_3531)
    {
        discard_state = true;
        _3735 = 0.0;
    }
    else
    {
        _3735 = cbInstanceData._m0[_3211].w;
    }
    SV_Target.x = _3353;
    SV_Target.y = _3354;
    SV_Target.z = _3355;
    SV_Target.w = _3735;
    SV_Target_1.x = _3358;
    SV_Target_1.y = _3361;
    SV_Target_1.z = _3364;
    SV_Target_1.w = cbInstanceData._m0[_3211].w;
    discard_exit();
}


