#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1271;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _260 = _254.x * cbMtdParam._m0[9u].x;
    float _261 = _254.y * cbMtdParam._m0[9u].y;
    float _262 = _254.z * cbMtdParam._m0[9u].z;
    float _306 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _321 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _338 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _340 = _338.x;
    float _341 = _338.y;
    float _342 = _338.z;
    float _351 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _3613 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _361 = ((_321.z - _342) * _352) + _342;
    float _365 = ((((_321.x - _340) * _352) + _340) * 2.0) + (-1.0);
    float _367 = ((((_321.y - _341) * _352) + _341) * 2.0) + (-1.0);
    float _368 = dot(vec2(_365, _367), vec2(_365, _367));
    float _3624 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))));
    float _393 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _396 = (_393 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _397 = (_393 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _422 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _426 = cbPerFrame._m0[22u].x * 2.0;
    float _427 = _426 * cbMtdParam._m0[22u].y;
    float _434 = ((_422.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _436 = (-0.0) - (cbMtdParam._m0[22u].x * ((_422.x * 0.5) + (-0.25)));
    float _438 = fract(_427);
    float _440 = fract(_427 + 0.5);
    float _451 = abs((_438 * 2.0) + (-1.0));
    vec4 _468 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_438 * _436) + _396) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_434 * _438) + _397) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    vec4 _473 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_440 * _436) + _396) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_434 * _440) + _397) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _515 = (cbMtdParam._m0[23u].y * _393) + TEXCOORD_6.w;
    float _516 = (cbMtdParam._m0[23u].z * _393) + TEXCOORD_9.w;
    vec4 _529 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _533 = _426 * cbMtdParam._m0[18u].x;
    float _538 = ((_529.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _540 = (-0.0) - (cbMtdParam._m0[20u].z * ((_529.x * 0.5) + (-0.25)));
    float _541 = fract(_533);
    float _543 = fract(_533 + 0.5);
    float _544 = _541 * _540;
    float _545 = _538 * _541;
    float _548 = _543 * _540;
    float _549 = _538 * _543;
    float _554 = abs((_541 * 2.0) + (-1.0));
    vec4 _570 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_544 + _515) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_545 + _516) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _574 = _570.z;
    vec4 _575 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_548 + _515) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_549 + _516) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _605 = (cbMtdParam._m0[22u].w * _393) + TEXCOORD_6.w;
    float _606 = (cbMtdParam._m0[23u].x * _393) + TEXCOORD_9.w;
    vec4 _626 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_544 + _605) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_545 + _606) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    vec4 _631 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_548 + _605) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_549 + _606) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _651 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3635 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _660 = (((_652 * _652) * (3.0 - (_652 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _693 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _605) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _606) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3646 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _698 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_631.x - _628) * _554) + _628)) * _660) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_575.x - _572) * _554) + _572)))) * _694;
    float _702 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_631.y - _629) * _554) + _629)) * _660) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_575.y - _573) * _554) + _573)))) * _694;
    float _706 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_631.z - _630) * _554) + _630)) * _660) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_575.z - _574) * _554) + _574)))) * _694;
    float _710 = _698 - (_698 * _306);
    float _711 = _702 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _702);
    float _712 = _706 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _706);
    float _719 = (_306 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _306))) * (cbMtdParam._m0[20u].x + 1.0);
    float _3657 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _733 = (cbMtdParam._m0[20u].y * _365) + _365;
    float _734 = (cbMtdParam._m0[20u].y * _367) + _367;
    float _737 = fma(_373, _225 * NORMAL.x, fma(_734, _232 * TANGENT.x, (_218 * _210) * _733));
    float _740 = fma(_373, _225 * NORMAL.y, fma(_734, _232 * TANGENT.y, (_218 * _211) * _733));
    float _743 = fma(_373, _225 * NORMAL.z, fma(_734, _232 * TANGENT.z, (_218 * _212) * _733));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    float _748 = _747 * _737;
    float _749 = _747 * _740;
    float _750 = _747 * _743;
    float _3668 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _751 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3690 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3701 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _770 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _821 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _811);
    float _822 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _811);
    float _823 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _811);
    float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
    float _828 = _821 * _827;
    float _829 = _822 * _827;
    float _830 = _823 * _827;
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _857 = fma(_750, cbSceneParam._m0[5u].z, fma(_749, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _748));
    float _860 = fma(_750, cbSceneParam._m0[6u].z, fma(_749, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _748));
    float _863 = fma(_750, cbSceneParam._m0[7u].z, fma(_749, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _748));
    uint _876 = uint(roundEven(NORMAL.w)) * 13u;
    uint _877 = _876 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3712 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _901 = _898.x * TEXCOORD_3.w;
    float _902 = dot(vec3(_748, _749, _750), vec3(_828, _829, _830));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _748) - _828;
    float _910 = (_905 * _749) - _829;
    float _911 = (_905 * _750) - _830;
    float _915 = abs(dot(vec3(_828, _829, _830), vec3(_748, _749, _750)));
    float _3745 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_751);
    float _929 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1270;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1000 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1004 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1028 = _961 + _748;
        float _1029 = _965 + _749;
        float _1030 = _969 + _750;
        float _1040 = fma(_1030, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028)) - _996;
        float _1041 = fma(_1030, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028)) - _1000;
        float _1042 = fma(_1030, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028)) - _1004;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1098 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1064.x + (-0.5));
        float _1100 = _1098 * (_1064.y + (-0.5));
        float _1101 = _1098 * (_1064.z + (-0.5));
        float _1108 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1071.x + (-0.5));
        float _1110 = _1108 * (_1071.y + (-0.5));
        float _1111 = _1108 * (_1071.z + (-0.5));
        float _1118 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1078.x + (-0.5));
        float _1120 = _1118 * (_1078.y + (-0.5));
        float _1121 = _1118 * (_1078.z + (-0.5));
        float _1128 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1085.x + (-0.5));
        float _1130 = _1128 * (_1085.y + (-0.5));
        float _1131 = _1128 * (_1085.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1152 = (dot(vec3(_748, _749, _750), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1162 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3793 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1164 + 1.0))) + _1169) * _1132;
        float _1179 = _1100 * 0.5;
        float _1180 = _1110 * 0.5;
        float _1181 = _1120 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_748, _749, _750), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3826 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1206 + 1.0))) + _1211) * _1133;
        float _1221 = _1101 * 0.5;
        float _1222 = _1111 * 0.5;
        float _1223 = _1121 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_748, _749, _750), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3859 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1248 + 1.0))) + _1253) * _1134;
        _1270 = _1101;
        _1272 = _1100;
        _1273 = _1099;
        _1274 = _1111;
        _1275 = _1110;
        _1276 = _1109;
        _1277 = _1121;
        _1278 = _1120;
        _1279 = _1119;
        _1280 = _1134;
        _1281 = _1133;
        _1282 = _1132;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _1271;
        _1272 = _1271;
        _1273 = _1271;
        _1274 = _1271;
        _1275 = _1271;
        _1276 = _1271;
        _1277 = _1271;
        _1278 = _1271;
        _1279 = _1271;
        _1280 = _1271;
        _1281 = _1271;
        _1282 = _1271;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1315 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1319 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1342 = _961 + _748;
        float _1343 = _965 + _749;
        float _1344 = _969 + _750;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_748, _749, _750), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3922 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_748, _749, _750), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3955 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_748, _749, _750), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _3988 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1271;
        _1581 = _1271;
        _1582 = _1271;
        _1583 = _1271;
        _1584 = _1271;
        _1585 = _1271;
        _1586 = _1271;
        _1587 = _1271;
        _1588 = _1271;
        _1589 = _1271;
        _1590 = _1271;
        _1591 = _1271;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1283)) + _1283;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1285)) + _1285;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _909 * 0.5;
    float _1649 = _910 * 0.5;
    float _1650 = _911 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1270, _1274, _1277, _1280));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _751);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1778 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1781 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1809 = frontier_phi_14_12_ladder;
        }
        float _2010;
        if (_1778 > 0.0)
        {
            _2010 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2010 = frontier_phi_23_19_ladder;
        }
        float _2253;
        if (_1781 > 0.0)
        {
            _2253 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2253 = frontier_phi_35_30_ladder;
        }
        float _2255 = isnan(_2010) ? _1809 : (isnan(_1809) ? _2010 : min(_1809, _2010));
        float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
        float _2260 = (_2256 * _1775) + _1764;
        float _2261 = (_2256 * _1778) + _1768;
        float _2262 = (_2256 * _1781) + _1772;
        float _2263 = _2256 * 9.9999997473787516355514526367188e-05;
        float _2265 = (-1.0) - _2263;
        float _2267 = _2263 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2262 > _2267) || ((_2262 < _2265) || ((_2261 > _2267) || ((_2261 < _2265) || ((_2260 < _2265) || (_2260 > _2267))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2262, cbModelParam._m0[9u].z, fma(_2261, cbModelParam._m0[9u].y, _2260 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2262, cbModelParam._m0[10u].z, fma(_2261, cbModelParam._m0[10u].y, _2260 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2262, cbModelParam._m0[11u].z, fma(_2261, cbModelParam._m0[11u].y, _2260 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_13_35_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_13_35_ladder_2;
        _1799 = frontier_phi_13_35_ladder_1;
        _1801 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1717);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _751);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1873 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1876 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _2015;
        if (_1870 > 0.0)
        {
            _2015 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2280;
        if (_1873 > 0.0)
        {
            _2280 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2280 = frontier_phi_37_32_ladder;
        }
        float _2485;
        if (_1876 > 0.0)
        {
            _2485 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2485 = frontier_phi_46_43_ladder;
        }
        float _2487 = isnan(_2280) ? _2015 : (isnan(_2015) ? _2280 : min(_2015, _2280));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1870) + _1859;
        float _2493 = (_2488 * _1873) + _1863;
        float _2494 = (_2488 * _1876) + _1867;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_22_46_ladder = _2722.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2722.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2722.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_22_46_ladder_2;
        _1897 = frontier_phi_22_46_ladder_1;
        _1899 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1806);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1911 = ((((1.0 - _929) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_929 * _917)) * _901;
    float _1912 = _1911 * ((cbModelParam._m0[1u].w * (_1895 - _1797)) + _1797);
    float _1913 = _1911 * ((cbModelParam._m0[1u].w * (_1897 - _1799)) + _1799);
    float _1914 = _1911 * ((cbModelParam._m0[1u].w * (_1899 - _1801)) + _1801);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_876 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _901 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1969 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1973 = _1935 | 1u;
    float _1984 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_748, _749, _750));
    float _1987 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_748, _749, _750));
    float _4124 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _4135 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1992 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1994 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _2001 = ((cbLight._m0[_1952].x * _1958) * _1994) + ((cbLight._m0[_1962].x * _1969) * _1992);
    float _2002 = ((_1958 * cbLight._m0[_1952].y) * _1994) + ((_1969 * cbLight._m0[_1962].y) * _1992);
    float _2003 = ((_1958 * cbLight._m0[_1952].z) * _1994) + ((_1969 * cbLight._m0[_1962].z) * _1992);
    uvec4 _2007 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2009 = _2007.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_2009)
    {
        _2020 = _2001;
        _2022 = _2002;
        _2024 = _2003;
    }
    else
    {
        uint _2028 = _1935 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_748, _749, _750)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4146 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2047 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _2001;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _2002;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _2003;
    }
    bool _2027 = _2007.y == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2027)
    {
        _2065 = _2020;
        _2067 = _2022;
        _2069 = _2024;
    }
    else
    {
        uint _2224 = _1935 + 7u;
        float _2240 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_748, _749, _750)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4162 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2243 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2065 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2020;
        _2067 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2022;
        _2069 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2024;
    }
    uint _2072 = _1935 + 8u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _751) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1935].x + _828;
    float _2088 = cbLight._m0[_1935].y + _829;
    float _2089 = cbLight._m0[_1935].z + _830;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1935].xyz));
    float _4178 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2101 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2102 = dot(vec3(_748, _749, _750), vec3(_2094, _2095, _2096));
    float _4200 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2094, _2095, _2096));
    float _4211 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2086 * _2086;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2126 = 1.0 - _2086;
    float _2137 = (0.5 / (((_2101 * ((_2100 * _2126) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2126) + _2086) * _2100))) * _2100;
    float _4222 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    uint _2150 = _1935 + 9u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _751) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_1973].x + _828;
    float _2164 = cbLight._m0[_1973].y + _829;
    float _2165 = cbLight._m0[_1973].z + _830;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1973].xyz));
    float _4233 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2177 = dot(vec3(_748, _749, _750), vec3(_2170, _2171, _2172));
    float _4244 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2170, _2171, _2172));
    float _4255 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2162 * _2162;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2199 = 1.0 - _2162;
    float _2209 = (0.5 / (((_2101 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2199) + _2162) * _2176))) * _2176;
    float _4266 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    float _2221 = (((_2198 * cbLight._m0[_2150].x) * _2211) * _1958) + (((_2125 * cbLight._m0[_2072].x) * _2139) * _1969);
    float _2222 = (((_2198 * cbLight._m0[_2150].y) * _2211) * _1958) + (((_2125 * cbLight._m0[_2072].y) * _2139) * _1969);
    float _2223 = (((_2198 * cbLight._m0[_2150].z) * _2211) * _1958) + (((_2125 * cbLight._m0[_2072].z) * _2139) * _1969);
    float _2285;
    float _2287;
    float _2289;
    if (_2009)
    {
        _2285 = _2221;
        _2287 = _2222;
        _2289 = _2223;
    }
    else
    {
        uint _2291 = _1935 + 2u;
        uint _2295 = _1935 + 10u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _751) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _828;
        float _2312 = cbLight._m0[_2291].y + _829;
        float _2313 = cbLight._m0[_2291].z + _830;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2291].xyz));
        float _4277 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2325 = dot(vec3(_748, _749, _750), vec3(_2318, _2319, _2320));
        float _4288 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4299 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2346 = (exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2347 = 1.0 - _2310;
        float _2357 = (0.5 / (((_2101 * ((_2324 * _2347) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2347) + _2310) * _2324))) * _2324;
        float _4310 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2285 = (((_2346 * cbLight._m0[_2295].x) * _2359) * _2360) + _2221;
        _2287 = (((_2346 * cbLight._m0[_2295].y) * _2359) * _2360) + _2222;
        _2289 = (((_2346 * cbLight._m0[_2295].z) * _2359) * _2360) + _2223;
    }
    float _2395;
    float _2397;
    float _2399;
    if (_2027)
    {
        _2395 = _2285;
        _2397 = _2287;
        _2399 = _2289;
    }
    else
    {
        uint _2406 = _1935 + 3u;
        uint _2410 = _1935 + 11u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _751) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _828;
        float _2427 = cbLight._m0[_2406].y + _829;
        float _2428 = cbLight._m0[_2406].z + _830;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2406].xyz));
        float _4326 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2440 = dot(vec3(_748, _749, _750), vec3(_2433, _2434, _2435));
        float _4337 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4348 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2462 = 1.0 - _2425;
        float _2472 = (0.5 / (((_2101 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2462) + _2425) * _2439))) * _2439;
        float _4359 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2395 = (((_2461 * cbLight._m0[_2410].x) * _2474) * _2475) + _2285;
        _2397 = (((_2461 * cbLight._m0[_2410].y) * _2474) * _2475) + _2287;
        _2399 = (((_2461 * cbLight._m0[_2410].z) * _2474) * _2475) + _2289;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1933.y == 0u)
    {
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2550;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2550;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2550;
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2566)));
        float _2587 = (log2(_2553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            uint _2885 = 0u;
            uint _2894;
            bool _2895;
            for (;;)
            {
                _2894 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                _2895 = _2894 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2895)
                {
                    frontier_phi_61_pred = _2879;
                    frontier_phi_61_pred_1 = _2884;
                    frontier_phi_61_pred_2 = _2883;
                    frontier_phi_61_pred_3 = _2882;
                    frontier_phi_61_pred_4 = _2881;
                    frontier_phi_61_pred_5 = _2880;
                }
                else
                {
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    uint _3009;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2894;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    for (;;)
                    {
                        uint _3013 = uint(findLSB(_3009)) + (_2885 << 5u);
                        uint _3010 = (_3009 + 4294967295u) & _3009;
                        uint _3015 = _3013 * 48u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3035 = (_3013 * 48u) + 4u;
                        vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3054 = (_3013 * 48u) + 8u;
                        vec3 _3065 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x));
                        float _3069 = _3029.x - _2551;
                        float _3070 = _3029.y - _2552;
                        float _3071 = _3029.z - _2553;
                        float _3072 = dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071));
                        float _3075 = inversesqrt(_3072);
                        float _3076 = _3075 * _3069;
                        float _3077 = _3075 * _3070;
                        float _3078 = _3075 * _3071;
                        float _3079 = dot(vec3(_857, _860, _863), vec3(_3076, _3077, _3078));
                        float _3084 = 1.0 - (_3072 * _3029.w);
                        float _4385 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3086 = sqrt(_3072) * _3048.w;
                        float _3089 = 1.39999997615814208984375 / (_3086 + 1.39999997615814208984375);
                        float _3090 = _3089 * _3089;
                        float _3093 = ((1.0 - _3090) * _3079) + _3090;
                        float _3096 = _3086 * _3086;
                        float _3100 = ((isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))) * _3085) / ((_3096 * 0.699999988079071044921875) + 1.0);
                        float _3104 = (-0.0) - _2551;
                        float _3105 = (-0.0) - _2552;
                        float _3106 = (-0.0) - _2553;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3121 = exp2(log2(1.0 / ((_3096 * 3.5) + 5.0)) * 0.25);
                        float _3122 = 1.0 - _917;
                        float _3129 = sqrt(1.0 - ((1.0 - (_3122 * _3122)) * (1.0 - (_3121 * _3121))));
                        float _3130 = _3129 * _3129;
                        float _3131 = _3130 * _3130;
                        float _3132 = _3111 + _3076;
                        float _3133 = _3112 + _3077;
                        float _3134 = _3113 + _3078;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3142 = dot(vec3(_857, _860, _863), vec3(_3111, _3112, _3113));
                        float _4401 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3146 = dot(vec3(_857, _860, _863), vec3(_3138 * _3132, _3138 * _3133, _3138 * _3134));
                        float _4412 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3153 = ((_3149 * _3149) * (_3131 + (-1.0))) + 1.0;
                        float _3154 = _3089 * _3130;
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3079) + _3155;
                        float _4423 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3160 = 1.0 - _3130;
                        float _3170 = (0.5 / (((_3159 * ((_3145 * _3160) + _3130)) + 9.9999999392252902907785028219223e-09) + (((_3159 * _3160) + _3130) * _3145))) * _3159;
                        float _4434 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3181 = (((_3131 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3153 * _3153) * ((_3096 * 2.1991131305694580078125) + 3.141590118408203125))) * _3085;
                        _2938 = (_3100 * _3048.x) + _3006;
                        _2939 = (_3100 * _3048.y) + _3007;
                        _2940 = (_3100 * _3048.z) + _3008;
                        _2935 = (_3181 * _3065.x) + _3003;
                        _2936 = (_3181 * _3065.y) + _3004;
                        _2937 = (_3181 * _3065.z) + _3005;
                        if (_3010 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _3010;
                        }
                    }
                    frontier_phi_61_pred = _2935;
                    frontier_phi_61_pred_1 = _2940;
                    frontier_phi_61_pred_2 = _2939;
                    frontier_phi_61_pred_3 = _2938;
                    frontier_phi_61_pred_4 = _2937;
                    frontier_phi_61_pred_5 = _2936;
                }
                _2728 = frontier_phi_61_pred;
                _2738 = frontier_phi_61_pred_1;
                _2736 = frontier_phi_61_pred_2;
                _2734 = frontier_phi_61_pred_3;
                _2732 = frontier_phi_61_pred_4;
                _2730 = frontier_phi_61_pred_5;
                uint _2886 = _2885 + 1u;
                if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2879 = _2728;
                    _2880 = _2730;
                    _2881 = _2732;
                    _2882 = _2734;
                    _2883 = _2736;
                    _2884 = _2738;
                    _2885 = _2886;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((4294967295u << _2744) & _2597) == 0u)
        {
            _2847 = _2727;
            _2849 = _2729;
            _2851 = _2731;
            _2853 = _2733;
            _2855 = _2735;
            _2857 = _2737;
        }
        else
        {
            float _2872 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
            float _2873 = _2872 * _2551;
            float _2874 = _2872 * _2552;
            float _2875 = _2872 * _2553;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2986 = _2727;
                float _2987 = _2729;
                float _2988 = _2731;
                float _2989 = _2733;
                float _2990 = _2735;
                float _2991 = _2737;
                uint _2992 = _2744;
                uint _3001;
                bool _3002;
                for (;;)
                {
                    _3001 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                    _3002 = _3001 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3002)
                    {
                        frontier_phi_67_pred = _2989;
                        frontier_phi_67_pred_1 = _2990;
                        frontier_phi_67_pred_2 = _2991;
                        frontier_phi_67_pred_3 = _2988;
                        frontier_phi_67_pred_4 = _2987;
                        frontier_phi_67_pred_5 = _2986;
                    }
                    else
                    {
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        uint _3205 = _3001;
                        uint _3206;
                        vec4 _3231;
                        float _3232;
                        vec4 _3247;
                        vec3 _3259;
                        vec4 _3274;
                        vec4 _3289;
                        float _3335;
                        bool _3336;
                        for (;;)
                        {
                            uint _3216 = ((_2992 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3205));
                            _3206 = (_3205 + 4294967295u) & _3205;
                            uint _3218 = _3216 * 40u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3232 = _3231.w;
                            uint _3234 = (_3216 * 40u) + 4u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3216 * 40u) + 8u;
                            _3259 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x));
                            uint _3261 = (_3216 * 40u) + 16u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3216 * 40u) + 20u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3216 * 40u) + 24u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3310 = (_3216 * 40u) + 28u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3335 = fma(_2553, _3323.z, fma(_2552, _3323.y, _3323.x * _2551)) + _3323.w;
                            _3336 = !((fma(_2553, _3304.z, fma(_2552, _3304.y, _3304.x * _2551)) + _3304.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3336)
                            {
                                float _3363 = _3231.x - _2551;
                                float _3364 = _3231.y - _2552;
                                float _3365 = _3231.z - _2553;
                                float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                                float _3369 = inversesqrt(_3366);
                                float _3370 = _3369 * _3363;
                                float _3371 = _3369 * _3364;
                                float _3372 = _3369 * _3365;
                                float _3376 = 1.0 - (_3366 / (_3232 * _3232));
                                float _4445 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3381 = sqrt(_3366) * _3247.w;
                                float _3383 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                                float _3384 = _3383 * _3383;
                                float _3387 = ((1.0 - _3384) * dot(vec3(_3370, _3371, _3372), vec3(_857, _860, _863))) + _3384;
                                float _3390 = _3381 * _3381;
                                float _3394 = (fma(_2553, _3274.z, fma(_2552, _3274.y, _3274.x * _2551)) + _3274.w) / _3335;
                                float _3395 = (fma(_2553, _3289.z, fma(_2552, _3289.y, _3289.x * _2551)) + _3289.w) / _3335;
                                float _3399 = 1.0 - dot(vec2(_3394, _3395), vec2(_3394, _3395));
                                float _4461 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3401 = _3400 * (((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3377) / ((_3390 * 0.699999988079071044921875) + 1.0));
                                float _3413 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                                float _3414 = 1.0 - _917;
                                float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                                float _3422 = _3421 * _3421;
                                float _3423 = _3422 * _3422;
                                float _3424 = _3370 - _2873;
                                float _3425 = _3371 - _2874;
                                float _3426 = _3372 - _2875;
                                float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                                float _3434 = dot(vec3(_857, _860, _863), vec3((-0.0) - _2873, (-0.0) - _2874, (-0.0) - _2875));
                                float _4472 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3438 = dot(vec3(_857, _860, _863), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                                float _4483 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                                float _3446 = _3383 * _3422;
                                float _3447 = _3446 * _3446;
                                float _3453 = ((1.0 - _3447) * dot(vec3(_857, _860, _863), vec3(_3370, _3371, _3372))) + _3447;
                                float _4494 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3455 = 1.0 - _3422;
                                float _3465 = (0.5 / (((_3454 * ((_3437 * _3455) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3422) * _3437))) * _3454;
                                float _4505 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3475 = (_3400 * _3377) * (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3445 * _3445) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3475 * _3259.x;
                                frontier_phi_73_pred_1 = _3475 * _3259.y;
                                frontier_phi_73_pred_2 = _3401 * _3247.z;
                                frontier_phi_73_pred_3 = _3401 * _3247.y;
                                frontier_phi_73_pred_4 = _3401 * _3247.x;
                                frontier_phi_73_pred_5 = _3475 * _3259.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3479 = frontier_phi_73_pred;
                            _3480 = frontier_phi_73_pred_1;
                            _3484 = frontier_phi_73_pred_2;
                            _3483 = frontier_phi_73_pred_3;
                            _3482 = frontier_phi_73_pred_4;
                            _3481 = frontier_phi_73_pred_5;
                            _3189 = _3482 + _3202;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3186 = _3479 + _3199;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            if (_3206 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3206;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3189;
                        frontier_phi_67_pred_1 = _3190;
                        frontier_phi_67_pred_2 = _3191;
                        frontier_phi_67_pred_3 = _3188;
                        frontier_phi_67_pred_4 = _3187;
                        frontier_phi_67_pred_5 = _3186;
                    }
                    _2854 = frontier_phi_67_pred;
                    _2856 = frontier_phi_67_pred_1;
                    _2858 = frontier_phi_67_pred_2;
                    _2852 = frontier_phi_67_pred_3;
                    _2850 = frontier_phi_67_pred_4;
                    _2848 = frontier_phi_67_pred_5;
                    uint _2993 = _2992 + 1u;
                    if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2986 = _2848;
                        _2987 = _2850;
                        _2988 = _2852;
                        _2989 = _2854;
                        _2990 = _2856;
                        _2991 = _2858;
                        _2992 = _2993;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2856;
                frontier_phi_55_56_ladder_1 = _2858;
                frontier_phi_55_56_ladder_2 = _2854;
                frontier_phi_55_56_ladder_3 = _2852;
                frontier_phi_55_56_ladder_4 = _2850;
                frontier_phi_55_56_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_55_56_ladder = _2735;
                frontier_phi_55_56_ladder_1 = _2737;
                frontier_phi_55_56_ladder_2 = _2733;
                frontier_phi_55_56_ladder_3 = _2731;
                frontier_phi_55_56_ladder_4 = _2729;
                frontier_phi_55_56_ladder_5 = _2727;
            }
            _2847 = frontier_phi_55_56_ladder_5;
            _2849 = frontier_phi_55_56_ladder_4;
            _2851 = frontier_phi_55_56_ladder_3;
            _2853 = frontier_phi_55_56_ladder_2;
            _2855 = frontier_phi_55_56_ladder;
            _2857 = frontier_phi_55_56_ladder_1;
        }
        float _2862 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2610 = (_2862 * _2853) + _2065;
        _2612 = (_2862 * _2855) + _2067;
        _2614 = (_2862 * _2857) + _2069;
        _2616 = ((_2847 * 0.039999999105930328369140625) * _2862) + _2395;
        _2618 = ((_2849 * 0.039999999105930328369140625) * _2862) + _2397;
        _2620 = ((_2851 * 0.039999999105930328369140625) * _2862) + _2399;
    }
    else
    {
        _2610 = _2065;
        _2612 = _2067;
        _2614 = _2069;
        _2616 = _2395;
        _2618 = _2397;
        _2620 = _2399;
    }
    uint _2626 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _2632 = cbInstanceData._m0[_2626].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_473.x - _470) * _451) + _470)) - _710) * _720) + _710);
    float _2633 = cbInstanceData._m0[_2626].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_473.y - _471) * _451) + _471)) - _711) * _720) + _711);
    float _2634 = cbInstanceData._m0[_2626].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_473.z - _472) * _451) + _472)) - _712) * _720) + _712);
    float _4521 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4532 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4543 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2651 = (((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2610 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _901))) + ((_2616 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1706)) * cbPerFrame._m0[3u].x)) + _2632;
    float _2653 = (_2633 + ((_2618 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1706)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2612 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _901)));
    float _2655 = (_2634 + ((_2620 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1706)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2614 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _901)));
    float _4569 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2668 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    uint _2669 = _876 + 6u;
    float _2677 = _836 / cbSceneParam._m0[86u].x;
    float _2678 = _837 / cbSceneParam._m0[86u].y;
    vec4 _2692 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, (log2((isnan(cbSceneParam._m0[77u].w) ? _770 : (isnan(_770) ? cbSceneParam._m0[77u].w : min(_770, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2694 = _2692.x;
    float _2695 = _2692.y;
    float _2696 = _2692.z;
    float _2697 = _2692.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_770 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_770) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _770 : min(cbSceneParam._m0[80u].w, _770));
        float _2753 = _2752 / _770;
        float _2764 = _2753 * _821;
        float _2765 = _822 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2767 = _2753 * _823;
        float _2769 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2765;
        float _2777 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2948;
        if (abs((_2766 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2948 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2908 = 1.0 / cbSceneParam._m0[80u].x;
            float _2909 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2910 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            _2948 = ((abs(_2777 / _2766) * cbSceneParam._m0[80u].y) * ((((_2919 - _2920) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))))) * _2908)) - ((exp2(_2787 * _2919) - exp2(_2787 * _2920)) * _2908))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2950 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, 1.0), 0.0);
        float _2959 = exp2((_2948 * (-1.44269502162933349609375)) * (1.0 - _2950.w));
        float _2960 = log2(_2959);
        float _2976 = log2(_2697);
        _2789 = (exp2(_2976 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].x)) * _2950.x) / cbSceneParam._m0[78u].x)) + _2694;
        _2791 = (exp2(_2976 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].y)) * _2950.y) / cbSceneParam._m0[78u].y)) + _2695;
        _2793 = (exp2(_2976 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].z)) * _2950.z) / cbSceneParam._m0[78u].z)) + _2696;
        _2795 = _2959 * _2697;
    }
    else
    {
        _2789 = _2694;
        _2791 = _2695;
        _2793 = _2696;
        _2795 = _2697;
    }
    float _2806 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2807 = _2806 == 3.0;
    float _2808 = log2(_2795);
    float _2812 = exp2(_2808 * cbSceneParam._m0[78u].x);
    float _2813 = exp2(_2808 * cbSceneParam._m0[78u].y);
    float _2814 = exp2(_2808 * cbSceneParam._m0[78u].z);
    float _2815 = _2812 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0)));
    float _2816 = _2813 * (isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0)));
    float _2817 = _2814 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0)));
    float _2826 = (_2806 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2826 * (_2807 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.y = _2826 * (_2807 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.z = _2826 * (_2807 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.w = cbInstanceData._m0[_2669].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2632) * _2668) * _2812) * _2826;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2633) * _2668) * _2813) * _2826;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2634) * _2668) * _2814) * _2826;
    SV_Target_1.w = cbInstanceData._m0[_2669].w;
}


