#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_24;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 6) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 8) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_22;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1532;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[8u].w));
    vec4 _335 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _364 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w));
    float _387 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625;
    float _395 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * _387)) * (cbMtdParam._m0[17u].w + 1.0);
    float _3894 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _403 = (_396 * ((_364.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _404 = (_396 * ((_364.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _405 = (_396 * ((_364.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    float _411 = (TEXCOORD_9.x - ((cbMtdParam._m0[19u].y * (1.0 - TEXCOORD_9.x)) * _387)) * (cbMtdParam._m0[19u].x + 1.0);
    float _3905 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _419 = (((_335.x * cbMtdParam._m0[14u].x) - _403) * _412) + _403;
    float _420 = (((_335.y * cbMtdParam._m0[14u].y) - _404) * _412) + _404;
    float _421 = (((_335.z * cbMtdParam._m0[14u].z) - _405) * _412) + _405;
    float _437 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    float _442 = 1.0 - _437;
    float _445 = cbMtdParam._m0[20u].x + 1.0;
    float _446 = (_437 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * _442)) * _445;
    float _3916 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _454 = (_447 * ((_307.x * cbMtdParam._m0[15u].x) - _419)) + _419;
    float _455 = (_447 * ((_307.y * cbMtdParam._m0[15u].y) - _420)) + _420;
    float _456 = (_447 * ((_307.z * cbMtdParam._m0[15u].z) - _421)) + _421;
    vec4 _469 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _471 = _469.x;
    float _489 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _471) * _396) + _471;
    float _491 = _489 - (_489 * _412);
    float _495 = (_437 - ((_387 * cbMtdParam._m0[19u].w) * _442)) * _445;
    float _3927 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = _491 - (_491 * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    vec4 _514 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _536 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _552 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _556 = _552.z;
    float _565 = ((_536.z - _556) * _396) + _556;
    float _568 = ((((_536.x - _554) * _396) + _554) * 2.0) + (-1.0);
    float _569 = ((((_536.y - _555) * _396) + _555) * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3938 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _575 = sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))));
    float _580 = (((_514.z - _565) * TEXCOORD_9.x) * cbMtdParam._m0[19u].z) + _565;
    vec4 _593 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[10u].w));
    float _610 = (((((((_593.z - _580) * TEXCOORD_15) * cbMtdParam._m0[21u].y) + _580) * cbMtdParam._m0[21u].z) - _580) * _447) + _580;
    float _626 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _629 = (_626 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _630 = (_626 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _655 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _659 = cbPerFrame._m0[22u].x * 2.0;
    float _660 = _659 * cbMtdParam._m0[22u].y;
    float _667 = ((_655.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _669 = (-0.0) - (cbMtdParam._m0[22u].x * ((_655.x * 0.5) + (-0.25)));
    float _671 = fract(_660);
    float _673 = fract(_660 + 0.5);
    float _684 = abs((_671 * 2.0) + (-1.0));
    vec4 _701 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_671 * _669) + _629) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_667 * _671) + _630) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _705 = _701.z;
    vec4 _706 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_673 * _669) + _629) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_667 * _673) + _630) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _748 = (cbMtdParam._m0[23u].y * _626) + TEXCOORD_6.w;
    float _749 = (cbMtdParam._m0[23u].z * _626) + TEXCOORD_9.w;
    vec4 _762 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _766 = _659 * cbMtdParam._m0[18u].x;
    float _771 = ((_762.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _773 = (-0.0) - (cbMtdParam._m0[20u].z * ((_762.x * 0.5) + (-0.25)));
    float _774 = fract(_766);
    float _776 = fract(_766 + 0.5);
    float _777 = _774 * _773;
    float _778 = _771 * _774;
    float _781 = _776 * _773;
    float _782 = _771 * _776;
    float _787 = abs((_774 * 2.0) + (-1.0));
    vec4 _803 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_777 + _748) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_778 + _749) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _805 = _803.x;
    float _806 = _803.y;
    float _807 = _803.z;
    vec4 _808 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_781 + _748) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_782 + _749) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _838 = (cbMtdParam._m0[22u].w * _626) + TEXCOORD_6.w;
    float _839 = (cbMtdParam._m0[23u].x * _626) + TEXCOORD_9.w;
    vec4 _859 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_777 + _838) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_778 + _839) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _861 = _859.x;
    float _862 = _859.y;
    float _863 = _859.z;
    vec4 _864 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_781 + _838) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_782 + _839) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _884 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3949 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _885 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _895 = (((_885 * _885) * (3.0 - (_885 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _928 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _838) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _839) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3960 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _929 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _933 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_864.x - _861) * _787) + _861)) * _895) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_808.x - _805) * _787) + _805)))) * _929;
    float _937 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_864.y - _862) * _787) + _862)) * _895) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_808.y - _806) * _787) + _806)))) * _929;
    float _941 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_864.z - _863) * _787) + _863)) * _895) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_808.z - _807) * _787) + _807)))) * _929;
    float _945 = _933 - (_933 * _437);
    float _946 = _937 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _937);
    float _947 = _941 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _941);
    float _976 = ((((((_514.x * 2.0) + (-1.0)) * TEXCOORD_9.x) * cbMtdParam._m0[18u].z) + _568) + (cbMtdParam._m0[20u].y * _568)) + (((((_593.x * 2.0) + (-1.0)) * TEXCOORD_15) * cbMtdParam._m0[21u].x) * _447);
    float _979 = ((((((_514.y * 2.0) + (-1.0)) * TEXCOORD_9.y) * cbMtdParam._m0[18u].z) + _569) + (cbMtdParam._m0[20u].y * _569)) + (((((_593.y * 2.0) + (-1.0)) * TEXCOORD_16) * cbMtdParam._m0[21u].x) * _447);
    float _982 = fma(_575, _243 * NORMAL.x, fma(_979, _250 * TANGENT.x, (_236 * _228) * _976));
    float _985 = fma(_575, _243 * NORMAL.y, fma(_979, _250 * TANGENT.y, (_236 * _229) * _976));
    float _988 = fma(_575, _243 * NORMAL.z, fma(_979, _250 * TANGENT.z, (_236 * _230) * _976));
    float _992 = inversesqrt(dot(vec3(_982, _985, _988), vec3(_982, _985, _988)));
    float _993 = _992 * _982;
    float _994 = _992 * _985;
    float _995 = _992 * _988;
    float _3971 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _996 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3993 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4004 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4015 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _1000 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1016 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1066 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1056);
    float _1067 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1056);
    float _1068 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1056);
    float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
    float _1073 = _1066 * _1072;
    float _1074 = _1067 * _1072;
    float _1075 = _1068 * _1072;
    float _1081 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1082 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1100 = fma(_995, cbSceneParam._m0[5u].z, fma(_994, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _993));
    float _1103 = fma(_995, cbSceneParam._m0[6u].z, fma(_994, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _993));
    float _1106 = fma(_995, cbSceneParam._m0[7u].z, fma(_994, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _993));
    uint _1119 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1120 = _1119 + 9u;
    uint _1121 = _1120 + uint(cbMatDynParam._m0[0u].w);
    float _1127 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_1121].x;
    float _1128 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1121].y;
    float _1129 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1121].z;
    float _4026 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1130 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1131 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1132 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1133 = 1.0 - _1000;
    float _1134 = _1130 * _1133;
    float _1135 = _1131 * _1133;
    float _1136 = _1132 * _1133;
    float _1141 = (_1130 + (-0.039999999105930328369140625)) * _1000;
    float _1142 = (_1131 + (-0.039999999105930328369140625)) * _1000;
    float _1143 = (_1132 + (-0.039999999105930328369140625)) * _1000;
    float _1144 = _1141 + 0.039999999105930328369140625;
    float _1146 = _1142 + 0.039999999105930328369140625;
    float _1147 = _1143 + 0.039999999105930328369140625;
    vec4 _1156 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1081, cbSceneParam._m0[86u].y * _1082));
    float _1159 = _1156.x * TEXCOORD_3.w;
    float _1160 = dot(vec3(_993, _994, _995), vec3(_1073, _1074, _1075));
    float _1163 = _1160 * 2.0;
    float _1167 = (_1163 * _993) - _1073;
    float _1168 = (_1163 * _994) - _1074;
    float _1169 = (_1163 * _995) - _1075;
    float _1173 = abs(dot(vec3(_1073, _1074, _1075), vec3(_993, _994, _995)));
    float _4059 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1175 = sqrt(_996);
    float _1187 = exp2((_1175 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1175 * 3.0));
    float _1193 = (1.0 - _1187) * ((_1175 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1194 = _1187 * _1175;
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1230 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1257 = fma(_1230, cbModelParam._m0[26u].z, fma(_1226, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222));
        float _1261 = fma(_1230, cbModelParam._m0[27u].z, fma(_1226, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222));
        float _1265 = fma(_1230, cbModelParam._m0[28u].z, fma(_1226, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222));
        float _1289 = _1222 + _993;
        float _1290 = _1226 + _994;
        float _1291 = _1230 + _995;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1257;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1261;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1265;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1257 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1261 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1265 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_993, _994, _995), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4107 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_993, _994, _995), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4140 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_993, _994, _995), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4173 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1230, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222));
        float _1576 = fma(_1230, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222));
        float _1580 = fma(_1230, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222));
        float _1603 = _1222 + _993;
        float _1604 = _1226 + _994;
        float _1605 = _1230 + _995;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_993, _994, _995), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4236 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_993, _994, _995), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4269 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_993, _994, _995), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4302 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1532;
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = _1532;
        _1851 = _1532;
        _1852 = _1532;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1167 * 0.5;
    float _1910 = _1168 * 0.5;
    float _1911 = _1169 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _996);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1230, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1222)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1230, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1222)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1230, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1222)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1169, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1167));
        float _2039 = fma(_1169, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1167));
        float _2042 = fma(_1169, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1167));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2070 = frontier_phi_14_12_ladder;
        }
        float _2272;
        if (_2039 > 0.0)
        {
            _2272 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2272 = frontier_phi_23_19_ladder;
        }
        float _2526;
        if (_2042 > 0.0)
        {
            _2526 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2526 = frontier_phi_35_30_ladder;
        }
        float _2528 = isnan(_2272) ? _2070 : (isnan(_2070) ? _2272 : min(_2070, _2272));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _2036) + _2025;
        float _2534 = (_2529 * _2039) + _2029;
        float _2535 = (_2529 * _2042) + _2033;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2536;
        float _2540 = _2536 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 > _2540) || ((_2534 < _2538) || ((_2533 < _2538) || (_2533 > _2540))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2535, cbModelParam._m0[9u].z, fma(_2534, cbModelParam._m0[9u].y, _2533 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2535, cbModelParam._m0[10u].z, fma(_2534, cbModelParam._m0[10u].y, _2533 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2535, cbModelParam._m0[11u].z, fma(_2534, cbModelParam._m0[11u].y, _2533 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_13_35_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_13_35_ladder_2;
        _2060 = frontier_phi_13_35_ladder_1;
        _2062 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1167, _1168, _1169), _1978);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _996);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1230, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1222)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1230, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1222)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1230, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1222)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1169, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1167));
        float _2134 = fma(_1169, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1167));
        float _2137 = fma(_1169, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1167));
        float _2277;
        if (_2131 > 0.0)
        {
            _2277 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2277 = frontier_phi_25_21_ladder;
        }
        float _2553;
        if (_2134 > 0.0)
        {
            _2553 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2553 = frontier_phi_37_32_ladder;
        }
        float _2766;
        if (_2137 > 0.0)
        {
            _2766 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2766 = frontier_phi_46_43_ladder;
        }
        float _2768 = isnan(_2553) ? _2277 : (isnan(_2277) ? _2553 : min(_2277, _2553));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2131) + _2120;
        float _2774 = (_2769 * _2134) + _2124;
        float _2775 = (_2769 * _2137) + _2128;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_22_46_ladder = _3003.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3003.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3003.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_22_46_ladder_2;
        _2158 = frontier_phi_22_46_ladder_1;
        _2160 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1167, _1168, _1169), _2067);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2173 = (((_1193 * _1144) + _1194) * _1159) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2175 = (((_1193 * _1146) + _1194) * _1159) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1193 * _1147) + _1194) * _1159) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2180 = fma(_2177, cbSceneParam._m0[89u].z, fma(_2175, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2183 = fma(_2177, cbSceneParam._m0[90u].z, fma(_2175, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2186 = fma(_2177, cbSceneParam._m0[91u].z, fma(_2175, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    uvec4 _2196 = floatBitsToUint(cbInstanceData._m0[_1119 + 5u]);
    uint _2198 = _2196.x * 14u;
    uint _2199 = _2198 + 13u;
    float _2206 = _1159 + (-1.0);
    float _2211 = (cbLight._m0[_2199].x * _2206) + 1.0;
    float _2212 = (cbLight._m0[_2199].y * _2206) + 1.0;
    float _2213 = (cbLight._m0[_2199].z * _2206) + 1.0;
    float _2214 = (cbLight._m0[_2199].w * _2206) + 1.0;
    uint _2215 = _2198 + 5u;
    float _2221 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2225 = _2198 + 4u;
    float _2231 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2235 = _2198 | 1u;
    float _2246 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_993, _994, _995));
    float _2249 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_993, _994, _995));
    float _4438 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _4449 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2254 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2256 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * 0.3183098733425140380859375;
    float _2263 = ((cbLight._m0[_2215].x * _2221) * _2256) + ((cbLight._m0[_2225].x * _2231) * _2254);
    float _2264 = ((_2221 * cbLight._m0[_2215].y) * _2256) + ((_2231 * cbLight._m0[_2225].y) * _2254);
    float _2265 = ((_2221 * cbLight._m0[_2215].z) * _2256) + ((_2231 * cbLight._m0[_2225].z) * _2254);
    uvec4 _2269 = floatBitsToUint(cbLight._m0[_2198 + 12u]);
    bool _2271 = _2269.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2271)
    {
        _2282 = _2263;
        _2284 = _2264;
        _2286 = _2265;
    }
    else
    {
        uint _2290 = _2198 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2198 + 2u].xyz), vec3(_993, _994, _995)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4460 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2309 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2263;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2264;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2265;
    }
    bool _2289 = _2269.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2289)
    {
        _2327 = _2282;
        _2329 = _2284;
        _2331 = _2286;
    }
    else
    {
        uint _2497 = _2198 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2198 + 3u].xyz), vec3(_993, _994, _995)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4476 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2516 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2327 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2282;
        _2329 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2284;
        _2331 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2286;
    }
    uint _2334 = _2198 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _996) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2198].x + _1073;
    float _2350 = cbLight._m0[_2198].y + _1074;
    float _2351 = cbLight._m0[_2198].z + _1075;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2198].xyz));
    float _4492 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _4503 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _2363 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2364 = dot(vec3(_993, _994, _995), vec3(_2356, _2357, _2358));
    float _4514 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2356, _2357, _2358));
    float _4525 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2385 = 0.959999978542327880859375 - _1141;
    float _2387 = 0.959999978542327880859375 - _1142;
    float _2388 = 0.959999978542327880859375 - _1143;
    float _2395 = 1.0 - _2348;
    float _2406 = (0.5 / (((_2363 * ((_2362 * _2395) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2395) + _2348) * _2362))) * _2362;
    float _4536 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2419 = _2198 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _996) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2235].x + _1073;
    float _2433 = cbLight._m0[_2235].y + _1074;
    float _2434 = cbLight._m0[_2235].z + _1075;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2235].xyz));
    float _4547 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2446 = dot(vec3(_993, _994, _995), vec3(_2439, _2440, _2441));
    float _4558 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2439, _2440, _2441));
    float _4569 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2363 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2472) + _2431) * _2445))) * _2445;
    float _4580 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2385) + _1144) * cbLight._m0[_2419].x) * _2484) * _2221) + (((((_2384 * _2385) + _1144) * cbLight._m0[_2334].x) * _2408) * _2231);
    float _2495 = (((((_2465 * _2387) + _1146) * cbLight._m0[_2419].y) * _2484) * _2221) + (((((_2384 * _2387) + _1146) * cbLight._m0[_2334].y) * _2408) * _2231);
    float _2496 = (((((_2465 * _2388) + _1147) * cbLight._m0[_2419].z) * _2484) * _2221) + (((((_2384 * _2388) + _1147) * cbLight._m0[_2334].z) * _2408) * _2231);
    float _2558;
    float _2560;
    float _2562;
    if (_2271)
    {
        _2558 = _2494;
        _2560 = _2495;
        _2562 = _2496;
    }
    else
    {
        uint _2564 = _2198 + 2u;
        uint _2568 = _2198 + 10u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _996) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _1073;
        float _2585 = cbLight._m0[_2564].y + _1074;
        float _2586 = cbLight._m0[_2564].z + _1075;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2564].xyz));
        float _4591 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2598 = dot(vec3(_993, _994, _995), vec3(_2591, _2592, _2593));
        float _4602 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4613 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2363 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2624) + _2583) * _2597))) * _2597;
        float _4624 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2558 = (((((_2617 * _2385) + _1144) * cbLight._m0[_2568].x) * _2636) * _2637) + _2494;
        _2560 = (((((_2617 * _2387) + _1146) * cbLight._m0[_2568].y) * _2636) * _2637) + _2495;
        _2562 = (((((_2617 * _2388) + _1147) * cbLight._m0[_2568].z) * _2636) * _2637) + _2496;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2289)
    {
        _2672 = _2558;
        _2674 = _2560;
        _2676 = _2562;
    }
    else
    {
        uint _2683 = _2198 + 3u;
        uint _2687 = _2198 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _996) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1073;
        float _2704 = cbLight._m0[_2683].y + _1074;
        float _2705 = cbLight._m0[_2683].z + _1075;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2683].xyz));
        float _4640 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2717 = dot(vec3(_993, _994, _995), vec3(_2710, _2711, _2712));
        float _4651 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4662 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2363 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2743) + _2702) * _2716))) * _2716;
        float _4673 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2672 = (((((_2736 * _2385) + _1144) * cbLight._m0[_2687].x) * _2755) * _2756) + _2558;
        _2674 = (((((_2736 * _2387) + _1146) * cbLight._m0[_2687].y) * _2755) * _2756) + _2560;
        _2676 = (((((_2736 * _2388) + _1147) * cbLight._m0[_2687].z) * _2755) * _2756) + _2562;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2196.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1082) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1081) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            uint _3166 = 0u;
            uint _3175;
            bool _3176;
            for (;;)
            {
                _3175 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                _3176 = _3175 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3176)
                {
                    frontier_phi_61_pred = _3160;
                    frontier_phi_61_pred_1 = _3165;
                    frontier_phi_61_pred_2 = _3164;
                    frontier_phi_61_pred_3 = _3163;
                    frontier_phi_61_pred_4 = _3162;
                    frontier_phi_61_pred_5 = _3161;
                }
                else
                {
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    uint _3290;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3175;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    for (;;)
                    {
                        uint _3294 = uint(findLSB(_3290)) + (_3166 << 5u);
                        uint _3291 = (_3290 + 4294967295u) & _3290;
                        uint _3296 = _3294 * 48u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3316 = (_3294 * 48u) + 4u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3335 = (_3294 * 48u) + 8u;
                        vec3 _3346 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x));
                        float _3350 = _3310.x - _2832;
                        float _3351 = _3310.y - _2833;
                        float _3352 = _3310.z - _2834;
                        float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                        float _3356 = inversesqrt(_3353);
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3360 = dot(vec3(_1100, _1103, _1106), vec3(_3357, _3358, _3359));
                        float _3365 = 1.0 - (_3353 * _3310.w);
                        float _4699 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3367 = sqrt(_3353) * _3329.w;
                        float _3370 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3360) + _3371;
                        float _3377 = _3367 * _3367;
                        float _3381 = ((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3366) / ((_3377 * 0.699999988079071044921875) + 1.0);
                        float _3385 = (-0.0) - _2832;
                        float _3386 = (-0.0) - _2833;
                        float _3387 = (-0.0) - _2834;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3402 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                        float _3403 = 1.0 - _1175;
                        float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                        float _3411 = _3410 * _3410;
                        float _3412 = _3411 * _3411;
                        float _3413 = _3392 + _3357;
                        float _3414 = _3393 + _3358;
                        float _3415 = _3394 + _3359;
                        float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                        float _3423 = dot(vec3(_1100, _1103, _1106), vec3(_3392, _3393, _3394));
                        float _4715 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3427 = dot(vec3(_1100, _1103, _1106), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                        float _4726 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                        float _3435 = _3370 * _3411;
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3360) + _3436;
                        float _4737 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3441 = 1.0 - _3411;
                        float _3451 = (0.5 / (((_3440 * ((_3426 * _3441) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3411) * _3426))) * _3440;
                        float _4748 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3462 = (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3434 * _3434) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125))) * _3366;
                        _3219 = (_3381 * _3329.x) + _3287;
                        _3220 = (_3381 * _3329.y) + _3288;
                        _3221 = (_3381 * _3329.z) + _3289;
                        _3216 = (_3462 * _3346.x) + _3284;
                        _3217 = (_3462 * _3346.y) + _3285;
                        _3218 = (_3462 * _3346.z) + _3286;
                        if (_3291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3291;
                        }
                    }
                    frontier_phi_61_pred = _3216;
                    frontier_phi_61_pred_1 = _3221;
                    frontier_phi_61_pred_2 = _3220;
                    frontier_phi_61_pred_3 = _3219;
                    frontier_phi_61_pred_4 = _3218;
                    frontier_phi_61_pred_5 = _3217;
                }
                _3009 = frontier_phi_61_pred;
                _3019 = frontier_phi_61_pred_1;
                _3017 = frontier_phi_61_pred_2;
                _3015 = frontier_phi_61_pred_3;
                _3013 = frontier_phi_61_pred_4;
                _3011 = frontier_phi_61_pred_5;
                uint _3167 = _3166 + 1u;
                if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3160 = _3009;
                    _3161 = _3011;
                    _3162 = _3013;
                    _3163 = _3015;
                    _3164 = _3017;
                    _3165 = _3019;
                    _3166 = _3167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((4294967295u << _3025) & _2878) == 0u)
        {
            _3128 = _3008;
            _3130 = _3010;
            _3132 = _3012;
            _3134 = _3014;
            _3136 = _3016;
            _3138 = _3018;
        }
        else
        {
            float _3153 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3154 = _3153 * _2832;
            float _3155 = _3153 * _2833;
            float _3156 = _3153 * _2834;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3267 = _3008;
                float _3268 = _3010;
                float _3269 = _3012;
                float _3270 = _3014;
                float _3271 = _3016;
                float _3272 = _3018;
                uint _3273 = _3025;
                uint _3282;
                bool _3283;
                for (;;)
                {
                    _3282 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3273 << 2u)) >> 2u)).x;
                    _3283 = _3282 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3283)
                    {
                        frontier_phi_67_pred = _3270;
                        frontier_phi_67_pred_1 = _3271;
                        frontier_phi_67_pred_2 = _3272;
                        frontier_phi_67_pred_3 = _3269;
                        frontier_phi_67_pred_4 = _3268;
                        frontier_phi_67_pred_5 = _3267;
                    }
                    else
                    {
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3480 = _3267;
                        float _3481 = _3268;
                        float _3482 = _3269;
                        float _3483 = _3270;
                        float _3484 = _3271;
                        float _3485 = _3272;
                        uint _3486 = _3282;
                        uint _3487;
                        vec4 _3512;
                        float _3513;
                        vec4 _3528;
                        vec3 _3540;
                        vec4 _3555;
                        vec4 _3570;
                        float _3616;
                        bool _3617;
                        for (;;)
                        {
                            uint _3497 = ((_3273 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3486));
                            _3487 = (_3486 + 4294967295u) & _3486;
                            uint _3499 = _3497 * 40u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3513 = _3512.w;
                            uint _3515 = (_3497 * 40u) + 4u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3497 * 40u) + 8u;
                            _3540 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x));
                            uint _3542 = (_3497 * 40u) + 16u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3497 * 40u) + 20u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3497 * 40u) + 24u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3591 = (_3497 * 40u) + 28u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3616 = fma(_2834, _3604.z, fma(_2833, _3604.y, _3604.x * _2832)) + _3604.w;
                            _3617 = !((fma(_2834, _3585.z, fma(_2833, _3585.y, _3585.x * _2832)) + _3585.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3617)
                            {
                                float _3644 = _3512.x - _2832;
                                float _3645 = _3512.y - _2833;
                                float _3646 = _3512.z - _2834;
                                float _3647 = dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646));
                                float _3650 = inversesqrt(_3647);
                                float _3651 = _3650 * _3644;
                                float _3652 = _3650 * _3645;
                                float _3653 = _3650 * _3646;
                                float _3657 = 1.0 - (_3647 / (_3513 * _3513));
                                float _4759 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3662 = sqrt(_3647) * _3528.w;
                                float _3664 = 1.39999997615814208984375 / (_3662 + 1.39999997615814208984375);
                                float _3665 = _3664 * _3664;
                                float _3668 = ((1.0 - _3665) * dot(vec3(_3651, _3652, _3653), vec3(_1100, _1103, _1106))) + _3665;
                                float _3671 = _3662 * _3662;
                                float _3675 = (fma(_2834, _3555.z, fma(_2833, _3555.y, _3555.x * _2832)) + _3555.w) / _3616;
                                float _3676 = (fma(_2834, _3570.z, fma(_2833, _3570.y, _3570.x * _2832)) + _3570.w) / _3616;
                                float _3680 = 1.0 - dot(vec2(_3675, _3676), vec2(_3675, _3676));
                                float _4775 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3682 = _3681 * (((isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0))) * _3658) / ((_3671 * 0.699999988079071044921875) + 1.0));
                                float _3694 = exp2(log2(1.0 / ((_3671 * 3.5) + 5.0)) * 0.25);
                                float _3695 = 1.0 - _1175;
                                float _3702 = sqrt(1.0 - ((1.0 - (_3695 * _3695)) * (1.0 - (_3694 * _3694))));
                                float _3703 = _3702 * _3702;
                                float _3704 = _3703 * _3703;
                                float _3705 = _3651 - _3154;
                                float _3706 = _3652 - _3155;
                                float _3707 = _3653 - _3156;
                                float _3711 = inversesqrt(dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707)));
                                float _3715 = dot(vec3(_1100, _1103, _1106), vec3((-0.0) - _3154, (-0.0) - _3155, (-0.0) - _3156));
                                float _4786 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3718 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3719 = dot(vec3(_1100, _1103, _1106), vec3(_3711 * _3705, _3711 * _3706, _3711 * _3707));
                                float _4797 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3726 = ((_3722 * _3722) * (_3704 + (-1.0))) + 1.0;
                                float _3727 = _3664 * _3703;
                                float _3728 = _3727 * _3727;
                                float _3734 = ((1.0 - _3728) * dot(vec3(_1100, _1103, _1106), vec3(_3651, _3652, _3653))) + _3728;
                                float _4808 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3736 = 1.0 - _3703;
                                float _3746 = (0.5 / (((_3735 * ((_3718 * _3736) + _3703)) + 9.9999999392252902907785028219223e-09) + (((_3735 * _3736) + _3703) * _3718))) * _3735;
                                float _4819 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3756 = (_3681 * _3658) * (((_3704 * 3.1415927410125732421875) * (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) / ((_3726 * _3726) * ((_3671 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3756 * _3540.x;
                                frontier_phi_73_pred_1 = _3756 * _3540.y;
                                frontier_phi_73_pred_2 = _3682 * _3528.z;
                                frontier_phi_73_pred_3 = _3682 * _3528.y;
                                frontier_phi_73_pred_4 = _3682 * _3528.x;
                                frontier_phi_73_pred_5 = _3756 * _3540.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3760 = frontier_phi_73_pred;
                            _3761 = frontier_phi_73_pred_1;
                            _3765 = frontier_phi_73_pred_2;
                            _3764 = frontier_phi_73_pred_3;
                            _3763 = frontier_phi_73_pred_4;
                            _3762 = frontier_phi_73_pred_5;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            if (_3487 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3487;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3470;
                        frontier_phi_67_pred_1 = _3471;
                        frontier_phi_67_pred_2 = _3472;
                        frontier_phi_67_pred_3 = _3469;
                        frontier_phi_67_pred_4 = _3468;
                        frontier_phi_67_pred_5 = _3467;
                    }
                    _3135 = frontier_phi_67_pred;
                    _3137 = frontier_phi_67_pred_1;
                    _3139 = frontier_phi_67_pred_2;
                    _3133 = frontier_phi_67_pred_3;
                    _3131 = frontier_phi_67_pred_4;
                    _3129 = frontier_phi_67_pred_5;
                    uint _3274 = _3273 + 1u;
                    if (_3274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3267 = _3129;
                        _3268 = _3131;
                        _3269 = _3133;
                        _3270 = _3135;
                        _3271 = _3137;
                        _3272 = _3139;
                        _3273 = _3274;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3137;
                frontier_phi_55_56_ladder_1 = _3139;
                frontier_phi_55_56_ladder_2 = _3135;
                frontier_phi_55_56_ladder_3 = _3133;
                frontier_phi_55_56_ladder_4 = _3131;
                frontier_phi_55_56_ladder_5 = _3129;
            }
            else
            {
                frontier_phi_55_56_ladder = _3016;
                frontier_phi_55_56_ladder_1 = _3018;
                frontier_phi_55_56_ladder_2 = _3014;
                frontier_phi_55_56_ladder_3 = _3012;
                frontier_phi_55_56_ladder_4 = _3010;
                frontier_phi_55_56_ladder_5 = _3008;
            }
            _3128 = frontier_phi_55_56_ladder_5;
            _3130 = frontier_phi_55_56_ladder_4;
            _3132 = frontier_phi_55_56_ladder_3;
            _3134 = frontier_phi_55_56_ladder_2;
            _3136 = frontier_phi_55_56_ladder;
            _3138 = frontier_phi_55_56_ladder_1;
        }
        float _3143 = isnan(1.0) ? _1159 : (isnan(_1159) ? 1.0 : min(_1159, 1.0));
        _2891 = (_3143 * _3134) + _2327;
        _2893 = (_3143 * _3136) + _2329;
        _2895 = (_3143 * _3138) + _2331;
        _2897 = ((_3128 * _1144) * _3143) + _2672;
        _2899 = ((_3130 * _1146) * _3143) + _2674;
        _2901 = ((_3132 * _1147) * _3143) + _2676;
    }
    else
    {
        _2891 = _2327;
        _2893 = _2329;
        _2895 = _2331;
        _2897 = _2672;
        _2899 = _2674;
        _2901 = _2676;
    }
    uint _2907 = _1120 + uint(cbMatDynParam._m0[0u].w);
    float _2913 = cbInstanceData._m0[_2907].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_706.x - _703) * _684) + _703)) - _945) * _447) + _945);
    float _2914 = cbInstanceData._m0[_2907].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_706.y - _704) * _684) + _704)) - _946) * _447) + _946);
    float _2915 = cbInstanceData._m0[_2907].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_706.z - _705) * _684) + _705)) - _947) * _447) + _947);
    float _4835 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _4846 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _4857 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _2932 = (((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2891 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1159))) + ((_2897 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1967)) * cbPerFrame._m0[3u].x)) + _2913;
    float _2934 = (_2914 + ((_2899 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1967)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2893 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1159)));
    float _2936 = (_2915 + ((_2901 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1967)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2895 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1159)));
    float _4883 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2949 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    uint _2950 = _1119 + 6u;
    float _2958 = _1081 / cbSceneParam._m0[86u].x;
    float _2959 = _1082 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _1016 : (isnan(_1016) ? cbSceneParam._m0[77u].w : min(_1016, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_1016 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_1016) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1016 : min(cbSceneParam._m0[80u].w, _1016));
        float _3034 = _3033 / _1016;
        float _3045 = _3034 * _1066;
        float _3046 = _1067 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3048 = _3034 * _1068;
        float _3050 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3046;
        float _3058 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3068 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3229;
        if (abs((_3047 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3229 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3068 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3189 = 1.0 / cbSceneParam._m0[80u].x;
            float _3190 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3191 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            _3229 = ((abs(_3058 / _3047) * cbSceneParam._m0[80u].y) * ((((_3200 - _3201) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))))) * _3189)) - ((exp2(_3068 * _3200) - exp2(_3068 * _3201)) * _3189))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3231 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3240 = exp2((_3229 * (-1.44269502162933349609375)) * (1.0 - _3231.w));
        float _3241 = log2(_3240);
        float _3257 = log2(_2978);
        _3070 = (exp2(_3257 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3241 * cbSceneParam._m0[78u].x)) * _3231.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3072 = (exp2(_3257 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3241 * cbSceneParam._m0[78u].y)) * _3231.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3074 = (exp2(_3257 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3241 * cbSceneParam._m0[78u].z)) * _3231.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3076 = _3240 * _2978;
    }
    else
    {
        _3070 = _2975;
        _3072 = _2976;
        _3074 = _2977;
        _3076 = _2978;
    }
    float _3087 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3088 = _3087 == 3.0;
    float _3089 = log2(_3076);
    float _3093 = exp2(_3089 * cbSceneParam._m0[78u].x);
    float _3094 = exp2(_3089 * cbSceneParam._m0[78u].y);
    float _3095 = exp2(_3089 * cbSceneParam._m0[78u].z);
    float _3096 = _3093 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)));
    float _3097 = _3094 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0)));
    float _3098 = _3095 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0)));
    float _3107 = (_3087 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3107 * (_3088 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.y = _3107 * (_3088 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.z = _3107 * (_3088 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.w = cbInstanceData._m0[_2950].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2913) * _2949) * _3093) * _3107;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2914) * _2949) * _3094) * _3107;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2915) * _2949) * _3095) * _3107;
    SV_Target_1.w = cbInstanceData._m0[_2950].w;
}


