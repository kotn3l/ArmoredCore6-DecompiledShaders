#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1317;
float _3737;
float _3738;
float _3739;
float _3740;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    float _312 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _327 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _344 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _346 = _344.x;
    float _347 = _344.y;
    float _348 = _344.z;
    float _357 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _3749 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _367 = ((_327.z - _348) * _358) + _348;
    float _371 = ((((_327.x - _346) * _358) + _346) * 2.0) + (-1.0);
    float _373 = ((((_327.y - _347) * _358) + _347) * 2.0) + (-1.0);
    float _374 = dot(vec2(_371, _373), vec2(_371, _373));
    float _3760 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _379 = sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))));
    float _399 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _402 = (_399 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _403 = (_399 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _428 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _432 = cbPerFrame._m0[22u].x * 2.0;
    float _433 = _432 * cbMtdParam._m0[22u].y;
    float _440 = ((_428.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _442 = (-0.0) - (cbMtdParam._m0[22u].x * ((_428.x * 0.5) + (-0.25)));
    float _444 = fract(_433);
    float _446 = fract(_433 + 0.5);
    float _457 = abs((_444 * 2.0) + (-1.0));
    vec4 _474 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_444 * _442) + _402) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_440 * _444) + _403) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    vec4 _479 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_446 * _442) + _402) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_440 * _446) + _403) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _521 = (cbMtdParam._m0[23u].y * _399) + TEXCOORD_6.w;
    float _522 = (cbMtdParam._m0[23u].z * _399) + TEXCOORD_9.w;
    vec4 _535 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _539 = _432 * cbMtdParam._m0[18u].x;
    float _544 = ((_535.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _546 = (-0.0) - (cbMtdParam._m0[20u].z * ((_535.x * 0.5) + (-0.25)));
    float _547 = fract(_539);
    float _549 = fract(_539 + 0.5);
    float _550 = _547 * _546;
    float _551 = _544 * _547;
    float _554 = _549 * _546;
    float _555 = _544 * _549;
    float _560 = abs((_547 * 2.0) + (-1.0));
    vec4 _576 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_550 + _521) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_551 + _522) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _580 = _576.z;
    vec4 _581 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_554 + _521) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_555 + _522) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _611 = (cbMtdParam._m0[22u].w * _399) + TEXCOORD_6.w;
    float _612 = (cbMtdParam._m0[23u].x * _399) + TEXCOORD_9.w;
    vec4 _632 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_550 + _611) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_551 + _612) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _636 = _632.z;
    vec4 _637 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_554 + _611) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_555 + _612) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _657 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3771 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _666 = (((_658 * _658) * (3.0 - (_658 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _699 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _611) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _612) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3782 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _704 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_637.x - _634) * _560) + _634)) * _666) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_581.x - _578) * _560) + _578)))) * _700;
    float _708 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_637.y - _635) * _560) + _635)) * _666) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_581.y - _579) * _560) + _579)))) * _700;
    float _712 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_637.z - _636) * _560) + _636)) * _666) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_581.z - _580) * _560) + _580)))) * _700;
    float _716 = _704 - (_704 * _312);
    float _717 = _708 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _708);
    float _718 = _712 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _712);
    float _725 = (_312 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _312))) * (cbMtdParam._m0[20u].x + 1.0);
    float _3793 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _739 = (cbMtdParam._m0[20u].y * _371) + _371;
    float _740 = (cbMtdParam._m0[20u].y * _373) + _373;
    float _743 = fma(_379, _231 * NORMAL.x, fma(_740, _238 * TANGENT.x, (_224 * _216) * _739));
    float _746 = fma(_379, _231 * NORMAL.y, fma(_740, _238 * TANGENT.y, (_224 * _217) * _739));
    float _749 = fma(_379, _231 * NORMAL.z, fma(_740, _238 * TANGENT.z, (_224 * _218) * _739));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3804 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _757 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3826 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3837 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    vec4 _841 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _843 = _841.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_827 * _827) + (_828 * _828)) + (_829 * _829));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _3848 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _3859 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) - _1005)) + _1005) < ((_843 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _855 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _856 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _878 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _881 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _894 = uint(roundEven(NORMAL.w)) * 13u;
    uint _895 = _894 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3870 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _855, cbSceneParam._m0[86u].y * _856));
    float _919 = _916.x * TEXCOORD_3.w;
    float _920 = dot(vec3(_754, _755, _756), vec3(_834, _835, _836));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _754) - _834;
    float _928 = (_923 * _755) - _835;
    float _929 = (_923 * _756) - _836;
    float _933 = abs(dot(vec3(_834, _835, _836), vec3(_754, _755, _756)));
    float _3903 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_757);
    float _947 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1046 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1050 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1074 = _979 + _754;
        float _1075 = _983 + _755;
        float _1076 = _987 + _756;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1042;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1046;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1050;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_754, _755, _756), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3951 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_754, _755, _756), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3984 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_754, _755, _756), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4017 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1360 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1364 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1368 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1391 = _979 + _754;
        float _1392 = _983 + _755;
        float _1393 = _987 + _756;
        float _1403 = fma(_1393, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1391)) - _1360;
        float _1404 = fma(_1393, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1391)) - _1364;
        float _1405 = fma(_1393, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1391)) - _1368;
        float _1409 = inversesqrt(dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405)));
        float _1422 = ((_1409 * _1403) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1360 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1409 * _1404) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1364 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1409 * _1405) / cbModelParam._m0[35u].z) + ((((((_1368 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        float _1459 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1426.x + (-0.5));
        float _1461 = _1459 * (_1426.y + (-0.5));
        float _1462 = _1459 * (_1426.z + (-0.5));
        float _1469 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1433.x + (-0.5));
        float _1471 = _1469 * (_1433.y + (-0.5));
        float _1472 = _1469 * (_1433.z + (-0.5));
        float _1479 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1440.x + (-0.5));
        float _1481 = _1479 * (_1440.y + (-0.5));
        float _1482 = _1479 * (_1440.z + (-0.5));
        float _1489 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1447.x + (-0.5));
        float _1491 = _1489 * (_1447.y + (-0.5));
        float _1492 = _1489 * (_1447.z + (-0.5));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1460 * 0.5;
        float _1497 = _1470 * 0.5;
        float _1498 = _1480 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_754, _755, _756), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4080 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1523 + 1.0))) + _1528) * _1493;
        float _1538 = _1461 * 0.5;
        float _1539 = _1471 * 0.5;
        float _1540 = _1481 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_754, _755, _756), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4113 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1565 + 1.0))) + _1570) * _1494;
        float _1580 = _1462 * 0.5;
        float _1581 = _1472 * 0.5;
        float _1582 = _1482 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_754, _755, _756), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4146 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1607 + 1.0))) + _1612) * _1495;
        _1629 = _1462;
        _1630 = _1461;
        _1631 = _1460;
        _1632 = _1472;
        _1633 = _1471;
        _1634 = _1470;
        _1635 = _1482;
        _1636 = _1481;
        _1637 = _1480;
        _1638 = _1495;
        _1639 = _1494;
        _1640 = _1493;
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = _1317;
        _1638 = _1317;
        _1639 = _1317;
        _1640 = _1317;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1330)) + _1330;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1676 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1653));
    float _1697 = _927 * 0.5;
    float _1698 = _928 * 0.5;
    float _1699 = _929 * 0.5;
    float _1700 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1703 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1706 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1740;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1713 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1717 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1721 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1728 = dot(vec4(cbModelParam._m0[39u]), vec4(_1697, _1698, _1699, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1751;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1742 = dot(vec4(cbModelParam._m0[40u]), vec4(_1697, _1698, _1699, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1755 = (_1751 * cbModelParam._m0[1u].x) + (_1740 * (1.0 - cbModelParam._m0[1u].x));
    float _1765 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1765 : min(cbModelParam._m0[25u].z, _1765));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1813 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1817 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1821 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1824 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1827 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1830 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1858;
        if (_1824 > 0.0)
        {
            _1858 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1858 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1827 > 0.0)
        {
            _2080 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2326;
        if (_1830 > 0.0)
        {
            _2326 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2326 = frontier_phi_38_33_ladder;
        }
        float _2328 = isnan(_2080) ? _1858 : (isnan(_1858) ? _2080 : min(_1858, _2080));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1824) + _1813;
        float _2334 = (_2329 * _1827) + _1817;
        float _2335 = (_2329 * _1830) + _1821;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1766);
            frontier_phi_16_38_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1846 = frontier_phi_16_38_ladder_2;
        _1848 = frontier_phi_16_38_ladder_1;
        _1850 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1766);
        _1846 = _1834.x * cbModelParam._m0[1u].y;
        _1848 = _1834.y * cbModelParam._m0[1u].y;
        _1850 = _1834.z * cbModelParam._m0[1u].y;
    }
    float _1854 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1854 : min(cbModelParam._m0[25u].w, _1854));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1922 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1925 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2085;
        if (_1919 > 0.0)
        {
            _2085 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2353;
        if (_1922 > 0.0)
        {
            _2353 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2353 = frontier_phi_40_35_ladder;
        }
        float _2558;
        if (_1925 > 0.0)
        {
            _2558 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2558 = frontier_phi_49_46_ladder;
        }
        float _2560 = isnan(_2353) ? _2085 : (isnan(_2085) ? _2353 : min(_2085, _2353));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _1919) + _1908;
        float _2566 = (_2561 * _1922) + _1912;
        float _2567 = (_2561 * _1925) + _1916;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2568;
        float _2571 = _2568 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2567 > _2571) || ((_2567 < _2569) || ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 < _2569) || (_2565 > _2571))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2567, cbModelParam._m0[17u].z, fma(_2566, cbModelParam._m0[17u].y, _2565 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2567, cbModelParam._m0[18u].z, fma(_2566, cbModelParam._m0[18u].y, _2565 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2567, cbModelParam._m0[19u].z, fma(_2566, cbModelParam._m0[19u].y, _2565 * cbModelParam._m0[19u].x))), _1855);
            frontier_phi_25_49_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_25_49_ladder_2;
        _1946 = frontier_phi_25_49_ladder_1;
        _1948 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1855);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1960 = ((((1.0 - _947) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_947 * _935)) * _919;
    float _1961 = _1960 * ((cbModelParam._m0[1u].w * (_1944 - _1846)) + _1846);
    float _1962 = _1960 * ((cbModelParam._m0[1u].w * (_1946 - _1848)) + _1848);
    float _1963 = _1960 * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    vec4 _1980 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_855, _856));
    float _1982 = _1980.w;
    float _1994 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1982);
    float _1995 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1982);
    float _1996 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1982);
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_894 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _919 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2039 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2043 = _2002 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_754, _755, _756));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_754, _755, _756));
    float _4282 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4293 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2019].x * _2025) * _2064) + (((cbLight._m0[_2029].x * _1994) * _2039) * _2062);
    float _2072 = ((_2025 * cbLight._m0[_2019].y) * _2064) + (((cbLight._m0[_2029].y * _1995) * _2039) * _2062);
    float _2073 = ((_2025 * cbLight._m0[_2019].z) * _2064) + (((cbLight._m0[_2029].z * _1996) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2002 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4304 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2117 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2297 = _2002 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4320 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2316 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2135 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2090;
        _2137 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2092;
        _2139 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2094;
    }
    uint _2142 = _2002 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _757) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2002].x + _834;
    float _2158 = cbLight._m0[_2002].y + _835;
    float _2159 = cbLight._m0[_2002].z + _836;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2002].xyz));
    float _4336 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2171 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2172 = dot(vec3(_754, _755, _756), vec3(_2164, _2165, _2166));
    float _4358 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2164, _2165, _2166));
    float _4369 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2196 = 1.0 - _2156;
    float _2207 = (0.5 / (((_2171 * ((_2170 * _2196) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2196) + _2156) * _2170))) * _2170;
    float _4380 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2223 = _2002 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _757) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2043].x + _834;
    float _2237 = cbLight._m0[_2043].y + _835;
    float _2238 = cbLight._m0[_2043].z + _836;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2043].xyz));
    float _4391 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2250 = dot(vec3(_754, _755, _756), vec3(_2243, _2244, _2245));
    float _4402 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2243, _2244, _2245));
    float _4413 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2235;
    float _2282 = (0.5 / (((_2171 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2272) + _2235) * _2249))) * _2249;
    float _4424 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2294 = (((_2271 * cbLight._m0[_2223].x) * _2284) * _2025) + ((((cbLight._m0[_2142].x * _1994) * _2195) * _2209) * _2039);
    float _2295 = (((_2271 * cbLight._m0[_2223].y) * _2284) * _2025) + ((((cbLight._m0[_2142].y * _1995) * _2195) * _2209) * _2039);
    float _2296 = (((_2271 * cbLight._m0[_2223].z) * _2284) * _2025) + ((((cbLight._m0[_2142].z * _1996) * _2195) * _2209) * _2039);
    float _2358;
    float _2360;
    float _2362;
    if (_2079)
    {
        _2358 = _2294;
        _2360 = _2295;
        _2362 = _2296;
    }
    else
    {
        uint _2364 = _2002 + 2u;
        uint _2368 = _2002 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _757) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _834;
        float _2385 = cbLight._m0[_2364].y + _835;
        float _2386 = cbLight._m0[_2364].z + _836;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2364].xyz));
        float _4435 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2398 = dot(vec3(_754, _755, _756), vec3(_2391, _2392, _2393));
        float _4446 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4457 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2420 = 1.0 - _2383;
        float _2430 = (0.5 / (((_2171 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2420) + _2383) * _2397))) * _2397;
        float _4468 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2358 = (((_2419 * cbLight._m0[_2368].x) * _2432) * _2433) + _2294;
        _2360 = (((_2419 * cbLight._m0[_2368].y) * _2432) * _2433) + _2295;
        _2362 = (((_2419 * cbLight._m0[_2368].z) * _2432) * _2433) + _2296;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2097)
    {
        _2468 = _2358;
        _2470 = _2360;
        _2472 = _2362;
    }
    else
    {
        uint _2479 = _2002 + 3u;
        uint _2483 = _2002 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _757) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _834;
        float _2500 = cbLight._m0[_2479].y + _835;
        float _2501 = cbLight._m0[_2479].z + _836;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2479].xyz));
        float _4484 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2513 = dot(vec3(_754, _755, _756), vec3(_2506, _2507, _2508));
        float _4495 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4506 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2171 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2535) + _2498) * _2512))) * _2512;
        float _4517 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2468 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2358;
        _2470 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2360;
        _2472 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2362;
    }
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_2000.y == 0u)
    {
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2623;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2623;
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2623;
        uvec4 _2638 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2639 = _2638.x;
        uint _2650 = uint((float(_2638.y) * floor(float(uint(cbSceneParam._m0[85u].y * _856) / _2639))) + floor(float(uint(cbSceneParam._m0[85u].x * _855) / _2639)));
        float _2660 = (log2(_2626 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2661 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        uint _2664 = uint(isnan(14.0) ? _2661 : (isnan(_2661) ? 14.0 : min(_2661, 14.0)));
        uvec4 _2669 = texelFetch(g_lightClusterGridBuffer, int(((_2664 << 2u) + (_2650 << 6u)) >> 2u));
        uint _2670 = _2669.x;
        uint _2671 = _2638.z;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((((1u << ((_2671 >> 4u) & 15u)) + 4294967295u) & _2670) == 0u) || ((_2671 & 240u) == 0u))
        {
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
        }
        else
        {
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            uint _2966 = 0u;
            uint _2975;
            bool _2976;
            for (;;)
            {
                _2975 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_2966 << 2u)) >> 2u)).x;
                _2976 = _2975 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2976)
                {
                    frontier_phi_66_pred = _2960;
                    frontier_phi_66_pred_1 = _2965;
                    frontier_phi_66_pred_2 = _2964;
                    frontier_phi_66_pred_3 = _2963;
                    frontier_phi_66_pred_4 = _2962;
                    frontier_phi_66_pred_5 = _2961;
                }
                else
                {
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    uint _3111;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2975;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    for (;;)
                    {
                        uint _3115 = uint(findLSB(_3111)) + (_2966 << 5u);
                        uint _3112 = (_3111 + 4294967295u) & _3111;
                        uint _3117 = _3115 * 48u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3137 = (_3115 * 48u) + 4u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3156 = (_3115 * 48u) + 8u;
                        vec3 _3167 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x));
                        float _3171 = _3131.x - _2624;
                        float _3172 = _3131.y - _2625;
                        float _3173 = _3131.z - _2626;
                        float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                        float _3177 = inversesqrt(_3174);
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3181 = dot(vec3(_875, _878, _881), vec3(_3178, _3179, _3180));
                        float _3186 = 1.0 - (_3174 * _3131.w);
                        float _4543 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3188 = sqrt(_3174) * _3150.w;
                        float _3191 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3181) + _3192;
                        float _3198 = _3188 * _3188;
                        float _3202 = ((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3187) / ((_3198 * 0.699999988079071044921875) + 1.0);
                        float _3206 = (-0.0) - _2624;
                        float _3207 = (-0.0) - _2625;
                        float _3208 = (-0.0) - _2626;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3223 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                        float _3224 = 1.0 - _935;
                        float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                        float _3232 = _3231 * _3231;
                        float _3233 = _3232 * _3232;
                        float _3234 = _3213 + _3178;
                        float _3235 = _3214 + _3179;
                        float _3236 = _3215 + _3180;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3244 = dot(vec3(_875, _878, _881), vec3(_3213, _3214, _3215));
                        float _4559 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3248 = dot(vec3(_875, _878, _881), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                        float _4570 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                        float _3256 = _3191 * _3232;
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3181) + _3257;
                        float _4581 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3262 = 1.0 - _3232;
                        float _3272 = (0.5 / (((_3261 * ((_3247 * _3262) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3232) * _3247))) * _3261;
                        float _4592 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3283 = (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3255 * _3255) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125))) * _3187;
                        _3035 = (_3202 * _3150.x) + _3108;
                        _3036 = (_3202 * _3150.y) + _3109;
                        _3037 = (_3202 * _3150.z) + _3110;
                        _3032 = (_3283 * _3167.x) + _3105;
                        _3033 = (_3283 * _3167.y) + _3106;
                        _3034 = (_3283 * _3167.z) + _3107;
                        if (_3112 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3112;
                        }
                    }
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3037;
                    frontier_phi_66_pred_2 = _3036;
                    frontier_phi_66_pred_3 = _3035;
                    frontier_phi_66_pred_4 = _3034;
                    frontier_phi_66_pred_5 = _3033;
                }
                _2801 = frontier_phi_66_pred;
                _2811 = frontier_phi_66_pred_1;
                _2809 = frontier_phi_66_pred_2;
                _2807 = frontier_phi_66_pred_3;
                _2805 = frontier_phi_66_pred_4;
                _2803 = frontier_phi_66_pred_5;
                uint _2967 = _2966 + 1u;
                if (_2967 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2960 = _2801;
                    _2961 = _2803;
                    _2962 = _2805;
                    _2963 = _2807;
                    _2964 = _2809;
                    _2965 = _2811;
                    _2966 = _2967;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
        }
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.z;
        uint _2817 = (_2815 >> 8u) & 15u;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((4294967295u << _2817) & _2670) == 0u)
        {
            _2928 = _2800;
            _2930 = _2802;
            _2932 = _2804;
            _2934 = _2806;
            _2936 = _2808;
            _2938 = _2810;
        }
        else
        {
            float _2953 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
            float _2954 = _2953 * _2624;
            float _2955 = _2953 * _2625;
            float _2956 = _2953 * _2626;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2817 < ((_2815 >> 12u) & 15u))
            {
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _3088 = _2800;
                float _3089 = _2802;
                float _3090 = _2804;
                float _3091 = _2806;
                float _3092 = _2808;
                float _3093 = _2810;
                uint _3094 = _2817;
                uint _3103;
                bool _3104;
                for (;;)
                {
                    _3103 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                    _3104 = _3103 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3104)
                    {
                        frontier_phi_77_pred = _3093;
                        frontier_phi_77_pred_1 = _3092;
                        frontier_phi_77_pred_2 = _3091;
                        frontier_phi_77_pred_3 = _3090;
                        frontier_phi_77_pred_4 = _3089;
                        frontier_phi_77_pred_5 = _3088;
                    }
                    else
                    {
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        uint _3316 = _3103;
                        uint _3317;
                        vec4 _3342;
                        float _3343;
                        vec4 _3358;
                        vec3 _3370;
                        vec4 _3385;
                        vec4 _3400;
                        float _3446;
                        bool _3447;
                        for (;;)
                        {
                            uint _3327 = ((_3094 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3316));
                            _3317 = (_3316 + 4294967295u) & _3316;
                            uint _3329 = _3327 * 40u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3343 = _3342.w;
                            uint _3345 = (_3327 * 40u) + 4u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3360 = (_3327 * 40u) + 8u;
                            _3370 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x));
                            uint _3372 = (_3327 * 40u) + 16u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3327 * 40u) + 20u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3327 * 40u) + 24u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3421 = (_3327 * 40u) + 28u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3446 = fma(_2626, _3434.z, fma(_2625, _3434.y, _3434.x * _2624)) + _3434.w;
                            _3447 = !((fma(_2626, _3415.z, fma(_2625, _3415.y, _3415.x * _2624)) + _3415.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3447)
                            {
                                float _3474 = _3342.x - _2624;
                                float _3475 = _3342.y - _2625;
                                float _3476 = _3342.z - _2626;
                                float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                                float _3480 = inversesqrt(_3477);
                                float _3481 = _3480 * _3474;
                                float _3482 = _3480 * _3475;
                                float _3483 = _3480 * _3476;
                                float _3487 = 1.0 - (_3477 / (_3343 * _3343));
                                float _4603 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3488 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3492 = sqrt(_3477) * _3358.w;
                                float _3494 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                                float _3495 = _3494 * _3494;
                                float _3498 = ((1.0 - _3495) * dot(vec3(_3481, _3482, _3483), vec3(_875, _878, _881))) + _3495;
                                float _3501 = _3492 * _3492;
                                float _3505 = (fma(_2626, _3385.z, fma(_2625, _3385.y, _3385.x * _2624)) + _3385.w) / _3446;
                                float _3506 = (fma(_2626, _3400.z, fma(_2625, _3400.y, _3400.x * _2624)) + _3400.w) / _3446;
                                float _3510 = 1.0 - dot(vec2(_3505, _3506), vec2(_3505, _3506));
                                float _4619 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3512 = _3511 * (((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3488) / ((_3501 * 0.699999988079071044921875) + 1.0));
                                float _3524 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                                float _3525 = 1.0 - _935;
                                float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                                float _3533 = _3532 * _3532;
                                float _3534 = _3533 * _3533;
                                float _3535 = _3481 - _2954;
                                float _3536 = _3482 - _2955;
                                float _3537 = _3483 - _2956;
                                float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                                float _3545 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2954, (-0.0) - _2955, (-0.0) - _2956));
                                float _4630 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3549 = dot(vec3(_875, _878, _881), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                                float _4641 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                                float _3557 = _3494 * _3533;
                                float _3558 = _3557 * _3557;
                                float _3564 = ((1.0 - _3558) * dot(vec3(_875, _878, _881), vec3(_3481, _3482, _3483))) + _3558;
                                float _4652 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3566 = 1.0 - _3533;
                                float _3576 = (0.5 / (((_3565 * ((_3548 * _3566) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3533) * _3548))) * _3565;
                                float _4663 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3586 = (_3511 * _3488) * (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3556 * _3556) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3512 * _3358.y;
                                frontier_phi_83_pred_1 = _3512 * _3358.x;
                                frontier_phi_83_pred_2 = _3586 * _3370.z;
                                frontier_phi_83_pred_3 = _3586 * _3370.y;
                                frontier_phi_83_pred_4 = _3586 * _3370.x;
                                frontier_phi_83_pred_5 = _3512 * _3358.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3594 = frontier_phi_83_pred;
                            _3593 = frontier_phi_83_pred_1;
                            _3592 = frontier_phi_83_pred_2;
                            _3591 = frontier_phi_83_pred_3;
                            _3590 = frontier_phi_83_pred_4;
                            _3595 = frontier_phi_83_pred_5;
                            _3300 = _3593 + _3313;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            if (_3317 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3317;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3302;
                        frontier_phi_77_pred_1 = _3301;
                        frontier_phi_77_pred_2 = _3300;
                        frontier_phi_77_pred_3 = _3299;
                        frontier_phi_77_pred_4 = _3298;
                        frontier_phi_77_pred_5 = _3297;
                    }
                    _2939 = frontier_phi_77_pred;
                    _2937 = frontier_phi_77_pred_1;
                    _2935 = frontier_phi_77_pred_2;
                    _2933 = frontier_phi_77_pred_3;
                    _2931 = frontier_phi_77_pred_4;
                    _2929 = frontier_phi_77_pred_5;
                    uint _3095 = _3094 + 1u;
                    if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3088 = _2929;
                        _3089 = _2931;
                        _3090 = _2933;
                        _3091 = _2935;
                        _3092 = _2937;
                        _3093 = _2939;
                        _3094 = _3095;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2933;
                frontier_phi_58_59_ladder_1 = _2939;
                frontier_phi_58_59_ladder_2 = _2937;
                frontier_phi_58_59_ladder_3 = _2935;
                frontier_phi_58_59_ladder_4 = _2931;
                frontier_phi_58_59_ladder_5 = _2929;
            }
            else
            {
                frontier_phi_58_59_ladder = _2804;
                frontier_phi_58_59_ladder_1 = _2810;
                frontier_phi_58_59_ladder_2 = _2808;
                frontier_phi_58_59_ladder_3 = _2806;
                frontier_phi_58_59_ladder_4 = _2802;
                frontier_phi_58_59_ladder_5 = _2800;
            }
            _2928 = frontier_phi_58_59_ladder_5;
            _2930 = frontier_phi_58_59_ladder_4;
            _2932 = frontier_phi_58_59_ladder;
            _2934 = frontier_phi_58_59_ladder_3;
            _2936 = frontier_phi_58_59_ladder_2;
            _2938 = frontier_phi_58_59_ladder_1;
        }
        float _2943 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2683 = (_2943 * _2934) + _2135;
        _2685 = (_2943 * _2936) + _2137;
        _2687 = (_2943 * _2938) + _2139;
        _2689 = ((_2928 * 0.039999999105930328369140625) * _2943) + _2468;
        _2691 = ((_2930 * 0.039999999105930328369140625) * _2943) + _2470;
        _2693 = ((_2932 * 0.039999999105930328369140625) * _2943) + _2472;
    }
    else
    {
        _2683 = _2135;
        _2685 = _2137;
        _2687 = _2139;
        _2689 = _2468;
        _2691 = _2470;
        _2693 = _2472;
    }
    uint _2699 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _2705 = cbInstanceData._m0[_2699].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_479.x - _476) * _457) + _476)) - _716) * _726) + _716);
    float _2706 = cbInstanceData._m0[_2699].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_479.y - _477) * _457) + _477)) - _717) * _726) + _717);
    float _2707 = cbInstanceData._m0[_2699].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_479.z - _478) * _457) + _478)) - _718) * _726) + _718);
    float _4679 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4690 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4701 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2724 = (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2683 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _919))) + ((_2689 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1755)) * cbPerFrame._m0[3u].x)) + _2705;
    float _2726 = (_2706 + ((_2691 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1755)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2685 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _919)));
    float _2728 = (_2707 + ((_2693 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1755)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2687 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _919)));
    float _2729 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2730 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2731 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2737 = cbMtdParam._m0[2u].x * _2705;
    float _2738 = cbMtdParam._m0[2u].y * _2706;
    float _2739 = cbMtdParam._m0[2u].z * _2707;
    float _4727 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2741 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    uint _2742 = _894 + 6u;
    float _2750 = _855 / cbSceneParam._m0[86u].x;
    float _2751 = _856 / cbSceneParam._m0[86u].y;
    vec4 _2765 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2767 = _2765.x;
    float _2768 = _2765.y;
    float _2769 = _2765.z;
    float _2770 = _2765.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2825 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2826 = _2825 / _776;
        float _2837 = _2826 * _827;
        float _2838 = _828 * _2826;
        float _2839 = (-0.0) - _2838;
        float _2840 = _2826 * _829;
        float _2842 = (cbSceneParam._m0[77u].w * _2839) / _2825;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2838;
        float _2850 = sqrt(((_2837 * _2837) + (_2838 * _2838)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2825)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3045;
        if (abs((_2839 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3045 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2989 = 1.0 / cbSceneParam._m0[80u].x;
            float _2990 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2991 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _3000 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : min(_2990, 0.0));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            _3045 = ((abs(_2850 / _2839) * cbSceneParam._m0[80u].y) * ((((_3000 - _3001) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))))) * _2989)) - ((exp2(_2860 * _3000) - exp2(_2860 * _3001)) * _2989))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3047 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, 1.0), 0.0);
        float _3056 = exp2((_3045 * (-1.44269502162933349609375)) * (1.0 - _3047.w));
        float _3057 = log2(_3056);
        float _3073 = log2(_2770);
        _2862 = (exp2(_3073 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].x)) * _3047.x) / cbSceneParam._m0[78u].x)) + _2767;
        _2864 = (exp2(_3073 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].y)) * _3047.y) / cbSceneParam._m0[78u].y)) + _2768;
        _2866 = (exp2(_3073 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].z)) * _3047.z) / cbSceneParam._m0[78u].z)) + _2769;
        _2868 = _3056 * _2770;
    }
    else
    {
        _2862 = _2767;
        _2864 = _2768;
        _2866 = _2769;
        _2868 = _2770;
    }
    bool _3083;
    vec4 _2877;
    vec4 _2899;
    float _2901;
    float _2905;
    float _2906;
    float _2907;
    float _2910;
    float _2913;
    float _2916;
    float _2917;
    bool _2927;
    for (;;)
    {
        _2877 = cbMatDynParam._m0[0u];
        float _2879 = roundEven(_2877.y);
        bool _2880 = _2879 == 3.0;
        float _2881 = log2(_2868);
        float _2885 = exp2(_2881 * cbSceneParam._m0[78u].x);
        float _2886 = exp2(_2881 * cbSceneParam._m0[78u].y);
        float _2887 = exp2(_2881 * cbSceneParam._m0[78u].z);
        float _2888 = _2885 * _2729;
        float _2889 = _2886 * _2730;
        float _2890 = _2887 * _2731;
        float _2897 = _843 + (-0.5);
        _2899 = cbMtdParam._m0[1u];
        _2901 = _2899.y * _2897;
        float _2904 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2905 = _2904 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
        _2906 = _2904 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
        _2907 = _2904 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2866)));
        _2910 = ((_2737 * _2741) * _2885) * _2904;
        _2913 = ((_2738 * _2741) * _2886) * _2904;
        _2916 = ((_2739 * _2741) * _2887) * _2904;
        _2917 = _2897 * 0.999000012874603271484375;
        _2927 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2927)
        {
            if ((cbInstanceData._m0[_894 + 7u].x + _2917) < 0.5)
            {
                _3083 = true;
                break;
            }
        }
        uint _3024 = _895 + uint(_2877.w);
        if ((cbInstanceData._m0[_3024].w < 1.0) && ((cbInstanceData._m0[_3024].w + _2917) < 0.5))
        {
            _3083 = true;
            break;
        }
        if ((_2901 + 1.0) < _2899.x)
        {
            _3083 = true;
            break;
        }
        _3083 = false;
        break;
    }
    float _3288;
    if (_3083)
    {
        discard_state = true;
        _3288 = 0.0;
    }
    else
    {
        _3288 = cbInstanceData._m0[_2742].w;
    }
    SV_Target.x = _2905;
    SV_Target.y = _2906;
    SV_Target.z = _2907;
    SV_Target.w = _3288;
    SV_Target_1.x = _2910;
    SV_Target_1.y = _2913;
    SV_Target_1.z = _2916;
    SV_Target_1.w = cbInstanceData._m0[_2742].w;
    discard_exit();
}


