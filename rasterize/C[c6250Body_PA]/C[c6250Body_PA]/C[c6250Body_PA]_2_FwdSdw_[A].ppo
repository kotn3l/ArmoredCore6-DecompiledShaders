#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1374;
float _4073;
float _4074;
float _4075;
float _4076;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    float _318 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _333 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _335 = _333.x;
    float _359 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _4085 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _363 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _335) * _360) + _335;
    vec4 _376 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _393 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _395 = _393.x;
    float _396 = _393.y;
    float _397 = _393.z;
    float _406 = ((_376.z - _397) * _360) + _397;
    float _410 = ((((_376.x - _395) * _360) + _395) * 2.0) + (-1.0);
    float _412 = ((((_376.y - _396) * _360) + _396) * 2.0) + (-1.0);
    float _413 = dot(vec2(_410, _412), vec2(_410, _412));
    float _4096 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))));
    float _438 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _441 = (_438 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _442 = (_438 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _467 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _471 = cbPerFrame._m0[22u].x * 2.0;
    float _472 = _471 * cbMtdParam._m0[22u].y;
    float _479 = ((_467.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _481 = (-0.0) - (cbMtdParam._m0[22u].x * ((_467.x * 0.5) + (-0.25)));
    float _483 = fract(_472);
    float _485 = fract(_472 + 0.5);
    float _496 = abs((_483 * 2.0) + (-1.0));
    vec4 _513 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_483 * _481) + _441) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_479 * _483) + _442) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    vec4 _518 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_485 * _481) + _441) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_479 * _485) + _442) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _560 = (cbMtdParam._m0[23u].y * _438) + TEXCOORD_6.w;
    float _561 = (cbMtdParam._m0[23u].z * _438) + TEXCOORD_9.w;
    vec4 _574 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _578 = _471 * cbMtdParam._m0[18u].x;
    float _583 = ((_574.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _585 = (-0.0) - (cbMtdParam._m0[20u].z * ((_574.x * 0.5) + (-0.25)));
    float _586 = fract(_578);
    float _588 = fract(_578 + 0.5);
    float _589 = _586 * _585;
    float _590 = _583 * _586;
    float _593 = _588 * _585;
    float _594 = _583 * _588;
    float _599 = abs((_586 * 2.0) + (-1.0));
    vec4 _615 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_589 + _560) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_590 + _561) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    vec4 _620 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_593 + _560) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_594 + _561) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _650 = (cbMtdParam._m0[22u].w * _438) + TEXCOORD_6.w;
    float _651 = (cbMtdParam._m0[23u].x * _438) + TEXCOORD_9.w;
    vec4 _671 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_589 + _650) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_590 + _651) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _675 = _671.z;
    vec4 _676 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_593 + _650) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_594 + _651) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _696 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4107 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _705 = (((_697 * _697) * (3.0 - (_697 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _738 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _650) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _651) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4118 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _739 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _743 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_676.x - _673) * _599) + _673)) * _705) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_620.x - _617) * _599) + _617)))) * _739;
    float _747 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_676.y - _674) * _599) + _674)) * _705) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_620.y - _618) * _599) + _618)))) * _739;
    float _751 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_676.z - _675) * _599) + _675)) * _705) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_620.z - _619) * _599) + _619)))) * _739;
    float _755 = _743 - (_743 * _318);
    float _756 = _747 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _747);
    float _757 = _751 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _751);
    float _764 = (_318 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _318))) * (cbMtdParam._m0[20u].x + 1.0);
    float _4129 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _778 = (cbMtdParam._m0[20u].y * _410) + _410;
    float _779 = (cbMtdParam._m0[20u].y * _412) + _412;
    float _782 = fma(_418, _237 * NORMAL.x, fma(_779, _244 * TANGENT.x, (_230 * _222) * _778));
    float _785 = fma(_418, _237 * NORMAL.y, fma(_779, _244 * TANGENT.y, (_230 * _223) * _778));
    float _788 = fma(_418, _237 * NORMAL.z, fma(_779, _244 * TANGENT.z, (_230 * _224) * _778));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _4140 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _796 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4162 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4173 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4184 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _800 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    vec4 _881 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _883 = _881.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1055 = sqrt(((_867 * _867) + (_868 * _868)) + (_869 * _869));
        float _1061 = (cbMatDynParam._m0[5u].x * _1055) + cbMatDynParam._m0[5u].y;
        float _4195 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1066 = (cbMatDynParam._m0[5u].z * _1055) + cbMatDynParam._m0[5u].w;
        float _4206 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) - _1062)) + _1062) < ((_883 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _917 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _920 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _933 = uint(roundEven(NORMAL.w)) * 13u;
    uint _934 = _933 + 9u;
    uint _935 = _934 + uint(cbMatDynParam._m0[0u].w);
    float _941 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_935].x;
    float _942 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_935].y;
    float _943 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_935].z;
    float _4217 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _947 = 1.0 - _800;
    float _948 = _944 * _947;
    float _949 = _945 * _947;
    float _950 = _946 * _947;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _800;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _800;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _800;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _973 = _970.x * TEXCOORD_3.w;
    float _974 = dot(vec3(_793, _794, _795), vec3(_874, _875, _876));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _793) - _874;
    float _982 = (_977 * _794) - _875;
    float _983 = (_977 * _795) - _876;
    float _987 = abs(dot(vec3(_874, _875, _876), vec3(_793, _794, _795)));
    float _4250 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_796);
    float _1001 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1007 = (1.0 - _1001) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1008 = _1001 * _989;
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1044, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036));
        float _1103 = fma(_1044, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036));
        float _1107 = fma(_1044, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036));
        float _1131 = _1036 + _793;
        float _1132 = _1040 + _794;
        float _1133 = _1044 + _795;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1099;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1103;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1107;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_793, _794, _795), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4298 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_793, _794, _795), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4331 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_793, _794, _795), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4364 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1044, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036));
        float _1421 = fma(_1044, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036));
        float _1425 = fma(_1044, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036));
        float _1448 = _1036 + _793;
        float _1449 = _1040 + _794;
        float _1450 = _1044 + _795;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_793, _794, _795), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4427 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_793, _794, _795), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4460 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_793, _794, _795), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4493 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = _1374;
        _1695 = _1374;
        _1696 = _1374;
        _1697 = _1374;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1386)) + _1386;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1387)) + _1387;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1388)) + _1388;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _981 * 0.5;
    float _1755 = _982 * 0.5;
    float _1756 = _983 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1044, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1044, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1044, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1884 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1887 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1915 = frontier_phi_17_15_ladder;
        }
        float _2086;
        if (_1884 > 0.0)
        {
            _2086 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2086 = frontier_phi_26_22_ladder;
        }
        float _2381;
        if (_1887 > 0.0)
        {
            _2381 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2381 = frontier_phi_38_33_ladder;
        }
        float _2383 = isnan(_2086) ? _1915 : (isnan(_1915) ? _2086 : min(_1915, _2086));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1881) + _1870;
        float _2389 = (_2384 * _1884) + _1874;
        float _2390 = (_2384 * _1887) + _1878;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2391;
        float _2395 = _2391 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 > _2395) || ((_2389 < _2393) || ((_2388 < _2393) || (_2388 > _2395))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_16_38_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_16_38_ladder_2;
        _1905 = frontier_phi_16_38_ladder_1;
        _1907 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1044, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1044, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1044, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1979 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1982 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2091;
        if (_1976 > 0.0)
        {
            _2091 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2091 = frontier_phi_28_24_ladder;
        }
        float _2408;
        if (_1979 > 0.0)
        {
            _2408 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2408 = frontier_phi_40_35_ladder;
        }
        float _2746;
        if (_1982 > 0.0)
        {
            _2746 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2746 = frontier_phi_50_47_ladder;
        }
        float _2748 = isnan(_2408) ? _2091 : (isnan(_2091) ? _2408 : min(_2091, _2408));
        float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
        float _2753 = (_2749 * _1976) + _1965;
        float _2754 = (_2749 * _1979) + _1969;
        float _2755 = (_2749 * _1982) + _1973;
        float _2756 = _2749 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2756;
        float _2759 = _2756 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2755 > _2759) || ((_2755 < _2757) || ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 < _2757) || (_2753 > _2759))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2755, cbModelParam._m0[17u].z, fma(_2754, cbModelParam._m0[17u].y, _2753 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2755, cbModelParam._m0[18u].z, fma(_2754, cbModelParam._m0[18u].y, _2753 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2755, cbModelParam._m0[19u].z, fma(_2754, cbModelParam._m0[19u].y, _2753 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_25_50_ladder = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2877.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2877.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_25_50_ladder_2;
        _2003 = frontier_phi_25_50_ladder_1;
        _2005 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1912);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2018 = (((_1007 * _958) + _1008) * _973) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2020 = (((_1007 * _960) + _1008) * _973) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2022 = (((_1007 * _961) + _1008) * _973) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2078 = _2065 / _2077;
    float _2079 = _2069 / _2077;
    float _2080 = _2073 / _2077;
    float _2227;
    float _2228;
    float _2229;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2107 = ((uint(_2080 > cbSceneParam._m0[59u].y) + uint(_2080 > cbSceneParam._m0[59u].x)) + uint(_2080 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2108 = _2107 + 43u;
        uint _2116 = _2107 + 44u;
        uint _2124 = _2107 + 45u;
        uint _2132 = _2107 + 46u;
        float _2143 = fma(_2077, cbSceneParam._m0[_2108].w, fma(_2073, cbSceneParam._m0[_2108].z, fma(_2069, cbSceneParam._m0[_2108].y, _2065 * cbSceneParam._m0[_2108].x)));
        float _2147 = fma(_2077, cbSceneParam._m0[_2116].w, fma(_2073, cbSceneParam._m0[_2116].z, fma(_2069, cbSceneParam._m0[_2116].y, _2065 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2077, cbSceneParam._m0[_2132].w, fma(_2073, cbSceneParam._m0[_2132].z, fma(_2069, cbSceneParam._m0[_2132].y, _2065 * cbSceneParam._m0[_2132].x)));
        float _2160 = cbSceneParam._m0[33u].z * _2155;
        float _2162 = cbSceneParam._m0[33u].w * _2155;
        float _2165 = fma(_2077, cbSceneParam._m0[_2124].w, fma(_2073, cbSceneParam._m0[_2124].z, fma(_2069, cbSceneParam._m0[_2124].y, _2065 * cbSceneParam._m0[_2124].x))) / _2155;
        float _2213 = (cbSceneParam._m0[33u].x - sqrt(((_2079 * _2079) + (_2078 * _2078)) + (_2080 * _2080))) * cbSceneParam._m0[33u].y;
        float _4619 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2220 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2143) / _2155, (_2162 + _2147) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 + _2143) / _2155, (_2147 - _2160) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 - _2160) / _2155, (_2147 - _2162) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 - _2162) / _2155, (_2160 + _2147) / _2155), _2165), 0.0)).x), vec4(0.25)));
        _2227 = 1.0 - (_2220 * cbSceneParam._m0[34u].x);
        _2228 = 1.0 - (_2220 * cbSceneParam._m0[34u].y);
        _2229 = 1.0 - (_2220 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2227 = 1.0;
        _2228 = 1.0;
        _2229 = 1.0;
    }
    float _2293;
    float _2295;
    float _2297;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2281 = fma(_2077, cbSceneParam._m0[63u].w, fma(_2073, cbSceneParam._m0[63u].z, fma(_2069, cbSceneParam._m0[63u].y, _2065 * cbSceneParam._m0[63u].x)));
        float _2282 = fma(_2077, cbSceneParam._m0[60u].w, fma(_2073, cbSceneParam._m0[60u].z, fma(_2069, cbSceneParam._m0[60u].y, _2065 * cbSceneParam._m0[60u].x))) / _2281;
        float _2283 = fma(_2077, cbSceneParam._m0[61u].w, fma(_2073, cbSceneParam._m0[61u].z, fma(_2069, cbSceneParam._m0[61u].y, _2065 * cbSceneParam._m0[61u].x))) / _2281;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2282 >= cbSceneParam._m0[64u].x) && (_2283 >= cbSceneParam._m0[64u].y)) && (_2282 <= cbSceneParam._m0[64u].z)) && (_2283 <= cbSceneParam._m0[64u].w))
        {
            float _2421 = fma(_2077, cbSceneParam._m0[62u].w, fma(_2073, cbSceneParam._m0[62u].z, fma(_2069, cbSceneParam._m0[62u].y, _2065 * cbSceneParam._m0[62u].x))) / _2281;
            float _2425 = isnan(cbSceneParam._m0[41u].w) ? _2421 : (isnan(_2421) ? cbSceneParam._m0[41u].w : max(_2421, cbSceneParam._m0[41u].w));
            float _2468 = (cbSceneParam._m0[33u].x - sqrt(((_2079 * _2079) + (_2078 * _2078)) + (_2080 * _2080))) * cbSceneParam._m0[33u].y;
            float _4635 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
            float _2475 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2282, cbSceneParam._m0[33u].w + _2283), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2282, _2283 - cbSceneParam._m0[33u].z), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2282 - cbSceneParam._m0[33u].z, _2283 - cbSceneParam._m0[33u].w), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2282 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2283), _2425), 0.0)).x), vec4(0.25)));
            float _2479 = 1.0 - (_2475 * cbSceneParam._m0[34u].x);
            float _2480 = 1.0 - (_2475 * cbSceneParam._m0[34u].y);
            float _2481 = 1.0 - (_2475 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
            frontier_phi_37_36_ladder_1 = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_37_36_ladder_2 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
        }
        else
        {
            frontier_phi_37_36_ladder = _2229;
            frontier_phi_37_36_ladder_1 = _2228;
            frontier_phi_37_36_ladder_2 = _2227;
        }
        _2293 = frontier_phi_37_36_ladder_2;
        _2295 = frontier_phi_37_36_ladder_1;
        _2297 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2293 = _2227;
        _2295 = _2228;
        _2297 = _2229;
    }
    uvec4 _2302 = floatBitsToUint(cbInstanceData._m0[_933 + 5u]);
    uint _2304 = _2302.x * 14u;
    uint _2305 = _2304 + 13u;
    float _2312 = _973 + (-1.0);
    float _2317 = (cbLight._m0[_2305].x * _2312) + 1.0;
    float _2318 = (cbLight._m0[_2305].y * _2312) + 1.0;
    float _2319 = (cbLight._m0[_2305].z * _2312) + 1.0;
    float _2320 = (cbLight._m0[_2305].w * _2312) + 1.0;
    uint _2321 = _2304 + 5u;
    float _2327 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
    uint _2331 = _2304 + 4u;
    float _2340 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2344 = _2304 | 1u;
    float _2355 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_793, _794, _795));
    float _2358 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_793, _794, _795));
    float _4671 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _4682 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2363 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2365 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2372 = ((cbLight._m0[_2321].x * _2327) * _2365) + (((cbLight._m0[_2331].x * _2293) * _2340) * _2363);
    float _2373 = ((_2327 * cbLight._m0[_2321].y) * _2365) + (((cbLight._m0[_2331].y * _2295) * _2340) * _2363);
    float _2374 = ((_2327 * cbLight._m0[_2321].z) * _2365) + (((cbLight._m0[_2331].z * _2297) * _2340) * _2363);
    uvec4 _2378 = floatBitsToUint(cbLight._m0[_2304 + 12u]);
    bool _2380 = _2378.x == 0u;
    float _2482;
    float _2484;
    float _2486;
    if (_2380)
    {
        _2482 = _2372;
        _2484 = _2373;
        _2486 = _2374;
    }
    else
    {
        uint _2490 = _2304 + 6u;
        float _2506 = (dot(vec3(cbLight._m0[_2304 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4693 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2509 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2482 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2372;
        _2484 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2373;
        _2486 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2374;
    }
    bool _2489 = _2378.y == 0u;
    float _2544;
    float _2546;
    float _2548;
    if (_2489)
    {
        _2544 = _2482;
        _2546 = _2484;
        _2548 = _2486;
    }
    else
    {
        uint _2717 = _2304 + 7u;
        float _2733 = (dot(vec3(cbLight._m0[_2304 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2734 = _2733 * _2733;
        float _4709 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2735 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2736 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2544 = (((cbLight._m0[_2717].x * 0.3183098733425140380859375) * _2735) * _2736) + _2482;
        _2546 = (((cbLight._m0[_2717].y * 0.3183098733425140380859375) * _2735) * _2736) + _2484;
        _2548 = (((cbLight._m0[_2717].z * 0.3183098733425140380859375) * _2735) * _2736) + _2486;
    }
    uint _2551 = _2304 + 8u;
    float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _796) * 0.949999988079071044921875);
    float _2565 = _2564 * _2564;
    float _2566 = cbLight._m0[_2304].x + _874;
    float _2567 = cbLight._m0[_2304].y + _875;
    float _2568 = cbLight._m0[_2304].z + _876;
    float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
    float _2573 = _2572 * _2566;
    float _2574 = _2572 * _2567;
    float _2575 = _2572 * _2568;
    float _2576 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2304].xyz));
    float _4725 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _4736 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2580 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2581 = dot(vec3(_793, _794, _795), vec3(_2573, _2574, _2575));
    float _4747 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2585 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2573, _2574, _2575));
    float _4758 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2589 = _2565 * _2565;
    float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
    float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2602 = 0.959999978542327880859375 - _955;
    float _2604 = 0.959999978542327880859375 - _956;
    float _2605 = 0.959999978542327880859375 - _957;
    float _2612 = 1.0 - _2565;
    float _2623 = (0.5 / (((_2580 * ((_2579 * _2612) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2612) + _2565) * _2579))) * _2579;
    float _4769 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
    uint _2639 = _2304 + 9u;
    float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _796) * 0.949999988079071044921875);
    float _2651 = _2650 * _2650;
    float _2652 = cbLight._m0[_2344].x + _874;
    float _2653 = cbLight._m0[_2344].y + _875;
    float _2654 = cbLight._m0[_2344].z + _876;
    float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
    float _2659 = _2658 * _2652;
    float _2660 = _2658 * _2653;
    float _2661 = _2658 * _2654;
    float _2662 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2344].xyz));
    float _4780 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2666 = dot(vec3(_793, _794, _795), vec3(_2659, _2660, _2661));
    float _4791 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2670 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2659, _2660, _2661));
    float _4802 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2674 = _2651 * _2651;
    float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
    float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
    float _2692 = 1.0 - _2651;
    float _2702 = (0.5 / (((_2580 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2692) + _2651) * _2665))) * _2665;
    float _4813 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2704 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
    float _2714 = (((((_2685 * _2602) + _958) * cbLight._m0[_2639].x) * _2704) * _2327) + ((((cbLight._m0[_2551].x * _2293) * ((_2601 * _2602) + _958)) * _2625) * _2340);
    float _2715 = (((((_2685 * _2604) + _960) * cbLight._m0[_2639].y) * _2704) * _2327) + ((((cbLight._m0[_2551].y * _2295) * ((_2601 * _2604) + _960)) * _2625) * _2340);
    float _2716 = (((((_2685 * _2605) + _961) * cbLight._m0[_2639].z) * _2704) * _2327) + ((((cbLight._m0[_2551].z * _2297) * ((_2601 * _2605) + _961)) * _2625) * _2340);
    float _2772;
    float _2774;
    float _2776;
    if (_2380)
    {
        _2772 = _2714;
        _2774 = _2715;
        _2776 = _2716;
    }
    else
    {
        uint _2778 = _2304 + 2u;
        uint _2782 = _2304 + 10u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _796) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _874;
        float _2799 = cbLight._m0[_2778].y + _875;
        float _2800 = cbLight._m0[_2778].z + _876;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2778].xyz));
        float _4824 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2812 = dot(vec3(_793, _794, _795), vec3(_2805, _2806, _2807));
        float _4835 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4846 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2831 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2838 = 1.0 - _2797;
        float _2848 = (0.5 / (((_2580 * ((_2811 * _2838) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2838) + _2797) * _2811))) * _2811;
        float _4857 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2772 = (((((_2831 * _2602) + _958) * cbLight._m0[_2782].x) * _2850) * _2851) + _2714;
        _2774 = (((((_2831 * _2604) + _960) * cbLight._m0[_2782].y) * _2850) * _2851) + _2715;
        _2776 = (((((_2831 * _2605) + _961) * cbLight._m0[_2782].z) * _2850) * _2851) + _2716;
    }
    float _2882;
    float _2884;
    float _2886;
    if (_2489)
    {
        _2882 = _2772;
        _2884 = _2774;
        _2886 = _2776;
    }
    else
    {
        uint _2893 = _2304 + 3u;
        uint _2897 = _2304 + 11u;
        float _2911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2893].w)) * _796) * 0.949999988079071044921875);
        float _2912 = _2911 * _2911;
        float _2913 = cbLight._m0[_2893].x + _874;
        float _2914 = cbLight._m0[_2893].y + _875;
        float _2915 = cbLight._m0[_2893].z + _876;
        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
        float _2920 = _2919 * _2913;
        float _2921 = _2919 * _2914;
        float _2922 = _2919 * _2915;
        float _2923 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2893].xyz));
        float _4873 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2927 = dot(vec3(_793, _794, _795), vec3(_2920, _2921, _2922));
        float _4884 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2930 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2931 = dot(vec3(cbLight._m0[_2893].xyz), vec3(_2920, _2921, _2922));
        float _4895 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2935 = _2912 * _2912;
        float _2939 = ((_2930 * _2930) * (_2935 + (-1.0))) + 1.0;
        float _2946 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
        float _2953 = 1.0 - _2912;
        float _2963 = (0.5 / (((_2580 * ((_2926 * _2953) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2953) + _2912) * _2926))) * _2926;
        float _4906 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2965 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2935 / ((_2939 * _2939) * 3.141590118408203125));
        float _2966 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2882 = (((((_2946 * _2602) + _958) * cbLight._m0[_2897].x) * _2965) * _2966) + _2772;
        _2884 = (((((_2946 * _2604) + _960) * cbLight._m0[_2897].y) * _2965) * _2966) + _2774;
        _2886 = (((((_2946 * _2605) + _961) * cbLight._m0[_2897].z) * _2965) * _2966) + _2776;
    }
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    if (_2302.y == 0u)
    {
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.x;
        uint _2999 = uint((float(_2987.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2988))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2988)));
        float _3009 = (log2(_2080 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3010 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        uint _3013 = uint(isnan(14.0) ? _3010 : (isnan(_3010) ? 14.0 : min(_3010, 14.0)));
        uvec4 _3018 = texelFetch(g_lightClusterGridBuffer, int(((_3013 << 2u) + (_2999 << 6u)) >> 2u));
        uint _3019 = _3018.x;
        uint _3020 = _2987.z;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((((1u << ((_3020 >> 4u) & 15u)) + 4294967295u) & _3019) == 0u) || ((_3020 & 240u) == 0u))
        {
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
        }
        else
        {
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_3013 << 5u) + (_2999 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3304)
                {
                    frontier_phi_71_pred = _3293;
                    frontier_phi_71_pred_1 = _3292;
                    frontier_phi_71_pred_2 = _3291;
                    frontier_phi_71_pred_3 = _3290;
                    frontier_phi_71_pred_4 = _3289;
                    frontier_phi_71_pred_5 = _3288;
                }
                else
                {
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    uint _3439;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3303;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    for (;;)
                    {
                        uint _3443 = uint(findLSB(_3439)) + (_3294 << 5u);
                        uint _3440 = (_3439 + 4294967295u) & _3439;
                        uint _3445 = _3443 * 48u;
                        vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3465 = (_3443 * 48u) + 4u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3484 = (_3443 * 48u) + 8u;
                        vec3 _3495 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x));
                        float _3499 = _3459.x - _2078;
                        float _3500 = _3459.y - _2079;
                        float _3501 = _3459.z - _2080;
                        float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                        float _3505 = inversesqrt(_3502);
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3509 = dot(vec3(_914, _917, _920), vec3(_3506, _3507, _3508));
                        float _3514 = 1.0 - (_3502 * _3459.w);
                        float _4932 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3516 = sqrt(_3502) * _3478.w;
                        float _3519 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                        float _3520 = _3519 * _3519;
                        float _3523 = ((1.0 - _3520) * _3509) + _3520;
                        float _3526 = _3516 * _3516;
                        float _3530 = ((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3515) / ((_3526 * 0.699999988079071044921875) + 1.0);
                        float _3534 = (-0.0) - _2078;
                        float _3535 = (-0.0) - _2079;
                        float _3536 = (-0.0) - _2080;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3541 = _3540 * _3534;
                        float _3542 = _3540 * _3535;
                        float _3543 = _3540 * _3536;
                        float _3550 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                        float _3551 = 1.0 - _989;
                        float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                        float _3559 = _3558 * _3558;
                        float _3560 = _3559 * _3559;
                        float _3561 = _3541 + _3506;
                        float _3562 = _3542 + _3507;
                        float _3563 = _3543 + _3508;
                        float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                        float _3571 = dot(vec3(_914, _917, _920), vec3(_3541, _3542, _3543));
                        float _4948 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3575 = dot(vec3(_914, _917, _920), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                        float _4959 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                        float _3583 = _3519 * _3559;
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3509) + _3584;
                        float _4970 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3588 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3589 = 1.0 - _3559;
                        float _3599 = (0.5 / (((_3588 * ((_3574 * _3589) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3559) * _3574))) * _3588;
                        float _4981 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3610 = (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3582 * _3582) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125))) * _3515;
                        _3363 = (_3530 * _3478.x) + _3436;
                        _3364 = (_3530 * _3478.y) + _3437;
                        _3365 = (_3530 * _3478.z) + _3438;
                        _3360 = (_3610 * _3495.x) + _3433;
                        _3361 = (_3610 * _3495.y) + _3434;
                        _3362 = (_3610 * _3495.z) + _3435;
                        if (_3440 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3440;
                        }
                    }
                    frontier_phi_71_pred = _3365;
                    frontier_phi_71_pred_1 = _3364;
                    frontier_phi_71_pred_2 = _3363;
                    frontier_phi_71_pred_3 = _3362;
                    frontier_phi_71_pred_4 = _3361;
                    frontier_phi_71_pred_5 = _3360;
                }
                _3139 = frontier_phi_71_pred;
                _3137 = frontier_phi_71_pred_1;
                _3135 = frontier_phi_71_pred_2;
                _3133 = frontier_phi_71_pred_3;
                _3131 = frontier_phi_71_pred_4;
                _3129 = frontier_phi_71_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3129;
                    _3289 = _3131;
                    _3290 = _3133;
                    _3291 = _3135;
                    _3292 = _3137;
                    _3293 = _3139;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
        }
        uvec4 _3142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3143 = _3142.z;
        uint _3145 = (_3143 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3145) & _3019) == 0u)
        {
            _3256 = _3128;
            _3258 = _3130;
            _3260 = _3132;
            _3262 = _3134;
            _3264 = _3136;
            _3266 = _3138;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
            float _3282 = _3281 * _2078;
            float _3283 = _3281 * _2079;
            float _3284 = _3281 * _2080;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3145 < ((_3143 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3416 = _3128;
                float _3417 = _3130;
                float _3418 = _3132;
                float _3419 = _3134;
                float _3420 = _3136;
                float _3421 = _3138;
                uint _3422 = _3145;
                uint _3431;
                bool _3432;
                for (;;)
                {
                    _3431 = texelFetch(g_lightClassification, int((((_3013 << 5u) + (_2999 << 9u)) + (_3422 << 2u)) >> 2u)).x;
                    _3432 = _3431 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3432)
                    {
                        frontier_phi_82_pred = _3421;
                        frontier_phi_82_pred_1 = _3420;
                        frontier_phi_82_pred_2 = _3419;
                        frontier_phi_82_pred_3 = _3418;
                        frontier_phi_82_pred_4 = _3417;
                        frontier_phi_82_pred_5 = _3416;
                    }
                    else
                    {
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        uint _3643 = _3431;
                        uint _3644;
                        vec4 _3669;
                        float _3670;
                        vec4 _3685;
                        vec3 _3697;
                        vec4 _3712;
                        vec4 _3727;
                        float _3773;
                        bool _3774;
                        for (;;)
                        {
                            uint _3654 = ((_3422 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3643));
                            _3644 = (_3643 + 4294967295u) & _3643;
                            uint _3656 = _3654 * 40u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3670 = _3669.w;
                            uint _3672 = (_3654 * 40u) + 4u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3654 * 40u) + 8u;
                            _3697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x));
                            uint _3699 = (_3654 * 40u) + 16u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3654 * 40u) + 20u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3729 = (_3654 * 40u) + 24u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3748 = (_3654 * 40u) + 28u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3773 = fma(_2080, _3761.z, fma(_2079, _3761.y, _3761.x * _2078)) + _3761.w;
                            _3774 = !((fma(_2080, _3742.z, fma(_2079, _3742.y, _3742.x * _2078)) + _3742.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3774)
                            {
                                float _3801 = _3669.x - _2078;
                                float _3802 = _3669.y - _2079;
                                float _3803 = _3669.z - _2080;
                                float _3804 = dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803));
                                float _3807 = inversesqrt(_3804);
                                float _3808 = _3807 * _3801;
                                float _3809 = _3807 * _3802;
                                float _3810 = _3807 * _3803;
                                float _3814 = 1.0 - (_3804 / (_3670 * _3670));
                                float _4992 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3819 = sqrt(_3804) * _3685.w;
                                float _3821 = 1.39999997615814208984375 / (_3819 + 1.39999997615814208984375);
                                float _3822 = _3821 * _3821;
                                float _3825 = ((1.0 - _3822) * dot(vec3(_3808, _3809, _3810), vec3(_914, _917, _920))) + _3822;
                                float _3828 = _3819 * _3819;
                                float _3832 = (fma(_2080, _3712.z, fma(_2079, _3712.y, _3712.x * _2078)) + _3712.w) / _3773;
                                float _3833 = (fma(_2080, _3727.z, fma(_2079, _3727.y, _3727.x * _2078)) + _3727.w) / _3773;
                                float _3837 = 1.0 - dot(vec2(_3832, _3833), vec2(_3832, _3833));
                                float _5008 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3838 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3839 = _3838 * (((isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0))) * _3815) / ((_3828 * 0.699999988079071044921875) + 1.0));
                                float _3851 = exp2(log2(1.0 / ((_3828 * 3.5) + 5.0)) * 0.25);
                                float _3852 = 1.0 - _989;
                                float _3859 = sqrt(1.0 - ((1.0 - (_3852 * _3852)) * (1.0 - (_3851 * _3851))));
                                float _3860 = _3859 * _3859;
                                float _3861 = _3860 * _3860;
                                float _3862 = _3808 - _3282;
                                float _3863 = _3809 - _3283;
                                float _3864 = _3810 - _3284;
                                float _3868 = inversesqrt(dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864)));
                                float _3872 = dot(vec3(_914, _917, _920), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _5019 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3876 = dot(vec3(_914, _917, _920), vec3(_3868 * _3862, _3868 * _3863, _3868 * _3864));
                                float _5030 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3883 = ((_3879 * _3879) * (_3861 + (-1.0))) + 1.0;
                                float _3884 = _3821 * _3860;
                                float _3885 = _3884 * _3884;
                                float _3891 = ((1.0 - _3885) * dot(vec3(_914, _917, _920), vec3(_3808, _3809, _3810))) + _3885;
                                float _5041 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3892 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3893 = 1.0 - _3860;
                                float _3903 = (0.5 / (((_3892 * ((_3875 * _3893) + _3860)) + 9.9999999392252902907785028219223e-09) + (((_3892 * _3893) + _3860) * _3875))) * _3892;
                                float _5052 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3913 = (_3838 * _3815) * (((_3861 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3883 * _3883) * ((_3828 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3839 * _3685.z;
                                frontier_phi_88_pred_1 = _3839 * _3685.y;
                                frontier_phi_88_pred_2 = _3839 * _3685.x;
                                frontier_phi_88_pred_3 = _3913 * _3697.z;
                                frontier_phi_88_pred_4 = _3913 * _3697.y;
                                frontier_phi_88_pred_5 = _3913 * _3697.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3922 = frontier_phi_88_pred;
                            _3921 = frontier_phi_88_pred_1;
                            _3920 = frontier_phi_88_pred_2;
                            _3919 = frontier_phi_88_pred_3;
                            _3918 = frontier_phi_88_pred_4;
                            _3917 = frontier_phi_88_pred_5;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            if (_3644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3644;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3629;
                        frontier_phi_82_pred_1 = _3628;
                        frontier_phi_82_pred_2 = _3627;
                        frontier_phi_82_pred_3 = _3626;
                        frontier_phi_82_pred_4 = _3625;
                        frontier_phi_82_pred_5 = _3624;
                    }
                    _3267 = frontier_phi_82_pred;
                    _3265 = frontier_phi_82_pred_1;
                    _3263 = frontier_phi_82_pred_2;
                    _3261 = frontier_phi_82_pred_3;
                    _3259 = frontier_phi_82_pred_4;
                    _3257 = frontier_phi_82_pred_5;
                    uint _3423 = _3422 + 1u;
                    if (_3423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3416 = _3257;
                        _3417 = _3259;
                        _3418 = _3261;
                        _3419 = _3263;
                        _3420 = _3265;
                        _3421 = _3267;
                        _3422 = _3423;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3263;
                frontier_phi_63_64_ladder_1 = _3267;
                frontier_phi_63_64_ladder_2 = _3265;
                frontier_phi_63_64_ladder_3 = _3261;
                frontier_phi_63_64_ladder_4 = _3259;
                frontier_phi_63_64_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_63_64_ladder = _3134;
                frontier_phi_63_64_ladder_1 = _3138;
                frontier_phi_63_64_ladder_2 = _3136;
                frontier_phi_63_64_ladder_3 = _3132;
                frontier_phi_63_64_ladder_4 = _3130;
                frontier_phi_63_64_ladder_5 = _3128;
            }
            _3256 = frontier_phi_63_64_ladder_5;
            _3258 = frontier_phi_63_64_ladder_4;
            _3260 = frontier_phi_63_64_ladder_3;
            _3262 = frontier_phi_63_64_ladder;
            _3264 = frontier_phi_63_64_ladder_2;
            _3266 = frontier_phi_63_64_ladder_1;
        }
        float _3271 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _3032 = (_3271 * _3262) + _2544;
        _3034 = (_3271 * _3264) + _2546;
        _3036 = (_3271 * _3266) + _2548;
        _3038 = ((_3256 * _958) * _3271) + _2882;
        _3040 = ((_3258 * _960) * _3271) + _2884;
        _3042 = ((_3260 * _961) * _3271) + _2886;
    }
    else
    {
        _3032 = _2544;
        _3034 = _2546;
        _3036 = _2548;
        _3038 = _2882;
        _3040 = _2884;
        _3042 = _2886;
    }
    uint _3048 = _934 + uint(cbMatDynParam._m0[0u].w);
    float _3054 = cbInstanceData._m0[_3048].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_518.x - _515) * _496) + _515)) - _755) * _765) + _755);
    float _3055 = cbInstanceData._m0[_3048].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_518.y - _516) * _496) + _516)) - _756) * _765) + _756);
    float _3056 = cbInstanceData._m0[_3048].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_518.z - _517) * _496) + _517)) - _757) * _765) + _757);
    float _5068 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _5079 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5090 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _3073 = (((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3032 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _973))) + ((_3038 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + _3054;
    float _3075 = (_3055 + ((_3040 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3034 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _973)));
    float _3077 = (_3056 + ((_3042 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3036 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _973)));
    float _3078 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
    float _3079 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
    float _3080 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
    float _3086 = cbMtdParam._m0[2u].x * _3054;
    float _3087 = cbMtdParam._m0[2u].y * _3055;
    float _3088 = cbMtdParam._m0[2u].z * _3056;
    float _5116 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3090 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
    uint _3091 = _933 + 6u;
    float _3099 = _895 / cbSceneParam._m0[86u].x;
    float _3100 = _896 / cbSceneParam._m0[86u].y;
    vec4 _3114 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3099, _3100, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3116 = _3114.x;
    float _3117 = _3114.y;
    float _3118 = _3114.z;
    float _3119 = _3114.w;
    float _3190;
    float _3192;
    float _3194;
    float _3196;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3153 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3154 = _3153 / _816;
        float _3165 = _3154 * _867;
        float _3166 = _868 * _3154;
        float _3167 = (-0.0) - _3166;
        float _3168 = _3154 * _869;
        float _3170 = (cbSceneParam._m0[77u].w * _3167) / _3153;
        float _3171 = _3170 + cbSceneParam._m0[79u].w;
        float _3172 = cbSceneParam._m0[79u].w - _3166;
        float _3178 = sqrt(((_3165 * _3165) + (_3166 * _3166)) + (_3168 * _3168));
        float _3181 = (1.0 - (cbSceneParam._m0[77u].w / _3153)) * _3178;
        float _3186 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3188 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3373;
        if (abs((_3167 - _3170) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3373 = ((((_3171 > 0.0) ? exp2(_3186 * _3171) : (2.0 - exp2(_3188 * _3171))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3181;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3172) ? _3171 : (isnan(_3171) ? _3172 : max(_3171, _3172));
            float _3319 = isnan(_3172) ? _3171 : (isnan(_3171) ? _3172 : min(_3171, _3172));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3373 = ((abs(_3178 / _3167) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3186 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3186 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3188 * _3328) - exp2(_3188 * _3329)) * _3317))) + (_3181 * cbSceneParam._m0[80u].z);
        }
        vec4 _3375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3099, _3100, 1.0), 0.0);
        float _3384 = exp2((_3373 * (-1.44269502162933349609375)) * (1.0 - _3375.w));
        float _3385 = log2(_3384);
        float _3401 = log2(_3119);
        _3190 = (exp2(_3401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].x)) * _3375.x) / cbSceneParam._m0[78u].x)) + _3116;
        _3192 = (exp2(_3401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].y)) * _3375.y) / cbSceneParam._m0[78u].y)) + _3117;
        _3194 = (exp2(_3401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].z)) * _3375.z) / cbSceneParam._m0[78u].z)) + _3118;
        _3196 = _3384 * _3119;
    }
    else
    {
        _3190 = _3116;
        _3192 = _3117;
        _3194 = _3118;
        _3196 = _3119;
    }
    bool _3411;
    vec4 _3205;
    vec4 _3227;
    float _3229;
    float _3233;
    float _3234;
    float _3235;
    float _3238;
    float _3241;
    float _3244;
    float _3245;
    bool _3255;
    for (;;)
    {
        _3205 = cbMatDynParam._m0[0u];
        float _3207 = roundEven(_3205.y);
        bool _3208 = _3207 == 3.0;
        float _3209 = log2(_3196);
        float _3213 = exp2(_3209 * cbSceneParam._m0[78u].x);
        float _3214 = exp2(_3209 * cbSceneParam._m0[78u].y);
        float _3215 = exp2(_3209 * cbSceneParam._m0[78u].z);
        float _3216 = _3213 * _3078;
        float _3217 = _3214 * _3079;
        float _3218 = _3215 * _3080;
        float _3225 = _883 + (-0.5);
        _3227 = cbMtdParam._m0[1u];
        _3229 = _3227.y * _3225;
        float _3232 = (_3207 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3233 = _3232 * (_3208 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3190)));
        _3234 = _3232 * (_3208 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3192)));
        _3235 = _3232 * (_3208 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3194)));
        _3238 = ((_3086 * _3090) * _3213) * _3232;
        _3241 = ((_3087 * _3090) * _3214) * _3232;
        _3244 = ((_3088 * _3090) * _3215) * _3232;
        _3245 = _3225 * 0.999000012874603271484375;
        _3255 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3255)
        {
            if ((cbInstanceData._m0[_933 + 7u].x + _3245) < 0.5)
            {
                _3411 = true;
                break;
            }
        }
        uint _3352 = _934 + uint(_3205.w);
        if ((cbInstanceData._m0[_3352].w < 1.0) && ((cbInstanceData._m0[_3352].w + _3245) < 0.5))
        {
            _3411 = true;
            break;
        }
        if ((_3229 + 1.0) < _3227.x)
        {
            _3411 = true;
            break;
        }
        _3411 = false;
        break;
    }
    float _3615;
    if (_3411)
    {
        discard_state = true;
        _3615 = 0.0;
    }
    else
    {
        _3615 = cbInstanceData._m0[_3091].w;
    }
    SV_Target.x = _3233;
    SV_Target.y = _3234;
    SV_Target.z = _3235;
    SV_Target.w = _3615;
    SV_Target_1.x = _3238;
    SV_Target_1.y = _3241;
    SV_Target_1.z = _3244;
    SV_Target_1.w = cbInstanceData._m0[_3091].w;
    discard_exit();
}


