#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_24;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 6) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 8) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_22;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1578;
float _4018;
float _4019;
float _4020;
float _4021;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[8u].w));
    vec4 _341 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _370 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w));
    float _393 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625;
    float _401 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * _393)) * (cbMtdParam._m0[17u].w + 1.0);
    float _4030 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _409 = (_402 * ((_370.x * cbMtdParam._m0[11u].x) - _284)) + _284;
    float _410 = (_402 * ((_370.y * cbMtdParam._m0[11u].y) - _285)) + _285;
    float _411 = (_402 * ((_370.z * cbMtdParam._m0[11u].z) - _286)) + _286;
    float _417 = (TEXCOORD_9.x - ((cbMtdParam._m0[19u].y * (1.0 - TEXCOORD_9.x)) * _393)) * (cbMtdParam._m0[19u].x + 1.0);
    float _4041 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _425 = (((_341.x * cbMtdParam._m0[14u].x) - _409) * _418) + _409;
    float _426 = (((_341.y * cbMtdParam._m0[14u].y) - _410) * _418) + _410;
    float _427 = (((_341.z * cbMtdParam._m0[14u].z) - _411) * _418) + _411;
    float _443 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    float _448 = 1.0 - _443;
    float _451 = cbMtdParam._m0[20u].x + 1.0;
    float _452 = (_443 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * _448)) * _451;
    float _4052 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _460 = (_453 * ((_313.x * cbMtdParam._m0[15u].x) - _425)) + _425;
    float _461 = (_453 * ((_313.y * cbMtdParam._m0[15u].y) - _426)) + _426;
    float _462 = (_453 * ((_313.z * cbMtdParam._m0[15u].z) - _427)) + _427;
    vec4 _475 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _477 = _475.x;
    float _495 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _477) * _402) + _477;
    float _497 = _495 - (_495 * _418);
    float _501 = (_443 - ((_393 * cbMtdParam._m0[19u].w) * _448)) * _451;
    float _4063 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = _497 - (_497 * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))));
    vec4 _520 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _542 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _558 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _562 = _558.z;
    float _571 = ((_542.z - _562) * _402) + _562;
    float _574 = ((((_542.x - _560) * _402) + _560) * 2.0) + (-1.0);
    float _575 = ((((_542.y - _561) * _402) + _561) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _4074 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))));
    float _586 = (((_520.z - _571) * TEXCOORD_9.x) * cbMtdParam._m0[19u].z) + _571;
    vec4 _599 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[10u].w));
    float _616 = (((((((_599.z - _586) * TEXCOORD_15) * cbMtdParam._m0[21u].y) + _586) * cbMtdParam._m0[21u].z) - _586) * _453) + _586;
    float _632 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _635 = (_632 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _636 = (_632 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _661 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _665 = cbPerFrame._m0[22u].x * 2.0;
    float _666 = _665 * cbMtdParam._m0[22u].y;
    float _673 = ((_661.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _675 = (-0.0) - (cbMtdParam._m0[22u].x * ((_661.x * 0.5) + (-0.25)));
    float _677 = fract(_666);
    float _679 = fract(_666 + 0.5);
    float _690 = abs((_677 * 2.0) + (-1.0));
    vec4 _707 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_677 * _675) + _635) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_673 * _677) + _636) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _711 = _707.z;
    vec4 _712 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_679 * _675) + _635) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_673 * _679) + _636) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _754 = (cbMtdParam._m0[23u].y * _632) + TEXCOORD_6.w;
    float _755 = (cbMtdParam._m0[23u].z * _632) + TEXCOORD_9.w;
    vec4 _768 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _772 = _665 * cbMtdParam._m0[18u].x;
    float _777 = ((_768.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _779 = (-0.0) - (cbMtdParam._m0[20u].z * ((_768.x * 0.5) + (-0.25)));
    float _780 = fract(_772);
    float _782 = fract(_772 + 0.5);
    float _783 = _780 * _779;
    float _784 = _777 * _780;
    float _787 = _782 * _779;
    float _788 = _777 * _782;
    float _793 = abs((_780 * 2.0) + (-1.0));
    vec4 _809 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_783 + _754) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_784 + _755) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _811 = _809.x;
    float _812 = _809.y;
    float _813 = _809.z;
    vec4 _814 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_787 + _754) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_788 + _755) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _844 = (cbMtdParam._m0[22u].w * _632) + TEXCOORD_6.w;
    float _845 = (cbMtdParam._m0[23u].x * _632) + TEXCOORD_9.w;
    vec4 _865 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_783 + _844) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_784 + _845) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _867 = _865.x;
    float _868 = _865.y;
    float _869 = _865.z;
    vec4 _870 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_787 + _844) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_788 + _845) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _890 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4085 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _891 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _901 = (((_891 * _891) * (3.0 - (_891 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _934 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _844) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _845) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4096 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _935 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _939 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_870.x - _867) * _793) + _867)) * _901) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_814.x - _811) * _793) + _811)))) * _935;
    float _943 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_870.y - _868) * _793) + _868)) * _901) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_814.y - _812) * _793) + _812)))) * _935;
    float _947 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_870.z - _869) * _793) + _869)) * _901) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_814.z - _813) * _793) + _813)))) * _935;
    float _951 = _939 - (_939 * _443);
    float _952 = _943 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _943);
    float _953 = _947 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _947);
    float _982 = ((((((_520.x * 2.0) + (-1.0)) * TEXCOORD_9.x) * cbMtdParam._m0[18u].z) + _574) + (cbMtdParam._m0[20u].y * _574)) + (((((_599.x * 2.0) + (-1.0)) * TEXCOORD_15) * cbMtdParam._m0[21u].x) * _453);
    float _985 = ((((((_520.y * 2.0) + (-1.0)) * TEXCOORD_9.y) * cbMtdParam._m0[18u].z) + _575) + (cbMtdParam._m0[20u].y * _575)) + (((((_599.y * 2.0) + (-1.0)) * TEXCOORD_16) * cbMtdParam._m0[21u].x) * _453);
    float _988 = fma(_581, _249 * NORMAL.x, fma(_985, _256 * TANGENT.x, (_242 * _234) * _982));
    float _991 = fma(_581, _249 * NORMAL.y, fma(_985, _256 * TANGENT.y, (_242 * _235) * _982));
    float _994 = fma(_581, _249 * NORMAL.z, fma(_985, _256 * TANGENT.z, (_242 * _236) * _982));
    float _998 = inversesqrt(dot(vec3(_988, _991, _994), vec3(_988, _991, _994)));
    float _999 = _998 * _988;
    float _1000 = _998 * _991;
    float _1001 = _998 * _994;
    float _4107 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1002 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4129 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4140 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4151 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _1006 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1022 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1072 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1062);
    float _1073 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1062);
    float _1074 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1062);
    float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
    float _1079 = _1072 * _1078;
    float _1080 = _1073 * _1078;
    float _1081 = _1074 * _1078;
    vec4 _1086 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1088 = _1086.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1259 = sqrt(((_1072 * _1072) + (_1073 * _1073)) + (_1074 * _1074));
        float _1265 = (cbMatDynParam._m0[5u].x * _1259) + cbMatDynParam._m0[5u].y;
        float _4162 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1270 = (cbMatDynParam._m0[5u].z * _1259) + cbMatDynParam._m0[5u].w;
        float _4173 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) - _1266)) + _1266) < ((_1088 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1099 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1100 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1118 = fma(_1001, cbSceneParam._m0[5u].z, fma(_1000, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _999));
    float _1121 = fma(_1001, cbSceneParam._m0[6u].z, fma(_1000, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _999));
    float _1124 = fma(_1001, cbSceneParam._m0[7u].z, fma(_1000, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _999));
    uint _1137 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1138 = _1137 + 9u;
    uint _1139 = _1138 + uint(cbMatDynParam._m0[0u].w);
    float _1145 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_1139].x;
    float _1146 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_1139].y;
    float _1147 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_1139].z;
    float _4184 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _1151 = 1.0 - _1006;
    float _1152 = _1148 * _1151;
    float _1153 = _1149 * _1151;
    float _1154 = _1150 * _1151;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1006;
    float _1160 = (_1149 + (-0.039999999105930328369140625)) * _1006;
    float _1161 = (_1150 + (-0.039999999105930328369140625)) * _1006;
    float _1162 = _1159 + 0.039999999105930328369140625;
    float _1164 = _1160 + 0.039999999105930328369140625;
    float _1165 = _1161 + 0.039999999105930328369140625;
    vec4 _1174 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1099, cbSceneParam._m0[86u].y * _1100));
    float _1177 = _1174.x * TEXCOORD_3.w;
    float _1178 = dot(vec3(_999, _1000, _1001), vec3(_1079, _1080, _1081));
    float _1181 = _1178 * 2.0;
    float _1185 = (_1181 * _999) - _1079;
    float _1186 = (_1181 * _1000) - _1080;
    float _1187 = (_1181 * _1001) - _1081;
    float _1191 = abs(dot(vec3(_1079, _1080, _1081), vec3(_999, _1000, _1001)));
    float _4217 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1193 = sqrt(_1002);
    float _1205 = exp2((_1193 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1193 * 3.0));
    float _1211 = (1.0 - _1205) * ((_1193 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1212 = _1205 * _1193;
    float _1240 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1577;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1303 = fma(_1248, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240));
        float _1307 = fma(_1248, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240));
        float _1311 = fma(_1248, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240));
        float _1335 = _1240 + _999;
        float _1336 = _1244 + _1000;
        float _1337 = _1248 + _1001;
        float _1347 = fma(_1337, cbModelParam._m0[26u].z, fma(_1336, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1335)) - _1303;
        float _1348 = fma(_1337, cbModelParam._m0[27u].z, fma(_1336, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1335)) - _1307;
        float _1349 = fma(_1337, cbModelParam._m0[28u].z, fma(_1336, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1335)) - _1311;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1303 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1307 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[34u].z) + ((((((_1311 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1405 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1371.x + (-0.5));
        float _1407 = _1405 * (_1371.y + (-0.5));
        float _1408 = _1405 * (_1371.z + (-0.5));
        float _1415 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1378.x + (-0.5));
        float _1417 = _1415 * (_1378.y + (-0.5));
        float _1418 = _1415 * (_1378.z + (-0.5));
        float _1425 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1385.x + (-0.5));
        float _1427 = _1425 * (_1385.y + (-0.5));
        float _1428 = _1425 * (_1385.z + (-0.5));
        float _1435 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1392.x + (-0.5));
        float _1437 = _1435 * (_1392.y + (-0.5));
        float _1438 = _1435 * (_1392.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1459 = (dot(vec3(_999, _1000, _1001), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1469 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4265 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1471 + 1.0))) + _1476) * _1439;
        float _1486 = _1407 * 0.5;
        float _1487 = _1417 * 0.5;
        float _1488 = _1427 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_999, _1000, _1001), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4298 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1513 + 1.0))) + _1518) * _1440;
        float _1528 = _1408 * 0.5;
        float _1529 = _1418 * 0.5;
        float _1530 = _1428 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_999, _1000, _1001), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4331 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1555 + 1.0))) + _1560) * _1441;
        _1577 = _1408;
        _1579 = _1407;
        _1580 = _1406;
        _1581 = _1418;
        _1582 = _1417;
        _1583 = _1416;
        _1584 = _1428;
        _1585 = _1427;
        _1586 = _1426;
        _1587 = _1441;
        _1588 = _1440;
        _1589 = _1439;
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1578;
        _1579 = _1578;
        _1580 = _1578;
        _1581 = _1578;
        _1582 = _1578;
        _1583 = _1578;
        _1584 = _1578;
        _1585 = _1578;
        _1586 = _1578;
        _1587 = _1578;
        _1588 = _1578;
        _1589 = _1578;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1621 = fma(_1248, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240));
        float _1625 = fma(_1248, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240));
        float _1629 = fma(_1248, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240));
        float _1652 = _1240 + _999;
        float _1653 = _1244 + _1000;
        float _1654 = _1248 + _1001;
        float _1664 = fma(_1654, cbModelParam._m0[30u].z, fma(_1653, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1652)) - _1621;
        float _1665 = fma(_1654, cbModelParam._m0[31u].z, fma(_1653, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1652)) - _1625;
        float _1666 = fma(_1654, cbModelParam._m0[32u].z, fma(_1653, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1652)) - _1629;
        float _1670 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
        float _1683 = ((_1670 * _1664) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1621 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1684 = ((_1670 * _1665) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1625 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1685 = ((_1670 * _1666) / cbModelParam._m0[35u].z) + ((((((_1629 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        float _1720 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1687.x + (-0.5));
        float _1722 = _1720 * (_1687.y + (-0.5));
        float _1723 = _1720 * (_1687.z + (-0.5));
        float _1730 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1694.x + (-0.5));
        float _1732 = _1730 * (_1694.y + (-0.5));
        float _1733 = _1730 * (_1694.z + (-0.5));
        float _1740 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1701.x + (-0.5));
        float _1742 = _1740 * (_1701.y + (-0.5));
        float _1743 = _1740 * (_1701.z + (-0.5));
        float _1750 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1708.x + (-0.5));
        float _1752 = _1750 * (_1708.y + (-0.5));
        float _1753 = _1750 * (_1708.z + (-0.5));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = _1721 * 0.5;
        float _1758 = _1731 * 0.5;
        float _1759 = _1741 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_999, _1000, _1001), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4394 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1784 + 1.0))) + _1789) * _1754;
        float _1799 = _1722 * 0.5;
        float _1800 = _1732 * 0.5;
        float _1801 = _1742 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_999, _1000, _1001), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4427 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1826 + 1.0))) + _1831) * _1755;
        float _1841 = _1723 * 0.5;
        float _1842 = _1733 * 0.5;
        float _1843 = _1743 * 0.5;
        float _1844 = dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843));
        float _1849 = (_1844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1844);
        float _1857 = (dot(vec3(_999, _1000, _1001), vec3(_1849 * _1841, _1849 * _1842, _1849 * _1843)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1866 = sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1868 = _1867 * 2.0;
        float _1872 = (1.0 - _1867) / (_1867 + 1.0);
        float _4460 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1882 = ((((1.0 - _1873) * (_1868 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1868 + 1.0))) + _1873) * _1756;
        _1890 = _1723;
        _1891 = _1722;
        _1892 = _1721;
        _1893 = _1733;
        _1894 = _1732;
        _1895 = _1731;
        _1896 = _1743;
        _1897 = _1742;
        _1898 = _1741;
        _1899 = _1756;
        _1900 = _1755;
        _1901 = _1754;
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)));
    }
    else
    {
        _1890 = _1578;
        _1891 = _1578;
        _1892 = _1578;
        _1893 = _1578;
        _1894 = _1578;
        _1895 = _1578;
        _1896 = _1578;
        _1897 = _1578;
        _1898 = _1578;
        _1899 = _1578;
        _1900 = _1578;
        _1901 = _1578;
        _1902 = 0.0;
        _1903 = 0.0;
        _1904 = 0.0;
    }
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1590)) + _1590;
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1591)) + _1591;
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1592)) + _1592;
    float _1937 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1914));
    float _1958 = _1185 * 0.5;
    float _1959 = _1186 * 0.5;
    float _1960 = _1187 * 0.5;
    float _1961 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _1964 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _1967 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _2001;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1974 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1577, _1581, _1584, _1587));
        float _1978 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1982 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1580, _1583, _1586, _1589));
        float _1989 = dot(vec4(cbModelParam._m0[39u]), vec4(_1958, _1959, _1960, 1.0));
        _2001 = dot(vec3(isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1989) ? 0.0 : (isnan(0.0) ? _1989 : max(0.0, _1989))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2001 = 1.0;
    }
    float _2012;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2003 = dot(vec4(cbModelParam._m0[40u]), vec4(_1958, _1959, _1960, 1.0));
        _2012 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2003) ? 0.0 : (isnan(0.0) ? _2003 : max(0.0, _2003))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2012 = 1.0;
    }
    float _2016 = (_2012 * cbModelParam._m0[1u].x) + (_2001 * (1.0 - cbModelParam._m0[1u].x));
    float _2026 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1002);
    float _2027 = isnan(_2026) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2026 : min(cbModelParam._m0[25u].z, _2026));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2074 = fma(_1248, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1240)) + cbModelParam._m0[13u].w;
        float _2078 = fma(_1248, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1240)) + cbModelParam._m0[14u].w;
        float _2082 = fma(_1248, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1240)) + cbModelParam._m0[15u].w;
        float _2085 = fma(_1187, cbModelParam._m0[13u].z, fma(_1186, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1185));
        float _2088 = fma(_1187, cbModelParam._m0[14u].z, fma(_1186, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1185));
        float _2091 = fma(_1187, cbModelParam._m0[15u].z, fma(_1186, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1185));
        float _2119;
        if (_2085 > 0.0)
        {
            _2119 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2119 = frontier_phi_17_15_ladder;
        }
        float _2342;
        if (_2088 > 0.0)
        {
            _2342 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2342 = frontier_phi_26_22_ladder;
        }
        float _2599;
        if (_2091 > 0.0)
        {
            _2599 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2599 = frontier_phi_38_33_ladder;
        }
        float _2601 = isnan(_2342) ? _2119 : (isnan(_2119) ? _2342 : min(_2119, _2342));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2085) + _2074;
        float _2607 = (_2602 * _2088) + _2078;
        float _2608 = (_2602 * _2091) + _2082;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2027);
            frontier_phi_16_38_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2107 = frontier_phi_16_38_ladder_2;
        _2109 = frontier_phi_16_38_ladder_1;
        _2111 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1185, _1186, _1187), _2027);
        _2107 = _2095.x * cbModelParam._m0[1u].y;
        _2109 = _2095.y * cbModelParam._m0[1u].y;
        _2111 = _2095.z * cbModelParam._m0[1u].y;
    }
    float _2115 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1002);
    float _2116 = isnan(_2115) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2115 : min(cbModelParam._m0[25u].w, _2115));
    float _2205;
    float _2207;
    float _2209;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2169 = fma(_1248, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1240)) + cbModelParam._m0[21u].w;
        float _2173 = fma(_1248, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1240)) + cbModelParam._m0[22u].w;
        float _2177 = fma(_1248, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1240)) + cbModelParam._m0[23u].w;
        float _2180 = fma(_1187, cbModelParam._m0[21u].z, fma(_1186, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1185));
        float _2183 = fma(_1187, cbModelParam._m0[22u].z, fma(_1186, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1185));
        float _2186 = fma(_1187, cbModelParam._m0[23u].z, fma(_1186, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1185));
        float _2347;
        if (_2180 > 0.0)
        {
            _2347 = abs((1.0 - _2169) / _2180);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2169 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2347 = frontier_phi_28_24_ladder;
        }
        float _2626;
        if (_2183 > 0.0)
        {
            _2626 = abs((1.0 - _2173) / _2183);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2173 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2626 = frontier_phi_40_35_ladder;
        }
        float _2839;
        if (_2186 > 0.0)
        {
            _2839 = abs((1.0 - _2177) / _2186);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2177 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2839 = frontier_phi_49_46_ladder;
        }
        float _2841 = isnan(_2626) ? _2347 : (isnan(_2347) ? _2626 : min(_2347, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2180) + _2169;
        float _2847 = (_2842 * _2183) + _2173;
        float _2848 = (_2842 * _2186) + _2177;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2116);
            frontier_phi_25_49_ladder = _3076.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3076.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3076.x * cbModelParam._m0[1u].z;
        }
        _2205 = frontier_phi_25_49_ladder_2;
        _2207 = frontier_phi_25_49_ladder_1;
        _2209 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1185, _1186, _1187), _2116);
        _2205 = _2189.x * cbModelParam._m0[1u].z;
        _2207 = _2189.y * cbModelParam._m0[1u].z;
        _2209 = _2189.z * cbModelParam._m0[1u].z;
    }
    float _2222 = (((_1211 * _1162) + _1212) * _1177) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1211 * _1164) + _1212) * _1177) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2226 = (((_1211 * _1165) + _1212) * _1177) * ((cbModelParam._m0[1u].w * (_2209 - _2111)) + _2111);
    float _2229 = fma(_2226, cbSceneParam._m0[89u].z, fma(_2224, cbSceneParam._m0[89u].y, _2222 * cbSceneParam._m0[89u].x));
    float _2232 = fma(_2226, cbSceneParam._m0[90u].z, fma(_2224, cbSceneParam._m0[90u].y, _2222 * cbSceneParam._m0[90u].x));
    float _2235 = fma(_2226, cbSceneParam._m0[91u].z, fma(_2224, cbSceneParam._m0[91u].y, _2222 * cbSceneParam._m0[91u].x));
    vec4 _2243 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1099, _1100));
    float _2245 = _2243.w;
    float _2257 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2245);
    float _2258 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2245);
    float _2259 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2245);
    uvec4 _2263 = floatBitsToUint(cbInstanceData._m0[_1137 + 5u]);
    uint _2265 = _2263.x * 14u;
    uint _2266 = _2265 + 13u;
    float _2273 = _1177 + (-1.0);
    float _2278 = (cbLight._m0[_2266].x * _2273) + 1.0;
    float _2279 = (cbLight._m0[_2266].y * _2273) + 1.0;
    float _2280 = (cbLight._m0[_2266].z * _2273) + 1.0;
    float _2281 = (cbLight._m0[_2266].w * _2273) + 1.0;
    uint _2282 = _2265 + 5u;
    float _2288 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2292 = _2265 + 4u;
    float _2301 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2305 = _2265 | 1u;
    float _2316 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_999, _1000, _1001));
    float _2319 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_999, _1000, _1001));
    float _4596 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _4607 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2324 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2326 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2333 = ((cbLight._m0[_2282].x * _2288) * _2326) + (((cbLight._m0[_2292].x * _2257) * _2301) * _2324);
    float _2334 = ((_2288 * cbLight._m0[_2282].y) * _2326) + (((cbLight._m0[_2292].y * _2258) * _2301) * _2324);
    float _2335 = ((_2288 * cbLight._m0[_2282].z) * _2326) + (((cbLight._m0[_2292].z * _2259) * _2301) * _2324);
    uvec4 _2339 = floatBitsToUint(cbLight._m0[_2265 + 12u]);
    bool _2341 = _2339.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2341)
    {
        _2352 = _2333;
        _2354 = _2334;
        _2356 = _2335;
    }
    else
    {
        uint _2360 = _2265 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2265 + 2u].xyz), vec3(_999, _1000, _1001)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4618 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2379 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2333;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2334;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2335;
    }
    bool _2359 = _2339.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2359)
    {
        _2397 = _2352;
        _2399 = _2354;
        _2401 = _2356;
    }
    else
    {
        uint _2570 = _2265 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2265 + 3u].xyz), vec3(_999, _1000, _1001)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4634 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2589 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2397 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2352;
        _2399 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2354;
        _2401 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2356;
    }
    uint _2404 = _2265 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _1002) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2265].x + _1079;
    float _2420 = cbLight._m0[_2265].y + _1080;
    float _2421 = cbLight._m0[_2265].z + _1081;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_999, _1000, _1001), vec3(cbLight._m0[_2265].xyz));
    float _4650 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _4661 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _2433 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2434 = dot(vec3(_999, _1000, _1001), vec3(_2426, _2427, _2428));
    float _4672 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2426, _2427, _2428));
    float _4683 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
    float _2455 = 0.959999978542327880859375 - _1159;
    float _2457 = 0.959999978542327880859375 - _1160;
    float _2458 = 0.959999978542327880859375 - _1161;
    float _2465 = 1.0 - _2418;
    float _2476 = (0.5 / (((_2433 * ((_2432 * _2465) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2465) + _2418) * _2432))) * _2432;
    float _4694 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2492 = _2265 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _1002) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2305].x + _1079;
    float _2506 = cbLight._m0[_2305].y + _1080;
    float _2507 = cbLight._m0[_2305].z + _1081;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_999, _1000, _1001), vec3(cbLight._m0[_2305].xyz));
    float _4705 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2519 = dot(vec3(_999, _1000, _1001), vec3(_2512, _2513, _2514));
    float _4716 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2512, _2513, _2514));
    float _4727 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2433 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2545) + _2504) * _2518))) * _2518;
    float _4738 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2455) + _1162) * cbLight._m0[_2492].x) * _2557) * _2288) + ((((cbLight._m0[_2404].x * _2257) * ((_2454 * _2455) + _1162)) * _2478) * _2301);
    float _2568 = (((((_2538 * _2457) + _1164) * cbLight._m0[_2492].y) * _2557) * _2288) + ((((cbLight._m0[_2404].y * _2258) * ((_2454 * _2457) + _1164)) * _2478) * _2301);
    float _2569 = (((((_2538 * _2458) + _1165) * cbLight._m0[_2492].z) * _2557) * _2288) + ((((cbLight._m0[_2404].z * _2259) * ((_2454 * _2458) + _1165)) * _2478) * _2301);
    float _2631;
    float _2633;
    float _2635;
    if (_2341)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2265 + 2u;
        uint _2641 = _2265 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1002) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1079;
        float _2658 = cbLight._m0[_2637].y + _1080;
        float _2659 = cbLight._m0[_2637].z + _1081;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_999, _1000, _1001), vec3(cbLight._m0[_2637].xyz));
        float _4749 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2671 = dot(vec3(_999, _1000, _1001), vec3(_2664, _2665, _2666));
        float _4760 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4771 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2433 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2697) + _2656) * _2670))) * _2670;
        float _4782 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2631 = (((((_2690 * _2455) + _1162) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2457) + _1164) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2458) + _1165) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2359)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2265 + 3u;
        uint _2760 = _2265 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1002) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1079;
        float _2777 = cbLight._m0[_2756].y + _1080;
        float _2778 = cbLight._m0[_2756].z + _1081;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_999, _1000, _1001), vec3(cbLight._m0[_2756].xyz));
        float _4798 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2790 = dot(vec3(_999, _1000, _1001), vec3(_2783, _2784, _2785));
        float _4809 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4820 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2433 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2816) + _2775) * _2789))) * _2789;
        float _4831 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2745 = (((((_2809 * _2455) + _1162) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2457) + _1164) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2458) + _1165) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2263.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1100) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1099) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
        }
        else
        {
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            uint _3247 = 0u;
            uint _3256;
            bool _3257;
            for (;;)
            {
                _3256 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                _3257 = _3256 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3257)
                {
                    frontier_phi_66_pred = _3241;
                    frontier_phi_66_pred_1 = _3246;
                    frontier_phi_66_pred_2 = _3245;
                    frontier_phi_66_pred_3 = _3244;
                    frontier_phi_66_pred_4 = _3243;
                    frontier_phi_66_pred_5 = _3242;
                }
                else
                {
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    uint _3392;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3256;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    for (;;)
                    {
                        uint _3396 = uint(findLSB(_3392)) + (_3247 << 5u);
                        uint _3393 = (_3392 + 4294967295u) & _3392;
                        uint _3398 = _3396 * 48u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3418 = (_3396 * 48u) + 4u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3437 = (_3396 * 48u) + 8u;
                        vec3 _3448 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x));
                        float _3452 = _3412.x - _2905;
                        float _3453 = _3412.y - _2906;
                        float _3454 = _3412.z - _2907;
                        float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                        float _3458 = inversesqrt(_3455);
                        float _3459 = _3458 * _3452;
                        float _3460 = _3458 * _3453;
                        float _3461 = _3458 * _3454;
                        float _3462 = dot(vec3(_1118, _1121, _1124), vec3(_3459, _3460, _3461));
                        float _3467 = 1.0 - (_3455 * _3412.w);
                        float _4857 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3469 = sqrt(_3455) * _3431.w;
                        float _3472 = 1.39999997615814208984375 / (_3469 + 1.39999997615814208984375);
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3462) + _3473;
                        float _3479 = _3469 * _3469;
                        float _3483 = ((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3468) / ((_3479 * 0.699999988079071044921875) + 1.0);
                        float _3487 = (-0.0) - _2905;
                        float _3488 = (-0.0) - _2906;
                        float _3489 = (-0.0) - _2907;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3504 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                        float _3505 = 1.0 - _1193;
                        float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                        float _3513 = _3512 * _3512;
                        float _3514 = _3513 * _3513;
                        float _3515 = _3494 + _3459;
                        float _3516 = _3495 + _3460;
                        float _3517 = _3496 + _3461;
                        float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                        float _3525 = dot(vec3(_1118, _1121, _1124), vec3(_3494, _3495, _3496));
                        float _4873 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3529 = dot(vec3(_1118, _1121, _1124), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                        float _4884 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3532 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                        float _3537 = _3472 * _3513;
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3462) + _3538;
                        float _4895 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3542 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3543 = 1.0 - _3513;
                        float _3553 = (0.5 / (((_3542 * ((_3528 * _3543) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3513) * _3528))) * _3542;
                        float _4906 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3564 = (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3536 * _3536) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125))) * _3468;
                        _3316 = (_3483 * _3431.x) + _3389;
                        _3317 = (_3483 * _3431.y) + _3390;
                        _3318 = (_3483 * _3431.z) + _3391;
                        _3313 = (_3564 * _3448.x) + _3386;
                        _3314 = (_3564 * _3448.y) + _3387;
                        _3315 = (_3564 * _3448.z) + _3388;
                        if (_3393 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3393;
                        }
                    }
                    frontier_phi_66_pred = _3313;
                    frontier_phi_66_pred_1 = _3318;
                    frontier_phi_66_pred_2 = _3317;
                    frontier_phi_66_pred_3 = _3316;
                    frontier_phi_66_pred_4 = _3315;
                    frontier_phi_66_pred_5 = _3314;
                }
                _3082 = frontier_phi_66_pred;
                _3092 = frontier_phi_66_pred_1;
                _3090 = frontier_phi_66_pred_2;
                _3088 = frontier_phi_66_pred_3;
                _3086 = frontier_phi_66_pred_4;
                _3084 = frontier_phi_66_pred_5;
                uint _3248 = _3247 + 1u;
                if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3241 = _3082;
                    _3242 = _3084;
                    _3243 = _3086;
                    _3244 = _3088;
                    _3245 = _3090;
                    _3246 = _3092;
                    _3247 = _3248;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
        }
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.z;
        uint _3098 = (_3096 >> 8u) & 15u;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((4294967295u << _3098) & _2951) == 0u)
        {
            _3209 = _3081;
            _3211 = _3083;
            _3213 = _3085;
            _3215 = _3087;
            _3217 = _3089;
            _3219 = _3091;
        }
        else
        {
            float _3234 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3235 = _3234 * _2905;
            float _3236 = _3234 * _2906;
            float _3237 = _3234 * _2907;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3098 < ((_3096 >> 12u) & 15u))
            {
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3369 = _3081;
                float _3370 = _3083;
                float _3371 = _3085;
                float _3372 = _3087;
                float _3373 = _3089;
                float _3374 = _3091;
                uint _3375 = _3098;
                uint _3384;
                bool _3385;
                for (;;)
                {
                    _3384 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                    _3385 = _3384 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3385)
                    {
                        frontier_phi_77_pred = _3374;
                        frontier_phi_77_pred_1 = _3373;
                        frontier_phi_77_pred_2 = _3372;
                        frontier_phi_77_pred_3 = _3371;
                        frontier_phi_77_pred_4 = _3370;
                        frontier_phi_77_pred_5 = _3369;
                    }
                    else
                    {
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3591 = _3369;
                        float _3592 = _3370;
                        float _3593 = _3371;
                        float _3594 = _3372;
                        float _3595 = _3373;
                        float _3596 = _3374;
                        uint _3597 = _3384;
                        uint _3598;
                        vec4 _3623;
                        float _3624;
                        vec4 _3639;
                        vec3 _3651;
                        vec4 _3666;
                        vec4 _3681;
                        float _3727;
                        bool _3728;
                        for (;;)
                        {
                            uint _3608 = ((_3375 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3597));
                            _3598 = (_3597 + 4294967295u) & _3597;
                            uint _3610 = _3608 * 40u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            _3624 = _3623.w;
                            uint _3626 = (_3608 * 40u) + 4u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3608 * 40u) + 8u;
                            _3651 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x));
                            uint _3653 = (_3608 * 40u) + 16u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3608 * 40u) + 20u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3608 * 40u) + 24u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3702 = (_3608 * 40u) + 28u;
                            vec4 _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            _3727 = fma(_2907, _3715.z, fma(_2906, _3715.y, _3715.x * _2905)) + _3715.w;
                            _3728 = !((fma(_2907, _3696.z, fma(_2906, _3696.y, _3696.x * _2905)) + _3696.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3728)
                            {
                                float _3755 = _3623.x - _2905;
                                float _3756 = _3623.y - _2906;
                                float _3757 = _3623.z - _2907;
                                float _3758 = dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757));
                                float _3761 = inversesqrt(_3758);
                                float _3762 = _3761 * _3755;
                                float _3763 = _3761 * _3756;
                                float _3764 = _3761 * _3757;
                                float _3768 = 1.0 - (_3758 / (_3624 * _3624));
                                float _4917 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3773 = sqrt(_3758) * _3639.w;
                                float _3775 = 1.39999997615814208984375 / (_3773 + 1.39999997615814208984375);
                                float _3776 = _3775 * _3775;
                                float _3779 = ((1.0 - _3776) * dot(vec3(_3762, _3763, _3764), vec3(_1118, _1121, _1124))) + _3776;
                                float _3782 = _3773 * _3773;
                                float _3786 = (fma(_2907, _3666.z, fma(_2906, _3666.y, _3666.x * _2905)) + _3666.w) / _3727;
                                float _3787 = (fma(_2907, _3681.z, fma(_2906, _3681.y, _3681.x * _2905)) + _3681.w) / _3727;
                                float _3791 = 1.0 - dot(vec2(_3786, _3787), vec2(_3786, _3787));
                                float _4933 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3793 = _3792 * (((isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0))) * _3769) / ((_3782 * 0.699999988079071044921875) + 1.0));
                                float _3805 = exp2(log2(1.0 / ((_3782 * 3.5) + 5.0)) * 0.25);
                                float _3806 = 1.0 - _1193;
                                float _3813 = sqrt(1.0 - ((1.0 - (_3806 * _3806)) * (1.0 - (_3805 * _3805))));
                                float _3814 = _3813 * _3813;
                                float _3815 = _3814 * _3814;
                                float _3816 = _3762 - _3235;
                                float _3817 = _3763 - _3236;
                                float _3818 = _3764 - _3237;
                                float _3822 = inversesqrt(dot(vec3(_3816, _3817, _3818), vec3(_3816, _3817, _3818)));
                                float _3826 = dot(vec3(_1118, _1121, _1124), vec3((-0.0) - _3235, (-0.0) - _3236, (-0.0) - _3237));
                                float _4944 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3829 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3830 = dot(vec3(_1118, _1121, _1124), vec3(_3822 * _3816, _3822 * _3817, _3822 * _3818));
                                float _4955 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3837 = ((_3833 * _3833) * (_3815 + (-1.0))) + 1.0;
                                float _3838 = _3775 * _3814;
                                float _3839 = _3838 * _3838;
                                float _3845 = ((1.0 - _3839) * dot(vec3(_1118, _1121, _1124), vec3(_3762, _3763, _3764))) + _3839;
                                float _4966 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3846 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3847 = 1.0 - _3814;
                                float _3857 = (0.5 / (((_3846 * ((_3829 * _3847) + _3814)) + 9.9999999392252902907785028219223e-09) + (((_3846 * _3847) + _3814) * _3829))) * _3846;
                                float _4977 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3867 = (_3792 * _3769) * (((_3815 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3837 * _3837) * ((_3782 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3793 * _3639.y;
                                frontier_phi_83_pred_1 = _3793 * _3639.x;
                                frontier_phi_83_pred_2 = _3867 * _3651.z;
                                frontier_phi_83_pred_3 = _3867 * _3651.y;
                                frontier_phi_83_pred_4 = _3867 * _3651.x;
                                frontier_phi_83_pred_5 = _3793 * _3639.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3875 = frontier_phi_83_pred;
                            _3874 = frontier_phi_83_pred_1;
                            _3873 = frontier_phi_83_pred_2;
                            _3872 = frontier_phi_83_pred_3;
                            _3871 = frontier_phi_83_pred_4;
                            _3876 = frontier_phi_83_pred_5;
                            _3581 = _3874 + _3594;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            if (_3598 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3598;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3583;
                        frontier_phi_77_pred_1 = _3582;
                        frontier_phi_77_pred_2 = _3581;
                        frontier_phi_77_pred_3 = _3580;
                        frontier_phi_77_pred_4 = _3579;
                        frontier_phi_77_pred_5 = _3578;
                    }
                    _3220 = frontier_phi_77_pred;
                    _3218 = frontier_phi_77_pred_1;
                    _3216 = frontier_phi_77_pred_2;
                    _3214 = frontier_phi_77_pred_3;
                    _3212 = frontier_phi_77_pred_4;
                    _3210 = frontier_phi_77_pred_5;
                    uint _3376 = _3375 + 1u;
                    if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3369 = _3210;
                        _3370 = _3212;
                        _3371 = _3214;
                        _3372 = _3216;
                        _3373 = _3218;
                        _3374 = _3220;
                        _3375 = _3376;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3214;
                frontier_phi_58_59_ladder_1 = _3220;
                frontier_phi_58_59_ladder_2 = _3218;
                frontier_phi_58_59_ladder_3 = _3216;
                frontier_phi_58_59_ladder_4 = _3212;
                frontier_phi_58_59_ladder_5 = _3210;
            }
            else
            {
                frontier_phi_58_59_ladder = _3085;
                frontier_phi_58_59_ladder_1 = _3091;
                frontier_phi_58_59_ladder_2 = _3089;
                frontier_phi_58_59_ladder_3 = _3087;
                frontier_phi_58_59_ladder_4 = _3083;
                frontier_phi_58_59_ladder_5 = _3081;
            }
            _3209 = frontier_phi_58_59_ladder_5;
            _3211 = frontier_phi_58_59_ladder_4;
            _3213 = frontier_phi_58_59_ladder;
            _3215 = frontier_phi_58_59_ladder_3;
            _3217 = frontier_phi_58_59_ladder_2;
            _3219 = frontier_phi_58_59_ladder_1;
        }
        float _3224 = isnan(1.0) ? _1177 : (isnan(_1177) ? 1.0 : min(_1177, 1.0));
        _2964 = (_3224 * _3215) + _2397;
        _2966 = (_3224 * _3217) + _2399;
        _2968 = (_3224 * _3219) + _2401;
        _2970 = ((_3209 * _1162) * _3224) + _2745;
        _2972 = ((_3211 * _1164) * _3224) + _2747;
        _2974 = ((_3213 * _1165) * _3224) + _2749;
    }
    else
    {
        _2964 = _2397;
        _2966 = _2399;
        _2968 = _2401;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    uint _2980 = _1138 + uint(cbMatDynParam._m0[0u].w);
    float _2986 = cbInstanceData._m0[_2980].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_712.x - _709) * _690) + _709)) - _951) * _453) + _951);
    float _2987 = cbInstanceData._m0[_2980].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_712.y - _710) * _690) + _710)) - _952) * _453) + _952);
    float _2988 = cbInstanceData._m0[_2980].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_712.z - _711) * _690) + _711)) - _953) * _453) + _953);
    float _4993 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _5004 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _5015 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _3005 = (((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2964 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1177))) + ((_2970 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2016)) * cbPerFrame._m0[3u].x)) + _2986;
    float _3007 = (_2987 + ((_2972 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2016)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2966 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1177)));
    float _3009 = (_2988 + ((_2974 + ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * _2016)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2968 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1177)));
    float _3010 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
    float _3011 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
    float _3012 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
    float _3018 = cbMtdParam._m0[2u].x * _2986;
    float _3019 = cbMtdParam._m0[2u].y * _2987;
    float _3020 = cbMtdParam._m0[2u].z * _2988;
    float _5041 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3022 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
    uint _3023 = _1137 + 6u;
    float _3031 = _1099 / cbSceneParam._m0[86u].x;
    float _3032 = _1100 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _1022 : (isnan(_1022) ? cbSceneParam._m0[77u].w : min(_1022, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_1022 > cbSceneParam._m0[78u].w)
    {
        float _3106 = isnan(_1022) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1022 : min(cbSceneParam._m0[80u].w, _1022));
        float _3107 = _3106 / _1022;
        float _3118 = _3107 * _1072;
        float _3119 = _1073 * _3107;
        float _3120 = (-0.0) - _3119;
        float _3121 = _3107 * _1074;
        float _3123 = (cbSceneParam._m0[77u].w * _3120) / _3106;
        float _3124 = _3123 + cbSceneParam._m0[79u].w;
        float _3125 = cbSceneParam._m0[79u].w - _3119;
        float _3131 = sqrt(((_3118 * _3118) + (_3119 * _3119)) + (_3121 * _3121));
        float _3134 = (1.0 - (cbSceneParam._m0[77u].w / _3106)) * _3131;
        float _3139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3326;
        if (abs((_3120 - _3123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3326 = ((((_3124 > 0.0) ? exp2(_3139 * _3124) : (2.0 - exp2(_3141 * _3124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3134;
        }
        else
        {
            float _3270 = 1.0 / cbSceneParam._m0[80u].x;
            float _3271 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : max(_3124, _3125));
            float _3272 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : min(_3124, _3125));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            _3326 = ((abs(_3131 / _3120) * cbSceneParam._m0[80u].y) * ((((_3281 - _3282) * 2.0) - ((exp2(_3139 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0)))) - exp2(_3139 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))))) * _3270)) - ((exp2(_3141 * _3281) - exp2(_3141 * _3282)) * _3270))) + (_3134 * cbSceneParam._m0[80u].z);
        }
        vec4 _3328 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3337 = exp2((_3326 * (-1.44269502162933349609375)) * (1.0 - _3328.w));
        float _3338 = log2(_3337);
        float _3354 = log2(_3051);
        _3143 = (exp2(_3354 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].x)) * _3328.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3145 = (exp2(_3354 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].y)) * _3328.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3147 = (exp2(_3354 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].z)) * _3328.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3149 = _3337 * _3051;
    }
    else
    {
        _3143 = _3048;
        _3145 = _3049;
        _3147 = _3050;
        _3149 = _3051;
    }
    bool _3364;
    vec4 _3158;
    vec4 _3180;
    float _3182;
    float _3186;
    float _3187;
    float _3188;
    float _3191;
    float _3194;
    float _3197;
    float _3198;
    bool _3208;
    for (;;)
    {
        _3158 = cbMatDynParam._m0[0u];
        float _3160 = roundEven(_3158.y);
        bool _3161 = _3160 == 3.0;
        float _3162 = log2(_3149);
        float _3166 = exp2(_3162 * cbSceneParam._m0[78u].x);
        float _3167 = exp2(_3162 * cbSceneParam._m0[78u].y);
        float _3168 = exp2(_3162 * cbSceneParam._m0[78u].z);
        float _3169 = _3166 * _3010;
        float _3170 = _3167 * _3011;
        float _3171 = _3168 * _3012;
        float _3178 = _1088 + (-0.5);
        _3180 = cbMtdParam._m0[1u];
        _3182 = _3180.y * _3178;
        float _3185 = (_3160 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3186 = _3185 * (_3161 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
        _3187 = _3185 * (_3161 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
        _3188 = _3185 * (_3161 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3147)));
        _3191 = ((_3018 * _3022) * _3166) * _3185;
        _3194 = ((_3019 * _3022) * _3167) * _3185;
        _3197 = ((_3020 * _3022) * _3168) * _3185;
        _3198 = _3178 * 0.999000012874603271484375;
        _3208 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3208)
        {
            if ((cbInstanceData._m0[_1137 + 7u].x + _3198) < 0.5)
            {
                _3364 = true;
                break;
            }
        }
        uint _3305 = _1138 + uint(_3158.w);
        if ((cbInstanceData._m0[_3305].w < 1.0) && ((cbInstanceData._m0[_3305].w + _3198) < 0.5))
        {
            _3364 = true;
            break;
        }
        if ((_3182 + 1.0) < _3180.x)
        {
            _3364 = true;
            break;
        }
        _3364 = false;
        break;
    }
    float _3569;
    if (_3364)
    {
        discard_state = true;
        _3569 = 0.0;
    }
    else
    {
        _3569 = cbInstanceData._m0[_3023].w;
    }
    SV_Target.x = _3186;
    SV_Target.y = _3187;
    SV_Target.z = _3188;
    SV_Target.w = _3569;
    SV_Target_1.x = _3191;
    SV_Target_1.y = _3194;
    SV_Target_1.z = _3197;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
    discard_exit();
}


