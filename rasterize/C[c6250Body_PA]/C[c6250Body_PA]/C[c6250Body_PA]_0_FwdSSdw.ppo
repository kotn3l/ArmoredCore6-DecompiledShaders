#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1273;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _256 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _262 = _256.x * cbMtdParam._m0[9u].x;
    float _263 = _256.y * cbMtdParam._m0[9u].y;
    float _264 = _256.z * cbMtdParam._m0[9u].z;
    float _308 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _323 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _340 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _342 = _340.x;
    float _343 = _340.y;
    float _344 = _340.z;
    float _353 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _3639 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _363 = ((_323.z - _344) * _354) + _344;
    float _367 = ((((_323.x - _342) * _354) + _342) * 2.0) + (-1.0);
    float _369 = ((((_323.y - _343) * _354) + _343) * 2.0) + (-1.0);
    float _370 = dot(vec2(_367, _369), vec2(_367, _369));
    float _3650 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))));
    float _395 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _398 = (_395 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _399 = (_395 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _424 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _428 = cbPerFrame._m0[22u].x * 2.0;
    float _429 = _428 * cbMtdParam._m0[22u].y;
    float _436 = ((_424.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _438 = (-0.0) - (cbMtdParam._m0[22u].x * ((_424.x * 0.5) + (-0.25)));
    float _440 = fract(_429);
    float _442 = fract(_429 + 0.5);
    float _453 = abs((_440 * 2.0) + (-1.0));
    vec4 _470 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_440 * _438) + _398) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_436 * _440) + _399) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    vec4 _475 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_442 * _438) + _398) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_436 * _442) + _399) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _517 = (cbMtdParam._m0[23u].y * _395) + TEXCOORD_6.w;
    float _518 = (cbMtdParam._m0[23u].z * _395) + TEXCOORD_9.w;
    vec4 _531 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _535 = _428 * cbMtdParam._m0[18u].x;
    float _540 = ((_531.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _542 = (-0.0) - (cbMtdParam._m0[20u].z * ((_531.x * 0.5) + (-0.25)));
    float _543 = fract(_535);
    float _545 = fract(_535 + 0.5);
    float _546 = _543 * _542;
    float _547 = _540 * _543;
    float _550 = _545 * _542;
    float _551 = _540 * _545;
    float _556 = abs((_543 * 2.0) + (-1.0));
    vec4 _572 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_546 + _517) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_547 + _518) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _576 = _572.z;
    vec4 _577 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_550 + _517) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_551 + _518) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _607 = (cbMtdParam._m0[22u].w * _395) + TEXCOORD_6.w;
    float _608 = (cbMtdParam._m0[23u].x * _395) + TEXCOORD_9.w;
    vec4 _628 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_546 + _607) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_547 + _608) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _632 = _628.z;
    vec4 _633 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_550 + _607) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_551 + _608) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _653 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3661 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _662 = (((_654 * _654) * (3.0 - (_654 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _695 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _607) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _608) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3672 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _700 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_633.x - _630) * _556) + _630)) * _662) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_577.x - _574) * _556) + _574)))) * _696;
    float _704 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_633.y - _631) * _556) + _631)) * _662) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_577.y - _575) * _556) + _575)))) * _696;
    float _708 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_633.z - _632) * _556) + _632)) * _662) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_577.z - _576) * _556) + _576)))) * _696;
    float _712 = _700 - (_700 * _308);
    float _713 = _704 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _704);
    float _714 = _708 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _708);
    float _721 = (_308 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _308))) * (cbMtdParam._m0[20u].x + 1.0);
    float _3683 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _735 = (cbMtdParam._m0[20u].y * _367) + _367;
    float _736 = (cbMtdParam._m0[20u].y * _369) + _369;
    float _739 = fma(_375, _227 * NORMAL.x, fma(_736, _234 * TANGENT.x, (_220 * _212) * _735));
    float _742 = fma(_375, _227 * NORMAL.y, fma(_736, _234 * TANGENT.y, (_220 * _213) * _735));
    float _745 = fma(_375, _227 * NORMAL.z, fma(_736, _234 * TANGENT.z, (_220 * _214) * _735));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    float _750 = _749 * _739;
    float _751 = _749 * _742;
    float _752 = _749 * _745;
    float _3694 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _753 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3716 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3727 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _823 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _813);
    float _824 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _813);
    float _825 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _813);
    float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
    float _830 = _823 * _829;
    float _831 = _824 * _829;
    float _832 = _825 * _829;
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _859 = fma(_752, cbSceneParam._m0[5u].z, fma(_751, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _750));
    float _862 = fma(_752, cbSceneParam._m0[6u].z, fma(_751, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _750));
    float _865 = fma(_752, cbSceneParam._m0[7u].z, fma(_751, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _750));
    uint _878 = uint(roundEven(NORMAL.w)) * 13u;
    uint _879 = _878 + 9u;
    uint _880 = _879 + uint(cbMatDynParam._m0[0u].w);
    float _886 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_880].x;
    float _887 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_880].y;
    float _888 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_880].z;
    float _3738 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _903 = _900.x * TEXCOORD_3.w;
    float _904 = dot(vec3(_750, _751, _752), vec3(_830, _831, _832));
    float _907 = _904 * 2.0;
    float _911 = (_907 * _750) - _830;
    float _912 = (_907 * _751) - _831;
    float _913 = (_907 * _752) - _832;
    float _917 = abs(dot(vec3(_830, _831, _832), vec3(_750, _751, _752)));
    float _3771 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _919 = sqrt(_753);
    float _931 = exp2((_919 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_919 * 3.0));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1002 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1006 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1030 = _963 + _750;
        float _1031 = _967 + _751;
        float _1032 = _971 + _752;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _998;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1002;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1006;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_750, _751, _752), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3819 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_750, _751, _752), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3852 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_750, _751, _752), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3885 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1313 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1317 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1321 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1344 = _963 + _750;
        float _1345 = _967 + _751;
        float _1346 = _971 + _752;
        float _1356 = fma(_1346, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1344)) - _1313;
        float _1357 = fma(_1346, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1344)) - _1317;
        float _1358 = fma(_1346, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1344)) - _1321;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1313 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1317 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[35u].z) + ((((((_1321 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1412 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1379.x + (-0.5));
        float _1414 = _1412 * (_1379.y + (-0.5));
        float _1415 = _1412 * (_1379.z + (-0.5));
        float _1422 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1386.x + (-0.5));
        float _1424 = _1422 * (_1386.y + (-0.5));
        float _1425 = _1422 * (_1386.z + (-0.5));
        float _1432 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1393.x + (-0.5));
        float _1434 = _1432 * (_1393.y + (-0.5));
        float _1435 = _1432 * (_1393.z + (-0.5));
        float _1442 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1400.x + (-0.5));
        float _1444 = _1442 * (_1400.y + (-0.5));
        float _1445 = _1442 * (_1400.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_750, _751, _752), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3948 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1476 + 1.0))) + _1481) * _1446;
        float _1491 = _1414 * 0.5;
        float _1492 = _1424 * 0.5;
        float _1493 = _1434 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_750, _751, _752), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _3981 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1518 + 1.0))) + _1523) * _1447;
        float _1533 = _1415 * 0.5;
        float _1534 = _1425 * 0.5;
        float _1535 = _1435 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_750, _751, _752), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4014 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1560 + 1.0))) + _1565) * _1448;
        _1582 = _1415;
        _1583 = _1414;
        _1584 = _1413;
        _1585 = _1425;
        _1586 = _1424;
        _1587 = _1423;
        _1588 = _1435;
        _1589 = _1434;
        _1590 = _1433;
        _1591 = _1448;
        _1592 = _1447;
        _1593 = _1446;
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _1273;
        _1583 = _1273;
        _1584 = _1273;
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = _1273;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1285)) + _1285;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1286)) + _1286;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1287)) + _1287;
    float _1629 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1606));
    float _1650 = _911 * 0.5;
    float _1651 = _912 * 0.5;
    float _1652 = _913 * 0.5;
    float _1653 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1656 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1659 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1693;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1666 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1670 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1674 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1681 = dot(vec4(cbModelParam._m0[39u]), vec4(_1650, _1651, _1652, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1704;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1695 = dot(vec4(cbModelParam._m0[40u]), vec4(_1650, _1651, _1652, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1708 = (_1704 * cbModelParam._m0[1u].x) + (_1693 * (1.0 - cbModelParam._m0[1u].x));
    float _1718 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1718 : min(cbModelParam._m0[25u].z, _1718));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_913, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911));
        float _1780 = fma(_913, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911));
        float _1783 = fma(_913, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1811 = frontier_phi_14_12_ladder;
        }
        float _2033;
        if (_1780 > 0.0)
        {
            _2033 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2033 = frontier_phi_23_19_ladder;
        }
        float _2279;
        if (_1783 > 0.0)
        {
            _2279 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2279 = frontier_phi_35_30_ladder;
        }
        float _2281 = isnan(_2033) ? _1811 : (isnan(_1811) ? _2033 : min(_1811, _2033));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1777) + _1766;
        float _2287 = (_2282 * _1780) + _1770;
        float _2288 = (_2282 * _1783) + _1774;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1719);
            frontier_phi_13_35_ladder = _2412.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2412.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_13_35_ladder_2;
        _1801 = frontier_phi_13_35_ladder_1;
        _1803 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_911, _912, _913), _1719);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1861 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1865 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1869 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1872 = fma(_913, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911));
        float _1875 = fma(_913, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911));
        float _1878 = fma(_913, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911));
        float _2038;
        if (_1872 > 0.0)
        {
            _2038 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2306;
        if (_1875 > 0.0)
        {
            _2306 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2306 = frontier_phi_37_32_ladder;
        }
        float _2511;
        if (_1878 > 0.0)
        {
            _2511 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2511 = frontier_phi_46_43_ladder;
        }
        float _2513 = isnan(_2306) ? _2038 : (isnan(_2038) ? _2306 : min(_2038, _2306));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _1872) + _1861;
        float _2519 = (_2514 * _1875) + _1865;
        float _2520 = (_2514 * _1878) + _1869;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2521;
        float _2524 = _2521 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2520 > _2524) || ((_2520 < _2522) || ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 < _2522) || (_2518 > _2524))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2520, cbModelParam._m0[17u].z, fma(_2519, cbModelParam._m0[17u].y, _2518 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2520, cbModelParam._m0[18u].z, fma(_2519, cbModelParam._m0[18u].y, _2518 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2520, cbModelParam._m0[19u].z, fma(_2519, cbModelParam._m0[19u].y, _2518 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_22_46_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1897 = frontier_phi_22_46_ladder_2;
        _1899 = frontier_phi_22_46_ladder_1;
        _1901 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_911, _912, _913), _1808);
        _1897 = _1881.x * cbModelParam._m0[1u].z;
        _1899 = _1881.y * cbModelParam._m0[1u].z;
        _1901 = _1881.z * cbModelParam._m0[1u].z;
    }
    float _1913 = ((((1.0 - _931) * ((_919 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_931 * _919)) * _903;
    float _1914 = _1913 * ((cbModelParam._m0[1u].w * (_1897 - _1799)) + _1799);
    float _1915 = _1913 * ((cbModelParam._m0[1u].w * (_1899 - _1801)) + _1801);
    float _1916 = _1913 * ((cbModelParam._m0[1u].w * (_1901 - _1803)) + _1803);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1914 * cbSceneParam._m0[91u].x));
    vec4 _1933 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_838, _839));
    float _1935 = _1933.w;
    float _1947 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1935);
    float _1948 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1935);
    float _1949 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1935);
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_878 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _903 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1992 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1996 = _1955 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_750, _751, _752));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_750, _751, _752));
    float _4150 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4161 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1972].x * _1978) * _2017) + (((cbLight._m0[_1982].x * _1947) * _1992) * _2015);
    float _2025 = ((_1978 * cbLight._m0[_1972].y) * _2017) + (((cbLight._m0[_1982].y * _1948) * _1992) * _2015);
    float _2026 = ((_1978 * cbLight._m0[_1972].z) * _2017) + (((cbLight._m0[_1982].z * _1949) * _1992) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_2032)
    {
        _2043 = _2024;
        _2045 = _2025;
        _2047 = _2026;
    }
    else
    {
        uint _2051 = _1955 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4172 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2070 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _2024;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _2025;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _2026;
    }
    bool _2050 = _2030.y == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2050)
    {
        _2088 = _2043;
        _2090 = _2045;
        _2092 = _2047;
    }
    else
    {
        uint _2250 = _1955 + 7u;
        float _2266 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4188 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2269 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2088 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2043;
        _2090 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2045;
        _2092 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2047;
    }
    uint _2095 = _1955 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _753) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1955].x + _830;
    float _2111 = cbLight._m0[_1955].y + _831;
    float _2112 = cbLight._m0[_1955].z + _832;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_1955].xyz));
    float _4204 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2124 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2125 = dot(vec3(_750, _751, _752), vec3(_2117, _2118, _2119));
    float _4226 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2117, _2118, _2119));
    float _4237 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2149 = 1.0 - _2109;
    float _2160 = (0.5 / (((_2124 * ((_2123 * _2149) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2149) + _2109) * _2123))) * _2123;
    float _4248 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2176 = _1955 + 9u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _753) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_1996].x + _830;
    float _2190 = cbLight._m0[_1996].y + _831;
    float _2191 = cbLight._m0[_1996].z + _832;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_1996].xyz));
    float _4259 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2203 = dot(vec3(_750, _751, _752), vec3(_2196, _2197, _2198));
    float _4270 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2196, _2197, _2198));
    float _4281 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2188 * _2188;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2225 = 1.0 - _2188;
    float _2235 = (0.5 / (((_2124 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2225) + _2188) * _2202))) * _2202;
    float _4292 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    float _2247 = (((_2224 * cbLight._m0[_2176].x) * _2237) * _1978) + ((((cbLight._m0[_2095].x * _1947) * _2148) * _2162) * _1992);
    float _2248 = (((_2224 * cbLight._m0[_2176].y) * _2237) * _1978) + ((((cbLight._m0[_2095].y * _1948) * _2148) * _2162) * _1992);
    float _2249 = (((_2224 * cbLight._m0[_2176].z) * _2237) * _1978) + ((((cbLight._m0[_2095].z * _1949) * _2148) * _2162) * _1992);
    float _2311;
    float _2313;
    float _2315;
    if (_2032)
    {
        _2311 = _2247;
        _2313 = _2248;
        _2315 = _2249;
    }
    else
    {
        uint _2317 = _1955 + 2u;
        uint _2321 = _1955 + 10u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _753) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _830;
        float _2338 = cbLight._m0[_2317].y + _831;
        float _2339 = cbLight._m0[_2317].z + _832;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2317].xyz));
        float _4303 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2351 = dot(vec3(_750, _751, _752), vec3(_2344, _2345, _2346));
        float _4314 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4325 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2373 = 1.0 - _2336;
        float _2383 = (0.5 / (((_2124 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2373) + _2336) * _2350))) * _2350;
        float _4336 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2311 = (((_2372 * cbLight._m0[_2321].x) * _2385) * _2386) + _2247;
        _2313 = (((_2372 * cbLight._m0[_2321].y) * _2385) * _2386) + _2248;
        _2315 = (((_2372 * cbLight._m0[_2321].z) * _2385) * _2386) + _2249;
    }
    float _2421;
    float _2423;
    float _2425;
    if (_2050)
    {
        _2421 = _2311;
        _2423 = _2313;
        _2425 = _2315;
    }
    else
    {
        uint _2432 = _1955 + 3u;
        uint _2436 = _1955 + 11u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _753) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _830;
        float _2453 = cbLight._m0[_2432].y + _831;
        float _2454 = cbLight._m0[_2432].z + _832;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2432].xyz));
        float _4352 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2466 = dot(vec3(_750, _751, _752), vec3(_2459, _2460, _2461));
        float _4363 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4374 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2488 = 1.0 - _2451;
        float _2498 = (0.5 / (((_2124 * ((_2465 * _2488) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2488) + _2451) * _2465))) * _2465;
        float _4385 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2421 = (((_2487 * cbLight._m0[_2436].x) * _2500) * _2501) + _2311;
        _2423 = (((_2487 * cbLight._m0[_2436].y) * _2500) * _2501) + _2313;
        _2425 = (((_2487 * cbLight._m0[_2436].z) * _2500) * _2501) + _2315;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1953.y == 0u)
    {
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2576;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2576;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2576;
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.x;
        uint _2603 = uint((float(_2591.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2592))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2592)));
        float _2613 = (log2(_2579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        uint _2617 = uint(isnan(14.0) ? _2614 : (isnan(_2614) ? 14.0 : min(_2614, 14.0)));
        uvec4 _2622 = texelFetch(g_lightClusterGridBuffer, int(((_2617 << 2u) + (_2603 << 6u)) >> 2u));
        uint _2623 = _2622.x;
        uint _2624 = _2591.z;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((((1u << ((_2624 >> 4u) & 15u)) + 4294967295u) & _2623) == 0u) || ((_2624 & 240u) == 0u))
        {
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
        }
        else
        {
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            uint _2911 = 0u;
            uint _2920;
            bool _2921;
            for (;;)
            {
                _2920 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                _2921 = _2920 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2921)
                {
                    frontier_phi_61_pred = _2905;
                    frontier_phi_61_pred_1 = _2910;
                    frontier_phi_61_pred_2 = _2909;
                    frontier_phi_61_pred_3 = _2908;
                    frontier_phi_61_pred_4 = _2907;
                    frontier_phi_61_pred_5 = _2906;
                }
                else
                {
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    uint _3035;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2920;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    for (;;)
                    {
                        uint _3039 = uint(findLSB(_3035)) + (_2911 << 5u);
                        uint _3036 = (_3035 + 4294967295u) & _3035;
                        uint _3041 = _3039 * 48u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3061 = (_3039 * 48u) + 4u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3080 = (_3039 * 48u) + 8u;
                        vec3 _3091 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x));
                        float _3095 = _3055.x - _2577;
                        float _3096 = _3055.y - _2578;
                        float _3097 = _3055.z - _2579;
                        float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                        float _3101 = inversesqrt(_3098);
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3105 = dot(vec3(_859, _862, _865), vec3(_3102, _3103, _3104));
                        float _3110 = 1.0 - (_3098 * _3055.w);
                        float _4411 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3112 = sqrt(_3098) * _3074.w;
                        float _3115 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3105) + _3116;
                        float _3122 = _3112 * _3112;
                        float _3126 = ((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3111) / ((_3122 * 0.699999988079071044921875) + 1.0);
                        float _3130 = (-0.0) - _2577;
                        float _3131 = (-0.0) - _2578;
                        float _3132 = (-0.0) - _2579;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3147 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                        float _3148 = 1.0 - _919;
                        float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                        float _3156 = _3155 * _3155;
                        float _3157 = _3156 * _3156;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3160 = _3139 + _3104;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3168 = dot(vec3(_859, _862, _865), vec3(_3137, _3138, _3139));
                        float _4427 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3172 = dot(vec3(_859, _862, _865), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                        float _4438 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                        float _3180 = _3115 * _3156;
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3105) + _3181;
                        float _4449 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3186 = 1.0 - _3156;
                        float _3196 = (0.5 / (((_3185 * ((_3171 * _3186) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3156) * _3171))) * _3185;
                        float _4460 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3207 = (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3179 * _3179) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125))) * _3111;
                        _2964 = (_3126 * _3074.x) + _3032;
                        _2965 = (_3126 * _3074.y) + _3033;
                        _2966 = (_3126 * _3074.z) + _3034;
                        _2961 = (_3207 * _3091.x) + _3029;
                        _2962 = (_3207 * _3091.y) + _3030;
                        _2963 = (_3207 * _3091.z) + _3031;
                        if (_3036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _3036;
                        }
                    }
                    frontier_phi_61_pred = _2961;
                    frontier_phi_61_pred_1 = _2966;
                    frontier_phi_61_pred_2 = _2965;
                    frontier_phi_61_pred_3 = _2964;
                    frontier_phi_61_pred_4 = _2963;
                    frontier_phi_61_pred_5 = _2962;
                }
                _2754 = frontier_phi_61_pred;
                _2764 = frontier_phi_61_pred_1;
                _2762 = frontier_phi_61_pred_2;
                _2760 = frontier_phi_61_pred_3;
                _2758 = frontier_phi_61_pred_4;
                _2756 = frontier_phi_61_pred_5;
                uint _2912 = _2911 + 1u;
                if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2905 = _2754;
                    _2906 = _2756;
                    _2907 = _2758;
                    _2908 = _2760;
                    _2909 = _2762;
                    _2910 = _2764;
                    _2911 = _2912;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
        }
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.z;
        uint _2770 = (_2768 >> 8u) & 15u;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((4294967295u << _2770) & _2623) == 0u)
        {
            _2873 = _2753;
            _2875 = _2755;
            _2877 = _2757;
            _2879 = _2759;
            _2881 = _2761;
            _2883 = _2763;
        }
        else
        {
            float _2898 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
            float _2899 = _2898 * _2577;
            float _2900 = _2898 * _2578;
            float _2901 = _2898 * _2579;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2770 < ((_2768 >> 12u) & 15u))
            {
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _3012 = _2753;
                float _3013 = _2755;
                float _3014 = _2757;
                float _3015 = _2759;
                float _3016 = _2761;
                float _3017 = _2763;
                uint _3018 = _2770;
                uint _3027;
                bool _3028;
                for (;;)
                {
                    _3027 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                    _3028 = _3027 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3028)
                    {
                        frontier_phi_67_pred = _3015;
                        frontier_phi_67_pred_1 = _3016;
                        frontier_phi_67_pred_2 = _3017;
                        frontier_phi_67_pred_3 = _3014;
                        frontier_phi_67_pred_4 = _3013;
                        frontier_phi_67_pred_5 = _3012;
                    }
                    else
                    {
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        float _3228 = _3015;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        uint _3231 = _3027;
                        uint _3232;
                        vec4 _3257;
                        float _3258;
                        vec4 _3273;
                        vec3 _3285;
                        vec4 _3300;
                        vec4 _3315;
                        float _3361;
                        bool _3362;
                        for (;;)
                        {
                            uint _3242 = ((_3018 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3231));
                            _3232 = (_3231 + 4294967295u) & _3231;
                            uint _3244 = _3242 * 40u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            _3258 = _3257.w;
                            uint _3260 = (_3242 * 40u) + 4u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3275 = (_3242 * 40u) + 8u;
                            _3285 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x));
                            uint _3287 = (_3242 * 40u) + 16u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3242 * 40u) + 20u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3242 * 40u) + 24u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3336 = (_3242 * 40u) + 28u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            _3361 = fma(_2579, _3349.z, fma(_2578, _3349.y, _3349.x * _2577)) + _3349.w;
                            _3362 = !((fma(_2579, _3330.z, fma(_2578, _3330.y, _3330.x * _2577)) + _3330.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3362)
                            {
                                float _3389 = _3257.x - _2577;
                                float _3390 = _3257.y - _2578;
                                float _3391 = _3257.z - _2579;
                                float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                                float _3395 = inversesqrt(_3392);
                                float _3396 = _3395 * _3389;
                                float _3397 = _3395 * _3390;
                                float _3398 = _3395 * _3391;
                                float _3402 = 1.0 - (_3392 / (_3258 * _3258));
                                float _4471 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3407 = sqrt(_3392) * _3273.w;
                                float _3409 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                                float _3410 = _3409 * _3409;
                                float _3413 = ((1.0 - _3410) * dot(vec3(_3396, _3397, _3398), vec3(_859, _862, _865))) + _3410;
                                float _3416 = _3407 * _3407;
                                float _3420 = (fma(_2579, _3300.z, fma(_2578, _3300.y, _3300.x * _2577)) + _3300.w) / _3361;
                                float _3421 = (fma(_2579, _3315.z, fma(_2578, _3315.y, _3315.x * _2577)) + _3315.w) / _3361;
                                float _3425 = 1.0 - dot(vec2(_3420, _3421), vec2(_3420, _3421));
                                float _4487 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3427 = _3426 * (((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3403) / ((_3416 * 0.699999988079071044921875) + 1.0));
                                float _3439 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                                float _3440 = 1.0 - _919;
                                float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                                float _3448 = _3447 * _3447;
                                float _3449 = _3448 * _3448;
                                float _3450 = _3396 - _2899;
                                float _3451 = _3397 - _2900;
                                float _3452 = _3398 - _2901;
                                float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                                float _3460 = dot(vec3(_859, _862, _865), vec3((-0.0) - _2899, (-0.0) - _2900, (-0.0) - _2901));
                                float _4498 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3464 = dot(vec3(_859, _862, _865), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                                float _4509 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                                float _3472 = _3409 * _3448;
                                float _3473 = _3472 * _3472;
                                float _3479 = ((1.0 - _3473) * dot(vec3(_859, _862, _865), vec3(_3396, _3397, _3398))) + _3473;
                                float _4520 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3481 = 1.0 - _3448;
                                float _3491 = (0.5 / (((_3480 * ((_3463 * _3481) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3448) * _3463))) * _3480;
                                float _4531 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3501 = (_3426 * _3403) * (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3471 * _3471) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3501 * _3285.x;
                                frontier_phi_73_pred_1 = _3501 * _3285.y;
                                frontier_phi_73_pred_2 = _3427 * _3273.z;
                                frontier_phi_73_pred_3 = _3427 * _3273.y;
                                frontier_phi_73_pred_4 = _3427 * _3273.x;
                                frontier_phi_73_pred_5 = _3501 * _3285.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3505 = frontier_phi_73_pred;
                            _3506 = frontier_phi_73_pred_1;
                            _3510 = frontier_phi_73_pred_2;
                            _3509 = frontier_phi_73_pred_3;
                            _3508 = frontier_phi_73_pred_4;
                            _3507 = frontier_phi_73_pred_5;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            if (_3232 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3232;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3215;
                        frontier_phi_67_pred_1 = _3216;
                        frontier_phi_67_pred_2 = _3217;
                        frontier_phi_67_pred_3 = _3214;
                        frontier_phi_67_pred_4 = _3213;
                        frontier_phi_67_pred_5 = _3212;
                    }
                    _2880 = frontier_phi_67_pred;
                    _2882 = frontier_phi_67_pred_1;
                    _2884 = frontier_phi_67_pred_2;
                    _2878 = frontier_phi_67_pred_3;
                    _2876 = frontier_phi_67_pred_4;
                    _2874 = frontier_phi_67_pred_5;
                    uint _3019 = _3018 + 1u;
                    if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3012 = _2874;
                        _3013 = _2876;
                        _3014 = _2878;
                        _3015 = _2880;
                        _3016 = _2882;
                        _3017 = _2884;
                        _3018 = _3019;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2882;
                frontier_phi_55_56_ladder_1 = _2884;
                frontier_phi_55_56_ladder_2 = _2880;
                frontier_phi_55_56_ladder_3 = _2878;
                frontier_phi_55_56_ladder_4 = _2876;
                frontier_phi_55_56_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_55_56_ladder = _2761;
                frontier_phi_55_56_ladder_1 = _2763;
                frontier_phi_55_56_ladder_2 = _2759;
                frontier_phi_55_56_ladder_3 = _2757;
                frontier_phi_55_56_ladder_4 = _2755;
                frontier_phi_55_56_ladder_5 = _2753;
            }
            _2873 = frontier_phi_55_56_ladder_5;
            _2875 = frontier_phi_55_56_ladder_4;
            _2877 = frontier_phi_55_56_ladder_3;
            _2879 = frontier_phi_55_56_ladder_2;
            _2881 = frontier_phi_55_56_ladder;
            _2883 = frontier_phi_55_56_ladder_1;
        }
        float _2888 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
        _2636 = (_2888 * _2879) + _2088;
        _2638 = (_2888 * _2881) + _2090;
        _2640 = (_2888 * _2883) + _2092;
        _2642 = ((_2873 * 0.039999999105930328369140625) * _2888) + _2421;
        _2644 = ((_2875 * 0.039999999105930328369140625) * _2888) + _2423;
        _2646 = ((_2877 * 0.039999999105930328369140625) * _2888) + _2425;
    }
    else
    {
        _2636 = _2088;
        _2638 = _2090;
        _2640 = _2092;
        _2642 = _2421;
        _2644 = _2423;
        _2646 = _2425;
    }
    uint _2652 = _879 + uint(cbMatDynParam._m0[0u].w);
    float _2658 = cbInstanceData._m0[_2652].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_475.x - _472) * _453) + _472)) - _712) * _722) + _712);
    float _2659 = cbInstanceData._m0[_2652].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_475.y - _473) * _453) + _473)) - _713) * _722) + _713);
    float _2660 = cbInstanceData._m0[_2652].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_475.z - _474) * _453) + _474)) - _714) * _722) + _714);
    float _4547 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4558 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4569 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2677 = (((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2636 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _903))) + ((_2642 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + _2658;
    float _2679 = (_2659 + ((_2644 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2638 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _903)));
    float _2681 = (_2660 + ((_2646 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2640 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _903)));
    float _4595 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2694 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    uint _2695 = _878 + 6u;
    float _2703 = _838 / cbSceneParam._m0[86u].x;
    float _2704 = _839 / cbSceneParam._m0[86u].y;
    vec4 _2718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2720 = _2718.x;
    float _2721 = _2718.y;
    float _2722 = _2718.z;
    float _2723 = _2718.w;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _2778 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _2779 = _2778 / _772;
        float _2790 = _2779 * _823;
        float _2791 = _824 * _2779;
        float _2792 = (-0.0) - _2791;
        float _2793 = _2779 * _825;
        float _2795 = (cbSceneParam._m0[77u].w * _2792) / _2778;
        float _2796 = _2795 + cbSceneParam._m0[79u].w;
        float _2797 = cbSceneParam._m0[79u].w - _2791;
        float _2803 = sqrt(((_2790 * _2790) + (_2791 * _2791)) + (_2793 * _2793));
        float _2806 = (1.0 - (cbSceneParam._m0[77u].w / _2778)) * _2803;
        float _2811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2813 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2974;
        if (abs((_2792 - _2795) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2974 = ((((_2796 > 0.0) ? exp2(_2811 * _2796) : (2.0 - exp2(_2813 * _2796))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2806;
        }
        else
        {
            float _2934 = 1.0 / cbSceneParam._m0[80u].x;
            float _2935 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : max(_2796, _2797));
            float _2936 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : min(_2796, _2797));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            _2974 = ((abs(_2803 / _2792) * cbSceneParam._m0[80u].y) * ((((_2945 - _2946) * 2.0) - ((exp2(_2811 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)))) - exp2(_2811 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))))) * _2934)) - ((exp2(_2813 * _2945) - exp2(_2813 * _2946)) * _2934))) + (_2806 * cbSceneParam._m0[80u].z);
        }
        vec4 _2976 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, 1.0), 0.0);
        float _2985 = exp2((_2974 * (-1.44269502162933349609375)) * (1.0 - _2976.w));
        float _2986 = log2(_2985);
        float _3002 = log2(_2723);
        _2815 = (exp2(_3002 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].x)) * _2976.x) / cbSceneParam._m0[78u].x)) + _2720;
        _2817 = (exp2(_3002 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].y)) * _2976.y) / cbSceneParam._m0[78u].y)) + _2721;
        _2819 = (exp2(_3002 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].z)) * _2976.z) / cbSceneParam._m0[78u].z)) + _2722;
        _2821 = _2985 * _2723;
    }
    else
    {
        _2815 = _2720;
        _2817 = _2721;
        _2819 = _2722;
        _2821 = _2723;
    }
    float _2832 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2833 = _2832 == 3.0;
    float _2834 = log2(_2821);
    float _2838 = exp2(_2834 * cbSceneParam._m0[78u].x);
    float _2839 = exp2(_2834 * cbSceneParam._m0[78u].y);
    float _2840 = exp2(_2834 * cbSceneParam._m0[78u].z);
    float _2841 = _2838 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0)));
    float _2842 = _2839 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0)));
    float _2843 = _2840 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)));
    float _2852 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2852 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
    SV_Target.y = _2852 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
    SV_Target.z = _2852 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.w = cbInstanceData._m0[_2695].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2658) * _2694) * _2838) * _2852;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2659) * _2694) * _2839) * _2852;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2660) * _2694) * _2840) * _2852;
    SV_Target_1.w = cbInstanceData._m0[_2695].w;
}


