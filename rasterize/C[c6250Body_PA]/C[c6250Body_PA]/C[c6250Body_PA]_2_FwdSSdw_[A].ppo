#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1372;
float _3812;
float _3813;
float _3814;
float _3815;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    float _316 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _331 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _333 = _331.x;
    float _357 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _3824 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _361 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _333) * _358) + _333;
    vec4 _374 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _391 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _393 = _391.x;
    float _394 = _391.y;
    float _395 = _391.z;
    float _404 = ((_374.z - _395) * _358) + _395;
    float _408 = ((((_374.x - _393) * _358) + _393) * 2.0) + (-1.0);
    float _410 = ((((_374.y - _394) * _358) + _394) * 2.0) + (-1.0);
    float _411 = dot(vec2(_408, _410), vec2(_408, _410));
    float _3835 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _436 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _439 = (_436 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _440 = (_436 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _465 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _469 = cbPerFrame._m0[22u].x * 2.0;
    float _470 = _469 * cbMtdParam._m0[22u].y;
    float _477 = ((_465.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _479 = (-0.0) - (cbMtdParam._m0[22u].x * ((_465.x * 0.5) + (-0.25)));
    float _481 = fract(_470);
    float _483 = fract(_470 + 0.5);
    float _494 = abs((_481 * 2.0) + (-1.0));
    vec4 _511 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_481 * _479) + _439) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_477 * _481) + _440) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    vec4 _516 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_483 * _479) + _439) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_477 * _483) + _440) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _558 = (cbMtdParam._m0[23u].y * _436) + TEXCOORD_6.w;
    float _559 = (cbMtdParam._m0[23u].z * _436) + TEXCOORD_9.w;
    vec4 _572 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _576 = _469 * cbMtdParam._m0[18u].x;
    float _581 = ((_572.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _583 = (-0.0) - (cbMtdParam._m0[20u].z * ((_572.x * 0.5) + (-0.25)));
    float _584 = fract(_576);
    float _586 = fract(_576 + 0.5);
    float _587 = _584 * _583;
    float _588 = _581 * _584;
    float _591 = _586 * _583;
    float _592 = _581 * _586;
    float _597 = abs((_584 * 2.0) + (-1.0));
    vec4 _613 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_587 + _558) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_588 + _559) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    vec4 _618 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_591 + _558) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_592 + _559) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _648 = (cbMtdParam._m0[22u].w * _436) + TEXCOORD_6.w;
    float _649 = (cbMtdParam._m0[23u].x * _436) + TEXCOORD_9.w;
    vec4 _669 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_587 + _648) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_588 + _649) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _671 = _669.x;
    float _672 = _669.y;
    float _673 = _669.z;
    vec4 _674 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_591 + _648) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_592 + _649) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _694 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3846 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _703 = (((_695 * _695) * (3.0 - (_695 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _736 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _648) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _649) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3857 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _741 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_674.x - _671) * _597) + _671)) * _703) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_618.x - _615) * _597) + _615)))) * _737;
    float _745 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_674.y - _672) * _597) + _672)) * _703) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_618.y - _616) * _597) + _616)))) * _737;
    float _749 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_674.z - _673) * _597) + _673)) * _703) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_618.z - _617) * _597) + _617)))) * _737;
    float _753 = _741 - (_741 * _316);
    float _754 = _745 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _745);
    float _755 = _749 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _749);
    float _762 = (_316 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _316))) * (cbMtdParam._m0[20u].x + 1.0);
    float _3868 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _776 = (cbMtdParam._m0[20u].y * _408) + _408;
    float _777 = (cbMtdParam._m0[20u].y * _410) + _410;
    float _780 = fma(_416, _235 * NORMAL.x, fma(_777, _242 * TANGENT.x, (_228 * _220) * _776));
    float _783 = fma(_416, _235 * NORMAL.y, fma(_777, _242 * TANGENT.y, (_228 * _221) * _776));
    float _786 = fma(_416, _235 * NORMAL.z, fma(_777, _242 * TANGENT.z, (_228 * _222) * _776));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3879 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _794 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3901 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3912 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3923 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _798 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    vec4 _879 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _881 = _879.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1053 = sqrt(((_865 * _865) + (_866 * _866)) + (_867 * _867));
        float _1059 = (cbMatDynParam._m0[5u].x * _1053) + cbMatDynParam._m0[5u].y;
        float _3934 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1064 = (cbMatDynParam._m0[5u].z * _1053) + cbMatDynParam._m0[5u].w;
        float _3945 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) - _1060)) + _1060) < ((_881 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _912 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _915 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _918 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _931 = uint(roundEven(NORMAL.w)) * 13u;
    uint _932 = _931 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_933].z;
    float _3956 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _945 = 1.0 - _798;
    float _946 = _942 * _945;
    float _947 = _943 * _945;
    float _948 = _944 * _945;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _798;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _798;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _798;
    float _956 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _971 = _968.x * TEXCOORD_3.w;
    float _972 = dot(vec3(_791, _792, _793), vec3(_872, _873, _874));
    float _975 = _972 * 2.0;
    float _979 = (_975 * _791) - _872;
    float _980 = (_975 * _792) - _873;
    float _981 = (_975 * _793) - _874;
    float _985 = abs(dot(vec3(_872, _873, _874), vec3(_791, _792, _793)));
    float _3989 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _987 = sqrt(_794);
    float _999 = exp2((_987 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_987 * 3.0));
    float _1005 = (1.0 - _999) * ((_987 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1006 = _999 * _987;
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1042, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034));
        float _1101 = fma(_1042, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034));
        float _1105 = fma(_1042, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034));
        float _1129 = _1034 + _791;
        float _1130 = _1038 + _792;
        float _1131 = _1042 + _793;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1097;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1101;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1105;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_791, _792, _793), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4037 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_791, _792, _793), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4070 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_791, _792, _793), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4103 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1415 = fma(_1042, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034));
        float _1419 = fma(_1042, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034));
        float _1423 = fma(_1042, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034));
        float _1446 = _1034 + _791;
        float _1447 = _1038 + _792;
        float _1448 = _1042 + _793;
        float _1458 = fma(_1448, cbModelParam._m0[30u].z, fma(_1447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1446)) - _1415;
        float _1459 = fma(_1448, cbModelParam._m0[31u].z, fma(_1447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1446)) - _1419;
        float _1460 = fma(_1448, cbModelParam._m0[32u].z, fma(_1447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1446)) - _1423;
        float _1464 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
        float _1477 = ((_1464 * _1458) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1415 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1464 * _1459) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1419 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1464 * _1460) / cbModelParam._m0[35u].z) + ((((((_1423 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        float _1514 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1481.x + (-0.5));
        float _1516 = _1514 * (_1481.y + (-0.5));
        float _1517 = _1514 * (_1481.z + (-0.5));
        float _1524 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1488.x + (-0.5));
        float _1526 = _1524 * (_1488.y + (-0.5));
        float _1527 = _1524 * (_1488.z + (-0.5));
        float _1534 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1495.x + (-0.5));
        float _1536 = _1534 * (_1495.y + (-0.5));
        float _1537 = _1534 * (_1495.z + (-0.5));
        float _1544 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1502.x + (-0.5));
        float _1546 = _1544 * (_1502.y + (-0.5));
        float _1547 = _1544 * (_1502.z + (-0.5));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = _1515 * 0.5;
        float _1552 = _1525 * 0.5;
        float _1553 = _1535 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_791, _792, _793), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4166 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1578 + 1.0))) + _1583) * _1548;
        float _1593 = _1516 * 0.5;
        float _1594 = _1526 * 0.5;
        float _1595 = _1536 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_791, _792, _793), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4199 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1620 + 1.0))) + _1625) * _1549;
        float _1635 = _1517 * 0.5;
        float _1636 = _1527 * 0.5;
        float _1637 = _1537 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_791, _792, _793), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4232 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1662 + 1.0))) + _1667) * _1550;
        _1684 = _1517;
        _1685 = _1516;
        _1686 = _1515;
        _1687 = _1527;
        _1688 = _1526;
        _1689 = _1525;
        _1690 = _1537;
        _1691 = _1536;
        _1692 = _1535;
        _1693 = _1550;
        _1694 = _1549;
        _1695 = _1548;
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    }
    else
    {
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = _1372;
        _1691 = _1372;
        _1692 = _1372;
        _1693 = _1372;
        _1694 = _1372;
        _1695 = _1372;
        _1696 = 0.0;
        _1697 = 0.0;
        _1698 = 0.0;
    }
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1386)) + _1386;
    float _1731 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1708));
    float _1752 = _979 * 0.5;
    float _1753 = _980 * 0.5;
    float _1754 = _981 * 0.5;
    float _1755 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1758 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1761 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1768 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1772 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1776 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1783 = dot(vec4(cbModelParam._m0[39u]), vec4(_1752, _1753, _1754, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1797 = dot(vec4(cbModelParam._m0[40u]), vec4(_1752, _1753, _1754, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1810 = (_1806 * cbModelParam._m0[1u].x) + (_1795 * (1.0 - cbModelParam._m0[1u].x));
    float _1820 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1820 : min(cbModelParam._m0[25u].z, _1820));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1042, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1042, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1042, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_981, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979));
        float _1882 = fma(_981, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979));
        float _1885 = fma(_981, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1913 = frontier_phi_17_15_ladder;
        }
        float _2136;
        if (_1882 > 0.0)
        {
            _2136 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2136 = frontier_phi_26_22_ladder;
        }
        float _2393;
        if (_1885 > 0.0)
        {
            _2393 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2393 = frontier_phi_38_33_ladder;
        }
        float _2395 = isnan(_2136) ? _1913 : (isnan(_1913) ? _2136 : min(_1913, _2136));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1879) + _1868;
        float _2401 = (_2396 * _1882) + _1872;
        float _2402 = (_2396 * _1885) + _1876;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2403;
        float _2407 = _2403 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 > _2407) || ((_2401 < _2405) || ((_2400 < _2405) || (_2400 > _2407))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2402, cbModelParam._m0[9u].z, fma(_2401, cbModelParam._m0[9u].y, _2400 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2402, cbModelParam._m0[10u].z, fma(_2401, cbModelParam._m0[10u].y, _2400 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2402, cbModelParam._m0[11u].z, fma(_2401, cbModelParam._m0[11u].y, _2400 * cbModelParam._m0[11u].x))), _1821);
            frontier_phi_16_38_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_16_38_ladder_2;
        _1903 = frontier_phi_16_38_ladder_1;
        _1905 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_979, _980, _981), _1821);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1963 = fma(_1042, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034)) + cbModelParam._m0[21u].w;
        float _1967 = fma(_1042, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034)) + cbModelParam._m0[22u].w;
        float _1971 = fma(_1042, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034)) + cbModelParam._m0[23u].w;
        float _1974 = fma(_981, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979));
        float _1977 = fma(_981, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979));
        float _1980 = fma(_981, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979));
        float _2141;
        if (_1974 > 0.0)
        {
            _2141 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2141 = frontier_phi_28_24_ladder;
        }
        float _2420;
        if (_1977 > 0.0)
        {
            _2420 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2420 = frontier_phi_40_35_ladder;
        }
        float _2633;
        if (_1980 > 0.0)
        {
            _2633 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2633 = frontier_phi_49_46_ladder;
        }
        float _2635 = isnan(_2420) ? _2141 : (isnan(_2141) ? _2420 : min(_2141, _2420));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _1974) + _1963;
        float _2641 = (_2636 * _1977) + _1967;
        float _2642 = (_2636 * _1980) + _1971;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2643;
        float _2646 = _2643 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2642 > _2646) || ((_2642 < _2644) || ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 < _2644) || (_2640 > _2646))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2642, cbModelParam._m0[17u].z, fma(_2641, cbModelParam._m0[17u].y, _2640 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2642, cbModelParam._m0[18u].z, fma(_2641, cbModelParam._m0[18u].y, _2640 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2642, cbModelParam._m0[19u].z, fma(_2641, cbModelParam._m0[19u].y, _2640 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_25_49_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _1999 = frontier_phi_25_49_ladder_2;
        _2001 = frontier_phi_25_49_ladder_1;
        _2003 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_979, _980, _981), _1910);
        _1999 = _1983.x * cbModelParam._m0[1u].z;
        _2001 = _1983.y * cbModelParam._m0[1u].z;
        _2003 = _1983.z * cbModelParam._m0[1u].z;
    }
    float _2016 = (((_1005 * _956) + _1006) * _971) * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2018 = (((_1005 * _958) + _1006) * _971) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2020 = (((_1005 * _959) + _1006) * _971) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2016 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2016 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2016 * cbSceneParam._m0[91u].x));
    vec4 _2037 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_893, _894));
    float _2039 = _2037.w;
    float _2051 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2039);
    float _2052 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2039);
    float _2053 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2039);
    uvec4 _2057 = floatBitsToUint(cbInstanceData._m0[_931 + 5u]);
    uint _2059 = _2057.x * 14u;
    uint _2060 = _2059 + 13u;
    float _2067 = _971 + (-1.0);
    float _2072 = (cbLight._m0[_2060].x * _2067) + 1.0;
    float _2073 = (cbLight._m0[_2060].y * _2067) + 1.0;
    float _2074 = (cbLight._m0[_2060].z * _2067) + 1.0;
    float _2075 = (cbLight._m0[_2060].w * _2067) + 1.0;
    uint _2076 = _2059 + 5u;
    float _2082 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2086 = _2059 + 4u;
    float _2095 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2099 = _2059 | 1u;
    float _2110 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_791, _792, _793));
    float _2113 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_791, _792, _793));
    float _4368 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _4379 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2118 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2120 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2127 = ((cbLight._m0[_2076].x * _2082) * _2120) + (((cbLight._m0[_2086].x * _2051) * _2095) * _2118);
    float _2128 = ((_2082 * cbLight._m0[_2076].y) * _2120) + (((cbLight._m0[_2086].y * _2052) * _2095) * _2118);
    float _2129 = ((_2082 * cbLight._m0[_2076].z) * _2120) + (((cbLight._m0[_2086].z * _2053) * _2095) * _2118);
    uvec4 _2133 = floatBitsToUint(cbLight._m0[_2059 + 12u]);
    bool _2135 = _2133.x == 0u;
    float _2146;
    float _2148;
    float _2150;
    if (_2135)
    {
        _2146 = _2127;
        _2148 = _2128;
        _2150 = _2129;
    }
    else
    {
        uint _2154 = _2059 + 6u;
        float _2170 = (dot(vec3(cbLight._m0[_2059 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4390 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2173 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2146 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _2127;
        _2148 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _2128;
        _2150 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _2129;
    }
    bool _2153 = _2133.y == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2153)
    {
        _2191 = _2146;
        _2193 = _2148;
        _2195 = _2150;
    }
    else
    {
        uint _2364 = _2059 + 7u;
        float _2380 = (dot(vec3(cbLight._m0[_2059 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2381 = _2380 * _2380;
        float _4406 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2382 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2383 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2191 = (((cbLight._m0[_2364].x * 0.3183098733425140380859375) * _2382) * _2383) + _2146;
        _2193 = (((cbLight._m0[_2364].y * 0.3183098733425140380859375) * _2382) * _2383) + _2148;
        _2195 = (((cbLight._m0[_2364].z * 0.3183098733425140380859375) * _2382) * _2383) + _2150;
    }
    uint _2198 = _2059 + 8u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _794) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_2059].x + _872;
    float _2214 = cbLight._m0[_2059].y + _873;
    float _2215 = cbLight._m0[_2059].z + _874;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2059].xyz));
    float _4422 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2227 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2228 = dot(vec3(_791, _792, _793), vec3(_2220, _2221, _2222));
    float _4444 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2220, _2221, _2222));
    float _4455 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2212 * _2212;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2249 = 0.959999978542327880859375 - _953;
    float _2251 = 0.959999978542327880859375 - _954;
    float _2252 = 0.959999978542327880859375 - _955;
    float _2259 = 1.0 - _2212;
    float _2270 = (0.5 / (((_2227 * ((_2226 * _2259) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2259) + _2212) * _2226))) * _2226;
    float _4466 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    uint _2286 = _2059 + 9u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _794) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2099].x + _872;
    float _2300 = cbLight._m0[_2099].y + _873;
    float _2301 = cbLight._m0[_2099].z + _874;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2099].xyz));
    float _4477 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2313 = dot(vec3(_791, _792, _793), vec3(_2306, _2307, _2308));
    float _4488 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2306, _2307, _2308));
    float _4499 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2298 * _2298;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2339 = 1.0 - _2298;
    float _2349 = (0.5 / (((_2227 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2339) + _2298) * _2312))) * _2312;
    float _4510 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    float _2361 = (((((_2332 * _2249) + _956) * cbLight._m0[_2286].x) * _2351) * _2082) + ((((cbLight._m0[_2198].x * _2051) * ((_2248 * _2249) + _956)) * _2272) * _2095);
    float _2362 = (((((_2332 * _2251) + _958) * cbLight._m0[_2286].y) * _2351) * _2082) + ((((cbLight._m0[_2198].y * _2052) * ((_2248 * _2251) + _958)) * _2272) * _2095);
    float _2363 = (((((_2332 * _2252) + _959) * cbLight._m0[_2286].z) * _2351) * _2082) + ((((cbLight._m0[_2198].z * _2053) * ((_2248 * _2252) + _959)) * _2272) * _2095);
    float _2425;
    float _2427;
    float _2429;
    if (_2135)
    {
        _2425 = _2361;
        _2427 = _2362;
        _2429 = _2363;
    }
    else
    {
        uint _2431 = _2059 + 2u;
        uint _2435 = _2059 + 10u;
        float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _794) * 0.949999988079071044921875);
        float _2450 = _2449 * _2449;
        float _2451 = cbLight._m0[_2431].x + _872;
        float _2452 = cbLight._m0[_2431].y + _873;
        float _2453 = cbLight._m0[_2431].z + _874;
        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
        float _2458 = _2457 * _2451;
        float _2459 = _2457 * _2452;
        float _2460 = _2457 * _2453;
        float _2461 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2431].xyz));
        float _4521 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2465 = dot(vec3(_791, _792, _793), vec3(_2458, _2459, _2460));
        float _4532 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2469 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2458, _2459, _2460));
        float _4543 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2473 = _2450 * _2450;
        float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
        float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2491 = 1.0 - _2450;
        float _2501 = (0.5 / (((_2227 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2491) + _2450) * _2464))) * _2464;
        float _4554 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2425 = (((((_2484 * _2249) + _956) * cbLight._m0[_2435].x) * _2503) * _2504) + _2361;
        _2427 = (((((_2484 * _2251) + _958) * cbLight._m0[_2435].y) * _2503) * _2504) + _2362;
        _2429 = (((((_2484 * _2252) + _959) * cbLight._m0[_2435].z) * _2503) * _2504) + _2363;
    }
    float _2539;
    float _2541;
    float _2543;
    if (_2153)
    {
        _2539 = _2425;
        _2541 = _2427;
        _2543 = _2429;
    }
    else
    {
        uint _2550 = _2059 + 3u;
        uint _2554 = _2059 + 11u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _794) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _872;
        float _2571 = cbLight._m0[_2550].y + _873;
        float _2572 = cbLight._m0[_2550].z + _874;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2550].xyz));
        float _4570 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2584 = dot(vec3(_791, _792, _793), vec3(_2577, _2578, _2579));
        float _4581 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4592 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2610 = 1.0 - _2569;
        float _2620 = (0.5 / (((_2227 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2610) + _2569) * _2583))) * _2583;
        float _4603 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2539 = (((((_2603 * _2249) + _956) * cbLight._m0[_2554].x) * _2622) * _2623) + _2425;
        _2541 = (((((_2603 * _2251) + _958) * cbLight._m0[_2554].y) * _2622) * _2623) + _2427;
        _2543 = (((((_2603 * _2252) + _959) * cbLight._m0[_2554].z) * _2622) * _2623) + _2429;
    }
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_2057.y == 0u)
    {
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2698;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2698;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2698;
        uvec4 _2713 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2714 = _2713.x;
        uint _2725 = uint((float(_2713.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2714))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2714)));
        float _2735 = (log2(_2701 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2736 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        uint _2739 = uint(isnan(14.0) ? _2736 : (isnan(_2736) ? 14.0 : min(_2736, 14.0)));
        uvec4 _2744 = texelFetch(g_lightClusterGridBuffer, int(((_2739 << 2u) + (_2725 << 6u)) >> 2u));
        uint _2745 = _2744.x;
        uint _2746 = _2713.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2746 >> 4u) & 15u)) + 4294967295u) & _2745) == 0u) || ((_2746 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            uint _3041 = 0u;
            uint _3050;
            bool _3051;
            for (;;)
            {
                _3050 = texelFetch(g_lightClassification, int((((_2739 << 5u) + (_2725 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                _3051 = _3050 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3051)
                {
                    frontier_phi_66_pred = _3035;
                    frontier_phi_66_pred_1 = _3040;
                    frontier_phi_66_pred_2 = _3039;
                    frontier_phi_66_pred_3 = _3038;
                    frontier_phi_66_pred_4 = _3037;
                    frontier_phi_66_pred_5 = _3036;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3050;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3041 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _2699;
                        float _3247 = _3206.y - _2700;
                        float _3248 = _3206.z - _2701;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_912, _915, _918), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4629 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _2699;
                        float _3282 = (-0.0) - _2700;
                        float _3283 = (-0.0) - _2701;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3298 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _987;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_912, _915, _918), vec3(_3288, _3289, _3290));
                        float _4645 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3323 = dot(vec3(_912, _915, _918), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4656 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3266 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3256) + _3332;
                        float _4667 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4678 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3330 * _3330) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3110 = (_3277 * _3225.x) + _3183;
                        _3111 = (_3277 * _3225.y) + _3184;
                        _3112 = (_3277 * _3225.z) + _3185;
                        _3107 = (_3358 * _3242.x) + _3180;
                        _3108 = (_3358 * _3242.y) + _3181;
                        _3109 = (_3358 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_66_pred = _3107;
                    frontier_phi_66_pred_1 = _3112;
                    frontier_phi_66_pred_2 = _3111;
                    frontier_phi_66_pred_3 = _3110;
                    frontier_phi_66_pred_4 = _3109;
                    frontier_phi_66_pred_5 = _3108;
                }
                _2876 = frontier_phi_66_pred;
                _2886 = frontier_phi_66_pred_1;
                _2884 = frontier_phi_66_pred_2;
                _2882 = frontier_phi_66_pred_3;
                _2880 = frontier_phi_66_pred_4;
                _2878 = frontier_phi_66_pred_5;
                uint _3042 = _3041 + 1u;
                if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3035 = _2876;
                    _3036 = _2878;
                    _3037 = _2880;
                    _3038 = _2882;
                    _3039 = _2884;
                    _3040 = _2886;
                    _3041 = _3042;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((4294967295u << _2892) & _2745) == 0u)
        {
            _3003 = _2875;
            _3005 = _2877;
            _3007 = _2879;
            _3009 = _2881;
            _3011 = _2883;
            _3013 = _2885;
        }
        else
        {
            float _3028 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
            float _3029 = _3028 * _2699;
            float _3030 = _3028 * _2700;
            float _3031 = _3028 * _2701;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3163 = _2875;
                float _3164 = _2877;
                float _3165 = _2879;
                float _3166 = _2881;
                float _3167 = _2883;
                float _3168 = _2885;
                uint _3169 = _2892;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2739 << 5u) + (_2725 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3179)
                    {
                        frontier_phi_77_pred = _3168;
                        frontier_phi_77_pred_1 = _3167;
                        frontier_phi_77_pred_2 = _3166;
                        frontier_phi_77_pred_3 = _3165;
                        frontier_phi_77_pred_4 = _3164;
                        frontier_phi_77_pred_5 = _3163;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        uint _3391 = _3178;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3475;
                        float _3521;
                        bool _3522;
                        for (;;)
                        {
                            uint _3402 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3402 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3402 * 40u) + 24u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3496 = (_3402 * 40u) + 28u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3521 = fma(_2701, _3509.z, fma(_2700, _3509.y, _3509.x * _2699)) + _3509.w;
                            _3522 = !((fma(_2701, _3490.z, fma(_2700, _3490.y, _3490.x * _2699)) + _3490.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3522)
                            {
                                float _3549 = _3417.x - _2699;
                                float _3550 = _3417.y - _2700;
                                float _3551 = _3417.z - _2701;
                                float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                                float _3555 = inversesqrt(_3552);
                                float _3556 = _3555 * _3549;
                                float _3557 = _3555 * _3550;
                                float _3558 = _3555 * _3551;
                                float _3562 = 1.0 - (_3552 / (_3418 * _3418));
                                float _4689 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3567 = sqrt(_3552) * _3433.w;
                                float _3569 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                                float _3570 = _3569 * _3569;
                                float _3573 = ((1.0 - _3570) * dot(vec3(_3556, _3557, _3558), vec3(_912, _915, _918))) + _3570;
                                float _3576 = _3567 * _3567;
                                float _3580 = (fma(_2701, _3460.z, fma(_2700, _3460.y, _3460.x * _2699)) + _3460.w) / _3521;
                                float _3581 = (fma(_2701, _3475.z, fma(_2700, _3475.y, _3475.x * _2699)) + _3475.w) / _3521;
                                float _3585 = 1.0 - dot(vec2(_3580, _3581), vec2(_3580, _3581));
                                float _4705 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3587 = _3586 * (((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3563) / ((_3576 * 0.699999988079071044921875) + 1.0));
                                float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                                float _3600 = 1.0 - _987;
                                float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                                float _3608 = _3607 * _3607;
                                float _3609 = _3608 * _3608;
                                float _3610 = _3556 - _3029;
                                float _3611 = _3557 - _3030;
                                float _3612 = _3558 - _3031;
                                float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                                float _3620 = dot(vec3(_912, _915, _918), vec3((-0.0) - _3029, (-0.0) - _3030, (-0.0) - _3031));
                                float _4716 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3624 = dot(vec3(_912, _915, _918), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                                float _4727 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                                float _3632 = _3569 * _3608;
                                float _3633 = _3632 * _3632;
                                float _3639 = ((1.0 - _3633) * dot(vec3(_912, _915, _918), vec3(_3556, _3557, _3558))) + _3633;
                                float _4738 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3641 = 1.0 - _3608;
                                float _3651 = (0.5 / (((_3640 * ((_3623 * _3641) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3608) * _3623))) * _3640;
                                float _4749 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3661 = (_3586 * _3563) * (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3587 * _3433.y;
                                frontier_phi_83_pred_1 = _3587 * _3433.x;
                                frontier_phi_83_pred_2 = _3661 * _3445.z;
                                frontier_phi_83_pred_3 = _3661 * _3445.y;
                                frontier_phi_83_pred_4 = _3661 * _3445.x;
                                frontier_phi_83_pred_5 = _3587 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_83_pred;
                            _3668 = frontier_phi_83_pred_1;
                            _3667 = frontier_phi_83_pred_2;
                            _3666 = frontier_phi_83_pred_3;
                            _3665 = frontier_phi_83_pred_4;
                            _3670 = frontier_phi_83_pred_5;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3377;
                        frontier_phi_77_pred_1 = _3376;
                        frontier_phi_77_pred_2 = _3375;
                        frontier_phi_77_pred_3 = _3374;
                        frontier_phi_77_pred_4 = _3373;
                        frontier_phi_77_pred_5 = _3372;
                    }
                    _3014 = frontier_phi_77_pred;
                    _3012 = frontier_phi_77_pred_1;
                    _3010 = frontier_phi_77_pred_2;
                    _3008 = frontier_phi_77_pred_3;
                    _3006 = frontier_phi_77_pred_4;
                    _3004 = frontier_phi_77_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3004;
                        _3164 = _3006;
                        _3165 = _3008;
                        _3166 = _3010;
                        _3167 = _3012;
                        _3168 = _3014;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3008;
                frontier_phi_58_59_ladder_1 = _3014;
                frontier_phi_58_59_ladder_2 = _3012;
                frontier_phi_58_59_ladder_3 = _3010;
                frontier_phi_58_59_ladder_4 = _3006;
                frontier_phi_58_59_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_58_59_ladder = _2879;
                frontier_phi_58_59_ladder_1 = _2885;
                frontier_phi_58_59_ladder_2 = _2883;
                frontier_phi_58_59_ladder_3 = _2881;
                frontier_phi_58_59_ladder_4 = _2877;
                frontier_phi_58_59_ladder_5 = _2875;
            }
            _3003 = frontier_phi_58_59_ladder_5;
            _3005 = frontier_phi_58_59_ladder_4;
            _3007 = frontier_phi_58_59_ladder;
            _3009 = frontier_phi_58_59_ladder_3;
            _3011 = frontier_phi_58_59_ladder_2;
            _3013 = frontier_phi_58_59_ladder_1;
        }
        float _3018 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _2758 = (_3018 * _3009) + _2191;
        _2760 = (_3018 * _3011) + _2193;
        _2762 = (_3018 * _3013) + _2195;
        _2764 = ((_3003 * _956) * _3018) + _2539;
        _2766 = ((_3005 * _958) * _3018) + _2541;
        _2768 = ((_3007 * _959) * _3018) + _2543;
    }
    else
    {
        _2758 = _2191;
        _2760 = _2193;
        _2762 = _2195;
        _2764 = _2539;
        _2766 = _2541;
        _2768 = _2543;
    }
    uint _2774 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _2780 = cbInstanceData._m0[_2774].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_516.x - _513) * _494) + _513)) - _753) * _763) + _753);
    float _2781 = cbInstanceData._m0[_2774].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_516.y - _514) * _494) + _514)) - _754) * _763) + _754);
    float _2782 = cbInstanceData._m0[_2774].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_516.z - _515) * _494) + _515)) - _755) * _763) + _755);
    float _4765 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4776 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4787 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2799 = (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2758 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _971))) + ((_2764 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + _2780;
    float _2801 = (_2781 + ((_2766 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2760 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _971)));
    float _2803 = (_2782 + ((_2768 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2762 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _971)));
    float _2804 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2805 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2806 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2812 = cbMtdParam._m0[2u].x * _2780;
    float _2813 = cbMtdParam._m0[2u].y * _2781;
    float _2814 = cbMtdParam._m0[2u].z * _2782;
    float _4813 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2816 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    uint _2817 = _931 + 6u;
    float _2825 = _893 / cbSceneParam._m0[86u].x;
    float _2826 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2901 = _2900 / _814;
        float _2912 = _2901 * _865;
        float _2913 = _866 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2915 = _2901 * _867;
        float _2917 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2913;
        float _2925 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2914 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3064 = 1.0 / cbSceneParam._m0[80u].x;
            float _3065 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3066 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            _3120 = ((abs(_2925 / _2914) * cbSceneParam._m0[80u].y) * ((((_3075 - _3076) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))))) * _3064)) - ((exp2(_2935 * _3075) - exp2(_2935 * _3076)) * _3064))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2845);
        _2937 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2939 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2941 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2943 = _3131 * _2845;
    }
    else
    {
        _2937 = _2842;
        _2939 = _2843;
        _2941 = _2844;
        _2943 = _2845;
    }
    bool _3158;
    vec4 _2952;
    vec4 _2974;
    float _2976;
    float _2980;
    float _2981;
    float _2982;
    float _2985;
    float _2988;
    float _2991;
    float _2992;
    bool _3002;
    for (;;)
    {
        _2952 = cbMatDynParam._m0[0u];
        float _2954 = roundEven(_2952.y);
        bool _2955 = _2954 == 3.0;
        float _2956 = log2(_2943);
        float _2960 = exp2(_2956 * cbSceneParam._m0[78u].x);
        float _2961 = exp2(_2956 * cbSceneParam._m0[78u].y);
        float _2962 = exp2(_2956 * cbSceneParam._m0[78u].z);
        float _2963 = _2960 * _2804;
        float _2964 = _2961 * _2805;
        float _2965 = _2962 * _2806;
        float _2972 = _881 + (-0.5);
        _2974 = cbMtdParam._m0[1u];
        _2976 = _2974.y * _2972;
        float _2979 = (_2954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2980 = _2979 * (_2955 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2937)));
        _2981 = _2979 * (_2955 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2939)));
        _2982 = _2979 * (_2955 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2941)));
        _2985 = ((_2812 * _2816) * _2960) * _2979;
        _2988 = ((_2813 * _2816) * _2961) * _2979;
        _2991 = ((_2814 * _2816) * _2962) * _2979;
        _2992 = _2972 * 0.999000012874603271484375;
        _3002 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3002)
        {
            if ((cbInstanceData._m0[_931 + 7u].x + _2992) < 0.5)
            {
                _3158 = true;
                break;
            }
        }
        uint _3099 = _932 + uint(_2952.w);
        if ((cbInstanceData._m0[_3099].w < 1.0) && ((cbInstanceData._m0[_3099].w + _2992) < 0.5))
        {
            _3158 = true;
            break;
        }
        if ((_2976 + 1.0) < _2974.x)
        {
            _3158 = true;
            break;
        }
        _3158 = false;
        break;
    }
    float _3363;
    if (_3158)
    {
        discard_state = true;
        _3363 = 0.0;
    }
    else
    {
        _3363 = cbInstanceData._m0[_2817].w;
    }
    SV_Target.x = _2980;
    SV_Target.y = _2981;
    SV_Target.z = _2982;
    SV_Target.w = _3363;
    SV_Target_1.x = _2985;
    SV_Target_1.y = _2988;
    SV_Target_1.z = _2991;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
    discard_exit();
}


