#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_24;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 6) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 8) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_22;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1576;
float _3992;
float _3993;
float _3994;
float _3995;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[8u].w));
    vec4 _339 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _368 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w));
    float _391 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625;
    float _399 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * _391)) * (cbMtdParam._m0[17u].w + 1.0);
    float _4004 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _407 = (_400 * ((_368.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _408 = (_400 * ((_368.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _409 = (_400 * ((_368.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    float _415 = (TEXCOORD_9.x - ((cbMtdParam._m0[19u].y * (1.0 - TEXCOORD_9.x)) * _391)) * (cbMtdParam._m0[19u].x + 1.0);
    float _4015 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _423 = (((_339.x * cbMtdParam._m0[14u].x) - _407) * _416) + _407;
    float _424 = (((_339.y * cbMtdParam._m0[14u].y) - _408) * _416) + _408;
    float _425 = (((_339.z * cbMtdParam._m0[14u].z) - _409) * _416) + _409;
    float _441 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    float _446 = 1.0 - _441;
    float _449 = cbMtdParam._m0[20u].x + 1.0;
    float _450 = (_441 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * _446)) * _449;
    float _4026 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _458 = (_451 * ((_311.x * cbMtdParam._m0[15u].x) - _423)) + _423;
    float _459 = (_451 * ((_311.y * cbMtdParam._m0[15u].y) - _424)) + _424;
    float _460 = (_451 * ((_311.z * cbMtdParam._m0[15u].z) - _425)) + _425;
    vec4 _473 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _475 = _473.x;
    float _493 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _475) * _400) + _475;
    float _495 = _493 - (_493 * _416);
    float _499 = (_441 - ((_391 * cbMtdParam._m0[19u].w) * _446)) * _449;
    float _4037 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = _495 - (_495 * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))));
    vec4 _518 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _540 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _556 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _560 = _556.z;
    float _569 = ((_540.z - _560) * _400) + _560;
    float _572 = ((((_540.x - _558) * _400) + _558) * 2.0) + (-1.0);
    float _573 = ((((_540.y - _559) * _400) + _559) * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _4048 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))));
    float _584 = (((_518.z - _569) * TEXCOORD_9.x) * cbMtdParam._m0[19u].z) + _569;
    vec4 _597 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[10u].w));
    float _614 = (((((((_597.z - _584) * TEXCOORD_15) * cbMtdParam._m0[21u].y) + _584) * cbMtdParam._m0[21u].z) - _584) * _451) + _584;
    float _630 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _633 = (_630 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _634 = (_630 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _659 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _663 = cbPerFrame._m0[22u].x * 2.0;
    float _664 = _663 * cbMtdParam._m0[22u].y;
    float _671 = ((_659.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _673 = (-0.0) - (cbMtdParam._m0[22u].x * ((_659.x * 0.5) + (-0.25)));
    float _675 = fract(_664);
    float _677 = fract(_664 + 0.5);
    float _688 = abs((_675 * 2.0) + (-1.0));
    vec4 _705 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_675 * _673) + _633) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_671 * _675) + _634) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _709 = _705.z;
    vec4 _710 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_677 * _673) + _633) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_671 * _677) + _634) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _752 = (cbMtdParam._m0[23u].y * _630) + TEXCOORD_6.w;
    float _753 = (cbMtdParam._m0[23u].z * _630) + TEXCOORD_9.w;
    vec4 _766 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _770 = _663 * cbMtdParam._m0[18u].x;
    float _775 = ((_766.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _777 = (-0.0) - (cbMtdParam._m0[20u].z * ((_766.x * 0.5) + (-0.25)));
    float _778 = fract(_770);
    float _780 = fract(_770 + 0.5);
    float _781 = _778 * _777;
    float _782 = _775 * _778;
    float _785 = _780 * _777;
    float _786 = _775 * _780;
    float _791 = abs((_778 * 2.0) + (-1.0));
    vec4 _807 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_781 + _752) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_782 + _753) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _809 = _807.x;
    float _810 = _807.y;
    float _811 = _807.z;
    vec4 _812 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_785 + _752) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_786 + _753) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _842 = (cbMtdParam._m0[22u].w * _630) + TEXCOORD_6.w;
    float _843 = (cbMtdParam._m0[23u].x * _630) + TEXCOORD_9.w;
    vec4 _863 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_781 + _842) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_782 + _843) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _865 = _863.x;
    float _866 = _863.y;
    float _867 = _863.z;
    vec4 _868 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_785 + _842) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_786 + _843) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _888 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4059 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _889 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _899 = (((_889 * _889) * (3.0 - (_889 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _932 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _842) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _843) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4070 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _933 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _937 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_868.x - _865) * _791) + _865)) * _899) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_812.x - _809) * _791) + _809)))) * _933;
    float _941 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_868.y - _866) * _791) + _866)) * _899) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_812.y - _810) * _791) + _810)))) * _933;
    float _945 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_868.z - _867) * _791) + _867)) * _899) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_812.z - _811) * _791) + _811)))) * _933;
    float _949 = _937 - (_937 * _441);
    float _950 = _941 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _941);
    float _951 = _945 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _945);
    float _980 = ((((((_518.x * 2.0) + (-1.0)) * TEXCOORD_9.x) * cbMtdParam._m0[18u].z) + _572) + (cbMtdParam._m0[20u].y * _572)) + (((((_597.x * 2.0) + (-1.0)) * TEXCOORD_15) * cbMtdParam._m0[21u].x) * _451);
    float _983 = ((((((_518.y * 2.0) + (-1.0)) * TEXCOORD_9.y) * cbMtdParam._m0[18u].z) + _573) + (cbMtdParam._m0[20u].y * _573)) + (((((_597.y * 2.0) + (-1.0)) * TEXCOORD_16) * cbMtdParam._m0[21u].x) * _451);
    float _986 = fma(_579, _247 * NORMAL.x, fma(_983, _254 * TANGENT.x, (_240 * _232) * _980));
    float _989 = fma(_579, _247 * NORMAL.y, fma(_983, _254 * TANGENT.y, (_240 * _233) * _980));
    float _992 = fma(_579, _247 * NORMAL.z, fma(_983, _254 * TANGENT.z, (_240 * _234) * _980));
    float _996 = inversesqrt(dot(vec3(_986, _989, _992), vec3(_986, _989, _992)));
    float _997 = _996 * _986;
    float _998 = _996 * _989;
    float _999 = _996 * _992;
    float _4081 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1000 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4103 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4114 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4125 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _1004 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1020 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1070 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1060);
    float _1071 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1060);
    float _1072 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1060);
    float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
    float _1077 = _1070 * _1076;
    float _1078 = _1071 * _1076;
    float _1079 = _1072 * _1076;
    vec4 _1084 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1086 = _1084.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1257 = sqrt(((_1070 * _1070) + (_1071 * _1071)) + (_1072 * _1072));
        float _1263 = (cbMatDynParam._m0[5u].x * _1257) + cbMatDynParam._m0[5u].y;
        float _4136 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1268 = (cbMatDynParam._m0[5u].z * _1257) + cbMatDynParam._m0[5u].w;
        float _4147 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) - _1264)) + _1264) < ((_1086 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1097 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1098 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1116 = fma(_999, cbSceneParam._m0[5u].z, fma(_998, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _997));
    float _1119 = fma(_999, cbSceneParam._m0[6u].z, fma(_998, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _997));
    float _1122 = fma(_999, cbSceneParam._m0[7u].z, fma(_998, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _997));
    uint _1135 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1136 = _1135 + 9u;
    uint _1137 = _1136 + uint(cbMatDynParam._m0[0u].w);
    float _1143 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_1137].x;
    float _1144 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_1137].y;
    float _1145 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_1137].z;
    float _4158 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _1149 = 1.0 - _1004;
    float _1150 = _1146 * _1149;
    float _1151 = _1147 * _1149;
    float _1152 = _1148 * _1149;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1004;
    float _1158 = (_1147 + (-0.039999999105930328369140625)) * _1004;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1004;
    float _1160 = _1157 + 0.039999999105930328369140625;
    float _1162 = _1158 + 0.039999999105930328369140625;
    float _1163 = _1159 + 0.039999999105930328369140625;
    vec4 _1172 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1097, cbSceneParam._m0[86u].y * _1098));
    float _1175 = _1172.x * TEXCOORD_3.w;
    float _1176 = dot(vec3(_997, _998, _999), vec3(_1077, _1078, _1079));
    float _1179 = _1176 * 2.0;
    float _1183 = (_1179 * _997) - _1077;
    float _1184 = (_1179 * _998) - _1078;
    float _1185 = (_1179 * _999) - _1079;
    float _1189 = abs(dot(vec3(_1077, _1078, _1079), vec3(_997, _998, _999)));
    float _4191 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1191 = sqrt(_1000);
    float _1203 = exp2((_1191 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1191 * 3.0));
    float _1209 = (1.0 - _1203) * ((_1191 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1210 = _1203 * _1191;
    float _1238 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1575;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1301 = fma(_1246, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238));
        float _1305 = fma(_1246, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238));
        float _1309 = fma(_1246, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238));
        float _1333 = _1238 + _997;
        float _1334 = _1242 + _998;
        float _1335 = _1246 + _999;
        float _1345 = fma(_1335, cbModelParam._m0[26u].z, fma(_1334, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1333)) - _1301;
        float _1346 = fma(_1335, cbModelParam._m0[27u].z, fma(_1334, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1333)) - _1305;
        float _1347 = fma(_1335, cbModelParam._m0[28u].z, fma(_1334, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1333)) - _1309;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1301 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1305 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[34u].z) + ((((((_1309 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1403 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1369.x + (-0.5));
        float _1405 = _1403 * (_1369.y + (-0.5));
        float _1406 = _1403 * (_1369.z + (-0.5));
        float _1413 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1376.x + (-0.5));
        float _1415 = _1413 * (_1376.y + (-0.5));
        float _1416 = _1413 * (_1376.z + (-0.5));
        float _1423 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1383.x + (-0.5));
        float _1425 = _1423 * (_1383.y + (-0.5));
        float _1426 = _1423 * (_1383.z + (-0.5));
        float _1433 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1390.x + (-0.5));
        float _1435 = _1433 * (_1390.y + (-0.5));
        float _1436 = _1433 * (_1390.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1457 = (dot(vec3(_997, _998, _999), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1467 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4239 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1469 + 1.0))) + _1474) * _1437;
        float _1484 = _1405 * 0.5;
        float _1485 = _1415 * 0.5;
        float _1486 = _1425 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_997, _998, _999), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4272 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1511 + 1.0))) + _1516) * _1438;
        float _1526 = _1406 * 0.5;
        float _1527 = _1416 * 0.5;
        float _1528 = _1426 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_997, _998, _999), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4305 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1553 + 1.0))) + _1558) * _1439;
        _1575 = _1406;
        _1577 = _1405;
        _1578 = _1404;
        _1579 = _1416;
        _1580 = _1415;
        _1581 = _1414;
        _1582 = _1426;
        _1583 = _1425;
        _1584 = _1424;
        _1585 = _1439;
        _1586 = _1438;
        _1587 = _1437;
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1576;
        _1577 = _1576;
        _1578 = _1576;
        _1579 = _1576;
        _1580 = _1576;
        _1581 = _1576;
        _1582 = _1576;
        _1583 = _1576;
        _1584 = _1576;
        _1585 = _1576;
        _1586 = _1576;
        _1587 = _1576;
        _1588 = 0.0;
        _1589 = 0.0;
        _1590 = 0.0;
    }
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1619 = fma(_1246, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238));
        float _1623 = fma(_1246, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238));
        float _1627 = fma(_1246, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238));
        float _1650 = _1238 + _997;
        float _1651 = _1242 + _998;
        float _1652 = _1246 + _999;
        float _1662 = fma(_1652, cbModelParam._m0[30u].z, fma(_1651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1650)) - _1619;
        float _1663 = fma(_1652, cbModelParam._m0[31u].z, fma(_1651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1650)) - _1623;
        float _1664 = fma(_1652, cbModelParam._m0[32u].z, fma(_1651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1650)) - _1627;
        float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
        float _1681 = ((_1668 * _1662) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1619 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1682 = ((_1668 * _1663) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1623 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1668 * _1664) / cbModelParam._m0[35u].z) + ((((((_1627 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        float _1718 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1685.x + (-0.5));
        float _1720 = _1718 * (_1685.y + (-0.5));
        float _1721 = _1718 * (_1685.z + (-0.5));
        float _1728 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1692.x + (-0.5));
        float _1730 = _1728 * (_1692.y + (-0.5));
        float _1731 = _1728 * (_1692.z + (-0.5));
        float _1738 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1699.x + (-0.5));
        float _1740 = _1738 * (_1699.y + (-0.5));
        float _1741 = _1738 * (_1699.z + (-0.5));
        float _1748 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1706.x + (-0.5));
        float _1750 = _1748 * (_1706.y + (-0.5));
        float _1751 = _1748 * (_1706.z + (-0.5));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = _1719 * 0.5;
        float _1756 = _1729 * 0.5;
        float _1757 = _1739 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_997, _998, _999), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4368 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1782 + 1.0))) + _1787) * _1752;
        float _1797 = _1720 * 0.5;
        float _1798 = _1730 * 0.5;
        float _1799 = _1740 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_997, _998, _999), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4401 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1824 + 1.0))) + _1829) * _1753;
        float _1839 = _1721 * 0.5;
        float _1840 = _1731 * 0.5;
        float _1841 = _1741 * 0.5;
        float _1842 = dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841));
        float _1847 = (_1842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1842);
        float _1855 = (dot(vec3(_997, _998, _999), vec3(_1847 * _1839, _1847 * _1840, _1847 * _1841)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1866 = _1865 * 2.0;
        float _1870 = (1.0 - _1865) / (_1865 + 1.0);
        float _4434 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1880 = ((((1.0 - _1871) * (_1866 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1866 + 1.0))) + _1871) * _1754;
        _1888 = _1721;
        _1889 = _1720;
        _1890 = _1719;
        _1891 = _1731;
        _1892 = _1730;
        _1893 = _1729;
        _1894 = _1741;
        _1895 = _1740;
        _1896 = _1739;
        _1897 = _1754;
        _1898 = _1753;
        _1899 = _1752;
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)));
    }
    else
    {
        _1888 = _1576;
        _1889 = _1576;
        _1890 = _1576;
        _1891 = _1576;
        _1892 = _1576;
        _1893 = _1576;
        _1894 = _1576;
        _1895 = _1576;
        _1896 = _1576;
        _1897 = _1576;
        _1898 = _1576;
        _1899 = _1576;
        _1900 = 0.0;
        _1901 = 0.0;
        _1902 = 0.0;
    }
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1588)) + _1588;
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1589)) + _1589;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1590)) + _1590;
    float _1935 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1912));
    float _1956 = _1183 * 0.5;
    float _1957 = _1184 * 0.5;
    float _1958 = _1185 * 0.5;
    float _1959 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1962 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _1965 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1999;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1972 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1575, _1579, _1582, _1585));
        float _1976 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1577, _1580, _1583, _1586));
        float _1980 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1987 = dot(vec4(cbModelParam._m0[39u]), vec4(_1956, _1957, _1958, 1.0));
        _1999 = dot(vec3(isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1987) ? 0.0 : (isnan(0.0) ? _1987 : max(0.0, _1987))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1999 = 1.0;
    }
    float _2010;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2001 = dot(vec4(cbModelParam._m0[40u]), vec4(_1956, _1957, _1958, 1.0));
        _2010 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2001) ? 0.0 : (isnan(0.0) ? _2001 : max(0.0, _2001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2010 = 1.0;
    }
    float _2014 = (_2010 * cbModelParam._m0[1u].x) + (_1999 * (1.0 - cbModelParam._m0[1u].x));
    float _2024 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1000);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2024 : min(cbModelParam._m0[25u].z, _2024));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2072 = fma(_1246, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1238)) + cbModelParam._m0[13u].w;
        float _2076 = fma(_1246, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1238)) + cbModelParam._m0[14u].w;
        float _2080 = fma(_1246, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1238)) + cbModelParam._m0[15u].w;
        float _2083 = fma(_1185, cbModelParam._m0[13u].z, fma(_1184, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1183));
        float _2086 = fma(_1185, cbModelParam._m0[14u].z, fma(_1184, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1183));
        float _2089 = fma(_1185, cbModelParam._m0[15u].z, fma(_1184, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1183));
        float _2117;
        if (_2083 > 0.0)
        {
            _2117 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2117 = frontier_phi_17_15_ladder;
        }
        float _2319;
        if (_2086 > 0.0)
        {
            _2319 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2319 = frontier_phi_26_22_ladder;
        }
        float _2573;
        if (_2089 > 0.0)
        {
            _2573 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2573 = frontier_phi_38_33_ladder;
        }
        float _2575 = isnan(_2319) ? _2117 : (isnan(_2117) ? _2319 : min(_2117, _2319));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _2083) + _2072;
        float _2581 = (_2576 * _2086) + _2076;
        float _2582 = (_2576 * _2089) + _2080;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2583;
        float _2587 = _2583 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 > _2587) || ((_2581 < _2585) || ((_2580 < _2585) || (_2580 > _2587))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2582, cbModelParam._m0[9u].z, fma(_2581, cbModelParam._m0[9u].y, _2580 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2582, cbModelParam._m0[10u].z, fma(_2581, cbModelParam._m0[10u].y, _2580 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2582, cbModelParam._m0[11u].z, fma(_2581, cbModelParam._m0[11u].y, _2580 * cbModelParam._m0[11u].x))), _2025);
            frontier_phi_16_38_ladder = _2710.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2710.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2710.x * cbModelParam._m0[1u].y;
        }
        _2105 = frontier_phi_16_38_ladder_2;
        _2107 = frontier_phi_16_38_ladder_1;
        _2109 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1183, _1184, _1185), _2025);
        _2105 = _2093.x * cbModelParam._m0[1u].y;
        _2107 = _2093.y * cbModelParam._m0[1u].y;
        _2109 = _2093.z * cbModelParam._m0[1u].y;
    }
    float _2113 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1000);
    float _2114 = isnan(_2113) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2113 : min(cbModelParam._m0[25u].w, _2113));
    float _2203;
    float _2205;
    float _2207;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2167 = fma(_1246, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1238)) + cbModelParam._m0[21u].w;
        float _2171 = fma(_1246, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1238)) + cbModelParam._m0[22u].w;
        float _2175 = fma(_1246, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1238)) + cbModelParam._m0[23u].w;
        float _2178 = fma(_1185, cbModelParam._m0[21u].z, fma(_1184, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1183));
        float _2181 = fma(_1185, cbModelParam._m0[22u].z, fma(_1184, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1183));
        float _2184 = fma(_1185, cbModelParam._m0[23u].z, fma(_1184, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1183));
        float _2324;
        if (_2178 > 0.0)
        {
            _2324 = abs((1.0 - _2167) / _2178);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2167 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2324 = frontier_phi_28_24_ladder;
        }
        float _2600;
        if (_2181 > 0.0)
        {
            _2600 = abs((1.0 - _2171) / _2181);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2171 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2600 = frontier_phi_40_35_ladder;
        }
        float _2813;
        if (_2184 > 0.0)
        {
            _2813 = abs((1.0 - _2175) / _2184);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2175 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2813 = frontier_phi_49_46_ladder;
        }
        float _2815 = isnan(_2600) ? _2324 : (isnan(_2324) ? _2600 : min(_2324, _2600));
        float _2816 = isnan(_2813) ? _2815 : (isnan(_2815) ? _2813 : min(_2815, _2813));
        float _2820 = (_2816 * _2178) + _2167;
        float _2821 = (_2816 * _2181) + _2171;
        float _2822 = (_2816 * _2184) + _2175;
        float _2823 = _2816 * 9.9999997473787516355514526367188e-05;
        float _2824 = (-1.0) - _2823;
        float _2826 = _2823 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2822 > _2826) || ((_2822 < _2824) || ((_2821 > _2826) || ((_2821 < _2824) || ((_2820 < _2824) || (_2820 > _2826))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2822, cbModelParam._m0[17u].z, fma(_2821, cbModelParam._m0[17u].y, _2820 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2822, cbModelParam._m0[18u].z, fma(_2821, cbModelParam._m0[18u].y, _2820 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2822, cbModelParam._m0[19u].z, fma(_2821, cbModelParam._m0[19u].y, _2820 * cbModelParam._m0[19u].x))), _2114);
            frontier_phi_25_49_ladder = _3050.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3050.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3050.x * cbModelParam._m0[1u].z;
        }
        _2203 = frontier_phi_25_49_ladder_2;
        _2205 = frontier_phi_25_49_ladder_1;
        _2207 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2187 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1183, _1184, _1185), _2114);
        _2203 = _2187.x * cbModelParam._m0[1u].z;
        _2205 = _2187.y * cbModelParam._m0[1u].z;
        _2207 = _2187.z * cbModelParam._m0[1u].z;
    }
    float _2220 = (((_1209 * _1160) + _1210) * _1175) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2222 = (((_1209 * _1162) + _1210) * _1175) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1209 * _1163) + _1210) * _1175) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2227 = fma(_2224, cbSceneParam._m0[89u].z, fma(_2222, cbSceneParam._m0[89u].y, _2220 * cbSceneParam._m0[89u].x));
    float _2230 = fma(_2224, cbSceneParam._m0[90u].z, fma(_2222, cbSceneParam._m0[90u].y, _2220 * cbSceneParam._m0[90u].x));
    float _2233 = fma(_2224, cbSceneParam._m0[91u].z, fma(_2222, cbSceneParam._m0[91u].y, _2220 * cbSceneParam._m0[91u].x));
    uvec4 _2243 = floatBitsToUint(cbInstanceData._m0[_1135 + 5u]);
    uint _2245 = _2243.x * 14u;
    uint _2246 = _2245 + 13u;
    float _2253 = _1175 + (-1.0);
    float _2258 = (cbLight._m0[_2246].x * _2253) + 1.0;
    float _2259 = (cbLight._m0[_2246].y * _2253) + 1.0;
    float _2260 = (cbLight._m0[_2246].z * _2253) + 1.0;
    float _2261 = (cbLight._m0[_2246].w * _2253) + 1.0;
    uint _2262 = _2245 + 5u;
    float _2268 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2272 = _2245 + 4u;
    float _2278 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2282 = _2245 | 1u;
    float _2293 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_997, _998, _999));
    float _2296 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_997, _998, _999));
    float _4570 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _4581 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2301 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.3183098733425140380859375;
    float _2303 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * 0.3183098733425140380859375;
    float _2310 = ((cbLight._m0[_2262].x * _2268) * _2303) + ((cbLight._m0[_2272].x * _2278) * _2301);
    float _2311 = ((_2268 * cbLight._m0[_2262].y) * _2303) + ((_2278 * cbLight._m0[_2272].y) * _2301);
    float _2312 = ((_2268 * cbLight._m0[_2262].z) * _2303) + ((_2278 * cbLight._m0[_2272].z) * _2301);
    uvec4 _2316 = floatBitsToUint(cbLight._m0[_2245 + 12u]);
    bool _2318 = _2316.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2318)
    {
        _2329 = _2310;
        _2331 = _2311;
        _2333 = _2312;
    }
    else
    {
        uint _2337 = _2245 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2245 + 2u].xyz), vec3(_997, _998, _999)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4592 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2356 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2310;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2311;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2312;
    }
    bool _2336 = _2316.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2336)
    {
        _2374 = _2329;
        _2376 = _2331;
        _2378 = _2333;
    }
    else
    {
        uint _2544 = _2245 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2245 + 3u].xyz), vec3(_997, _998, _999)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4608 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2563 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2374 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2329;
        _2376 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2331;
        _2378 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2333;
    }
    uint _2381 = _2245 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _1000) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2245].x + _1077;
    float _2397 = cbLight._m0[_2245].y + _1078;
    float _2398 = cbLight._m0[_2245].z + _1079;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2245].xyz));
    float _4624 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _4635 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _2410 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2411 = dot(vec3(_997, _998, _999), vec3(_2403, _2404, _2405));
    float _4646 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2403, _2404, _2405));
    float _4657 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
    float _2432 = 0.959999978542327880859375 - _1157;
    float _2434 = 0.959999978542327880859375 - _1158;
    float _2435 = 0.959999978542327880859375 - _1159;
    float _2442 = 1.0 - _2395;
    float _2453 = (0.5 / (((_2410 * ((_2409 * _2442) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2442) + _2395) * _2409))) * _2409;
    float _4668 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2466 = _2245 + 9u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _1000) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2282].x + _1077;
    float _2480 = cbLight._m0[_2282].y + _1078;
    float _2481 = cbLight._m0[_2282].z + _1079;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2282].xyz));
    float _4679 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2493 = dot(vec3(_997, _998, _999), vec3(_2486, _2487, _2488));
    float _4690 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2486, _2487, _2488));
    float _4701 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2478 * _2478;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2519 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2410 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2519) + _2478) * _2492))) * _2492;
    float _4712 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    float _2541 = (((((_2512 * _2432) + _1160) * cbLight._m0[_2466].x) * _2531) * _2268) + (((((_2431 * _2432) + _1160) * cbLight._m0[_2381].x) * _2455) * _2278);
    float _2542 = (((((_2512 * _2434) + _1162) * cbLight._m0[_2466].y) * _2531) * _2268) + (((((_2431 * _2434) + _1162) * cbLight._m0[_2381].y) * _2455) * _2278);
    float _2543 = (((((_2512 * _2435) + _1163) * cbLight._m0[_2466].z) * _2531) * _2268) + (((((_2431 * _2435) + _1163) * cbLight._m0[_2381].z) * _2455) * _2278);
    float _2605;
    float _2607;
    float _2609;
    if (_2318)
    {
        _2605 = _2541;
        _2607 = _2542;
        _2609 = _2543;
    }
    else
    {
        uint _2611 = _2245 + 2u;
        uint _2615 = _2245 + 10u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _1000) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _1077;
        float _2632 = cbLight._m0[_2611].y + _1078;
        float _2633 = cbLight._m0[_2611].z + _1079;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2611].xyz));
        float _4723 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2645 = dot(vec3(_997, _998, _999), vec3(_2638, _2639, _2640));
        float _4734 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4745 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2410 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2671) + _2630) * _2644))) * _2644;
        float _4756 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2605 = (((((_2664 * _2432) + _1160) * cbLight._m0[_2615].x) * _2683) * _2684) + _2541;
        _2607 = (((((_2664 * _2434) + _1162) * cbLight._m0[_2615].y) * _2683) * _2684) + _2542;
        _2609 = (((((_2664 * _2435) + _1163) * cbLight._m0[_2615].z) * _2683) * _2684) + _2543;
    }
    float _2719;
    float _2721;
    float _2723;
    if (_2336)
    {
        _2719 = _2605;
        _2721 = _2607;
        _2723 = _2609;
    }
    else
    {
        uint _2730 = _2245 + 3u;
        uint _2734 = _2245 + 11u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _1000) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _1077;
        float _2751 = cbLight._m0[_2730].y + _1078;
        float _2752 = cbLight._m0[_2730].z + _1079;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2730].xyz));
        float _4772 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2764 = dot(vec3(_997, _998, _999), vec3(_2757, _2758, _2759));
        float _4783 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4794 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
        float _2790 = 1.0 - _2749;
        float _2800 = (0.5 / (((_2410 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2790) + _2749) * _2763))) * _2763;
        float _4805 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2719 = (((((_2783 * _2432) + _1160) * cbLight._m0[_2734].x) * _2802) * _2803) + _2605;
        _2721 = (((((_2783 * _2434) + _1162) * cbLight._m0[_2734].y) * _2802) * _2803) + _2607;
        _2723 = (((((_2783 * _2435) + _1163) * cbLight._m0[_2734].z) * _2802) * _2803) + _2609;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2243.y == 0u)
    {
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2878;
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2878;
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2878;
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1098) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _1097) / _2894)));
        float _2915 = (log2(_2881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            uint _3221 = 0u;
            uint _3230;
            bool _3231;
            for (;;)
            {
                _3230 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                _3231 = _3230 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3231)
                {
                    frontier_phi_66_pred = _3215;
                    frontier_phi_66_pred_1 = _3220;
                    frontier_phi_66_pred_2 = _3219;
                    frontier_phi_66_pred_3 = _3218;
                    frontier_phi_66_pred_4 = _3217;
                    frontier_phi_66_pred_5 = _3216;
                }
                else
                {
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    uint _3366;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3230;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    for (;;)
                    {
                        uint _3370 = uint(findLSB(_3366)) + (_3221 << 5u);
                        uint _3367 = (_3366 + 4294967295u) & _3366;
                        uint _3372 = _3370 * 48u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3392 = (_3370 * 48u) + 4u;
                        vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3411 = (_3370 * 48u) + 8u;
                        vec3 _3422 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x));
                        float _3426 = _3386.x - _2879;
                        float _3427 = _3386.y - _2880;
                        float _3428 = _3386.z - _2881;
                        float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                        float _3432 = inversesqrt(_3429);
                        float _3433 = _3432 * _3426;
                        float _3434 = _3432 * _3427;
                        float _3435 = _3432 * _3428;
                        float _3436 = dot(vec3(_1116, _1119, _1122), vec3(_3433, _3434, _3435));
                        float _3441 = 1.0 - (_3429 * _3386.w);
                        float _4831 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3443 = sqrt(_3429) * _3405.w;
                        float _3446 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3436) + _3447;
                        float _3453 = _3443 * _3443;
                        float _3457 = ((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3442) / ((_3453 * 0.699999988079071044921875) + 1.0);
                        float _3461 = (-0.0) - _2879;
                        float _3462 = (-0.0) - _2880;
                        float _3463 = (-0.0) - _2881;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3468 = _3467 * _3461;
                        float _3469 = _3467 * _3462;
                        float _3470 = _3467 * _3463;
                        float _3478 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                        float _3479 = 1.0 - _1191;
                        float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                        float _3487 = _3486 * _3486;
                        float _3488 = _3487 * _3487;
                        float _3489 = _3468 + _3433;
                        float _3490 = _3469 + _3434;
                        float _3491 = _3470 + _3435;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3499 = dot(vec3(_1116, _1119, _1122), vec3(_3468, _3469, _3470));
                        float _4847 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3503 = dot(vec3(_1116, _1119, _1122), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                        float _4858 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                        float _3511 = _3446 * _3487;
                        float _3512 = _3511 * _3511;
                        float _3515 = ((1.0 - _3512) * _3436) + _3512;
                        float _4869 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3516 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3517 = 1.0 - _3487;
                        float _3527 = (0.5 / (((_3516 * ((_3502 * _3517) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3487) * _3502))) * _3516;
                        float _4880 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3538 = (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3510 * _3510) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125))) * _3442;
                        _3290 = (_3457 * _3405.x) + _3363;
                        _3291 = (_3457 * _3405.y) + _3364;
                        _3292 = (_3457 * _3405.z) + _3365;
                        _3287 = (_3538 * _3422.x) + _3360;
                        _3288 = (_3538 * _3422.y) + _3361;
                        _3289 = (_3538 * _3422.z) + _3362;
                        if (_3367 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3367;
                        }
                    }
                    frontier_phi_66_pred = _3287;
                    frontier_phi_66_pred_1 = _3292;
                    frontier_phi_66_pred_2 = _3291;
                    frontier_phi_66_pred_3 = _3290;
                    frontier_phi_66_pred_4 = _3289;
                    frontier_phi_66_pred_5 = _3288;
                }
                _3056 = frontier_phi_66_pred;
                _3066 = frontier_phi_66_pred_1;
                _3064 = frontier_phi_66_pred_2;
                _3062 = frontier_phi_66_pred_3;
                _3060 = frontier_phi_66_pred_4;
                _3058 = frontier_phi_66_pred_5;
                uint _3222 = _3221 + 1u;
                if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3215 = _3056;
                    _3216 = _3058;
                    _3217 = _3060;
                    _3218 = _3062;
                    _3219 = _3064;
                    _3220 = _3066;
                    _3221 = _3222;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        if (((4294967295u << _3072) & _2925) == 0u)
        {
            _3183 = _3055;
            _3185 = _3057;
            _3187 = _3059;
            _3189 = _3061;
            _3191 = _3063;
            _3193 = _3065;
        }
        else
        {
            float _3208 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
            float _3209 = _3208 * _2879;
            float _3210 = _3208 * _2880;
            float _3211 = _3208 * _2881;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3343 = _3055;
                float _3344 = _3057;
                float _3345 = _3059;
                float _3346 = _3061;
                float _3347 = _3063;
                float _3348 = _3065;
                uint _3349 = _3072;
                uint _3358;
                bool _3359;
                for (;;)
                {
                    _3358 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                    _3359 = _3358 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3359)
                    {
                        frontier_phi_77_pred = _3348;
                        frontier_phi_77_pred_1 = _3347;
                        frontier_phi_77_pred_2 = _3346;
                        frontier_phi_77_pred_3 = _3345;
                        frontier_phi_77_pred_4 = _3344;
                        frontier_phi_77_pred_5 = _3343;
                    }
                    else
                    {
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3565 = _3343;
                        float _3566 = _3344;
                        float _3567 = _3345;
                        float _3568 = _3346;
                        float _3569 = _3347;
                        float _3570 = _3348;
                        uint _3571 = _3358;
                        uint _3572;
                        vec4 _3597;
                        float _3598;
                        vec4 _3613;
                        vec3 _3625;
                        vec4 _3640;
                        vec4 _3655;
                        float _3701;
                        bool _3702;
                        for (;;)
                        {
                            uint _3582 = ((_3349 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3571));
                            _3572 = (_3571 + 4294967295u) & _3571;
                            uint _3584 = _3582 * 40u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            _3598 = _3597.w;
                            uint _3600 = (_3582 * 40u) + 4u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3582 * 40u) + 8u;
                            _3625 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x));
                            uint _3627 = (_3582 * 40u) + 16u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3582 * 40u) + 20u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3582 * 40u) + 24u;
                            vec4 _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3676 = (_3582 * 40u) + 28u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            _3701 = fma(_2881, _3689.z, fma(_2880, _3689.y, _3689.x * _2879)) + _3689.w;
                            _3702 = !((fma(_2881, _3670.z, fma(_2880, _3670.y, _3670.x * _2879)) + _3670.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3702)
                            {
                                float _3729 = _3597.x - _2879;
                                float _3730 = _3597.y - _2880;
                                float _3731 = _3597.z - _2881;
                                float _3732 = dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731));
                                float _3735 = inversesqrt(_3732);
                                float _3736 = _3735 * _3729;
                                float _3737 = _3735 * _3730;
                                float _3738 = _3735 * _3731;
                                float _3742 = 1.0 - (_3732 / (_3598 * _3598));
                                float _4891 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3747 = sqrt(_3732) * _3613.w;
                                float _3749 = 1.39999997615814208984375 / (_3747 + 1.39999997615814208984375);
                                float _3750 = _3749 * _3749;
                                float _3753 = ((1.0 - _3750) * dot(vec3(_3736, _3737, _3738), vec3(_1116, _1119, _1122))) + _3750;
                                float _3756 = _3747 * _3747;
                                float _3760 = (fma(_2881, _3640.z, fma(_2880, _3640.y, _3640.x * _2879)) + _3640.w) / _3701;
                                float _3761 = (fma(_2881, _3655.z, fma(_2880, _3655.y, _3655.x * _2879)) + _3655.w) / _3701;
                                float _3765 = 1.0 - dot(vec2(_3760, _3761), vec2(_3760, _3761));
                                float _4907 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3767 = _3766 * (((isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0))) * _3743) / ((_3756 * 0.699999988079071044921875) + 1.0));
                                float _3779 = exp2(log2(1.0 / ((_3756 * 3.5) + 5.0)) * 0.25);
                                float _3780 = 1.0 - _1191;
                                float _3787 = sqrt(1.0 - ((1.0 - (_3780 * _3780)) * (1.0 - (_3779 * _3779))));
                                float _3788 = _3787 * _3787;
                                float _3789 = _3788 * _3788;
                                float _3790 = _3736 - _3209;
                                float _3791 = _3737 - _3210;
                                float _3792 = _3738 - _3211;
                                float _3796 = inversesqrt(dot(vec3(_3790, _3791, _3792), vec3(_3790, _3791, _3792)));
                                float _3800 = dot(vec3(_1116, _1119, _1122), vec3((-0.0) - _3209, (-0.0) - _3210, (-0.0) - _3211));
                                float _4918 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3804 = dot(vec3(_1116, _1119, _1122), vec3(_3796 * _3790, _3796 * _3791, _3796 * _3792));
                                float _4929 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3807 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3811 = ((_3807 * _3807) * (_3789 + (-1.0))) + 1.0;
                                float _3812 = _3749 * _3788;
                                float _3813 = _3812 * _3812;
                                float _3819 = ((1.0 - _3813) * dot(vec3(_1116, _1119, _1122), vec3(_3736, _3737, _3738))) + _3813;
                                float _4940 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3821 = 1.0 - _3788;
                                float _3831 = (0.5 / (((_3820 * ((_3803 * _3821) + _3788)) + 9.9999999392252902907785028219223e-09) + (((_3820 * _3821) + _3788) * _3803))) * _3820;
                                float _4951 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3841 = (_3766 * _3743) * (((_3789 * 3.1415927410125732421875) * (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0)))) / ((_3811 * _3811) * ((_3756 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3767 * _3613.y;
                                frontier_phi_83_pred_1 = _3767 * _3613.x;
                                frontier_phi_83_pred_2 = _3841 * _3625.z;
                                frontier_phi_83_pred_3 = _3841 * _3625.y;
                                frontier_phi_83_pred_4 = _3841 * _3625.x;
                                frontier_phi_83_pred_5 = _3767 * _3613.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3849 = frontier_phi_83_pred;
                            _3848 = frontier_phi_83_pred_1;
                            _3847 = frontier_phi_83_pred_2;
                            _3846 = frontier_phi_83_pred_3;
                            _3845 = frontier_phi_83_pred_4;
                            _3850 = frontier_phi_83_pred_5;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            if (_3572 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3572;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3557;
                        frontier_phi_77_pred_1 = _3556;
                        frontier_phi_77_pred_2 = _3555;
                        frontier_phi_77_pred_3 = _3554;
                        frontier_phi_77_pred_4 = _3553;
                        frontier_phi_77_pred_5 = _3552;
                    }
                    _3194 = frontier_phi_77_pred;
                    _3192 = frontier_phi_77_pred_1;
                    _3190 = frontier_phi_77_pred_2;
                    _3188 = frontier_phi_77_pred_3;
                    _3186 = frontier_phi_77_pred_4;
                    _3184 = frontier_phi_77_pred_5;
                    uint _3350 = _3349 + 1u;
                    if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3343 = _3184;
                        _3344 = _3186;
                        _3345 = _3188;
                        _3346 = _3190;
                        _3347 = _3192;
                        _3348 = _3194;
                        _3349 = _3350;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3188;
                frontier_phi_58_59_ladder_1 = _3194;
                frontier_phi_58_59_ladder_2 = _3192;
                frontier_phi_58_59_ladder_3 = _3190;
                frontier_phi_58_59_ladder_4 = _3186;
                frontier_phi_58_59_ladder_5 = _3184;
            }
            else
            {
                frontier_phi_58_59_ladder = _3059;
                frontier_phi_58_59_ladder_1 = _3065;
                frontier_phi_58_59_ladder_2 = _3063;
                frontier_phi_58_59_ladder_3 = _3061;
                frontier_phi_58_59_ladder_4 = _3057;
                frontier_phi_58_59_ladder_5 = _3055;
            }
            _3183 = frontier_phi_58_59_ladder_5;
            _3185 = frontier_phi_58_59_ladder_4;
            _3187 = frontier_phi_58_59_ladder;
            _3189 = frontier_phi_58_59_ladder_3;
            _3191 = frontier_phi_58_59_ladder_2;
            _3193 = frontier_phi_58_59_ladder_1;
        }
        float _3198 = isnan(1.0) ? _1175 : (isnan(_1175) ? 1.0 : min(_1175, 1.0));
        _2938 = (_3198 * _3189) + _2374;
        _2940 = (_3198 * _3191) + _2376;
        _2942 = (_3198 * _3193) + _2378;
        _2944 = ((_3183 * _1160) * _3198) + _2719;
        _2946 = ((_3185 * _1162) * _3198) + _2721;
        _2948 = ((_3187 * _1163) * _3198) + _2723;
    }
    else
    {
        _2938 = _2374;
        _2940 = _2376;
        _2942 = _2378;
        _2944 = _2719;
        _2946 = _2721;
        _2948 = _2723;
    }
    uint _2954 = _1136 + uint(cbMatDynParam._m0[0u].w);
    float _2960 = cbInstanceData._m0[_2954].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_710.x - _707) * _688) + _707)) - _949) * _451) + _949);
    float _2961 = cbInstanceData._m0[_2954].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_710.y - _708) * _688) + _708)) - _950) * _451) + _950);
    float _2962 = cbInstanceData._m0[_2954].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_710.z - _709) * _688) + _709)) - _951) * _451) + _951);
    float _4967 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _4978 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _4989 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _2979 = (((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2938 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1175))) + ((_2944 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2014)) * cbPerFrame._m0[3u].x)) + _2960;
    float _2981 = (_2961 + ((_2946 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2014)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2940 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1175)));
    float _2983 = (_2962 + ((_2948 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2014)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2942 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1175)));
    float _2984 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
    float _2985 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
    float _2986 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
    float _2992 = cbMtdParam._m0[2u].x * _2960;
    float _2993 = cbMtdParam._m0[2u].y * _2961;
    float _2994 = cbMtdParam._m0[2u].z * _2962;
    float _5015 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2996 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
    uint _2997 = _1135 + 6u;
    float _3005 = _1097 / cbSceneParam._m0[86u].x;
    float _3006 = _1098 / cbSceneParam._m0[86u].y;
    vec4 _3020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, (log2((isnan(cbSceneParam._m0[77u].w) ? _1020 : (isnan(_1020) ? cbSceneParam._m0[77u].w : min(_1020, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3022 = _3020.x;
    float _3023 = _3020.y;
    float _3024 = _3020.z;
    float _3025 = _3020.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_1020 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_1020) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1020 : min(cbSceneParam._m0[80u].w, _1020));
        float _3081 = _3080 / _1020;
        float _3092 = _3081 * _1070;
        float _3093 = _1071 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _1072;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3300;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3300 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3244 = 1.0 / cbSceneParam._m0[80u].x;
            float _3245 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3246 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            _3300 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3255 - _3256) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))))) * _3244)) - ((exp2(_3115 * _3255) - exp2(_3115 * _3256)) * _3244))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, 1.0), 0.0);
        float _3311 = exp2((_3300 * (-1.44269502162933349609375)) * (1.0 - _3302.w));
        float _3312 = log2(_3311);
        float _3328 = log2(_3025);
        _3117 = (exp2(_3328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].x)) * _3302.x) / cbSceneParam._m0[78u].x)) + _3022;
        _3119 = (exp2(_3328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].y)) * _3302.y) / cbSceneParam._m0[78u].y)) + _3023;
        _3121 = (exp2(_3328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].z)) * _3302.z) / cbSceneParam._m0[78u].z)) + _3024;
        _3123 = _3311 * _3025;
    }
    else
    {
        _3117 = _3022;
        _3119 = _3023;
        _3121 = _3024;
        _3123 = _3025;
    }
    bool _3338;
    vec4 _3132;
    vec4 _3154;
    float _3156;
    float _3160;
    float _3161;
    float _3162;
    float _3165;
    float _3168;
    float _3171;
    float _3172;
    bool _3182;
    for (;;)
    {
        _3132 = cbMatDynParam._m0[0u];
        float _3134 = roundEven(_3132.y);
        bool _3135 = _3134 == 3.0;
        float _3136 = log2(_3123);
        float _3140 = exp2(_3136 * cbSceneParam._m0[78u].x);
        float _3141 = exp2(_3136 * cbSceneParam._m0[78u].y);
        float _3142 = exp2(_3136 * cbSceneParam._m0[78u].z);
        float _3143 = _3140 * _2984;
        float _3144 = _3141 * _2985;
        float _3145 = _3142 * _2986;
        float _3152 = _1086 + (-0.5);
        _3154 = cbMtdParam._m0[1u];
        _3156 = _3154.y * _3152;
        float _3159 = (_3134 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3160 = _3159 * (_3135 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3117)));
        _3161 = _3159 * (_3135 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3119)));
        _3162 = _3159 * (_3135 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3121)));
        _3165 = ((_2992 * _2996) * _3140) * _3159;
        _3168 = ((_2993 * _2996) * _3141) * _3159;
        _3171 = ((_2994 * _2996) * _3142) * _3159;
        _3172 = _3152 * 0.999000012874603271484375;
        _3182 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3182)
        {
            if ((cbInstanceData._m0[_1135 + 7u].x + _3172) < 0.5)
            {
                _3338 = true;
                break;
            }
        }
        uint _3279 = _1136 + uint(_3132.w);
        if ((cbInstanceData._m0[_3279].w < 1.0) && ((cbInstanceData._m0[_3279].w + _3172) < 0.5))
        {
            _3338 = true;
            break;
        }
        if ((_3156 + 1.0) < _3154.x)
        {
            _3338 = true;
            break;
        }
        _3338 = false;
        break;
    }
    float _3543;
    if (_3338)
    {
        discard_state = true;
        _3543 = 0.0;
    }
    else
    {
        _3543 = cbInstanceData._m0[_2997].w;
    }
    SV_Target.x = _3160;
    SV_Target.y = _3161;
    SV_Target.z = _3162;
    SV_Target.w = _3543;
    SV_Target_1.x = _3165;
    SV_Target_1.y = _3168;
    SV_Target_1.z = _3171;
    SV_Target_1.w = cbInstanceData._m0[_2997].w;
    discard_exit();
}


