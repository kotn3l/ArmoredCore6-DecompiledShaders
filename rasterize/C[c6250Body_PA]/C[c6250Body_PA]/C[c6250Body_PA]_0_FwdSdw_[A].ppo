#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1319;
float _3998;
float _3999;
float _4000;
float _4001;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    float _314 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _329 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _346 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _348 = _346.x;
    float _349 = _346.y;
    float _350 = _346.z;
    float _359 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _4010 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _369 = ((_329.z - _350) * _360) + _350;
    float _373 = ((((_329.x - _348) * _360) + _348) * 2.0) + (-1.0);
    float _375 = ((((_329.y - _349) * _360) + _349) * 2.0) + (-1.0);
    float _376 = dot(vec2(_373, _375), vec2(_373, _375));
    float _4021 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _381 = sqrt(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))));
    float _401 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _404 = (_401 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _405 = (_401 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _430 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbPerFrame._m0[22u].x * 2.0;
    float _435 = _434 * cbMtdParam._m0[22u].y;
    float _442 = ((_430.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _444 = (-0.0) - (cbMtdParam._m0[22u].x * ((_430.x * 0.5) + (-0.25)));
    float _446 = fract(_435);
    float _448 = fract(_435 + 0.5);
    float _459 = abs((_446 * 2.0) + (-1.0));
    vec4 _476 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_446 * _444) + _404) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_442 * _446) + _405) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _480 = _476.z;
    vec4 _481 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_448 * _444) + _404) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_442 * _448) + _405) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _523 = (cbMtdParam._m0[23u].y * _401) + TEXCOORD_6.w;
    float _524 = (cbMtdParam._m0[23u].z * _401) + TEXCOORD_9.w;
    vec4 _537 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _541 = _434 * cbMtdParam._m0[18u].x;
    float _546 = ((_537.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _548 = (-0.0) - (cbMtdParam._m0[20u].z * ((_537.x * 0.5) + (-0.25)));
    float _549 = fract(_541);
    float _551 = fract(_541 + 0.5);
    float _552 = _549 * _548;
    float _553 = _546 * _549;
    float _556 = _551 * _548;
    float _557 = _546 * _551;
    float _562 = abs((_549 * 2.0) + (-1.0));
    vec4 _578 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_552 + _523) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_553 + _524) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    vec4 _583 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_556 + _523) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_557 + _524) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _613 = (cbMtdParam._m0[22u].w * _401) + TEXCOORD_6.w;
    float _614 = (cbMtdParam._m0[23u].x * _401) + TEXCOORD_9.w;
    vec4 _634 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_552 + _613) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_553 + _614) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    vec4 _639 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_556 + _613) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_557 + _614) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _659 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4032 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _668 = (((_660 * _660) * (3.0 - (_660 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _701 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _613) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _614) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4043 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _706 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_639.x - _636) * _562) + _636)) * _668) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_583.x - _580) * _562) + _580)))) * _702;
    float _710 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_639.y - _637) * _562) + _637)) * _668) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_583.y - _581) * _562) + _581)))) * _702;
    float _714 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_639.z - _638) * _562) + _638)) * _668) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_583.z - _582) * _562) + _582)))) * _702;
    float _718 = _706 - (_706 * _314);
    float _719 = _710 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _710);
    float _720 = _714 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _714);
    float _727 = (_314 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _314))) * (cbMtdParam._m0[20u].x + 1.0);
    float _4054 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _741 = (cbMtdParam._m0[20u].y * _373) + _373;
    float _742 = (cbMtdParam._m0[20u].y * _375) + _375;
    float _745 = fma(_381, _233 * NORMAL.x, fma(_742, _240 * TANGENT.x, (_226 * _218) * _741));
    float _748 = fma(_381, _233 * NORMAL.y, fma(_742, _240 * TANGENT.y, (_226 * _219) * _741));
    float _751 = fma(_381, _233 * NORMAL.z, fma(_742, _240 * TANGENT.z, (_226 * _220) * _741));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _4065 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _759 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4087 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4098 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    vec4 _843 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _845 = _843.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1000 = sqrt(((_829 * _829) + (_830 * _830)) + (_831 * _831));
        float _1006 = (cbMatDynParam._m0[5u].x * _1000) + cbMatDynParam._m0[5u].y;
        float _4109 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1011 = (cbMatDynParam._m0[5u].z * _1000) + cbMatDynParam._m0[5u].w;
        float _4120 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) - _1007)) + _1007) < ((_845 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _880 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _883 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _896 = uint(roundEven(NORMAL.w)) * 13u;
    uint _897 = _896 + 9u;
    uint _898 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_898].z;
    float _4131 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _921 = _918.x * TEXCOORD_3.w;
    float _922 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _925 = _922 * 2.0;
    float _929 = (_925 * _756) - _836;
    float _930 = (_925 * _757) - _837;
    float _931 = (_925 * _758) - _838;
    float _935 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _4164 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _937 = sqrt(_759);
    float _949 = exp2((_937 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_937 * 3.0));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1044 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1048 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1052 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1076 = _981 + _756;
        float _1077 = _985 + _757;
        float _1078 = _989 + _758;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1044;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1048;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1052;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1044 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1048 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1052 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_756, _757, _758), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4212 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_756, _757, _758), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4245 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_756, _757, _758), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4278 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1362 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1366 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1370 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1393 = _981 + _756;
        float _1394 = _985 + _757;
        float _1395 = _989 + _758;
        float _1405 = fma(_1395, cbModelParam._m0[30u].z, fma(_1394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1393)) - _1362;
        float _1406 = fma(_1395, cbModelParam._m0[31u].z, fma(_1394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1393)) - _1366;
        float _1407 = fma(_1395, cbModelParam._m0[32u].z, fma(_1394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1393)) - _1370;
        float _1411 = inversesqrt(dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407)));
        float _1424 = ((_1411 * _1405) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1362 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1411 * _1406) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1366 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1411 * _1407) / cbModelParam._m0[35u].z) + ((((((_1370 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        float _1461 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1428.x + (-0.5));
        float _1463 = _1461 * (_1428.y + (-0.5));
        float _1464 = _1461 * (_1428.z + (-0.5));
        float _1471 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1435.x + (-0.5));
        float _1473 = _1471 * (_1435.y + (-0.5));
        float _1474 = _1471 * (_1435.z + (-0.5));
        float _1481 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1442.x + (-0.5));
        float _1483 = _1481 * (_1442.y + (-0.5));
        float _1484 = _1481 * (_1442.z + (-0.5));
        float _1491 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1449.x + (-0.5));
        float _1493 = _1491 * (_1449.y + (-0.5));
        float _1494 = _1491 * (_1449.z + (-0.5));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = _1462 * 0.5;
        float _1499 = _1472 * 0.5;
        float _1500 = _1482 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_756, _757, _758), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4341 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1525 + 1.0))) + _1530) * _1495;
        float _1540 = _1463 * 0.5;
        float _1541 = _1473 * 0.5;
        float _1542 = _1483 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_756, _757, _758), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4374 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1567 + 1.0))) + _1572) * _1496;
        float _1582 = _1464 * 0.5;
        float _1583 = _1474 * 0.5;
        float _1584 = _1484 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_756, _757, _758), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4407 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1609 + 1.0))) + _1614) * _1497;
        _1631 = _1464;
        _1632 = _1463;
        _1633 = _1462;
        _1634 = _1474;
        _1635 = _1473;
        _1636 = _1472;
        _1637 = _1484;
        _1638 = _1483;
        _1639 = _1482;
        _1640 = _1497;
        _1641 = _1496;
        _1642 = _1495;
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
    }
    else
    {
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = _1319;
        _1641 = _1319;
        _1642 = _1319;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1332)) + _1332;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1333)) + _1333;
    float _1678 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1655));
    float _1699 = _929 * 0.5;
    float _1700 = _930 * 0.5;
    float _1701 = _931 * 0.5;
    float _1702 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1705 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1708 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1715 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1719 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1723 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1730 = dot(vec4(cbModelParam._m0[39u]), vec4(_1699, _1700, _1701, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1699, _1700, _1701, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_931, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929));
        float _1829 = fma(_931, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929));
        float _1832 = fma(_931, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1860 = frontier_phi_17_15_ladder;
        }
        float _2029;
        if (_1829 > 0.0)
        {
            _2029 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2029 = frontier_phi_26_22_ladder;
        }
        float _2325;
        if (_1832 > 0.0)
        {
            _2325 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2325 = frontier_phi_38_33_ladder;
        }
        float _2327 = isnan(_2029) ? _1860 : (isnan(_1860) ? _2029 : min(_1860, _2029));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1826) + _1815;
        float _2333 = (_2328 * _1829) + _1819;
        float _2334 = (_2328 * _1832) + _1823;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_16_38_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_16_38_ladder_2;
        _1850 = frontier_phi_16_38_ladder_1;
        _1852 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_929, _930, _931), _1768);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1910 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1914 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1918 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1921 = fma(_931, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929));
        float _1924 = fma(_931, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929));
        float _1927 = fma(_931, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929));
        float _2034;
        if (_1921 > 0.0)
        {
            _2034 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2034 = frontier_phi_28_24_ladder;
        }
        float _2352;
        if (_1924 > 0.0)
        {
            _2352 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2352 = frontier_phi_40_35_ladder;
        }
        float _2679;
        if (_1927 > 0.0)
        {
            _2679 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2679 = frontier_phi_50_47_ladder;
        }
        float _2681 = isnan(_2352) ? _2034 : (isnan(_2034) ? _2352 : min(_2034, _2352));
        float _2682 = isnan(_2679) ? _2681 : (isnan(_2681) ? _2679 : min(_2681, _2679));
        float _2686 = (_2682 * _1921) + _1910;
        float _2687 = (_2682 * _1924) + _1914;
        float _2688 = (_2682 * _1927) + _1918;
        float _2689 = _2682 * 9.9999997473787516355514526367188e-05;
        float _2690 = (-1.0) - _2689;
        float _2692 = _2689 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2688 > _2692) || ((_2688 < _2690) || ((_2687 > _2692) || ((_2687 < _2690) || ((_2686 < _2690) || (_2686 > _2692))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2688, cbModelParam._m0[17u].z, fma(_2687, cbModelParam._m0[17u].y, _2686 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2688, cbModelParam._m0[18u].z, fma(_2687, cbModelParam._m0[18u].y, _2686 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2688, cbModelParam._m0[19u].z, fma(_2687, cbModelParam._m0[19u].y, _2686 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_25_50_ladder = _2806.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2806.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2806.x * cbModelParam._m0[1u].z;
        }
        _1946 = frontier_phi_25_50_ladder_2;
        _1948 = frontier_phi_25_50_ladder_1;
        _1950 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_929, _930, _931), _1857);
        _1946 = _1930.x * cbModelParam._m0[1u].z;
        _1948 = _1930.y * cbModelParam._m0[1u].z;
        _1950 = _1930.z * cbModelParam._m0[1u].z;
    }
    float _1962 = ((((1.0 - _949) * ((_937 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_949 * _937)) * _921;
    float _1963 = _1962 * ((cbModelParam._m0[1u].w * (_1946 - _1848)) + _1848);
    float _1964 = _1962 * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1965 = _1962 * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1963 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1963 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, _1963 * cbSceneParam._m0[91u].x));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2021 = _2008 / _2020;
    float _2022 = _2012 / _2020;
    float _2023 = _2016 / _2020;
    float _2170;
    float _2171;
    float _2172;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2050 = ((uint(_2023 > cbSceneParam._m0[59u].y) + uint(_2023 > cbSceneParam._m0[59u].x)) + uint(_2023 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2051 = _2050 + 43u;
        uint _2059 = _2050 + 44u;
        uint _2067 = _2050 + 45u;
        uint _2075 = _2050 + 46u;
        float _2086 = fma(_2020, cbSceneParam._m0[_2051].w, fma(_2016, cbSceneParam._m0[_2051].z, fma(_2012, cbSceneParam._m0[_2051].y, _2008 * cbSceneParam._m0[_2051].x)));
        float _2090 = fma(_2020, cbSceneParam._m0[_2059].w, fma(_2016, cbSceneParam._m0[_2059].z, fma(_2012, cbSceneParam._m0[_2059].y, _2008 * cbSceneParam._m0[_2059].x)));
        float _2098 = fma(_2020, cbSceneParam._m0[_2075].w, fma(_2016, cbSceneParam._m0[_2075].z, fma(_2012, cbSceneParam._m0[_2075].y, _2008 * cbSceneParam._m0[_2075].x)));
        float _2103 = cbSceneParam._m0[33u].z * _2098;
        float _2105 = cbSceneParam._m0[33u].w * _2098;
        float _2108 = fma(_2020, cbSceneParam._m0[_2067].w, fma(_2016, cbSceneParam._m0[_2067].z, fma(_2012, cbSceneParam._m0[_2067].y, _2008 * cbSceneParam._m0[_2067].x))) / _2098;
        float _2156 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
        float _4533 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2163 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2086) / _2098, (_2105 + _2090) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 + _2086) / _2098, (_2090 - _2103) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2103) / _2098, (_2090 - _2105) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2105) / _2098, (_2103 + _2090) / _2098), _2108), 0.0)).x), vec4(0.25)));
        _2170 = 1.0 - (_2163 * cbSceneParam._m0[34u].x);
        _2171 = 1.0 - (_2163 * cbSceneParam._m0[34u].y);
        _2172 = 1.0 - (_2163 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2170 = 1.0;
        _2171 = 1.0;
        _2172 = 1.0;
    }
    float _2236;
    float _2238;
    float _2240;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2224 = fma(_2020, cbSceneParam._m0[63u].w, fma(_2016, cbSceneParam._m0[63u].z, fma(_2012, cbSceneParam._m0[63u].y, _2008 * cbSceneParam._m0[63u].x)));
        float _2225 = fma(_2020, cbSceneParam._m0[60u].w, fma(_2016, cbSceneParam._m0[60u].z, fma(_2012, cbSceneParam._m0[60u].y, _2008 * cbSceneParam._m0[60u].x))) / _2224;
        float _2226 = fma(_2020, cbSceneParam._m0[61u].w, fma(_2016, cbSceneParam._m0[61u].z, fma(_2012, cbSceneParam._m0[61u].y, _2008 * cbSceneParam._m0[61u].x))) / _2224;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2225 >= cbSceneParam._m0[64u].x) && (_2226 >= cbSceneParam._m0[64u].y)) && (_2225 <= cbSceneParam._m0[64u].z)) && (_2226 <= cbSceneParam._m0[64u].w))
        {
            float _2365 = fma(_2020, cbSceneParam._m0[62u].w, fma(_2016, cbSceneParam._m0[62u].z, fma(_2012, cbSceneParam._m0[62u].y, _2008 * cbSceneParam._m0[62u].x))) / _2224;
            float _2369 = isnan(cbSceneParam._m0[41u].w) ? _2365 : (isnan(_2365) ? cbSceneParam._m0[41u].w : max(_2365, cbSceneParam._m0[41u].w));
            float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
            float _4549 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
            float _2419 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2225, cbSceneParam._m0[33u].w + _2226), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2225, _2226 - cbSceneParam._m0[33u].z), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].z, _2226 - cbSceneParam._m0[33u].w), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2226), _2369), 0.0)).x), vec4(0.25)));
            float _2423 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
            float _2424 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
            float _2425 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2425) ? _2172 : (isnan(_2172) ? _2425 : min(_2172, _2425));
            frontier_phi_37_36_ladder_1 = isnan(_2424) ? _2171 : (isnan(_2171) ? _2424 : min(_2171, _2424));
            frontier_phi_37_36_ladder_2 = isnan(_2423) ? _2170 : (isnan(_2170) ? _2423 : min(_2170, _2423));
        }
        else
        {
            frontier_phi_37_36_ladder = _2172;
            frontier_phi_37_36_ladder_1 = _2171;
            frontier_phi_37_36_ladder_2 = _2170;
        }
        _2236 = frontier_phi_37_36_ladder_2;
        _2238 = frontier_phi_37_36_ladder_1;
        _2240 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2236 = _2170;
        _2238 = _2171;
        _2240 = _2172;
    }
    uvec4 _2245 = floatBitsToUint(cbInstanceData._m0[_896 + 5u]);
    uint _2247 = _2245.x * 14u;
    uint _2248 = _2247 + 13u;
    float _2255 = _921 + (-1.0);
    float _2260 = (cbLight._m0[_2248].x * _2255) + 1.0;
    float _2261 = (cbLight._m0[_2248].y * _2255) + 1.0;
    float _2262 = (cbLight._m0[_2248].z * _2255) + 1.0;
    float _2263 = (cbLight._m0[_2248].w * _2255) + 1.0;
    uint _2264 = _2247 + 5u;
    float _2270 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2274 = _2247 + 4u;
    float _2284 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2288 = _2247 | 1u;
    float _2299 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_756, _757, _758));
    float _2302 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_756, _757, _758));
    float _4585 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _4596 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * 0.3183098733425140380859375;
    float _2309 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2316 = ((cbLight._m0[_2264].x * _2270) * _2309) + (((cbLight._m0[_2274].x * _2236) * _2284) * _2307);
    float _2317 = ((_2270 * cbLight._m0[_2264].y) * _2309) + (((cbLight._m0[_2274].y * _2238) * _2284) * _2307);
    float _2318 = ((_2270 * cbLight._m0[_2264].z) * _2309) + (((cbLight._m0[_2274].z * _2240) * _2284) * _2307);
    uvec4 _2322 = floatBitsToUint(cbLight._m0[_2247 + 12u]);
    bool _2324 = _2322.x == 0u;
    float _2426;
    float _2428;
    float _2430;
    if (_2324)
    {
        _2426 = _2316;
        _2428 = _2317;
        _2430 = _2318;
    }
    else
    {
        uint _2434 = _2247 + 6u;
        float _2450 = (dot(vec3(cbLight._m0[_2247 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4607 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2453 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2426 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2316;
        _2428 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2317;
        _2430 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2318;
    }
    bool _2433 = _2322.y == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2433)
    {
        _2488 = _2426;
        _2490 = _2428;
        _2492 = _2430;
    }
    else
    {
        uint _2650 = _2247 + 7u;
        float _2666 = (dot(vec3(cbLight._m0[_2247 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2667 = _2666 * _2666;
        float _4623 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2668 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2669 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2488 = (((cbLight._m0[_2650].x * 0.3183098733425140380859375) * _2668) * _2669) + _2426;
        _2490 = (((cbLight._m0[_2650].y * 0.3183098733425140380859375) * _2668) * _2669) + _2428;
        _2492 = (((cbLight._m0[_2650].z * 0.3183098733425140380859375) * _2668) * _2669) + _2430;
    }
    uint _2495 = _2247 + 8u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _759) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2247].x + _836;
    float _2511 = cbLight._m0[_2247].y + _837;
    float _2512 = cbLight._m0[_2247].z + _838;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2247].xyz));
    float _4639 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _4650 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2524 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2525 = dot(vec3(_756, _757, _758), vec3(_2517, _2518, _2519));
    float _4661 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2517, _2518, _2519));
    float _4672 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2509 * _2509;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2549 = 1.0 - _2509;
    float _2560 = (0.5 / (((_2524 * ((_2523 * _2549) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2549) + _2509) * _2523))) * _2523;
    float _4683 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    uint _2576 = _2247 + 9u;
    float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _759) * 0.949999988079071044921875);
    float _2588 = _2587 * _2587;
    float _2589 = cbLight._m0[_2288].x + _836;
    float _2590 = cbLight._m0[_2288].y + _837;
    float _2591 = cbLight._m0[_2288].z + _838;
    float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
    float _2596 = _2595 * _2589;
    float _2597 = _2595 * _2590;
    float _2598 = _2595 * _2591;
    float _2599 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2288].xyz));
    float _4694 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2603 = dot(vec3(_756, _757, _758), vec3(_2596, _2597, _2598));
    float _4705 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2596, _2597, _2598));
    float _4716 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2588 * _2588;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2624 = (exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2625 = 1.0 - _2588;
    float _2635 = (0.5 / (((_2524 * ((_2602 * _2625) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2625) + _2588) * _2602))) * _2602;
    float _4727 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2637 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    float _2647 = (((_2624 * cbLight._m0[_2576].x) * _2637) * _2270) + ((((cbLight._m0[_2495].x * _2236) * _2548) * _2562) * _2284);
    float _2648 = (((_2624 * cbLight._m0[_2576].y) * _2637) * _2270) + ((((cbLight._m0[_2495].y * _2238) * _2548) * _2562) * _2284);
    float _2649 = (((_2624 * cbLight._m0[_2576].z) * _2637) * _2270) + ((((cbLight._m0[_2495].z * _2240) * _2548) * _2562) * _2284);
    float _2705;
    float _2707;
    float _2709;
    if (_2324)
    {
        _2705 = _2647;
        _2707 = _2648;
        _2709 = _2649;
    }
    else
    {
        uint _2711 = _2247 + 2u;
        uint _2715 = _2247 + 10u;
        float _2729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2711].w)) * _759) * 0.949999988079071044921875);
        float _2730 = _2729 * _2729;
        float _2731 = cbLight._m0[_2711].x + _836;
        float _2732 = cbLight._m0[_2711].y + _837;
        float _2733 = cbLight._m0[_2711].z + _838;
        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
        float _2738 = _2737 * _2731;
        float _2739 = _2737 * _2732;
        float _2740 = _2737 * _2733;
        float _2741 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2711].xyz));
        float _4738 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2745 = dot(vec3(_756, _757, _758), vec3(_2738, _2739, _2740));
        float _4749 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2749 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_2738, _2739, _2740));
        float _4760 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2753 = _2730 * _2730;
        float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
        float _2766 = (exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2767 = 1.0 - _2730;
        float _2777 = (0.5 / (((_2524 * ((_2744 * _2767) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2767) + _2730) * _2744))) * _2744;
        float _4771 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2705 = (((_2766 * cbLight._m0[_2715].x) * _2779) * _2780) + _2647;
        _2707 = (((_2766 * cbLight._m0[_2715].y) * _2779) * _2780) + _2648;
        _2709 = (((_2766 * cbLight._m0[_2715].z) * _2779) * _2780) + _2649;
    }
    float _2811;
    float _2813;
    float _2815;
    if (_2433)
    {
        _2811 = _2705;
        _2813 = _2707;
        _2815 = _2709;
    }
    else
    {
        uint _2822 = _2247 + 3u;
        uint _2826 = _2247 + 11u;
        float _2840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2822].w)) * _759) * 0.949999988079071044921875);
        float _2841 = _2840 * _2840;
        float _2842 = cbLight._m0[_2822].x + _836;
        float _2843 = cbLight._m0[_2822].y + _837;
        float _2844 = cbLight._m0[_2822].z + _838;
        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
        float _2849 = _2848 * _2842;
        float _2850 = _2848 * _2843;
        float _2851 = _2848 * _2844;
        float _2852 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2822].xyz));
        float _4787 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2856 = dot(vec3(_756, _757, _758), vec3(_2849, _2850, _2851));
        float _4798 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2860 = dot(vec3(cbLight._m0[_2822].xyz), vec3(_2849, _2850, _2851));
        float _4809 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2864 = _2841 * _2841;
        float _2868 = ((_2859 * _2859) * (_2864 + (-1.0))) + 1.0;
        float _2877 = (exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2878 = 1.0 - _2841;
        float _2888 = (0.5 / (((_2524 * ((_2855 * _2878) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2878) + _2841) * _2855))) * _2855;
        float _4820 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2890 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2864 / ((_2868 * _2868) * 3.141590118408203125));
        float _2891 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2811 = (((_2877 * cbLight._m0[_2826].x) * _2890) * _2891) + _2705;
        _2813 = (((_2877 * cbLight._m0[_2826].y) * _2890) * _2891) + _2707;
        _2815 = (((_2877 * cbLight._m0[_2826].z) * _2890) * _2891) + _2709;
    }
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_2245.y == 0u)
    {
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.x;
        uint _2924 = uint((float(_2912.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2913))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2913)));
        float _2934 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2935 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        uint _2938 = uint(isnan(14.0) ? _2935 : (isnan(_2935) ? 14.0 : min(_2935, 14.0)));
        uvec4 _2943 = texelFetch(g_lightClusterGridBuffer, int(((_2938 << 2u) + (_2924 << 6u)) >> 2u));
        uint _2944 = _2943.x;
        uint _2945 = _2912.z;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((((1u << ((_2945 >> 4u) & 15u)) + 4294967295u) & _2944) == 0u) || ((_2945 & 240u) == 0u))
        {
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
        }
        else
        {
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            uint _3219 = 0u;
            uint _3228;
            bool _3229;
            for (;;)
            {
                _3228 = texelFetch(g_lightClassification, int((((_2938 << 5u) + (_2924 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                _3229 = _3228 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3229)
                {
                    frontier_phi_71_pred = _3218;
                    frontier_phi_71_pred_1 = _3217;
                    frontier_phi_71_pred_2 = _3216;
                    frontier_phi_71_pred_3 = _3215;
                    frontier_phi_71_pred_4 = _3214;
                    frontier_phi_71_pred_5 = _3213;
                }
                else
                {
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    uint _3364;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3228;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    for (;;)
                    {
                        uint _3368 = uint(findLSB(_3364)) + (_3219 << 5u);
                        uint _3365 = (_3364 + 4294967295u) & _3364;
                        uint _3370 = _3368 * 48u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3390 = (_3368 * 48u) + 4u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3409 = (_3368 * 48u) + 8u;
                        vec3 _3420 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x));
                        float _3424 = _3384.x - _2021;
                        float _3425 = _3384.y - _2022;
                        float _3426 = _3384.z - _2023;
                        float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                        float _3430 = inversesqrt(_3427);
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3434 = dot(vec3(_877, _880, _883), vec3(_3431, _3432, _3433));
                        float _3439 = 1.0 - (_3427 * _3384.w);
                        float _4846 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3441 = sqrt(_3427) * _3403.w;
                        float _3444 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3434) + _3445;
                        float _3451 = _3441 * _3441;
                        float _3455 = ((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3440) / ((_3451 * 0.699999988079071044921875) + 1.0);
                        float _3459 = (-0.0) - _2021;
                        float _3460 = (-0.0) - _2022;
                        float _3461 = (-0.0) - _2023;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3475 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                        float _3476 = 1.0 - _937;
                        float _3483 = sqrt(1.0 - ((1.0 - (_3476 * _3476)) * (1.0 - (_3475 * _3475))));
                        float _3484 = _3483 * _3483;
                        float _3485 = _3484 * _3484;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3488 = _3468 + _3433;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3496 = dot(vec3(_877, _880, _883), vec3(_3466, _3467, _3468));
                        float _4862 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3499 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3500 = dot(vec3(_877, _880, _883), vec3(_3492 * _3486, _3492 * _3487, _3492 * _3488));
                        float _4873 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3503 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3507 = ((_3503 * _3503) * (_3485 + (-1.0))) + 1.0;
                        float _3508 = _3444 * _3484;
                        float _3509 = _3508 * _3508;
                        float _3512 = ((1.0 - _3509) * _3434) + _3509;
                        float _4884 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3513 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3514 = 1.0 - _3484;
                        float _3524 = (0.5 / (((_3513 * ((_3499 * _3514) + _3484)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3484) * _3499))) * _3513;
                        float _4895 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3535 = (((_3485 * 3.1415927410125732421875) * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) / ((_3507 * _3507) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125))) * _3440;
                        _3288 = (_3455 * _3403.x) + _3361;
                        _3289 = (_3455 * _3403.y) + _3362;
                        _3290 = (_3455 * _3403.z) + _3363;
                        _3285 = (_3535 * _3420.x) + _3358;
                        _3286 = (_3535 * _3420.y) + _3359;
                        _3287 = (_3535 * _3420.z) + _3360;
                        if (_3365 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3365;
                        }
                    }
                    frontier_phi_71_pred = _3290;
                    frontier_phi_71_pred_1 = _3289;
                    frontier_phi_71_pred_2 = _3288;
                    frontier_phi_71_pred_3 = _3287;
                    frontier_phi_71_pred_4 = _3286;
                    frontier_phi_71_pred_5 = _3285;
                }
                _3064 = frontier_phi_71_pred;
                _3062 = frontier_phi_71_pred_1;
                _3060 = frontier_phi_71_pred_2;
                _3058 = frontier_phi_71_pred_3;
                _3056 = frontier_phi_71_pred_4;
                _3054 = frontier_phi_71_pred_5;
                uint _3220 = _3219 + 1u;
                if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3213 = _3054;
                    _3214 = _3056;
                    _3215 = _3058;
                    _3216 = _3060;
                    _3217 = _3062;
                    _3218 = _3064;
                    _3219 = _3220;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
        }
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.z;
        uint _3070 = (_3068 >> 8u) & 15u;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        if (((4294967295u << _3070) & _2944) == 0u)
        {
            _3181 = _3053;
            _3183 = _3055;
            _3185 = _3057;
            _3187 = _3059;
            _3189 = _3061;
            _3191 = _3063;
        }
        else
        {
            float _3206 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _3207 = _3206 * _2021;
            float _3208 = _3206 * _2022;
            float _3209 = _3206 * _2023;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3070 < ((_3068 >> 12u) & 15u))
            {
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3341 = _3053;
                float _3342 = _3055;
                float _3343 = _3057;
                float _3344 = _3059;
                float _3345 = _3061;
                float _3346 = _3063;
                uint _3347 = _3070;
                uint _3356;
                bool _3357;
                for (;;)
                {
                    _3356 = texelFetch(g_lightClassification, int((((_2938 << 5u) + (_2924 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                    _3357 = _3356 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3357)
                    {
                        frontier_phi_82_pred = _3346;
                        frontier_phi_82_pred_1 = _3345;
                        frontier_phi_82_pred_2 = _3344;
                        frontier_phi_82_pred_3 = _3343;
                        frontier_phi_82_pred_4 = _3342;
                        frontier_phi_82_pred_5 = _3341;
                    }
                    else
                    {
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        uint _3568 = _3356;
                        uint _3569;
                        vec4 _3594;
                        float _3595;
                        vec4 _3610;
                        vec3 _3622;
                        vec4 _3637;
                        vec4 _3652;
                        float _3698;
                        bool _3699;
                        for (;;)
                        {
                            uint _3579 = ((_3347 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3568));
                            _3569 = (_3568 + 4294967295u) & _3568;
                            uint _3581 = _3579 * 40u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3595 = _3594.w;
                            uint _3597 = (_3579 * 40u) + 4u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3612 = (_3579 * 40u) + 8u;
                            _3622 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x));
                            uint _3624 = (_3579 * 40u) + 16u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3579 * 40u) + 20u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3579 * 40u) + 24u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3673 = (_3579 * 40u) + 28u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            _3698 = fma(_2023, _3686.z, fma(_2022, _3686.y, _3686.x * _2021)) + _3686.w;
                            _3699 = !((fma(_2023, _3667.z, fma(_2022, _3667.y, _3667.x * _2021)) + _3667.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3699)
                            {
                                float _3726 = _3594.x - _2021;
                                float _3727 = _3594.y - _2022;
                                float _3728 = _3594.z - _2023;
                                float _3729 = dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728));
                                float _3732 = inversesqrt(_3729);
                                float _3733 = _3732 * _3726;
                                float _3734 = _3732 * _3727;
                                float _3735 = _3732 * _3728;
                                float _3739 = 1.0 - (_3729 / (_3595 * _3595));
                                float _4906 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3744 = sqrt(_3729) * _3610.w;
                                float _3746 = 1.39999997615814208984375 / (_3744 + 1.39999997615814208984375);
                                float _3747 = _3746 * _3746;
                                float _3750 = ((1.0 - _3747) * dot(vec3(_3733, _3734, _3735), vec3(_877, _880, _883))) + _3747;
                                float _3753 = _3744 * _3744;
                                float _3757 = (fma(_2023, _3637.z, fma(_2022, _3637.y, _3637.x * _2021)) + _3637.w) / _3698;
                                float _3758 = (fma(_2023, _3652.z, fma(_2022, _3652.y, _3652.x * _2021)) + _3652.w) / _3698;
                                float _3762 = 1.0 - dot(vec2(_3757, _3758), vec2(_3757, _3758));
                                float _4922 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3764 = _3763 * (((isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0))) * _3740) / ((_3753 * 0.699999988079071044921875) + 1.0));
                                float _3776 = exp2(log2(1.0 / ((_3753 * 3.5) + 5.0)) * 0.25);
                                float _3777 = 1.0 - _937;
                                float _3784 = sqrt(1.0 - ((1.0 - (_3777 * _3777)) * (1.0 - (_3776 * _3776))));
                                float _3785 = _3784 * _3784;
                                float _3786 = _3785 * _3785;
                                float _3787 = _3733 - _3207;
                                float _3788 = _3734 - _3208;
                                float _3789 = _3735 - _3209;
                                float _3793 = inversesqrt(dot(vec3(_3787, _3788, _3789), vec3(_3787, _3788, _3789)));
                                float _3797 = dot(vec3(_877, _880, _883), vec3((-0.0) - _3207, (-0.0) - _3208, (-0.0) - _3209));
                                float _4933 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3800 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3801 = dot(vec3(_877, _880, _883), vec3(_3793 * _3787, _3793 * _3788, _3793 * _3789));
                                float _4944 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3808 = ((_3804 * _3804) * (_3786 + (-1.0))) + 1.0;
                                float _3809 = _3746 * _3785;
                                float _3810 = _3809 * _3809;
                                float _3816 = ((1.0 - _3810) * dot(vec3(_877, _880, _883), vec3(_3733, _3734, _3735))) + _3810;
                                float _4955 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3818 = 1.0 - _3785;
                                float _3828 = (0.5 / (((_3817 * ((_3800 * _3818) + _3785)) + 9.9999999392252902907785028219223e-09) + (((_3817 * _3818) + _3785) * _3800))) * _3817;
                                float _4966 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3838 = (_3763 * _3740) * (((_3786 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3808 * _3808) * ((_3753 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3764 * _3610.z;
                                frontier_phi_88_pred_1 = _3764 * _3610.y;
                                frontier_phi_88_pred_2 = _3764 * _3610.x;
                                frontier_phi_88_pred_3 = _3838 * _3622.z;
                                frontier_phi_88_pred_4 = _3838 * _3622.y;
                                frontier_phi_88_pred_5 = _3838 * _3622.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3847 = frontier_phi_88_pred;
                            _3846 = frontier_phi_88_pred_1;
                            _3845 = frontier_phi_88_pred_2;
                            _3844 = frontier_phi_88_pred_3;
                            _3843 = frontier_phi_88_pred_4;
                            _3842 = frontier_phi_88_pred_5;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            if (_3569 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3569;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3554;
                        frontier_phi_82_pred_1 = _3553;
                        frontier_phi_82_pred_2 = _3552;
                        frontier_phi_82_pred_3 = _3551;
                        frontier_phi_82_pred_4 = _3550;
                        frontier_phi_82_pred_5 = _3549;
                    }
                    _3192 = frontier_phi_82_pred;
                    _3190 = frontier_phi_82_pred_1;
                    _3188 = frontier_phi_82_pred_2;
                    _3186 = frontier_phi_82_pred_3;
                    _3184 = frontier_phi_82_pred_4;
                    _3182 = frontier_phi_82_pred_5;
                    uint _3348 = _3347 + 1u;
                    if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3341 = _3182;
                        _3342 = _3184;
                        _3343 = _3186;
                        _3344 = _3188;
                        _3345 = _3190;
                        _3346 = _3192;
                        _3347 = _3348;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3188;
                frontier_phi_63_64_ladder_1 = _3192;
                frontier_phi_63_64_ladder_2 = _3190;
                frontier_phi_63_64_ladder_3 = _3186;
                frontier_phi_63_64_ladder_4 = _3184;
                frontier_phi_63_64_ladder_5 = _3182;
            }
            else
            {
                frontier_phi_63_64_ladder = _3059;
                frontier_phi_63_64_ladder_1 = _3063;
                frontier_phi_63_64_ladder_2 = _3061;
                frontier_phi_63_64_ladder_3 = _3057;
                frontier_phi_63_64_ladder_4 = _3055;
                frontier_phi_63_64_ladder_5 = _3053;
            }
            _3181 = frontier_phi_63_64_ladder_5;
            _3183 = frontier_phi_63_64_ladder_4;
            _3185 = frontier_phi_63_64_ladder_3;
            _3187 = frontier_phi_63_64_ladder;
            _3189 = frontier_phi_63_64_ladder_2;
            _3191 = frontier_phi_63_64_ladder_1;
        }
        float _3196 = isnan(1.0) ? _921 : (isnan(_921) ? 1.0 : min(_921, 1.0));
        _2957 = (_3196 * _3187) + _2488;
        _2959 = (_3196 * _3189) + _2490;
        _2961 = (_3196 * _3191) + _2492;
        _2963 = ((_3181 * 0.039999999105930328369140625) * _3196) + _2811;
        _2965 = ((_3183 * 0.039999999105930328369140625) * _3196) + _2813;
        _2967 = ((_3185 * 0.039999999105930328369140625) * _3196) + _2815;
    }
    else
    {
        _2957 = _2488;
        _2959 = _2490;
        _2961 = _2492;
        _2963 = _2811;
        _2965 = _2813;
        _2967 = _2815;
    }
    uint _2973 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _2979 = cbInstanceData._m0[_2973].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_481.x - _478) * _459) + _478)) - _718) * _728) + _718);
    float _2980 = cbInstanceData._m0[_2973].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_481.y - _479) * _459) + _479)) - _719) * _728) + _719);
    float _2981 = cbInstanceData._m0[_2973].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_481.z - _480) * _459) + _480)) - _720) * _728) + _720);
    float _4982 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4993 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _5004 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2998 = (((isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_2957 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _921))) + ((_2963 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1757)) * cbPerFrame._m0[3u].x)) + _2979;
    float _3000 = (_2980 + ((_2965 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1757)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2959 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _921)));
    float _3002 = (_2981 + ((_2967 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1757)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2961 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _921)));
    float _3003 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
    float _3004 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
    float _3005 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
    float _3011 = cbMtdParam._m0[2u].x * _2979;
    float _3012 = cbMtdParam._m0[2u].y * _2980;
    float _3013 = cbMtdParam._m0[2u].z * _2981;
    float _5030 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3015 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
    uint _3016 = _896 + 6u;
    float _3024 = _857 / cbSceneParam._m0[86u].x;
    float _3025 = _858 / cbSceneParam._m0[86u].y;
    vec4 _3039 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3024, _3025, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3041 = _3039.x;
    float _3042 = _3039.y;
    float _3043 = _3039.z;
    float _3044 = _3039.w;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _3078 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _3079 = _3078 / _778;
        float _3090 = _3079 * _829;
        float _3091 = _830 * _3079;
        float _3092 = (-0.0) - _3091;
        float _3093 = _3079 * _831;
        float _3095 = (cbSceneParam._m0[77u].w * _3092) / _3078;
        float _3096 = _3095 + cbSceneParam._m0[79u].w;
        float _3097 = cbSceneParam._m0[79u].w - _3091;
        float _3103 = sqrt(((_3090 * _3090) + (_3091 * _3091)) + (_3093 * _3093));
        float _3106 = (1.0 - (cbSceneParam._m0[77u].w / _3078)) * _3103;
        float _3111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3298;
        if (abs((_3092 - _3095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3298 = ((((_3096 > 0.0) ? exp2(_3111 * _3096) : (2.0 - exp2(_3113 * _3096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3106;
        }
        else
        {
            float _3242 = 1.0 / cbSceneParam._m0[80u].x;
            float _3243 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : max(_3096, _3097));
            float _3244 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : min(_3096, _3097));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            _3298 = ((abs(_3103 / _3092) * cbSceneParam._m0[80u].y) * ((((_3253 - _3254) * 2.0) - ((exp2(_3111 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0)))) - exp2(_3111 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))))) * _3242)) - ((exp2(_3113 * _3253) - exp2(_3113 * _3254)) * _3242))) + (_3106 * cbSceneParam._m0[80u].z);
        }
        vec4 _3300 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3024, _3025, 1.0), 0.0);
        float _3309 = exp2((_3298 * (-1.44269502162933349609375)) * (1.0 - _3300.w));
        float _3310 = log2(_3309);
        float _3326 = log2(_3044);
        _3115 = (exp2(_3326 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].x)) * _3300.x) / cbSceneParam._m0[78u].x)) + _3041;
        _3117 = (exp2(_3326 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].y)) * _3300.y) / cbSceneParam._m0[78u].y)) + _3042;
        _3119 = (exp2(_3326 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].z)) * _3300.z) / cbSceneParam._m0[78u].z)) + _3043;
        _3121 = _3309 * _3044;
    }
    else
    {
        _3115 = _3041;
        _3117 = _3042;
        _3119 = _3043;
        _3121 = _3044;
    }
    bool _3336;
    vec4 _3130;
    vec4 _3152;
    float _3154;
    float _3158;
    float _3159;
    float _3160;
    float _3163;
    float _3166;
    float _3169;
    float _3170;
    bool _3180;
    for (;;)
    {
        _3130 = cbMatDynParam._m0[0u];
        float _3132 = roundEven(_3130.y);
        bool _3133 = _3132 == 3.0;
        float _3134 = log2(_3121);
        float _3138 = exp2(_3134 * cbSceneParam._m0[78u].x);
        float _3139 = exp2(_3134 * cbSceneParam._m0[78u].y);
        float _3140 = exp2(_3134 * cbSceneParam._m0[78u].z);
        float _3141 = _3138 * _3003;
        float _3142 = _3139 * _3004;
        float _3143 = _3140 * _3005;
        float _3150 = _845 + (-0.5);
        _3152 = cbMtdParam._m0[1u];
        _3154 = _3152.y * _3150;
        float _3157 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3158 = _3157 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3115)));
        _3159 = _3157 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3117)));
        _3160 = _3157 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3119)));
        _3163 = ((_3011 * _3015) * _3138) * _3157;
        _3166 = ((_3012 * _3015) * _3139) * _3157;
        _3169 = ((_3013 * _3015) * _3140) * _3157;
        _3170 = _3150 * 0.999000012874603271484375;
        _3180 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3180)
        {
            if ((cbInstanceData._m0[_896 + 7u].x + _3170) < 0.5)
            {
                _3336 = true;
                break;
            }
        }
        uint _3277 = _897 + uint(_3130.w);
        if ((cbInstanceData._m0[_3277].w < 1.0) && ((cbInstanceData._m0[_3277].w + _3170) < 0.5))
        {
            _3336 = true;
            break;
        }
        if ((_3154 + 1.0) < _3152.x)
        {
            _3336 = true;
            break;
        }
        _3336 = false;
        break;
    }
    float _3540;
    if (_3336)
    {
        discard_state = true;
        _3540 = 0.0;
    }
    else
    {
        _3540 = cbInstanceData._m0[_3016].w;
    }
    SV_Target.x = _3158;
    SV_Target.y = _3159;
    SV_Target.z = _3160;
    SV_Target.w = _3540;
    SV_Target_1.x = _3163;
    SV_Target_1.y = _3166;
    SV_Target_1.z = _3169;
    SV_Target_1.w = cbInstanceData._m0[_3016].w;
    discard_exit();
}


