#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1330;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    float _314 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    vec4 _329 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _331 = _329.x;
    float _355 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[17u].w + 1.0);
    float _3975 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _359 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _331) * _356) + _331;
    vec4 _372 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _389 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _391 = _389.x;
    float _392 = _389.y;
    float _393 = _389.z;
    float _402 = ((_372.z - _393) * _356) + _393;
    float _406 = ((((_372.x - _391) * _356) + _391) * 2.0) + (-1.0);
    float _408 = ((((_372.y - _392) * _356) + _392) * 2.0) + (-1.0);
    float _409 = dot(vec2(_406, _408), vec2(_406, _408));
    float _3986 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    float _434 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _437 = (_434 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _438 = (_434 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _463 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _467 = cbPerFrame._m0[22u].x * 2.0;
    float _468 = _467 * cbMtdParam._m0[22u].y;
    float _475 = ((_463.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _477 = (-0.0) - (cbMtdParam._m0[22u].x * ((_463.x * 0.5) + (-0.25)));
    float _479 = fract(_468);
    float _481 = fract(_468 + 0.5);
    float _492 = abs((_479 * 2.0) + (-1.0));
    vec4 _509 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_479 * _477) + _437) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_475 * _479) + _438) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    vec4 _514 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_481 * _477) + _437) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_475 * _481) + _438) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _556 = (cbMtdParam._m0[23u].y * _434) + TEXCOORD_6.w;
    float _557 = (cbMtdParam._m0[23u].z * _434) + TEXCOORD_9.w;
    vec4 _570 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _574 = _467 * cbMtdParam._m0[18u].x;
    float _579 = ((_570.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _581 = (-0.0) - (cbMtdParam._m0[20u].z * ((_570.x * 0.5) + (-0.25)));
    float _582 = fract(_574);
    float _584 = fract(_574 + 0.5);
    float _585 = _582 * _581;
    float _586 = _579 * _582;
    float _589 = _584 * _581;
    float _590 = _579 * _584;
    float _595 = abs((_582 * 2.0) + (-1.0));
    vec4 _611 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_585 + _556) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_586 + _557) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    vec4 _616 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_589 + _556) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_590 + _557) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _646 = (cbMtdParam._m0[22u].w * _434) + TEXCOORD_6.w;
    float _647 = (cbMtdParam._m0[23u].x * _434) + TEXCOORD_9.w;
    vec4 _667 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_585 + _646) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_586 + _647) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _669 = _667.x;
    float _670 = _667.y;
    float _671 = _667.z;
    vec4 _672 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_589 + _646) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_590 + _647) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _692 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3997 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _701 = (((_693 * _693) * (3.0 - (_693 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _734 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _646) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _647) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4008 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _735 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _739 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_672.x - _669) * _595) + _669)) * _701) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_616.x - _613) * _595) + _613)))) * _735;
    float _743 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_672.y - _670) * _595) + _670)) * _701) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_616.y - _614) * _595) + _614)))) * _735;
    float _747 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_672.z - _671) * _595) + _671)) * _701) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_616.z - _615) * _595) + _615)))) * _735;
    float _751 = _739 - (_739 * _314);
    float _752 = _743 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _743);
    float _753 = _747 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _747);
    float _760 = (_314 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * (1.0 - _314))) * (cbMtdParam._m0[20u].x + 1.0);
    float _4019 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _774 = (cbMtdParam._m0[20u].y * _406) + _406;
    float _775 = (cbMtdParam._m0[20u].y * _408) + _408;
    float _778 = fma(_414, _233 * NORMAL.x, fma(_775, _240 * TANGENT.x, (_226 * _218) * _774));
    float _781 = fma(_414, _233 * NORMAL.y, fma(_775, _240 * TANGENT.y, (_226 * _219) * _774));
    float _784 = fma(_414, _233 * NORMAL.z, fma(_775, _240 * TANGENT.z, (_226 * _220) * _774));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _4030 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _792 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4052 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4063 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4074 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _796 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _901 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _904 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _917 = uint(roundEven(NORMAL.w)) * 13u;
    uint _918 = _917 + 9u;
    uint _919 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_919].z;
    float _4085 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _931 = 1.0 - _796;
    float _932 = _928 * _931;
    float _933 = _929 * _931;
    float _934 = _930 * _931;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _796;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _796;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _796;
    float _942 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _957 = _954.x * TEXCOORD_3.w;
    float _958 = dot(vec3(_789, _790, _791), vec3(_870, _871, _872));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _789) - _870;
    float _966 = (_961 * _790) - _871;
    float _967 = (_961 * _791) - _872;
    float _971 = abs(dot(vec3(_870, _871, _872), vec3(_789, _790, _791)));
    float _4118 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_792);
    float _985 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _991 = (1.0 - _985) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _973;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1055 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1059 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1063 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1087 = _1020 + _789;
        float _1088 = _1024 + _790;
        float _1089 = _1028 + _791;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1055;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1059;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1063;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1055 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1059 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1063 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_789, _790, _791), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4166 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_789, _790, _791), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4199 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_789, _790, _791), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4232 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1374 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1378 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1401 = _1020 + _789;
        float _1402 = _1024 + _790;
        float _1403 = _1028 + _791;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_789, _790, _791), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4295 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_789, _790, _791), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4328 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_789, _790, _791), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4361 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1330;
        _1640 = _1330;
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = _1330;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1342)) + _1342;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1343)) + _1343;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1344)) + _1344;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _965 * 0.5;
    float _1708 = _966 * 0.5;
    float _1709 = _967 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1837 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1840 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1868 = frontier_phi_14_12_ladder;
        }
        float _2039;
        if (_1837 > 0.0)
        {
            _2039 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2039 = frontier_phi_23_19_ladder;
        }
        float _2334;
        if (_1840 > 0.0)
        {
            _2334 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2334 = frontier_phi_35_30_ladder;
        }
        float _2336 = isnan(_2039) ? _1868 : (isnan(_1868) ? _2039 : min(_1868, _2039));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1834) + _1823;
        float _2342 = (_2337 * _1837) + _1827;
        float _2343 = (_2337 * _1840) + _1831;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_13_35_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_13_35_ladder_2;
        _1858 = frontier_phi_13_35_ladder_1;
        _1860 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1776);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1918 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1922 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1926 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1929 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1932 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1935 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2044;
        if (_1929 > 0.0)
        {
            _2044 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2044 = frontier_phi_25_21_ladder;
        }
        float _2361;
        if (_1932 > 0.0)
        {
            _2361 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2361 = frontier_phi_37_32_ladder;
        }
        float _2699;
        if (_1935 > 0.0)
        {
            _2699 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2699 = frontier_phi_47_44_ladder;
        }
        float _2701 = isnan(_2361) ? _2044 : (isnan(_2044) ? _2361 : min(_2044, _2361));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _1929) + _1918;
        float _2707 = (_2702 * _1932) + _1922;
        float _2708 = (_2702 * _1935) + _1926;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2708, cbModelParam._m0[17u].z, fma(_2707, cbModelParam._m0[17u].y, _2706 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2708, cbModelParam._m0[18u].z, fma(_2707, cbModelParam._m0[18u].y, _2706 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2708, cbModelParam._m0[19u].z, fma(_2707, cbModelParam._m0[19u].y, _2706 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_22_47_ladder = _2830.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2830.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2830.x * cbModelParam._m0[1u].z;
        }
        _1954 = frontier_phi_22_47_ladder_2;
        _1956 = frontier_phi_22_47_ladder_1;
        _1958 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1865);
        _1954 = _1938.x * cbModelParam._m0[1u].z;
        _1956 = _1938.y * cbModelParam._m0[1u].z;
        _1958 = _1938.z * cbModelParam._m0[1u].z;
    }
    float _1971 = (((_991 * _942) + _992) * _957) * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1973 = (((_991 * _944) + _992) * _957) * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1975 = (((_991 * _945) + _992) * _957) * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1978 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1973, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1973, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1973, cbSceneParam._m0[91u].y, _1971 * cbSceneParam._m0[91u].x));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2031 = _2018 / _2030;
    float _2032 = _2022 / _2030;
    float _2033 = _2026 / _2030;
    float _2180;
    float _2181;
    float _2182;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2060 = ((uint(_2033 > cbSceneParam._m0[59u].y) + uint(_2033 > cbSceneParam._m0[59u].x)) + uint(_2033 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2061 = _2060 + 43u;
        uint _2069 = _2060 + 44u;
        uint _2077 = _2060 + 45u;
        uint _2085 = _2060 + 46u;
        float _2096 = fma(_2030, cbSceneParam._m0[_2061].w, fma(_2026, cbSceneParam._m0[_2061].z, fma(_2022, cbSceneParam._m0[_2061].y, _2018 * cbSceneParam._m0[_2061].x)));
        float _2100 = fma(_2030, cbSceneParam._m0[_2069].w, fma(_2026, cbSceneParam._m0[_2069].z, fma(_2022, cbSceneParam._m0[_2069].y, _2018 * cbSceneParam._m0[_2069].x)));
        float _2108 = fma(_2030, cbSceneParam._m0[_2085].w, fma(_2026, cbSceneParam._m0[_2085].z, fma(_2022, cbSceneParam._m0[_2085].y, _2018 * cbSceneParam._m0[_2085].x)));
        float _2113 = cbSceneParam._m0[33u].z * _2108;
        float _2115 = cbSceneParam._m0[33u].w * _2108;
        float _2118 = fma(_2030, cbSceneParam._m0[_2077].w, fma(_2026, cbSceneParam._m0[_2077].z, fma(_2022, cbSceneParam._m0[_2077].y, _2018 * cbSceneParam._m0[_2077].x))) / _2108;
        float _2166 = (cbSceneParam._m0[33u].x - sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2173 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2113 + _2096) / _2108, (_2115 + _2100) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2096) / _2108, (_2100 - _2113) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 - _2113) / _2108, (_2100 - _2115) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 - _2115) / _2108, (_2113 + _2100) / _2108), _2118), 0.0)).x), vec4(0.25)));
        _2180 = 1.0 - (_2173 * cbSceneParam._m0[34u].x);
        _2181 = 1.0 - (_2173 * cbSceneParam._m0[34u].y);
        _2182 = 1.0 - (_2173 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2180 = 1.0;
        _2181 = 1.0;
        _2182 = 1.0;
    }
    float _2246;
    float _2248;
    float _2250;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2234 = fma(_2030, cbSceneParam._m0[63u].w, fma(_2026, cbSceneParam._m0[63u].z, fma(_2022, cbSceneParam._m0[63u].y, _2018 * cbSceneParam._m0[63u].x)));
        float _2235 = fma(_2030, cbSceneParam._m0[60u].w, fma(_2026, cbSceneParam._m0[60u].z, fma(_2022, cbSceneParam._m0[60u].y, _2018 * cbSceneParam._m0[60u].x))) / _2234;
        float _2236 = fma(_2030, cbSceneParam._m0[61u].w, fma(_2026, cbSceneParam._m0[61u].z, fma(_2022, cbSceneParam._m0[61u].y, _2018 * cbSceneParam._m0[61u].x))) / _2234;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2235 >= cbSceneParam._m0[64u].x) && (_2236 >= cbSceneParam._m0[64u].y)) && (_2235 <= cbSceneParam._m0[64u].z)) && (_2236 <= cbSceneParam._m0[64u].w))
        {
            float _2374 = fma(_2030, cbSceneParam._m0[62u].w, fma(_2026, cbSceneParam._m0[62u].z, fma(_2022, cbSceneParam._m0[62u].y, _2018 * cbSceneParam._m0[62u].x))) / _2234;
            float _2378 = isnan(cbSceneParam._m0[41u].w) ? _2374 : (isnan(_2374) ? cbSceneParam._m0[41u].w : max(_2374, cbSceneParam._m0[41u].w));
            float _2421 = (cbSceneParam._m0[33u].x - sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
            float _2428 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2235, cbSceneParam._m0[33u].w + _2236), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2235, _2236 - cbSceneParam._m0[33u].z), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2235 - cbSceneParam._m0[33u].z, _2236 - cbSceneParam._m0[33u].w), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2235 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2236), _2378), 0.0)).x), vec4(0.25)));
            float _2432 = 1.0 - (_2428 * cbSceneParam._m0[34u].x);
            float _2433 = 1.0 - (_2428 * cbSceneParam._m0[34u].y);
            float _2434 = 1.0 - (_2428 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
            frontier_phi_34_33_ladder_1 = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_34_33_ladder_2 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
        }
        else
        {
            frontier_phi_34_33_ladder = _2182;
            frontier_phi_34_33_ladder_1 = _2181;
            frontier_phi_34_33_ladder_2 = _2180;
        }
        _2246 = frontier_phi_34_33_ladder_2;
        _2248 = frontier_phi_34_33_ladder_1;
        _2250 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2246 = _2180;
        _2248 = _2181;
        _2250 = _2182;
    }
    uvec4 _2255 = floatBitsToUint(cbInstanceData._m0[_917 + 5u]);
    uint _2257 = _2255.x * 14u;
    uint _2258 = _2257 + 13u;
    float _2265 = _957 + (-1.0);
    float _2270 = (cbLight._m0[_2258].x * _2265) + 1.0;
    float _2271 = (cbLight._m0[_2258].y * _2265) + 1.0;
    float _2272 = (cbLight._m0[_2258].z * _2265) + 1.0;
    float _2273 = (cbLight._m0[_2258].w * _2265) + 1.0;
    uint _2274 = _2257 + 5u;
    float _2280 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2284 = _2257 + 4u;
    float _2293 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2297 = _2257 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_789, _790, _791));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_789, _790, _791));
    float _4539 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4550 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2274].x * _2280) * _2318) + (((cbLight._m0[_2284].x * _2246) * _2293) * _2316);
    float _2326 = ((_2280 * cbLight._m0[_2274].y) * _2318) + (((cbLight._m0[_2284].y * _2248) * _2293) * _2316);
    float _2327 = ((_2280 * cbLight._m0[_2274].z) * _2318) + (((cbLight._m0[_2284].z * _2250) * _2293) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2257 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2435;
    float _2437;
    float _2439;
    if (_2333)
    {
        _2435 = _2325;
        _2437 = _2326;
        _2439 = _2327;
    }
    else
    {
        uint _2443 = _2257 + 6u;
        float _2459 = (dot(vec3(cbLight._m0[_2257 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4561 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2462 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2435 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2325;
        _2437 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2326;
        _2439 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2327;
    }
    bool _2442 = _2331.y == 0u;
    float _2497;
    float _2499;
    float _2501;
    if (_2442)
    {
        _2497 = _2435;
        _2499 = _2437;
        _2501 = _2439;
    }
    else
    {
        uint _2670 = _2257 + 7u;
        float _2686 = (dot(vec3(cbLight._m0[_2257 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2687 = _2686 * _2686;
        float _4577 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2688 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2689 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2497 = (((cbLight._m0[_2670].x * 0.3183098733425140380859375) * _2688) * _2689) + _2435;
        _2499 = (((cbLight._m0[_2670].y * 0.3183098733425140380859375) * _2688) * _2689) + _2437;
        _2501 = (((cbLight._m0[_2670].z * 0.3183098733425140380859375) * _2688) * _2689) + _2439;
    }
    uint _2504 = _2257 + 8u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _792) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2257].x + _870;
    float _2520 = cbLight._m0[_2257].y + _871;
    float _2521 = cbLight._m0[_2257].z + _872;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2257].xyz));
    float _4593 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2533 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2534 = dot(vec3(_789, _790, _791), vec3(_2526, _2527, _2528));
    float _4615 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2538 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2526, _2527, _2528));
    float _4626 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2542 = _2518 * _2518;
    float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
    float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2555 = 0.959999978542327880859375 - _939;
    float _2557 = 0.959999978542327880859375 - _940;
    float _2558 = 0.959999978542327880859375 - _941;
    float _2565 = 1.0 - _2518;
    float _2576 = (0.5 / (((_2533 * ((_2532 * _2565) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2565) + _2518) * _2532))) * _2532;
    float _4637 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
    uint _2592 = _2257 + 9u;
    float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _792) * 0.949999988079071044921875);
    float _2604 = _2603 * _2603;
    float _2605 = cbLight._m0[_2297].x + _870;
    float _2606 = cbLight._m0[_2297].y + _871;
    float _2607 = cbLight._m0[_2297].z + _872;
    float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
    float _2612 = _2611 * _2605;
    float _2613 = _2611 * _2606;
    float _2614 = _2611 * _2607;
    float _2615 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2297].xyz));
    float _4648 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2619 = dot(vec3(_789, _790, _791), vec3(_2612, _2613, _2614));
    float _4659 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2623 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2612, _2613, _2614));
    float _4670 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2627 = _2604 * _2604;
    float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
    float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
    float _2645 = 1.0 - _2604;
    float _2655 = (0.5 / (((_2533 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2645) + _2604) * _2618))) * _2618;
    float _4681 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2657 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
    float _2667 = (((((_2638 * _2555) + _942) * cbLight._m0[_2592].x) * _2657) * _2280) + ((((cbLight._m0[_2504].x * _2246) * ((_2554 * _2555) + _942)) * _2578) * _2293);
    float _2668 = (((((_2638 * _2557) + _944) * cbLight._m0[_2592].y) * _2657) * _2280) + ((((cbLight._m0[_2504].y * _2248) * ((_2554 * _2557) + _944)) * _2578) * _2293);
    float _2669 = (((((_2638 * _2558) + _945) * cbLight._m0[_2592].z) * _2657) * _2280) + ((((cbLight._m0[_2504].z * _2250) * ((_2554 * _2558) + _945)) * _2578) * _2293);
    float _2725;
    float _2727;
    float _2729;
    if (_2333)
    {
        _2725 = _2667;
        _2727 = _2668;
        _2729 = _2669;
    }
    else
    {
        uint _2731 = _2257 + 2u;
        uint _2735 = _2257 + 10u;
        float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2731].w)) * _792) * 0.949999988079071044921875);
        float _2750 = _2749 * _2749;
        float _2751 = cbLight._m0[_2731].x + _870;
        float _2752 = cbLight._m0[_2731].y + _871;
        float _2753 = cbLight._m0[_2731].z + _872;
        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
        float _2758 = _2757 * _2751;
        float _2759 = _2757 * _2752;
        float _2760 = _2757 * _2753;
        float _2761 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2731].xyz));
        float _4692 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2765 = dot(vec3(_789, _790, _791), vec3(_2758, _2759, _2760));
        float _4703 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2769 = dot(vec3(cbLight._m0[_2731].xyz), vec3(_2758, _2759, _2760));
        float _4714 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2773 = _2750 * _2750;
        float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
        float _2784 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2791 = 1.0 - _2750;
        float _2801 = (0.5 / (((_2533 * ((_2764 * _2791) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2791) + _2750) * _2764))) * _2764;
        float _4725 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2725 = (((((_2784 * _2555) + _942) * cbLight._m0[_2735].x) * _2803) * _2804) + _2667;
        _2727 = (((((_2784 * _2557) + _944) * cbLight._m0[_2735].y) * _2803) * _2804) + _2668;
        _2729 = (((((_2784 * _2558) + _945) * cbLight._m0[_2735].z) * _2803) * _2804) + _2669;
    }
    float _2835;
    float _2837;
    float _2839;
    if (_2442)
    {
        _2835 = _2725;
        _2837 = _2727;
        _2839 = _2729;
    }
    else
    {
        uint _2846 = _2257 + 3u;
        uint _2850 = _2257 + 11u;
        float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2846].w)) * _792) * 0.949999988079071044921875);
        float _2865 = _2864 * _2864;
        float _2866 = cbLight._m0[_2846].x + _870;
        float _2867 = cbLight._m0[_2846].y + _871;
        float _2868 = cbLight._m0[_2846].z + _872;
        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
        float _2873 = _2872 * _2866;
        float _2874 = _2872 * _2867;
        float _2875 = _2872 * _2868;
        float _2876 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2846].xyz));
        float _4741 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2880 = dot(vec3(_789, _790, _791), vec3(_2873, _2874, _2875));
        float _4752 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2884 = dot(vec3(cbLight._m0[_2846].xyz), vec3(_2873, _2874, _2875));
        float _4763 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2888 = _2865 * _2865;
        float _2892 = ((_2883 * _2883) * (_2888 + (-1.0))) + 1.0;
        float _2899 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2906 = 1.0 - _2865;
        float _2916 = (0.5 / (((_2533 * ((_2879 * _2906) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2906) + _2865) * _2879))) * _2879;
        float _4774 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2918 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2888 / ((_2892 * _2892) * 3.141590118408203125));
        float _2919 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2835 = (((((_2899 * _2555) + _942) * cbLight._m0[_2850].x) * _2918) * _2919) + _2725;
        _2837 = (((((_2899 * _2557) + _944) * cbLight._m0[_2850].y) * _2918) * _2919) + _2727;
        _2839 = (((((_2899 * _2558) + _945) * cbLight._m0[_2850].z) * _2918) * _2919) + _2729;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2255.y == 0u)
    {
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.x;
        uint _2952 = uint((float(_2940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2941))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2941)));
        float _2962 = (log2(_2033 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2963 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        uint _2966 = uint(isnan(14.0) ? _2963 : (isnan(_2963) ? 14.0 : min(_2963, 14.0)));
        uvec4 _2971 = texelFetch(g_lightClusterGridBuffer, int(((_2966 << 2u) + (_2952 << 6u)) >> 2u));
        uint _2972 = _2971.x;
        uint _2973 = _2940.z;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((((1u << ((_2973 >> 4u) & 15u)) + 4294967295u) & _2972) == 0u) || ((_2973 & 240u) == 0u))
        {
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
        }
        else
        {
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            uint _3239 = 0u;
            uint _3248;
            bool _3249;
            for (;;)
            {
                _3248 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                _3249 = _3248 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3249)
                {
                    frontier_phi_66_pred = _3238;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                else
                {
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    uint _3363;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3248;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3367 = uint(findLSB(_3363)) + (_3239 << 5u);
                        uint _3364 = (_3363 + 4294967295u) & _3363;
                        uint _3369 = _3367 * 48u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3389 = (_3367 * 48u) + 4u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3408 = (_3367 * 48u) + 8u;
                        vec3 _3419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x));
                        float _3423 = _3383.x - _2031;
                        float _3424 = _3383.y - _2032;
                        float _3425 = _3383.z - _2033;
                        float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                        float _3429 = inversesqrt(_3426);
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3433 = dot(vec3(_898, _901, _904), vec3(_3430, _3431, _3432));
                        float _3438 = 1.0 - (_3426 * _3383.w);
                        float _4800 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3440 = sqrt(_3426) * _3402.w;
                        float _3443 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3433) + _3444;
                        float _3450 = _3440 * _3440;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3439) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2031;
                        float _3459 = (-0.0) - _2032;
                        float _3460 = (-0.0) - _2033;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _973;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_898, _901, _904), vec3(_3465, _3466, _3467));
                        float _4816 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3499 = dot(vec3(_898, _901, _904), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4827 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3433) + _3508;
                        float _4838 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4849 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3439;
                        _3292 = (_3454 * _3402.x) + _3360;
                        _3293 = (_3454 * _3402.y) + _3361;
                        _3294 = (_3454 * _3402.z) + _3362;
                        _3289 = (_3534 * _3419.x) + _3357;
                        _3290 = (_3534 * _3419.y) + _3358;
                        _3291 = (_3534 * _3419.z) + _3359;
                        if (_3364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3364;
                        }
                    }
                    frontier_phi_66_pred = _3294;
                    frontier_phi_66_pred_1 = _3293;
                    frontier_phi_66_pred_2 = _3292;
                    frontier_phi_66_pred_3 = _3291;
                    frontier_phi_66_pred_4 = _3290;
                    frontier_phi_66_pred_5 = _3289;
                }
                _3092 = frontier_phi_66_pred;
                _3090 = frontier_phi_66_pred_1;
                _3088 = frontier_phi_66_pred_2;
                _3086 = frontier_phi_66_pred_3;
                _3084 = frontier_phi_66_pred_4;
                _3082 = frontier_phi_66_pred_5;
                uint _3240 = _3239 + 1u;
                if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3233 = _3082;
                    _3234 = _3084;
                    _3235 = _3086;
                    _3236 = _3088;
                    _3237 = _3090;
                    _3238 = _3092;
                    _3239 = _3240;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
        }
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.z;
        uint _3098 = (_3096 >> 8u) & 15u;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((4294967295u << _3098) & _2972) == 0u)
        {
            _3201 = _3081;
            _3203 = _3083;
            _3205 = _3085;
            _3207 = _3087;
            _3209 = _3089;
            _3211 = _3091;
        }
        else
        {
            float _3226 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
            float _3227 = _3226 * _2031;
            float _3228 = _3226 * _2032;
            float _3229 = _3226 * _2033;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3098 < ((_3096 >> 12u) & 15u))
            {
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3340 = _3081;
                float _3341 = _3083;
                float _3342 = _3085;
                float _3343 = _3087;
                float _3344 = _3089;
                float _3345 = _3091;
                uint _3346 = _3098;
                uint _3355;
                bool _3356;
                for (;;)
                {
                    _3355 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                    _3356 = _3355 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3356)
                    {
                        frontier_phi_72_pred = _3345;
                        frontier_phi_72_pred_1 = _3344;
                        frontier_phi_72_pred_2 = _3343;
                        frontier_phi_72_pred_3 = _3342;
                        frontier_phi_72_pred_4 = _3341;
                        frontier_phi_72_pred_5 = _3340;
                    }
                    else
                    {
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        float _3555 = _3343;
                        float _3556 = _3344;
                        float _3557 = _3345;
                        uint _3558 = _3355;
                        uint _3559;
                        vec4 _3584;
                        float _3585;
                        vec4 _3600;
                        vec3 _3612;
                        vec4 _3627;
                        vec4 _3642;
                        float _3688;
                        bool _3689;
                        for (;;)
                        {
                            uint _3569 = ((_3346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3558));
                            _3559 = (_3558 + 4294967295u) & _3558;
                            uint _3571 = _3569 * 40u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3585 = _3584.w;
                            uint _3587 = (_3569 * 40u) + 4u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3569 * 40u) + 8u;
                            _3612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x));
                            uint _3614 = (_3569 * 40u) + 16u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3569 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3569 * 40u) + 24u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3663 = (_3569 * 40u) + 28u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3688 = fma(_2033, _3676.z, fma(_2032, _3676.y, _3676.x * _2031)) + _3676.w;
                            _3689 = !((fma(_2033, _3657.z, fma(_2032, _3657.y, _3657.x * _2031)) + _3657.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3689)
                            {
                                float _3716 = _3584.x - _2031;
                                float _3717 = _3584.y - _2032;
                                float _3718 = _3584.z - _2033;
                                float _3719 = dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718));
                                float _3722 = inversesqrt(_3719);
                                float _3723 = _3722 * _3716;
                                float _3724 = _3722 * _3717;
                                float _3725 = _3722 * _3718;
                                float _3729 = 1.0 - (_3719 / (_3585 * _3585));
                                float _4860 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3734 = sqrt(_3719) * _3600.w;
                                float _3736 = 1.39999997615814208984375 / (_3734 + 1.39999997615814208984375);
                                float _3737 = _3736 * _3736;
                                float _3740 = ((1.0 - _3737) * dot(vec3(_3723, _3724, _3725), vec3(_898, _901, _904))) + _3737;
                                float _3743 = _3734 * _3734;
                                float _3747 = (fma(_2033, _3627.z, fma(_2032, _3627.y, _3627.x * _2031)) + _3627.w) / _3688;
                                float _3748 = (fma(_2033, _3642.z, fma(_2032, _3642.y, _3642.x * _2031)) + _3642.w) / _3688;
                                float _3752 = 1.0 - dot(vec2(_3747, _3748), vec2(_3747, _3748));
                                float _4876 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3754 = _3753 * (((isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0))) * _3730) / ((_3743 * 0.699999988079071044921875) + 1.0));
                                float _3766 = exp2(log2(1.0 / ((_3743 * 3.5) + 5.0)) * 0.25);
                                float _3767 = 1.0 - _973;
                                float _3774 = sqrt(1.0 - ((1.0 - (_3767 * _3767)) * (1.0 - (_3766 * _3766))));
                                float _3775 = _3774 * _3774;
                                float _3776 = _3775 * _3775;
                                float _3777 = _3723 - _3227;
                                float _3778 = _3724 - _3228;
                                float _3779 = _3725 - _3229;
                                float _3783 = inversesqrt(dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779)));
                                float _3787 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3227, (-0.0) - _3228, (-0.0) - _3229));
                                float _4887 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3791 = dot(vec3(_898, _901, _904), vec3(_3783 * _3777, _3783 * _3778, _3783 * _3779));
                                float _4898 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3794 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3798 = ((_3794 * _3794) * (_3776 + (-1.0))) + 1.0;
                                float _3799 = _3736 * _3775;
                                float _3800 = _3799 * _3799;
                                float _3806 = ((1.0 - _3800) * dot(vec3(_898, _901, _904), vec3(_3723, _3724, _3725))) + _3800;
                                float _4909 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3807 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3808 = 1.0 - _3775;
                                float _3818 = (0.5 / (((_3807 * ((_3790 * _3808) + _3775)) + 9.9999999392252902907785028219223e-09) + (((_3807 * _3808) + _3775) * _3790))) * _3807;
                                float _4920 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3828 = (_3753 * _3730) * (((_3776 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3798 * _3798) * ((_3743 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3754 * _3600.y;
                                frontier_phi_78_pred_1 = _3754 * _3600.x;
                                frontier_phi_78_pred_2 = _3828 * _3612.z;
                                frontier_phi_78_pred_3 = _3828 * _3612.y;
                                frontier_phi_78_pred_4 = _3828 * _3612.x;
                                frontier_phi_78_pred_5 = _3754 * _3600.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3836 = frontier_phi_78_pred;
                            _3835 = frontier_phi_78_pred_1;
                            _3834 = frontier_phi_78_pred_2;
                            _3833 = frontier_phi_78_pred_3;
                            _3832 = frontier_phi_78_pred_4;
                            _3837 = frontier_phi_78_pred_5;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            if (_3559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3559;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3544;
                        frontier_phi_72_pred_1 = _3543;
                        frontier_phi_72_pred_2 = _3542;
                        frontier_phi_72_pred_3 = _3541;
                        frontier_phi_72_pred_4 = _3540;
                        frontier_phi_72_pred_5 = _3539;
                    }
                    _3212 = frontier_phi_72_pred;
                    _3210 = frontier_phi_72_pred_1;
                    _3208 = frontier_phi_72_pred_2;
                    _3206 = frontier_phi_72_pred_3;
                    _3204 = frontier_phi_72_pred_4;
                    _3202 = frontier_phi_72_pred_5;
                    uint _3347 = _3346 + 1u;
                    if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3340 = _3202;
                        _3341 = _3204;
                        _3342 = _3206;
                        _3343 = _3208;
                        _3344 = _3210;
                        _3345 = _3212;
                        _3346 = _3347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3212;
                frontier_phi_60_61_ladder_1 = _3210;
                frontier_phi_60_61_ladder_2 = _3206;
                frontier_phi_60_61_ladder_3 = _3204;
                frontier_phi_60_61_ladder_4 = _3202;
                frontier_phi_60_61_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_60_61_ladder = _3091;
                frontier_phi_60_61_ladder_1 = _3089;
                frontier_phi_60_61_ladder_2 = _3085;
                frontier_phi_60_61_ladder_3 = _3083;
                frontier_phi_60_61_ladder_4 = _3081;
                frontier_phi_60_61_ladder_5 = _3087;
            }
            _3201 = frontier_phi_60_61_ladder_4;
            _3203 = frontier_phi_60_61_ladder_3;
            _3205 = frontier_phi_60_61_ladder_2;
            _3207 = frontier_phi_60_61_ladder_5;
            _3209 = frontier_phi_60_61_ladder_1;
            _3211 = frontier_phi_60_61_ladder;
        }
        float _3216 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2985 = (_3216 * _3207) + _2497;
        _2987 = (_3216 * _3209) + _2499;
        _2989 = (_3216 * _3211) + _2501;
        _2991 = ((_3201 * _942) * _3216) + _2835;
        _2993 = ((_3203 * _944) * _3216) + _2837;
        _2995 = ((_3205 * _945) * _3216) + _2839;
    }
    else
    {
        _2985 = _2497;
        _2987 = _2499;
        _2989 = _2501;
        _2991 = _2835;
        _2993 = _2837;
        _2995 = _2839;
    }
    uint _3001 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _3007 = cbInstanceData._m0[_3001].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_514.x - _511) * _492) + _511)) - _751) * _761) + _751);
    float _3008 = cbInstanceData._m0[_3001].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_514.y - _512) * _492) + _512)) - _752) * _761) + _752);
    float _3009 = cbInstanceData._m0[_3001].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_514.z - _513) * _492) + _513)) - _753) * _761) + _753);
    float _4936 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4947 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4958 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _3026 = (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2985 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _957))) + ((_2991 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + _3007;
    float _3028 = (_3008 + ((_2993 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2987 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _957)));
    float _3030 = (_3009 + ((_2995 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2989 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _957)));
    float _4984 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3043 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
    uint _3044 = _917 + 6u;
    float _3052 = _878 / cbSceneParam._m0[86u].x;
    float _3053 = _879 / cbSceneParam._m0[86u].y;
    vec4 _3067 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3052, _3053, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3069 = _3067.x;
    float _3070 = _3067.y;
    float _3071 = _3067.z;
    float _3072 = _3067.w;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3106 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3107 = _3106 / _812;
        float _3118 = _3107 * _863;
        float _3119 = _864 * _3107;
        float _3120 = (-0.0) - _3119;
        float _3121 = _3107 * _865;
        float _3123 = (cbSceneParam._m0[77u].w * _3120) / _3106;
        float _3124 = _3123 + cbSceneParam._m0[79u].w;
        float _3125 = cbSceneParam._m0[79u].w - _3119;
        float _3131 = sqrt(((_3118 * _3118) + (_3119 * _3119)) + (_3121 * _3121));
        float _3134 = (1.0 - (cbSceneParam._m0[77u].w / _3106)) * _3131;
        float _3139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3120 - _3123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3124 > 0.0) ? exp2(_3139 * _3124) : (2.0 - exp2(_3141 * _3124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3134;
        }
        else
        {
            float _3262 = 1.0 / cbSceneParam._m0[80u].x;
            float _3263 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : max(_3124, _3125));
            float _3264 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : min(_3124, _3125));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            _3302 = ((abs(_3131 / _3120) * cbSceneParam._m0[80u].y) * ((((_3273 - _3274) * 2.0) - ((exp2(_3139 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0)))) - exp2(_3139 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))))) * _3262)) - ((exp2(_3141 * _3273) - exp2(_3141 * _3274)) * _3262))) + (_3134 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3052, _3053, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3072);
        _3143 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3069;
        _3145 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3070;
        _3147 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3071;
        _3149 = _3313 * _3072;
    }
    else
    {
        _3143 = _3069;
        _3145 = _3070;
        _3147 = _3071;
        _3149 = _3072;
    }
    float _3160 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3161 = _3160 == 3.0;
    float _3162 = log2(_3149);
    float _3166 = exp2(_3162 * cbSceneParam._m0[78u].x);
    float _3167 = exp2(_3162 * cbSceneParam._m0[78u].y);
    float _3168 = exp2(_3162 * cbSceneParam._m0[78u].z);
    float _3169 = _3166 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)));
    float _3170 = _3167 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)));
    float _3171 = _3168 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0)));
    float _3180 = (_3160 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3180 * (_3161 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.y = _3180 * (_3161 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
    SV_Target.z = _3180 * (_3161 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3147)));
    SV_Target.w = cbInstanceData._m0[_3044].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3007) * _3043) * _3166) * _3180;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3008) * _3043) * _3167) * _3180;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3009) * _3043) * _3168) * _3180;
    SV_Target_1.w = cbInstanceData._m0[_3044].w;
}


