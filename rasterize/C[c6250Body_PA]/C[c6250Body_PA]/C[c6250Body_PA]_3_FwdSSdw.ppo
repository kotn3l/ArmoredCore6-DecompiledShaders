#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_24;
layout(set = 0, binding = 11) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_25;
layout(set = 0, binding = 12) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_26;
layout(set = 0, binding = 13) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_17;
layout(set = 0, binding = 6) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_21;
layout(set = 0, binding = 8) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_22;
layout(set = 0, binding = 9) uniform texture2D C_c6250Body_PA_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in float TEXCOORD_13;
layout(location = 7, component = 2) in float TEXCOORD_14;
layout(location = 7, component = 3) in float TEXCOORD_15;
layout(location = 8) in float TEXCOORD_16;
layout(location = 8, component = 1) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1534;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[8u].w));
    vec4 _337 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _366 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w));
    float _389 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[16u].w)).x + 0.00999999977648258209228515625;
    float _397 = (TEXCOORD_3.x - ((cbMtdParam._m0[17u].z * (1.0 - TEXCOORD_3.x)) * _389)) * (cbMtdParam._m0[17u].w + 1.0);
    float _3920 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _405 = (_398 * ((_366.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _406 = (_398 * ((_366.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _407 = (_398 * ((_366.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    float _413 = (TEXCOORD_9.x - ((cbMtdParam._m0[19u].y * (1.0 - TEXCOORD_9.x)) * _389)) * (cbMtdParam._m0[19u].x + 1.0);
    float _3931 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _421 = (((_337.x * cbMtdParam._m0[14u].x) - _405) * _414) + _405;
    float _422 = (((_337.y * cbMtdParam._m0[14u].y) - _406) * _414) + _406;
    float _423 = (((_337.z * cbMtdParam._m0[14u].z) - _407) * _414) + _407;
    float _439 = cbMtdParam._m0[20u].w * TEXCOORD_15;
    float _444 = 1.0 - _439;
    float _447 = cbMtdParam._m0[20u].x + 1.0;
    float _448 = (_439 - (((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_25, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[11u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[19u].w) * _444)) * _447;
    float _3942 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _456 = (_449 * ((_309.x * cbMtdParam._m0[15u].x) - _421)) + _421;
    float _457 = (_449 * ((_309.y * cbMtdParam._m0[15u].y) - _422)) + _422;
    float _458 = (_449 * ((_309.z * cbMtdParam._m0[15u].z) - _423)) + _423;
    vec4 _471 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _473 = _471.x;
    float _491 = ((texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w)).x - _473) * _398) + _473;
    float _493 = _491 - (_491 * _414);
    float _497 = (_439 - ((_389 * cbMtdParam._m0[19u].w) * _444)) * _447;
    float _3953 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = _493 - (_493 * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _516 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _538 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[14u].w));
    vec4 _554 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[15u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _558 = _554.z;
    float _567 = ((_538.z - _558) * _398) + _558;
    float _570 = ((((_538.x - _556) * _398) + _556) * 2.0) + (-1.0);
    float _571 = ((((_538.y - _557) * _398) + _557) * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3964 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))));
    float _582 = (((_516.z - _567) * TEXCOORD_9.x) * cbMtdParam._m0[19u].z) + _567;
    vec4 _595 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[10u].w));
    float _612 = (((((((_595.z - _582) * TEXCOORD_15) * cbMtdParam._m0[21u].y) + _582) * cbMtdParam._m0[21u].z) - _582) * _449) + _582;
    float _628 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    float _631 = (_628 * cbMtdParam._m0[24u].y) + TEXCOORD_6.w;
    float _632 = (_628 * cbMtdParam._m0[24u].z) + TEXCOORD_9.w;
    vec4 _657 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[24u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[25u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _661 = cbPerFrame._m0[22u].x * 2.0;
    float _662 = _661 * cbMtdParam._m0[22u].y;
    float _669 = ((_657.y * 0.5) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _671 = (-0.0) - (cbMtdParam._m0[22u].x * ((_657.x * 0.5) + (-0.25)));
    float _673 = fract(_662);
    float _675 = fract(_662 + 0.5);
    float _686 = abs((_673 * 2.0) + (-1.0));
    vec4 _703 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_673 * _671) + _631) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_669 * _673) + _632) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    vec4 _708 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_26, SS_DiffuseMap), vec2((((_675 * _671) + _631) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_669 * _675) + _632) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _750 = (cbMtdParam._m0[23u].y * _628) + TEXCOORD_6.w;
    float _751 = (cbMtdParam._m0[23u].z * _628) + TEXCOORD_9.w;
    vec4 _764 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * ((cbMtdParam._m0[23u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((cbMtdParam._m0[24u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[7u].w));
    float _768 = _661 * cbMtdParam._m0[18u].x;
    float _773 = ((_764.y * 0.5) + (-0.25)) * cbMtdParam._m0[20u].z;
    float _775 = (-0.0) - (cbMtdParam._m0[20u].z * ((_764.x * 0.5) + (-0.25)));
    float _776 = fract(_768);
    float _778 = fract(_768 + 0.5);
    float _779 = _776 * _775;
    float _780 = _773 * _776;
    float _783 = _778 * _775;
    float _784 = _773 * _778;
    float _789 = abs((_776 * 2.0) + (-1.0));
    vec4 _805 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_779 + _750) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_780 + _751) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _807 = _805.x;
    float _808 = _805.y;
    float _809 = _805.z;
    vec4 _810 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_783 + _750) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((_784 + _751) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _840 = (cbMtdParam._m0[22u].w * _628) + TEXCOORD_6.w;
    float _841 = (cbMtdParam._m0[23u].x * _628) + TEXCOORD_9.w;
    vec4 _861 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_779 + _840) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_780 + _841) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _863 = _861.x;
    float _864 = _861.y;
    float _865 = _861.z;
    vec4 _866 = texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_4, SS_DiffuseMap), vec2(((_783 + _840) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, ((_784 + _841) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _886 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3975 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _897 = (((_887 * _887) * (3.0 - (_887 * 2.0))) * cbMtdParam._m0[17u].x) - cbMtdParam._m0[17u].y;
    float _930 = (TEXCOORD_6.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(C_c6250Body_PA_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _840) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _841) + cbTextureTilingScale._m0[9u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3986 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _931 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _935 = (((cbSceneParam._m0[72u].y * TEXCOORD_12) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].y) * (((_866.x - _863) * _789) + _863)) * _897) + ((cbMtdParam._m0[13u].x * cbMtdParam._m0[16u].w) * (((_810.x - _807) * _789) + _807)))) * _931;
    float _939 = (((cbSceneParam._m0[72u].y * TEXCOORD_13) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].y) * (((_866.y - _864) * _789) + _864)) * _897) + ((cbMtdParam._m0[13u].y * cbMtdParam._m0[16u].w) * (((_810.y - _808) * _789) + _808)))) * _931;
    float _943 = (((cbSceneParam._m0[72u].y * TEXCOORD_14) * cbMtdParam._m0[18u].w) * ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].y) * (((_866.z - _865) * _789) + _865)) * _897) + ((cbMtdParam._m0[13u].z * cbMtdParam._m0[16u].w) * (((_810.z - _809) * _789) + _809)))) * _931;
    float _947 = _935 - (_935 * _439);
    float _948 = _939 - ((cbMtdParam._m0[20u].w * TEXCOORD_16) * _939);
    float _949 = _943 - ((cbMtdParam._m0[20u].w * TEXCOORD_17) * _943);
    float _978 = ((((((_516.x * 2.0) + (-1.0)) * TEXCOORD_9.x) * cbMtdParam._m0[18u].z) + _570) + (cbMtdParam._m0[20u].y * _570)) + (((((_595.x * 2.0) + (-1.0)) * TEXCOORD_15) * cbMtdParam._m0[21u].x) * _449);
    float _981 = ((((((_516.y * 2.0) + (-1.0)) * TEXCOORD_9.y) * cbMtdParam._m0[18u].z) + _571) + (cbMtdParam._m0[20u].y * _571)) + (((((_595.y * 2.0) + (-1.0)) * TEXCOORD_16) * cbMtdParam._m0[21u].x) * _449);
    float _984 = fma(_577, _245 * NORMAL.x, fma(_981, _252 * TANGENT.x, (_238 * _230) * _978));
    float _987 = fma(_577, _245 * NORMAL.y, fma(_981, _252 * TANGENT.y, (_238 * _231) * _978));
    float _990 = fma(_577, _245 * NORMAL.z, fma(_981, _252 * TANGENT.z, (_238 * _232) * _978));
    float _994 = inversesqrt(dot(vec3(_984, _987, _990), vec3(_984, _987, _990)));
    float _995 = _994 * _984;
    float _996 = _994 * _987;
    float _997 = _994 * _990;
    float _3997 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _998 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4019 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4030 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4041 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _1002 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1018 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1068 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1058);
    float _1069 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1058);
    float _1070 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1058);
    float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
    float _1075 = _1068 * _1074;
    float _1076 = _1069 * _1074;
    float _1077 = _1070 * _1074;
    float _1083 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1084 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1102 = fma(_997, cbSceneParam._m0[5u].z, fma(_996, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _995));
    float _1105 = fma(_997, cbSceneParam._m0[6u].z, fma(_996, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _995));
    float _1108 = fma(_997, cbSceneParam._m0[7u].z, fma(_996, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _995));
    uint _1121 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1122 = _1121 + 9u;
    uint _1123 = _1122 + uint(cbMatDynParam._m0[0u].w);
    float _1129 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1123].x;
    float _1130 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1123].y;
    float _1131 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1123].z;
    float _4052 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1132 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1133 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1134 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1135 = 1.0 - _1002;
    float _1136 = _1132 * _1135;
    float _1137 = _1133 * _1135;
    float _1138 = _1134 * _1135;
    float _1143 = (_1132 + (-0.039999999105930328369140625)) * _1002;
    float _1144 = (_1133 + (-0.039999999105930328369140625)) * _1002;
    float _1145 = (_1134 + (-0.039999999105930328369140625)) * _1002;
    float _1146 = _1143 + 0.039999999105930328369140625;
    float _1148 = _1144 + 0.039999999105930328369140625;
    float _1149 = _1145 + 0.039999999105930328369140625;
    vec4 _1158 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1083, cbSceneParam._m0[86u].y * _1084));
    float _1161 = _1158.x * TEXCOORD_3.w;
    float _1162 = dot(vec3(_995, _996, _997), vec3(_1075, _1076, _1077));
    float _1165 = _1162 * 2.0;
    float _1169 = (_1165 * _995) - _1075;
    float _1170 = (_1165 * _996) - _1076;
    float _1171 = (_1165 * _997) - _1077;
    float _1175 = abs(dot(vec3(_1075, _1076, _1077), vec3(_995, _996, _997)));
    float _4085 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1177 = sqrt(_998);
    float _1189 = exp2((_1177 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1177 * 3.0));
    float _1195 = (1.0 - _1189) * ((_1177 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1196 = _1189 * _1177;
    float _1224 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1228 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1232 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1533;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1259 = fma(_1232, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1224));
        float _1263 = fma(_1232, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1224));
        float _1267 = fma(_1232, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1224));
        float _1291 = _1224 + _995;
        float _1292 = _1228 + _996;
        float _1293 = _1232 + _997;
        float _1303 = fma(_1293, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291)) - _1259;
        float _1304 = fma(_1293, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291)) - _1263;
        float _1305 = fma(_1293, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291)) - _1267;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1259 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1263 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[34u].z) + ((((((_1267 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1361 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1327.x + (-0.5));
        float _1363 = _1361 * (_1327.y + (-0.5));
        float _1364 = _1361 * (_1327.z + (-0.5));
        float _1371 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1334.x + (-0.5));
        float _1373 = _1371 * (_1334.y + (-0.5));
        float _1374 = _1371 * (_1334.z + (-0.5));
        float _1381 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1341.x + (-0.5));
        float _1383 = _1381 * (_1341.y + (-0.5));
        float _1384 = _1381 * (_1341.z + (-0.5));
        float _1391 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1348.x + (-0.5));
        float _1393 = _1391 * (_1348.y + (-0.5));
        float _1394 = _1391 * (_1348.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1415 = (dot(vec3(_995, _996, _997), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1425 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4133 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1427 + 1.0))) + _1432) * _1395;
        float _1442 = _1363 * 0.5;
        float _1443 = _1373 * 0.5;
        float _1444 = _1383 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_995, _996, _997), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4166 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1469 + 1.0))) + _1474) * _1396;
        float _1484 = _1364 * 0.5;
        float _1485 = _1374 * 0.5;
        float _1486 = _1384 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_995, _996, _997), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4199 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1511 + 1.0))) + _1516) * _1397;
        _1533 = _1364;
        _1535 = _1363;
        _1536 = _1362;
        _1537 = _1374;
        _1538 = _1373;
        _1539 = _1372;
        _1540 = _1384;
        _1541 = _1383;
        _1542 = _1382;
        _1543 = _1397;
        _1544 = _1396;
        _1545 = _1395;
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1534;
        _1535 = _1534;
        _1536 = _1534;
        _1537 = _1534;
        _1538 = _1534;
        _1539 = _1534;
        _1540 = _1534;
        _1541 = _1534;
        _1542 = _1534;
        _1543 = _1534;
        _1544 = _1534;
        _1545 = _1534;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1574 = fma(_1232, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224));
        float _1578 = fma(_1232, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224));
        float _1582 = fma(_1232, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224));
        float _1605 = _1224 + _995;
        float _1606 = _1228 + _996;
        float _1607 = _1232 + _997;
        float _1617 = fma(_1607, cbModelParam._m0[30u].z, fma(_1606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1605)) - _1574;
        float _1618 = fma(_1607, cbModelParam._m0[31u].z, fma(_1606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1605)) - _1578;
        float _1619 = fma(_1607, cbModelParam._m0[32u].z, fma(_1606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1605)) - _1582;
        float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
        float _1636 = ((_1623 * _1617) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1574 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1623 * _1618) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1578 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1623 * _1619) / cbModelParam._m0[35u].z) + ((((((_1582 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        float _1673 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1640.x + (-0.5));
        float _1675 = _1673 * (_1640.y + (-0.5));
        float _1676 = _1673 * (_1640.z + (-0.5));
        float _1683 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1647.x + (-0.5));
        float _1685 = _1683 * (_1647.y + (-0.5));
        float _1686 = _1683 * (_1647.z + (-0.5));
        float _1693 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1654.x + (-0.5));
        float _1695 = _1693 * (_1654.y + (-0.5));
        float _1696 = _1693 * (_1654.z + (-0.5));
        float _1703 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1661.x + (-0.5));
        float _1705 = _1703 * (_1661.y + (-0.5));
        float _1706 = _1703 * (_1661.z + (-0.5));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = _1674 * 0.5;
        float _1711 = _1684 * 0.5;
        float _1712 = _1694 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_995, _996, _997), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4262 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1737 + 1.0))) + _1742) * _1707;
        float _1752 = _1675 * 0.5;
        float _1753 = _1685 * 0.5;
        float _1754 = _1695 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_995, _996, _997), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4295 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1779 + 1.0))) + _1784) * _1708;
        float _1794 = _1676 * 0.5;
        float _1795 = _1686 * 0.5;
        float _1796 = _1696 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_995, _996, _997), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4328 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1821 + 1.0))) + _1826) * _1709;
        _1843 = _1676;
        _1844 = _1675;
        _1845 = _1674;
        _1846 = _1686;
        _1847 = _1685;
        _1848 = _1684;
        _1849 = _1696;
        _1850 = _1695;
        _1851 = _1694;
        _1852 = _1709;
        _1853 = _1708;
        _1854 = _1707;
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
    }
    else
    {
        _1843 = _1534;
        _1844 = _1534;
        _1845 = _1534;
        _1846 = _1534;
        _1847 = _1534;
        _1848 = _1534;
        _1849 = _1534;
        _1850 = _1534;
        _1851 = _1534;
        _1852 = _1534;
        _1853 = _1534;
        _1854 = _1534;
        _1855 = 0.0;
        _1856 = 0.0;
        _1857 = 0.0;
    }
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1547)) + _1547;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1548)) + _1548;
    float _1890 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1867));
    float _1911 = _1169 * 0.5;
    float _1912 = _1170 * 0.5;
    float _1913 = _1171 * 0.5;
    float _1914 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1917 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1920 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1954;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1927 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1533, _1537, _1540, _1543));
        float _1931 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1935 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1942 = dot(vec4(cbModelParam._m0[39u]), vec4(_1911, _1912, _1913, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1942) ? 0.0 : (isnan(0.0) ? _1942 : max(0.0, _1942))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1965;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1956 = dot(vec4(cbModelParam._m0[40u]), vec4(_1911, _1912, _1913, 1.0));
        _1965 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1956) ? 0.0 : (isnan(0.0) ? _1956 : max(0.0, _1956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1965 = 1.0;
    }
    float _1969 = (_1965 * cbModelParam._m0[1u].x) + (_1954 * (1.0 - cbModelParam._m0[1u].x));
    float _1979 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _998);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1979 : min(cbModelParam._m0[25u].z, _1979));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2027 = fma(_1232, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1224)) + cbModelParam._m0[13u].w;
        float _2031 = fma(_1232, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1224)) + cbModelParam._m0[14u].w;
        float _2035 = fma(_1232, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1224)) + cbModelParam._m0[15u].w;
        float _2038 = fma(_1171, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1169));
        float _2041 = fma(_1171, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1169));
        float _2044 = fma(_1171, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1169));
        float _2072;
        if (_2038 > 0.0)
        {
            _2072 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2072 = frontier_phi_14_12_ladder;
        }
        float _2295;
        if (_2041 > 0.0)
        {
            _2295 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2295 = frontier_phi_23_19_ladder;
        }
        float _2552;
        if (_2044 > 0.0)
        {
            _2552 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2552 = frontier_phi_35_30_ladder;
        }
        float _2554 = isnan(_2295) ? _2072 : (isnan(_2072) ? _2295 : min(_2072, _2295));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _2038) + _2027;
        float _2560 = (_2555 * _2041) + _2031;
        float _2561 = (_2555 * _2044) + _2035;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _1980);
            frontier_phi_13_35_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2060 = frontier_phi_13_35_ladder_2;
        _2062 = frontier_phi_13_35_ladder_1;
        _2064 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1169, _1170, _1171), _1980);
        _2060 = _2048.x * cbModelParam._m0[1u].y;
        _2062 = _2048.y * cbModelParam._m0[1u].y;
        _2064 = _2048.z * cbModelParam._m0[1u].y;
    }
    float _2068 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _998);
    float _2069 = isnan(_2068) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2068 : min(cbModelParam._m0[25u].w, _2068));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2122 = fma(_1232, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1224)) + cbModelParam._m0[21u].w;
        float _2126 = fma(_1232, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1224)) + cbModelParam._m0[22u].w;
        float _2130 = fma(_1232, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1224)) + cbModelParam._m0[23u].w;
        float _2133 = fma(_1171, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1169));
        float _2136 = fma(_1171, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1169));
        float _2139 = fma(_1171, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1169));
        float _2300;
        if (_2133 > 0.0)
        {
            _2300 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2300 = frontier_phi_25_21_ladder;
        }
        float _2579;
        if (_2136 > 0.0)
        {
            _2579 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2579 = frontier_phi_37_32_ladder;
        }
        float _2792;
        if (_2139 > 0.0)
        {
            _2792 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2792 = frontier_phi_46_43_ladder;
        }
        float _2794 = isnan(_2579) ? _2300 : (isnan(_2300) ? _2579 : min(_2300, _2579));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2133) + _2122;
        float _2800 = (_2795 * _2136) + _2126;
        float _2801 = (_2795 * _2139) + _2130;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3029 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2069);
            frontier_phi_22_46_ladder = _3029.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3029.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3029.x * cbModelParam._m0[1u].z;
        }
        _2158 = frontier_phi_22_46_ladder_2;
        _2160 = frontier_phi_22_46_ladder_1;
        _2162 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1169, _1170, _1171), _2069);
        _2158 = _2142.x * cbModelParam._m0[1u].z;
        _2160 = _2142.y * cbModelParam._m0[1u].z;
        _2162 = _2142.z * cbModelParam._m0[1u].z;
    }
    float _2175 = (((_1195 * _1146) + _1196) * _1161) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1195 * _1148) + _1196) * _1161) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2179 = (((_1195 * _1149) + _1196) * _1161) * ((cbModelParam._m0[1u].w * (_2162 - _2064)) + _2064);
    float _2182 = fma(_2179, cbSceneParam._m0[89u].z, fma(_2177, cbSceneParam._m0[89u].y, _2175 * cbSceneParam._m0[89u].x));
    float _2185 = fma(_2179, cbSceneParam._m0[90u].z, fma(_2177, cbSceneParam._m0[90u].y, _2175 * cbSceneParam._m0[90u].x));
    float _2188 = fma(_2179, cbSceneParam._m0[91u].z, fma(_2177, cbSceneParam._m0[91u].y, _2175 * cbSceneParam._m0[91u].x));
    vec4 _2196 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1083, _1084));
    float _2198 = _2196.w;
    float _2210 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2198);
    float _2211 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2198);
    float _2212 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2198);
    uvec4 _2216 = floatBitsToUint(cbInstanceData._m0[_1121 + 5u]);
    uint _2218 = _2216.x * 14u;
    uint _2219 = _2218 + 13u;
    float _2226 = _1161 + (-1.0);
    float _2231 = (cbLight._m0[_2219].x * _2226) + 1.0;
    float _2232 = (cbLight._m0[_2219].y * _2226) + 1.0;
    float _2233 = (cbLight._m0[_2219].z * _2226) + 1.0;
    float _2234 = (cbLight._m0[_2219].w * _2226) + 1.0;
    uint _2235 = _2218 + 5u;
    float _2241 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2245 = _2218 + 4u;
    float _2254 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2258 = _2218 | 1u;
    float _2269 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_995, _996, _997));
    float _2272 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_995, _996, _997));
    float _4464 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _4475 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2277 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2279 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2286 = ((cbLight._m0[_2235].x * _2241) * _2279) + (((cbLight._m0[_2245].x * _2210) * _2254) * _2277);
    float _2287 = ((_2241 * cbLight._m0[_2235].y) * _2279) + (((cbLight._m0[_2245].y * _2211) * _2254) * _2277);
    float _2288 = ((_2241 * cbLight._m0[_2235].z) * _2279) + (((cbLight._m0[_2245].z * _2212) * _2254) * _2277);
    uvec4 _2292 = floatBitsToUint(cbLight._m0[_2218 + 12u]);
    bool _2294 = _2292.x == 0u;
    float _2305;
    float _2307;
    float _2309;
    if (_2294)
    {
        _2305 = _2286;
        _2307 = _2287;
        _2309 = _2288;
    }
    else
    {
        uint _2313 = _2218 + 6u;
        float _2329 = (dot(vec3(cbLight._m0[_2218 + 2u].xyz), vec3(_995, _996, _997)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4486 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2332 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2305 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2286;
        _2307 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2287;
        _2309 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2288;
    }
    bool _2312 = _2292.y == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2312)
    {
        _2350 = _2305;
        _2352 = _2307;
        _2354 = _2309;
    }
    else
    {
        uint _2523 = _2218 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2218 + 3u].xyz), vec3(_995, _996, _997)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4502 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2542 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2350 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2305;
        _2352 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2307;
        _2354 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2309;
    }
    uint _2357 = _2218 + 8u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _998) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2218].x + _1075;
    float _2373 = cbLight._m0[_2218].y + _1076;
    float _2374 = cbLight._m0[_2218].z + _1077;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2218].xyz));
    float _4518 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _4529 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _2386 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2387 = dot(vec3(_995, _996, _997), vec3(_2379, _2380, _2381));
    float _4540 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2379, _2380, _2381));
    float _4551 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2371 * _2371;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
    float _2408 = 0.959999978542327880859375 - _1143;
    float _2410 = 0.959999978542327880859375 - _1144;
    float _2411 = 0.959999978542327880859375 - _1145;
    float _2418 = 1.0 - _2371;
    float _2429 = (0.5 / (((_2386 * ((_2385 * _2418) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2418) + _2371) * _2385))) * _2385;
    float _4562 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    uint _2445 = _2218 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _998) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2258].x + _1075;
    float _2459 = cbLight._m0[_2258].y + _1076;
    float _2460 = cbLight._m0[_2258].z + _1077;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2258].xyz));
    float _4573 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2472 = dot(vec3(_995, _996, _997), vec3(_2465, _2466, _2467));
    float _4584 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2465, _2466, _2467));
    float _4595 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2386 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2498) + _2457) * _2471))) * _2471;
    float _4606 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2408) + _1146) * cbLight._m0[_2445].x) * _2510) * _2241) + ((((cbLight._m0[_2357].x * _2210) * ((_2407 * _2408) + _1146)) * _2431) * _2254);
    float _2521 = (((((_2491 * _2410) + _1148) * cbLight._m0[_2445].y) * _2510) * _2241) + ((((cbLight._m0[_2357].y * _2211) * ((_2407 * _2410) + _1148)) * _2431) * _2254);
    float _2522 = (((((_2491 * _2411) + _1149) * cbLight._m0[_2445].z) * _2510) * _2241) + ((((cbLight._m0[_2357].z * _2212) * ((_2407 * _2411) + _1149)) * _2431) * _2254);
    float _2584;
    float _2586;
    float _2588;
    if (_2294)
    {
        _2584 = _2520;
        _2586 = _2521;
        _2588 = _2522;
    }
    else
    {
        uint _2590 = _2218 + 2u;
        uint _2594 = _2218 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _998) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _1075;
        float _2611 = cbLight._m0[_2590].y + _1076;
        float _2612 = cbLight._m0[_2590].z + _1077;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2590].xyz));
        float _4617 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2624 = dot(vec3(_995, _996, _997), vec3(_2617, _2618, _2619));
        float _4628 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4639 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2386 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2650) + _2609) * _2623))) * _2623;
        float _4650 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2584 = (((((_2643 * _2408) + _1146) * cbLight._m0[_2594].x) * _2662) * _2663) + _2520;
        _2586 = (((((_2643 * _2410) + _1148) * cbLight._m0[_2594].y) * _2662) * _2663) + _2521;
        _2588 = (((((_2643 * _2411) + _1149) * cbLight._m0[_2594].z) * _2662) * _2663) + _2522;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2312)
    {
        _2698 = _2584;
        _2700 = _2586;
        _2702 = _2588;
    }
    else
    {
        uint _2709 = _2218 + 3u;
        uint _2713 = _2218 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _998) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1075;
        float _2730 = cbLight._m0[_2709].y + _1076;
        float _2731 = cbLight._m0[_2709].z + _1077;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2709].xyz));
        float _4666 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2743 = dot(vec3(_995, _996, _997), vec3(_2736, _2737, _2738));
        float _4677 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4688 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2386 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2769) + _2728) * _2742))) * _2742;
        float _4699 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2698 = (((((_2762 * _2408) + _1146) * cbLight._m0[_2713].x) * _2781) * _2782) + _2584;
        _2700 = (((((_2762 * _2410) + _1148) * cbLight._m0[_2713].y) * _2781) * _2782) + _2586;
        _2702 = (((((_2762 * _2411) + _1149) * cbLight._m0[_2713].z) * _2781) * _2782) + _2588;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2216.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1084) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1083) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
        }
        else
        {
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3202)
                {
                    frontier_phi_61_pred = _3186;
                    frontier_phi_61_pred_1 = _3191;
                    frontier_phi_61_pred_2 = _3190;
                    frontier_phi_61_pred_3 = _3189;
                    frontier_phi_61_pred_4 = _3188;
                    frontier_phi_61_pred_5 = _3187;
                }
                else
                {
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    uint _3316;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3201;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    for (;;)
                    {
                        uint _3320 = uint(findLSB(_3316)) + (_3192 << 5u);
                        uint _3317 = (_3316 + 4294967295u) & _3316;
                        uint _3322 = _3320 * 48u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 3u)).x));
                        uint _3342 = (_3320 * 48u) + 4u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3361 = (_3320 * 48u) + 8u;
                        vec3 _3372 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x));
                        float _3376 = _3336.x - _2858;
                        float _3377 = _3336.y - _2859;
                        float _3378 = _3336.z - _2860;
                        float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                        float _3382 = inversesqrt(_3379);
                        float _3383 = _3382 * _3376;
                        float _3384 = _3382 * _3377;
                        float _3385 = _3382 * _3378;
                        float _3386 = dot(vec3(_1102, _1105, _1108), vec3(_3383, _3384, _3385));
                        float _3391 = 1.0 - (_3379 * _3336.w);
                        float _4725 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3393 = sqrt(_3379) * _3355.w;
                        float _3396 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3386) + _3397;
                        float _3403 = _3393 * _3393;
                        float _3407 = ((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3392) / ((_3403 * 0.699999988079071044921875) + 1.0);
                        float _3411 = (-0.0) - _2858;
                        float _3412 = (-0.0) - _2859;
                        float _3413 = (-0.0) - _2860;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3418 = _3417 * _3411;
                        float _3419 = _3417 * _3412;
                        float _3420 = _3417 * _3413;
                        float _3428 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _1177;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3418 + _3383;
                        float _3440 = _3419 + _3384;
                        float _3441 = _3420 + _3385;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_1102, _1105, _1108), vec3(_3418, _3419, _3420));
                        float _4741 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3453 = dot(vec3(_1102, _1105, _1108), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4752 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3396 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3386) + _3462;
                        float _4763 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4774 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3488 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3460 * _3460) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125))) * _3392;
                        _3245 = (_3407 * _3355.x) + _3313;
                        _3246 = (_3407 * _3355.y) + _3314;
                        _3247 = (_3407 * _3355.z) + _3315;
                        _3242 = (_3488 * _3372.x) + _3310;
                        _3243 = (_3488 * _3372.y) + _3311;
                        _3244 = (_3488 * _3372.z) + _3312;
                        if (_3317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3317;
                        }
                    }
                    frontier_phi_61_pred = _3242;
                    frontier_phi_61_pred_1 = _3247;
                    frontier_phi_61_pred_2 = _3246;
                    frontier_phi_61_pred_3 = _3245;
                    frontier_phi_61_pred_4 = _3244;
                    frontier_phi_61_pred_5 = _3243;
                }
                _3035 = frontier_phi_61_pred;
                _3045 = frontier_phi_61_pred_1;
                _3043 = frontier_phi_61_pred_2;
                _3041 = frontier_phi_61_pred_3;
                _3039 = frontier_phi_61_pred_4;
                _3037 = frontier_phi_61_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _3035;
                    _3187 = _3037;
                    _3188 = _3039;
                    _3189 = _3041;
                    _3190 = _3043;
                    _3191 = _3045;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
        }
        uvec4 _3048 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3049 = _3048.z;
        uint _3051 = (_3049 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _3051) & _2904) == 0u)
        {
            _3154 = _3034;
            _3156 = _3036;
            _3158 = _3038;
            _3160 = _3040;
            _3162 = _3042;
            _3164 = _3044;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3180 = _3179 * _2858;
            float _3181 = _3179 * _2859;
            float _3182 = _3179 * _2860;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3051 < ((_3049 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3293 = _3034;
                float _3294 = _3036;
                float _3295 = _3038;
                float _3296 = _3040;
                float _3297 = _3042;
                float _3298 = _3044;
                uint _3299 = _3051;
                uint _3308;
                bool _3309;
                for (;;)
                {
                    _3308 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3299 << 2u)) >> 2u)).x;
                    _3309 = _3308 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3309)
                    {
                        frontier_phi_67_pred = _3296;
                        frontier_phi_67_pred_1 = _3297;
                        frontier_phi_67_pred_2 = _3298;
                        frontier_phi_67_pred_3 = _3295;
                        frontier_phi_67_pred_4 = _3294;
                        frontier_phi_67_pred_5 = _3293;
                    }
                    else
                    {
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3506 = _3293;
                        float _3507 = _3294;
                        float _3508 = _3295;
                        float _3509 = _3296;
                        float _3510 = _3297;
                        float _3511 = _3298;
                        uint _3512 = _3308;
                        uint _3513;
                        vec4 _3538;
                        float _3539;
                        vec4 _3554;
                        vec3 _3566;
                        vec4 _3581;
                        vec4 _3596;
                        float _3642;
                        bool _3643;
                        for (;;)
                        {
                            uint _3523 = ((_3299 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3512));
                            _3513 = (_3512 + 4294967295u) & _3512;
                            uint _3525 = _3523 * 40u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3539 = _3538.w;
                            uint _3541 = (_3523 * 40u) + 4u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3523 * 40u) + 8u;
                            _3566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x));
                            uint _3568 = (_3523 * 40u) + 16u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3523 * 40u) + 20u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3523 * 40u) + 24u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3617 = (_3523 * 40u) + 28u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3642 = fma(_2860, _3630.z, fma(_2859, _3630.y, _3630.x * _2858)) + _3630.w;
                            _3643 = !((fma(_2860, _3611.z, fma(_2859, _3611.y, _3611.x * _2858)) + _3611.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3643)
                            {
                                float _3670 = _3538.x - _2858;
                                float _3671 = _3538.y - _2859;
                                float _3672 = _3538.z - _2860;
                                float _3673 = dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672));
                                float _3676 = inversesqrt(_3673);
                                float _3677 = _3676 * _3670;
                                float _3678 = _3676 * _3671;
                                float _3679 = _3676 * _3672;
                                float _3683 = 1.0 - (_3673 / (_3539 * _3539));
                                float _4785 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3688 = sqrt(_3673) * _3554.w;
                                float _3690 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                                float _3691 = _3690 * _3690;
                                float _3694 = ((1.0 - _3691) * dot(vec3(_3677, _3678, _3679), vec3(_1102, _1105, _1108))) + _3691;
                                float _3697 = _3688 * _3688;
                                float _3701 = (fma(_2860, _3581.z, fma(_2859, _3581.y, _3581.x * _2858)) + _3581.w) / _3642;
                                float _3702 = (fma(_2860, _3596.z, fma(_2859, _3596.y, _3596.x * _2858)) + _3596.w) / _3642;
                                float _3706 = 1.0 - dot(vec2(_3701, _3702), vec2(_3701, _3702));
                                float _4801 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3708 = _3707 * (((isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0))) * _3684) / ((_3697 * 0.699999988079071044921875) + 1.0));
                                float _3720 = exp2(log2(1.0 / ((_3697 * 3.5) + 5.0)) * 0.25);
                                float _3721 = 1.0 - _1177;
                                float _3728 = sqrt(1.0 - ((1.0 - (_3721 * _3721)) * (1.0 - (_3720 * _3720))));
                                float _3729 = _3728 * _3728;
                                float _3730 = _3729 * _3729;
                                float _3731 = _3677 - _3180;
                                float _3732 = _3678 - _3181;
                                float _3733 = _3679 - _3182;
                                float _3737 = inversesqrt(dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733)));
                                float _3741 = dot(vec3(_1102, _1105, _1108), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _4812 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3745 = dot(vec3(_1102, _1105, _1108), vec3(_3737 * _3731, _3737 * _3732, _3737 * _3733));
                                float _4823 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3752 = ((_3748 * _3748) * (_3730 + (-1.0))) + 1.0;
                                float _3753 = _3690 * _3729;
                                float _3754 = _3753 * _3753;
                                float _3760 = ((1.0 - _3754) * dot(vec3(_1102, _1105, _1108), vec3(_3677, _3678, _3679))) + _3754;
                                float _4834 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3762 = 1.0 - _3729;
                                float _3772 = (0.5 / (((_3761 * ((_3744 * _3762) + _3729)) + 9.9999999392252902907785028219223e-09) + (((_3761 * _3762) + _3729) * _3744))) * _3761;
                                float _4845 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3782 = (_3707 * _3684) * (((_3730 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3752 * _3752) * ((_3697 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3782 * _3566.x;
                                frontier_phi_73_pred_1 = _3782 * _3566.y;
                                frontier_phi_73_pred_2 = _3708 * _3554.z;
                                frontier_phi_73_pred_3 = _3708 * _3554.y;
                                frontier_phi_73_pred_4 = _3708 * _3554.x;
                                frontier_phi_73_pred_5 = _3782 * _3566.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3786 = frontier_phi_73_pred;
                            _3787 = frontier_phi_73_pred_1;
                            _3791 = frontier_phi_73_pred_2;
                            _3790 = frontier_phi_73_pred_3;
                            _3789 = frontier_phi_73_pred_4;
                            _3788 = frontier_phi_73_pred_5;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            if (_3513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3513;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3496;
                        frontier_phi_67_pred_1 = _3497;
                        frontier_phi_67_pred_2 = _3498;
                        frontier_phi_67_pred_3 = _3495;
                        frontier_phi_67_pred_4 = _3494;
                        frontier_phi_67_pred_5 = _3493;
                    }
                    _3161 = frontier_phi_67_pred;
                    _3163 = frontier_phi_67_pred_1;
                    _3165 = frontier_phi_67_pred_2;
                    _3159 = frontier_phi_67_pred_3;
                    _3157 = frontier_phi_67_pred_4;
                    _3155 = frontier_phi_67_pred_5;
                    uint _3300 = _3299 + 1u;
                    if (_3300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3293 = _3155;
                        _3294 = _3157;
                        _3295 = _3159;
                        _3296 = _3161;
                        _3297 = _3163;
                        _3298 = _3165;
                        _3299 = _3300;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3163;
                frontier_phi_55_56_ladder_1 = _3165;
                frontier_phi_55_56_ladder_2 = _3161;
                frontier_phi_55_56_ladder_3 = _3159;
                frontier_phi_55_56_ladder_4 = _3157;
                frontier_phi_55_56_ladder_5 = _3155;
            }
            else
            {
                frontier_phi_55_56_ladder = _3042;
                frontier_phi_55_56_ladder_1 = _3044;
                frontier_phi_55_56_ladder_2 = _3040;
                frontier_phi_55_56_ladder_3 = _3038;
                frontier_phi_55_56_ladder_4 = _3036;
                frontier_phi_55_56_ladder_5 = _3034;
            }
            _3154 = frontier_phi_55_56_ladder_5;
            _3156 = frontier_phi_55_56_ladder_4;
            _3158 = frontier_phi_55_56_ladder_3;
            _3160 = frontier_phi_55_56_ladder_2;
            _3162 = frontier_phi_55_56_ladder;
            _3164 = frontier_phi_55_56_ladder_1;
        }
        float _3169 = isnan(1.0) ? _1161 : (isnan(_1161) ? 1.0 : min(_1161, 1.0));
        _2917 = (_3169 * _3160) + _2350;
        _2919 = (_3169 * _3162) + _2352;
        _2921 = (_3169 * _3164) + _2354;
        _2923 = ((_3154 * _1146) * _3169) + _2698;
        _2925 = ((_3156 * _1148) * _3169) + _2700;
        _2927 = ((_3158 * _1149) * _3169) + _2702;
    }
    else
    {
        _2917 = _2350;
        _2919 = _2352;
        _2921 = _2354;
        _2923 = _2698;
        _2925 = _2700;
        _2927 = _2702;
    }
    uint _2933 = _1122 + uint(cbMatDynParam._m0[0u].w);
    float _2939 = cbInstanceData._m0[_2933].x * (((((cbMtdParam._m0[10u].x * cbMtdParam._m0[21u].w) * (((_708.x - _705) * _686) + _705)) - _947) * _449) + _947);
    float _2940 = cbInstanceData._m0[_2933].y * (((((cbMtdParam._m0[10u].y * cbMtdParam._m0[21u].w) * (((_708.y - _706) * _686) + _706)) - _948) * _449) + _948);
    float _2941 = cbInstanceData._m0[_2933].z * (((((cbMtdParam._m0[10u].z * cbMtdParam._m0[21u].w) * (((_708.z - _707) * _686) + _707)) - _949) * _449) + _949);
    float _4861 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _4872 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _4883 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _2958 = (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2917 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1161))) + ((_2923 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1969)) * cbPerFrame._m0[3u].x)) + _2939;
    float _2960 = (_2940 + ((_2925 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1969)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2919 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1161)));
    float _2962 = (_2941 + ((_2927 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1969)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2921 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1161)));
    float _4909 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2975 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    uint _2976 = _1121 + 6u;
    float _2984 = _1083 / cbSceneParam._m0[86u].x;
    float _2985 = _1084 / cbSceneParam._m0[86u].y;
    vec4 _2999 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, (log2((isnan(cbSceneParam._m0[77u].w) ? _1018 : (isnan(_1018) ? cbSceneParam._m0[77u].w : min(_1018, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3001 = _2999.x;
    float _3002 = _2999.y;
    float _3003 = _2999.z;
    float _3004 = _2999.w;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_1018 > cbSceneParam._m0[78u].w)
    {
        float _3059 = isnan(_1018) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1018 : min(cbSceneParam._m0[80u].w, _1018));
        float _3060 = _3059 / _1018;
        float _3071 = _3060 * _1068;
        float _3072 = _1069 * _3060;
        float _3073 = (-0.0) - _3072;
        float _3074 = _3060 * _1070;
        float _3076 = (cbSceneParam._m0[77u].w * _3073) / _3059;
        float _3077 = _3076 + cbSceneParam._m0[79u].w;
        float _3078 = cbSceneParam._m0[79u].w - _3072;
        float _3084 = sqrt(((_3071 * _3071) + (_3072 * _3072)) + (_3074 * _3074));
        float _3087 = (1.0 - (cbSceneParam._m0[77u].w / _3059)) * _3084;
        float _3092 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3094 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3255;
        if (abs((_3073 - _3076) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3255 = ((((_3077 > 0.0) ? exp2(_3092 * _3077) : (2.0 - exp2(_3094 * _3077))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3087;
        }
        else
        {
            float _3215 = 1.0 / cbSceneParam._m0[80u].x;
            float _3216 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : max(_3077, _3078));
            float _3217 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : min(_3077, _3078));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            _3255 = ((abs(_3084 / _3073) * cbSceneParam._m0[80u].y) * ((((_3226 - _3227) * 2.0) - ((exp2(_3092 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0)))) - exp2(_3092 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))))) * _3215)) - ((exp2(_3094 * _3226) - exp2(_3094 * _3227)) * _3215))) + (_3087 * cbSceneParam._m0[80u].z);
        }
        vec4 _3257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, 1.0), 0.0);
        float _3266 = exp2((_3255 * (-1.44269502162933349609375)) * (1.0 - _3257.w));
        float _3267 = log2(_3266);
        float _3283 = log2(_3004);
        _3096 = (exp2(_3283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].x)) * _3257.x) / cbSceneParam._m0[78u].x)) + _3001;
        _3098 = (exp2(_3283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].y)) * _3257.y) / cbSceneParam._m0[78u].y)) + _3002;
        _3100 = (exp2(_3283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].z)) * _3257.z) / cbSceneParam._m0[78u].z)) + _3003;
        _3102 = _3266 * _3004;
    }
    else
    {
        _3096 = _3001;
        _3098 = _3002;
        _3100 = _3003;
        _3102 = _3004;
    }
    float _3113 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3114 = _3113 == 3.0;
    float _3115 = log2(_3102);
    float _3119 = exp2(_3115 * cbSceneParam._m0[78u].x);
    float _3120 = exp2(_3115 * cbSceneParam._m0[78u].y);
    float _3121 = exp2(_3115 * cbSceneParam._m0[78u].z);
    float _3122 = _3119 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)));
    float _3123 = _3120 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)));
    float _3124 = _3121 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)));
    float _3133 = (_3113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3133 * (_3114 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.y = _3133 * (_3114 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
    SV_Target.z = _3133 * (_3114 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.w = cbInstanceData._m0[_2976].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2939) * _2975) * _3119) * _3133;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2940) * _2975) * _3120) * _3133;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2941) * _2975) * _3121) * _3133;
    SV_Target_1.w = cbInstanceData._m0[_2976].w;
}


