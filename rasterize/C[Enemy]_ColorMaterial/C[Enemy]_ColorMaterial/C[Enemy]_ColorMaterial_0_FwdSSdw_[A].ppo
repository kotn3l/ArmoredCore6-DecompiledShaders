#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1421;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _299 = exp2(log2((1.0 - _286) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _314 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _322 = log2(0.0);
    float _324 = exp2(_322 * cbMtdParam._m0[23u].x);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    float _335 = exp2(log2(cbMtdParam._m0[23u].y * _286) * cbMtdParam._m0[22u].y);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    float _358 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(4.0) ? _359 : (isnan(_359) ? 4.0 : min(_359, 4.0));
    float _373 = floor(_360);
    vec4 _376 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _373));
    vec4 _400 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _411 = cbMtdParam._m0[9u].x * _400.x;
    float _412 = cbMtdParam._m0[9u].y * _400.y;
    float _413 = cbMtdParam._m0[9u].z * _400.z;
    float _420 = (((cbMtdParam._m0[10u].x * _376.x) - _411) * _337) + _411;
    float _421 = (((cbMtdParam._m0[10u].y * _376.y) - _412) * _337) + _412;
    float _422 = (((cbMtdParam._m0[10u].z * _376.z) - _413) * _337) + _413;
    float _428 = exp2(log2(_282.w) * cbMtdParam._m0[23u].w);
    vec4 _441 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _460 = (((cbMtdParam._m0[16u].x * _441.x) - _420) * _428) + _420;
    float _461 = (((cbMtdParam._m0[16u].y * _441.y) - _421) * _428) + _421;
    float _462 = (((cbMtdParam._m0[16u].z * _441.z) - _422) * _428) + _422;
    vec4 _475 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _495 = (((cbMtdParam._m0[19u].x * _475.x) - _460) * _326) + _460;
    float _496 = (((cbMtdParam._m0[19u].y * _475.y) - _461) * _326) + _461;
    float _497 = (((cbMtdParam._m0[19u].z * _475.z) - _462) * _326) + _462;
    vec4 _510 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _535 = (_314.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _510.x) - _495) * _301) + _495);
    float _537 = (_314.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _510.y) - _496) * _301) + _496);
    float _539 = (_314.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _510.z) - _497) * _301) + _497);
    float _543 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _552 = (_543 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _543))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3875 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _560 = ((cbMtdParam._m0[21u].x - _535) * _553) + _535;
    float _561 = ((cbMtdParam._m0[21u].y - _537) * _553) + _537;
    float _562 = ((cbMtdParam._m0[21u].z - _539) * _553) + _539;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[28u].w;
    _196[0u] = cbMtdParam._m0[29u].x;
    _195[1u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[31u].x;
    _195[2u] = cbMtdParam._m0[30u].y;
    _196[2u] = cbMtdParam._m0[30u].z;
    _195[3u] = cbMtdParam._m0[29u].w;
    _196[3u] = cbMtdParam._m0[30u].x;
    _195[4u] = cbMtdParam._m0[29u].y;
    _196[4u] = cbMtdParam._m0[29u].z;
    float _604 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    uint _606 = uint(int(isnan(4.0) ? _604 : (isnan(_604) ? 4.0 : min(_604, 4.0))));
    float _613 = ((_196[_606] - cbMtdParam._m0[22u].z) * _337) + cbMtdParam._m0[22u].z;
    float _616 = ((cbMtdParam._m0[22u].w - _613) * _428) + _613;
    float _619 = ((cbMtdParam._m0[25u].x - _616) * _326) + _616;
    float _622 = ((cbMtdParam._m0[26u].x - _619) * _301) + _619;
    float _624 = _622 - (_622 * _543);
    vec4 _640 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _373));
    vec4 _658 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _666 = cbMtdParam._m0[22u].x + _658.z;
    float _669 = (((_640.z + _195[_606]) - _666) * _337) + _666;
    vec4 _682 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _693 = (((_682.z - _669) + cbMtdParam._m0[28u].y) * _428) + _669;
    float _699 = ((((_286 * 2.0) * _693) - _693) * cbMtdParam._m0[24u].w) + _693;
    vec4 _712 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _723 = (((cbMtdParam._m0[23u].z + _712.z) - _699) * _326) + _699;
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _747 = (((_736.z - _723) + cbMtdParam._m0[26u].y) * _301) + _723;
    vec4 _762 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _777 = ((cbMtdParam._m0[27u].y * _543) * ((_762.z * cbMtdParam._m0[27u].x) - _747)) + _747;
    float _789 = ((_640.x - _660) * _337) + _660;
    float _790 = ((_640.y - _661) * _337) + _661;
    float _795 = ((_682.x - _789) * _428) + _789;
    float _796 = ((_682.y - _790) * _428) + _790;
    float _801 = ((_712.x - _795) * _326) + _795;
    float _802 = ((_712.y - _796) * _326) + _796;
    float _811 = ((((_736.x - _801) * _301) + _801) * 2.0) + (-1.0);
    float _812 = ((((_736.y - _802) * _301) + _802) * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3896 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _818 = sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))));
    float _828 = ((cbMtdParam._m0[25u].y * ((_282.x * 2.0) + (-1.0))) + _811) + ((((_762.x * 2.0) + (-1.0)) * _543) * cbMtdParam._m0[26u].w);
    float _829 = ((cbMtdParam._m0[25u].y * ((_282.y * 2.0) + (-1.0))) + _812) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_762.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _832 = fma(_818, _231 * NORMAL.x, fma(_829, _238 * TANGENT.x, (_224 * _216) * _828));
    float _835 = fma(_818, _231 * NORMAL.y, fma(_829, _238 * TANGENT.y, (_224 * _217) * _828));
    float _838 = fma(_818, _231 * NORMAL.z, fma(_829, _238 * TANGENT.z, (_224 * _218) * _828));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _3907 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _846 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3929 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3940 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3951 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _850 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _866 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _916 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _906);
    float _917 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _906);
    float _918 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
    float _923 = _916 * _922;
    float _924 = _917 * _922;
    float _925 = _918 * _922;
    vec4 _930 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _932 = _930.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1102 = sqrt(((_916 * _916) + (_917 * _917)) + (_918 * _918));
        float _1108 = (cbMatDynParam._m0[5u].x * _1102) + cbMatDynParam._m0[5u].y;
        float _3962 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1113 = (cbMatDynParam._m0[5u].z * _1102) + cbMatDynParam._m0[5u].w;
        float _3973 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) - _1109)) + _1109) < ((_932 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _943 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _944 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _962 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _965 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _968 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _981 = uint(roundEven(NORMAL.w)) * 13u;
    uint _982 = _981 + 9u;
    uint _983 = _982 + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_983].z;
    float _3984 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _995 = 1.0 - _850;
    float _996 = _992 * _995;
    float _997 = _993 * _995;
    float _998 = _994 * _995;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _850;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _850;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _850;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _943, cbSceneParam._m0[86u].y * _944));
    float _1021 = _1018.x * TEXCOORD_3.w;
    float _1022 = dot(vec3(_843, _844, _845), vec3(_923, _924, _925));
    float _1025 = _1022 * 2.0;
    float _1029 = (_1025 * _843) - _923;
    float _1030 = (_1025 * _844) - _924;
    float _1031 = (_1025 * _845) - _925;
    float _1035 = abs(dot(vec3(_923, _924, _925), vec3(_843, _844, _845)));
    float _4017 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1037 = sqrt(_846);
    float _1048 = exp2((_1037 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1037 * 3.0));
    float _1054 = (1.0 - _1048) * ((_1037 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1055 = _1048 * _1037;
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1420;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1145 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1149 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1153 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1178 = _1083 + _843;
        float _1179 = _1087 + _844;
        float _1180 = _1091 + _845;
        float _1190 = fma(_1180, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178)) - _1145;
        float _1191 = fma(_1180, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178)) - _1149;
        float _1192 = fma(_1180, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178)) - _1153;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1145 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1149 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[34u].z) + ((((((_1153 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1248 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1214.x + (-0.5));
        float _1250 = _1248 * (_1214.y + (-0.5));
        float _1251 = _1248 * (_1214.z + (-0.5));
        float _1258 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1221.x + (-0.5));
        float _1260 = _1258 * (_1221.y + (-0.5));
        float _1261 = _1258 * (_1221.z + (-0.5));
        float _1268 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1228.x + (-0.5));
        float _1270 = _1268 * (_1228.y + (-0.5));
        float _1271 = _1268 * (_1228.z + (-0.5));
        float _1278 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1235.x + (-0.5));
        float _1280 = _1278 * (_1235.y + (-0.5));
        float _1281 = _1278 * (_1235.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1302 = (dot(vec3(_843, _844, _845), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1312 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4065 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1314 + 1.0))) + _1319) * _1282;
        float _1329 = _1250 * 0.5;
        float _1330 = _1260 * 0.5;
        float _1331 = _1270 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_843, _844, _845), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4098 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1356 + 1.0))) + _1361) * _1283;
        float _1371 = _1251 * 0.5;
        float _1372 = _1261 * 0.5;
        float _1373 = _1271 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_843, _844, _845), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4131 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1398 + 1.0))) + _1403) * _1284;
        _1420 = _1251;
        _1422 = _1250;
        _1423 = _1249;
        _1424 = _1261;
        _1425 = _1260;
        _1426 = _1259;
        _1427 = _1271;
        _1428 = _1270;
        _1429 = _1269;
        _1430 = _1284;
        _1431 = _1283;
        _1432 = _1282;
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1421;
        _1422 = _1421;
        _1423 = _1421;
        _1424 = _1421;
        _1425 = _1421;
        _1426 = _1421;
        _1427 = _1421;
        _1428 = _1421;
        _1429 = _1421;
        _1430 = _1421;
        _1431 = _1421;
        _1432 = _1421;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1461 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1465 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1469 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1492 = _1083 + _843;
        float _1493 = _1087 + _844;
        float _1494 = _1091 + _845;
        float _1504 = fma(_1494, cbModelParam._m0[30u].z, fma(_1493, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1492)) - _1461;
        float _1505 = fma(_1494, cbModelParam._m0[31u].z, fma(_1493, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1492)) - _1465;
        float _1506 = fma(_1494, cbModelParam._m0[32u].z, fma(_1493, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1492)) - _1469;
        float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
        float _1523 = ((_1510 * _1504) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1461 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1510 * _1505) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1465 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1510 * _1506) / cbModelParam._m0[35u].z) + ((((((_1469 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        float _1560 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1527.x + (-0.5));
        float _1562 = _1560 * (_1527.y + (-0.5));
        float _1563 = _1560 * (_1527.z + (-0.5));
        float _1570 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1534.x + (-0.5));
        float _1572 = _1570 * (_1534.y + (-0.5));
        float _1573 = _1570 * (_1534.z + (-0.5));
        float _1580 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1541.x + (-0.5));
        float _1582 = _1580 * (_1541.y + (-0.5));
        float _1583 = _1580 * (_1541.z + (-0.5));
        float _1590 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1548.x + (-0.5));
        float _1592 = _1590 * (_1548.y + (-0.5));
        float _1593 = _1590 * (_1548.z + (-0.5));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = _1561 * 0.5;
        float _1598 = _1571 * 0.5;
        float _1599 = _1581 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_843, _844, _845), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4194 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1624 + 1.0))) + _1629) * _1594;
        float _1639 = _1562 * 0.5;
        float _1640 = _1572 * 0.5;
        float _1641 = _1582 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_843, _844, _845), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4227 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1666 + 1.0))) + _1671) * _1595;
        float _1681 = _1563 * 0.5;
        float _1682 = _1573 * 0.5;
        float _1683 = _1583 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_843, _844, _845), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4260 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1708 + 1.0))) + _1713) * _1596;
        _1730 = _1563;
        _1731 = _1562;
        _1732 = _1561;
        _1733 = _1573;
        _1734 = _1572;
        _1735 = _1571;
        _1736 = _1583;
        _1737 = _1582;
        _1738 = _1581;
        _1739 = _1596;
        _1740 = _1595;
        _1741 = _1594;
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
    }
    else
    {
        _1730 = _1421;
        _1731 = _1421;
        _1732 = _1421;
        _1733 = _1421;
        _1734 = _1421;
        _1735 = _1421;
        _1736 = _1421;
        _1737 = _1421;
        _1738 = _1421;
        _1739 = _1421;
        _1740 = _1421;
        _1741 = _1421;
        _1742 = 0.0;
        _1743 = 0.0;
        _1744 = 0.0;
    }
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1433)) + _1433;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1434)) + _1434;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1435)) + _1435;
    float _1777 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1754));
    float _1798 = _1029 * 0.5;
    float _1799 = _1030 * 0.5;
    float _1800 = _1031 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1841;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1420, _1424, _1427, _1430));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1852;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1843 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1856 = (_1852 * cbModelParam._m0[1u].x) + (_1841 * (1.0 - cbModelParam._m0[1u].x));
    float _1866 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1866 : min(cbModelParam._m0[25u].z, _1866));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1914 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1918 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1922 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1925 = fma(_1031, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029));
        float _1928 = fma(_1031, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029));
        float _1931 = fma(_1031, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029));
        float _1959;
        if (_1925 > 0.0)
        {
            _1959 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1959 = frontier_phi_17_15_ladder;
        }
        float _2183;
        if (_1928 > 0.0)
        {
            _2183 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2183 = frontier_phi_26_22_ladder;
        }
        float _2440;
        if (_1931 > 0.0)
        {
            _2440 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2440 = frontier_phi_38_33_ladder;
        }
        float _2442 = isnan(_2183) ? _1959 : (isnan(_1959) ? _2183 : min(_1959, _2183));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1925) + _1914;
        float _2448 = (_2443 * _1928) + _1918;
        float _2449 = (_2443 * _1931) + _1922;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1867);
            frontier_phi_16_38_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1947 = frontier_phi_16_38_ladder_2;
        _1949 = frontier_phi_16_38_ladder_1;
        _1951 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1029, _1030, _1031), _1867);
        _1947 = _1935.x * cbModelParam._m0[1u].y;
        _1949 = _1935.y * cbModelParam._m0[1u].y;
        _1951 = _1935.z * cbModelParam._m0[1u].y;
    }
    float _1955 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1955 : min(cbModelParam._m0[25u].w, _1955));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1031, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029));
        float _2024 = fma(_1031, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029));
        float _2027 = fma(_1031, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029));
        float _2188;
        if (_2021 > 0.0)
        {
            _2188 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2188 = frontier_phi_28_24_ladder;
        }
        float _2467;
        if (_2024 > 0.0)
        {
            _2467 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2467 = frontier_phi_40_35_ladder;
        }
        float _2680;
        if (_2027 > 0.0)
        {
            _2680 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2680 = frontier_phi_49_46_ladder;
        }
        float _2682 = isnan(_2467) ? _2188 : (isnan(_2188) ? _2467 : min(_2188, _2467));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _2021) + _2010;
        float _2688 = (_2683 * _2024) + _2014;
        float _2689 = (_2683 * _2027) + _2018;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1956);
            frontier_phi_25_49_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_25_49_ladder_2;
        _2048 = frontier_phi_25_49_ladder_1;
        _2050 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1029, _1030, _1031), _1956);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1054 * _1006) + _1055) * _1021) * ((cbModelParam._m0[1u].w * (_2046 - _1947)) + _1947);
    float _2065 = (((_1054 * _1008) + _1055) * _1021) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2067 = (((_1054 * _1009) + _1055) * _1021) * ((cbModelParam._m0[1u].w * (_2050 - _1951)) + _1951);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    vec4 _2084 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_943, _944));
    float _2086 = _2084.w;
    float _2098 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2086);
    float _2099 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2086);
    float _2100 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2086);
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_981 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _1021 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_843, _844, _845));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_843, _844, _845));
    float _4396 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4407 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2098) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2099) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2100) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2182)
    {
        _2193 = _2174;
        _2195 = _2175;
        _2197 = _2176;
    }
    else
    {
        uint _2201 = _2106 + 6u;
        float _2217 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4418 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2220 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2193 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _2174;
        _2195 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _2175;
        _2197 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _2176;
    }
    bool _2200 = _2180.y == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2200)
    {
        _2238 = _2193;
        _2240 = _2195;
        _2242 = _2197;
    }
    else
    {
        uint _2411 = _2106 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4434 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2430 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2238 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2193;
        _2240 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2195;
        _2242 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2197;
    }
    uint _2245 = _2106 + 8u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _846) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2106].x + _923;
    float _2261 = cbLight._m0[_2106].y + _924;
    float _2262 = cbLight._m0[_2106].z + _925;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2106].xyz));
    float _4450 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _4461 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2274 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2275 = dot(vec3(_843, _844, _845), vec3(_2267, _2268, _2269));
    float _4472 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2267, _2268, _2269));
    float _4483 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2259 * _2259;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
    float _2296 = 0.959999978542327880859375 - _1003;
    float _2298 = 0.959999978542327880859375 - _1004;
    float _2299 = 0.959999978542327880859375 - _1005;
    float _2306 = 1.0 - _2259;
    float _2317 = (0.5 / (((_2274 * ((_2273 * _2306) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2306) + _2259) * _2273))) * _2273;
    float _4494 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    uint _2333 = _2106 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _846) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2146].x + _923;
    float _2347 = cbLight._m0[_2146].y + _924;
    float _2348 = cbLight._m0[_2146].z + _925;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2146].xyz));
    float _4505 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2360 = dot(vec3(_843, _844, _845), vec3(_2353, _2354, _2355));
    float _4516 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2353, _2354, _2355));
    float _4527 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2274 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2386) + _2345) * _2359))) * _2359;
    float _4538 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2296) + _1006) * cbLight._m0[_2333].x) * _2398) * _2129) + ((((cbLight._m0[_2245].x * _2098) * ((_2295 * _2296) + _1006)) * _2319) * _2142);
    float _2409 = (((((_2379 * _2298) + _1008) * cbLight._m0[_2333].y) * _2398) * _2129) + ((((cbLight._m0[_2245].y * _2099) * ((_2295 * _2298) + _1008)) * _2319) * _2142);
    float _2410 = (((((_2379 * _2299) + _1009) * cbLight._m0[_2333].z) * _2398) * _2129) + ((((cbLight._m0[_2245].z * _2100) * ((_2295 * _2299) + _1009)) * _2319) * _2142);
    float _2472;
    float _2474;
    float _2476;
    if (_2182)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2106 + 2u;
        uint _2482 = _2106 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _846) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _923;
        float _2499 = cbLight._m0[_2478].y + _924;
        float _2500 = cbLight._m0[_2478].z + _925;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2478].xyz));
        float _4549 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2512 = dot(vec3(_843, _844, _845), vec3(_2505, _2506, _2507));
        float _4560 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4571 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2274 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2538) + _2497) * _2511))) * _2511;
        float _4582 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2472 = (((((_2531 * _2296) + _1006) * cbLight._m0[_2482].x) * _2550) * _2551) + _2408;
        _2474 = (((((_2531 * _2298) + _1008) * cbLight._m0[_2482].y) * _2550) * _2551) + _2409;
        _2476 = (((((_2531 * _2299) + _1009) * cbLight._m0[_2482].z) * _2550) * _2551) + _2410;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2200)
    {
        _2586 = _2472;
        _2588 = _2474;
        _2590 = _2476;
    }
    else
    {
        uint _2597 = _2106 + 3u;
        uint _2601 = _2106 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _846) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _923;
        float _2618 = cbLight._m0[_2597].y + _924;
        float _2619 = cbLight._m0[_2597].z + _925;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2597].xyz));
        float _4598 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2631 = dot(vec3(_843, _844, _845), vec3(_2624, _2625, _2626));
        float _4609 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4620 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2274 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2657) + _2616) * _2630))) * _2630;
        float _4631 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2586 = (((((_2650 * _2296) + _1006) * cbLight._m0[_2601].x) * _2669) * _2670) + _2472;
        _2588 = (((((_2650 * _2298) + _1008) * cbLight._m0[_2601].y) * _2669) * _2670) + _2474;
        _2590 = (((((_2650 * _2299) + _1009) * cbLight._m0[_2601].z) * _2669) * _2670) + _2476;
    }
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_2104.y == 0u)
    {
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2745;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2745;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2745;
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _944) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _943) / _2761)));
        float _2782 = (log2(_2748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
        }
        else
        {
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            uint _3052 = 0u;
            uint _3061;
            bool _3062;
            for (;;)
            {
                _3061 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                _3062 = _3061 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3062)
                {
                    frontier_phi_66_pred = _3046;
                    frontier_phi_66_pred_1 = _3051;
                    frontier_phi_66_pred_2 = _3050;
                    frontier_phi_66_pred_3 = _3049;
                    frontier_phi_66_pred_4 = _3048;
                    frontier_phi_66_pred_5 = _3047;
                }
                else
                {
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    uint _3197;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3061;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    for (;;)
                    {
                        uint _3201 = uint(findLSB(_3197)) + (_3052 << 5u);
                        uint _3198 = (_3197 + 4294967295u) & _3197;
                        uint _3203 = _3201 * 48u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3223 = (_3201 * 48u) + 4u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3242 = (_3201 * 48u) + 8u;
                        vec3 _3253 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x));
                        float _3257 = _3217.x - _2746;
                        float _3258 = _3217.y - _2747;
                        float _3259 = _3217.z - _2748;
                        float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                        float _3263 = inversesqrt(_3260);
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3267 = dot(vec3(_962, _965, _968), vec3(_3264, _3265, _3266));
                        float _3272 = 1.0 - (_3260 * _3217.w);
                        float _4657 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3274 = sqrt(_3260) * _3236.w;
                        float _3277 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3267) + _3278;
                        float _3284 = _3274 * _3274;
                        float _3288 = ((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3273) / ((_3284 * 0.699999988079071044921875) + 1.0);
                        float _3292 = (-0.0) - _2746;
                        float _3293 = (-0.0) - _2747;
                        float _3294 = (-0.0) - _2748;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3309 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _1037;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_962, _965, _968), vec3(_3299, _3300, _3301));
                        float _4673 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3334 = dot(vec3(_962, _965, _968), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4684 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3277 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3267) + _3343;
                        float _4695 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4706 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) / ((_3341 * _3341) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125))) * _3273;
                        _3121 = (_3288 * _3236.x) + _3194;
                        _3122 = (_3288 * _3236.y) + _3195;
                        _3123 = (_3288 * _3236.z) + _3196;
                        _3118 = (_3369 * _3253.x) + _3191;
                        _3119 = (_3369 * _3253.y) + _3192;
                        _3120 = (_3369 * _3253.z) + _3193;
                        if (_3198 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3198;
                        }
                    }
                    frontier_phi_66_pred = _3118;
                    frontier_phi_66_pred_1 = _3123;
                    frontier_phi_66_pred_2 = _3122;
                    frontier_phi_66_pred_3 = _3121;
                    frontier_phi_66_pred_4 = _3120;
                    frontier_phi_66_pred_5 = _3119;
                }
                _2894 = frontier_phi_66_pred;
                _2904 = frontier_phi_66_pred_1;
                _2902 = frontier_phi_66_pred_2;
                _2900 = frontier_phi_66_pred_3;
                _2898 = frontier_phi_66_pred_4;
                _2896 = frontier_phi_66_pred_5;
                uint _3053 = _3052 + 1u;
                if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3046 = _2894;
                    _3047 = _2896;
                    _3048 = _2898;
                    _3049 = _2900;
                    _3050 = _2902;
                    _3051 = _2904;
                    _3052 = _3053;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
        }
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.z;
        uint _2910 = (_2908 >> 8u) & 15u;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((4294967295u << _2910) & _2792) == 0u)
        {
            _3014 = _2893;
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
            _3022 = _2901;
            _3024 = _2903;
        }
        else
        {
            float _3039 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
            float _3040 = _3039 * _2746;
            float _3041 = _3039 * _2747;
            float _3042 = _3039 * _2748;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2910 < ((_2908 >> 12u) & 15u))
            {
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3174 = _2893;
                float _3175 = _2895;
                float _3176 = _2897;
                float _3177 = _2899;
                float _3178 = _2901;
                float _3179 = _2903;
                uint _3180 = _2910;
                uint _3189;
                bool _3190;
                for (;;)
                {
                    _3189 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                    _3190 = _3189 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3190)
                    {
                        frontier_phi_77_pred = _3179;
                        frontier_phi_77_pred_1 = _3178;
                        frontier_phi_77_pred_2 = _3177;
                        frontier_phi_77_pred_3 = _3176;
                        frontier_phi_77_pred_4 = _3175;
                        frontier_phi_77_pred_5 = _3174;
                    }
                    else
                    {
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        float _3401 = _3179;
                        uint _3402 = _3189;
                        uint _3403;
                        vec4 _3428;
                        float _3429;
                        vec4 _3444;
                        vec3 _3456;
                        vec4 _3471;
                        vec4 _3486;
                        float _3532;
                        bool _3533;
                        for (;;)
                        {
                            uint _3413 = ((_3180 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3402));
                            _3403 = (_3402 + 4294967295u) & _3402;
                            uint _3415 = _3413 * 40u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3429 = _3428.w;
                            uint _3431 = (_3413 * 40u) + 4u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3413 * 40u) + 8u;
                            _3456 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x));
                            uint _3458 = (_3413 * 40u) + 16u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3413 * 40u) + 20u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3413 * 40u) + 24u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3507 = (_3413 * 40u) + 28u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3532 = fma(_2748, _3520.z, fma(_2747, _3520.y, _3520.x * _2746)) + _3520.w;
                            _3533 = !((fma(_2748, _3501.z, fma(_2747, _3501.y, _3501.x * _2746)) + _3501.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3533)
                            {
                                float _3560 = _3428.x - _2746;
                                float _3561 = _3428.y - _2747;
                                float _3562 = _3428.z - _2748;
                                float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                                float _3566 = inversesqrt(_3563);
                                float _3567 = _3566 * _3560;
                                float _3568 = _3566 * _3561;
                                float _3569 = _3566 * _3562;
                                float _3573 = 1.0 - (_3563 / (_3429 * _3429));
                                float _4717 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3578 = sqrt(_3563) * _3444.w;
                                float _3580 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                                float _3581 = _3580 * _3580;
                                float _3584 = ((1.0 - _3581) * dot(vec3(_3567, _3568, _3569), vec3(_962, _965, _968))) + _3581;
                                float _3587 = _3578 * _3578;
                                float _3591 = (fma(_2748, _3471.z, fma(_2747, _3471.y, _3471.x * _2746)) + _3471.w) / _3532;
                                float _3592 = (fma(_2748, _3486.z, fma(_2747, _3486.y, _3486.x * _2746)) + _3486.w) / _3532;
                                float _3596 = 1.0 - dot(vec2(_3591, _3592), vec2(_3591, _3592));
                                float _4733 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3598 = _3597 * (((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3574) / ((_3587 * 0.699999988079071044921875) + 1.0));
                                float _3610 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                                float _3611 = 1.0 - _1037;
                                float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                                float _3619 = _3618 * _3618;
                                float _3620 = _3619 * _3619;
                                float _3621 = _3567 - _3040;
                                float _3622 = _3568 - _3041;
                                float _3623 = _3569 - _3042;
                                float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                                float _3631 = dot(vec3(_962, _965, _968), vec3((-0.0) - _3040, (-0.0) - _3041, (-0.0) - _3042));
                                float _4744 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3635 = dot(vec3(_962, _965, _968), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                                float _4755 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                                float _3643 = _3580 * _3619;
                                float _3644 = _3643 * _3643;
                                float _3650 = ((1.0 - _3644) * dot(vec3(_962, _965, _968), vec3(_3567, _3568, _3569))) + _3644;
                                float _4766 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3652 = 1.0 - _3619;
                                float _3662 = (0.5 / (((_3651 * ((_3634 * _3652) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3651 * _3652) + _3619) * _3634))) * _3651;
                                float _4777 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3672 = (_3597 * _3574) * (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) / ((_3642 * _3642) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3598 * _3444.y;
                                frontier_phi_83_pred_1 = _3598 * _3444.x;
                                frontier_phi_83_pred_2 = _3672 * _3456.z;
                                frontier_phi_83_pred_3 = _3672 * _3456.y;
                                frontier_phi_83_pred_4 = _3672 * _3456.x;
                                frontier_phi_83_pred_5 = _3598 * _3444.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3680 = frontier_phi_83_pred;
                            _3679 = frontier_phi_83_pred_1;
                            _3678 = frontier_phi_83_pred_2;
                            _3677 = frontier_phi_83_pred_3;
                            _3676 = frontier_phi_83_pred_4;
                            _3681 = frontier_phi_83_pred_5;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            if (_3403 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3403;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3388;
                        frontier_phi_77_pred_1 = _3387;
                        frontier_phi_77_pred_2 = _3386;
                        frontier_phi_77_pred_3 = _3385;
                        frontier_phi_77_pred_4 = _3384;
                        frontier_phi_77_pred_5 = _3383;
                    }
                    _3025 = frontier_phi_77_pred;
                    _3023 = frontier_phi_77_pred_1;
                    _3021 = frontier_phi_77_pred_2;
                    _3019 = frontier_phi_77_pred_3;
                    _3017 = frontier_phi_77_pred_4;
                    _3015 = frontier_phi_77_pred_5;
                    uint _3181 = _3180 + 1u;
                    if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3174 = _3015;
                        _3175 = _3017;
                        _3176 = _3019;
                        _3177 = _3021;
                        _3178 = _3023;
                        _3179 = _3025;
                        _3180 = _3181;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3019;
                frontier_phi_58_59_ladder_1 = _3025;
                frontier_phi_58_59_ladder_2 = _3023;
                frontier_phi_58_59_ladder_3 = _3021;
                frontier_phi_58_59_ladder_4 = _3017;
                frontier_phi_58_59_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_58_59_ladder = _2897;
                frontier_phi_58_59_ladder_1 = _2903;
                frontier_phi_58_59_ladder_2 = _2901;
                frontier_phi_58_59_ladder_3 = _2899;
                frontier_phi_58_59_ladder_4 = _2895;
                frontier_phi_58_59_ladder_5 = _2893;
            }
            _3014 = frontier_phi_58_59_ladder_5;
            _3016 = frontier_phi_58_59_ladder_4;
            _3018 = frontier_phi_58_59_ladder;
            _3020 = frontier_phi_58_59_ladder_3;
            _3022 = frontier_phi_58_59_ladder_2;
            _3024 = frontier_phi_58_59_ladder_1;
        }
        float _3029 = isnan(1.0) ? _1021 : (isnan(_1021) ? 1.0 : min(_1021, 1.0));
        _2805 = (_3029 * _3020) + _2238;
        _2807 = (_3029 * _3022) + _2240;
        _2809 = (_3029 * _3024) + _2242;
        _2811 = ((_3014 * _1006) * _3029) + _2586;
        _2813 = ((_3016 * _1008) * _3029) + _2588;
        _2815 = ((_3018 * _1009) * _3029) + _2590;
    }
    else
    {
        _2805 = _2238;
        _2807 = _2240;
        _2809 = _2242;
        _2811 = _2586;
        _2813 = _2588;
        _2815 = _2590;
    }
    float _4793 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4804 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4815 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2832 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2805 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1021))) + ((_2811 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1856)) * cbPerFrame._m0[3u].x);
    float _2833 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2807 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1021))) + ((_2813 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1856)) * cbPerFrame._m0[3u].x);
    float _2834 = ((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2809 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1021))) + ((_2815 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1856)) * cbPerFrame._m0[3u].x);
    uint _2835 = _981 + 6u;
    float _2843 = _943 / cbSceneParam._m0[86u].x;
    float _2844 = _944 / cbSceneParam._m0[86u].y;
    vec4 _2858 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, (log2((isnan(cbSceneParam._m0[77u].w) ? _866 : (isnan(_866) ? cbSceneParam._m0[77u].w : min(_866, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2860 = _2858.x;
    float _2861 = _2858.y;
    float _2862 = _2858.z;
    float _2863 = _2858.w;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_866 > cbSceneParam._m0[78u].w)
    {
        float _2918 = isnan(_866) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _866 : min(cbSceneParam._m0[80u].w, _866));
        float _2919 = _2918 / _866;
        float _2930 = _2919 * _916;
        float _2931 = _917 * _2919;
        float _2932 = (-0.0) - _2931;
        float _2934 = _2919 * _918;
        float _2936 = (cbSceneParam._m0[77u].w * _2932) / _2918;
        float _2937 = _2936 + cbSceneParam._m0[79u].w;
        float _2938 = cbSceneParam._m0[79u].w - _2931;
        float _2944 = sqrt(((_2930 * _2930) + (_2931 * _2931)) + (_2934 * _2934));
        float _2947 = (1.0 - (cbSceneParam._m0[77u].w / _2918)) * _2944;
        float _2952 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2954 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3131;
        if (abs((_2932 - _2936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3131 = ((((_2937 > 0.0) ? exp2(_2952 * _2937) : (2.0 - exp2(_2954 * _2937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2947;
        }
        else
        {
            float _3075 = 1.0 / cbSceneParam._m0[80u].x;
            float _3076 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : max(_2937, _2938));
            float _3077 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : min(_2937, _2938));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            _3131 = ((abs(_2944 / _2932) * cbSceneParam._m0[80u].y) * ((((_3086 - _3087) * 2.0) - ((exp2(_2952 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0)))) - exp2(_2952 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))))) * _3075)) - ((exp2(_2954 * _3086) - exp2(_2954 * _3087)) * _3075))) + (_2947 * cbSceneParam._m0[80u].z);
        }
        vec4 _3133 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, 1.0), 0.0);
        float _3142 = exp2((_3131 * (-1.44269502162933349609375)) * (1.0 - _3133.w));
        float _3143 = log2(_3142);
        float _3159 = log2(_2863);
        _2956 = (exp2(_3159 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].x)) * _3133.x) / cbSceneParam._m0[78u].x)) + _2860;
        _2958 = (exp2(_3159 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].y)) * _3133.y) / cbSceneParam._m0[78u].y)) + _2861;
        _2960 = (exp2(_3159 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].z)) * _3133.z) / cbSceneParam._m0[78u].z)) + _2862;
        _2962 = _3142 * _2863;
    }
    else
    {
        _2956 = _2860;
        _2958 = _2861;
        _2960 = _2862;
        _2962 = _2863;
    }
    bool _3169;
    vec4 _2972;
    vec4 _2994;
    float _2996;
    float _3000;
    float _3001;
    float _3002;
    float _3003;
    bool _3013;
    for (;;)
    {
        _2972 = cbMatDynParam._m0[0u];
        float _2974 = roundEven(_2972.y);
        bool _2975 = _2974 == 3.0;
        float _2976 = log2(_2962);
        float _2983 = exp2(_2976 * cbSceneParam._m0[78u].x) * _2832;
        float _2984 = exp2(_2976 * cbSceneParam._m0[78u].y) * _2833;
        float _2985 = exp2(_2976 * cbSceneParam._m0[78u].z) * _2834;
        float _2992 = _932 + (-0.5);
        _2994 = cbMtdParam._m0[1u];
        _2996 = _2994.y * _2992;
        float _2999 = (_2974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3000 = _2999 * (_2975 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2956)));
        _3001 = _2999 * (_2975 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2958)));
        _3002 = _2999 * (_2975 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2960)));
        _3003 = _2992 * 0.999000012874603271484375;
        _3013 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3013)
        {
            if ((cbInstanceData._m0[_981 + 7u].x + _3003) < 0.5)
            {
                _3169 = true;
                break;
            }
        }
        uint _3110 = _982 + uint(_2972.w);
        if ((cbInstanceData._m0[_3110].w < 1.0) && ((cbInstanceData._m0[_3110].w + _3003) < 0.5))
        {
            _3169 = true;
            break;
        }
        if ((_2996 + 1.0) < _2994.x)
        {
            _3169 = true;
            break;
        }
        _3169 = false;
        break;
    }
    float _3374;
    if (_3169)
    {
        discard_state = true;
        _3374 = 0.0;
    }
    else
    {
        _3374 = cbInstanceData._m0[_2835].w;
    }
    SV_Target.x = _3000;
    SV_Target.y = _3001;
    SV_Target.z = _3002;
    SV_Target.w = _3374;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2835].w;
    discard_exit();
}


