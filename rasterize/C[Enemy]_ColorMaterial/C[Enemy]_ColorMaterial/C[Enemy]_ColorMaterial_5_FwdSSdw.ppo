#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1563;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _313 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _317 = _313.z;
    float _330 = exp2(log2((1.0 - _317) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    vec4 _348 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _360 = exp2(log2(_348.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _362 = isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0));
    float _371 = exp2(log2(cbMtdParam._m0[23u].y * _317) * cbMtdParam._m0[22u].y);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(1.0) ? _372 : (isnan(_372) ? 1.0 : min(_372, 1.0));
    vec4 _385 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _388 = _385.y;
    float _391 = (_385.x + (-0.02500000037252902984619140625)) * 8.0;
    float _395 = roundEven(5.0 - _391);
    float _396 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _397 = isnan(4.0) ? _396 : (isnan(_396) ? 4.0 : min(_396, 4.0));
    float _410 = floor(_397);
    vec4 _413 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _410));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[17u].x;
    _207[0u] = cbMtdParam._m0[17u].y;
    _208[0u] = cbMtdParam._m0[17u].z;
    _206[1u] = cbMtdParam._m0[15u].x;
    _207[1u] = cbMtdParam._m0[15u].y;
    _208[1u] = cbMtdParam._m0[15u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[13u].x;
    _207[3u] = cbMtdParam._m0[13u].y;
    _208[3u] = cbMtdParam._m0[13u].z;
    _206[4u] = cbMtdParam._m0[12u].x;
    _207[4u] = cbMtdParam._m0[12u].y;
    _208[4u] = cbMtdParam._m0[12u].z;
    _206[5u] = cbMtdParam._m0[18u].x;
    _207[5u] = cbMtdParam._m0[18u].y;
    _208[5u] = cbMtdParam._m0[18u].z;
    float _477 = roundEven(_391);
    float _478 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    uint _480 = uint(int(isnan(5.0) ? _478 : (isnan(_478) ? 5.0 : min(_478, 5.0))));
    vec4 _510 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _521 = cbMtdParam._m0[9u].x * _510.x;
    float _522 = cbMtdParam._m0[9u].y * _510.y;
    float _523 = cbMtdParam._m0[9u].z * _510.z;
    float _530 = ((((((_206[_480] - cbMtdParam._m0[10u].x) * _388) + cbMtdParam._m0[10u].x) * _413.x) - _521) * _373) + _521;
    float _531 = ((((((_207[_480] - cbMtdParam._m0[10u].y) * _388) + cbMtdParam._m0[10u].y) * _413.y) - _522) * _373) + _522;
    float _532 = ((((((_208[_480] - cbMtdParam._m0[10u].z) * _388) + cbMtdParam._m0[10u].z) * _413.z) - _523) * _373) + _523;
    float _538 = exp2(log2(_313.w) * cbMtdParam._m0[23u].w);
    vec4 _551 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _570 = (((cbMtdParam._m0[16u].x * _551.x) - _530) * _538) + _530;
    float _571 = (((cbMtdParam._m0[16u].y * _551.y) - _531) * _538) + _531;
    float _572 = (((cbMtdParam._m0[16u].z * _551.z) - _532) * _538) + _532;
    vec4 _585 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _605 = (((cbMtdParam._m0[19u].x * _585.x) - _570) * _362) + _570;
    float _606 = (((cbMtdParam._m0[19u].y * _585.y) - _571) * _362) + _571;
    float _607 = (((cbMtdParam._m0[19u].z * _585.z) - _572) * _362) + _572;
    vec4 _619 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _644 = (_348.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _619.x) - _605) * _332) + _605);
    float _646 = (_348.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _619.y) - _606) * _332) + _606);
    float _648 = (_348.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _619.z) - _607) * _332) + _607);
    vec4 _660 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _678 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _680 = _678 * (cbMtdParam._m0[24u].z + 1.0);
    float _3960 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _688 = (_681 * ((cbMtdParam._m0[11u].x * _660.x) - _644)) + _644;
    float _689 = (((cbMtdParam._m0[11u].y * _660.y) - _646) * _681) + _646;
    float _690 = (((cbMtdParam._m0[11u].z * _660.z) - _648) * _681) + _648;
    float _694 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _702 = (_694 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _694))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3971 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _710 = ((cbMtdParam._m0[21u].x - _688) * _703) + _688;
    float _711 = ((cbMtdParam._m0[21u].y - _689) * _703) + _689;
    float _712 = ((cbMtdParam._m0[21u].z - _690) * _703) + _690;
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[28u].w;
    _202[0u] = cbMtdParam._m0[29u].x;
    _201[1u] = cbMtdParam._m0[30u].w;
    _202[1u] = cbMtdParam._m0[31u].x;
    _201[2u] = cbMtdParam._m0[30u].y;
    _202[2u] = cbMtdParam._m0[30u].z;
    _201[3u] = cbMtdParam._m0[29u].w;
    _202[3u] = cbMtdParam._m0[30u].x;
    _201[4u] = cbMtdParam._m0[29u].y;
    _202[4u] = cbMtdParam._m0[29u].z;
    float _752 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    uint _754 = uint(int(isnan(4.0) ? _752 : (isnan(_752) ? 4.0 : min(_752, 4.0))));
    float _761 = ((_202[_754] - cbMtdParam._m0[22u].z) * _373) + cbMtdParam._m0[22u].z;
    float _764 = ((cbMtdParam._m0[22u].w - _761) * _538) + _761;
    float _767 = ((cbMtdParam._m0[25u].x - _764) * _362) + _764;
    float _770 = ((cbMtdParam._m0[26u].x - _767) * _332) + _767;
    float _775 = (cbMtdParam._m0[24u].y + 1.0) * _678;
    float _3992 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _778 = _770 - (_770 * _776);
    float _780 = _778 - (_778 * _694);
    vec4 _793 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _410));
    vec4 _810 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _812 = _810.x;
    float _813 = _810.y;
    float _818 = cbMtdParam._m0[22u].x + _810.z;
    float _821 = (((_793.z + _201[_754]) - _818) * _373) + _818;
    vec4 _833 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _844 = (((_833.z - _821) + cbMtdParam._m0[28u].y) * _538) + _821;
    float _850 = ((((_317 * 2.0) * _844) - _844) * cbMtdParam._m0[24u].w) + _844;
    vec4 _862 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _873 = (((cbMtdParam._m0[23u].z + _862.z) - _850) * _362) + _850;
    vec4 _886 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _897 = (((_886.z - _873) + cbMtdParam._m0[26u].y) * _332) + _873;
    vec4 _909 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _921 = ((_909.z - _897) * _776) + _897;
    vec4 _936 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _950 = ((cbMtdParam._m0[27u].y * _694) * ((_936.z * cbMtdParam._m0[27u].x) - _921)) + _921;
    float _965 = ((_793.x - _812) * _373) + _812;
    float _966 = ((_793.y - _813) * _373) + _813;
    float _971 = ((_833.x - _965) * _538) + _965;
    float _972 = ((_833.y - _966) * _538) + _966;
    float _977 = ((_862.x - _971) * _362) + _971;
    float _978 = ((_862.y - _972) * _362) + _972;
    float _987 = ((((_886.x - _977) * _332) + _977) * 2.0) + (-1.0);
    float _988 = ((((_886.y - _978) * _332) + _978) * 2.0) + (-1.0);
    float _989 = dot(vec2(_987, _988), vec2(_987, _988));
    float _4003 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _994 = sqrt(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))));
    float _1010 = (((cbMtdParam._m0[25u].y * ((_313.x * 2.0) + (-1.0))) + _987) + (((((_909.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _776)) + ((((_936.x * 2.0) + (-1.0)) * _694) * cbMtdParam._m0[26u].w);
    float _1011 = (((cbMtdParam._m0[25u].y * ((_313.y * 2.0) + (-1.0))) + _988) + (((((_909.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _776)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_936.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1014 = fma(_994, _243 * NORMAL.x, fma(_1011, _250 * TANGENT.x, (_236 * _228) * _1010));
    float _1017 = fma(_994, _243 * NORMAL.y, fma(_1011, _250 * TANGENT.y, (_236 * _229) * _1010));
    float _1020 = fma(_994, _243 * NORMAL.z, fma(_1011, _250 * TANGENT.z, (_236 * _230) * _1010));
    float _1024 = inversesqrt(dot(vec3(_1014, _1017, _1020), vec3(_1014, _1017, _1020)));
    float _1025 = _1024 * _1014;
    float _1026 = _1024 * _1017;
    float _1027 = _1024 * _1020;
    float _4014 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _1028 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4036 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4047 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4058 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _1032 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1048 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1098 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1088);
    float _1099 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1088);
    float _1100 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1088);
    float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
    float _1105 = _1098 * _1104;
    float _1106 = _1099 * _1104;
    float _1107 = _1100 * _1104;
    float _1113 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1114 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1132 = fma(_1027, cbSceneParam._m0[5u].z, fma(_1026, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1025));
    float _1135 = fma(_1027, cbSceneParam._m0[6u].z, fma(_1026, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1025));
    float _1138 = fma(_1027, cbSceneParam._m0[7u].z, fma(_1026, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1025));
    uint _1151 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1153 = (_1151 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1159 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1153].x;
    float _1160 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1153].y;
    float _1161 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1153].z;
    float _4069 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _1165 = 1.0 - _1032;
    float _1166 = _1162 * _1165;
    float _1167 = _1163 * _1165;
    float _1168 = _1164 * _1165;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1032;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1032;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1032;
    float _1176 = _1173 + 0.039999999105930328369140625;
    float _1178 = _1174 + 0.039999999105930328369140625;
    float _1179 = _1175 + 0.039999999105930328369140625;
    vec4 _1188 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1113, cbSceneParam._m0[86u].y * _1114));
    float _1191 = _1188.x * TEXCOORD_3.w;
    float _1192 = dot(vec3(_1025, _1026, _1027), vec3(_1105, _1106, _1107));
    float _1195 = _1192 * 2.0;
    float _1199 = (_1195 * _1025) - _1105;
    float _1200 = (_1195 * _1026) - _1106;
    float _1201 = (_1195 * _1027) - _1107;
    float _1205 = abs(dot(vec3(_1105, _1106, _1107), vec3(_1025, _1026, _1027)));
    float _4102 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _1207 = sqrt(_1028);
    float _1218 = exp2((_1207 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1207 * 3.0));
    float _1224 = (1.0 - _1218) * ((_1207 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1225 = _1218 * _1207;
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1261 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1562;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1287 = fma(_1261, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1253));
        float _1291 = fma(_1261, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1253));
        float _1295 = fma(_1261, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1253));
        float _1320 = _1253 + _1025;
        float _1321 = _1257 + _1026;
        float _1322 = _1261 + _1027;
        float _1332 = fma(_1322, cbModelParam._m0[26u].z, fma(_1321, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1320)) - _1287;
        float _1333 = fma(_1322, cbModelParam._m0[27u].z, fma(_1321, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1320)) - _1291;
        float _1334 = fma(_1322, cbModelParam._m0[28u].z, fma(_1321, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1320)) - _1295;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1287 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1291 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[34u].z) + ((((((_1295 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1390 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1356.x + (-0.5));
        float _1392 = _1390 * (_1356.y + (-0.5));
        float _1393 = _1390 * (_1356.z + (-0.5));
        float _1400 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1363.x + (-0.5));
        float _1402 = _1400 * (_1363.y + (-0.5));
        float _1403 = _1400 * (_1363.z + (-0.5));
        float _1410 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1370.x + (-0.5));
        float _1412 = _1410 * (_1370.y + (-0.5));
        float _1413 = _1410 * (_1370.z + (-0.5));
        float _1420 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1377.x + (-0.5));
        float _1422 = _1420 * (_1377.y + (-0.5));
        float _1423 = _1420 * (_1377.z + (-0.5));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = _1391 * 0.5;
        float _1428 = _1401 * 0.5;
        float _1429 = _1411 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1444 = (dot(vec3(_1025, _1026, _1027), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1454 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4150 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1456 + 1.0))) + _1461) * _1424;
        float _1471 = _1392 * 0.5;
        float _1472 = _1402 * 0.5;
        float _1473 = _1412 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_1025, _1026, _1027), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4183 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1498 + 1.0))) + _1503) * _1425;
        float _1513 = _1393 * 0.5;
        float _1514 = _1403 * 0.5;
        float _1515 = _1413 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_1025, _1026, _1027), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4216 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1540 + 1.0))) + _1545) * _1426;
        _1562 = _1393;
        _1564 = _1392;
        _1565 = _1391;
        _1566 = _1403;
        _1567 = _1402;
        _1568 = _1401;
        _1569 = _1413;
        _1570 = _1412;
        _1571 = _1411;
        _1572 = _1426;
        _1573 = _1425;
        _1574 = _1424;
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1563;
        _1564 = _1563;
        _1565 = _1563;
        _1566 = _1563;
        _1567 = _1563;
        _1568 = _1563;
        _1569 = _1563;
        _1570 = _1563;
        _1571 = _1563;
        _1572 = _1563;
        _1573 = _1563;
        _1574 = _1563;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1600 = fma(_1261, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253));
        float _1604 = fma(_1261, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253));
        float _1608 = fma(_1261, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253));
        float _1631 = _1253 + _1025;
        float _1632 = _1257 + _1026;
        float _1633 = _1261 + _1027;
        float _1643 = fma(_1633, cbModelParam._m0[30u].z, fma(_1632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1631)) - _1600;
        float _1644 = fma(_1633, cbModelParam._m0[31u].z, fma(_1632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1631)) - _1604;
        float _1645 = fma(_1633, cbModelParam._m0[32u].z, fma(_1632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1631)) - _1608;
        float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
        float _1662 = ((_1649 * _1643) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1600 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1649 * _1644) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1604 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1664 = ((_1649 * _1645) / cbModelParam._m0[35u].z) + ((((((_1608 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        float _1699 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1666.x + (-0.5));
        float _1701 = _1699 * (_1666.y + (-0.5));
        float _1702 = _1699 * (_1666.z + (-0.5));
        float _1709 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1673.x + (-0.5));
        float _1711 = _1709 * (_1673.y + (-0.5));
        float _1712 = _1709 * (_1673.z + (-0.5));
        float _1719 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1680.x + (-0.5));
        float _1721 = _1719 * (_1680.y + (-0.5));
        float _1722 = _1719 * (_1680.z + (-0.5));
        float _1729 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1687.x + (-0.5));
        float _1731 = _1729 * (_1687.y + (-0.5));
        float _1732 = _1729 * (_1687.z + (-0.5));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = _1700 * 0.5;
        float _1737 = _1710 * 0.5;
        float _1738 = _1720 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_1025, _1026, _1027), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4279 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1763 + 1.0))) + _1768) * _1733;
        float _1778 = _1701 * 0.5;
        float _1779 = _1711 * 0.5;
        float _1780 = _1721 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_1025, _1026, _1027), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4312 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1805 + 1.0))) + _1810) * _1734;
        float _1820 = _1702 * 0.5;
        float _1821 = _1712 * 0.5;
        float _1822 = _1722 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1025, _1026, _1027), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4345 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1847 + 1.0))) + _1852) * _1735;
        _1869 = _1702;
        _1870 = _1701;
        _1871 = _1700;
        _1872 = _1712;
        _1873 = _1711;
        _1874 = _1710;
        _1875 = _1722;
        _1876 = _1721;
        _1877 = _1720;
        _1878 = _1735;
        _1879 = _1734;
        _1880 = _1733;
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
    }
    else
    {
        _1869 = _1563;
        _1870 = _1563;
        _1871 = _1563;
        _1872 = _1563;
        _1873 = _1563;
        _1874 = _1563;
        _1875 = _1563;
        _1876 = _1563;
        _1877 = _1563;
        _1878 = _1563;
        _1879 = _1563;
        _1880 = _1563;
        _1881 = 0.0;
        _1882 = 0.0;
        _1883 = 0.0;
    }
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1575)) + _1575;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1576)) + _1576;
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1577)) + _1577;
    float _1916 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1893));
    float _1937 = _1199 * 0.5;
    float _1938 = _1200 * 0.5;
    float _1939 = _1201 * 0.5;
    float _1940 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1943 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1946 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1980;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1953 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1562, _1566, _1569, _1572));
        float _1957 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1564, _1567, _1570, _1573));
        float _1961 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1565, _1568, _1571, _1574));
        float _1968 = dot(vec4(cbModelParam._m0[39u]), vec4(_1937, _1938, _1939, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1991;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1982 = dot(vec4(cbModelParam._m0[40u]), vec4(_1937, _1938, _1939, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _1995 = (_1991 * cbModelParam._m0[1u].x) + (_1980 * (1.0 - cbModelParam._m0[1u].x));
    float _2005 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1028);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2005 : min(cbModelParam._m0[25u].z, _2005));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2053 = fma(_1261, cbModelParam._m0[13u].z, fma(_1257, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1253)) + cbModelParam._m0[13u].w;
        float _2057 = fma(_1261, cbModelParam._m0[14u].z, fma(_1257, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1253)) + cbModelParam._m0[14u].w;
        float _2061 = fma(_1261, cbModelParam._m0[15u].z, fma(_1257, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1253)) + cbModelParam._m0[15u].w;
        float _2064 = fma(_1201, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199));
        float _2067 = fma(_1201, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199));
        float _2070 = fma(_1201, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199));
        float _2098;
        if (_2064 > 0.0)
        {
            _2098 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2098 = frontier_phi_14_12_ladder;
        }
        float _2321;
        if (_2067 > 0.0)
        {
            _2321 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2321 = frontier_phi_23_19_ladder;
        }
        float _2578;
        if (_2070 > 0.0)
        {
            _2578 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2578 = frontier_phi_35_30_ladder;
        }
        float _2580 = isnan(_2321) ? _2098 : (isnan(_2098) ? _2321 : min(_2098, _2321));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _2064) + _2053;
        float _2586 = (_2581 * _2067) + _2057;
        float _2587 = (_2581 * _2070) + _2061;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2588;
        float _2592 = _2588 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 > _2592) || ((_2586 < _2590) || ((_2585 < _2590) || (_2585 > _2592))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2587, cbModelParam._m0[9u].z, fma(_2586, cbModelParam._m0[9u].y, _2585 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2587, cbModelParam._m0[10u].z, fma(_2586, cbModelParam._m0[10u].y, _2585 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2587, cbModelParam._m0[11u].z, fma(_2586, cbModelParam._m0[11u].y, _2585 * cbModelParam._m0[11u].x))), _2006);
            frontier_phi_13_35_ladder = _2715.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2715.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2715.x * cbModelParam._m0[1u].y;
        }
        _2086 = frontier_phi_13_35_ladder_2;
        _2088 = frontier_phi_13_35_ladder_1;
        _2090 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1199, _1200, _1201), _2006);
        _2086 = _2074.x * cbModelParam._m0[1u].y;
        _2088 = _2074.y * cbModelParam._m0[1u].y;
        _2090 = _2074.z * cbModelParam._m0[1u].y;
    }
    float _2094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1028);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2094 : min(cbModelParam._m0[25u].w, _2094));
    float _2184;
    float _2186;
    float _2188;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2148 = fma(_1261, cbModelParam._m0[21u].z, fma(_1257, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1253)) + cbModelParam._m0[21u].w;
        float _2152 = fma(_1261, cbModelParam._m0[22u].z, fma(_1257, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1253)) + cbModelParam._m0[22u].w;
        float _2156 = fma(_1261, cbModelParam._m0[23u].z, fma(_1257, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1253)) + cbModelParam._m0[23u].w;
        float _2159 = fma(_1201, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199));
        float _2162 = fma(_1201, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199));
        float _2165 = fma(_1201, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199));
        float _2326;
        if (_2159 > 0.0)
        {
            _2326 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2326 = frontier_phi_25_21_ladder;
        }
        float _2605;
        if (_2162 > 0.0)
        {
            _2605 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2605 = frontier_phi_37_32_ladder;
        }
        float _2818;
        if (_2165 > 0.0)
        {
            _2818 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2818 = frontier_phi_46_43_ladder;
        }
        float _2820 = isnan(_2605) ? _2326 : (isnan(_2326) ? _2605 : min(_2326, _2605));
        float _2821 = isnan(_2818) ? _2820 : (isnan(_2820) ? _2818 : min(_2820, _2818));
        float _2825 = (_2821 * _2159) + _2148;
        float _2826 = (_2821 * _2162) + _2152;
        float _2827 = (_2821 * _2165) + _2156;
        float _2828 = _2821 * 9.9999997473787516355514526367188e-05;
        float _2829 = (-1.0) - _2828;
        float _2831 = _2828 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2827 > _2831) || ((_2827 < _2829) || ((_2826 > _2831) || ((_2826 < _2829) || ((_2825 < _2829) || (_2825 > _2831))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2827, cbModelParam._m0[17u].z, fma(_2826, cbModelParam._m0[17u].y, _2825 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2827, cbModelParam._m0[18u].z, fma(_2826, cbModelParam._m0[18u].y, _2825 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2827, cbModelParam._m0[19u].z, fma(_2826, cbModelParam._m0[19u].y, _2825 * cbModelParam._m0[19u].x))), _2095);
            frontier_phi_22_46_ladder = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _2184 = frontier_phi_22_46_ladder_2;
        _2186 = frontier_phi_22_46_ladder_1;
        _2188 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1199, _1200, _1201), _2095);
        _2184 = _2168.x * cbModelParam._m0[1u].z;
        _2186 = _2168.y * cbModelParam._m0[1u].z;
        _2188 = _2168.z * cbModelParam._m0[1u].z;
    }
    float _2201 = (((_1224 * _1176) + _1225) * _1191) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2203 = (((_1224 * _1178) + _1225) * _1191) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2205 = (((_1224 * _1179) + _1225) * _1191) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2208 = fma(_2205, cbSceneParam._m0[89u].z, fma(_2203, cbSceneParam._m0[89u].y, _2201 * cbSceneParam._m0[89u].x));
    float _2211 = fma(_2205, cbSceneParam._m0[90u].z, fma(_2203, cbSceneParam._m0[90u].y, _2201 * cbSceneParam._m0[90u].x));
    float _2214 = fma(_2205, cbSceneParam._m0[91u].z, fma(_2203, cbSceneParam._m0[91u].y, _2201 * cbSceneParam._m0[91u].x));
    vec4 _2222 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1113, _1114));
    float _2224 = _2222.w;
    float _2236 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2224);
    float _2237 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2224);
    float _2238 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2224);
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_1151 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _1191 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_1025, _1026, _1027));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_1025, _1026, _1027));
    float _4481 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4492 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2236) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2237) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2238) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2320)
    {
        _2331 = _2312;
        _2333 = _2313;
        _2335 = _2314;
    }
    else
    {
        uint _2339 = _2244 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4503 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2358 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2312;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2313;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2314;
    }
    bool _2338 = _2318.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2338)
    {
        _2376 = _2331;
        _2378 = _2333;
        _2380 = _2335;
    }
    else
    {
        uint _2549 = _2244 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4519 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2568 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2376 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2331;
        _2378 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2333;
        _2380 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2335;
    }
    uint _2383 = _2244 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _1028) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2244].x + _1105;
    float _2399 = cbLight._m0[_2244].y + _1106;
    float _2400 = cbLight._m0[_2244].z + _1107;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2244].xyz));
    float _4535 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _2412 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2413 = dot(vec3(_1025, _1026, _1027), vec3(_2405, _2406, _2407));
    float _4557 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2405, _2406, _2407));
    float _4568 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _1173;
    float _2436 = 0.959999978542327880859375 - _1174;
    float _2437 = 0.959999978542327880859375 - _1175;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4579 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2471 = _2244 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _1028) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2284].x + _1105;
    float _2485 = cbLight._m0[_2284].y + _1106;
    float _2486 = cbLight._m0[_2284].z + _1107;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2284].xyz));
    float _4590 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2498 = dot(vec3(_1025, _1026, _1027), vec3(_2491, _2492, _2493));
    float _4601 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2491, _2492, _2493));
    float _4612 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2524 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2412 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2524) + _2483) * _2497))) * _2497;
    float _4623 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2546 = (((((_2517 * _2434) + _1176) * cbLight._m0[_2471].x) * _2536) * _2267) + ((((cbLight._m0[_2383].x * _2236) * ((_2433 * _2434) + _1176)) * _2457) * _2280);
    float _2547 = (((((_2517 * _2436) + _1178) * cbLight._m0[_2471].y) * _2536) * _2267) + ((((cbLight._m0[_2383].y * _2237) * ((_2433 * _2436) + _1178)) * _2457) * _2280);
    float _2548 = (((((_2517 * _2437) + _1179) * cbLight._m0[_2471].z) * _2536) * _2267) + ((((cbLight._m0[_2383].z * _2238) * ((_2433 * _2437) + _1179)) * _2457) * _2280);
    float _2610;
    float _2612;
    float _2614;
    if (_2320)
    {
        _2610 = _2546;
        _2612 = _2547;
        _2614 = _2548;
    }
    else
    {
        uint _2616 = _2244 + 2u;
        uint _2620 = _2244 + 10u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _1028) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _1105;
        float _2637 = cbLight._m0[_2616].y + _1106;
        float _2638 = cbLight._m0[_2616].z + _1107;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2616].xyz));
        float _4634 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2650 = dot(vec3(_1025, _1026, _1027), vec3(_2643, _2644, _2645));
        float _4645 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4656 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2412 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2676) + _2635) * _2649))) * _2649;
        float _4667 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2610 = (((((_2669 * _2434) + _1176) * cbLight._m0[_2620].x) * _2688) * _2689) + _2546;
        _2612 = (((((_2669 * _2436) + _1178) * cbLight._m0[_2620].y) * _2688) * _2689) + _2547;
        _2614 = (((((_2669 * _2437) + _1179) * cbLight._m0[_2620].z) * _2688) * _2689) + _2548;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2338)
    {
        _2724 = _2610;
        _2726 = _2612;
        _2728 = _2614;
    }
    else
    {
        uint _2735 = _2244 + 3u;
        uint _2739 = _2244 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _1028) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _1105;
        float _2756 = cbLight._m0[_2735].y + _1106;
        float _2757 = cbLight._m0[_2735].z + _1107;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2735].xyz));
        float _4683 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2769 = dot(vec3(_1025, _1026, _1027), vec3(_2762, _2763, _2764));
        float _4694 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4705 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2412 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2795) + _2754) * _2768))) * _2768;
        float _4716 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2724 = (((((_2788 * _2434) + _1176) * cbLight._m0[_2739].x) * _2807) * _2808) + _2610;
        _2726 = (((((_2788 * _2436) + _1178) * cbLight._m0[_2739].y) * _2807) * _2808) + _2612;
        _2728 = (((((_2788 * _2437) + _1179) * cbLight._m0[_2739].z) * _2807) * _2808) + _2614;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2242.y == 0u)
    {
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2884 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2883;
        float _2885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2883;
        float _2886 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2883;
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1114) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _1113) / _2899)));
        float _2920 = (log2(_2886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
        }
        else
        {
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            uint _3182 = 0u;
            uint _3191;
            bool _3192;
            for (;;)
            {
                _3191 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                _3192 = _3191 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3192)
                {
                    frontier_phi_61_pred = _3176;
                    frontier_phi_61_pred_1 = _3181;
                    frontier_phi_61_pred_2 = _3180;
                    frontier_phi_61_pred_3 = _3179;
                    frontier_phi_61_pred_4 = _3178;
                    frontier_phi_61_pred_5 = _3177;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3191;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3182 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _2884;
                        float _3367 = _3326.y - _2885;
                        float _3368 = _3326.z - _2886;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_1132, _1135, _1138), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4742 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _2884;
                        float _3402 = (-0.0) - _2885;
                        float _3403 = (-0.0) - _2886;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3418 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _1207;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3408 + _3373;
                        float _3430 = _3409 + _3374;
                        float _3431 = _3410 + _3375;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_1132, _1135, _1138), vec3(_3408, _3409, _3410));
                        float _4758 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3443 = dot(vec3(_1132, _1135, _1138), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4769 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3386 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3376) + _3452;
                        float _4780 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4791 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3450 * _3450) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3235 = (_3397 * _3345.x) + _3303;
                        _3236 = (_3397 * _3345.y) + _3304;
                        _3237 = (_3397 * _3345.z) + _3305;
                        _3232 = (_3478 * _3362.x) + _3300;
                        _3233 = (_3478 * _3362.y) + _3301;
                        _3234 = (_3478 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_61_pred = _3232;
                    frontier_phi_61_pred_1 = _3237;
                    frontier_phi_61_pred_2 = _3236;
                    frontier_phi_61_pred_3 = _3235;
                    frontier_phi_61_pred_4 = _3234;
                    frontier_phi_61_pred_5 = _3233;
                }
                _3032 = frontier_phi_61_pred;
                _3042 = frontier_phi_61_pred_1;
                _3040 = frontier_phi_61_pred_2;
                _3038 = frontier_phi_61_pred_3;
                _3036 = frontier_phi_61_pred_4;
                _3034 = frontier_phi_61_pred_5;
                uint _3183 = _3182 + 1u;
                if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3176 = _3032;
                    _3177 = _3034;
                    _3178 = _3036;
                    _3179 = _3038;
                    _3180 = _3040;
                    _3181 = _3042;
                    _3182 = _3183;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
        }
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.z;
        uint _3048 = (_3046 >> 8u) & 15u;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        if (((4294967295u << _3048) & _2930) == 0u)
        {
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
        }
        else
        {
            float _3169 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
            float _3170 = _3169 * _2884;
            float _3171 = _3169 * _2885;
            float _3172 = _3169 * _2886;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3048 < ((_3046 >> 12u) & 15u))
            {
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3283 = _3031;
                float _3284 = _3033;
                float _3285 = _3035;
                float _3286 = _3037;
                float _3287 = _3039;
                float _3288 = _3041;
                uint _3289 = _3048;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3299)
                    {
                        frontier_phi_67_pred = _3286;
                        frontier_phi_67_pred_1 = _3287;
                        frontier_phi_67_pred_2 = _3288;
                        frontier_phi_67_pred_3 = _3285;
                        frontier_phi_67_pred_4 = _3284;
                        frontier_phi_67_pred_5 = _3283;
                    }
                    else
                    {
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        float _3498 = _3285;
                        float _3499 = _3286;
                        float _3500 = _3287;
                        float _3501 = _3288;
                        uint _3502 = _3298;
                        uint _3503;
                        vec4 _3528;
                        float _3529;
                        vec4 _3544;
                        vec3 _3556;
                        vec4 _3571;
                        vec4 _3586;
                        float _3632;
                        bool _3633;
                        for (;;)
                        {
                            uint _3513 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3502));
                            _3503 = (_3502 + 4294967295u) & _3502;
                            uint _3515 = _3513 * 40u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3529 = _3528.w;
                            uint _3531 = (_3513 * 40u) + 4u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3513 * 40u) + 8u;
                            _3556 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x));
                            uint _3558 = (_3513 * 40u) + 16u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3513 * 40u) + 20u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3513 * 40u) + 24u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3607 = (_3513 * 40u) + 28u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3632 = fma(_2886, _3620.z, fma(_2885, _3620.y, _3620.x * _2884)) + _3620.w;
                            _3633 = !((fma(_2886, _3601.z, fma(_2885, _3601.y, _3601.x * _2884)) + _3601.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3633)
                            {
                                float _3660 = _3528.x - _2884;
                                float _3661 = _3528.y - _2885;
                                float _3662 = _3528.z - _2886;
                                float _3663 = dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662));
                                float _3666 = inversesqrt(_3663);
                                float _3667 = _3666 * _3660;
                                float _3668 = _3666 * _3661;
                                float _3669 = _3666 * _3662;
                                float _3673 = 1.0 - (_3663 / (_3529 * _3529));
                                float _4802 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3678 = sqrt(_3663) * _3544.w;
                                float _3680 = 1.39999997615814208984375 / (_3678 + 1.39999997615814208984375);
                                float _3681 = _3680 * _3680;
                                float _3684 = ((1.0 - _3681) * dot(vec3(_3667, _3668, _3669), vec3(_1132, _1135, _1138))) + _3681;
                                float _3687 = _3678 * _3678;
                                float _3691 = (fma(_2886, _3571.z, fma(_2885, _3571.y, _3571.x * _2884)) + _3571.w) / _3632;
                                float _3692 = (fma(_2886, _3586.z, fma(_2885, _3586.y, _3586.x * _2884)) + _3586.w) / _3632;
                                float _3696 = 1.0 - dot(vec2(_3691, _3692), vec2(_3691, _3692));
                                float _4818 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3698 = _3697 * (((isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0))) * _3674) / ((_3687 * 0.699999988079071044921875) + 1.0));
                                float _3710 = exp2(log2(1.0 / ((_3687 * 3.5) + 5.0)) * 0.25);
                                float _3711 = 1.0 - _1207;
                                float _3718 = sqrt(1.0 - ((1.0 - (_3711 * _3711)) * (1.0 - (_3710 * _3710))));
                                float _3719 = _3718 * _3718;
                                float _3720 = _3719 * _3719;
                                float _3721 = _3667 - _3170;
                                float _3722 = _3668 - _3171;
                                float _3723 = _3669 - _3172;
                                float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                                float _3731 = dot(vec3(_1132, _1135, _1138), vec3((-0.0) - _3170, (-0.0) - _3171, (-0.0) - _3172));
                                float _4829 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3735 = dot(vec3(_1132, _1135, _1138), vec3(_3727 * _3721, _3727 * _3722, _3727 * _3723));
                                float _4840 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3742 = ((_3738 * _3738) * (_3720 + (-1.0))) + 1.0;
                                float _3743 = _3680 * _3719;
                                float _3744 = _3743 * _3743;
                                float _3750 = ((1.0 - _3744) * dot(vec3(_1132, _1135, _1138), vec3(_3667, _3668, _3669))) + _3744;
                                float _4851 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3752 = 1.0 - _3719;
                                float _3762 = (0.5 / (((_3751 * ((_3734 * _3752) + _3719)) + 9.9999999392252902907785028219223e-09) + (((_3751 * _3752) + _3719) * _3734))) * _3751;
                                float _4862 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3772 = (_3697 * _3674) * (((_3720 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3742 * _3742) * ((_3687 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3772 * _3556.x;
                                frontier_phi_73_pred_1 = _3772 * _3556.y;
                                frontier_phi_73_pred_2 = _3698 * _3544.z;
                                frontier_phi_73_pred_3 = _3698 * _3544.y;
                                frontier_phi_73_pred_4 = _3698 * _3544.x;
                                frontier_phi_73_pred_5 = _3772 * _3556.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_73_pred;
                            _3777 = frontier_phi_73_pred_1;
                            _3781 = frontier_phi_73_pred_2;
                            _3780 = frontier_phi_73_pred_3;
                            _3779 = frontier_phi_73_pred_4;
                            _3778 = frontier_phi_73_pred_5;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            if (_3503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3503;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3486;
                        frontier_phi_67_pred_1 = _3487;
                        frontier_phi_67_pred_2 = _3488;
                        frontier_phi_67_pred_3 = _3485;
                        frontier_phi_67_pred_4 = _3484;
                        frontier_phi_67_pred_5 = _3483;
                    }
                    _3151 = frontier_phi_67_pred;
                    _3153 = frontier_phi_67_pred_1;
                    _3155 = frontier_phi_67_pred_2;
                    _3149 = frontier_phi_67_pred_3;
                    _3147 = frontier_phi_67_pred_4;
                    _3145 = frontier_phi_67_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3145;
                        _3284 = _3147;
                        _3285 = _3149;
                        _3286 = _3151;
                        _3287 = _3153;
                        _3288 = _3155;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3153;
                frontier_phi_55_56_ladder_1 = _3155;
                frontier_phi_55_56_ladder_2 = _3151;
                frontier_phi_55_56_ladder_3 = _3149;
                frontier_phi_55_56_ladder_4 = _3147;
                frontier_phi_55_56_ladder_5 = _3145;
            }
            else
            {
                frontier_phi_55_56_ladder = _3039;
                frontier_phi_55_56_ladder_1 = _3041;
                frontier_phi_55_56_ladder_2 = _3037;
                frontier_phi_55_56_ladder_3 = _3035;
                frontier_phi_55_56_ladder_4 = _3033;
                frontier_phi_55_56_ladder_5 = _3031;
            }
            _3144 = frontier_phi_55_56_ladder_5;
            _3146 = frontier_phi_55_56_ladder_4;
            _3148 = frontier_phi_55_56_ladder_3;
            _3150 = frontier_phi_55_56_ladder_2;
            _3152 = frontier_phi_55_56_ladder;
            _3154 = frontier_phi_55_56_ladder_1;
        }
        float _3159 = isnan(1.0) ? _1191 : (isnan(_1191) ? 1.0 : min(_1191, 1.0));
        _2943 = (_3159 * _3150) + _2376;
        _2945 = (_3159 * _3152) + _2378;
        _2947 = (_3159 * _3154) + _2380;
        _2949 = ((_3144 * _1176) * _3159) + _2724;
        _2951 = ((_3146 * _1178) * _3159) + _2726;
        _2953 = ((_3148 * _1179) * _3159) + _2728;
    }
    else
    {
        _2943 = _2376;
        _2945 = _2378;
        _2947 = _2380;
        _2949 = _2724;
        _2951 = _2726;
        _2953 = _2728;
    }
    float _4878 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _4889 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _4900 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    uint _2973 = _1151 + 6u;
    float _2981 = _1113 / cbSceneParam._m0[86u].x;
    float _2982 = _1114 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _1048 : (isnan(_1048) ? cbSceneParam._m0[77u].w : min(_1048, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_1048 > cbSceneParam._m0[78u].w)
    {
        float _3056 = isnan(_1048) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1048 : min(cbSceneParam._m0[80u].w, _1048));
        float _3057 = _3056 / _1048;
        float _3068 = _3057 * _1098;
        float _3069 = _1099 * _3057;
        float _3070 = (-0.0) - _3069;
        float _3072 = _3057 * _1100;
        float _3074 = (cbSceneParam._m0[77u].w * _3070) / _3056;
        float _3075 = _3074 + cbSceneParam._m0[79u].w;
        float _3076 = cbSceneParam._m0[79u].w - _3069;
        float _3082 = sqrt(((_3068 * _3068) + (_3069 * _3069)) + (_3072 * _3072));
        float _3085 = (1.0 - (cbSceneParam._m0[77u].w / _3056)) * _3082;
        float _3090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_3070 - _3074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_3075 > 0.0) ? exp2(_3090 * _3075) : (2.0 - exp2(_3092 * _3075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3085;
        }
        else
        {
            float _3205 = 1.0 / cbSceneParam._m0[80u].x;
            float _3206 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : max(_3075, _3076));
            float _3207 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : min(_3075, _3076));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            _3245 = ((abs(_3082 / _3070) * cbSceneParam._m0[80u].y) * ((((_3216 - _3217) * 2.0) - ((exp2(_3090 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0)))) - exp2(_3090 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))))) * _3205)) - ((exp2(_3092 * _3216) - exp2(_3092 * _3217)) * _3205))) + (_3085 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_3001);
        _3094 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3096 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3098 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3100 = _3256 * _3001;
    }
    else
    {
        _3094 = _2998;
        _3096 = _2999;
        _3098 = _3000;
        _3100 = _3001;
    }
    float _3112 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3113 = _3112 == 3.0;
    float _3114 = log2(_3100);
    float _3121 = exp2(_3114 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2943 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1191))) + ((_2949 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1995)) * cbPerFrame._m0[3u].x));
    float _3122 = exp2(_3114 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2945 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1191))) + ((_2951 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1995)) * cbPerFrame._m0[3u].x));
    float _3123 = exp2(_3114 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2947 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1191))) + ((_2953 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1995)) * cbPerFrame._m0[3u].x));
    float _3132 = (_3112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3132 * (_3113 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.y = _3132 * (_3113 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.z = _3132 * (_3113 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
    SV_Target.w = cbInstanceData._m0[_2973].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
}


