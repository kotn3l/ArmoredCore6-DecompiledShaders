#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1428;
float _4089;
float _4090;
float _4091;
float _4092;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _301 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _319 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _331 = exp2(log2(_319.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _344 = isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0));
    float _365 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(4.0) ? _366 : (isnan(_366) ? 4.0 : min(_366, 4.0));
    float _380 = floor(_367);
    vec4 _383 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _380));
    vec4 _407 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _418 = cbMtdParam._m0[9u].x * _407.x;
    float _419 = cbMtdParam._m0[9u].y * _407.y;
    float _420 = cbMtdParam._m0[9u].z * _407.z;
    float _427 = (((cbMtdParam._m0[10u].x * _383.x) - _418) * _344) + _418;
    float _428 = (((cbMtdParam._m0[10u].y * _383.y) - _419) * _344) + _419;
    float _429 = (((cbMtdParam._m0[10u].z * _383.z) - _420) * _344) + _420;
    float _435 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _448 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _467 = (((cbMtdParam._m0[16u].x * _448.x) - _427) * _435) + _427;
    float _468 = (((cbMtdParam._m0[16u].y * _448.y) - _428) * _435) + _428;
    float _469 = (((cbMtdParam._m0[16u].z * _448.z) - _429) * _435) + _429;
    vec4 _482 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _502 = (((cbMtdParam._m0[19u].x * _482.x) - _467) * _333) + _467;
    float _503 = (((cbMtdParam._m0[19u].y * _482.y) - _468) * _333) + _468;
    float _504 = (((cbMtdParam._m0[19u].z * _482.z) - _469) * _333) + _469;
    vec4 _517 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _542 = (_319.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _517.x) - _502) * _303) + _502);
    float _544 = (_319.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _517.y) - _503) * _303) + _503);
    float _546 = (_319.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _517.z) - _504) * _303) + _504);
    float _550 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _559 = (_550 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _550))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4141 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _567 = ((cbMtdParam._m0[21u].x - _542) * _560) + _542;
    float _568 = ((cbMtdParam._m0[21u].y - _544) * _560) + _544;
    float _569 = ((cbMtdParam._m0[21u].z - _546) * _560) + _546;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[28u].w;
    _198[0u] = cbMtdParam._m0[29u].x;
    _197[1u] = cbMtdParam._m0[30u].w;
    _198[1u] = cbMtdParam._m0[31u].x;
    _197[2u] = cbMtdParam._m0[30u].y;
    _198[2u] = cbMtdParam._m0[30u].z;
    _197[3u] = cbMtdParam._m0[29u].w;
    _198[3u] = cbMtdParam._m0[30u].x;
    _197[4u] = cbMtdParam._m0[29u].y;
    _198[4u] = cbMtdParam._m0[29u].z;
    float _611 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    uint _613 = uint(int(isnan(4.0) ? _611 : (isnan(_611) ? 4.0 : min(_611, 4.0))));
    float _620 = ((_198[_613] - cbMtdParam._m0[22u].z) * _344) + cbMtdParam._m0[22u].z;
    float _623 = ((cbMtdParam._m0[22u].w - _620) * _435) + _620;
    float _626 = ((cbMtdParam._m0[25u].x - _623) * _333) + _623;
    float _629 = ((cbMtdParam._m0[26u].x - _626) * _303) + _626;
    float _631 = _629 - (_629 * _550);
    vec4 _647 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _380));
    vec4 _665 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _667 = _665.x;
    float _668 = _665.y;
    float _673 = cbMtdParam._m0[22u].x + _665.z;
    float _676 = (((_647.z + _197[_613]) - _673) * _344) + _673;
    vec4 _689 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _700 = (((_689.z - _676) + cbMtdParam._m0[28u].y) * _435) + _676;
    float _706 = ((((_288 * 2.0) * _700) - _700) * cbMtdParam._m0[24u].w) + _700;
    vec4 _719 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _730 = (((cbMtdParam._m0[23u].z + _719.z) - _706) * _333) + _706;
    vec4 _743 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _754 = (((_743.z - _730) + cbMtdParam._m0[26u].y) * _303) + _730;
    vec4 _769 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _784 = ((cbMtdParam._m0[27u].y * _550) * ((_769.z * cbMtdParam._m0[27u].x) - _754)) + _754;
    float _796 = ((_647.x - _667) * _344) + _667;
    float _797 = ((_647.y - _668) * _344) + _668;
    float _802 = ((_689.x - _796) * _435) + _796;
    float _803 = ((_689.y - _797) * _435) + _797;
    float _808 = ((_719.x - _802) * _333) + _802;
    float _809 = ((_719.y - _803) * _333) + _803;
    float _818 = ((((_743.x - _808) * _303) + _808) * 2.0) + (-1.0);
    float _819 = ((((_743.y - _809) * _303) + _809) * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _4162 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _825 = sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))));
    float _835 = ((cbMtdParam._m0[25u].y * ((_284.x * 2.0) + (-1.0))) + _818) + ((((_769.x * 2.0) + (-1.0)) * _550) * cbMtdParam._m0[26u].w);
    float _836 = ((cbMtdParam._m0[25u].y * ((_284.y * 2.0) + (-1.0))) + _819) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_769.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _839 = fma(_825, _233 * NORMAL.x, fma(_836, _240 * TANGENT.x, (_226 * _218) * _835));
    float _842 = fma(_825, _233 * NORMAL.y, fma(_836, _240 * TANGENT.y, (_226 * _219) * _835));
    float _845 = fma(_825, _233 * NORMAL.z, fma(_836, _240 * TANGENT.z, (_226 * _220) * _835));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _4173 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _853 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4195 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4206 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4217 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _857 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _873 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _923 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _913);
    float _924 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _913);
    float _925 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _913);
    float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
    float _930 = _923 * _929;
    float _931 = _924 * _929;
    float _932 = _925 * _929;
    vec4 _937 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _939 = _937.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1109 = sqrt(((_923 * _923) + (_924 * _924)) + (_925 * _925));
        float _1115 = (cbMatDynParam._m0[5u].x * _1109) + cbMatDynParam._m0[5u].y;
        float _4228 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1120 = (cbMatDynParam._m0[5u].z * _1109) + cbMatDynParam._m0[5u].w;
        float _4239 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) - _1116)) + _1116) < ((_939 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _950 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _951 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _969 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _972 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _975 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _988 = uint(roundEven(NORMAL.w)) * 13u;
    uint _989 = _988 + 9u;
    uint _990 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_990].z;
    float _4250 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _1002 = 1.0 - _857;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _857;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _857;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _857;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _950, cbSceneParam._m0[86u].y * _951));
    float _1028 = _1025.x * TEXCOORD_3.w;
    float _1029 = dot(vec3(_850, _851, _852), vec3(_930, _931, _932));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _850) - _930;
    float _1037 = (_1032 * _851) - _931;
    float _1038 = (_1032 * _852) - _932;
    float _1042 = abs(dot(vec3(_930, _931, _932), vec3(_850, _851, _852)));
    float _4283 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_853);
    float _1055 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1061 = (1.0 - _1055) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1062 = _1055 * _1044;
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1427;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1152 = fma(_1098, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090));
        float _1156 = fma(_1098, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090));
        float _1160 = fma(_1098, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090));
        float _1185 = _1090 + _850;
        float _1186 = _1094 + _851;
        float _1187 = _1098 + _852;
        float _1197 = fma(_1187, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1185)) - _1152;
        float _1198 = fma(_1187, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1185)) - _1156;
        float _1199 = fma(_1187, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1185)) - _1160;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1152 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1156 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[34u].z) + ((((((_1160 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1255 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1221.x + (-0.5));
        float _1257 = _1255 * (_1221.y + (-0.5));
        float _1258 = _1255 * (_1221.z + (-0.5));
        float _1265 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1228.x + (-0.5));
        float _1267 = _1265 * (_1228.y + (-0.5));
        float _1268 = _1265 * (_1228.z + (-0.5));
        float _1275 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1235.x + (-0.5));
        float _1277 = _1275 * (_1235.y + (-0.5));
        float _1278 = _1275 * (_1235.z + (-0.5));
        float _1285 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1242.x + (-0.5));
        float _1287 = _1285 * (_1242.y + (-0.5));
        float _1288 = _1285 * (_1242.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1309 = (dot(vec3(_850, _851, _852), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1319 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4331 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1321 + 1.0))) + _1326) * _1289;
        float _1336 = _1257 * 0.5;
        float _1337 = _1267 * 0.5;
        float _1338 = _1277 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_850, _851, _852), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4364 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1363 + 1.0))) + _1368) * _1290;
        float _1378 = _1258 * 0.5;
        float _1379 = _1268 * 0.5;
        float _1380 = _1278 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_850, _851, _852), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4397 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1405 + 1.0))) + _1410) * _1291;
        _1427 = _1258;
        _1429 = _1257;
        _1430 = _1256;
        _1431 = _1268;
        _1432 = _1267;
        _1433 = _1266;
        _1434 = _1278;
        _1435 = _1277;
        _1436 = _1276;
        _1437 = _1291;
        _1438 = _1290;
        _1439 = _1289;
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1428;
        _1429 = _1428;
        _1430 = _1428;
        _1431 = _1428;
        _1432 = _1428;
        _1433 = _1428;
        _1434 = _1428;
        _1435 = _1428;
        _1436 = _1428;
        _1437 = _1428;
        _1438 = _1428;
        _1439 = _1428;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1468 = fma(_1098, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090));
        float _1472 = fma(_1098, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090));
        float _1476 = fma(_1098, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090));
        float _1499 = _1090 + _850;
        float _1500 = _1094 + _851;
        float _1501 = _1098 + _852;
        float _1511 = fma(_1501, cbModelParam._m0[30u].z, fma(_1500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1499)) - _1468;
        float _1512 = fma(_1501, cbModelParam._m0[31u].z, fma(_1500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1499)) - _1472;
        float _1513 = fma(_1501, cbModelParam._m0[32u].z, fma(_1500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1499)) - _1476;
        float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
        float _1530 = ((_1517 * _1511) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1468 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1517 * _1512) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1472 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1517 * _1513) / cbModelParam._m0[35u].z) + ((((((_1476 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        float _1567 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1534.x + (-0.5));
        float _1569 = _1567 * (_1534.y + (-0.5));
        float _1570 = _1567 * (_1534.z + (-0.5));
        float _1577 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1541.x + (-0.5));
        float _1579 = _1577 * (_1541.y + (-0.5));
        float _1580 = _1577 * (_1541.z + (-0.5));
        float _1587 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1548.x + (-0.5));
        float _1589 = _1587 * (_1548.y + (-0.5));
        float _1590 = _1587 * (_1548.z + (-0.5));
        float _1597 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1555.x + (-0.5));
        float _1599 = _1597 * (_1555.y + (-0.5));
        float _1600 = _1597 * (_1555.z + (-0.5));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = _1568 * 0.5;
        float _1605 = _1578 * 0.5;
        float _1606 = _1588 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_850, _851, _852), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4460 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1631 + 1.0))) + _1636) * _1601;
        float _1646 = _1569 * 0.5;
        float _1647 = _1579 * 0.5;
        float _1648 = _1589 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_850, _851, _852), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4493 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1673 + 1.0))) + _1678) * _1602;
        float _1688 = _1570 * 0.5;
        float _1689 = _1580 * 0.5;
        float _1690 = _1590 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_850, _851, _852), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4526 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1715 + 1.0))) + _1720) * _1603;
        _1737 = _1570;
        _1738 = _1569;
        _1739 = _1568;
        _1740 = _1580;
        _1741 = _1579;
        _1742 = _1578;
        _1743 = _1590;
        _1744 = _1589;
        _1745 = _1588;
        _1746 = _1603;
        _1747 = _1602;
        _1748 = _1601;
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
    }
    else
    {
        _1737 = _1428;
        _1738 = _1428;
        _1739 = _1428;
        _1740 = _1428;
        _1741 = _1428;
        _1742 = _1428;
        _1743 = _1428;
        _1744 = _1428;
        _1745 = _1428;
        _1746 = _1428;
        _1747 = _1428;
        _1748 = _1428;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1440)) + _1440;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1441)) + _1441;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1442)) + _1442;
    float _1784 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1761));
    float _1805 = _1036 * 0.5;
    float _1806 = _1037 * 0.5;
    float _1807 = _1038 * 0.5;
    float _1808 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1811 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1814 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1821 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1427, _1431, _1434, _1437));
        float _1825 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1829 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1836 = dot(vec4(cbModelParam._m0[39u]), vec4(_1805, _1806, _1807, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1805, _1806, _1807, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1921 = fma(_1098, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090)) + cbModelParam._m0[13u].w;
        float _1925 = fma(_1098, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090)) + cbModelParam._m0[14u].w;
        float _1929 = fma(_1098, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090)) + cbModelParam._m0[15u].w;
        float _1932 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1935 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1938 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1966;
        if (_1932 > 0.0)
        {
            _1966 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1966 = frontier_phi_17_15_ladder;
        }
        float _2138;
        if (_1935 > 0.0)
        {
            _2138 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2138 = frontier_phi_26_22_ladder;
        }
        float _2433;
        if (_1938 > 0.0)
        {
            _2433 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2433 = frontier_phi_38_33_ladder;
        }
        float _2435 = isnan(_2138) ? _1966 : (isnan(_1966) ? _2138 : min(_1966, _2138));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1932) + _1921;
        float _2441 = (_2436 * _1935) + _1925;
        float _2442 = (_2436 * _1938) + _1929;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_16_38_ladder = _2587.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2587.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2587.x * cbModelParam._m0[1u].y;
        }
        _1954 = frontier_phi_16_38_ladder_2;
        _1956 = frontier_phi_16_38_ladder_1;
        _1958 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1874);
        _1954 = _1942.x * cbModelParam._m0[1u].y;
        _1956 = _1942.y * cbModelParam._m0[1u].y;
        _1958 = _1942.z * cbModelParam._m0[1u].y;
    }
    float _1962 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1962 : min(cbModelParam._m0[25u].w, _1962));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1098, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1098, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1098, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2031 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2034 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2143;
        if (_2028 > 0.0)
        {
            _2143 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2143 = frontier_phi_28_24_ladder;
        }
        float _2460;
        if (_2031 > 0.0)
        {
            _2460 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2460 = frontier_phi_40_35_ladder;
        }
        float _2798;
        if (_2034 > 0.0)
        {
            _2798 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2798 = frontier_phi_50_47_ladder;
        }
        float _2800 = isnan(_2460) ? _2143 : (isnan(_2143) ? _2460 : min(_2143, _2460));
        float _2801 = isnan(_2798) ? _2800 : (isnan(_2800) ? _2798 : min(_2800, _2798));
        float _2805 = (_2801 * _2028) + _2017;
        float _2806 = (_2801 * _2031) + _2021;
        float _2807 = (_2801 * _2034) + _2025;
        float _2808 = _2801 * 9.9999997473787516355514526367188e-05;
        float _2809 = (-1.0) - _2808;
        float _2811 = _2808 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2807 > _2811) || ((_2807 < _2809) || ((_2806 > _2811) || ((_2806 < _2809) || ((_2805 < _2809) || (_2805 > _2811))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2807, cbModelParam._m0[17u].z, fma(_2806, cbModelParam._m0[17u].y, _2805 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2807, cbModelParam._m0[18u].z, fma(_2806, cbModelParam._m0[18u].y, _2805 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2807, cbModelParam._m0[19u].z, fma(_2806, cbModelParam._m0[19u].y, _2805 * cbModelParam._m0[19u].x))), _1963);
            frontier_phi_25_50_ladder = _2929.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2929.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2929.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_25_50_ladder_2;
        _2055 = frontier_phi_25_50_ladder_1;
        _2057 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1963);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2070 = (((_1061 * _1013) + _1062) * _1028) * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2072 = (((_1061 * _1015) + _1062) * _1028) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1061 * _1016) + _1062) * _1028) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2072, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2072, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2072, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2130 = _2117 / _2129;
    float _2131 = _2121 / _2129;
    float _2132 = _2125 / _2129;
    float _2279;
    float _2280;
    float _2281;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2159 = ((uint(_2132 > cbSceneParam._m0[59u].y) + uint(_2132 > cbSceneParam._m0[59u].x)) + uint(_2132 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2160 = _2159 + 43u;
        uint _2168 = _2159 + 44u;
        uint _2176 = _2159 + 45u;
        uint _2184 = _2159 + 46u;
        float _2195 = fma(_2129, cbSceneParam._m0[_2160].w, fma(_2125, cbSceneParam._m0[_2160].z, fma(_2121, cbSceneParam._m0[_2160].y, _2117 * cbSceneParam._m0[_2160].x)));
        float _2199 = fma(_2129, cbSceneParam._m0[_2168].w, fma(_2125, cbSceneParam._m0[_2168].z, fma(_2121, cbSceneParam._m0[_2168].y, _2117 * cbSceneParam._m0[_2168].x)));
        float _2207 = fma(_2129, cbSceneParam._m0[_2184].w, fma(_2125, cbSceneParam._m0[_2184].z, fma(_2121, cbSceneParam._m0[_2184].y, _2117 * cbSceneParam._m0[_2184].x)));
        float _2212 = cbSceneParam._m0[33u].z * _2207;
        float _2214 = cbSceneParam._m0[33u].w * _2207;
        float _2217 = fma(_2129, cbSceneParam._m0[_2176].w, fma(_2125, cbSceneParam._m0[_2176].z, fma(_2121, cbSceneParam._m0[_2176].y, _2117 * cbSceneParam._m0[_2176].x))) / _2207;
        float _2265 = (cbSceneParam._m0[33u].x - sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132))) * cbSceneParam._m0[33u].y;
        float _4652 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2272 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 + _2195) / _2207, (_2214 + _2199) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2214 + _2195) / _2207, (_2199 - _2212) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 - _2212) / _2207, (_2199 - _2214) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 - _2214) / _2207, (_2212 + _2199) / _2207), _2217), 0.0)).x), vec4(0.25)));
        _2279 = 1.0 - (_2272 * cbSceneParam._m0[34u].x);
        _2280 = 1.0 - (_2272 * cbSceneParam._m0[34u].y);
        _2281 = 1.0 - (_2272 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2279 = 1.0;
        _2280 = 1.0;
        _2281 = 1.0;
    }
    float _2345;
    float _2347;
    float _2349;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2333 = fma(_2129, cbSceneParam._m0[63u].w, fma(_2125, cbSceneParam._m0[63u].z, fma(_2121, cbSceneParam._m0[63u].y, _2117 * cbSceneParam._m0[63u].x)));
        float _2334 = fma(_2129, cbSceneParam._m0[60u].w, fma(_2125, cbSceneParam._m0[60u].z, fma(_2121, cbSceneParam._m0[60u].y, _2117 * cbSceneParam._m0[60u].x))) / _2333;
        float _2335 = fma(_2129, cbSceneParam._m0[61u].w, fma(_2125, cbSceneParam._m0[61u].z, fma(_2121, cbSceneParam._m0[61u].y, _2117 * cbSceneParam._m0[61u].x))) / _2333;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2334 >= cbSceneParam._m0[64u].x) && (_2335 >= cbSceneParam._m0[64u].y)) && (_2334 <= cbSceneParam._m0[64u].z)) && (_2335 <= cbSceneParam._m0[64u].w))
        {
            float _2473 = fma(_2129, cbSceneParam._m0[62u].w, fma(_2125, cbSceneParam._m0[62u].z, fma(_2121, cbSceneParam._m0[62u].y, _2117 * cbSceneParam._m0[62u].x))) / _2333;
            float _2477 = isnan(cbSceneParam._m0[41u].w) ? _2473 : (isnan(_2473) ? cbSceneParam._m0[41u].w : max(_2473, cbSceneParam._m0[41u].w));
            float _2520 = (cbSceneParam._m0[33u].x - sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132))) * cbSceneParam._m0[33u].y;
            float _4668 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
            float _2527 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2334, cbSceneParam._m0[33u].w + _2335), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2334, _2335 - cbSceneParam._m0[33u].z), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2334 - cbSceneParam._m0[33u].z, _2335 - cbSceneParam._m0[33u].w), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2334 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2335), _2477), 0.0)).x), vec4(0.25)));
            float _2531 = 1.0 - (_2527 * cbSceneParam._m0[34u].x);
            float _2532 = 1.0 - (_2527 * cbSceneParam._m0[34u].y);
            float _2533 = 1.0 - (_2527 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
            frontier_phi_37_36_ladder_1 = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
            frontier_phi_37_36_ladder_2 = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
        }
        else
        {
            frontier_phi_37_36_ladder = _2281;
            frontier_phi_37_36_ladder_1 = _2280;
            frontier_phi_37_36_ladder_2 = _2279;
        }
        _2345 = frontier_phi_37_36_ladder_2;
        _2347 = frontier_phi_37_36_ladder_1;
        _2349 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2345 = _2279;
        _2347 = _2280;
        _2349 = _2281;
    }
    uvec4 _2354 = floatBitsToUint(cbInstanceData._m0[_988 + 5u]);
    uint _2356 = _2354.x * 14u;
    uint _2357 = _2356 + 13u;
    float _2364 = _1028 + (-1.0);
    float _2369 = (cbLight._m0[_2357].x * _2364) + 1.0;
    float _2370 = (cbLight._m0[_2357].y * _2364) + 1.0;
    float _2371 = (cbLight._m0[_2357].z * _2364) + 1.0;
    float _2372 = (cbLight._m0[_2357].w * _2364) + 1.0;
    uint _2373 = _2356 + 5u;
    float _2379 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2383 = _2356 + 4u;
    float _2392 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2396 = _2356 | 1u;
    float _2407 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_850, _851, _852));
    float _2410 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_850, _851, _852));
    float _4704 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _4715 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2415 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * 0.3183098733425140380859375;
    float _2417 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * 0.3183098733425140380859375;
    float _2424 = ((cbLight._m0[_2373].x * _2379) * _2417) + (((cbLight._m0[_2383].x * _2345) * _2392) * _2415);
    float _2425 = ((_2379 * cbLight._m0[_2373].y) * _2417) + (((cbLight._m0[_2383].y * _2347) * _2392) * _2415);
    float _2426 = ((_2379 * cbLight._m0[_2373].z) * _2417) + (((cbLight._m0[_2383].z * _2349) * _2392) * _2415);
    uvec4 _2430 = floatBitsToUint(cbLight._m0[_2356 + 12u]);
    bool _2432 = _2430.x == 0u;
    float _2534;
    float _2536;
    float _2538;
    if (_2432)
    {
        _2534 = _2424;
        _2536 = _2425;
        _2538 = _2426;
    }
    else
    {
        uint _2542 = _2356 + 6u;
        float _2558 = (dot(vec3(cbLight._m0[_2356 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2559 = _2558 * _2558;
        float _4726 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2560 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2561 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2534 = (((cbLight._m0[_2542].x * 0.3183098733425140380859375) * _2560) * _2561) + _2424;
        _2536 = (((cbLight._m0[_2542].y * 0.3183098733425140380859375) * _2560) * _2561) + _2425;
        _2538 = (((cbLight._m0[_2542].z * 0.3183098733425140380859375) * _2560) * _2561) + _2426;
    }
    bool _2541 = _2430.y == 0u;
    float _2596;
    float _2598;
    float _2600;
    if (_2541)
    {
        _2596 = _2534;
        _2598 = _2536;
        _2600 = _2538;
    }
    else
    {
        uint _2769 = _2356 + 7u;
        float _2785 = (dot(vec3(cbLight._m0[_2356 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2786 = _2785 * _2785;
        float _4742 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2787 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2788 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2596 = (((cbLight._m0[_2769].x * 0.3183098733425140380859375) * _2787) * _2788) + _2534;
        _2598 = (((cbLight._m0[_2769].y * 0.3183098733425140380859375) * _2787) * _2788) + _2536;
        _2600 = (((cbLight._m0[_2769].z * 0.3183098733425140380859375) * _2787) * _2788) + _2538;
    }
    uint _2603 = _2356 + 8u;
    float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _853) * 0.949999988079071044921875);
    float _2617 = _2616 * _2616;
    float _2618 = cbLight._m0[_2356].x + _930;
    float _2619 = cbLight._m0[_2356].y + _931;
    float _2620 = cbLight._m0[_2356].z + _932;
    float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
    float _2625 = _2624 * _2618;
    float _2626 = _2624 * _2619;
    float _2627 = _2624 * _2620;
    float _2628 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2356].xyz));
    float _4758 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _4769 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2632 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2633 = dot(vec3(_850, _851, _852), vec3(_2625, _2626, _2627));
    float _4780 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2637 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2625, _2626, _2627));
    float _4791 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2641 = _2617 * _2617;
    float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
    float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2654 = 0.959999978542327880859375 - _1010;
    float _2656 = 0.959999978542327880859375 - _1011;
    float _2657 = 0.959999978542327880859375 - _1012;
    float _2664 = 1.0 - _2617;
    float _2675 = (0.5 / (((_2632 * ((_2631 * _2664) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2664) + _2617) * _2631))) * _2631;
    float _4802 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
    uint _2691 = _2356 + 9u;
    float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _853) * 0.949999988079071044921875);
    float _2703 = _2702 * _2702;
    float _2704 = cbLight._m0[_2396].x + _930;
    float _2705 = cbLight._m0[_2396].y + _931;
    float _2706 = cbLight._m0[_2396].z + _932;
    float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
    float _2711 = _2710 * _2704;
    float _2712 = _2710 * _2705;
    float _2713 = _2710 * _2706;
    float _2714 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2396].xyz));
    float _4813 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _2718 = dot(vec3(_850, _851, _852), vec3(_2711, _2712, _2713));
    float _4824 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2722 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2711, _2712, _2713));
    float _4835 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2726 = _2703 * _2703;
    float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
    float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
    float _2744 = 1.0 - _2703;
    float _2754 = (0.5 / (((_2632 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2744) + _2703) * _2717))) * _2717;
    float _4846 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2756 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
    float _2766 = (((((_2737 * _2654) + _1013) * cbLight._m0[_2691].x) * _2756) * _2379) + ((((cbLight._m0[_2603].x * _2345) * ((_2653 * _2654) + _1013)) * _2677) * _2392);
    float _2767 = (((((_2737 * _2656) + _1015) * cbLight._m0[_2691].y) * _2756) * _2379) + ((((cbLight._m0[_2603].y * _2347) * ((_2653 * _2656) + _1015)) * _2677) * _2392);
    float _2768 = (((((_2737 * _2657) + _1016) * cbLight._m0[_2691].z) * _2756) * _2379) + ((((cbLight._m0[_2603].z * _2349) * ((_2653 * _2657) + _1016)) * _2677) * _2392);
    float _2824;
    float _2826;
    float _2828;
    if (_2432)
    {
        _2824 = _2766;
        _2826 = _2767;
        _2828 = _2768;
    }
    else
    {
        uint _2830 = _2356 + 2u;
        uint _2834 = _2356 + 10u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _853) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _930;
        float _2851 = cbLight._m0[_2830].y + _931;
        float _2852 = cbLight._m0[_2830].z + _932;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2830].xyz));
        float _4857 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2864 = dot(vec3(_850, _851, _852), vec3(_2857, _2858, _2859));
        float _4868 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _4879 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2883 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
        float _2890 = 1.0 - _2849;
        float _2900 = (0.5 / (((_2632 * ((_2863 * _2890) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2890) + _2849) * _2863))) * _2863;
        float _4890 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2902 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2903 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2824 = (((((_2883 * _2654) + _1013) * cbLight._m0[_2834].x) * _2902) * _2903) + _2766;
        _2826 = (((((_2883 * _2656) + _1015) * cbLight._m0[_2834].y) * _2902) * _2903) + _2767;
        _2828 = (((((_2883 * _2657) + _1016) * cbLight._m0[_2834].z) * _2902) * _2903) + _2768;
    }
    float _2934;
    float _2936;
    float _2938;
    if (_2541)
    {
        _2934 = _2824;
        _2936 = _2826;
        _2938 = _2828;
    }
    else
    {
        uint _2945 = _2356 + 3u;
        uint _2949 = _2356 + 11u;
        float _2963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2945].w)) * _853) * 0.949999988079071044921875);
        float _2964 = _2963 * _2963;
        float _2965 = cbLight._m0[_2945].x + _930;
        float _2966 = cbLight._m0[_2945].y + _931;
        float _2967 = cbLight._m0[_2945].z + _932;
        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
        float _2972 = _2971 * _2965;
        float _2973 = _2971 * _2966;
        float _2974 = _2971 * _2967;
        float _2975 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2945].xyz));
        float _4906 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2978 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2979 = dot(vec3(_850, _851, _852), vec3(_2972, _2973, _2974));
        float _4917 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
        float _2983 = dot(vec3(cbLight._m0[_2945].xyz), vec3(_2972, _2973, _2974));
        float _4928 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2987 = _2964 * _2964;
        float _2991 = ((_2982 * _2982) * (_2987 + (-1.0))) + 1.0;
        float _2998 = exp2(log2(1.0 - (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) * 5.0);
        float _3005 = 1.0 - _2964;
        float _3015 = (0.5 / (((_2632 * ((_2978 * _3005) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _3005) + _2964) * _2978))) * _2978;
        float _4939 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3017 = (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2987 / ((_2991 * _2991) * 3.141590118408203125));
        float _3018 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2934 = (((((_2998 * _2654) + _1013) * cbLight._m0[_2949].x) * _3017) * _3018) + _2824;
        _2936 = (((((_2998 * _2656) + _1015) * cbLight._m0[_2949].y) * _3017) * _3018) + _2826;
        _2938 = (((((_2998 * _2657) + _1016) * cbLight._m0[_2949].z) * _3017) * _3018) + _2828;
    }
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_2354.y == 0u)
    {
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.x;
        uint _3051 = uint((float(_3039.y) * floor(float(uint(cbSceneParam._m0[85u].y * _951) / _3040))) + floor(float(uint(cbSceneParam._m0[85u].x * _950) / _3040)));
        float _3061 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3062 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        uint _3065 = uint(isnan(14.0) ? _3062 : (isnan(_3062) ? 14.0 : min(_3062, 14.0)));
        uvec4 _3070 = texelFetch(g_lightClusterGridBuffer, int(((_3065 << 2u) + (_3051 << 6u)) >> 2u));
        uint _3071 = _3070.x;
        uint _3072 = _3039.z;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        if (((((1u << ((_3072 >> 4u) & 15u)) + 4294967295u) & _3071) == 0u) || ((_3072 & 240u) == 0u))
        {
            _3151 = 0.0;
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
        }
        else
        {
            float _3152;
            float _3154;
            float _3156;
            float _3158;
            float _3160;
            float _3162;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            uint _3310 = 0u;
            uint _3319;
            bool _3320;
            for (;;)
            {
                _3319 = texelFetch(g_lightClassification, int((((_3065 << 5u) + (_3051 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                _3320 = _3319 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3320)
                {
                    frontier_phi_71_pred = _3309;
                    frontier_phi_71_pred_1 = _3308;
                    frontier_phi_71_pred_2 = _3307;
                    frontier_phi_71_pred_3 = _3306;
                    frontier_phi_71_pred_4 = _3305;
                    frontier_phi_71_pred_5 = _3304;
                }
                else
                {
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    uint _3455;
                    _3449 = _3304;
                    _3450 = _3305;
                    _3451 = _3306;
                    _3452 = _3307;
                    _3453 = _3308;
                    _3454 = _3309;
                    _3455 = _3319;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    for (;;)
                    {
                        uint _3459 = uint(findLSB(_3455)) + (_3310 << 5u);
                        uint _3456 = (_3455 + 4294967295u) & _3455;
                        uint _3461 = _3459 * 48u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3481 = (_3459 * 48u) + 4u;
                        vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 3u)).x));
                        uint _3500 = (_3459 * 48u) + 8u;
                        vec3 _3511 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x));
                        float _3515 = _3475.x - _2130;
                        float _3516 = _3475.y - _2131;
                        float _3517 = _3475.z - _2132;
                        float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                        float _3521 = inversesqrt(_3518);
                        float _3522 = _3521 * _3515;
                        float _3523 = _3521 * _3516;
                        float _3524 = _3521 * _3517;
                        float _3525 = dot(vec3(_969, _972, _975), vec3(_3522, _3523, _3524));
                        float _3530 = 1.0 - (_3518 * _3475.w);
                        float _4965 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3532 = sqrt(_3518) * _3494.w;
                        float _3535 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3525) + _3536;
                        float _3542 = _3532 * _3532;
                        float _3546 = ((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3531) / ((_3542 * 0.699999988079071044921875) + 1.0);
                        float _3550 = (-0.0) - _2130;
                        float _3551 = (-0.0) - _2131;
                        float _3552 = (-0.0) - _2132;
                        float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                        float _3557 = _3556 * _3550;
                        float _3558 = _3556 * _3551;
                        float _3559 = _3556 * _3552;
                        float _3566 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                        float _3567 = 1.0 - _1044;
                        float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                        float _3575 = _3574 * _3574;
                        float _3576 = _3575 * _3575;
                        float _3577 = _3557 + _3522;
                        float _3578 = _3558 + _3523;
                        float _3579 = _3559 + _3524;
                        float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                        float _3587 = dot(vec3(_969, _972, _975), vec3(_3557, _3558, _3559));
                        float _4981 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3590 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3591 = dot(vec3(_969, _972, _975), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                        float _4992 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3594 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                        float _3599 = _3535 * _3575;
                        float _3600 = _3599 * _3599;
                        float _3603 = ((1.0 - _3600) * _3525) + _3600;
                        float _5003 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3604 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3605 = 1.0 - _3575;
                        float _3615 = (0.5 / (((_3604 * ((_3590 * _3605) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3575) * _3590))) * _3604;
                        float _5014 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3626 = (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3598 * _3598) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125))) * _3531;
                        _3379 = (_3546 * _3494.x) + _3452;
                        _3380 = (_3546 * _3494.y) + _3453;
                        _3381 = (_3546 * _3494.z) + _3454;
                        _3376 = (_3626 * _3511.x) + _3449;
                        _3377 = (_3626 * _3511.y) + _3450;
                        _3378 = (_3626 * _3511.z) + _3451;
                        if (_3456 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3449 = _3376;
                            _3450 = _3377;
                            _3451 = _3378;
                            _3452 = _3379;
                            _3453 = _3380;
                            _3454 = _3381;
                            _3455 = _3456;
                        }
                    }
                    frontier_phi_71_pred = _3381;
                    frontier_phi_71_pred_1 = _3380;
                    frontier_phi_71_pred_2 = _3379;
                    frontier_phi_71_pred_3 = _3378;
                    frontier_phi_71_pred_4 = _3377;
                    frontier_phi_71_pred_5 = _3376;
                }
                _3162 = frontier_phi_71_pred;
                _3160 = frontier_phi_71_pred_1;
                _3158 = frontier_phi_71_pred_2;
                _3156 = frontier_phi_71_pred_3;
                _3154 = frontier_phi_71_pred_4;
                _3152 = frontier_phi_71_pred_5;
                uint _3311 = _3310 + 1u;
                if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3304 = _3152;
                    _3305 = _3154;
                    _3306 = _3156;
                    _3307 = _3158;
                    _3308 = _3160;
                    _3309 = _3162;
                    _3310 = _3311;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3151 = _3152;
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
        }
        uvec4 _3165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3166 = _3165.z;
        uint _3168 = (_3166 >> 8u) & 15u;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        if (((4294967295u << _3168) & _3071) == 0u)
        {
            _3272 = _3151;
            _3274 = _3153;
            _3276 = _3155;
            _3278 = _3157;
            _3280 = _3159;
            _3282 = _3161;
        }
        else
        {
            float _3297 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _3298 = _3297 * _2130;
            float _3299 = _3297 * _2131;
            float _3300 = _3297 * _2132;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3168 < ((_3166 >> 12u) & 15u))
            {
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3283;
                float _3432 = _3151;
                float _3433 = _3153;
                float _3434 = _3155;
                float _3435 = _3157;
                float _3436 = _3159;
                float _3437 = _3161;
                uint _3438 = _3168;
                uint _3447;
                bool _3448;
                for (;;)
                {
                    _3447 = texelFetch(g_lightClassification, int((((_3065 << 5u) + (_3051 << 9u)) + (_3438 << 2u)) >> 2u)).x;
                    _3448 = _3447 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3448)
                    {
                        frontier_phi_82_pred = _3437;
                        frontier_phi_82_pred_1 = _3436;
                        frontier_phi_82_pred_2 = _3435;
                        frontier_phi_82_pred_3 = _3434;
                        frontier_phi_82_pred_4 = _3433;
                        frontier_phi_82_pred_5 = _3432;
                    }
                    else
                    {
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3653 = _3432;
                        float _3654 = _3433;
                        float _3655 = _3434;
                        float _3656 = _3435;
                        float _3657 = _3436;
                        float _3658 = _3437;
                        uint _3659 = _3447;
                        uint _3660;
                        vec4 _3685;
                        float _3686;
                        vec4 _3701;
                        vec3 _3713;
                        vec4 _3728;
                        vec4 _3743;
                        float _3789;
                        bool _3790;
                        for (;;)
                        {
                            uint _3670 = ((_3438 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3659));
                            _3660 = (_3659 + 4294967295u) & _3659;
                            uint _3672 = _3670 * 40u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3686 = _3685.w;
                            uint _3688 = (_3670 * 40u) + 4u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3670 * 40u) + 8u;
                            _3713 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x));
                            uint _3715 = (_3670 * 40u) + 16u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3670 * 40u) + 20u;
                            _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3745 = (_3670 * 40u) + 24u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            uint _3764 = (_3670 * 40u) + 28u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            _3789 = fma(_2132, _3777.z, fma(_2131, _3777.y, _3777.x * _2130)) + _3777.w;
                            _3790 = !((fma(_2132, _3758.z, fma(_2131, _3758.y, _3758.x * _2130)) + _3758.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3790)
                            {
                                float _3817 = _3685.x - _2130;
                                float _3818 = _3685.y - _2131;
                                float _3819 = _3685.z - _2132;
                                float _3820 = dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819));
                                float _3823 = inversesqrt(_3820);
                                float _3824 = _3823 * _3817;
                                float _3825 = _3823 * _3818;
                                float _3826 = _3823 * _3819;
                                float _3830 = 1.0 - (_3820 / (_3686 * _3686));
                                float _5025 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3835 = sqrt(_3820) * _3701.w;
                                float _3837 = 1.39999997615814208984375 / (_3835 + 1.39999997615814208984375);
                                float _3838 = _3837 * _3837;
                                float _3841 = ((1.0 - _3838) * dot(vec3(_3824, _3825, _3826), vec3(_969, _972, _975))) + _3838;
                                float _3844 = _3835 * _3835;
                                float _3848 = (fma(_2132, _3728.z, fma(_2131, _3728.y, _3728.x * _2130)) + _3728.w) / _3789;
                                float _3849 = (fma(_2132, _3743.z, fma(_2131, _3743.y, _3743.x * _2130)) + _3743.w) / _3789;
                                float _3853 = 1.0 - dot(vec2(_3848, _3849), vec2(_3848, _3849));
                                float _5041 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3855 = _3854 * (((isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0))) * _3831) / ((_3844 * 0.699999988079071044921875) + 1.0));
                                float _3867 = exp2(log2(1.0 / ((_3844 * 3.5) + 5.0)) * 0.25);
                                float _3868 = 1.0 - _1044;
                                float _3875 = sqrt(1.0 - ((1.0 - (_3868 * _3868)) * (1.0 - (_3867 * _3867))));
                                float _3876 = _3875 * _3875;
                                float _3877 = _3876 * _3876;
                                float _3878 = _3824 - _3298;
                                float _3879 = _3825 - _3299;
                                float _3880 = _3826 - _3300;
                                float _3884 = inversesqrt(dot(vec3(_3878, _3879, _3880), vec3(_3878, _3879, _3880)));
                                float _3888 = dot(vec3(_969, _972, _975), vec3((-0.0) - _3298, (-0.0) - _3299, (-0.0) - _3300));
                                float _5052 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3892 = dot(vec3(_969, _972, _975), vec3(_3884 * _3878, _3884 * _3879, _3884 * _3880));
                                float _5063 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3895 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3899 = ((_3895 * _3895) * (_3877 + (-1.0))) + 1.0;
                                float _3900 = _3837 * _3876;
                                float _3901 = _3900 * _3900;
                                float _3907 = ((1.0 - _3901) * dot(vec3(_969, _972, _975), vec3(_3824, _3825, _3826))) + _3901;
                                float _5074 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3908 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3909 = 1.0 - _3876;
                                float _3919 = (0.5 / (((_3908 * ((_3891 * _3909) + _3876)) + 9.9999999392252902907785028219223e-09) + (((_3908 * _3909) + _3876) * _3891))) * _3908;
                                float _5085 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3929 = (_3854 * _3831) * (((_3877 * 3.1415927410125732421875) * (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0)))) / ((_3899 * _3899) * ((_3844 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3855 * _3701.z;
                                frontier_phi_88_pred_1 = _3855 * _3701.y;
                                frontier_phi_88_pred_2 = _3855 * _3701.x;
                                frontier_phi_88_pred_3 = _3929 * _3713.z;
                                frontier_phi_88_pred_4 = _3929 * _3713.y;
                                frontier_phi_88_pred_5 = _3929 * _3713.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3938 = frontier_phi_88_pred;
                            _3937 = frontier_phi_88_pred_1;
                            _3936 = frontier_phi_88_pred_2;
                            _3935 = frontier_phi_88_pred_3;
                            _3934 = frontier_phi_88_pred_4;
                            _3933 = frontier_phi_88_pred_5;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            if (_3660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3660;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3645;
                        frontier_phi_82_pred_1 = _3644;
                        frontier_phi_82_pred_2 = _3643;
                        frontier_phi_82_pred_3 = _3642;
                        frontier_phi_82_pred_4 = _3641;
                        frontier_phi_82_pred_5 = _3640;
                    }
                    _3283 = frontier_phi_82_pred;
                    _3281 = frontier_phi_82_pred_1;
                    _3279 = frontier_phi_82_pred_2;
                    _3277 = frontier_phi_82_pred_3;
                    _3275 = frontier_phi_82_pred_4;
                    _3273 = frontier_phi_82_pred_5;
                    uint _3439 = _3438 + 1u;
                    if (_3439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3432 = _3273;
                        _3433 = _3275;
                        _3434 = _3277;
                        _3435 = _3279;
                        _3436 = _3281;
                        _3437 = _3283;
                        _3438 = _3439;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3279;
                frontier_phi_63_64_ladder_1 = _3283;
                frontier_phi_63_64_ladder_2 = _3281;
                frontier_phi_63_64_ladder_3 = _3277;
                frontier_phi_63_64_ladder_4 = _3275;
                frontier_phi_63_64_ladder_5 = _3273;
            }
            else
            {
                frontier_phi_63_64_ladder = _3157;
                frontier_phi_63_64_ladder_1 = _3161;
                frontier_phi_63_64_ladder_2 = _3159;
                frontier_phi_63_64_ladder_3 = _3155;
                frontier_phi_63_64_ladder_4 = _3153;
                frontier_phi_63_64_ladder_5 = _3151;
            }
            _3272 = frontier_phi_63_64_ladder_5;
            _3274 = frontier_phi_63_64_ladder_4;
            _3276 = frontier_phi_63_64_ladder_3;
            _3278 = frontier_phi_63_64_ladder;
            _3280 = frontier_phi_63_64_ladder_2;
            _3282 = frontier_phi_63_64_ladder_1;
        }
        float _3287 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _3084 = (_3287 * _3278) + _2596;
        _3086 = (_3287 * _3280) + _2598;
        _3088 = (_3287 * _3282) + _2600;
        _3090 = ((_3272 * _1013) * _3287) + _2934;
        _3092 = ((_3274 * _1015) * _3287) + _2936;
        _3094 = ((_3276 * _1016) * _3287) + _2938;
    }
    else
    {
        _3084 = _2596;
        _3086 = _2598;
        _3088 = _2600;
        _3090 = _2934;
        _3092 = _2936;
        _3094 = _2938;
    }
    float _5101 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _5112 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _5123 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _3111 = ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3084 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1028))) + ((_3090 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _3112 = ((isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3086 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1028))) + ((_3092 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _3113 = ((isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * (_3088 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1028))) + ((_3094 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    uint _3114 = _988 + 6u;
    float _3122 = _950 / cbSceneParam._m0[86u].x;
    float _3123 = _951 / cbSceneParam._m0[86u].y;
    vec4 _3137 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3122, _3123, (log2((isnan(cbSceneParam._m0[77u].w) ? _873 : (isnan(_873) ? cbSceneParam._m0[77u].w : min(_873, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3139 = _3137.x;
    float _3140 = _3137.y;
    float _3141 = _3137.z;
    float _3142 = _3137.w;
    float _3214;
    float _3216;
    float _3218;
    float _3220;
    if (_873 > cbSceneParam._m0[78u].w)
    {
        float _3176 = isnan(_873) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _873 : min(cbSceneParam._m0[80u].w, _873));
        float _3177 = _3176 / _873;
        float _3188 = _3177 * _923;
        float _3189 = _924 * _3177;
        float _3190 = (-0.0) - _3189;
        float _3192 = _3177 * _925;
        float _3194 = (cbSceneParam._m0[77u].w * _3190) / _3176;
        float _3195 = _3194 + cbSceneParam._m0[79u].w;
        float _3196 = cbSceneParam._m0[79u].w - _3189;
        float _3202 = sqrt(((_3188 * _3188) + (_3189 * _3189)) + (_3192 * _3192));
        float _3205 = (1.0 - (cbSceneParam._m0[77u].w / _3176)) * _3202;
        float _3210 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3212 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3389;
        if (abs((_3190 - _3194) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3389 = ((((_3195 > 0.0) ? exp2(_3210 * _3195) : (2.0 - exp2(_3212 * _3195))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3205;
        }
        else
        {
            float _3333 = 1.0 / cbSceneParam._m0[80u].x;
            float _3334 = isnan(_3196) ? _3195 : (isnan(_3195) ? _3196 : max(_3195, _3196));
            float _3335 = isnan(_3196) ? _3195 : (isnan(_3195) ? _3196 : min(_3195, _3196));
            float _3344 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : min(_3334, 0.0));
            float _3345 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : min(_3335, 0.0));
            _3389 = ((abs(_3202 / _3190) * cbSceneParam._m0[80u].y) * ((((_3344 - _3345) * 2.0) - ((exp2(_3210 * (isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0)))) - exp2(_3210 * (isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))))) * _3333)) - ((exp2(_3212 * _3344) - exp2(_3212 * _3345)) * _3333))) + (_3205 * cbSceneParam._m0[80u].z);
        }
        vec4 _3391 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3122, _3123, 1.0), 0.0);
        float _3400 = exp2((_3389 * (-1.44269502162933349609375)) * (1.0 - _3391.w));
        float _3401 = log2(_3400);
        float _3417 = log2(_3142);
        _3214 = (exp2(_3417 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].x)) * _3391.x) / cbSceneParam._m0[78u].x)) + _3139;
        _3216 = (exp2(_3417 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].y)) * _3391.y) / cbSceneParam._m0[78u].y)) + _3140;
        _3218 = (exp2(_3417 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].z)) * _3391.z) / cbSceneParam._m0[78u].z)) + _3141;
        _3220 = _3400 * _3142;
    }
    else
    {
        _3214 = _3139;
        _3216 = _3140;
        _3218 = _3141;
        _3220 = _3142;
    }
    bool _3427;
    vec4 _3230;
    vec4 _3252;
    float _3254;
    float _3258;
    float _3259;
    float _3260;
    float _3261;
    bool _3271;
    for (;;)
    {
        _3230 = cbMatDynParam._m0[0u];
        float _3232 = roundEven(_3230.y);
        bool _3233 = _3232 == 3.0;
        float _3234 = log2(_3220);
        float _3241 = exp2(_3234 * cbSceneParam._m0[78u].x) * _3111;
        float _3242 = exp2(_3234 * cbSceneParam._m0[78u].y) * _3112;
        float _3243 = exp2(_3234 * cbSceneParam._m0[78u].z) * _3113;
        float _3250 = _939 + (-0.5);
        _3252 = cbMtdParam._m0[1u];
        _3254 = _3252.y * _3250;
        float _3257 = (_3232 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3258 = _3257 * (_3233 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3214)));
        _3259 = _3257 * (_3233 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3216)));
        _3260 = _3257 * (_3233 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3218)));
        _3261 = _3250 * 0.999000012874603271484375;
        _3271 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3271)
        {
            if ((cbInstanceData._m0[_988 + 7u].x + _3261) < 0.5)
            {
                _3427 = true;
                break;
            }
        }
        uint _3368 = _989 + uint(_3230.w);
        if ((cbInstanceData._m0[_3368].w < 1.0) && ((cbInstanceData._m0[_3368].w + _3261) < 0.5))
        {
            _3427 = true;
            break;
        }
        if ((_3254 + 1.0) < _3252.x)
        {
            _3427 = true;
            break;
        }
        _3427 = false;
        break;
    }
    float _3631;
    if (_3427)
    {
        discard_state = true;
        _3631 = 0.0;
    }
    else
    {
        _3631 = cbInstanceData._m0[_3114].w;
    }
    SV_Target.x = _3258;
    SV_Target.y = _3259;
    SV_Target.z = _3260;
    SV_Target.w = _3631;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3114].w;
    discard_exit();
}


