#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1500;
float _3901;
float _3902;
float _3903;
float _3904;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _288 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _305 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _323 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _335 = exp2(log2(_323.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    float _346 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _348 = isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0));
    vec4 _360 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _363 = _360.y;
    float _366 = (_360.x + (-0.02500000037252902984619140625)) * 8.0;
    float _370 = roundEven(5.0 - _366);
    float _371 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _372 = isnan(4.0) ? _371 : (isnan(_371) ? 4.0 : min(_371, 4.0));
    float _385 = floor(_372);
    vec4 _388 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _385));
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[17u].x;
    _201[0u] = cbMtdParam._m0[17u].y;
    _202[0u] = cbMtdParam._m0[17u].z;
    _200[1u] = cbMtdParam._m0[15u].x;
    _201[1u] = cbMtdParam._m0[15u].y;
    _202[1u] = cbMtdParam._m0[15u].z;
    _200[2u] = cbMtdParam._m0[14u].x;
    _201[2u] = cbMtdParam._m0[14u].y;
    _202[2u] = cbMtdParam._m0[14u].z;
    _200[3u] = cbMtdParam._m0[13u].x;
    _201[3u] = cbMtdParam._m0[13u].y;
    _202[3u] = cbMtdParam._m0[13u].z;
    _200[4u] = cbMtdParam._m0[12u].x;
    _201[4u] = cbMtdParam._m0[12u].y;
    _202[4u] = cbMtdParam._m0[12u].z;
    _200[5u] = cbMtdParam._m0[18u].x;
    _201[5u] = cbMtdParam._m0[18u].y;
    _202[5u] = cbMtdParam._m0[18u].z;
    float _452 = roundEven(_366);
    float _453 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    uint _455 = uint(int(isnan(5.0) ? _453 : (isnan(_453) ? 5.0 : min(_453, 5.0))));
    vec4 _485 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _496 = cbMtdParam._m0[9u].x * _485.x;
    float _497 = cbMtdParam._m0[9u].y * _485.y;
    float _498 = cbMtdParam._m0[9u].z * _485.z;
    float _505 = ((((((_200[_455] - cbMtdParam._m0[10u].x) * _363) + cbMtdParam._m0[10u].x) * _388.x) - _496) * _348) + _496;
    float _506 = ((((((_201[_455] - cbMtdParam._m0[10u].y) * _363) + cbMtdParam._m0[10u].y) * _388.y) - _497) * _348) + _497;
    float _507 = ((((((_202[_455] - cbMtdParam._m0[10u].z) * _363) + cbMtdParam._m0[10u].z) * _388.z) - _498) * _348) + _498;
    float _513 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _526 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _545 = (((cbMtdParam._m0[16u].x * _526.x) - _505) * _513) + _505;
    float _546 = (((cbMtdParam._m0[16u].y * _526.y) - _506) * _513) + _506;
    float _547 = (((cbMtdParam._m0[16u].z * _526.z) - _507) * _513) + _507;
    vec4 _560 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _580 = (((cbMtdParam._m0[19u].x * _560.x) - _545) * _337) + _545;
    float _581 = (((cbMtdParam._m0[19u].y * _560.y) - _546) * _337) + _546;
    float _582 = (((cbMtdParam._m0[19u].z * _560.z) - _547) * _337) + _547;
    vec4 _594 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _619 = (_323.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _594.x) - _580) * _307) + _580);
    float _621 = (_323.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _594.y) - _581) * _307) + _581);
    float _623 = (_323.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _594.z) - _582) * _307) + _582);
    float _627 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _636 = (_627 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _627))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3963 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _644 = ((cbMtdParam._m0[21u].x - _619) * _637) + _619;
    float _645 = ((cbMtdParam._m0[21u].y - _621) * _637) + _621;
    float _646 = ((cbMtdParam._m0[21u].z - _623) * _637) + _623;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[28u].w;
    _196[0u] = cbMtdParam._m0[29u].x;
    _195[1u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[31u].x;
    _195[2u] = cbMtdParam._m0[30u].y;
    _196[2u] = cbMtdParam._m0[30u].z;
    _195[3u] = cbMtdParam._m0[29u].w;
    _196[3u] = cbMtdParam._m0[30u].x;
    _195[4u] = cbMtdParam._m0[29u].y;
    _196[4u] = cbMtdParam._m0[29u].z;
    float _686 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    uint _688 = uint(int(isnan(4.0) ? _686 : (isnan(_686) ? 4.0 : min(_686, 4.0))));
    float _695 = ((_196[_688] - cbMtdParam._m0[22u].z) * _348) + cbMtdParam._m0[22u].z;
    float _698 = ((cbMtdParam._m0[22u].w - _695) * _513) + _695;
    float _701 = ((cbMtdParam._m0[25u].x - _698) * _337) + _698;
    float _704 = ((cbMtdParam._m0[26u].x - _701) * _307) + _701;
    float _706 = _704 - (_704 * _627);
    vec4 _722 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _385));
    vec4 _739 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _741 = _739.x;
    float _742 = _739.y;
    float _747 = cbMtdParam._m0[22u].x + _739.z;
    float _750 = (((_722.z + _195[_688]) - _747) * _348) + _747;
    vec4 _762 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _773 = (((_762.z - _750) + cbMtdParam._m0[28u].y) * _513) + _750;
    float _779 = ((((_292 * 2.0) * _773) - _773) * cbMtdParam._m0[24u].w) + _773;
    vec4 _791 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _802 = (((cbMtdParam._m0[23u].z + _791.z) - _779) * _337) + _779;
    vec4 _815 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _826 = (((_815.z - _802) + cbMtdParam._m0[26u].y) * _307) + _802;
    vec4 _841 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _856 = ((cbMtdParam._m0[27u].y * _627) * ((_841.z * cbMtdParam._m0[27u].x) - _826)) + _826;
    float _868 = ((_722.x - _741) * _348) + _741;
    float _869 = ((_722.y - _742) * _348) + _742;
    float _874 = ((_762.x - _868) * _513) + _868;
    float _875 = ((_762.y - _869) * _513) + _869;
    float _880 = ((_791.x - _874) * _337) + _874;
    float _881 = ((_791.y - _875) * _337) + _875;
    float _890 = ((((_815.x - _880) * _307) + _880) * 2.0) + (-1.0);
    float _891 = ((((_815.y - _881) * _307) + _881) * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _3984 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _897 = sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))));
    float _907 = ((cbMtdParam._m0[25u].y * ((_288.x * 2.0) + (-1.0))) + _890) + ((((_841.x * 2.0) + (-1.0)) * _627) * cbMtdParam._m0[26u].w);
    float _908 = ((cbMtdParam._m0[25u].y * ((_288.y * 2.0) + (-1.0))) + _891) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_841.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _911 = fma(_897, _237 * NORMAL.x, fma(_908, _244 * TANGENT.x, (_230 * _222) * _907));
    float _914 = fma(_897, _237 * NORMAL.y, fma(_908, _244 * TANGENT.y, (_230 * _223) * _907));
    float _917 = fma(_897, _237 * NORMAL.z, fma(_908, _244 * TANGENT.z, (_230 * _224) * _907));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _3995 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _925 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4017 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4028 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4039 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _929 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _945 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _995 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _985);
    float _996 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _985);
    float _997 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _985);
    float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
    float _1002 = _995 * _1001;
    float _1003 = _996 * _1001;
    float _1004 = _997 * _1001;
    vec4 _1009 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1011 = _1009.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1181 = sqrt(((_995 * _995) + (_996 * _996)) + (_997 * _997));
        float _1187 = (cbMatDynParam._m0[5u].x * _1181) + cbMatDynParam._m0[5u].y;
        float _4050 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1192 = (cbMatDynParam._m0[5u].z * _1181) + cbMatDynParam._m0[5u].w;
        float _4061 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) - _1188)) + _1188) < ((_1011 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1022 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1023 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1041 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1044 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1047 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1060 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1061 = _1060 + 9u;
    uint _1062 = _1061 + uint(cbMatDynParam._m0[0u].w);
    float _1068 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1062].x;
    float _1069 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1062].y;
    float _1070 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1062].z;
    float _4072 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1074 = 1.0 - _929;
    float _1075 = _1071 * _1074;
    float _1076 = _1072 * _1074;
    float _1077 = _1073 * _1074;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _929;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _929;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _929;
    float _1085 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    vec4 _1097 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1022, cbSceneParam._m0[86u].y * _1023));
    float _1100 = _1097.x * TEXCOORD_3.w;
    float _1101 = dot(vec3(_922, _923, _924), vec3(_1002, _1003, _1004));
    float _1104 = _1101 * 2.0;
    float _1108 = (_1104 * _922) - _1002;
    float _1109 = (_1104 * _923) - _1003;
    float _1110 = (_1104 * _924) - _1004;
    float _1114 = abs(dot(vec3(_1002, _1003, _1004), vec3(_922, _923, _924)));
    float _4105 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = sqrt(_925);
    float _1127 = exp2((_1116 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1116 * 3.0));
    float _1133 = (1.0 - _1127) * ((_1116 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1134 = _1127 * _1116;
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1499;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1224 = fma(_1170, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162));
        float _1228 = fma(_1170, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162));
        float _1232 = fma(_1170, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162));
        float _1257 = _1162 + _922;
        float _1258 = _1166 + _923;
        float _1259 = _1170 + _924;
        float _1269 = fma(_1259, cbModelParam._m0[26u].z, fma(_1258, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1257)) - _1224;
        float _1270 = fma(_1259, cbModelParam._m0[27u].z, fma(_1258, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1257)) - _1228;
        float _1271 = fma(_1259, cbModelParam._m0[28u].z, fma(_1258, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1257)) - _1232;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1224 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1228 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[34u].z) + ((((((_1232 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1327 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1293.x + (-0.5));
        float _1329 = _1327 * (_1293.y + (-0.5));
        float _1330 = _1327 * (_1293.z + (-0.5));
        float _1337 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1300.x + (-0.5));
        float _1339 = _1337 * (_1300.y + (-0.5));
        float _1340 = _1337 * (_1300.z + (-0.5));
        float _1347 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1307.x + (-0.5));
        float _1349 = _1347 * (_1307.y + (-0.5));
        float _1350 = _1347 * (_1307.z + (-0.5));
        float _1357 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1314.x + (-0.5));
        float _1359 = _1357 * (_1314.y + (-0.5));
        float _1360 = _1357 * (_1314.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1381 = (dot(vec3(_922, _923, _924), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1391 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4153 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1393 + 1.0))) + _1398) * _1361;
        float _1408 = _1329 * 0.5;
        float _1409 = _1339 * 0.5;
        float _1410 = _1349 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_922, _923, _924), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4186 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1435 + 1.0))) + _1440) * _1362;
        float _1450 = _1330 * 0.5;
        float _1451 = _1340 * 0.5;
        float _1452 = _1350 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_922, _923, _924), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4219 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1477 + 1.0))) + _1482) * _1363;
        _1499 = _1330;
        _1501 = _1329;
        _1502 = _1328;
        _1503 = _1340;
        _1504 = _1339;
        _1505 = _1338;
        _1506 = _1350;
        _1507 = _1349;
        _1508 = _1348;
        _1509 = _1363;
        _1510 = _1362;
        _1511 = _1361;
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1500;
        _1501 = _1500;
        _1502 = _1500;
        _1503 = _1500;
        _1504 = _1500;
        _1505 = _1500;
        _1506 = _1500;
        _1507 = _1500;
        _1508 = _1500;
        _1509 = _1500;
        _1510 = _1500;
        _1511 = _1500;
        _1512 = 0.0;
        _1513 = 0.0;
        _1514 = 0.0;
    }
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1540 = fma(_1170, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162));
        float _1544 = fma(_1170, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162));
        float _1548 = fma(_1170, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162));
        float _1571 = _1162 + _922;
        float _1572 = _1166 + _923;
        float _1573 = _1170 + _924;
        float _1583 = fma(_1573, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1571)) - _1540;
        float _1584 = fma(_1573, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1571)) - _1544;
        float _1585 = fma(_1573, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1571)) - _1548;
        float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
        float _1602 = ((_1589 * _1583) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1540 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1589 * _1584) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1544 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1589 * _1585) / cbModelParam._m0[35u].z) + ((((((_1548 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        float _1639 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1606.x + (-0.5));
        float _1641 = _1639 * (_1606.y + (-0.5));
        float _1642 = _1639 * (_1606.z + (-0.5));
        float _1649 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1613.x + (-0.5));
        float _1651 = _1649 * (_1613.y + (-0.5));
        float _1652 = _1649 * (_1613.z + (-0.5));
        float _1659 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1620.x + (-0.5));
        float _1661 = _1659 * (_1620.y + (-0.5));
        float _1662 = _1659 * (_1620.z + (-0.5));
        float _1669 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1627.x + (-0.5));
        float _1671 = _1669 * (_1627.y + (-0.5));
        float _1672 = _1669 * (_1627.z + (-0.5));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = _1640 * 0.5;
        float _1677 = _1650 * 0.5;
        float _1678 = _1660 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_922, _923, _924), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4282 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1703 + 1.0))) + _1708) * _1673;
        float _1718 = _1641 * 0.5;
        float _1719 = _1651 * 0.5;
        float _1720 = _1661 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_922, _923, _924), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4315 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1745 + 1.0))) + _1750) * _1674;
        float _1760 = _1642 * 0.5;
        float _1761 = _1652 * 0.5;
        float _1762 = _1662 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_922, _923, _924), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4348 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1787 + 1.0))) + _1792) * _1675;
        _1809 = _1642;
        _1810 = _1641;
        _1811 = _1640;
        _1812 = _1652;
        _1813 = _1651;
        _1814 = _1650;
        _1815 = _1662;
        _1816 = _1661;
        _1817 = _1660;
        _1818 = _1675;
        _1819 = _1674;
        _1820 = _1673;
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
    }
    else
    {
        _1809 = _1500;
        _1810 = _1500;
        _1811 = _1500;
        _1812 = _1500;
        _1813 = _1500;
        _1814 = _1500;
        _1815 = _1500;
        _1816 = _1500;
        _1817 = _1500;
        _1818 = _1500;
        _1819 = _1500;
        _1820 = _1500;
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1512)) + _1512;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1513)) + _1513;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1514)) + _1514;
    float _1856 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1833));
    float _1877 = _1108 * 0.5;
    float _1878 = _1109 * 0.5;
    float _1879 = _1110 * 0.5;
    float _1880 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1883 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1886 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1920;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1893 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1499, _1503, _1506, _1509));
        float _1897 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1901 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1908 = dot(vec4(cbModelParam._m0[39u]), vec4(_1877, _1878, _1879, 1.0));
        _1920 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1920 = 1.0;
    }
    float _1931;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1922 = dot(vec4(cbModelParam._m0[40u]), vec4(_1877, _1878, _1879, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1935 = (_1931 * cbModelParam._m0[1u].x) + (_1920 * (1.0 - cbModelParam._m0[1u].x));
    float _1945 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1945 : min(cbModelParam._m0[25u].z, _1945));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1993 = fma(_1170, cbModelParam._m0[13u].z, fma(_1166, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1162)) + cbModelParam._m0[13u].w;
        float _1997 = fma(_1170, cbModelParam._m0[14u].z, fma(_1166, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1162)) + cbModelParam._m0[14u].w;
        float _2001 = fma(_1170, cbModelParam._m0[15u].z, fma(_1166, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1162)) + cbModelParam._m0[15u].w;
        float _2004 = fma(_1110, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108));
        float _2007 = fma(_1110, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108));
        float _2010 = fma(_1110, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108));
        float _2038;
        if (_2004 > 0.0)
        {
            _2038 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2038 = frontier_phi_17_15_ladder;
        }
        float _2261;
        if (_2007 > 0.0)
        {
            _2261 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2261 = frontier_phi_26_22_ladder;
        }
        float _2518;
        if (_2010 > 0.0)
        {
            _2518 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2518 = frontier_phi_38_33_ladder;
        }
        float _2520 = isnan(_2261) ? _2038 : (isnan(_2038) ? _2261 : min(_2038, _2261));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _2004) + _1993;
        float _2526 = (_2521 * _2007) + _1997;
        float _2527 = (_2521 * _2010) + _2001;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2528;
        float _2532 = _2528 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 > _2532) || ((_2526 < _2530) || ((_2525 < _2530) || (_2525 > _2532))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2527, cbModelParam._m0[9u].z, fma(_2526, cbModelParam._m0[9u].y, _2525 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2527, cbModelParam._m0[10u].z, fma(_2526, cbModelParam._m0[10u].y, _2525 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2527, cbModelParam._m0[11u].z, fma(_2526, cbModelParam._m0[11u].y, _2525 * cbModelParam._m0[11u].x))), _1946);
            frontier_phi_16_38_ladder = _2655.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2655.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2655.x * cbModelParam._m0[1u].y;
        }
        _2026 = frontier_phi_16_38_ladder_2;
        _2028 = frontier_phi_16_38_ladder_1;
        _2030 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1108, _1109, _1110), _1946);
        _2026 = _2014.x * cbModelParam._m0[1u].y;
        _2028 = _2014.y * cbModelParam._m0[1u].y;
        _2030 = _2014.z * cbModelParam._m0[1u].y;
    }
    float _2034 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _2035 = isnan(_2034) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2034 : min(cbModelParam._m0[25u].w, _2034));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2088 = fma(_1170, cbModelParam._m0[21u].z, fma(_1166, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1162)) + cbModelParam._m0[21u].w;
        float _2092 = fma(_1170, cbModelParam._m0[22u].z, fma(_1166, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1162)) + cbModelParam._m0[22u].w;
        float _2096 = fma(_1170, cbModelParam._m0[23u].z, fma(_1166, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1162)) + cbModelParam._m0[23u].w;
        float _2099 = fma(_1110, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108));
        float _2102 = fma(_1110, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108));
        float _2105 = fma(_1110, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108));
        float _2266;
        if (_2099 > 0.0)
        {
            _2266 = abs((1.0 - _2088) / _2099);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2088 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2266 = frontier_phi_28_24_ladder;
        }
        float _2545;
        if (_2102 > 0.0)
        {
            _2545 = abs((1.0 - _2092) / _2102);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2092 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2545 = frontier_phi_40_35_ladder;
        }
        float _2758;
        if (_2105 > 0.0)
        {
            _2758 = abs((1.0 - _2096) / _2105);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2096 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2758 = frontier_phi_49_46_ladder;
        }
        float _2760 = isnan(_2545) ? _2266 : (isnan(_2266) ? _2545 : min(_2266, _2545));
        float _2761 = isnan(_2758) ? _2760 : (isnan(_2760) ? _2758 : min(_2760, _2758));
        float _2765 = (_2761 * _2099) + _2088;
        float _2766 = (_2761 * _2102) + _2092;
        float _2767 = (_2761 * _2105) + _2096;
        float _2768 = _2761 * 9.9999997473787516355514526367188e-05;
        float _2769 = (-1.0) - _2768;
        float _2771 = _2768 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2767 > _2771) || ((_2767 < _2769) || ((_2766 > _2771) || ((_2766 < _2769) || ((_2765 < _2769) || (_2765 > _2771))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2767, cbModelParam._m0[17u].z, fma(_2766, cbModelParam._m0[17u].y, _2765 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2767, cbModelParam._m0[18u].z, fma(_2766, cbModelParam._m0[18u].y, _2765 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2767, cbModelParam._m0[19u].z, fma(_2766, cbModelParam._m0[19u].y, _2765 * cbModelParam._m0[19u].x))), _2035);
            frontier_phi_25_49_ladder = _2966.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2966.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2966.x * cbModelParam._m0[1u].z;
        }
        _2124 = frontier_phi_25_49_ladder_2;
        _2126 = frontier_phi_25_49_ladder_1;
        _2128 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1108, _1109, _1110), _2035);
        _2124 = _2108.x * cbModelParam._m0[1u].z;
        _2126 = _2108.y * cbModelParam._m0[1u].z;
        _2128 = _2108.z * cbModelParam._m0[1u].z;
    }
    float _2141 = (((_1133 * _1085) + _1134) * _1100) * ((cbModelParam._m0[1u].w * (_2124 - _2026)) + _2026);
    float _2143 = (((_1133 * _1087) + _1134) * _1100) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2145 = (((_1133 * _1088) + _1134) * _1100) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2148 = fma(_2145, cbSceneParam._m0[89u].z, fma(_2143, cbSceneParam._m0[89u].y, _2141 * cbSceneParam._m0[89u].x));
    float _2151 = fma(_2145, cbSceneParam._m0[90u].z, fma(_2143, cbSceneParam._m0[90u].y, _2141 * cbSceneParam._m0[90u].x));
    float _2154 = fma(_2145, cbSceneParam._m0[91u].z, fma(_2143, cbSceneParam._m0[91u].y, _2141 * cbSceneParam._m0[91u].x));
    vec4 _2162 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1022, _1023));
    float _2164 = _2162.w;
    float _2176 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2164);
    float _2177 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2164);
    float _2178 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2164);
    uvec4 _2182 = floatBitsToUint(cbInstanceData._m0[_1060 + 5u]);
    uint _2184 = _2182.x * 14u;
    uint _2185 = _2184 + 13u;
    float _2192 = _1100 + (-1.0);
    float _2197 = (cbLight._m0[_2185].x * _2192) + 1.0;
    float _2198 = (cbLight._m0[_2185].y * _2192) + 1.0;
    float _2199 = (cbLight._m0[_2185].z * _2192) + 1.0;
    float _2200 = (cbLight._m0[_2185].w * _2192) + 1.0;
    uint _2201 = _2184 + 5u;
    float _2207 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2211 = _2184 + 4u;
    float _2220 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2224 = _2184 | 1u;
    float _2235 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_922, _923, _924));
    float _2238 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_922, _923, _924));
    float _4484 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _4495 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2243 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2245 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2252 = ((cbLight._m0[_2201].x * _2207) * _2245) + (((cbLight._m0[_2211].x * _2176) * _2220) * _2243);
    float _2253 = ((_2207 * cbLight._m0[_2201].y) * _2245) + (((cbLight._m0[_2211].y * _2177) * _2220) * _2243);
    float _2254 = ((_2207 * cbLight._m0[_2201].z) * _2245) + (((cbLight._m0[_2211].z * _2178) * _2220) * _2243);
    uvec4 _2258 = floatBitsToUint(cbLight._m0[_2184 + 12u]);
    bool _2260 = _2258.x == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2260)
    {
        _2271 = _2252;
        _2273 = _2253;
        _2275 = _2254;
    }
    else
    {
        uint _2279 = _2184 + 6u;
        float _2295 = (dot(vec3(cbLight._m0[_2184 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4506 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2298 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2271 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2252;
        _2273 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2253;
        _2275 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2254;
    }
    bool _2278 = _2258.y == 0u;
    float _2316;
    float _2318;
    float _2320;
    if (_2278)
    {
        _2316 = _2271;
        _2318 = _2273;
        _2320 = _2275;
    }
    else
    {
        uint _2489 = _2184 + 7u;
        float _2505 = (dot(vec3(cbLight._m0[_2184 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4522 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2508 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2316 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2271;
        _2318 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2273;
        _2320 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2275;
    }
    uint _2323 = _2184 + 8u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _925) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2184].x + _1002;
    float _2339 = cbLight._m0[_2184].y + _1003;
    float _2340 = cbLight._m0[_2184].z + _1004;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2184].xyz));
    float _4538 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _4549 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2352 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2353 = dot(vec3(_922, _923, _924), vec3(_2345, _2346, _2347));
    float _4560 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2345, _2346, _2347));
    float _4571 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2337 * _2337;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
    float _2374 = 0.959999978542327880859375 - _1082;
    float _2376 = 0.959999978542327880859375 - _1083;
    float _2377 = 0.959999978542327880859375 - _1084;
    float _2384 = 1.0 - _2337;
    float _2395 = (0.5 / (((_2352 * ((_2351 * _2384) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2384) + _2337) * _2351))) * _2351;
    float _4582 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    uint _2411 = _2184 + 9u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _925) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2224].x + _1002;
    float _2425 = cbLight._m0[_2224].y + _1003;
    float _2426 = cbLight._m0[_2224].z + _1004;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2224].xyz));
    float _4593 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2438 = dot(vec3(_922, _923, _924), vec3(_2431, _2432, _2433));
    float _4604 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2431, _2432, _2433));
    float _4615 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2423 * _2423;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2464 = 1.0 - _2423;
    float _2474 = (0.5 / (((_2352 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2464) + _2423) * _2437))) * _2437;
    float _4626 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    float _2486 = (((((_2457 * _2374) + _1085) * cbLight._m0[_2411].x) * _2476) * _2207) + ((((cbLight._m0[_2323].x * _2176) * ((_2373 * _2374) + _1085)) * _2397) * _2220);
    float _2487 = (((((_2457 * _2376) + _1087) * cbLight._m0[_2411].y) * _2476) * _2207) + ((((cbLight._m0[_2323].y * _2177) * ((_2373 * _2376) + _1087)) * _2397) * _2220);
    float _2488 = (((((_2457 * _2377) + _1088) * cbLight._m0[_2411].z) * _2476) * _2207) + ((((cbLight._m0[_2323].z * _2178) * ((_2373 * _2377) + _1088)) * _2397) * _2220);
    float _2550;
    float _2552;
    float _2554;
    if (_2260)
    {
        _2550 = _2486;
        _2552 = _2487;
        _2554 = _2488;
    }
    else
    {
        uint _2556 = _2184 + 2u;
        uint _2560 = _2184 + 10u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _925) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _1002;
        float _2577 = cbLight._m0[_2556].y + _1003;
        float _2578 = cbLight._m0[_2556].z + _1004;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2556].xyz));
        float _4637 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2590 = dot(vec3(_922, _923, _924), vec3(_2583, _2584, _2585));
        float _4648 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4659 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
        float _2616 = 1.0 - _2575;
        float _2626 = (0.5 / (((_2352 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2616) + _2575) * _2589))) * _2589;
        float _4670 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2550 = (((((_2609 * _2374) + _1085) * cbLight._m0[_2560].x) * _2628) * _2629) + _2486;
        _2552 = (((((_2609 * _2376) + _1087) * cbLight._m0[_2560].y) * _2628) * _2629) + _2487;
        _2554 = (((((_2609 * _2377) + _1088) * cbLight._m0[_2560].z) * _2628) * _2629) + _2488;
    }
    float _2664;
    float _2666;
    float _2668;
    if (_2278)
    {
        _2664 = _2550;
        _2666 = _2552;
        _2668 = _2554;
    }
    else
    {
        uint _2675 = _2184 + 3u;
        uint _2679 = _2184 + 11u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _925) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _1002;
        float _2696 = cbLight._m0[_2675].y + _1003;
        float _2697 = cbLight._m0[_2675].z + _1004;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2675].xyz));
        float _4686 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2709 = dot(vec3(_922, _923, _924), vec3(_2702, _2703, _2704));
        float _4697 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4708 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
        float _2735 = 1.0 - _2694;
        float _2745 = (0.5 / (((_2352 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2735) + _2694) * _2708))) * _2708;
        float _4719 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2664 = (((((_2728 * _2374) + _1085) * cbLight._m0[_2679].x) * _2747) * _2748) + _2550;
        _2666 = (((((_2728 * _2376) + _1087) * cbLight._m0[_2679].y) * _2747) * _2748) + _2552;
        _2668 = (((((_2728 * _2377) + _1088) * cbLight._m0[_2679].z) * _2747) * _2748) + _2554;
    }
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    if (_2182.y == 0u)
    {
        float _2823 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2823;
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2823;
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2823;
        uvec4 _2838 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2839 = _2838.x;
        uint _2850 = uint((float(_2838.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1023) / _2839))) + floor(float(uint(cbSceneParam._m0[85u].x * _1022) / _2839)));
        float _2860 = (log2(_2826 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2861 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        uint _2864 = uint(isnan(14.0) ? _2861 : (isnan(_2861) ? 14.0 : min(_2861, 14.0)));
        uvec4 _2869 = texelFetch(g_lightClusterGridBuffer, int(((_2864 << 2u) + (_2850 << 6u)) >> 2u));
        uint _2870 = _2869.x;
        uint _2871 = _2838.z;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((((1u << ((_2871 >> 4u) & 15u)) + 4294967295u) & _2870) == 0u) || ((_2871 & 240u) == 0u))
        {
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
        }
        else
        {
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            uint _3130 = 0u;
            uint _3139;
            bool _3140;
            for (;;)
            {
                _3139 = texelFetch(g_lightClassification, int((((_2864 << 5u) + (_2850 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                _3140 = _3139 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3140)
                {
                    frontier_phi_66_pred = _3124;
                    frontier_phi_66_pred_1 = _3129;
                    frontier_phi_66_pred_2 = _3128;
                    frontier_phi_66_pred_3 = _3127;
                    frontier_phi_66_pred_4 = _3126;
                    frontier_phi_66_pred_5 = _3125;
                }
                else
                {
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    uint _3275;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3139;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    for (;;)
                    {
                        uint _3279 = uint(findLSB(_3275)) + (_3130 << 5u);
                        uint _3276 = (_3275 + 4294967295u) & _3275;
                        uint _3281 = _3279 * 48u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3301 = (_3279 * 48u) + 4u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 3u)).x));
                        uint _3320 = (_3279 * 48u) + 8u;
                        vec3 _3331 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x));
                        float _3335 = _3295.x - _2824;
                        float _3336 = _3295.y - _2825;
                        float _3337 = _3295.z - _2826;
                        float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                        float _3341 = inversesqrt(_3338);
                        float _3342 = _3341 * _3335;
                        float _3343 = _3341 * _3336;
                        float _3344 = _3341 * _3337;
                        float _3345 = dot(vec3(_1041, _1044, _1047), vec3(_3342, _3343, _3344));
                        float _3350 = 1.0 - (_3338 * _3295.w);
                        float _4745 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3352 = sqrt(_3338) * _3314.w;
                        float _3355 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                        float _3356 = _3355 * _3355;
                        float _3359 = ((1.0 - _3356) * _3345) + _3356;
                        float _3362 = _3352 * _3352;
                        float _3366 = ((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3351) / ((_3362 * 0.699999988079071044921875) + 1.0);
                        float _3370 = (-0.0) - _2824;
                        float _3371 = (-0.0) - _2825;
                        float _3372 = (-0.0) - _2826;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3387 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                        float _3388 = 1.0 - _1116;
                        float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                        float _3396 = _3395 * _3395;
                        float _3397 = _3396 * _3396;
                        float _3398 = _3377 + _3342;
                        float _3399 = _3378 + _3343;
                        float _3400 = _3379 + _3344;
                        float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                        float _3408 = dot(vec3(_1041, _1044, _1047), vec3(_3377, _3378, _3379));
                        float _4761 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3412 = dot(vec3(_1041, _1044, _1047), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                        float _4772 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3415 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                        float _3420 = _3355 * _3396;
                        float _3421 = _3420 * _3420;
                        float _3424 = ((1.0 - _3421) * _3345) + _3421;
                        float _4783 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3426 = 1.0 - _3396;
                        float _3436 = (0.5 / (((_3425 * ((_3411 * _3426) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3396) * _3411))) * _3425;
                        float _4794 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3447 = (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3419 * _3419) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125))) * _3351;
                        _3199 = (_3366 * _3314.x) + _3272;
                        _3200 = (_3366 * _3314.y) + _3273;
                        _3201 = (_3366 * _3314.z) + _3274;
                        _3196 = (_3447 * _3331.x) + _3269;
                        _3197 = (_3447 * _3331.y) + _3270;
                        _3198 = (_3447 * _3331.z) + _3271;
                        if (_3276 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3276;
                        }
                    }
                    frontier_phi_66_pred = _3196;
                    frontier_phi_66_pred_1 = _3201;
                    frontier_phi_66_pred_2 = _3200;
                    frontier_phi_66_pred_3 = _3199;
                    frontier_phi_66_pred_4 = _3198;
                    frontier_phi_66_pred_5 = _3197;
                }
                _2972 = frontier_phi_66_pred;
                _2982 = frontier_phi_66_pred_1;
                _2980 = frontier_phi_66_pred_2;
                _2978 = frontier_phi_66_pred_3;
                _2976 = frontier_phi_66_pred_4;
                _2974 = frontier_phi_66_pred_5;
                uint _3131 = _3130 + 1u;
                if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3124 = _2972;
                    _3125 = _2974;
                    _3126 = _2976;
                    _3127 = _2978;
                    _3128 = _2980;
                    _3129 = _2982;
                    _3130 = _3131;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
        }
        uvec4 _2985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2986 = _2985.z;
        uint _2988 = (_2986 >> 8u) & 15u;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((4294967295u << _2988) & _2870) == 0u)
        {
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
            _3102 = _2981;
        }
        else
        {
            float _3117 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
            float _3118 = _3117 * _2824;
            float _3119 = _3117 * _2825;
            float _3120 = _3117 * _2826;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2988 < ((_2986 >> 12u) & 15u))
            {
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3252 = _2971;
                float _3253 = _2973;
                float _3254 = _2975;
                float _3255 = _2977;
                float _3256 = _2979;
                float _3257 = _2981;
                uint _3258 = _2988;
                uint _3267;
                bool _3268;
                for (;;)
                {
                    _3267 = texelFetch(g_lightClassification, int((((_2864 << 5u) + (_2850 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                    _3268 = _3267 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3268)
                    {
                        frontier_phi_77_pred = _3257;
                        frontier_phi_77_pred_1 = _3256;
                        frontier_phi_77_pred_2 = _3255;
                        frontier_phi_77_pred_3 = _3254;
                        frontier_phi_77_pred_4 = _3253;
                        frontier_phi_77_pred_5 = _3252;
                    }
                    else
                    {
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3474 = _3252;
                        float _3475 = _3253;
                        float _3476 = _3254;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        uint _3480 = _3267;
                        uint _3481;
                        vec4 _3506;
                        float _3507;
                        vec4 _3522;
                        vec3 _3534;
                        vec4 _3549;
                        vec4 _3564;
                        float _3610;
                        bool _3611;
                        for (;;)
                        {
                            uint _3491 = ((_3258 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3480));
                            _3481 = (_3480 + 4294967295u) & _3480;
                            uint _3493 = _3491 * 40u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3507 = _3506.w;
                            uint _3509 = (_3491 * 40u) + 4u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3491 * 40u) + 8u;
                            _3534 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x));
                            uint _3536 = (_3491 * 40u) + 16u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3491 * 40u) + 20u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3491 * 40u) + 24u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3585 = (_3491 * 40u) + 28u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3610 = fma(_2826, _3598.z, fma(_2825, _3598.y, _3598.x * _2824)) + _3598.w;
                            _3611 = !((fma(_2826, _3579.z, fma(_2825, _3579.y, _3579.x * _2824)) + _3579.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3611)
                            {
                                float _3638 = _3506.x - _2824;
                                float _3639 = _3506.y - _2825;
                                float _3640 = _3506.z - _2826;
                                float _3641 = dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640));
                                float _3644 = inversesqrt(_3641);
                                float _3645 = _3644 * _3638;
                                float _3646 = _3644 * _3639;
                                float _3647 = _3644 * _3640;
                                float _3651 = 1.0 - (_3641 / (_3507 * _3507));
                                float _4805 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3656 = sqrt(_3641) * _3522.w;
                                float _3658 = 1.39999997615814208984375 / (_3656 + 1.39999997615814208984375);
                                float _3659 = _3658 * _3658;
                                float _3662 = ((1.0 - _3659) * dot(vec3(_3645, _3646, _3647), vec3(_1041, _1044, _1047))) + _3659;
                                float _3665 = _3656 * _3656;
                                float _3669 = (fma(_2826, _3549.z, fma(_2825, _3549.y, _3549.x * _2824)) + _3549.w) / _3610;
                                float _3670 = (fma(_2826, _3564.z, fma(_2825, _3564.y, _3564.x * _2824)) + _3564.w) / _3610;
                                float _3674 = 1.0 - dot(vec2(_3669, _3670), vec2(_3669, _3670));
                                float _4821 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3676 = _3675 * (((isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0))) * _3652) / ((_3665 * 0.699999988079071044921875) + 1.0));
                                float _3688 = exp2(log2(1.0 / ((_3665 * 3.5) + 5.0)) * 0.25);
                                float _3689 = 1.0 - _1116;
                                float _3696 = sqrt(1.0 - ((1.0 - (_3689 * _3689)) * (1.0 - (_3688 * _3688))));
                                float _3697 = _3696 * _3696;
                                float _3698 = _3697 * _3697;
                                float _3699 = _3645 - _3118;
                                float _3700 = _3646 - _3119;
                                float _3701 = _3647 - _3120;
                                float _3705 = inversesqrt(dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701)));
                                float _3709 = dot(vec3(_1041, _1044, _1047), vec3((-0.0) - _3118, (-0.0) - _3119, (-0.0) - _3120));
                                float _4832 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3713 = dot(vec3(_1041, _1044, _1047), vec3(_3705 * _3699, _3705 * _3700, _3705 * _3701));
                                float _4843 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3720 = ((_3716 * _3716) * (_3698 + (-1.0))) + 1.0;
                                float _3721 = _3658 * _3697;
                                float _3722 = _3721 * _3721;
                                float _3728 = ((1.0 - _3722) * dot(vec3(_1041, _1044, _1047), vec3(_3645, _3646, _3647))) + _3722;
                                float _4854 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3730 = 1.0 - _3697;
                                float _3740 = (0.5 / (((_3729 * ((_3712 * _3730) + _3697)) + 9.9999999392252902907785028219223e-09) + (((_3729 * _3730) + _3697) * _3712))) * _3729;
                                float _4865 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3750 = (_3675 * _3652) * (((_3698 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3720 * _3720) * ((_3665 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3676 * _3522.y;
                                frontier_phi_83_pred_1 = _3676 * _3522.x;
                                frontier_phi_83_pred_2 = _3750 * _3534.z;
                                frontier_phi_83_pred_3 = _3750 * _3534.y;
                                frontier_phi_83_pred_4 = _3750 * _3534.x;
                                frontier_phi_83_pred_5 = _3676 * _3522.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3758 = frontier_phi_83_pred;
                            _3757 = frontier_phi_83_pred_1;
                            _3756 = frontier_phi_83_pred_2;
                            _3755 = frontier_phi_83_pred_3;
                            _3754 = frontier_phi_83_pred_4;
                            _3759 = frontier_phi_83_pred_5;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            if (_3481 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3481;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3466;
                        frontier_phi_77_pred_1 = _3465;
                        frontier_phi_77_pred_2 = _3464;
                        frontier_phi_77_pred_3 = _3463;
                        frontier_phi_77_pred_4 = _3462;
                        frontier_phi_77_pred_5 = _3461;
                    }
                    _3103 = frontier_phi_77_pred;
                    _3101 = frontier_phi_77_pred_1;
                    _3099 = frontier_phi_77_pred_2;
                    _3097 = frontier_phi_77_pred_3;
                    _3095 = frontier_phi_77_pred_4;
                    _3093 = frontier_phi_77_pred_5;
                    uint _3259 = _3258 + 1u;
                    if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3252 = _3093;
                        _3253 = _3095;
                        _3254 = _3097;
                        _3255 = _3099;
                        _3256 = _3101;
                        _3257 = _3103;
                        _3258 = _3259;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3097;
                frontier_phi_58_59_ladder_1 = _3103;
                frontier_phi_58_59_ladder_2 = _3101;
                frontier_phi_58_59_ladder_3 = _3099;
                frontier_phi_58_59_ladder_4 = _3095;
                frontier_phi_58_59_ladder_5 = _3093;
            }
            else
            {
                frontier_phi_58_59_ladder = _2975;
                frontier_phi_58_59_ladder_1 = _2981;
                frontier_phi_58_59_ladder_2 = _2979;
                frontier_phi_58_59_ladder_3 = _2977;
                frontier_phi_58_59_ladder_4 = _2973;
                frontier_phi_58_59_ladder_5 = _2971;
            }
            _3092 = frontier_phi_58_59_ladder_5;
            _3094 = frontier_phi_58_59_ladder_4;
            _3096 = frontier_phi_58_59_ladder;
            _3098 = frontier_phi_58_59_ladder_3;
            _3100 = frontier_phi_58_59_ladder_2;
            _3102 = frontier_phi_58_59_ladder_1;
        }
        float _3107 = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
        _2883 = (_3107 * _3098) + _2316;
        _2885 = (_3107 * _3100) + _2318;
        _2887 = (_3107 * _3102) + _2320;
        _2889 = ((_3092 * _1085) * _3107) + _2664;
        _2891 = ((_3094 * _1087) * _3107) + _2666;
        _2893 = ((_3096 * _1088) * _3107) + _2668;
    }
    else
    {
        _2883 = _2316;
        _2885 = _2318;
        _2887 = _2320;
        _2889 = _2664;
        _2891 = _2666;
        _2893 = _2668;
    }
    float _4881 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _4892 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4903 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _2910 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2883 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1100))) + ((_2889 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _2911 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2885 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1100))) + ((_2891 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _2912 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2887 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1100))) + ((_2893 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    uint _2913 = _1060 + 6u;
    float _2921 = _1022 / cbSceneParam._m0[86u].x;
    float _2922 = _1023 / cbSceneParam._m0[86u].y;
    vec4 _2936 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2921, _2922, (log2((isnan(cbSceneParam._m0[77u].w) ? _945 : (isnan(_945) ? cbSceneParam._m0[77u].w : min(_945, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2938 = _2936.x;
    float _2939 = _2936.y;
    float _2940 = _2936.z;
    float _2941 = _2936.w;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    if (_945 > cbSceneParam._m0[78u].w)
    {
        float _2996 = isnan(_945) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _945 : min(cbSceneParam._m0[80u].w, _945));
        float _2997 = _2996 / _945;
        float _3008 = _2997 * _995;
        float _3009 = _996 * _2997;
        float _3010 = (-0.0) - _3009;
        float _3012 = _2997 * _997;
        float _3014 = (cbSceneParam._m0[77u].w * _3010) / _2996;
        float _3015 = _3014 + cbSceneParam._m0[79u].w;
        float _3016 = cbSceneParam._m0[79u].w - _3009;
        float _3022 = sqrt(((_3008 * _3008) + (_3009 * _3009)) + (_3012 * _3012));
        float _3025 = (1.0 - (cbSceneParam._m0[77u].w / _2996)) * _3022;
        float _3030 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3032 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3209;
        if (abs((_3010 - _3014) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3209 = ((((_3015 > 0.0) ? exp2(_3030 * _3015) : (2.0 - exp2(_3032 * _3015))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3025;
        }
        else
        {
            float _3153 = 1.0 / cbSceneParam._m0[80u].x;
            float _3154 = isnan(_3016) ? _3015 : (isnan(_3015) ? _3016 : max(_3015, _3016));
            float _3155 = isnan(_3016) ? _3015 : (isnan(_3015) ? _3016 : min(_3015, _3016));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            _3209 = ((abs(_3022 / _3010) * cbSceneParam._m0[80u].y) * ((((_3164 - _3165) * 2.0) - ((exp2(_3030 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0)))) - exp2(_3030 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))))) * _3153)) - ((exp2(_3032 * _3164) - exp2(_3032 * _3165)) * _3153))) + (_3025 * cbSceneParam._m0[80u].z);
        }
        vec4 _3211 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2921, _2922, 1.0), 0.0);
        float _3220 = exp2((_3209 * (-1.44269502162933349609375)) * (1.0 - _3211.w));
        float _3221 = log2(_3220);
        float _3237 = log2(_2941);
        _3034 = (exp2(_3237 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].x)) * _3211.x) / cbSceneParam._m0[78u].x)) + _2938;
        _3036 = (exp2(_3237 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].y)) * _3211.y) / cbSceneParam._m0[78u].y)) + _2939;
        _3038 = (exp2(_3237 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].z)) * _3211.z) / cbSceneParam._m0[78u].z)) + _2940;
        _3040 = _3220 * _2941;
    }
    else
    {
        _3034 = _2938;
        _3036 = _2939;
        _3038 = _2940;
        _3040 = _2941;
    }
    bool _3247;
    vec4 _3050;
    vec4 _3072;
    float _3074;
    float _3078;
    float _3079;
    float _3080;
    float _3081;
    bool _3091;
    for (;;)
    {
        _3050 = cbMatDynParam._m0[0u];
        float _3052 = roundEven(_3050.y);
        bool _3053 = _3052 == 3.0;
        float _3054 = log2(_3040);
        float _3061 = exp2(_3054 * cbSceneParam._m0[78u].x) * _2910;
        float _3062 = exp2(_3054 * cbSceneParam._m0[78u].y) * _2911;
        float _3063 = exp2(_3054 * cbSceneParam._m0[78u].z) * _2912;
        float _3070 = _1011 + (-0.5);
        _3072 = cbMtdParam._m0[1u];
        _3074 = _3072.y * _3070;
        float _3077 = (_3052 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3078 = _3077 * (_3053 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3034)));
        _3079 = _3077 * (_3053 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3036)));
        _3080 = _3077 * (_3053 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3038)));
        _3081 = _3070 * 0.999000012874603271484375;
        _3091 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3091)
        {
            if ((cbInstanceData._m0[_1060 + 7u].x + _3081) < 0.5)
            {
                _3247 = true;
                break;
            }
        }
        uint _3188 = _1061 + uint(_3050.w);
        if ((cbInstanceData._m0[_3188].w < 1.0) && ((cbInstanceData._m0[_3188].w + _3081) < 0.5))
        {
            _3247 = true;
            break;
        }
        if ((_3074 + 1.0) < _3072.x)
        {
            _3247 = true;
            break;
        }
        _3247 = false;
        break;
    }
    float _3452;
    if (_3247)
    {
        discard_state = true;
        _3452 = 0.0;
    }
    else
    {
        _3452 = cbInstanceData._m0[_2913].w;
    }
    SV_Target.x = _3078;
    SV_Target.y = _3079;
    SV_Target.z = _3080;
    SV_Target.w = _3452;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2913].w;
    discard_exit();
}


