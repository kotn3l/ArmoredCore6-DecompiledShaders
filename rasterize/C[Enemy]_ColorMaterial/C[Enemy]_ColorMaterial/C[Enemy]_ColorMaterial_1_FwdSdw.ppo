#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1384;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _284 = _280.z;
    float _297 = exp2(log2((1.0 - _284) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _315 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _327 = exp2(log2(_315.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    float _338 = exp2(log2(cbMtdParam._m0[23u].y * _284) * cbMtdParam._m0[22u].y);
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(1.0) ? _339 : (isnan(_339) ? 1.0 : min(_339, 1.0));
    float _361 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(4.0) ? _362 : (isnan(_362) ? 4.0 : min(_362, 4.0));
    float _376 = floor(_363);
    vec4 _379 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _376));
    vec4 _403 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _414 = cbMtdParam._m0[9u].x * _403.x;
    float _415 = cbMtdParam._m0[9u].y * _403.y;
    float _416 = cbMtdParam._m0[9u].z * _403.z;
    float _423 = (((cbMtdParam._m0[10u].x * _379.x) - _414) * _340) + _414;
    float _424 = (((cbMtdParam._m0[10u].y * _379.y) - _415) * _340) + _415;
    float _425 = (((cbMtdParam._m0[10u].z * _379.z) - _416) * _340) + _416;
    float _431 = exp2(log2(_280.w) * cbMtdParam._m0[23u].w);
    vec4 _444 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _463 = (((cbMtdParam._m0[16u].x * _444.x) - _423) * _431) + _423;
    float _464 = (((cbMtdParam._m0[16u].y * _444.y) - _424) * _431) + _424;
    float _465 = (((cbMtdParam._m0[16u].z * _444.z) - _425) * _431) + _425;
    vec4 _478 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _498 = (((cbMtdParam._m0[19u].x * _478.x) - _463) * _329) + _463;
    float _499 = (((cbMtdParam._m0[19u].y * _478.y) - _464) * _329) + _464;
    float _500 = (((cbMtdParam._m0[19u].z * _478.z) - _465) * _329) + _465;
    vec4 _513 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _538 = (_315.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _513.x) - _498) * _299) + _498);
    float _540 = (_315.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _513.y) - _499) * _299) + _499);
    float _542 = (_315.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _513.z) - _500) * _299) + _500);
    float _546 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _555 = (_546 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _546))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4031 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _563 = ((cbMtdParam._m0[21u].x - _538) * _556) + _538;
    float _564 = ((cbMtdParam._m0[21u].y - _540) * _556) + _540;
    float _565 = ((cbMtdParam._m0[21u].z - _542) * _556) + _542;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _607 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    uint _609 = uint(int(isnan(4.0) ? _607 : (isnan(_607) ? 4.0 : min(_607, 4.0))));
    float _616 = ((_194[_609] - cbMtdParam._m0[22u].z) * _340) + cbMtdParam._m0[22u].z;
    float _619 = ((cbMtdParam._m0[22u].w - _616) * _431) + _616;
    float _622 = ((cbMtdParam._m0[25u].x - _619) * _329) + _619;
    float _625 = ((cbMtdParam._m0[26u].x - _622) * _299) + _622;
    float _627 = _625 - (_625 * _546);
    vec4 _643 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _376));
    vec4 _661 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _663 = _661.x;
    float _664 = _661.y;
    float _669 = cbMtdParam._m0[22u].x + _661.z;
    float _672 = (((_643.z + _193[_609]) - _669) * _340) + _669;
    vec4 _685 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _696 = (((_685.z - _672) + cbMtdParam._m0[28u].y) * _431) + _672;
    float _702 = ((((_284 * 2.0) * _696) - _696) * cbMtdParam._m0[24u].w) + _696;
    vec4 _715 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _726 = (((cbMtdParam._m0[23u].z + _715.z) - _702) * _329) + _702;
    vec4 _739 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _750 = (((_739.z - _726) + cbMtdParam._m0[26u].y) * _299) + _726;
    vec4 _765 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _780 = ((cbMtdParam._m0[27u].y * _546) * ((_765.z * cbMtdParam._m0[27u].x) - _750)) + _750;
    float _792 = ((_643.x - _663) * _340) + _663;
    float _793 = ((_643.y - _664) * _340) + _664;
    float _798 = ((_685.x - _792) * _431) + _792;
    float _799 = ((_685.y - _793) * _431) + _793;
    float _804 = ((_715.x - _798) * _329) + _798;
    float _805 = ((_715.y - _799) * _329) + _799;
    float _814 = ((((_739.x - _804) * _299) + _804) * 2.0) + (-1.0);
    float _815 = ((((_739.y - _805) * _299) + _805) * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _4052 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _821 = sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))));
    float _831 = ((cbMtdParam._m0[25u].y * ((_280.x * 2.0) + (-1.0))) + _814) + ((((_765.x * 2.0) + (-1.0)) * _546) * cbMtdParam._m0[26u].w);
    float _832 = ((cbMtdParam._m0[25u].y * ((_280.y * 2.0) + (-1.0))) + _815) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_765.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _835 = fma(_821, _229 * NORMAL.x, fma(_832, _236 * TANGENT.x, (_222 * _214) * _831));
    float _838 = fma(_821, _229 * NORMAL.y, fma(_832, _236 * TANGENT.y, (_222 * _215) * _831));
    float _841 = fma(_821, _229 * NORMAL.z, fma(_832, _236 * TANGENT.z, (_222 * _216) * _831));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _4063 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _849 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4085 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4096 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4107 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _853 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _956 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _959 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _972 = uint(roundEven(NORMAL.w)) * 13u;
    uint _974 = (_972 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_974].z;
    float _4118 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _986 = 1.0 - _853;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _853;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _853;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _853;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _1012 = _1009.x * TEXCOORD_3.w;
    float _1013 = dot(vec3(_846, _847, _848), vec3(_926, _927, _928));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _846) - _926;
    float _1021 = (_1016 * _847) - _927;
    float _1022 = (_1016 * _848) - _928;
    float _1026 = abs(dot(vec3(_926, _927, _928), vec3(_846, _847, _848)));
    float _4151 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_849);
    float _1039 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1045 = (1.0 - _1039) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1046 = _1039 * _1028;
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1383;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1108 = fma(_1082, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074));
        float _1112 = fma(_1082, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074));
        float _1116 = fma(_1082, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074));
        float _1141 = _1074 + _846;
        float _1142 = _1078 + _847;
        float _1143 = _1082 + _848;
        float _1153 = fma(_1143, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141)) - _1108;
        float _1154 = fma(_1143, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141)) - _1112;
        float _1155 = fma(_1143, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141)) - _1116;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1108 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1112 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[34u].z) + ((((((_1116 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1211 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1177.x + (-0.5));
        float _1213 = _1211 * (_1177.y + (-0.5));
        float _1214 = _1211 * (_1177.z + (-0.5));
        float _1221 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1184.x + (-0.5));
        float _1223 = _1221 * (_1184.y + (-0.5));
        float _1224 = _1221 * (_1184.z + (-0.5));
        float _1231 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1191.x + (-0.5));
        float _1233 = _1231 * (_1191.y + (-0.5));
        float _1234 = _1231 * (_1191.z + (-0.5));
        float _1241 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1198.x + (-0.5));
        float _1243 = _1241 * (_1198.y + (-0.5));
        float _1244 = _1241 * (_1198.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1265 = (dot(vec3(_846, _847, _848), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1275 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4199 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1277 + 1.0))) + _1282) * _1245;
        float _1292 = _1213 * 0.5;
        float _1293 = _1223 * 0.5;
        float _1294 = _1233 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_846, _847, _848), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4232 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1319 + 1.0))) + _1324) * _1246;
        float _1334 = _1214 * 0.5;
        float _1335 = _1224 * 0.5;
        float _1336 = _1234 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_846, _847, _848), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4265 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1361 + 1.0))) + _1366) * _1247;
        _1383 = _1214;
        _1385 = _1213;
        _1386 = _1212;
        _1387 = _1224;
        _1388 = _1223;
        _1389 = _1222;
        _1390 = _1234;
        _1391 = _1233;
        _1392 = _1232;
        _1393 = _1247;
        _1394 = _1246;
        _1395 = _1245;
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1384;
        _1385 = _1384;
        _1386 = _1384;
        _1387 = _1384;
        _1388 = _1384;
        _1389 = _1384;
        _1390 = _1384;
        _1391 = _1384;
        _1392 = _1384;
        _1393 = _1384;
        _1394 = _1384;
        _1395 = _1384;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1082, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074));
        float _1425 = fma(_1082, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074));
        float _1429 = fma(_1082, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074));
        float _1452 = _1074 + _846;
        float _1453 = _1078 + _847;
        float _1454 = _1082 + _848;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_846, _847, _848), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4328 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_846, _847, _848), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4361 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_846, _847, _848), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4394 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1384;
        _1691 = _1384;
        _1692 = _1384;
        _1693 = _1384;
        _1694 = _1384;
        _1695 = _1384;
        _1696 = _1384;
        _1697 = _1384;
        _1698 = _1384;
        _1699 = _1384;
        _1700 = _1384;
        _1701 = _1384;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1396)) + _1396;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1397)) + _1397;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1398)) + _1398;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _1020 * 0.5;
    float _1759 = _1021 * 0.5;
    float _1760 = _1022 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1383, _1387, _1390, _1393));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1874 = fma(_1082, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1074)) + cbModelParam._m0[13u].w;
        float _1878 = fma(_1082, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1074)) + cbModelParam._m0[14u].w;
        float _1882 = fma(_1082, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1074)) + cbModelParam._m0[15u].w;
        float _1885 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1888 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1891 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1919;
        if (_1885 > 0.0)
        {
            _1919 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1919 = frontier_phi_14_12_ladder;
        }
        float _2091;
        if (_1888 > 0.0)
        {
            _2091 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2091 = frontier_phi_23_19_ladder;
        }
        float _2386;
        if (_1891 > 0.0)
        {
            _2386 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2386 = frontier_phi_35_30_ladder;
        }
        float _2388 = isnan(_2091) ? _1919 : (isnan(_1919) ? _2091 : min(_1919, _2091));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1885) + _1874;
        float _2394 = (_2389 * _1888) + _1878;
        float _2395 = (_2389 * _1891) + _1882;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_13_35_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1907 = frontier_phi_13_35_ladder_2;
        _1909 = frontier_phi_13_35_ladder_1;
        _1911 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1827);
        _1907 = _1895.x * cbModelParam._m0[1u].y;
        _1909 = _1895.y * cbModelParam._m0[1u].y;
        _1911 = _1895.z * cbModelParam._m0[1u].y;
    }
    float _1915 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1915 : min(cbModelParam._m0[25u].w, _1915));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1970 = fma(_1082, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1074)) + cbModelParam._m0[21u].w;
        float _1974 = fma(_1082, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1074)) + cbModelParam._m0[22u].w;
        float _1978 = fma(_1082, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1074)) + cbModelParam._m0[23u].w;
        float _1981 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _1984 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _1987 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2096;
        if (_1981 > 0.0)
        {
            _2096 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2096 = frontier_phi_25_21_ladder;
        }
        float _2413;
        if (_1984 > 0.0)
        {
            _2413 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2413 = frontier_phi_37_32_ladder;
        }
        float _2751;
        if (_1987 > 0.0)
        {
            _2751 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2751 = frontier_phi_47_44_ladder;
        }
        float _2753 = isnan(_2413) ? _2096 : (isnan(_2096) ? _2413 : min(_2096, _2413));
        float _2754 = isnan(_2751) ? _2753 : (isnan(_2753) ? _2751 : min(_2753, _2751));
        float _2758 = (_2754 * _1981) + _1970;
        float _2759 = (_2754 * _1984) + _1974;
        float _2760 = (_2754 * _1987) + _1978;
        float _2761 = _2754 * 9.9999997473787516355514526367188e-05;
        float _2762 = (-1.0) - _2761;
        float _2764 = _2761 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2760 > _2764) || ((_2760 < _2762) || ((_2759 > _2764) || ((_2759 < _2762) || ((_2758 < _2762) || (_2758 > _2764))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2760, cbModelParam._m0[17u].z, fma(_2759, cbModelParam._m0[17u].y, _2758 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2760, cbModelParam._m0[18u].z, fma(_2759, cbModelParam._m0[18u].y, _2758 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2760, cbModelParam._m0[19u].z, fma(_2759, cbModelParam._m0[19u].y, _2758 * cbModelParam._m0[19u].x))), _1916);
            frontier_phi_22_47_ladder = _2882.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2882.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2882.x * cbModelParam._m0[1u].z;
        }
        _2006 = frontier_phi_22_47_ladder_2;
        _2008 = frontier_phi_22_47_ladder_1;
        _2010 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1916);
        _2006 = _1990.x * cbModelParam._m0[1u].z;
        _2008 = _1990.y * cbModelParam._m0[1u].z;
        _2010 = _1990.z * cbModelParam._m0[1u].z;
    }
    float _2023 = (((_1045 * _997) + _1046) * _1012) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1045 * _999) + _1046) * _1012) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2027 = (((_1045 * _1000) + _1046) * _1012) * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2025, cbSceneParam._m0[89u].y, _2023 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2025, cbSceneParam._m0[90u].y, _2023 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2025, cbSceneParam._m0[91u].y, _2023 * cbSceneParam._m0[91u].x));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2083 = _2070 / _2082;
    float _2084 = _2074 / _2082;
    float _2085 = _2078 / _2082;
    float _2232;
    float _2233;
    float _2234;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2112 = ((uint(_2085 > cbSceneParam._m0[59u].y) + uint(_2085 > cbSceneParam._m0[59u].x)) + uint(_2085 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2113 = _2112 + 43u;
        uint _2121 = _2112 + 44u;
        uint _2129 = _2112 + 45u;
        uint _2137 = _2112 + 46u;
        float _2148 = fma(_2082, cbSceneParam._m0[_2113].w, fma(_2078, cbSceneParam._m0[_2113].z, fma(_2074, cbSceneParam._m0[_2113].y, _2070 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2082, cbSceneParam._m0[_2121].w, fma(_2078, cbSceneParam._m0[_2121].z, fma(_2074, cbSceneParam._m0[_2121].y, _2070 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2082, cbSceneParam._m0[_2137].w, fma(_2078, cbSceneParam._m0[_2137].z, fma(_2074, cbSceneParam._m0[_2137].y, _2070 * cbSceneParam._m0[_2137].x)));
        float _2165 = cbSceneParam._m0[33u].z * _2160;
        float _2167 = cbSceneParam._m0[33u].w * _2160;
        float _2170 = fma(_2082, cbSceneParam._m0[_2129].w, fma(_2078, cbSceneParam._m0[_2129].z, fma(_2074, cbSceneParam._m0[_2129].y, _2070 * cbSceneParam._m0[_2129].x))) / _2160;
        float _2218 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
        float _4520 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2225 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2148) / _2160, (_2167 + _2152) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2148) / _2160, (_2152 - _2165) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2165) / _2160, (_2152 - _2167) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2167) / _2160, (_2165 + _2152) / _2160), _2170), 0.0)).x), vec4(0.25)));
        _2232 = 1.0 - (_2225 * cbSceneParam._m0[34u].x);
        _2233 = 1.0 - (_2225 * cbSceneParam._m0[34u].y);
        _2234 = 1.0 - (_2225 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2232 = 1.0;
        _2233 = 1.0;
        _2234 = 1.0;
    }
    float _2298;
    float _2300;
    float _2302;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2286 = fma(_2082, cbSceneParam._m0[63u].w, fma(_2078, cbSceneParam._m0[63u].z, fma(_2074, cbSceneParam._m0[63u].y, _2070 * cbSceneParam._m0[63u].x)));
        float _2287 = fma(_2082, cbSceneParam._m0[60u].w, fma(_2078, cbSceneParam._m0[60u].z, fma(_2074, cbSceneParam._m0[60u].y, _2070 * cbSceneParam._m0[60u].x))) / _2286;
        float _2288 = fma(_2082, cbSceneParam._m0[61u].w, fma(_2078, cbSceneParam._m0[61u].z, fma(_2074, cbSceneParam._m0[61u].y, _2070 * cbSceneParam._m0[61u].x))) / _2286;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2287 >= cbSceneParam._m0[64u].x) && (_2288 >= cbSceneParam._m0[64u].y)) && (_2287 <= cbSceneParam._m0[64u].z)) && (_2288 <= cbSceneParam._m0[64u].w))
        {
            float _2426 = fma(_2082, cbSceneParam._m0[62u].w, fma(_2078, cbSceneParam._m0[62u].z, fma(_2074, cbSceneParam._m0[62u].y, _2070 * cbSceneParam._m0[62u].x))) / _2286;
            float _2430 = isnan(cbSceneParam._m0[41u].w) ? _2426 : (isnan(_2426) ? cbSceneParam._m0[41u].w : max(_2426, cbSceneParam._m0[41u].w));
            float _2473 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
            float _4536 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
            float _2480 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2287, cbSceneParam._m0[33u].w + _2288), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2287, _2288 - cbSceneParam._m0[33u].z), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].z, _2288 - cbSceneParam._m0[33u].w), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2288), _2430), 0.0)).x), vec4(0.25)));
            float _2484 = 1.0 - (_2480 * cbSceneParam._m0[34u].x);
            float _2485 = 1.0 - (_2480 * cbSceneParam._m0[34u].y);
            float _2486 = 1.0 - (_2480 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_34_33_ladder_1 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_34_33_ladder_2 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
        }
        else
        {
            frontier_phi_34_33_ladder = _2234;
            frontier_phi_34_33_ladder_1 = _2233;
            frontier_phi_34_33_ladder_2 = _2232;
        }
        _2298 = frontier_phi_34_33_ladder_2;
        _2300 = frontier_phi_34_33_ladder_1;
        _2302 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2298 = _2232;
        _2300 = _2233;
        _2302 = _2234;
    }
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_972 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _1012 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_846, _847, _848));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_846, _847, _848));
    float _4572 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4583 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2298) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2300) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2302) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2487;
    float _2489;
    float _2491;
    if (_2385)
    {
        _2487 = _2377;
        _2489 = _2378;
        _2491 = _2379;
    }
    else
    {
        uint _2495 = _2309 + 6u;
        float _2511 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4594 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2514 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2487 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2377;
        _2489 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2378;
        _2491 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2379;
    }
    bool _2494 = _2383.y == 0u;
    float _2549;
    float _2551;
    float _2553;
    if (_2494)
    {
        _2549 = _2487;
        _2551 = _2489;
        _2553 = _2491;
    }
    else
    {
        uint _2722 = _2309 + 7u;
        float _2738 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2739 = _2738 * _2738;
        float _4610 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2740 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2741 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2549 = (((cbLight._m0[_2722].x * 0.3183098733425140380859375) * _2740) * _2741) + _2487;
        _2551 = (((cbLight._m0[_2722].y * 0.3183098733425140380859375) * _2740) * _2741) + _2489;
        _2553 = (((cbLight._m0[_2722].z * 0.3183098733425140380859375) * _2740) * _2741) + _2491;
    }
    uint _2556 = _2309 + 8u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _849) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2309].x + _926;
    float _2572 = cbLight._m0[_2309].y + _927;
    float _2573 = cbLight._m0[_2309].z + _928;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2309].xyz));
    float _4626 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _4637 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2585 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2586 = dot(vec3(_846, _847, _848), vec3(_2578, _2579, _2580));
    float _4648 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2590 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2578, _2579, _2580));
    float _4659 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = _2570 * _2570;
    float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
    float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2607 = 0.959999978542327880859375 - _994;
    float _2609 = 0.959999978542327880859375 - _995;
    float _2610 = 0.959999978542327880859375 - _996;
    float _2617 = 1.0 - _2570;
    float _2628 = (0.5 / (((_2585 * ((_2584 * _2617) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2617) + _2570) * _2584))) * _2584;
    float _4670 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
    uint _2644 = _2309 + 9u;
    float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _849) * 0.949999988079071044921875);
    float _2656 = _2655 * _2655;
    float _2657 = cbLight._m0[_2349].x + _926;
    float _2658 = cbLight._m0[_2349].y + _927;
    float _2659 = cbLight._m0[_2349].z + _928;
    float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
    float _2664 = _2663 * _2657;
    float _2665 = _2663 * _2658;
    float _2666 = _2663 * _2659;
    float _2667 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2349].xyz));
    float _4681 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2670 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2671 = dot(vec3(_846, _847, _848), vec3(_2664, _2665, _2666));
    float _4692 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2675 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2664, _2665, _2666));
    float _4703 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2679 = _2656 * _2656;
    float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
    float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
    float _2697 = 1.0 - _2656;
    float _2707 = (0.5 / (((_2585 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2697) + _2656) * _2670))) * _2670;
    float _4714 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2709 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
    float _2719 = (((((_2690 * _2607) + _997) * cbLight._m0[_2644].x) * _2709) * _2332) + ((((cbLight._m0[_2556].x * _2298) * ((_2606 * _2607) + _997)) * _2630) * _2345);
    float _2720 = (((((_2690 * _2609) + _999) * cbLight._m0[_2644].y) * _2709) * _2332) + ((((cbLight._m0[_2556].y * _2300) * ((_2606 * _2609) + _999)) * _2630) * _2345);
    float _2721 = (((((_2690 * _2610) + _1000) * cbLight._m0[_2644].z) * _2709) * _2332) + ((((cbLight._m0[_2556].z * _2302) * ((_2606 * _2610) + _1000)) * _2630) * _2345);
    float _2777;
    float _2779;
    float _2781;
    if (_2385)
    {
        _2777 = _2719;
        _2779 = _2720;
        _2781 = _2721;
    }
    else
    {
        uint _2783 = _2309 + 2u;
        uint _2787 = _2309 + 10u;
        float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2783].w)) * _849) * 0.949999988079071044921875);
        float _2802 = _2801 * _2801;
        float _2803 = cbLight._m0[_2783].x + _926;
        float _2804 = cbLight._m0[_2783].y + _927;
        float _2805 = cbLight._m0[_2783].z + _928;
        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
        float _2810 = _2809 * _2803;
        float _2811 = _2809 * _2804;
        float _2812 = _2809 * _2805;
        float _2813 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2783].xyz));
        float _4725 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2817 = dot(vec3(_846, _847, _848), vec3(_2810, _2811, _2812));
        float _4736 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2821 = dot(vec3(cbLight._m0[_2783].xyz), vec3(_2810, _2811, _2812));
        float _4747 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2825 = _2802 * _2802;
        float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
        float _2836 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2843 = 1.0 - _2802;
        float _2853 = (0.5 / (((_2585 * ((_2816 * _2843) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2843) + _2802) * _2816))) * _2816;
        float _4758 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2855 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
        float _2856 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2777 = (((((_2836 * _2607) + _997) * cbLight._m0[_2787].x) * _2855) * _2856) + _2719;
        _2779 = (((((_2836 * _2609) + _999) * cbLight._m0[_2787].y) * _2855) * _2856) + _2720;
        _2781 = (((((_2836 * _2610) + _1000) * cbLight._m0[_2787].z) * _2855) * _2856) + _2721;
    }
    float _2887;
    float _2889;
    float _2891;
    if (_2494)
    {
        _2887 = _2777;
        _2889 = _2779;
        _2891 = _2781;
    }
    else
    {
        uint _2898 = _2309 + 3u;
        uint _2902 = _2309 + 11u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _849) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _926;
        float _2919 = cbLight._m0[_2898].y + _927;
        float _2920 = cbLight._m0[_2898].z + _928;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2898].xyz));
        float _4774 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2932 = dot(vec3(_846, _847, _848), vec3(_2925, _2926, _2927));
        float _4785 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4796 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2951 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2958 = 1.0 - _2917;
        float _2968 = (0.5 / (((_2585 * ((_2931 * _2958) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2958) + _2917) * _2931))) * _2931;
        float _4807 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2970 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2971 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2887 = (((((_2951 * _2607) + _997) * cbLight._m0[_2902].x) * _2970) * _2971) + _2777;
        _2889 = (((((_2951 * _2609) + _999) * cbLight._m0[_2902].y) * _2970) * _2971) + _2779;
        _2891 = (((((_2951 * _2610) + _1000) * cbLight._m0[_2902].z) * _2970) * _2971) + _2781;
    }
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_2307.y == 0u)
    {
        uvec4 _2992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2993 = _2992.x;
        uint _3004 = uint((float(_2992.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2993))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2993)));
        float _3014 = (log2(_2085 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3015 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        uint _3018 = uint(isnan(14.0) ? _3015 : (isnan(_3015) ? 14.0 : min(_3015, 14.0)));
        uvec4 _3023 = texelFetch(g_lightClusterGridBuffer, int(((_3018 << 2u) + (_3004 << 6u)) >> 2u));
        uint _3024 = _3023.x;
        uint _3025 = _2992.z;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((((1u << ((_3025 >> 4u) & 15u)) + 4294967295u) & _3024) == 0u) || ((_3025 & 240u) == 0u))
        {
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
        }
        else
        {
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            uint _3255 = 0u;
            uint _3264;
            bool _3265;
            for (;;)
            {
                _3264 = texelFetch(g_lightClassification, int((((_3018 << 5u) + (_3004 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                _3265 = _3264 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3265)
                {
                    frontier_phi_66_pred = _3254;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                else
                {
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    uint _3379;
                    _3373 = _3249;
                    _3374 = _3250;
                    _3375 = _3251;
                    _3376 = _3252;
                    _3377 = _3253;
                    _3378 = _3254;
                    _3379 = _3264;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    for (;;)
                    {
                        uint _3383 = uint(findLSB(_3379)) + (_3255 << 5u);
                        uint _3380 = (_3379 + 4294967295u) & _3379;
                        uint _3385 = _3383 * 48u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3405 = (_3383 * 48u) + 4u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3424 = (_3383 * 48u) + 8u;
                        vec3 _3435 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x));
                        float _3439 = _3399.x - _2083;
                        float _3440 = _3399.y - _2084;
                        float _3441 = _3399.z - _2085;
                        float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                        float _3445 = inversesqrt(_3442);
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3449 = dot(vec3(_953, _956, _959), vec3(_3446, _3447, _3448));
                        float _3454 = 1.0 - (_3442 * _3399.w);
                        float _4833 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3456 = sqrt(_3442) * _3418.w;
                        float _3459 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3449) + _3460;
                        float _3466 = _3456 * _3456;
                        float _3470 = ((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3455) / ((_3466 * 0.699999988079071044921875) + 1.0);
                        float _3474 = (-0.0) - _2083;
                        float _3475 = (-0.0) - _2084;
                        float _3476 = (-0.0) - _2085;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3490 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _1028;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3481 + _3446;
                        float _3502 = _3482 + _3447;
                        float _3503 = _3483 + _3448;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_953, _956, _959), vec3(_3481, _3482, _3483));
                        float _4849 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3515 = dot(vec3(_953, _956, _959), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4860 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3459 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3449) + _3524;
                        float _4871 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4882 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3522 * _3522) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125))) * _3455;
                        _3308 = (_3470 * _3418.x) + _3376;
                        _3309 = (_3470 * _3418.y) + _3377;
                        _3310 = (_3470 * _3418.z) + _3378;
                        _3305 = (_3550 * _3435.x) + _3373;
                        _3306 = (_3550 * _3435.y) + _3374;
                        _3307 = (_3550 * _3435.z) + _3375;
                        if (_3380 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3373 = _3305;
                            _3374 = _3306;
                            _3375 = _3307;
                            _3376 = _3308;
                            _3377 = _3309;
                            _3378 = _3310;
                            _3379 = _3380;
                        }
                    }
                    frontier_phi_66_pred = _3310;
                    frontier_phi_66_pred_1 = _3309;
                    frontier_phi_66_pred_2 = _3308;
                    frontier_phi_66_pred_3 = _3307;
                    frontier_phi_66_pred_4 = _3306;
                    frontier_phi_66_pred_5 = _3305;
                }
                _3115 = frontier_phi_66_pred;
                _3113 = frontier_phi_66_pred_1;
                _3111 = frontier_phi_66_pred_2;
                _3109 = frontier_phi_66_pred_3;
                _3107 = frontier_phi_66_pred_4;
                _3105 = frontier_phi_66_pred_5;
                uint _3256 = _3255 + 1u;
                if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3249 = _3105;
                    _3250 = _3107;
                    _3251 = _3109;
                    _3252 = _3111;
                    _3253 = _3113;
                    _3254 = _3115;
                    _3255 = _3256;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
        }
        uvec4 _3118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3119 = _3118.z;
        uint _3121 = (_3119 >> 8u) & 15u;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((4294967295u << _3121) & _3024) == 0u)
        {
            _3217 = _3104;
            _3219 = _3106;
            _3221 = _3108;
            _3223 = _3110;
            _3225 = _3112;
            _3227 = _3114;
        }
        else
        {
            float _3242 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
            float _3243 = _3242 * _2083;
            float _3244 = _3242 * _2084;
            float _3245 = _3242 * _2085;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3121 < ((_3119 >> 12u) & 15u))
            {
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3356 = _3104;
                float _3357 = _3106;
                float _3358 = _3108;
                float _3359 = _3110;
                float _3360 = _3112;
                float _3361 = _3114;
                uint _3362 = _3121;
                uint _3371;
                bool _3372;
                for (;;)
                {
                    _3371 = texelFetch(g_lightClassification, int((((_3018 << 5u) + (_3004 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                    _3372 = _3371 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3372)
                    {
                        frontier_phi_72_pred = _3361;
                        frontier_phi_72_pred_1 = _3360;
                        frontier_phi_72_pred_2 = _3359;
                        frontier_phi_72_pred_3 = _3358;
                        frontier_phi_72_pred_4 = _3357;
                        frontier_phi_72_pred_5 = _3356;
                    }
                    else
                    {
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3568 = _3356;
                        float _3569 = _3357;
                        float _3570 = _3358;
                        float _3571 = _3359;
                        float _3572 = _3360;
                        float _3573 = _3361;
                        uint _3574 = _3371;
                        uint _3575;
                        vec4 _3600;
                        float _3601;
                        vec4 _3616;
                        vec3 _3628;
                        vec4 _3643;
                        vec4 _3658;
                        float _3704;
                        bool _3705;
                        for (;;)
                        {
                            uint _3585 = ((_3362 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3574));
                            _3575 = (_3574 + 4294967295u) & _3574;
                            uint _3587 = _3585 * 40u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3601 = _3600.w;
                            uint _3603 = (_3585 * 40u) + 4u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3585 * 40u) + 8u;
                            _3628 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x));
                            uint _3630 = (_3585 * 40u) + 16u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3585 * 40u) + 20u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3585 * 40u) + 24u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3679 = (_3585 * 40u) + 28u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            _3704 = fma(_2085, _3692.z, fma(_2084, _3692.y, _3692.x * _2083)) + _3692.w;
                            _3705 = !((fma(_2085, _3673.z, fma(_2084, _3673.y, _3673.x * _2083)) + _3673.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3705)
                            {
                                float _3732 = _3600.x - _2083;
                                float _3733 = _3600.y - _2084;
                                float _3734 = _3600.z - _2085;
                                float _3735 = dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734));
                                float _3738 = inversesqrt(_3735);
                                float _3739 = _3738 * _3732;
                                float _3740 = _3738 * _3733;
                                float _3741 = _3738 * _3734;
                                float _3745 = 1.0 - (_3735 / (_3601 * _3601));
                                float _4893 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3750 = sqrt(_3735) * _3616.w;
                                float _3752 = 1.39999997615814208984375 / (_3750 + 1.39999997615814208984375);
                                float _3753 = _3752 * _3752;
                                float _3756 = ((1.0 - _3753) * dot(vec3(_3739, _3740, _3741), vec3(_953, _956, _959))) + _3753;
                                float _3759 = _3750 * _3750;
                                float _3763 = (fma(_2085, _3643.z, fma(_2084, _3643.y, _3643.x * _2083)) + _3643.w) / _3704;
                                float _3764 = (fma(_2085, _3658.z, fma(_2084, _3658.y, _3658.x * _2083)) + _3658.w) / _3704;
                                float _3768 = 1.0 - dot(vec2(_3763, _3764), vec2(_3763, _3764));
                                float _4909 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3770 = _3769 * (((isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0))) * _3746) / ((_3759 * 0.699999988079071044921875) + 1.0));
                                float _3782 = exp2(log2(1.0 / ((_3759 * 3.5) + 5.0)) * 0.25);
                                float _3783 = 1.0 - _1028;
                                float _3790 = sqrt(1.0 - ((1.0 - (_3783 * _3783)) * (1.0 - (_3782 * _3782))));
                                float _3791 = _3790 * _3790;
                                float _3792 = _3791 * _3791;
                                float _3793 = _3739 - _3243;
                                float _3794 = _3740 - _3244;
                                float _3795 = _3741 - _3245;
                                float _3799 = inversesqrt(dot(vec3(_3793, _3794, _3795), vec3(_3793, _3794, _3795)));
                                float _3803 = dot(vec3(_953, _956, _959), vec3((-0.0) - _3243, (-0.0) - _3244, (-0.0) - _3245));
                                float _4920 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3806 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3807 = dot(vec3(_953, _956, _959), vec3(_3799 * _3793, _3799 * _3794, _3799 * _3795));
                                float _4931 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3814 = ((_3810 * _3810) * (_3792 + (-1.0))) + 1.0;
                                float _3815 = _3752 * _3791;
                                float _3816 = _3815 * _3815;
                                float _3822 = ((1.0 - _3816) * dot(vec3(_953, _956, _959), vec3(_3739, _3740, _3741))) + _3816;
                                float _4942 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3824 = 1.0 - _3791;
                                float _3834 = (0.5 / (((_3823 * ((_3806 * _3824) + _3791)) + 9.9999999392252902907785028219223e-09) + (((_3823 * _3824) + _3791) * _3806))) * _3823;
                                float _4953 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3844 = (_3769 * _3746) * (((_3792 * 3.1415927410125732421875) * (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) / ((_3814 * _3814) * ((_3759 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3770 * _3616.y;
                                frontier_phi_78_pred_1 = _3770 * _3616.x;
                                frontier_phi_78_pred_2 = _3844 * _3628.z;
                                frontier_phi_78_pred_3 = _3844 * _3628.y;
                                frontier_phi_78_pred_4 = _3844 * _3628.x;
                                frontier_phi_78_pred_5 = _3770 * _3616.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3852 = frontier_phi_78_pred;
                            _3851 = frontier_phi_78_pred_1;
                            _3850 = frontier_phi_78_pred_2;
                            _3849 = frontier_phi_78_pred_3;
                            _3848 = frontier_phi_78_pred_4;
                            _3853 = frontier_phi_78_pred_5;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            if (_3575 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3575;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3560;
                        frontier_phi_72_pred_1 = _3559;
                        frontier_phi_72_pred_2 = _3558;
                        frontier_phi_72_pred_3 = _3557;
                        frontier_phi_72_pred_4 = _3556;
                        frontier_phi_72_pred_5 = _3555;
                    }
                    _3228 = frontier_phi_72_pred;
                    _3226 = frontier_phi_72_pred_1;
                    _3224 = frontier_phi_72_pred_2;
                    _3222 = frontier_phi_72_pred_3;
                    _3220 = frontier_phi_72_pred_4;
                    _3218 = frontier_phi_72_pred_5;
                    uint _3363 = _3362 + 1u;
                    if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3356 = _3218;
                        _3357 = _3220;
                        _3358 = _3222;
                        _3359 = _3224;
                        _3360 = _3226;
                        _3361 = _3228;
                        _3362 = _3363;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3228;
                frontier_phi_60_61_ladder_1 = _3226;
                frontier_phi_60_61_ladder_2 = _3222;
                frontier_phi_60_61_ladder_3 = _3220;
                frontier_phi_60_61_ladder_4 = _3218;
                frontier_phi_60_61_ladder_5 = _3224;
            }
            else
            {
                frontier_phi_60_61_ladder = _3114;
                frontier_phi_60_61_ladder_1 = _3112;
                frontier_phi_60_61_ladder_2 = _3108;
                frontier_phi_60_61_ladder_3 = _3106;
                frontier_phi_60_61_ladder_4 = _3104;
                frontier_phi_60_61_ladder_5 = _3110;
            }
            _3217 = frontier_phi_60_61_ladder_4;
            _3219 = frontier_phi_60_61_ladder_3;
            _3221 = frontier_phi_60_61_ladder_2;
            _3223 = frontier_phi_60_61_ladder_5;
            _3225 = frontier_phi_60_61_ladder_1;
            _3227 = frontier_phi_60_61_ladder;
        }
        float _3232 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _3037 = (_3232 * _3223) + _2549;
        _3039 = (_3232 * _3225) + _2551;
        _3041 = (_3232 * _3227) + _2553;
        _3043 = ((_3217 * _997) * _3232) + _2887;
        _3045 = ((_3219 * _999) * _3232) + _2889;
        _3047 = ((_3221 * _1000) * _3232) + _2891;
    }
    else
    {
        _3037 = _2549;
        _3039 = _2551;
        _3041 = _2553;
        _3043 = _2887;
        _3045 = _2889;
        _3047 = _2891;
    }
    float _4969 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4980 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4991 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    uint _3067 = _972 + 6u;
    float _3075 = _934 / cbSceneParam._m0[86u].x;
    float _3076 = _935 / cbSceneParam._m0[86u].y;
    vec4 _3090 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3075, _3076, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3092 = _3090.x;
    float _3093 = _3090.y;
    float _3094 = _3090.z;
    float _3095 = _3090.w;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _3129 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _3130 = _3129 / _869;
        float _3141 = _3130 * _919;
        float _3142 = _920 * _3130;
        float _3143 = (-0.0) - _3142;
        float _3145 = _3130 * _921;
        float _3147 = (cbSceneParam._m0[77u].w * _3143) / _3129;
        float _3148 = _3147 + cbSceneParam._m0[79u].w;
        float _3149 = cbSceneParam._m0[79u].w - _3142;
        float _3155 = sqrt(((_3141 * _3141) + (_3142 * _3142)) + (_3145 * _3145));
        float _3158 = (1.0 - (cbSceneParam._m0[77u].w / _3129)) * _3155;
        float _3163 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3165 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3318;
        if (abs((_3143 - _3147) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3318 = ((((_3148 > 0.0) ? exp2(_3163 * _3148) : (2.0 - exp2(_3165 * _3148))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3158;
        }
        else
        {
            float _3278 = 1.0 / cbSceneParam._m0[80u].x;
            float _3279 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : max(_3148, _3149));
            float _3280 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : min(_3148, _3149));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            float _3290 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : min(_3280, 0.0));
            _3318 = ((abs(_3155 / _3143) * cbSceneParam._m0[80u].y) * ((((_3289 - _3290) * 2.0) - ((exp2(_3163 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0)))) - exp2(_3163 * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))))) * _3278)) - ((exp2(_3165 * _3289) - exp2(_3165 * _3290)) * _3278))) + (_3158 * cbSceneParam._m0[80u].z);
        }
        vec4 _3320 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3075, _3076, 1.0), 0.0);
        float _3329 = exp2((_3318 * (-1.44269502162933349609375)) * (1.0 - _3320.w));
        float _3330 = log2(_3329);
        float _3346 = log2(_3095);
        _3167 = (exp2(_3346 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].x)) * _3320.x) / cbSceneParam._m0[78u].x)) + _3092;
        _3169 = (exp2(_3346 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].y)) * _3320.y) / cbSceneParam._m0[78u].y)) + _3093;
        _3171 = (exp2(_3346 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].z)) * _3320.z) / cbSceneParam._m0[78u].z)) + _3094;
        _3173 = _3329 * _3095;
    }
    else
    {
        _3167 = _3092;
        _3169 = _3093;
        _3171 = _3094;
        _3173 = _3095;
    }
    float _3185 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3186 = _3185 == 3.0;
    float _3187 = log2(_3173);
    float _3194 = exp2(_3187 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_3037 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1012))) + ((_3043 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3195 = exp2(_3187 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_3039 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1012))) + ((_3045 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3196 = exp2(_3187 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_3041 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1012))) + ((_3047 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3205 = (_3185 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3205 * (_3186 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3167)));
    SV_Target.y = _3205 * (_3186 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3169)));
    SV_Target.z = _3205 * (_3186 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3171)));
    SV_Target.w = cbInstanceData._m0[_3067].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3067].w;
}


