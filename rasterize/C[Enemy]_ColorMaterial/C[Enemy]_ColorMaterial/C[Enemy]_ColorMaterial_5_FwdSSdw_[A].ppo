#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1607;
float _4008;
float _4009;
float _4010;
float _4011;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _283 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _317 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _321 = _317.z;
    float _334 = exp2(log2((1.0 - _321) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    vec4 _352 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _364 = exp2(log2(_352.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _366 = isnan(1.0) ? _365 : (isnan(_365) ? 1.0 : min(_365, 1.0));
    float _375 = exp2(log2(cbMtdParam._m0[23u].y * _321) * cbMtdParam._m0[22u].y);
    float _376 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
    vec4 _389 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _392 = _389.y;
    float _395 = (_389.x + (-0.02500000037252902984619140625)) * 8.0;
    float _399 = roundEven(5.0 - _395);
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(4.0) ? _400 : (isnan(_400) ? 4.0 : min(_400, 4.0));
    float _414 = floor(_401);
    vec4 _417 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _414));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[17u].x;
    _211[0u] = cbMtdParam._m0[17u].y;
    _212[0u] = cbMtdParam._m0[17u].z;
    _210[1u] = cbMtdParam._m0[15u].x;
    _211[1u] = cbMtdParam._m0[15u].y;
    _212[1u] = cbMtdParam._m0[15u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[13u].x;
    _211[3u] = cbMtdParam._m0[13u].y;
    _212[3u] = cbMtdParam._m0[13u].z;
    _210[4u] = cbMtdParam._m0[12u].x;
    _211[4u] = cbMtdParam._m0[12u].y;
    _212[4u] = cbMtdParam._m0[12u].z;
    _210[5u] = cbMtdParam._m0[18u].x;
    _211[5u] = cbMtdParam._m0[18u].y;
    _212[5u] = cbMtdParam._m0[18u].z;
    float _481 = roundEven(_395);
    float _482 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    uint _484 = uint(int(isnan(5.0) ? _482 : (isnan(_482) ? 5.0 : min(_482, 5.0))));
    vec4 _514 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _525 = cbMtdParam._m0[9u].x * _514.x;
    float _526 = cbMtdParam._m0[9u].y * _514.y;
    float _527 = cbMtdParam._m0[9u].z * _514.z;
    float _534 = ((((((_210[_484] - cbMtdParam._m0[10u].x) * _392) + cbMtdParam._m0[10u].x) * _417.x) - _525) * _377) + _525;
    float _535 = ((((((_211[_484] - cbMtdParam._m0[10u].y) * _392) + cbMtdParam._m0[10u].y) * _417.y) - _526) * _377) + _526;
    float _536 = ((((((_212[_484] - cbMtdParam._m0[10u].z) * _392) + cbMtdParam._m0[10u].z) * _417.z) - _527) * _377) + _527;
    float _542 = exp2(log2(_317.w) * cbMtdParam._m0[23u].w);
    vec4 _555 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _574 = (((cbMtdParam._m0[16u].x * _555.x) - _534) * _542) + _534;
    float _575 = (((cbMtdParam._m0[16u].y * _555.y) - _535) * _542) + _535;
    float _576 = (((cbMtdParam._m0[16u].z * _555.z) - _536) * _542) + _536;
    vec4 _589 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _609 = (((cbMtdParam._m0[19u].x * _589.x) - _574) * _366) + _574;
    float _610 = (((cbMtdParam._m0[19u].y * _589.y) - _575) * _366) + _575;
    float _611 = (((cbMtdParam._m0[19u].z * _589.z) - _576) * _366) + _576;
    vec4 _623 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _648 = (_352.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _623.x) - _609) * _336) + _609);
    float _650 = (_352.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _623.y) - _610) * _336) + _610);
    float _652 = (_352.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _623.z) - _611) * _336) + _611);
    vec4 _664 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _682 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _684 = _682 * (cbMtdParam._m0[24u].z + 1.0);
    float _4070 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _692 = (_685 * ((cbMtdParam._m0[11u].x * _664.x) - _648)) + _648;
    float _693 = (((cbMtdParam._m0[11u].y * _664.y) - _650) * _685) + _650;
    float _694 = (((cbMtdParam._m0[11u].z * _664.z) - _652) * _685) + _652;
    float _698 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _706 = (_698 - (((_283.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _698))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4081 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _714 = ((cbMtdParam._m0[21u].x - _692) * _707) + _692;
    float _715 = ((cbMtdParam._m0[21u].y - _693) * _707) + _693;
    float _716 = ((cbMtdParam._m0[21u].z - _694) * _707) + _694;
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[28u].w;
    _206[0u] = cbMtdParam._m0[29u].x;
    _205[1u] = cbMtdParam._m0[30u].w;
    _206[1u] = cbMtdParam._m0[31u].x;
    _205[2u] = cbMtdParam._m0[30u].y;
    _206[2u] = cbMtdParam._m0[30u].z;
    _205[3u] = cbMtdParam._m0[29u].w;
    _206[3u] = cbMtdParam._m0[30u].x;
    _205[4u] = cbMtdParam._m0[29u].y;
    _206[4u] = cbMtdParam._m0[29u].z;
    float _756 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    uint _758 = uint(int(isnan(4.0) ? _756 : (isnan(_756) ? 4.0 : min(_756, 4.0))));
    float _765 = ((_206[_758] - cbMtdParam._m0[22u].z) * _377) + cbMtdParam._m0[22u].z;
    float _768 = ((cbMtdParam._m0[22u].w - _765) * _542) + _765;
    float _771 = ((cbMtdParam._m0[25u].x - _768) * _366) + _768;
    float _774 = ((cbMtdParam._m0[26u].x - _771) * _336) + _771;
    float _779 = (cbMtdParam._m0[24u].y + 1.0) * _682;
    float _4102 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _780 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _782 = _774 - (_774 * _780);
    float _784 = _782 - (_782 * _698);
    vec4 _797 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _414));
    vec4 _814 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _816 = _814.x;
    float _817 = _814.y;
    float _822 = cbMtdParam._m0[22u].x + _814.z;
    float _825 = (((_797.z + _205[_758]) - _822) * _377) + _822;
    vec4 _837 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _848 = (((_837.z - _825) + cbMtdParam._m0[28u].y) * _542) + _825;
    float _854 = ((((_321 * 2.0) * _848) - _848) * cbMtdParam._m0[24u].w) + _848;
    vec4 _866 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _877 = (((cbMtdParam._m0[23u].z + _866.z) - _854) * _366) + _854;
    vec4 _890 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _901 = (((_890.z - _877) + cbMtdParam._m0[26u].y) * _336) + _877;
    vec4 _913 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _925 = ((_913.z - _901) * _780) + _901;
    vec4 _940 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _954 = ((cbMtdParam._m0[27u].y * _698) * ((_940.z * cbMtdParam._m0[27u].x) - _925)) + _925;
    float _969 = ((_797.x - _816) * _377) + _816;
    float _970 = ((_797.y - _817) * _377) + _817;
    float _975 = ((_837.x - _969) * _542) + _969;
    float _976 = ((_837.y - _970) * _542) + _970;
    float _981 = ((_866.x - _975) * _366) + _975;
    float _982 = ((_866.y - _976) * _366) + _976;
    float _991 = ((((_890.x - _981) * _336) + _981) * 2.0) + (-1.0);
    float _992 = ((((_890.y - _982) * _336) + _982) * 2.0) + (-1.0);
    float _993 = dot(vec2(_991, _992), vec2(_991, _992));
    float _4113 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _998 = sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))));
    float _1014 = (((cbMtdParam._m0[25u].y * ((_317.x * 2.0) + (-1.0))) + _991) + (((((_913.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _780)) + ((((_940.x * 2.0) + (-1.0)) * _698) * cbMtdParam._m0[26u].w);
    float _1015 = (((cbMtdParam._m0[25u].y * ((_317.y * 2.0) + (-1.0))) + _992) + (((((_913.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _780)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_940.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1018 = fma(_998, _247 * NORMAL.x, fma(_1015, _254 * TANGENT.x, (_240 * _232) * _1014));
    float _1021 = fma(_998, _247 * NORMAL.y, fma(_1015, _254 * TANGENT.y, (_240 * _233) * _1014));
    float _1024 = fma(_998, _247 * NORMAL.z, fma(_1015, _254 * TANGENT.z, (_240 * _234) * _1014));
    float _1028 = inversesqrt(dot(vec3(_1018, _1021, _1024), vec3(_1018, _1021, _1024)));
    float _1029 = _1028 * _1018;
    float _1030 = _1028 * _1021;
    float _1031 = _1028 * _1024;
    float _4124 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _1032 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4146 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4157 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4168 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _1036 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _1052 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1102 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1092);
    float _1103 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1092);
    float _1104 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1092);
    float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
    float _1109 = _1102 * _1108;
    float _1110 = _1103 * _1108;
    float _1111 = _1104 * _1108;
    vec4 _1116 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1118 = _1116.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1288 = sqrt(((_1102 * _1102) + (_1103 * _1103)) + (_1104 * _1104));
        float _1294 = (cbMatDynParam._m0[5u].x * _1288) + cbMatDynParam._m0[5u].y;
        float _4179 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1299 = (cbMatDynParam._m0[5u].z * _1288) + cbMatDynParam._m0[5u].w;
        float _4190 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) - _1295)) + _1295) < ((_1118 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1129 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1130 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1148 = fma(_1031, cbSceneParam._m0[5u].z, fma(_1030, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1029));
    float _1151 = fma(_1031, cbSceneParam._m0[6u].z, fma(_1030, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1029));
    float _1154 = fma(_1031, cbSceneParam._m0[7u].z, fma(_1030, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1029));
    uint _1167 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1168 = _1167 + 9u;
    uint _1169 = _1168 + uint(cbMatDynParam._m0[0u].w);
    float _1175 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_1169].x;
    float _1176 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1169].y;
    float _1177 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1169].z;
    float _4201 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _1181 = 1.0 - _1036;
    float _1182 = _1178 * _1181;
    float _1183 = _1179 * _1181;
    float _1184 = _1180 * _1181;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1036;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1036;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1036;
    float _1192 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    vec4 _1204 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1129, cbSceneParam._m0[86u].y * _1130));
    float _1207 = _1204.x * TEXCOORD_3.w;
    float _1208 = dot(vec3(_1029, _1030, _1031), vec3(_1109, _1110, _1111));
    float _1211 = _1208 * 2.0;
    float _1215 = (_1211 * _1029) - _1109;
    float _1216 = (_1211 * _1030) - _1110;
    float _1217 = (_1211 * _1031) - _1111;
    float _1221 = abs(dot(vec3(_1109, _1110, _1111), vec3(_1029, _1030, _1031)));
    float _4234 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1223 = sqrt(_1032);
    float _1234 = exp2((_1223 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1223 * 3.0));
    float _1240 = (1.0 - _1234) * ((_1223 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1241 = _1234 * _1223;
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1606;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1331 = fma(_1277, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269));
        float _1335 = fma(_1277, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269));
        float _1339 = fma(_1277, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269));
        float _1364 = _1269 + _1029;
        float _1365 = _1273 + _1030;
        float _1366 = _1277 + _1031;
        float _1376 = fma(_1366, cbModelParam._m0[26u].z, fma(_1365, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1364)) - _1331;
        float _1377 = fma(_1366, cbModelParam._m0[27u].z, fma(_1365, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1364)) - _1335;
        float _1378 = fma(_1366, cbModelParam._m0[28u].z, fma(_1365, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1364)) - _1339;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1331 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1335 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[34u].z) + ((((((_1339 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1434 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1400.x + (-0.5));
        float _1436 = _1434 * (_1400.y + (-0.5));
        float _1437 = _1434 * (_1400.z + (-0.5));
        float _1444 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1407.x + (-0.5));
        float _1446 = _1444 * (_1407.y + (-0.5));
        float _1447 = _1444 * (_1407.z + (-0.5));
        float _1454 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1414.x + (-0.5));
        float _1456 = _1454 * (_1414.y + (-0.5));
        float _1457 = _1454 * (_1414.z + (-0.5));
        float _1464 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1421.x + (-0.5));
        float _1466 = _1464 * (_1421.y + (-0.5));
        float _1467 = _1464 * (_1421.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1488 = (dot(vec3(_1029, _1030, _1031), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1498 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4282 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1500 + 1.0))) + _1505) * _1468;
        float _1515 = _1436 * 0.5;
        float _1516 = _1446 * 0.5;
        float _1517 = _1456 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_1029, _1030, _1031), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4315 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1542 + 1.0))) + _1547) * _1469;
        float _1557 = _1437 * 0.5;
        float _1558 = _1447 * 0.5;
        float _1559 = _1457 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_1029, _1030, _1031), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4348 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1584 + 1.0))) + _1589) * _1470;
        _1606 = _1437;
        _1608 = _1436;
        _1609 = _1435;
        _1610 = _1447;
        _1611 = _1446;
        _1612 = _1445;
        _1613 = _1457;
        _1614 = _1456;
        _1615 = _1455;
        _1616 = _1470;
        _1617 = _1469;
        _1618 = _1468;
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1607;
        _1608 = _1607;
        _1609 = _1607;
        _1610 = _1607;
        _1611 = _1607;
        _1612 = _1607;
        _1613 = _1607;
        _1614 = _1607;
        _1615 = _1607;
        _1616 = _1607;
        _1617 = _1607;
        _1618 = _1607;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1647 = fma(_1277, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269));
        float _1651 = fma(_1277, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269));
        float _1655 = fma(_1277, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269));
        float _1678 = _1269 + _1029;
        float _1679 = _1273 + _1030;
        float _1680 = _1277 + _1031;
        float _1690 = fma(_1680, cbModelParam._m0[30u].z, fma(_1679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1678)) - _1647;
        float _1691 = fma(_1680, cbModelParam._m0[31u].z, fma(_1679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1678)) - _1651;
        float _1692 = fma(_1680, cbModelParam._m0[32u].z, fma(_1679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1678)) - _1655;
        float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
        float _1709 = ((_1696 * _1690) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1647 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1710 = ((_1696 * _1691) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1651 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1711 = ((_1696 * _1692) / cbModelParam._m0[35u].z) + ((((((_1655 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        float _1746 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1713.x + (-0.5));
        float _1748 = _1746 * (_1713.y + (-0.5));
        float _1749 = _1746 * (_1713.z + (-0.5));
        float _1756 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1720.x + (-0.5));
        float _1758 = _1756 * (_1720.y + (-0.5));
        float _1759 = _1756 * (_1720.z + (-0.5));
        float _1766 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1727.x + (-0.5));
        float _1768 = _1766 * (_1727.y + (-0.5));
        float _1769 = _1766 * (_1727.z + (-0.5));
        float _1776 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1734.x + (-0.5));
        float _1778 = _1776 * (_1734.y + (-0.5));
        float _1779 = _1776 * (_1734.z + (-0.5));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = _1747 * 0.5;
        float _1784 = _1757 * 0.5;
        float _1785 = _1767 * 0.5;
        float _1786 = dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785));
        float _1791 = (_1786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1786);
        float _1799 = (dot(vec3(_1029, _1030, _1031), vec3(_1791 * _1783, _1791 * _1784, _1791 * _1785)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1808 = sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1810 = _1809 * 2.0;
        float _1814 = (1.0 - _1809) / (_1809 + 1.0);
        float _4411 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1824 = ((((1.0 - _1815) * (_1810 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1810 + 1.0))) + _1815) * _1780;
        float _1825 = _1748 * 0.5;
        float _1826 = _1758 * 0.5;
        float _1827 = _1768 * 0.5;
        float _1828 = dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827));
        float _1833 = (_1828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1828);
        float _1841 = (dot(vec3(_1029, _1030, _1031), vec3(_1833 * _1825, _1833 * _1826, _1833 * _1827)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827)) / (_1781 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1852 = _1851 * 2.0;
        float _1856 = (1.0 - _1851) / (_1851 + 1.0);
        float _4444 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1866 = ((((1.0 - _1857) * (_1852 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1852 + 1.0))) + _1857) * _1781;
        float _1867 = _1749 * 0.5;
        float _1868 = _1759 * 0.5;
        float _1869 = _1769 * 0.5;
        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
        float _1875 = (_1870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1870);
        float _1883 = (dot(vec3(_1029, _1030, _1031), vec3(_1875 * _1867, _1875 * _1868, _1875 * _1869)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1892 = sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1894 = _1893 * 2.0;
        float _1898 = (1.0 - _1893) / (_1893 + 1.0);
        float _4477 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1908 = ((((1.0 - _1899) * (_1894 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1894 + 1.0))) + _1899) * _1782;
        _1916 = _1749;
        _1917 = _1748;
        _1918 = _1747;
        _1919 = _1759;
        _1920 = _1758;
        _1921 = _1757;
        _1922 = _1769;
        _1923 = _1768;
        _1924 = _1767;
        _1925 = _1782;
        _1926 = _1781;
        _1927 = _1780;
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)));
        _1929 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)));
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)));
    }
    else
    {
        _1916 = _1607;
        _1917 = _1607;
        _1918 = _1607;
        _1919 = _1607;
        _1920 = _1607;
        _1921 = _1607;
        _1922 = _1607;
        _1923 = _1607;
        _1924 = _1607;
        _1925 = _1607;
        _1926 = _1607;
        _1927 = _1607;
        _1928 = 0.0;
        _1929 = 0.0;
        _1930 = 0.0;
    }
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1619)) + _1619;
    float _1941 = (cbModelParam._m0[1u].x * (_1929 - _1620)) + _1620;
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1621)) + _1621;
    float _1963 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1940));
    float _1984 = _1215 * 0.5;
    float _1985 = _1216 * 0.5;
    float _1986 = _1217 * 0.5;
    float _1987 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _1990 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1917, _1920, _1923, _1926));
    float _1993 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _2027;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2000 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1606, _1610, _1613, _1616));
        float _2004 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1608, _1611, _1614, _1617));
        float _2008 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1609, _1612, _1615, _1618));
        float _2015 = dot(vec4(cbModelParam._m0[39u]), vec4(_1984, _1985, _1986, 1.0));
        _2027 = dot(vec3(isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2015) ? 0.0 : (isnan(0.0) ? _2015 : max(0.0, _2015))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2027 = 1.0;
    }
    float _2038;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2029 = dot(vec4(cbModelParam._m0[40u]), vec4(_1984, _1985, _1986, 1.0));
        _2038 = dot(vec3(isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2029) ? 0.0 : (isnan(0.0) ? _2029 : max(0.0, _2029))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2038 = 1.0;
    }
    float _2042 = (_2038 * cbModelParam._m0[1u].x) + (_2027 * (1.0 - cbModelParam._m0[1u].x));
    float _2052 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1032);
    float _2053 = isnan(_2052) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2052 : min(cbModelParam._m0[25u].z, _2052));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2100 = fma(_1277, cbModelParam._m0[13u].z, fma(_1273, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1269)) + cbModelParam._m0[13u].w;
        float _2104 = fma(_1277, cbModelParam._m0[14u].z, fma(_1273, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1269)) + cbModelParam._m0[14u].w;
        float _2108 = fma(_1277, cbModelParam._m0[15u].z, fma(_1273, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1269)) + cbModelParam._m0[15u].w;
        float _2111 = fma(_1217, cbModelParam._m0[13u].z, fma(_1216, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215));
        float _2114 = fma(_1217, cbModelParam._m0[14u].z, fma(_1216, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215));
        float _2117 = fma(_1217, cbModelParam._m0[15u].z, fma(_1216, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215));
        float _2145;
        if (_2111 > 0.0)
        {
            _2145 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2145 = frontier_phi_17_15_ladder;
        }
        float _2368;
        if (_2114 > 0.0)
        {
            _2368 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2368 = frontier_phi_26_22_ladder;
        }
        float _2625;
        if (_2117 > 0.0)
        {
            _2625 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2625 = frontier_phi_38_33_ladder;
        }
        float _2627 = isnan(_2368) ? _2145 : (isnan(_2145) ? _2368 : min(_2145, _2368));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _2111) + _2100;
        float _2633 = (_2628 * _2114) + _2104;
        float _2634 = (_2628 * _2117) + _2108;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2635;
        float _2639 = _2635 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 > _2639) || ((_2633 < _2637) || ((_2632 < _2637) || (_2632 > _2639))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2634, cbModelParam._m0[9u].z, fma(_2633, cbModelParam._m0[9u].y, _2632 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2634, cbModelParam._m0[10u].z, fma(_2633, cbModelParam._m0[10u].y, _2632 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2634, cbModelParam._m0[11u].z, fma(_2633, cbModelParam._m0[11u].y, _2632 * cbModelParam._m0[11u].x))), _2053);
            frontier_phi_16_38_ladder = _2762.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2762.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2762.x * cbModelParam._m0[1u].y;
        }
        _2133 = frontier_phi_16_38_ladder_2;
        _2135 = frontier_phi_16_38_ladder_1;
        _2137 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1215, _1216, _1217), _2053);
        _2133 = _2121.x * cbModelParam._m0[1u].y;
        _2135 = _2121.y * cbModelParam._m0[1u].y;
        _2137 = _2121.z * cbModelParam._m0[1u].y;
    }
    float _2141 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1032);
    float _2142 = isnan(_2141) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2141 : min(cbModelParam._m0[25u].w, _2141));
    float _2231;
    float _2233;
    float _2235;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2195 = fma(_1277, cbModelParam._m0[21u].z, fma(_1273, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1269)) + cbModelParam._m0[21u].w;
        float _2199 = fma(_1277, cbModelParam._m0[22u].z, fma(_1273, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1269)) + cbModelParam._m0[22u].w;
        float _2203 = fma(_1277, cbModelParam._m0[23u].z, fma(_1273, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1269)) + cbModelParam._m0[23u].w;
        float _2206 = fma(_1217, cbModelParam._m0[21u].z, fma(_1216, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215));
        float _2209 = fma(_1217, cbModelParam._m0[22u].z, fma(_1216, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215));
        float _2212 = fma(_1217, cbModelParam._m0[23u].z, fma(_1216, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215));
        float _2373;
        if (_2206 > 0.0)
        {
            _2373 = abs((1.0 - _2195) / _2206);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2195 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2373 = frontier_phi_28_24_ladder;
        }
        float _2652;
        if (_2209 > 0.0)
        {
            _2652 = abs((1.0 - _2199) / _2209);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2199 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2652 = frontier_phi_40_35_ladder;
        }
        float _2865;
        if (_2212 > 0.0)
        {
            _2865 = abs((1.0 - _2203) / _2212);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2203 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2865 = frontier_phi_49_46_ladder;
        }
        float _2867 = isnan(_2652) ? _2373 : (isnan(_2373) ? _2652 : min(_2373, _2652));
        float _2868 = isnan(_2865) ? _2867 : (isnan(_2867) ? _2865 : min(_2867, _2865));
        float _2872 = (_2868 * _2206) + _2195;
        float _2873 = (_2868 * _2209) + _2199;
        float _2874 = (_2868 * _2212) + _2203;
        float _2875 = _2868 * 9.9999997473787516355514526367188e-05;
        float _2876 = (-1.0) - _2875;
        float _2878 = _2875 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2874 > _2878) || ((_2874 < _2876) || ((_2873 > _2878) || ((_2873 < _2876) || ((_2872 < _2876) || (_2872 > _2878))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2874, cbModelParam._m0[17u].z, fma(_2873, cbModelParam._m0[17u].y, _2872 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2874, cbModelParam._m0[18u].z, fma(_2873, cbModelParam._m0[18u].y, _2872 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2874, cbModelParam._m0[19u].z, fma(_2873, cbModelParam._m0[19u].y, _2872 * cbModelParam._m0[19u].x))), _2142);
            frontier_phi_25_49_ladder = _3073.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3073.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3073.x * cbModelParam._m0[1u].z;
        }
        _2231 = frontier_phi_25_49_ladder_2;
        _2233 = frontier_phi_25_49_ladder_1;
        _2235 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1215, _1216, _1217), _2142);
        _2231 = _2215.x * cbModelParam._m0[1u].z;
        _2233 = _2215.y * cbModelParam._m0[1u].z;
        _2235 = _2215.z * cbModelParam._m0[1u].z;
    }
    float _2248 = (((_1240 * _1192) + _1241) * _1207) * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2250 = (((_1240 * _1194) + _1241) * _1207) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2252 = (((_1240 * _1195) + _1241) * _1207) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2255 = fma(_2252, cbSceneParam._m0[89u].z, fma(_2250, cbSceneParam._m0[89u].y, _2248 * cbSceneParam._m0[89u].x));
    float _2258 = fma(_2252, cbSceneParam._m0[90u].z, fma(_2250, cbSceneParam._m0[90u].y, _2248 * cbSceneParam._m0[90u].x));
    float _2261 = fma(_2252, cbSceneParam._m0[91u].z, fma(_2250, cbSceneParam._m0[91u].y, _2248 * cbSceneParam._m0[91u].x));
    vec4 _2269 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1129, _1130));
    float _2271 = _2269.w;
    float _2283 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2271);
    float _2284 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2271);
    float _2285 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2271);
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_1167 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _1207 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2327 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2331 = _2291 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_1029, _1030, _1031));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_1029, _1030, _1031));
    float _4613 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4624 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2308].x * _2314) * _2352) + (((cbLight._m0[_2318].x * _2283) * _2327) * _2350);
    float _2360 = ((_2314 * cbLight._m0[_2308].y) * _2352) + (((cbLight._m0[_2318].y * _2284) * _2327) * _2350);
    float _2361 = ((_2314 * cbLight._m0[_2308].z) * _2352) + (((cbLight._m0[_2318].z * _2285) * _2327) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2367)
    {
        _2378 = _2359;
        _2380 = _2360;
        _2382 = _2361;
    }
    else
    {
        uint _2386 = _2291 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_1029, _1030, _1031)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4635 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2405 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2359;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2360;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2361;
    }
    bool _2385 = _2365.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2385)
    {
        _2423 = _2378;
        _2425 = _2380;
        _2427 = _2382;
    }
    else
    {
        uint _2596 = _2291 + 7u;
        float _2612 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_1029, _1030, _1031)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4651 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2615 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2423 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2378;
        _2425 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2380;
        _2427 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2382;
    }
    uint _2430 = _2291 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _1032) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2291].x + _1109;
    float _2446 = cbLight._m0[_2291].y + _1110;
    float _2447 = cbLight._m0[_2291].z + _1111;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2291].xyz));
    float _4667 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _4678 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _2459 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2460 = dot(vec3(_1029, _1030, _1031), vec3(_2452, _2453, _2454));
    float _4689 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2452, _2453, _2454));
    float _4700 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _1189;
    float _2483 = 0.959999978542327880859375 - _1190;
    float _2484 = 0.959999978542327880859375 - _1191;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4711 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2518 = _2291 + 9u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _1032) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2331].x + _1109;
    float _2532 = cbLight._m0[_2331].y + _1110;
    float _2533 = cbLight._m0[_2331].z + _1111;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2331].xyz));
    float _4722 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2545 = dot(vec3(_1029, _1030, _1031), vec3(_2538, _2539, _2540));
    float _4733 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2538, _2539, _2540));
    float _4744 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2530 * _2530;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
    float _2571 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2459 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2571) + _2530) * _2544))) * _2544;
    float _4755 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    float _2593 = (((((_2564 * _2481) + _1192) * cbLight._m0[_2518].x) * _2583) * _2314) + ((((cbLight._m0[_2430].x * _2283) * ((_2480 * _2481) + _1192)) * _2504) * _2327);
    float _2594 = (((((_2564 * _2483) + _1194) * cbLight._m0[_2518].y) * _2583) * _2314) + ((((cbLight._m0[_2430].y * _2284) * ((_2480 * _2483) + _1194)) * _2504) * _2327);
    float _2595 = (((((_2564 * _2484) + _1195) * cbLight._m0[_2518].z) * _2583) * _2314) + ((((cbLight._m0[_2430].z * _2285) * ((_2480 * _2484) + _1195)) * _2504) * _2327);
    float _2657;
    float _2659;
    float _2661;
    if (_2367)
    {
        _2657 = _2593;
        _2659 = _2594;
        _2661 = _2595;
    }
    else
    {
        uint _2663 = _2291 + 2u;
        uint _2667 = _2291 + 10u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _1032) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _1109;
        float _2684 = cbLight._m0[_2663].y + _1110;
        float _2685 = cbLight._m0[_2663].z + _1111;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2663].xyz));
        float _4766 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2697 = dot(vec3(_1029, _1030, _1031), vec3(_2690, _2691, _2692));
        float _4777 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4788 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2459 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2723) + _2682) * _2696))) * _2696;
        float _4799 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2657 = (((((_2716 * _2481) + _1192) * cbLight._m0[_2667].x) * _2735) * _2736) + _2593;
        _2659 = (((((_2716 * _2483) + _1194) * cbLight._m0[_2667].y) * _2735) * _2736) + _2594;
        _2661 = (((((_2716 * _2484) + _1195) * cbLight._m0[_2667].z) * _2735) * _2736) + _2595;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2385)
    {
        _2771 = _2657;
        _2773 = _2659;
        _2775 = _2661;
    }
    else
    {
        uint _2782 = _2291 + 3u;
        uint _2786 = _2291 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _1032) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _1109;
        float _2803 = cbLight._m0[_2782].y + _1110;
        float _2804 = cbLight._m0[_2782].z + _1111;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2782].xyz));
        float _4815 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2816 = dot(vec3(_1029, _1030, _1031), vec3(_2809, _2810, _2811));
        float _4826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4837 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2459 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2842) + _2801) * _2815))) * _2815;
        float _4848 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2771 = (((((_2835 * _2481) + _1192) * cbLight._m0[_2786].x) * _2854) * _2855) + _2657;
        _2773 = (((((_2835 * _2483) + _1194) * cbLight._m0[_2786].y) * _2854) * _2855) + _2659;
        _2775 = (((((_2835 * _2484) + _1195) * cbLight._m0[_2786].z) * _2854) * _2855) + _2661;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2289.y == 0u)
    {
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2930;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2930;
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2930;
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1130) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _1129) / _2946)));
        float _2967 = (log2(_2933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            uint _3237 = 0u;
            uint _3246;
            bool _3247;
            for (;;)
            {
                _3246 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                _3247 = _3246 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3247)
                {
                    frontier_phi_66_pred = _3231;
                    frontier_phi_66_pred_1 = _3236;
                    frontier_phi_66_pred_2 = _3235;
                    frontier_phi_66_pred_3 = _3234;
                    frontier_phi_66_pred_4 = _3233;
                    frontier_phi_66_pred_5 = _3232;
                }
                else
                {
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    uint _3382;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3246;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    for (;;)
                    {
                        uint _3386 = uint(findLSB(_3382)) + (_3237 << 5u);
                        uint _3383 = (_3382 + 4294967295u) & _3382;
                        uint _3388 = _3386 * 48u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3408 = (_3386 * 48u) + 4u;
                        vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3427 = (_3386 * 48u) + 8u;
                        vec3 _3438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x));
                        float _3442 = _3402.x - _2931;
                        float _3443 = _3402.y - _2932;
                        float _3444 = _3402.z - _2933;
                        float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                        float _3448 = inversesqrt(_3445);
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3452 = dot(vec3(_1148, _1151, _1154), vec3(_3449, _3450, _3451));
                        float _3457 = 1.0 - (_3445 * _3402.w);
                        float _4874 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3459 = sqrt(_3445) * _3421.w;
                        float _3462 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                        float _3463 = _3462 * _3462;
                        float _3466 = ((1.0 - _3463) * _3452) + _3463;
                        float _3469 = _3459 * _3459;
                        float _3473 = ((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3458) / ((_3469 * 0.699999988079071044921875) + 1.0);
                        float _3477 = (-0.0) - _2931;
                        float _3478 = (-0.0) - _2932;
                        float _3479 = (-0.0) - _2933;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3494 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                        float _3495 = 1.0 - _1223;
                        float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                        float _3503 = _3502 * _3502;
                        float _3504 = _3503 * _3503;
                        float _3505 = _3484 + _3449;
                        float _3506 = _3485 + _3450;
                        float _3507 = _3486 + _3451;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3515 = dot(vec3(_1148, _1151, _1154), vec3(_3484, _3485, _3486));
                        float _4890 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3519 = dot(vec3(_1148, _1151, _1154), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                        float _4901 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                        float _3527 = _3462 * _3503;
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3452) + _3528;
                        float _4912 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3532 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3533 = 1.0 - _3503;
                        float _3543 = (0.5 / (((_3532 * ((_3518 * _3533) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3503) * _3518))) * _3532;
                        float _4923 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3554 = (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3526 * _3526) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125))) * _3458;
                        _3306 = (_3473 * _3421.x) + _3379;
                        _3307 = (_3473 * _3421.y) + _3380;
                        _3308 = (_3473 * _3421.z) + _3381;
                        _3303 = (_3554 * _3438.x) + _3376;
                        _3304 = (_3554 * _3438.y) + _3377;
                        _3305 = (_3554 * _3438.z) + _3378;
                        if (_3383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3383;
                        }
                    }
                    frontier_phi_66_pred = _3303;
                    frontier_phi_66_pred_1 = _3308;
                    frontier_phi_66_pred_2 = _3307;
                    frontier_phi_66_pred_3 = _3306;
                    frontier_phi_66_pred_4 = _3305;
                    frontier_phi_66_pred_5 = _3304;
                }
                _3079 = frontier_phi_66_pred;
                _3089 = frontier_phi_66_pred_1;
                _3087 = frontier_phi_66_pred_2;
                _3085 = frontier_phi_66_pred_3;
                _3083 = frontier_phi_66_pred_4;
                _3081 = frontier_phi_66_pred_5;
                uint _3238 = _3237 + 1u;
                if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3231 = _3079;
                    _3232 = _3081;
                    _3233 = _3083;
                    _3234 = _3085;
                    _3235 = _3087;
                    _3236 = _3089;
                    _3237 = _3238;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        if (((4294967295u << _3095) & _2977) == 0u)
        {
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
        }
        else
        {
            float _3224 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
            float _3225 = _3224 * _2931;
            float _3226 = _3224 * _2932;
            float _3227 = _3224 * _2933;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3359 = _3078;
                float _3360 = _3080;
                float _3361 = _3082;
                float _3362 = _3084;
                float _3363 = _3086;
                float _3364 = _3088;
                uint _3365 = _3095;
                uint _3374;
                bool _3375;
                for (;;)
                {
                    _3374 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                    _3375 = _3374 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3375)
                    {
                        frontier_phi_77_pred = _3364;
                        frontier_phi_77_pred_1 = _3363;
                        frontier_phi_77_pred_2 = _3362;
                        frontier_phi_77_pred_3 = _3361;
                        frontier_phi_77_pred_4 = _3360;
                        frontier_phi_77_pred_5 = _3359;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        float _3584 = _3362;
                        float _3585 = _3363;
                        float _3586 = _3364;
                        uint _3587 = _3374;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2933, _3705.z, fma(_2932, _3705.y, _3705.x * _2931)) + _3705.w;
                            _3718 = !((fma(_2933, _3686.z, fma(_2932, _3686.y, _3686.x * _2931)) + _3686.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2931;
                                float _3746 = _3613.y - _2932;
                                float _3747 = _3613.z - _2933;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4934 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_1148, _1151, _1154))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2933, _3656.z, fma(_2932, _3656.y, _3656.x * _2931)) + _3656.w) / _3717;
                                float _3777 = (fma(_2933, _3671.z, fma(_2932, _3671.y, _3671.x * _2931)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4950 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _1223;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3225;
                                float _3807 = _3753 - _3226;
                                float _3808 = _3754 - _3227;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_1148, _1151, _1154), vec3((-0.0) - _3225, (-0.0) - _3226, (-0.0) - _3227));
                                float _4961 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3820 = dot(vec3(_1148, _1151, _1154), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4972 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_1148, _1151, _1154), vec3(_3752, _3753, _3754))) + _3829;
                                float _4983 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _4994 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3783 * _3629.y;
                                frontier_phi_83_pred_1 = _3783 * _3629.x;
                                frontier_phi_83_pred_2 = _3857 * _3641.z;
                                frontier_phi_83_pred_3 = _3857 * _3641.y;
                                frontier_phi_83_pred_4 = _3857 * _3641.x;
                                frontier_phi_83_pred_5 = _3783 * _3629.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3865 = frontier_phi_83_pred;
                            _3864 = frontier_phi_83_pred_1;
                            _3863 = frontier_phi_83_pred_2;
                            _3862 = frontier_phi_83_pred_3;
                            _3861 = frontier_phi_83_pred_4;
                            _3866 = frontier_phi_83_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3573;
                        frontier_phi_77_pred_1 = _3572;
                        frontier_phi_77_pred_2 = _3571;
                        frontier_phi_77_pred_3 = _3570;
                        frontier_phi_77_pred_4 = _3569;
                        frontier_phi_77_pred_5 = _3568;
                    }
                    _3210 = frontier_phi_77_pred;
                    _3208 = frontier_phi_77_pred_1;
                    _3206 = frontier_phi_77_pred_2;
                    _3204 = frontier_phi_77_pred_3;
                    _3202 = frontier_phi_77_pred_4;
                    _3200 = frontier_phi_77_pred_5;
                    uint _3366 = _3365 + 1u;
                    if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3359 = _3200;
                        _3360 = _3202;
                        _3361 = _3204;
                        _3362 = _3206;
                        _3363 = _3208;
                        _3364 = _3210;
                        _3365 = _3366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3204;
                frontier_phi_58_59_ladder_1 = _3210;
                frontier_phi_58_59_ladder_2 = _3208;
                frontier_phi_58_59_ladder_3 = _3206;
                frontier_phi_58_59_ladder_4 = _3202;
                frontier_phi_58_59_ladder_5 = _3200;
            }
            else
            {
                frontier_phi_58_59_ladder = _3082;
                frontier_phi_58_59_ladder_1 = _3088;
                frontier_phi_58_59_ladder_2 = _3086;
                frontier_phi_58_59_ladder_3 = _3084;
                frontier_phi_58_59_ladder_4 = _3080;
                frontier_phi_58_59_ladder_5 = _3078;
            }
            _3199 = frontier_phi_58_59_ladder_5;
            _3201 = frontier_phi_58_59_ladder_4;
            _3203 = frontier_phi_58_59_ladder;
            _3205 = frontier_phi_58_59_ladder_3;
            _3207 = frontier_phi_58_59_ladder_2;
            _3209 = frontier_phi_58_59_ladder_1;
        }
        float _3214 = isnan(1.0) ? _1207 : (isnan(_1207) ? 1.0 : min(_1207, 1.0));
        _2990 = (_3214 * _3205) + _2423;
        _2992 = (_3214 * _3207) + _2425;
        _2994 = (_3214 * _3209) + _2427;
        _2996 = ((_3199 * _1192) * _3214) + _2771;
        _2998 = ((_3201 * _1194) * _3214) + _2773;
        _3000 = ((_3203 * _1195) * _3214) + _2775;
    }
    else
    {
        _2990 = _2423;
        _2992 = _2425;
        _2994 = _2427;
        _2996 = _2771;
        _2998 = _2773;
        _3000 = _2775;
    }
    float _5010 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _5021 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _5032 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _3017 = ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_2990 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1207))) + ((_2996 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2042)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2992 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1207))) + ((_2998 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2042)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2994 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1207))) + ((_3000 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2042)) * cbPerFrame._m0[3u].x);
    uint _3020 = _1167 + 6u;
    float _3028 = _1129 / cbSceneParam._m0[86u].x;
    float _3029 = _1130 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _1052 : (isnan(_1052) ? cbSceneParam._m0[77u].w : min(_1052, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_1052 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_1052) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1052 : min(cbSceneParam._m0[80u].w, _1052));
        float _3104 = _3103 / _1052;
        float _3115 = _3104 * _1102;
        float _3116 = _1103 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3119 = _3104 * _1104;
        float _3121 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3122 = _3121 + cbSceneParam._m0[79u].w;
        float _3123 = cbSceneParam._m0[79u].w - _3116;
        float _3129 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3119 * _3119));
        float _3132 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3129;
        float _3137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3316;
        if (abs((_3117 - _3121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3316 = ((((_3122 > 0.0) ? exp2(_3137 * _3122) : (2.0 - exp2(_3139 * _3122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3132;
        }
        else
        {
            float _3260 = 1.0 / cbSceneParam._m0[80u].x;
            float _3261 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : max(_3122, _3123));
            float _3262 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : min(_3122, _3123));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            _3316 = ((abs(_3129 / _3117) * cbSceneParam._m0[80u].y) * ((((_3271 - _3272) * 2.0) - ((exp2(_3137 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0)))) - exp2(_3137 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))))) * _3260)) - ((exp2(_3139 * _3271) - exp2(_3139 * _3272)) * _3260))) + (_3132 * cbSceneParam._m0[80u].z);
        }
        vec4 _3318 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3327 = exp2((_3316 * (-1.44269502162933349609375)) * (1.0 - _3318.w));
        float _3328 = log2(_3327);
        float _3344 = log2(_3048);
        _3141 = (exp2(_3344 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].x)) * _3318.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3143 = (exp2(_3344 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].y)) * _3318.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3145 = (exp2(_3344 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].z)) * _3318.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3147 = _3327 * _3048;
    }
    else
    {
        _3141 = _3045;
        _3143 = _3046;
        _3145 = _3047;
        _3147 = _3048;
    }
    bool _3354;
    vec4 _3157;
    vec4 _3179;
    float _3181;
    float _3185;
    float _3186;
    float _3187;
    float _3188;
    bool _3198;
    for (;;)
    {
        _3157 = cbMatDynParam._m0[0u];
        float _3159 = roundEven(_3157.y);
        bool _3160 = _3159 == 3.0;
        float _3161 = log2(_3147);
        float _3168 = exp2(_3161 * cbSceneParam._m0[78u].x) * _3017;
        float _3169 = exp2(_3161 * cbSceneParam._m0[78u].y) * _3018;
        float _3170 = exp2(_3161 * cbSceneParam._m0[78u].z) * _3019;
        float _3177 = _1118 + (-0.5);
        _3179 = cbMtdParam._m0[1u];
        _3181 = _3179.y * _3177;
        float _3184 = (_3159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3185 = _3184 * (_3160 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3141)));
        _3186 = _3184 * (_3160 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
        _3187 = _3184 * (_3160 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
        _3188 = _3177 * 0.999000012874603271484375;
        _3198 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3198)
        {
            if ((cbInstanceData._m0[_1167 + 7u].x + _3188) < 0.5)
            {
                _3354 = true;
                break;
            }
        }
        uint _3295 = _1168 + uint(_3157.w);
        if ((cbInstanceData._m0[_3295].w < 1.0) && ((cbInstanceData._m0[_3295].w + _3188) < 0.5))
        {
            _3354 = true;
            break;
        }
        if ((_3181 + 1.0) < _3179.x)
        {
            _3354 = true;
            break;
        }
        _3354 = false;
        break;
    }
    float _3559;
    if (_3354)
    {
        discard_state = true;
        _3559 = 0.0;
    }
    else
    {
        _3559 = cbInstanceData._m0[_3020].w;
    }
    SV_Target.x = _3185;
    SV_Target.y = _3186;
    SV_Target.z = _3187;
    SV_Target.w = _3559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3020].w;
    discard_exit();
}


