#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _4157;
float _4158;
float _4159;
float _4160;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _290 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _307 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _330 = log2(0.0);
    float _332 = exp2(_330 * cbMtdParam._m0[23u].x);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _343 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _345 = isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0));
    vec4 _357 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _360 = _357.y;
    float _363 = (_357.x + (-0.02500000037252902984619140625)) * 8.0;
    float _367 = roundEven(5.0 - _363);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(4.0) ? _368 : (isnan(_368) ? 4.0 : min(_368, 4.0));
    float _382 = floor(_369);
    vec4 _385 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _382));
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[17u].x;
    _203[0u] = cbMtdParam._m0[17u].y;
    _204[0u] = cbMtdParam._m0[17u].z;
    _202[1u] = cbMtdParam._m0[15u].x;
    _203[1u] = cbMtdParam._m0[15u].y;
    _204[1u] = cbMtdParam._m0[15u].z;
    _202[2u] = cbMtdParam._m0[14u].x;
    _203[2u] = cbMtdParam._m0[14u].y;
    _204[2u] = cbMtdParam._m0[14u].z;
    _202[3u] = cbMtdParam._m0[13u].x;
    _203[3u] = cbMtdParam._m0[13u].y;
    _204[3u] = cbMtdParam._m0[13u].z;
    _202[4u] = cbMtdParam._m0[12u].x;
    _203[4u] = cbMtdParam._m0[12u].y;
    _204[4u] = cbMtdParam._m0[12u].z;
    _202[5u] = cbMtdParam._m0[18u].x;
    _203[5u] = cbMtdParam._m0[18u].y;
    _204[5u] = cbMtdParam._m0[18u].z;
    float _449 = roundEven(_363);
    float _450 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    uint _452 = uint(int(isnan(5.0) ? _450 : (isnan(_450) ? 5.0 : min(_450, 5.0))));
    vec4 _482 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _493 = cbMtdParam._m0[9u].x * _482.x;
    float _494 = cbMtdParam._m0[9u].y * _482.y;
    float _495 = cbMtdParam._m0[9u].z * _482.z;
    float _502 = ((((((_202[_452] - cbMtdParam._m0[10u].x) * _360) + cbMtdParam._m0[10u].x) * _385.x) - _493) * _345) + _493;
    float _503 = ((((((_203[_452] - cbMtdParam._m0[10u].y) * _360) + cbMtdParam._m0[10u].y) * _385.y) - _494) * _345) + _494;
    float _504 = ((((((_204[_452] - cbMtdParam._m0[10u].z) * _360) + cbMtdParam._m0[10u].z) * _385.z) - _495) * _345) + _495;
    float _510 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _523 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _542 = (((cbMtdParam._m0[16u].x * _523.x) - _502) * _510) + _502;
    float _543 = (((cbMtdParam._m0[16u].y * _523.y) - _503) * _510) + _503;
    float _544 = (((cbMtdParam._m0[16u].z * _523.z) - _504) * _510) + _504;
    vec4 _557 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _577 = (((cbMtdParam._m0[19u].x * _557.x) - _542) * _334) + _542;
    float _578 = (((cbMtdParam._m0[19u].y * _557.y) - _543) * _334) + _543;
    float _579 = (((cbMtdParam._m0[19u].z * _557.z) - _544) * _334) + _544;
    vec4 _591 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _616 = (_322.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _591.x) - _577) * _309) + _577);
    float _618 = (_322.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _591.y) - _578) * _309) + _578);
    float _620 = (_322.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _591.z) - _579) * _309) + _579);
    float _624 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _633 = (_624 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _624))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4219 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _641 = ((cbMtdParam._m0[21u].x - _616) * _634) + _616;
    float _642 = ((cbMtdParam._m0[21u].y - _618) * _634) + _618;
    float _643 = ((cbMtdParam._m0[21u].z - _620) * _634) + _620;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[28u].w;
    _198[0u] = cbMtdParam._m0[29u].x;
    _197[1u] = cbMtdParam._m0[30u].w;
    _198[1u] = cbMtdParam._m0[31u].x;
    _197[2u] = cbMtdParam._m0[30u].y;
    _198[2u] = cbMtdParam._m0[30u].z;
    _197[3u] = cbMtdParam._m0[29u].w;
    _198[3u] = cbMtdParam._m0[30u].x;
    _197[4u] = cbMtdParam._m0[29u].y;
    _198[4u] = cbMtdParam._m0[29u].z;
    float _683 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _685 = uint(int(isnan(4.0) ? _683 : (isnan(_683) ? 4.0 : min(_683, 4.0))));
    float _692 = ((_198[_685] - cbMtdParam._m0[22u].z) * _345) + cbMtdParam._m0[22u].z;
    float _695 = ((cbMtdParam._m0[22u].w - _692) * _510) + _692;
    float _698 = ((cbMtdParam._m0[25u].x - _695) * _334) + _695;
    float _701 = ((cbMtdParam._m0[26u].x - _698) * _309) + _698;
    float _703 = _701 - (_701 * _624);
    vec4 _719 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _382));
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _744 = cbMtdParam._m0[22u].x + _736.z;
    float _747 = (((_719.z + _197[_685]) - _744) * _345) + _744;
    vec4 _759 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _770 = (((_759.z - _747) + cbMtdParam._m0[28u].y) * _510) + _747;
    float _776 = ((((_294 * 2.0) * _770) - _770) * cbMtdParam._m0[24u].w) + _770;
    vec4 _788 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _799 = (((cbMtdParam._m0[23u].z + _788.z) - _776) * _334) + _776;
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _823 = (((_812.z - _799) + cbMtdParam._m0[26u].y) * _309) + _799;
    vec4 _838 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _853 = ((cbMtdParam._m0[27u].y * _624) * ((_838.z * cbMtdParam._m0[27u].x) - _823)) + _823;
    float _865 = ((_719.x - _738) * _345) + _738;
    float _866 = ((_719.y - _739) * _345) + _739;
    float _871 = ((_759.x - _865) * _510) + _865;
    float _872 = ((_759.y - _866) * _510) + _866;
    float _877 = ((_788.x - _871) * _334) + _871;
    float _878 = ((_788.y - _872) * _334) + _872;
    float _887 = ((((_812.x - _877) * _309) + _877) * 2.0) + (-1.0);
    float _888 = ((((_812.y - _878) * _309) + _878) * 2.0) + (-1.0);
    float _889 = dot(vec2(_887, _888), vec2(_887, _888));
    float _4240 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _894 = sqrt(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))));
    float _904 = ((cbMtdParam._m0[25u].y * ((_290.x * 2.0) + (-1.0))) + _887) + ((((_838.x * 2.0) + (-1.0)) * _624) * cbMtdParam._m0[26u].w);
    float _905 = ((cbMtdParam._m0[25u].y * ((_290.y * 2.0) + (-1.0))) + _888) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_838.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _908 = fma(_894, _239 * NORMAL.x, fma(_905, _246 * TANGENT.x, (_232 * _224) * _904));
    float _911 = fma(_894, _239 * NORMAL.y, fma(_905, _246 * TANGENT.y, (_232 * _225) * _904));
    float _914 = fma(_894, _239 * NORMAL.z, fma(_905, _246 * TANGENT.z, (_232 * _226) * _904));
    float _918 = inversesqrt(dot(vec3(_908, _911, _914), vec3(_908, _911, _914)));
    float _919 = _918 * _908;
    float _920 = _918 * _911;
    float _921 = _918 * _914;
    float _4251 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _922 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4273 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4284 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4295 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _926 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    vec4 _1006 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1008 = _1006.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1178 = sqrt(((_992 * _992) + (_993 * _993)) + (_994 * _994));
        float _1184 = (cbMatDynParam._m0[5u].x * _1178) + cbMatDynParam._m0[5u].y;
        float _4306 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1189 = (cbMatDynParam._m0[5u].z * _1178) + cbMatDynParam._m0[5u].w;
        float _4317 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) - _1185)) + _1185) < ((_1008 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_921, cbSceneParam._m0[5u].z, fma(_920, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _919));
    float _1041 = fma(_921, cbSceneParam._m0[6u].z, fma(_920, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _919));
    float _1044 = fma(_921, cbSceneParam._m0[7u].z, fma(_920, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _919));
    uint _1057 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1058 = _1057 + 9u;
    uint _1059 = _1058 + uint(cbMatDynParam._m0[0u].w);
    float _1065 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbInstanceData._m0[_1059].x;
    float _1066 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * cbInstanceData._m0[_1059].y;
    float _1067 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * cbInstanceData._m0[_1059].z;
    float _4328 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _4339 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _1071 = 1.0 - _926;
    float _1072 = _1068 * _1071;
    float _1073 = _1069 * _1071;
    float _1074 = _1070 * _1071;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _926;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _926;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _926;
    float _1082 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    vec4 _1094 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1097 = _1094.x * TEXCOORD_3.w;
    float _1098 = dot(vec3(_919, _920, _921), vec3(_999, _1000, _1001));
    float _1101 = _1098 * 2.0;
    float _1105 = (_1101 * _919) - _999;
    float _1106 = (_1101 * _920) - _1000;
    float _1107 = (_1101 * _921) - _1001;
    float _1111 = abs(dot(vec3(_999, _1000, _1001), vec3(_919, _920, _921)));
    float _4361 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1113 = sqrt(_922);
    float _1124 = exp2((_1113 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1113 * 3.0));
    float _1130 = (1.0 - _1124) * ((_1113 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1131 = _1124 * _1113;
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1167, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159));
        float _1225 = fma(_1167, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159));
        float _1229 = fma(_1167, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159));
        float _1254 = _1159 + _919;
        float _1255 = _1163 + _920;
        float _1256 = _1167 + _921;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_919, _920, _921), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4409 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_919, _920, _921), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4442 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_919, _920, _921), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4475 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1537 = fma(_1167, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159));
        float _1541 = fma(_1167, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159));
        float _1545 = fma(_1167, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159));
        float _1568 = _1159 + _919;
        float _1569 = _1163 + _920;
        float _1570 = _1167 + _921;
        float _1580 = fma(_1570, cbModelParam._m0[30u].z, fma(_1569, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1568)) - _1537;
        float _1581 = fma(_1570, cbModelParam._m0[31u].z, fma(_1569, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1568)) - _1541;
        float _1582 = fma(_1570, cbModelParam._m0[32u].z, fma(_1569, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1568)) - _1545;
        float _1586 = inversesqrt(dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582)));
        float _1599 = ((_1586 * _1580) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1537 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1600 = ((_1586 * _1581) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1541 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1586 * _1582) / cbModelParam._m0[35u].z) + ((((((_1545 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        float _1636 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1603.x + (-0.5));
        float _1638 = _1636 * (_1603.y + (-0.5));
        float _1639 = _1636 * (_1603.z + (-0.5));
        float _1646 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1610.x + (-0.5));
        float _1648 = _1646 * (_1610.y + (-0.5));
        float _1649 = _1646 * (_1610.z + (-0.5));
        float _1656 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1617.x + (-0.5));
        float _1658 = _1656 * (_1617.y + (-0.5));
        float _1659 = _1656 * (_1617.z + (-0.5));
        float _1666 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1624.x + (-0.5));
        float _1668 = _1666 * (_1624.y + (-0.5));
        float _1669 = _1666 * (_1624.z + (-0.5));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = _1637 * 0.5;
        float _1674 = _1647 * 0.5;
        float _1675 = _1657 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_919, _920, _921), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4538 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1700 + 1.0))) + _1705) * _1670;
        float _1715 = _1638 * 0.5;
        float _1716 = _1648 * 0.5;
        float _1717 = _1658 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_919, _920, _921), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4571 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1742 + 1.0))) + _1747) * _1671;
        float _1757 = _1639 * 0.5;
        float _1758 = _1649 * 0.5;
        float _1759 = _1659 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_919, _920, _921), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4582 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4593 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4604 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_1784 + 1.0))) + _1789) * _1672;
        _1806 = _1639;
        _1807 = _1638;
        _1808 = _1637;
        _1809 = _1649;
        _1810 = _1648;
        _1811 = _1647;
        _1812 = _1659;
        _1813 = _1658;
        _1814 = _1657;
        _1815 = _1672;
        _1816 = _1671;
        _1817 = _1670;
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
    }
    else
    {
        _1806 = _1497;
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = 0.0;
        _1819 = 0.0;
        _1820 = 0.0;
    }
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1509)) + _1509;
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1510)) + _1510;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1511)) + _1511;
    float _1853 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1830));
    float _1874 = _1105 * 0.5;
    float _1875 = _1106 * 0.5;
    float _1876 = _1107 * 0.5;
    float _1877 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1880 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1883 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1917;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1890 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1894 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1898 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1905 = dot(vec4(cbModelParam._m0[39u]), vec4(_1874, _1875, _1876, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1905) ? 0.0 : (isnan(0.0) ? _1905 : max(0.0, _1905))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1928;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1919 = dot(vec4(cbModelParam._m0[40u]), vec4(_1874, _1875, _1876, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1919) ? 0.0 : (isnan(0.0) ? _1919 : max(0.0, _1919))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1932 = (_1928 * cbModelParam._m0[1u].x) + (_1917 * (1.0 - cbModelParam._m0[1u].x));
    float _1942 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _922);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1942 : min(cbModelParam._m0[25u].z, _1942));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1990 = fma(_1167, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159)) + cbModelParam._m0[13u].w;
        float _1994 = fma(_1167, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159)) + cbModelParam._m0[14u].w;
        float _1998 = fma(_1167, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159)) + cbModelParam._m0[15u].w;
        float _2001 = fma(_1107, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105));
        float _2004 = fma(_1107, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105));
        float _2007 = fma(_1107, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105));
        float _2035;
        if (_2001 > 0.0)
        {
            _2035 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2035 = frontier_phi_17_15_ladder;
        }
        float _2206;
        if (_2004 > 0.0)
        {
            _2206 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2206 = frontier_phi_26_22_ladder;
        }
        float _2501;
        if (_2007 > 0.0)
        {
            _2501 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2501 = frontier_phi_38_33_ladder;
        }
        float _2503 = isnan(_2206) ? _2035 : (isnan(_2035) ? _2206 : min(_2035, _2206));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _2001) + _1990;
        float _2509 = (_2504 * _2004) + _1994;
        float _2510 = (_2504 * _2007) + _1998;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2511;
        float _2515 = _2511 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 > _2515) || ((_2509 < _2513) || ((_2508 < _2513) || (_2508 > _2515))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2510, cbModelParam._m0[9u].z, fma(_2509, cbModelParam._m0[9u].y, _2508 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2510, cbModelParam._m0[10u].z, fma(_2509, cbModelParam._m0[10u].y, _2508 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2510, cbModelParam._m0[11u].z, fma(_2509, cbModelParam._m0[11u].y, _2508 * cbModelParam._m0[11u].x))), _1943);
            frontier_phi_16_38_ladder = _2655.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2655.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2655.x * cbModelParam._m0[1u].y;
        }
        _2023 = frontier_phi_16_38_ladder_2;
        _2025 = frontier_phi_16_38_ladder_1;
        _2027 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1105, _1106, _1107), _1943);
        _2023 = _2011.x * cbModelParam._m0[1u].y;
        _2025 = _2011.y * cbModelParam._m0[1u].y;
        _2027 = _2011.z * cbModelParam._m0[1u].y;
    }
    float _2031 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _922);
    float _2032 = isnan(_2031) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2031 : min(cbModelParam._m0[25u].w, _2031));
    float _2121;
    float _2123;
    float _2125;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2085 = fma(_1167, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159)) + cbModelParam._m0[21u].w;
        float _2089 = fma(_1167, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159)) + cbModelParam._m0[22u].w;
        float _2093 = fma(_1167, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159)) + cbModelParam._m0[23u].w;
        float _2096 = fma(_1107, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105));
        float _2099 = fma(_1107, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105));
        float _2102 = fma(_1107, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105));
        float _2211;
        if (_2096 > 0.0)
        {
            _2211 = abs((1.0 - _2085) / _2096);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2085 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2211 = frontier_phi_28_24_ladder;
        }
        float _2528;
        if (_2099 > 0.0)
        {
            _2528 = abs((1.0 - _2089) / _2099);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2089 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2528 = frontier_phi_40_35_ladder;
        }
        float _2866;
        if (_2102 > 0.0)
        {
            _2866 = abs((1.0 - _2093) / _2102);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2093 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2866 = frontier_phi_50_47_ladder;
        }
        float _2868 = isnan(_2528) ? _2211 : (isnan(_2211) ? _2528 : min(_2211, _2528));
        float _2869 = isnan(_2866) ? _2868 : (isnan(_2868) ? _2866 : min(_2868, _2866));
        float _2873 = (_2869 * _2096) + _2085;
        float _2874 = (_2869 * _2099) + _2089;
        float _2875 = (_2869 * _2102) + _2093;
        float _2876 = _2869 * 9.9999997473787516355514526367188e-05;
        float _2877 = (-1.0) - _2876;
        float _2879 = _2876 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2875 > _2879) || ((_2875 < _2877) || ((_2874 > _2879) || ((_2874 < _2877) || ((_2873 < _2877) || (_2873 > _2879))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2875, cbModelParam._m0[17u].z, fma(_2874, cbModelParam._m0[17u].y, _2873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2875, cbModelParam._m0[18u].z, fma(_2874, cbModelParam._m0[18u].y, _2873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2875, cbModelParam._m0[19u].z, fma(_2874, cbModelParam._m0[19u].y, _2873 * cbModelParam._m0[19u].x))), _2032);
            frontier_phi_25_50_ladder = _2997.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2997.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2997.x * cbModelParam._m0[1u].z;
        }
        _2121 = frontier_phi_25_50_ladder_2;
        _2123 = frontier_phi_25_50_ladder_1;
        _2125 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1105, _1106, _1107), _2032);
        _2121 = _2105.x * cbModelParam._m0[1u].z;
        _2123 = _2105.y * cbModelParam._m0[1u].z;
        _2125 = _2105.z * cbModelParam._m0[1u].z;
    }
    float _2138 = (((_1130 * _1082) + _1131) * _1097) * ((cbModelParam._m0[1u].w * (_2121 - _2023)) + _2023);
    float _2140 = (((_1130 * _1084) + _1131) * _1097) * ((cbModelParam._m0[1u].w * (_2123 - _2025)) + _2025);
    float _2142 = (((_1130 * _1085) + _1131) * _1097) * ((cbModelParam._m0[1u].w * (_2125 - _2027)) + _2027);
    float _2145 = fma(_2142, cbSceneParam._m0[89u].z, fma(_2140, cbSceneParam._m0[89u].y, _2138 * cbSceneParam._m0[89u].x));
    float _2148 = fma(_2142, cbSceneParam._m0[90u].z, fma(_2140, cbSceneParam._m0[90u].y, _2138 * cbSceneParam._m0[90u].x));
    float _2151 = fma(_2142, cbSceneParam._m0[91u].z, fma(_2140, cbSceneParam._m0[91u].y, _2138 * cbSceneParam._m0[91u].x));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2193 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2197 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2198 = _2185 / _2197;
    float _2199 = _2189 / _2197;
    float _2200 = _2193 / _2197;
    float _2347;
    float _2348;
    float _2349;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2227 = ((uint(_2200 > cbSceneParam._m0[59u].y) + uint(_2200 > cbSceneParam._m0[59u].x)) + uint(_2200 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2228 = _2227 + 43u;
        uint _2236 = _2227 + 44u;
        uint _2244 = _2227 + 45u;
        uint _2252 = _2227 + 46u;
        float _2263 = fma(_2197, cbSceneParam._m0[_2228].w, fma(_2193, cbSceneParam._m0[_2228].z, fma(_2189, cbSceneParam._m0[_2228].y, _2185 * cbSceneParam._m0[_2228].x)));
        float _2267 = fma(_2197, cbSceneParam._m0[_2236].w, fma(_2193, cbSceneParam._m0[_2236].z, fma(_2189, cbSceneParam._m0[_2236].y, _2185 * cbSceneParam._m0[_2236].x)));
        float _2275 = fma(_2197, cbSceneParam._m0[_2252].w, fma(_2193, cbSceneParam._m0[_2252].z, fma(_2189, cbSceneParam._m0[_2252].y, _2185 * cbSceneParam._m0[_2252].x)));
        float _2280 = cbSceneParam._m0[33u].z * _2275;
        float _2282 = cbSceneParam._m0[33u].w * _2275;
        float _2285 = fma(_2197, cbSceneParam._m0[_2244].w, fma(_2193, cbSceneParam._m0[_2244].z, fma(_2189, cbSceneParam._m0[_2244].y, _2185 * cbSceneParam._m0[_2244].x))) / _2275;
        float _2333 = (cbSceneParam._m0[33u].x - sqrt(((_2199 * _2199) + (_2198 * _2198)) + (_2200 * _2200))) * cbSceneParam._m0[33u].y;
        float _4730 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2340 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 + _2263) / _2275, (_2282 + _2267) / _2275), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2282 + _2263) / _2275, (_2267 - _2280) / _2275), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 - _2280) / _2275, (_2267 - _2282) / _2275), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 - _2282) / _2275, (_2280 + _2267) / _2275), _2285), 0.0)).x), vec4(0.25)));
        _2347 = 1.0 - (_2340 * cbSceneParam._m0[34u].x);
        _2348 = 1.0 - (_2340 * cbSceneParam._m0[34u].y);
        _2349 = 1.0 - (_2340 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2347 = 1.0;
        _2348 = 1.0;
        _2349 = 1.0;
    }
    float _2413;
    float _2415;
    float _2417;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2401 = fma(_2197, cbSceneParam._m0[63u].w, fma(_2193, cbSceneParam._m0[63u].z, fma(_2189, cbSceneParam._m0[63u].y, _2185 * cbSceneParam._m0[63u].x)));
        float _2402 = fma(_2197, cbSceneParam._m0[60u].w, fma(_2193, cbSceneParam._m0[60u].z, fma(_2189, cbSceneParam._m0[60u].y, _2185 * cbSceneParam._m0[60u].x))) / _2401;
        float _2403 = fma(_2197, cbSceneParam._m0[61u].w, fma(_2193, cbSceneParam._m0[61u].z, fma(_2189, cbSceneParam._m0[61u].y, _2185 * cbSceneParam._m0[61u].x))) / _2401;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2402 >= cbSceneParam._m0[64u].x) && (_2403 >= cbSceneParam._m0[64u].y)) && (_2402 <= cbSceneParam._m0[64u].z)) && (_2403 <= cbSceneParam._m0[64u].w))
        {
            float _2541 = fma(_2197, cbSceneParam._m0[62u].w, fma(_2193, cbSceneParam._m0[62u].z, fma(_2189, cbSceneParam._m0[62u].y, _2185 * cbSceneParam._m0[62u].x))) / _2401;
            float _2545 = isnan(cbSceneParam._m0[41u].w) ? _2541 : (isnan(_2541) ? cbSceneParam._m0[41u].w : max(_2541, cbSceneParam._m0[41u].w));
            float _2588 = (cbSceneParam._m0[33u].x - sqrt(((_2199 * _2199) + (_2198 * _2198)) + (_2200 * _2200))) * cbSceneParam._m0[33u].y;
            float _4746 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
            float _2595 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2402, cbSceneParam._m0[33u].w + _2403), _2545), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2402, _2403 - cbSceneParam._m0[33u].z), _2545), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2402 - cbSceneParam._m0[33u].z, _2403 - cbSceneParam._m0[33u].w), _2545), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2402 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2403), _2545), 0.0)).x), vec4(0.25)));
            float _2599 = 1.0 - (_2595 * cbSceneParam._m0[34u].x);
            float _2600 = 1.0 - (_2595 * cbSceneParam._m0[34u].y);
            float _2601 = 1.0 - (_2595 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2601) ? _2349 : (isnan(_2349) ? _2601 : min(_2349, _2601));
            frontier_phi_37_36_ladder_1 = isnan(_2600) ? _2348 : (isnan(_2348) ? _2600 : min(_2348, _2600));
            frontier_phi_37_36_ladder_2 = isnan(_2599) ? _2347 : (isnan(_2347) ? _2599 : min(_2347, _2599));
        }
        else
        {
            frontier_phi_37_36_ladder = _2349;
            frontier_phi_37_36_ladder_1 = _2348;
            frontier_phi_37_36_ladder_2 = _2347;
        }
        _2413 = frontier_phi_37_36_ladder_2;
        _2415 = frontier_phi_37_36_ladder_1;
        _2417 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2413 = _2347;
        _2415 = _2348;
        _2417 = _2349;
    }
    uvec4 _2422 = floatBitsToUint(cbInstanceData._m0[_1057 + 5u]);
    uint _2424 = _2422.x * 14u;
    uint _2425 = _2424 + 13u;
    float _2432 = _1097 + (-1.0);
    float _2437 = (cbLight._m0[_2425].x * _2432) + 1.0;
    float _2438 = (cbLight._m0[_2425].y * _2432) + 1.0;
    float _2439 = (cbLight._m0[_2425].z * _2432) + 1.0;
    float _2440 = (cbLight._m0[_2425].w * _2432) + 1.0;
    uint _2441 = _2424 + 5u;
    float _2447 = isnan(1.0) ? _2438 : (isnan(_2438) ? 1.0 : min(_2438, 1.0));
    uint _2451 = _2424 + 4u;
    float _2460 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
    uint _2464 = _2424 | 1u;
    float _2475 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_919, _920, _921));
    float _2478 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_919, _920, _921));
    float _4782 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _4793 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2483 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * 0.3183098733425140380859375;
    float _2485 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2492 = ((cbLight._m0[_2441].x * _2447) * _2485) + (((cbLight._m0[_2451].x * _2413) * _2460) * _2483);
    float _2493 = ((_2447 * cbLight._m0[_2441].y) * _2485) + (((cbLight._m0[_2451].y * _2415) * _2460) * _2483);
    float _2494 = ((_2447 * cbLight._m0[_2441].z) * _2485) + (((cbLight._m0[_2451].z * _2417) * _2460) * _2483);
    uvec4 _2498 = floatBitsToUint(cbLight._m0[_2424 + 12u]);
    bool _2500 = _2498.x == 0u;
    float _2602;
    float _2604;
    float _2606;
    if (_2500)
    {
        _2602 = _2492;
        _2604 = _2493;
        _2606 = _2494;
    }
    else
    {
        uint _2610 = _2424 + 6u;
        float _2626 = (dot(vec3(cbLight._m0[_2424 + 2u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2627 = _2626 * _2626;
        float _4804 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2628 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2629 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
        _2602 = (((cbLight._m0[_2610].x * 0.3183098733425140380859375) * _2628) * _2629) + _2492;
        _2604 = (((cbLight._m0[_2610].y * 0.3183098733425140380859375) * _2628) * _2629) + _2493;
        _2606 = (((cbLight._m0[_2610].z * 0.3183098733425140380859375) * _2628) * _2629) + _2494;
    }
    bool _2609 = _2498.y == 0u;
    float _2664;
    float _2666;
    float _2668;
    if (_2609)
    {
        _2664 = _2602;
        _2666 = _2604;
        _2668 = _2606;
    }
    else
    {
        uint _2837 = _2424 + 7u;
        float _2853 = (dot(vec3(cbLight._m0[_2424 + 3u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2854 = _2853 * _2853;
        float _4820 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2855 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2856 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _2664 = (((cbLight._m0[_2837].x * 0.3183098733425140380859375) * _2855) * _2856) + _2602;
        _2666 = (((cbLight._m0[_2837].y * 0.3183098733425140380859375) * _2855) * _2856) + _2604;
        _2668 = (((cbLight._m0[_2837].z * 0.3183098733425140380859375) * _2855) * _2856) + _2606;
    }
    uint _2671 = _2424 + 8u;
    float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _922) * 0.949999988079071044921875);
    float _2685 = _2684 * _2684;
    float _2686 = cbLight._m0[_2424].x + _999;
    float _2687 = cbLight._m0[_2424].y + _1000;
    float _2688 = cbLight._m0[_2424].z + _1001;
    float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
    float _2693 = _2692 * _2686;
    float _2694 = _2692 * _2687;
    float _2695 = _2692 * _2688;
    float _2696 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2424].xyz));
    float _4836 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _4847 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2700 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2701 = dot(vec3(_919, _920, _921), vec3(_2693, _2694, _2695));
    float _4858 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2705 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2693, _2694, _2695));
    float _4869 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2709 = _2685 * _2685;
    float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
    float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
    float _2722 = 0.959999978542327880859375 - _1079;
    float _2724 = 0.959999978542327880859375 - _1080;
    float _2725 = 0.959999978542327880859375 - _1081;
    float _2732 = 1.0 - _2685;
    float _2743 = (0.5 / (((_2700 * ((_2699 * _2732) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2732) + _2685) * _2699))) * _2699;
    float _4880 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2745 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
    uint _2759 = _2424 + 9u;
    float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _922) * 0.949999988079071044921875);
    float _2771 = _2770 * _2770;
    float _2772 = cbLight._m0[_2464].x + _999;
    float _2773 = cbLight._m0[_2464].y + _1000;
    float _2774 = cbLight._m0[_2464].z + _1001;
    float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
    float _2779 = _2778 * _2772;
    float _2780 = _2778 * _2773;
    float _2781 = _2778 * _2774;
    float _2782 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2464].xyz));
    float _4891 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2785 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2786 = dot(vec3(_919, _920, _921), vec3(_2779, _2780, _2781));
    float _4902 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2790 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2779, _2780, _2781));
    float _4913 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2794 = _2771 * _2771;
    float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
    float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0);
    float _2812 = 1.0 - _2771;
    float _2822 = (0.5 / (((_2700 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2812) + _2771) * _2785))) * _2785;
    float _4924 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
    float _2834 = (((((_2805 * _2722) + _1082) * cbLight._m0[_2759].x) * _2824) * _2447) + ((((cbLight._m0[_2671].x * _2413) * ((_2721 * _2722) + _1082)) * _2745) * _2460);
    float _2835 = (((((_2805 * _2724) + _1084) * cbLight._m0[_2759].y) * _2824) * _2447) + ((((cbLight._m0[_2671].y * _2415) * ((_2721 * _2724) + _1084)) * _2745) * _2460);
    float _2836 = (((((_2805 * _2725) + _1085) * cbLight._m0[_2759].z) * _2824) * _2447) + ((((cbLight._m0[_2671].z * _2417) * ((_2721 * _2725) + _1085)) * _2745) * _2460);
    float _2892;
    float _2894;
    float _2896;
    if (_2500)
    {
        _2892 = _2834;
        _2894 = _2835;
        _2896 = _2836;
    }
    else
    {
        uint _2898 = _2424 + 2u;
        uint _2902 = _2424 + 10u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _922) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _999;
        float _2919 = cbLight._m0[_2898].y + _1000;
        float _2920 = cbLight._m0[_2898].z + _1001;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2898].xyz));
        float _4935 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2932 = dot(vec3(_919, _920, _921), vec3(_2925, _2926, _2927));
        float _4946 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4957 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2951 = exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0);
        float _2958 = 1.0 - _2917;
        float _2968 = (0.5 / (((_2700 * ((_2931 * _2958) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2958) + _2917) * _2931))) * _2931;
        float _4968 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2970 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2971 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
        _2892 = (((((_2951 * _2722) + _1082) * cbLight._m0[_2902].x) * _2970) * _2971) + _2834;
        _2894 = (((((_2951 * _2724) + _1084) * cbLight._m0[_2902].y) * _2970) * _2971) + _2835;
        _2896 = (((((_2951 * _2725) + _1085) * cbLight._m0[_2902].z) * _2970) * _2971) + _2836;
    }
    float _3002;
    float _3004;
    float _3006;
    if (_2609)
    {
        _3002 = _2892;
        _3004 = _2894;
        _3006 = _2896;
    }
    else
    {
        uint _3013 = _2424 + 3u;
        uint _3017 = _2424 + 11u;
        float _3031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3013].w)) * _922) * 0.949999988079071044921875);
        float _3032 = _3031 * _3031;
        float _3033 = cbLight._m0[_3013].x + _999;
        float _3034 = cbLight._m0[_3013].y + _1000;
        float _3035 = cbLight._m0[_3013].z + _1001;
        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
        float _3040 = _3039 * _3033;
        float _3041 = _3039 * _3034;
        float _3042 = _3039 * _3035;
        float _3043 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_3013].xyz));
        float _4984 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3046 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _3047 = dot(vec3(_919, _920, _921), vec3(_3040, _3041, _3042));
        float _4995 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3050 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _3051 = dot(vec3(cbLight._m0[_3013].xyz), vec3(_3040, _3041, _3042));
        float _5006 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3055 = _3032 * _3032;
        float _3059 = ((_3050 * _3050) * (_3055 + (-1.0))) + 1.0;
        float _3066 = exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0);
        float _3073 = 1.0 - _3032;
        float _3083 = (0.5 / (((_2700 * ((_3046 * _3073) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _3073) + _3032) * _3046))) * _3046;
        float _5017 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3085 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_3055 / ((_3059 * _3059) * 3.141590118408203125));
        float _3086 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _3002 = (((((_3066 * _2722) + _1082) * cbLight._m0[_3017].x) * _3085) * _3086) + _2892;
        _3004 = (((((_3066 * _2724) + _1084) * cbLight._m0[_3017].y) * _3085) * _3086) + _2894;
        _3006 = (((((_3066 * _2725) + _1085) * cbLight._m0[_3017].z) * _3085) * _3086) + _2896;
    }
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    if (_2422.y == 0u)
    {
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.x;
        uint _3119 = uint((float(_3107.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _3108))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _3108)));
        float _3129 = (log2(_2200 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3130 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        uint _3133 = uint(isnan(14.0) ? _3130 : (isnan(_3130) ? 14.0 : min(_3130, 14.0)));
        uvec4 _3138 = texelFetch(g_lightClusterGridBuffer, int(((_3133 << 2u) + (_3119 << 6u)) >> 2u));
        uint _3139 = _3138.x;
        uint _3140 = _3107.z;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((((1u << ((_3140 >> 4u) & 15u)) + 4294967295u) & _3139) == 0u) || ((_3140 & 240u) == 0u))
        {
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
        }
        else
        {
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3230;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            uint _3378 = 0u;
            uint _3387;
            bool _3388;
            for (;;)
            {
                _3387 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                _3388 = _3387 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3388)
                {
                    frontier_phi_71_pred = _3377;
                    frontier_phi_71_pred_1 = _3376;
                    frontier_phi_71_pred_2 = _3375;
                    frontier_phi_71_pred_3 = _3374;
                    frontier_phi_71_pred_4 = _3373;
                    frontier_phi_71_pred_5 = _3372;
                }
                else
                {
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    uint _3523;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3387;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    for (;;)
                    {
                        uint _3527 = uint(findLSB(_3523)) + (_3378 << 5u);
                        uint _3524 = (_3523 + 4294967295u) & _3523;
                        uint _3529 = _3527 * 48u;
                        vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3549 = (_3527 * 48u) + 4u;
                        vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3549)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 3u)).x));
                        uint _3568 = (_3527 * 48u) + 8u;
                        vec3 _3579 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3568)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 2u)).x));
                        float _3583 = _3543.x - _2198;
                        float _3584 = _3543.y - _2199;
                        float _3585 = _3543.z - _2200;
                        float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                        float _3589 = inversesqrt(_3586);
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3593 = dot(vec3(_1038, _1041, _1044), vec3(_3590, _3591, _3592));
                        float _3598 = 1.0 - (_3586 * _3543.w);
                        float _5043 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3600 = sqrt(_3586) * _3562.w;
                        float _3603 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                        float _3604 = _3603 * _3603;
                        float _3607 = ((1.0 - _3604) * _3593) + _3604;
                        float _3610 = _3600 * _3600;
                        float _3614 = ((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3599) / ((_3610 * 0.699999988079071044921875) + 1.0);
                        float _3618 = (-0.0) - _2198;
                        float _3619 = (-0.0) - _2199;
                        float _3620 = (-0.0) - _2200;
                        float _3624 = inversesqrt(dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620)));
                        float _3625 = _3624 * _3618;
                        float _3626 = _3624 * _3619;
                        float _3627 = _3624 * _3620;
                        float _3634 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                        float _3635 = 1.0 - _1113;
                        float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                        float _3643 = _3642 * _3642;
                        float _3644 = _3643 * _3643;
                        float _3645 = _3625 + _3590;
                        float _3646 = _3626 + _3591;
                        float _3647 = _3627 + _3592;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3655 = dot(vec3(_1038, _1041, _1044), vec3(_3625, _3626, _3627));
                        float _5059 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3658 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3659 = dot(vec3(_1038, _1041, _1044), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                        float _5070 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                        float _3667 = _3603 * _3643;
                        float _3668 = _3667 * _3667;
                        float _3671 = ((1.0 - _3668) * _3593) + _3668;
                        float _5081 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3672 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3673 = 1.0 - _3643;
                        float _3683 = (0.5 / (((_3672 * ((_3658 * _3673) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3643) * _3658))) * _3672;
                        float _5092 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3694 = (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) / ((_3666 * _3666) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125))) * _3599;
                        _3447 = (_3614 * _3562.x) + _3520;
                        _3448 = (_3614 * _3562.y) + _3521;
                        _3449 = (_3614 * _3562.z) + _3522;
                        _3444 = (_3694 * _3579.x) + _3517;
                        _3445 = (_3694 * _3579.y) + _3518;
                        _3446 = (_3694 * _3579.z) + _3519;
                        if (_3524 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3524;
                        }
                    }
                    frontier_phi_71_pred = _3449;
                    frontier_phi_71_pred_1 = _3448;
                    frontier_phi_71_pred_2 = _3447;
                    frontier_phi_71_pred_3 = _3446;
                    frontier_phi_71_pred_4 = _3445;
                    frontier_phi_71_pred_5 = _3444;
                }
                _3230 = frontier_phi_71_pred;
                _3228 = frontier_phi_71_pred_1;
                _3226 = frontier_phi_71_pred_2;
                _3224 = frontier_phi_71_pred_3;
                _3222 = frontier_phi_71_pred_4;
                _3220 = frontier_phi_71_pred_5;
                uint _3379 = _3378 + 1u;
                if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3372 = _3220;
                    _3373 = _3222;
                    _3374 = _3224;
                    _3375 = _3226;
                    _3376 = _3228;
                    _3377 = _3230;
                    _3378 = _3379;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
        }
        uvec4 _3233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3234 = _3233.z;
        uint _3236 = (_3234 >> 8u) & 15u;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        if (((4294967295u << _3236) & _3139) == 0u)
        {
            _3340 = _3219;
            _3342 = _3221;
            _3344 = _3223;
            _3346 = _3225;
            _3348 = _3227;
            _3350 = _3229;
        }
        else
        {
            float _3365 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
            float _3366 = _3365 * _2198;
            float _3367 = _3365 * _2199;
            float _3368 = _3365 * _2200;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3236 < ((_3234 >> 12u) & 15u))
            {
                float _3341;
                float _3343;
                float _3345;
                float _3347;
                float _3349;
                float _3351;
                float _3500 = _3219;
                float _3501 = _3221;
                float _3502 = _3223;
                float _3503 = _3225;
                float _3504 = _3227;
                float _3505 = _3229;
                uint _3506 = _3236;
                uint _3515;
                bool _3516;
                for (;;)
                {
                    _3515 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3506 << 2u)) >> 2u)).x;
                    _3516 = _3515 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3516)
                    {
                        frontier_phi_82_pred = _3505;
                        frontier_phi_82_pred_1 = _3504;
                        frontier_phi_82_pred_2 = _3503;
                        frontier_phi_82_pred_3 = _3502;
                        frontier_phi_82_pred_4 = _3501;
                        frontier_phi_82_pred_5 = _3500;
                    }
                    else
                    {
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _3721 = _3500;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        float _3724 = _3503;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        uint _3727 = _3515;
                        uint _3728;
                        vec4 _3753;
                        float _3754;
                        vec4 _3769;
                        vec3 _3781;
                        vec4 _3796;
                        vec4 _3811;
                        float _3857;
                        bool _3858;
                        for (;;)
                        {
                            uint _3738 = ((_3506 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3727));
                            _3728 = (_3727 + 4294967295u) & _3727;
                            uint _3740 = _3738 * 40u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            _3754 = _3753.w;
                            uint _3756 = (_3738 * 40u) + 4u;
                            _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3771 = (_3738 * 40u) + 8u;
                            _3781 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x));
                            uint _3783 = (_3738 * 40u) + 16u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3738 * 40u) + 20u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3738 * 40u) + 24u;
                            vec4 _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3832 = (_3738 * 40u) + 28u;
                            vec4 _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            _3857 = fma(_2200, _3845.z, fma(_2199, _3845.y, _3845.x * _2198)) + _3845.w;
                            _3858 = !((fma(_2200, _3826.z, fma(_2199, _3826.y, _3826.x * _2198)) + _3826.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3858)
                            {
                                float _3885 = _3753.x - _2198;
                                float _3886 = _3753.y - _2199;
                                float _3887 = _3753.z - _2200;
                                float _3888 = dot(vec3(_3885, _3886, _3887), vec3(_3885, _3886, _3887));
                                float _3891 = inversesqrt(_3888);
                                float _3892 = _3891 * _3885;
                                float _3893 = _3891 * _3886;
                                float _3894 = _3891 * _3887;
                                float _3898 = 1.0 - (_3888 / (_3754 * _3754));
                                float _5103 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3903 = sqrt(_3888) * _3769.w;
                                float _3905 = 1.39999997615814208984375 / (_3903 + 1.39999997615814208984375);
                                float _3906 = _3905 * _3905;
                                float _3909 = ((1.0 - _3906) * dot(vec3(_3892, _3893, _3894), vec3(_1038, _1041, _1044))) + _3906;
                                float _3912 = _3903 * _3903;
                                float _3916 = (fma(_2200, _3796.z, fma(_2199, _3796.y, _3796.x * _2198)) + _3796.w) / _3857;
                                float _3917 = (fma(_2200, _3811.z, fma(_2199, _3811.y, _3811.x * _2198)) + _3811.w) / _3857;
                                float _3921 = 1.0 - dot(vec2(_3916, _3917), vec2(_3916, _3917));
                                float _5119 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3923 = _3922 * (((isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0))) * _3899) / ((_3912 * 0.699999988079071044921875) + 1.0));
                                float _3935 = exp2(log2(1.0 / ((_3912 * 3.5) + 5.0)) * 0.25);
                                float _3936 = 1.0 - _1113;
                                float _3943 = sqrt(1.0 - ((1.0 - (_3936 * _3936)) * (1.0 - (_3935 * _3935))));
                                float _3944 = _3943 * _3943;
                                float _3945 = _3944 * _3944;
                                float _3946 = _3892 - _3366;
                                float _3947 = _3893 - _3367;
                                float _3948 = _3894 - _3368;
                                float _3952 = inversesqrt(dot(vec3(_3946, _3947, _3948), vec3(_3946, _3947, _3948)));
                                float _3956 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3366, (-0.0) - _3367, (-0.0) - _3368));
                                float _5130 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3959 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3960 = dot(vec3(_1038, _1041, _1044), vec3(_3952 * _3946, _3952 * _3947, _3952 * _3948));
                                float _5141 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3963 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3967 = ((_3963 * _3963) * (_3945 + (-1.0))) + 1.0;
                                float _3968 = _3905 * _3944;
                                float _3969 = _3968 * _3968;
                                float _3975 = ((1.0 - _3969) * dot(vec3(_1038, _1041, _1044), vec3(_3892, _3893, _3894))) + _3969;
                                float _5152 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3976 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3977 = 1.0 - _3944;
                                float _3987 = (0.5 / (((_3976 * ((_3959 * _3977) + _3944)) + 9.9999999392252902907785028219223e-09) + (((_3976 * _3977) + _3944) * _3959))) * _3976;
                                float _5163 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3997 = (_3922 * _3899) * (((_3945 * 3.1415927410125732421875) * (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) / ((_3967 * _3967) * ((_3912 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3923 * _3769.z;
                                frontier_phi_88_pred_1 = _3923 * _3769.y;
                                frontier_phi_88_pred_2 = _3923 * _3769.x;
                                frontier_phi_88_pred_3 = _3997 * _3781.z;
                                frontier_phi_88_pred_4 = _3997 * _3781.y;
                                frontier_phi_88_pred_5 = _3997 * _3781.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4006 = frontier_phi_88_pred;
                            _4005 = frontier_phi_88_pred_1;
                            _4004 = frontier_phi_88_pred_2;
                            _4003 = frontier_phi_88_pred_3;
                            _4002 = frontier_phi_88_pred_4;
                            _4001 = frontier_phi_88_pred_5;
                            _3711 = _4004 + _3724;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            if (_3728 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3728;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3713;
                        frontier_phi_82_pred_1 = _3712;
                        frontier_phi_82_pred_2 = _3711;
                        frontier_phi_82_pred_3 = _3710;
                        frontier_phi_82_pred_4 = _3709;
                        frontier_phi_82_pred_5 = _3708;
                    }
                    _3351 = frontier_phi_82_pred;
                    _3349 = frontier_phi_82_pred_1;
                    _3347 = frontier_phi_82_pred_2;
                    _3345 = frontier_phi_82_pred_3;
                    _3343 = frontier_phi_82_pred_4;
                    _3341 = frontier_phi_82_pred_5;
                    uint _3507 = _3506 + 1u;
                    if (_3507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3500 = _3341;
                        _3501 = _3343;
                        _3502 = _3345;
                        _3503 = _3347;
                        _3504 = _3349;
                        _3505 = _3351;
                        _3506 = _3507;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3347;
                frontier_phi_63_64_ladder_1 = _3351;
                frontier_phi_63_64_ladder_2 = _3349;
                frontier_phi_63_64_ladder_3 = _3345;
                frontier_phi_63_64_ladder_4 = _3343;
                frontier_phi_63_64_ladder_5 = _3341;
            }
            else
            {
                frontier_phi_63_64_ladder = _3225;
                frontier_phi_63_64_ladder_1 = _3229;
                frontier_phi_63_64_ladder_2 = _3227;
                frontier_phi_63_64_ladder_3 = _3223;
                frontier_phi_63_64_ladder_4 = _3221;
                frontier_phi_63_64_ladder_5 = _3219;
            }
            _3340 = frontier_phi_63_64_ladder_5;
            _3342 = frontier_phi_63_64_ladder_4;
            _3344 = frontier_phi_63_64_ladder_3;
            _3346 = frontier_phi_63_64_ladder;
            _3348 = frontier_phi_63_64_ladder_2;
            _3350 = frontier_phi_63_64_ladder_1;
        }
        float _3355 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
        _3152 = (_3355 * _3346) + _2664;
        _3154 = (_3355 * _3348) + _2666;
        _3156 = (_3355 * _3350) + _2668;
        _3158 = ((_3340 * _1082) * _3355) + _3002;
        _3160 = ((_3342 * _1084) * _3355) + _3004;
        _3162 = ((_3344 * _1085) * _3355) + _3006;
    }
    else
    {
        _3152 = _2664;
        _3154 = _2666;
        _3156 = _2668;
        _3158 = _3002;
        _3160 = _3004;
        _3162 = _3006;
    }
    float _5179 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _5190 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _5201 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _3179 = ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3152 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1097))) + ((_3158 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1932)) * cbPerFrame._m0[3u].x);
    float _3180 = ((isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3154 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1097))) + ((_3160 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1932)) * cbPerFrame._m0[3u].x);
    float _3181 = ((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3156 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1097))) + ((_3162 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1932)) * cbPerFrame._m0[3u].x);
    uint _3182 = _1057 + 6u;
    float _3190 = _1019 / cbSceneParam._m0[86u].x;
    float _3191 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _3205 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3190, _3191, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3207 = _3205.x;
    float _3208 = _3205.y;
    float _3209 = _3205.z;
    float _3210 = _3205.w;
    float _3282;
    float _3284;
    float _3286;
    float _3288;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _3244 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _3245 = _3244 / _942;
        float _3256 = _3245 * _992;
        float _3257 = _993 * _3245;
        float _3258 = (-0.0) - _3257;
        float _3260 = _3245 * _994;
        float _3262 = (cbSceneParam._m0[77u].w * _3258) / _3244;
        float _3263 = _3262 + cbSceneParam._m0[79u].w;
        float _3264 = cbSceneParam._m0[79u].w - _3257;
        float _3270 = sqrt(((_3256 * _3256) + (_3257 * _3257)) + (_3260 * _3260));
        float _3273 = (1.0 - (cbSceneParam._m0[77u].w / _3244)) * _3270;
        float _3278 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3280 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3457;
        if (abs((_3258 - _3262) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3457 = ((((_3263 > 0.0) ? exp2(_3278 * _3263) : (2.0 - exp2(_3280 * _3263))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3273;
        }
        else
        {
            float _3401 = 1.0 / cbSceneParam._m0[80u].x;
            float _3402 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : max(_3263, _3264));
            float _3403 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : min(_3263, _3264));
            float _3412 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : min(_3402, 0.0));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            _3457 = ((abs(_3270 / _3258) * cbSceneParam._m0[80u].y) * ((((_3412 - _3413) * 2.0) - ((exp2(_3278 * (isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0)))) - exp2(_3278 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))))) * _3401)) - ((exp2(_3280 * _3412) - exp2(_3280 * _3413)) * _3401))) + (_3273 * cbSceneParam._m0[80u].z);
        }
        vec4 _3459 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3190, _3191, 1.0), 0.0);
        float _3468 = exp2((_3457 * (-1.44269502162933349609375)) * (1.0 - _3459.w));
        float _3469 = log2(_3468);
        float _3485 = log2(_3210);
        _3282 = (exp2(_3485 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].x)) * _3459.x) / cbSceneParam._m0[78u].x)) + _3207;
        _3284 = (exp2(_3485 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].y)) * _3459.y) / cbSceneParam._m0[78u].y)) + _3208;
        _3286 = (exp2(_3485 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].z)) * _3459.z) / cbSceneParam._m0[78u].z)) + _3209;
        _3288 = _3468 * _3210;
    }
    else
    {
        _3282 = _3207;
        _3284 = _3208;
        _3286 = _3209;
        _3288 = _3210;
    }
    bool _3495;
    vec4 _3298;
    vec4 _3320;
    float _3322;
    float _3326;
    float _3327;
    float _3328;
    float _3329;
    bool _3339;
    for (;;)
    {
        _3298 = cbMatDynParam._m0[0u];
        float _3300 = roundEven(_3298.y);
        bool _3301 = _3300 == 3.0;
        float _3302 = log2(_3288);
        float _3309 = exp2(_3302 * cbSceneParam._m0[78u].x) * _3179;
        float _3310 = exp2(_3302 * cbSceneParam._m0[78u].y) * _3180;
        float _3311 = exp2(_3302 * cbSceneParam._m0[78u].z) * _3181;
        float _3318 = _1008 + (-0.5);
        _3320 = cbMtdParam._m0[1u];
        _3322 = _3320.y * _3318;
        float _3325 = (_3300 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3326 = _3325 * (_3301 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3282)));
        _3327 = _3325 * (_3301 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3284)));
        _3328 = _3325 * (_3301 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3286)));
        _3329 = _3318 * 0.999000012874603271484375;
        _3339 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3339)
        {
            if ((cbInstanceData._m0[_1057 + 7u].x + _3329) < 0.5)
            {
                _3495 = true;
                break;
            }
        }
        uint _3436 = _1058 + uint(_3298.w);
        if ((cbInstanceData._m0[_3436].w < 1.0) && ((cbInstanceData._m0[_3436].w + _3329) < 0.5))
        {
            _3495 = true;
            break;
        }
        if ((_3322 + 1.0) < _3320.x)
        {
            _3495 = true;
            break;
        }
        _3495 = false;
        break;
    }
    float _3699;
    if (_3495)
    {
        discard_state = true;
        _3699 = 0.0;
    }
    else
    {
        _3699 = cbInstanceData._m0[_3182].w;
    }
    SV_Target.x = _3326;
    SV_Target.y = _3327;
    SV_Target.z = _3328;
    SV_Target.w = _3699;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3182].w;
    discard_exit();
}


