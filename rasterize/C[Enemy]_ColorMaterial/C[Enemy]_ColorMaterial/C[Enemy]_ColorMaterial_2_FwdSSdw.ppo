#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1489;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _307 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _311 = _307.z;
    float _324 = exp2(log2((1.0 - _311) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _342 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _354 = exp2(log2(_342.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _355 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = isnan(1.0) ? _355 : (isnan(_355) ? 1.0 : min(_355, 1.0));
    float _365 = exp2(log2(cbMtdParam._m0[23u].y * _311) * cbMtdParam._m0[22u].y);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0));
    float _388 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _389 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _390 = isnan(4.0) ? _389 : (isnan(_389) ? 4.0 : min(_389, 4.0));
    float _403 = floor(_390);
    vec4 _406 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _403));
    vec4 _430 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _441 = cbMtdParam._m0[9u].x * _430.x;
    float _442 = cbMtdParam._m0[9u].y * _430.y;
    float _443 = cbMtdParam._m0[9u].z * _430.z;
    float _450 = (((cbMtdParam._m0[10u].x * _406.x) - _441) * _367) + _441;
    float _451 = (((cbMtdParam._m0[10u].y * _406.y) - _442) * _367) + _442;
    float _452 = (((cbMtdParam._m0[10u].z * _406.z) - _443) * _367) + _443;
    float _458 = exp2(log2(_307.w) * cbMtdParam._m0[23u].w);
    vec4 _471 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _490 = (((cbMtdParam._m0[16u].x * _471.x) - _450) * _458) + _450;
    float _491 = (((cbMtdParam._m0[16u].y * _471.y) - _451) * _458) + _451;
    float _492 = (((cbMtdParam._m0[16u].z * _471.z) - _452) * _458) + _452;
    vec4 _505 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _525 = (((cbMtdParam._m0[19u].x * _505.x) - _490) * _356) + _490;
    float _526 = (((cbMtdParam._m0[19u].y * _505.y) - _491) * _356) + _491;
    float _527 = (((cbMtdParam._m0[19u].z * _505.z) - _492) * _356) + _492;
    vec4 _540 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _565 = (_342.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _540.x) - _525) * _326) + _525);
    float _567 = (_342.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _540.y) - _526) * _326) + _526);
    float _569 = (_342.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _540.z) - _527) * _326) + _527);
    vec4 _582 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _600 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _602 = _600 * (cbMtdParam._m0[24u].z + 1.0);
    float _3877 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _610 = (_603 * ((cbMtdParam._m0[11u].x * _582.x) - _565)) + _565;
    float _611 = (((cbMtdParam._m0[11u].y * _582.y) - _567) * _603) + _567;
    float _612 = (((cbMtdParam._m0[11u].z * _582.z) - _569) * _603) + _569;
    float _616 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _624 = (_616 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _616))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3888 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _632 = ((cbMtdParam._m0[21u].x - _610) * _625) + _610;
    float _633 = ((cbMtdParam._m0[21u].y - _611) * _625) + _611;
    float _634 = ((cbMtdParam._m0[21u].z - _612) * _625) + _612;
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[28u].w;
    _202[0u] = cbMtdParam._m0[29u].x;
    _201[1u] = cbMtdParam._m0[30u].w;
    _202[1u] = cbMtdParam._m0[31u].x;
    _201[2u] = cbMtdParam._m0[30u].y;
    _202[2u] = cbMtdParam._m0[30u].z;
    _201[3u] = cbMtdParam._m0[29u].w;
    _202[3u] = cbMtdParam._m0[30u].x;
    _201[4u] = cbMtdParam._m0[29u].y;
    _202[4u] = cbMtdParam._m0[29u].z;
    float _675 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    uint _677 = uint(int(isnan(4.0) ? _675 : (isnan(_675) ? 4.0 : min(_675, 4.0))));
    float _684 = ((_202[_677] - cbMtdParam._m0[22u].z) * _367) + cbMtdParam._m0[22u].z;
    float _687 = ((cbMtdParam._m0[22u].w - _684) * _458) + _684;
    float _690 = ((cbMtdParam._m0[25u].x - _687) * _356) + _687;
    float _693 = ((cbMtdParam._m0[26u].x - _690) * _326) + _690;
    float _698 = (cbMtdParam._m0[24u].y + 1.0) * _600;
    float _3909 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _701 = _693 - (_693 * _699);
    float _703 = _701 - (_701 * _616);
    vec4 _716 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _403));
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _742 = cbMtdParam._m0[22u].x + _734.z;
    float _745 = (((_716.z + _201[_677]) - _742) * _367) + _742;
    vec4 _758 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _769 = (((_758.z - _745) + cbMtdParam._m0[28u].y) * _458) + _745;
    float _775 = ((((_311 * 2.0) * _769) - _769) * cbMtdParam._m0[24u].w) + _769;
    vec4 _788 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _799 = (((cbMtdParam._m0[23u].z + _788.z) - _775) * _356) + _775;
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _823 = (((_812.z - _799) + cbMtdParam._m0[26u].y) * _326) + _799;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _847 = ((_835.z - _823) * _699) + _823;
    vec4 _862 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _876 = ((cbMtdParam._m0[27u].y * _616) * ((_862.z * cbMtdParam._m0[27u].x) - _847)) + _847;
    float _891 = ((_716.x - _736) * _367) + _736;
    float _892 = ((_716.y - _737) * _367) + _737;
    float _897 = ((_758.x - _891) * _458) + _891;
    float _898 = ((_758.y - _892) * _458) + _892;
    float _903 = ((_788.x - _897) * _356) + _897;
    float _904 = ((_788.y - _898) * _356) + _898;
    float _913 = ((((_812.x - _903) * _326) + _903) * 2.0) + (-1.0);
    float _914 = ((((_812.y - _904) * _326) + _904) * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _3920 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _920 = sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
    float _936 = (((cbMtdParam._m0[25u].y * ((_307.x * 2.0) + (-1.0))) + _913) + (((((_835.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _699)) + ((((_862.x * 2.0) + (-1.0)) * _616) * cbMtdParam._m0[26u].w);
    float _937 = (((cbMtdParam._m0[25u].y * ((_307.y * 2.0) + (-1.0))) + _914) + (((((_835.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _699)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_862.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _940 = fma(_920, _237 * NORMAL.x, fma(_937, _244 * TANGENT.x, (_230 * _222) * _936));
    float _943 = fma(_920, _237 * NORMAL.y, fma(_937, _244 * TANGENT.y, (_230 * _223) * _936));
    float _946 = fma(_920, _237 * NORMAL.z, fma(_937, _244 * TANGENT.z, (_230 * _224) * _936));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _3931 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _954 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3953 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3964 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3975 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _958 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _974 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1024 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1014);
    float _1025 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1014);
    float _1026 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1014);
    float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
    float _1031 = _1024 * _1030;
    float _1032 = _1025 * _1030;
    float _1033 = _1026 * _1030;
    float _1039 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1040 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1058 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1061 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1064 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1077 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1079 = (_1077 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1085 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1079].x;
    float _1086 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_1079].y;
    float _1087 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_1079].z;
    float _3986 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1091 = 1.0 - _958;
    float _1092 = _1088 * _1091;
    float _1093 = _1089 * _1091;
    float _1094 = _1090 * _1091;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _958;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _958;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _958;
    float _1102 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    float _1105 = _1101 + 0.039999999105930328369140625;
    vec4 _1114 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1039, cbSceneParam._m0[86u].y * _1040));
    float _1117 = _1114.x * TEXCOORD_3.w;
    float _1118 = dot(vec3(_951, _952, _953), vec3(_1031, _1032, _1033));
    float _1121 = _1118 * 2.0;
    float _1125 = (_1121 * _951) - _1031;
    float _1126 = (_1121 * _952) - _1032;
    float _1127 = (_1121 * _953) - _1033;
    float _1131 = abs(dot(vec3(_1031, _1032, _1033), vec3(_951, _952, _953)));
    float _4019 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1133 = sqrt(_954);
    float _1144 = exp2((_1133 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1133 * 3.0));
    float _1150 = (1.0 - _1144) * ((_1133 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1151 = _1144 * _1133;
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1488;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1213 = fma(_1187, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179));
        float _1217 = fma(_1187, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179));
        float _1221 = fma(_1187, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179));
        float _1246 = _1179 + _951;
        float _1247 = _1183 + _952;
        float _1248 = _1187 + _953;
        float _1258 = fma(_1248, cbModelParam._m0[26u].z, fma(_1247, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1246)) - _1213;
        float _1259 = fma(_1248, cbModelParam._m0[27u].z, fma(_1247, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1246)) - _1217;
        float _1260 = fma(_1248, cbModelParam._m0[28u].z, fma(_1247, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1246)) - _1221;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1213 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1217 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[34u].z) + ((((((_1221 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1316 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1282.x + (-0.5));
        float _1318 = _1316 * (_1282.y + (-0.5));
        float _1319 = _1316 * (_1282.z + (-0.5));
        float _1326 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1289.x + (-0.5));
        float _1328 = _1326 * (_1289.y + (-0.5));
        float _1329 = _1326 * (_1289.z + (-0.5));
        float _1336 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1296.x + (-0.5));
        float _1338 = _1336 * (_1296.y + (-0.5));
        float _1339 = _1336 * (_1296.z + (-0.5));
        float _1346 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1303.x + (-0.5));
        float _1348 = _1346 * (_1303.y + (-0.5));
        float _1349 = _1346 * (_1303.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1370 = (dot(vec3(_951, _952, _953), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1380 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4067 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1382 + 1.0))) + _1387) * _1350;
        float _1397 = _1318 * 0.5;
        float _1398 = _1328 * 0.5;
        float _1399 = _1338 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_951, _952, _953), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4100 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1424 + 1.0))) + _1429) * _1351;
        float _1439 = _1319 * 0.5;
        float _1440 = _1329 * 0.5;
        float _1441 = _1339 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_951, _952, _953), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4133 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1466 + 1.0))) + _1471) * _1352;
        _1488 = _1319;
        _1490 = _1318;
        _1491 = _1317;
        _1492 = _1329;
        _1493 = _1328;
        _1494 = _1327;
        _1495 = _1339;
        _1496 = _1338;
        _1497 = _1337;
        _1498 = _1352;
        _1499 = _1351;
        _1500 = _1350;
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1489;
        _1490 = _1489;
        _1491 = _1489;
        _1492 = _1489;
        _1493 = _1489;
        _1494 = _1489;
        _1495 = _1489;
        _1496 = _1489;
        _1497 = _1489;
        _1498 = _1489;
        _1499 = _1489;
        _1500 = _1489;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1187, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179));
        float _1530 = fma(_1187, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179));
        float _1534 = fma(_1187, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179));
        float _1557 = _1179 + _951;
        float _1558 = _1183 + _952;
        float _1559 = _1187 + _953;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_951, _952, _953), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4196 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_951, _952, _953), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4229 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_951, _952, _953), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4262 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1489;
        _1796 = _1489;
        _1797 = _1489;
        _1798 = _1489;
        _1799 = _1489;
        _1800 = _1489;
        _1801 = _1489;
        _1802 = _1489;
        _1803 = _1489;
        _1804 = _1489;
        _1805 = _1489;
        _1806 = _1489;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1501)) + _1501;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1502)) + _1502;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1503)) + _1503;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1125 * 0.5;
    float _1864 = _1126 * 0.5;
    float _1865 = _1127 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1488, _1492, _1495, _1498));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1187, cbModelParam._m0[13u].z, fma(_1183, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1187, cbModelParam._m0[14u].z, fma(_1183, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1187, cbModelParam._m0[15u].z, fma(_1183, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1127, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125));
        float _1993 = fma(_1127, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125));
        float _1996 = fma(_1127, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2024 = frontier_phi_14_12_ladder;
        }
        float _2248;
        if (_1993 > 0.0)
        {
            _2248 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2248 = frontier_phi_23_19_ladder;
        }
        float _2505;
        if (_1996 > 0.0)
        {
            _2505 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2505 = frontier_phi_35_30_ladder;
        }
        float _2507 = isnan(_2248) ? _2024 : (isnan(_2024) ? _2248 : min(_2024, _2248));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1990) + _1979;
        float _2513 = (_2508 * _1993) + _1983;
        float _2514 = (_2508 * _1996) + _1987;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2515;
        float _2519 = _2515 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 > _2519) || ((_2513 < _2517) || ((_2512 < _2517) || (_2512 > _2519))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2514, cbModelParam._m0[9u].z, fma(_2513, cbModelParam._m0[9u].y, _2512 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2514, cbModelParam._m0[10u].z, fma(_2513, cbModelParam._m0[10u].y, _2512 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2514, cbModelParam._m0[11u].z, fma(_2513, cbModelParam._m0[11u].y, _2512 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_13_35_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_13_35_ladder_2;
        _2014 = frontier_phi_13_35_ladder_1;
        _2016 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1125, _1126, _1127), _1932);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1187, cbModelParam._m0[21u].z, fma(_1183, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1187, cbModelParam._m0[22u].z, fma(_1183, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1187, cbModelParam._m0[23u].z, fma(_1183, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1127, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125));
        float _2089 = fma(_1127, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125));
        float _2092 = fma(_1127, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125));
        float _2253;
        if (_2086 > 0.0)
        {
            _2253 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2253 = frontier_phi_25_21_ladder;
        }
        float _2532;
        if (_2089 > 0.0)
        {
            _2532 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2532 = frontier_phi_37_32_ladder;
        }
        float _2745;
        if (_2092 > 0.0)
        {
            _2745 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2745 = frontier_phi_46_43_ladder;
        }
        float _2747 = isnan(_2532) ? _2253 : (isnan(_2253) ? _2532 : min(_2253, _2532));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2086) + _2075;
        float _2753 = (_2748 * _2089) + _2079;
        float _2754 = (_2748 * _2092) + _2083;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_22_46_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_22_46_ladder_2;
        _2113 = frontier_phi_22_46_ladder_1;
        _2115 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1125, _1126, _1127), _2021);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2128 = (((_1150 * _1102) + _1151) * _1117) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2130 = (((_1150 * _1104) + _1151) * _1117) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2132 = (((_1150 * _1105) + _1151) * _1117) * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2135 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2138 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2141 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    vec4 _2149 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1039, _1040));
    float _2151 = _2149.w;
    float _2163 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2151);
    float _2164 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2151);
    float _2165 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2151);
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_1077 + 5u]);
    uint _2171 = _2169.x * 14u;
    uint _2172 = _2171 + 13u;
    float _2179 = _1117 + (-1.0);
    float _2184 = (cbLight._m0[_2172].x * _2179) + 1.0;
    float _2185 = (cbLight._m0[_2172].y * _2179) + 1.0;
    float _2186 = (cbLight._m0[_2172].z * _2179) + 1.0;
    float _2187 = (cbLight._m0[_2172].w * _2179) + 1.0;
    uint _2188 = _2171 + 5u;
    float _2194 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2198 = _2171 + 4u;
    float _2207 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2211 = _2171 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_951, _952, _953));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_951, _952, _953));
    float _4398 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4409 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2188].x * _2194) * _2232) + (((cbLight._m0[_2198].x * _2163) * _2207) * _2230);
    float _2240 = ((_2194 * cbLight._m0[_2188].y) * _2232) + (((cbLight._m0[_2198].y * _2164) * _2207) * _2230);
    float _2241 = ((_2194 * cbLight._m0[_2188].z) * _2232) + (((cbLight._m0[_2198].z * _2165) * _2207) * _2230);
    uvec4 _2245 = floatBitsToUint(cbLight._m0[_2171 + 12u]);
    bool _2247 = _2245.x == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2247)
    {
        _2258 = _2239;
        _2260 = _2240;
        _2262 = _2241;
    }
    else
    {
        uint _2266 = _2171 + 6u;
        float _2282 = (dot(vec3(cbLight._m0[_2171 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4420 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2285 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2258 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2239;
        _2260 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2240;
        _2262 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2241;
    }
    bool _2265 = _2245.y == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2265)
    {
        _2303 = _2258;
        _2305 = _2260;
        _2307 = _2262;
    }
    else
    {
        uint _2476 = _2171 + 7u;
        float _2492 = (dot(vec3(cbLight._m0[_2171 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4436 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2495 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2303 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2258;
        _2305 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2260;
        _2307 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2262;
    }
    uint _2310 = _2171 + 8u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _954) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2171].x + _1031;
    float _2326 = cbLight._m0[_2171].y + _1032;
    float _2327 = cbLight._m0[_2171].z + _1033;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2171].xyz));
    float _4452 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _2339 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2340 = dot(vec3(_951, _952, _953), vec3(_2332, _2333, _2334));
    float _4474 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2332, _2333, _2334));
    float _4485 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2324 * _2324;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2361 = 0.959999978542327880859375 - _1099;
    float _2363 = 0.959999978542327880859375 - _1100;
    float _2364 = 0.959999978542327880859375 - _1101;
    float _2371 = 1.0 - _2324;
    float _2382 = (0.5 / (((_2339 * ((_2338 * _2371) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2371) + _2324) * _2338))) * _2338;
    float _4496 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2384 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    uint _2398 = _2171 + 9u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _954) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2211].x + _1031;
    float _2412 = cbLight._m0[_2211].y + _1032;
    float _2413 = cbLight._m0[_2211].z + _1033;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2211].xyz));
    float _4507 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2425 = dot(vec3(_951, _952, _953), vec3(_2418, _2419, _2420));
    float _4518 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2418, _2419, _2420));
    float _4529 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2410 * _2410;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2451 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2339 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2451) + _2410) * _2424))) * _2424;
    float _4540 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    float _2473 = (((((_2444 * _2361) + _1102) * cbLight._m0[_2398].x) * _2463) * _2194) + ((((cbLight._m0[_2310].x * _2163) * ((_2360 * _2361) + _1102)) * _2384) * _2207);
    float _2474 = (((((_2444 * _2363) + _1104) * cbLight._m0[_2398].y) * _2463) * _2194) + ((((cbLight._m0[_2310].y * _2164) * ((_2360 * _2363) + _1104)) * _2384) * _2207);
    float _2475 = (((((_2444 * _2364) + _1105) * cbLight._m0[_2398].z) * _2463) * _2194) + ((((cbLight._m0[_2310].z * _2165) * ((_2360 * _2364) + _1105)) * _2384) * _2207);
    float _2537;
    float _2539;
    float _2541;
    if (_2247)
    {
        _2537 = _2473;
        _2539 = _2474;
        _2541 = _2475;
    }
    else
    {
        uint _2543 = _2171 + 2u;
        uint _2547 = _2171 + 10u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _954) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _1031;
        float _2564 = cbLight._m0[_2543].y + _1032;
        float _2565 = cbLight._m0[_2543].z + _1033;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2543].xyz));
        float _4551 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2577 = dot(vec3(_951, _952, _953), vec3(_2570, _2571, _2572));
        float _4562 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4573 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2339 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2603) + _2562) * _2576))) * _2576;
        float _4584 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2537 = (((((_2596 * _2361) + _1102) * cbLight._m0[_2547].x) * _2615) * _2616) + _2473;
        _2539 = (((((_2596 * _2363) + _1104) * cbLight._m0[_2547].y) * _2615) * _2616) + _2474;
        _2541 = (((((_2596 * _2364) + _1105) * cbLight._m0[_2547].z) * _2615) * _2616) + _2475;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2265)
    {
        _2651 = _2537;
        _2653 = _2539;
        _2655 = _2541;
    }
    else
    {
        uint _2662 = _2171 + 3u;
        uint _2666 = _2171 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _954) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _1031;
        float _2683 = cbLight._m0[_2662].y + _1032;
        float _2684 = cbLight._m0[_2662].z + _1033;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2662].xyz));
        float _4600 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2696 = dot(vec3(_951, _952, _953), vec3(_2689, _2690, _2691));
        float _4611 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4622 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
        float _2722 = 1.0 - _2681;
        float _2732 = (0.5 / (((_2339 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2722) + _2681) * _2695))) * _2695;
        float _4633 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2651 = (((((_2715 * _2361) + _1102) * cbLight._m0[_2666].x) * _2734) * _2735) + _2537;
        _2653 = (((((_2715 * _2363) + _1104) * cbLight._m0[_2666].y) * _2734) * _2735) + _2539;
        _2655 = (((((_2715 * _2364) + _1105) * cbLight._m0[_2666].z) * _2734) * _2735) + _2541;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2169.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1040) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1039) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3119)
                {
                    frontier_phi_61_pred = _3103;
                    frontier_phi_61_pred_1 = _3108;
                    frontier_phi_61_pred_2 = _3107;
                    frontier_phi_61_pred_3 = _3106;
                    frontier_phi_61_pred_4 = _3105;
                    frontier_phi_61_pred_5 = _3104;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3118;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3109 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2811;
                        float _3294 = _3253.y - _2812;
                        float _3295 = _3253.z - _2813;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_1058, _1061, _1064), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4659 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2811;
                        float _3329 = (-0.0) - _2812;
                        float _3330 = (-0.0) - _2813;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3345 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _1133;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_1058, _1061, _1064), vec3(_3335, _3336, _3337));
                        float _4675 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3370 = dot(vec3(_1058, _1061, _1064), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4686 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3313 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3303) + _3379;
                        float _4697 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4708 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3377 * _3377) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3162 = (_3324 * _3272.x) + _3230;
                        _3163 = (_3324 * _3272.y) + _3231;
                        _3164 = (_3324 * _3272.z) + _3232;
                        _3159 = (_3405 * _3289.x) + _3227;
                        _3160 = (_3405 * _3289.y) + _3228;
                        _3161 = (_3405 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_61_pred = _3159;
                    frontier_phi_61_pred_1 = _3164;
                    frontier_phi_61_pred_2 = _3163;
                    frontier_phi_61_pred_3 = _3162;
                    frontier_phi_61_pred_4 = _3161;
                    frontier_phi_61_pred_5 = _3160;
                }
                _2959 = frontier_phi_61_pred;
                _2969 = frontier_phi_61_pred_1;
                _2967 = frontier_phi_61_pred_2;
                _2965 = frontier_phi_61_pred_3;
                _2963 = frontier_phi_61_pred_4;
                _2961 = frontier_phi_61_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2959;
                    _3104 = _2961;
                    _3105 = _2963;
                    _3106 = _2965;
                    _3107 = _2967;
                    _3108 = _2969;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2975) & _2857) == 0u)
        {
            _3071 = _2958;
            _3073 = _2960;
            _3075 = _2962;
            _3077 = _2964;
            _3079 = _2966;
            _3081 = _2968;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3097 = _3096 * _2811;
            float _3098 = _3096 * _2812;
            float _3099 = _3096 * _2813;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3210 = _2958;
                float _3211 = _2960;
                float _3212 = _2962;
                float _3213 = _2964;
                float _3214 = _2966;
                float _3215 = _2968;
                uint _3216 = _2975;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3226)
                    {
                        frontier_phi_67_pred = _3213;
                        frontier_phi_67_pred_1 = _3214;
                        frontier_phi_67_pred_2 = _3215;
                        frontier_phi_67_pred_3 = _3212;
                        frontier_phi_67_pred_4 = _3211;
                        frontier_phi_67_pred_5 = _3210;
                    }
                    else
                    {
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        float _3428 = _3215;
                        uint _3429 = _3225;
                        uint _3430;
                        vec4 _3455;
                        float _3456;
                        vec4 _3471;
                        vec3 _3483;
                        vec4 _3498;
                        vec4 _3513;
                        float _3559;
                        bool _3560;
                        for (;;)
                        {
                            uint _3440 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3429));
                            _3430 = (_3429 + 4294967295u) & _3429;
                            uint _3442 = _3440 * 40u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3456 = _3455.w;
                            uint _3458 = (_3440 * 40u) + 4u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3440 * 40u) + 8u;
                            _3483 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x));
                            uint _3485 = (_3440 * 40u) + 16u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3440 * 40u) + 20u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3440 * 40u) + 24u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3534 = (_3440 * 40u) + 28u;
                            vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3559 = fma(_2813, _3547.z, fma(_2812, _3547.y, _3547.x * _2811)) + _3547.w;
                            _3560 = !((fma(_2813, _3528.z, fma(_2812, _3528.y, _3528.x * _2811)) + _3528.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3560)
                            {
                                float _3587 = _3455.x - _2811;
                                float _3588 = _3455.y - _2812;
                                float _3589 = _3455.z - _2813;
                                float _3590 = dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589));
                                float _3593 = inversesqrt(_3590);
                                float _3594 = _3593 * _3587;
                                float _3595 = _3593 * _3588;
                                float _3596 = _3593 * _3589;
                                float _3600 = 1.0 - (_3590 / (_3456 * _3456));
                                float _4719 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3605 = sqrt(_3590) * _3471.w;
                                float _3607 = 1.39999997615814208984375 / (_3605 + 1.39999997615814208984375);
                                float _3608 = _3607 * _3607;
                                float _3611 = ((1.0 - _3608) * dot(vec3(_3594, _3595, _3596), vec3(_1058, _1061, _1064))) + _3608;
                                float _3614 = _3605 * _3605;
                                float _3618 = (fma(_2813, _3498.z, fma(_2812, _3498.y, _3498.x * _2811)) + _3498.w) / _3559;
                                float _3619 = (fma(_2813, _3513.z, fma(_2812, _3513.y, _3513.x * _2811)) + _3513.w) / _3559;
                                float _3623 = 1.0 - dot(vec2(_3618, _3619), vec2(_3618, _3619));
                                float _4735 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3625 = _3624 * (((isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0))) * _3601) / ((_3614 * 0.699999988079071044921875) + 1.0));
                                float _3637 = exp2(log2(1.0 / ((_3614 * 3.5) + 5.0)) * 0.25);
                                float _3638 = 1.0 - _1133;
                                float _3645 = sqrt(1.0 - ((1.0 - (_3638 * _3638)) * (1.0 - (_3637 * _3637))));
                                float _3646 = _3645 * _3645;
                                float _3647 = _3646 * _3646;
                                float _3648 = _3594 - _3097;
                                float _3649 = _3595 - _3098;
                                float _3650 = _3596 - _3099;
                                float _3654 = inversesqrt(dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650)));
                                float _3658 = dot(vec3(_1058, _1061, _1064), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4746 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3662 = dot(vec3(_1058, _1061, _1064), vec3(_3654 * _3648, _3654 * _3649, _3654 * _3650));
                                float _4757 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3669 = ((_3665 * _3665) * (_3647 + (-1.0))) + 1.0;
                                float _3670 = _3607 * _3646;
                                float _3671 = _3670 * _3670;
                                float _3677 = ((1.0 - _3671) * dot(vec3(_1058, _1061, _1064), vec3(_3594, _3595, _3596))) + _3671;
                                float _4768 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3679 = 1.0 - _3646;
                                float _3689 = (0.5 / (((_3678 * ((_3661 * _3679) + _3646)) + 9.9999999392252902907785028219223e-09) + (((_3678 * _3679) + _3646) * _3661))) * _3678;
                                float _4779 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3699 = (_3624 * _3601) * (((_3647 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3669 * _3669) * ((_3614 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3699 * _3483.x;
                                frontier_phi_73_pred_1 = _3699 * _3483.y;
                                frontier_phi_73_pred_2 = _3625 * _3471.z;
                                frontier_phi_73_pred_3 = _3625 * _3471.y;
                                frontier_phi_73_pred_4 = _3625 * _3471.x;
                                frontier_phi_73_pred_5 = _3699 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_73_pred;
                            _3704 = frontier_phi_73_pred_1;
                            _3708 = frontier_phi_73_pred_2;
                            _3707 = frontier_phi_73_pred_3;
                            _3706 = frontier_phi_73_pred_4;
                            _3705 = frontier_phi_73_pred_5;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            if (_3430 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3430;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3413;
                        frontier_phi_67_pred_1 = _3414;
                        frontier_phi_67_pred_2 = _3415;
                        frontier_phi_67_pred_3 = _3412;
                        frontier_phi_67_pred_4 = _3411;
                        frontier_phi_67_pred_5 = _3410;
                    }
                    _3078 = frontier_phi_67_pred;
                    _3080 = frontier_phi_67_pred_1;
                    _3082 = frontier_phi_67_pred_2;
                    _3076 = frontier_phi_67_pred_3;
                    _3074 = frontier_phi_67_pred_4;
                    _3072 = frontier_phi_67_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3072;
                        _3211 = _3074;
                        _3212 = _3076;
                        _3213 = _3078;
                        _3214 = _3080;
                        _3215 = _3082;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3080;
                frontier_phi_55_56_ladder_1 = _3082;
                frontier_phi_55_56_ladder_2 = _3078;
                frontier_phi_55_56_ladder_3 = _3076;
                frontier_phi_55_56_ladder_4 = _3074;
                frontier_phi_55_56_ladder_5 = _3072;
            }
            else
            {
                frontier_phi_55_56_ladder = _2966;
                frontier_phi_55_56_ladder_1 = _2968;
                frontier_phi_55_56_ladder_2 = _2964;
                frontier_phi_55_56_ladder_3 = _2962;
                frontier_phi_55_56_ladder_4 = _2960;
                frontier_phi_55_56_ladder_5 = _2958;
            }
            _3071 = frontier_phi_55_56_ladder_5;
            _3073 = frontier_phi_55_56_ladder_4;
            _3075 = frontier_phi_55_56_ladder_3;
            _3077 = frontier_phi_55_56_ladder_2;
            _3079 = frontier_phi_55_56_ladder;
            _3081 = frontier_phi_55_56_ladder_1;
        }
        float _3086 = isnan(1.0) ? _1117 : (isnan(_1117) ? 1.0 : min(_1117, 1.0));
        _2870 = (_3086 * _3077) + _2303;
        _2872 = (_3086 * _3079) + _2305;
        _2874 = (_3086 * _3081) + _2307;
        _2876 = ((_3071 * _1102) * _3086) + _2651;
        _2878 = ((_3073 * _1104) * _3086) + _2653;
        _2880 = ((_3075 * _1105) * _3086) + _2655;
    }
    else
    {
        _2870 = _2303;
        _2872 = _2305;
        _2874 = _2307;
        _2876 = _2651;
        _2878 = _2653;
        _2880 = _2655;
    }
    float _4795 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4806 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _4817 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    uint _2900 = _1077 + 6u;
    float _2908 = _1039 / cbSceneParam._m0[86u].x;
    float _2909 = _1040 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _974 : (isnan(_974) ? cbSceneParam._m0[77u].w : min(_974, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_974 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_974) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _974 : min(cbSceneParam._m0[80u].w, _974));
        float _2984 = _2983 / _974;
        float _2995 = _2984 * _1024;
        float _2996 = _1025 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2999 = _2984 * _1026;
        float _3001 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3002 = _3001 + cbSceneParam._m0[79u].w;
        float _3003 = cbSceneParam._m0[79u].w - _2996;
        float _3009 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2999 * _2999));
        float _3012 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3009;
        float _3017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3172;
        if (abs((_2997 - _3001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3172 = ((((_3002 > 0.0) ? exp2(_3017 * _3002) : (2.0 - exp2(_3019 * _3002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3012;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : max(_3002, _3003));
            float _3134 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : min(_3002, _3003));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3172 = ((abs(_3009 / _2997) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3017 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3017 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3019 * _3143) - exp2(_3019 * _3144)) * _3132))) + (_3012 * cbSceneParam._m0[80u].z);
        }
        vec4 _3174 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3183 = exp2((_3172 * (-1.44269502162933349609375)) * (1.0 - _3174.w));
        float _3184 = log2(_3183);
        float _3200 = log2(_2928);
        _3021 = (exp2(_3200 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].x)) * _3174.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3023 = (exp2(_3200 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].y)) * _3174.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3025 = (exp2(_3200 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].z)) * _3174.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3027 = _3183 * _2928;
    }
    else
    {
        _3021 = _2925;
        _3023 = _2926;
        _3025 = _2927;
        _3027 = _2928;
    }
    float _3039 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3040 = _3039 == 3.0;
    float _3041 = log2(_3027);
    float _3048 = exp2(_3041 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2870 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1117))) + ((_2876 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3049 = exp2(_3041 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2872 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1117))) + ((_2878 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3050 = exp2(_3041 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2874 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1117))) + ((_2880 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3059 = (_3039 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3059 * (_3040 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
    SV_Target.y = _3059 * (_3040 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.z = _3059 * (_3040 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.w = cbInstanceData._m0[_2900].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2900].w;
}


