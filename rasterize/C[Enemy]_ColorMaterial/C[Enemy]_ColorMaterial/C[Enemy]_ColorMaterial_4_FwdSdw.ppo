#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1458;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _303 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _321 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _333 = exp2(log2(_321.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _344 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _346 = isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0));
    vec4 _358 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _361 = _358.y;
    float _364 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _368 = roundEven(5.0 - _364);
    float _369 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _370 = isnan(4.0) ? _369 : (isnan(_369) ? 4.0 : min(_369, 4.0));
    float _383 = floor(_370);
    vec4 _386 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _383));
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[17u].x;
    _199[0u] = cbMtdParam._m0[17u].y;
    _200[0u] = cbMtdParam._m0[17u].z;
    _198[1u] = cbMtdParam._m0[15u].x;
    _199[1u] = cbMtdParam._m0[15u].y;
    _200[1u] = cbMtdParam._m0[15u].z;
    _198[2u] = cbMtdParam._m0[14u].x;
    _199[2u] = cbMtdParam._m0[14u].y;
    _200[2u] = cbMtdParam._m0[14u].z;
    _198[3u] = cbMtdParam._m0[13u].x;
    _199[3u] = cbMtdParam._m0[13u].y;
    _200[3u] = cbMtdParam._m0[13u].z;
    _198[4u] = cbMtdParam._m0[12u].x;
    _199[4u] = cbMtdParam._m0[12u].y;
    _200[4u] = cbMtdParam._m0[12u].z;
    _198[5u] = cbMtdParam._m0[18u].x;
    _199[5u] = cbMtdParam._m0[18u].y;
    _200[5u] = cbMtdParam._m0[18u].z;
    float _450 = roundEven(_364);
    float _451 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    uint _453 = uint(int(isnan(5.0) ? _451 : (isnan(_451) ? 5.0 : min(_451, 5.0))));
    vec4 _483 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _494 = cbMtdParam._m0[9u].x * _483.x;
    float _495 = cbMtdParam._m0[9u].y * _483.y;
    float _496 = cbMtdParam._m0[9u].z * _483.z;
    float _503 = ((((((_198[_453] - cbMtdParam._m0[10u].x) * _361) + cbMtdParam._m0[10u].x) * _386.x) - _494) * _346) + _494;
    float _504 = ((((((_199[_453] - cbMtdParam._m0[10u].y) * _361) + cbMtdParam._m0[10u].y) * _386.y) - _495) * _346) + _495;
    float _505 = ((((((_200[_453] - cbMtdParam._m0[10u].z) * _361) + cbMtdParam._m0[10u].z) * _386.z) - _496) * _346) + _496;
    float _511 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _524 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _543 = (((cbMtdParam._m0[16u].x * _524.x) - _503) * _511) + _503;
    float _544 = (((cbMtdParam._m0[16u].y * _524.y) - _504) * _511) + _504;
    float _545 = (((cbMtdParam._m0[16u].z * _524.z) - _505) * _511) + _505;
    vec4 _558 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _578 = (((cbMtdParam._m0[19u].x * _558.x) - _543) * _335) + _543;
    float _579 = (((cbMtdParam._m0[19u].y * _558.y) - _544) * _335) + _544;
    float _580 = (((cbMtdParam._m0[19u].z * _558.z) - _545) * _335) + _545;
    vec4 _592 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _617 = (_321.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _592.x) - _578) * _305) + _578);
    float _619 = (_321.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _592.y) - _579) * _305) + _579);
    float _621 = (_321.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _592.z) - _580) * _305) + _580);
    float _625 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _634 = (_625 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _625))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4114 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _642 = ((cbMtdParam._m0[21u].x - _617) * _635) + _617;
    float _643 = ((cbMtdParam._m0[21u].y - _619) * _635) + _619;
    float _644 = ((cbMtdParam._m0[21u].z - _621) * _635) + _621;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _684 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    uint _686 = uint(int(isnan(4.0) ? _684 : (isnan(_684) ? 4.0 : min(_684, 4.0))));
    float _693 = ((_194[_686] - cbMtdParam._m0[22u].z) * _346) + cbMtdParam._m0[22u].z;
    float _696 = ((cbMtdParam._m0[22u].w - _693) * _511) + _693;
    float _699 = ((cbMtdParam._m0[25u].x - _696) * _335) + _696;
    float _702 = ((cbMtdParam._m0[26u].x - _699) * _305) + _699;
    float _704 = _702 - (_702 * _625);
    vec4 _720 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _383));
    vec4 _737 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _739 = _737.x;
    float _740 = _737.y;
    float _745 = cbMtdParam._m0[22u].x + _737.z;
    float _748 = (((_720.z + _193[_686]) - _745) * _346) + _745;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _771 = (((_760.z - _748) + cbMtdParam._m0[28u].y) * _511) + _748;
    float _777 = ((((_290 * 2.0) * _771) - _771) * cbMtdParam._m0[24u].w) + _771;
    vec4 _789 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _800 = (((cbMtdParam._m0[23u].z + _789.z) - _777) * _335) + _777;
    vec4 _813 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _824 = (((_813.z - _800) + cbMtdParam._m0[26u].y) * _305) + _800;
    vec4 _839 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _854 = ((cbMtdParam._m0[27u].y * _625) * ((_839.z * cbMtdParam._m0[27u].x) - _824)) + _824;
    float _866 = ((_720.x - _739) * _346) + _739;
    float _867 = ((_720.y - _740) * _346) + _740;
    float _872 = ((_760.x - _866) * _511) + _866;
    float _873 = ((_760.y - _867) * _511) + _867;
    float _878 = ((_789.x - _872) * _335) + _872;
    float _879 = ((_789.y - _873) * _335) + _873;
    float _888 = ((((_813.x - _878) * _305) + _878) * 2.0) + (-1.0);
    float _889 = ((((_813.y - _879) * _305) + _879) * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _4135 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _895 = sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))));
    float _905 = ((cbMtdParam._m0[25u].y * ((_286.x * 2.0) + (-1.0))) + _888) + ((((_839.x * 2.0) + (-1.0)) * _625) * cbMtdParam._m0[26u].w);
    float _906 = ((cbMtdParam._m0[25u].y * ((_286.y * 2.0) + (-1.0))) + _889) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_839.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _909 = fma(_895, _235 * NORMAL.x, fma(_906, _242 * TANGENT.x, (_228 * _220) * _905));
    float _912 = fma(_895, _235 * NORMAL.y, fma(_906, _242 * TANGENT.y, (_228 * _221) * _905));
    float _915 = fma(_895, _235 * NORMAL.z, fma(_906, _242 * TANGENT.z, (_228 * _222) * _905));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _4146 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _923 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4168 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4179 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4190 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _927 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _993 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _983);
    float _994 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _983);
    float _995 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _983);
    float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
    float _1000 = _993 * _999;
    float _1001 = _994 * _999;
    float _1002 = _995 * _999;
    float _1008 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1009 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1027 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1030 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1033 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1046 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1048 = (_1046 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1054 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1048].x;
    float _1055 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1048].y;
    float _1056 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1048].z;
    float _4201 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _1060 = 1.0 - _927;
    float _1061 = _1057 * _1060;
    float _1062 = _1058 * _1060;
    float _1063 = _1059 * _1060;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _927;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _927;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _927;
    float _1071 = _1068 + 0.039999999105930328369140625;
    float _1073 = _1069 + 0.039999999105930328369140625;
    float _1074 = _1070 + 0.039999999105930328369140625;
    vec4 _1083 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1008, cbSceneParam._m0[86u].y * _1009));
    float _1086 = _1083.x * TEXCOORD_3.w;
    float _1087 = dot(vec3(_920, _921, _922), vec3(_1000, _1001, _1002));
    float _1090 = _1087 * 2.0;
    float _1094 = (_1090 * _920) - _1000;
    float _1095 = (_1090 * _921) - _1001;
    float _1096 = (_1090 * _922) - _1002;
    float _1100 = abs(dot(vec3(_1000, _1001, _1002), vec3(_920, _921, _922)));
    float _4234 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1102 = sqrt(_923);
    float _1113 = exp2((_1102 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1102 * 3.0));
    float _1119 = (1.0 - _1113) * ((_1102 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1120 = _1113 * _1102;
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1457;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1182 = fma(_1156, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148));
        float _1186 = fma(_1156, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148));
        float _1190 = fma(_1156, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148));
        float _1215 = _1148 + _920;
        float _1216 = _1152 + _921;
        float _1217 = _1156 + _922;
        float _1227 = fma(_1217, cbModelParam._m0[26u].z, fma(_1216, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215)) - _1182;
        float _1228 = fma(_1217, cbModelParam._m0[27u].z, fma(_1216, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215)) - _1186;
        float _1229 = fma(_1217, cbModelParam._m0[28u].z, fma(_1216, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215)) - _1190;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1182 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1186 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[34u].z) + ((((((_1190 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1285 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1251.x + (-0.5));
        float _1287 = _1285 * (_1251.y + (-0.5));
        float _1288 = _1285 * (_1251.z + (-0.5));
        float _1295 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1258.x + (-0.5));
        float _1297 = _1295 * (_1258.y + (-0.5));
        float _1298 = _1295 * (_1258.z + (-0.5));
        float _1305 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1265.x + (-0.5));
        float _1307 = _1305 * (_1265.y + (-0.5));
        float _1308 = _1305 * (_1265.z + (-0.5));
        float _1315 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1272.x + (-0.5));
        float _1317 = _1315 * (_1272.y + (-0.5));
        float _1318 = _1315 * (_1272.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1339 = (dot(vec3(_920, _921, _922), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1349 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4282 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1351 + 1.0))) + _1356) * _1319;
        float _1366 = _1287 * 0.5;
        float _1367 = _1297 * 0.5;
        float _1368 = _1307 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_920, _921, _922), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4315 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1393 + 1.0))) + _1398) * _1320;
        float _1408 = _1288 * 0.5;
        float _1409 = _1298 * 0.5;
        float _1410 = _1308 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_920, _921, _922), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4348 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1435 + 1.0))) + _1440) * _1321;
        _1457 = _1288;
        _1459 = _1287;
        _1460 = _1286;
        _1461 = _1298;
        _1462 = _1297;
        _1463 = _1296;
        _1464 = _1308;
        _1465 = _1307;
        _1466 = _1306;
        _1467 = _1321;
        _1468 = _1320;
        _1469 = _1319;
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1458;
        _1459 = _1458;
        _1460 = _1458;
        _1461 = _1458;
        _1462 = _1458;
        _1463 = _1458;
        _1464 = _1458;
        _1465 = _1458;
        _1466 = _1458;
        _1467 = _1458;
        _1468 = _1458;
        _1469 = _1458;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1156, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148));
        float _1499 = fma(_1156, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148));
        float _1503 = fma(_1156, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148));
        float _1526 = _1148 + _920;
        float _1527 = _1152 + _921;
        float _1528 = _1156 + _922;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_920, _921, _922), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4411 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_920, _921, _922), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4444 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_920, _921, _922), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4477 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1458;
        _1765 = _1458;
        _1766 = _1458;
        _1767 = _1458;
        _1768 = _1458;
        _1769 = _1458;
        _1770 = _1458;
        _1771 = _1458;
        _1772 = _1458;
        _1773 = _1458;
        _1774 = _1458;
        _1775 = _1458;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1470)) + _1470;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1471)) + _1471;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1472)) + _1472;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1094 * 0.5;
    float _1833 = _1095 * 0.5;
    float _1834 = _1096 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1457, _1461, _1464, _1467));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1948 = fma(_1156, cbModelParam._m0[13u].z, fma(_1152, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148)) + cbModelParam._m0[13u].w;
        float _1952 = fma(_1156, cbModelParam._m0[14u].z, fma(_1152, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148)) + cbModelParam._m0[14u].w;
        float _1956 = fma(_1156, cbModelParam._m0[15u].z, fma(_1152, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148)) + cbModelParam._m0[15u].w;
        float _1959 = fma(_1096, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094));
        float _1962 = fma(_1096, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094));
        float _1965 = fma(_1096, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094));
        float _1993;
        if (_1959 > 0.0)
        {
            _1993 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1993 = frontier_phi_14_12_ladder;
        }
        float _2164;
        if (_1962 > 0.0)
        {
            _2164 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2164 = frontier_phi_23_19_ladder;
        }
        float _2459;
        if (_1965 > 0.0)
        {
            _2459 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2459 = frontier_phi_35_30_ladder;
        }
        float _2461 = isnan(_2164) ? _1993 : (isnan(_1993) ? _2164 : min(_1993, _2164));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1959) + _1948;
        float _2467 = (_2462 * _1962) + _1952;
        float _2468 = (_2462 * _1965) + _1956;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_13_35_ladder = _2613.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2613.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2613.x * cbModelParam._m0[1u].y;
        }
        _1981 = frontier_phi_13_35_ladder_2;
        _1983 = frontier_phi_13_35_ladder_1;
        _1985 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1094, _1095, _1096), _1901);
        _1981 = _1969.x * cbModelParam._m0[1u].y;
        _1983 = _1969.y * cbModelParam._m0[1u].y;
        _1985 = _1969.z * cbModelParam._m0[1u].y;
    }
    float _1989 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1989 : min(cbModelParam._m0[25u].w, _1989));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1156, cbModelParam._m0[21u].z, fma(_1152, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1156, cbModelParam._m0[22u].z, fma(_1152, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1156, cbModelParam._m0[23u].z, fma(_1152, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1096, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094));
        float _2057 = fma(_1096, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094));
        float _2060 = fma(_1096, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094));
        float _2169;
        if (_2054 > 0.0)
        {
            _2169 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2169 = frontier_phi_25_21_ladder;
        }
        float _2486;
        if (_2057 > 0.0)
        {
            _2486 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2486 = frontier_phi_37_32_ladder;
        }
        float _2824;
        if (_2060 > 0.0)
        {
            _2824 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2824 = frontier_phi_47_44_ladder;
        }
        float _2826 = isnan(_2486) ? _2169 : (isnan(_2169) ? _2486 : min(_2169, _2486));
        float _2827 = isnan(_2824) ? _2826 : (isnan(_2826) ? _2824 : min(_2826, _2824));
        float _2831 = (_2827 * _2054) + _2043;
        float _2832 = (_2827 * _2057) + _2047;
        float _2833 = (_2827 * _2060) + _2051;
        float _2834 = _2827 * 9.9999997473787516355514526367188e-05;
        float _2835 = (-1.0) - _2834;
        float _2837 = _2834 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2833 > _2837) || ((_2833 < _2835) || ((_2832 > _2837) || ((_2832 < _2835) || ((_2831 < _2835) || (_2831 > _2837))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2833, cbModelParam._m0[17u].z, fma(_2832, cbModelParam._m0[17u].y, _2831 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2833, cbModelParam._m0[18u].z, fma(_2832, cbModelParam._m0[18u].y, _2831 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2833, cbModelParam._m0[19u].z, fma(_2832, cbModelParam._m0[19u].y, _2831 * cbModelParam._m0[19u].x))), _1990);
            frontier_phi_22_47_ladder = _2955.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2955.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2955.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_22_47_ladder_2;
        _2081 = frontier_phi_22_47_ladder_1;
        _2083 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1094, _1095, _1096), _1990);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1119 * _1071) + _1120) * _1086) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1119 * _1073) + _1120) * _1086) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1119 * _1074) + _1120) * _1086) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    float _2143 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2147 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2151 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2156 = _2143 / _2155;
    float _2157 = _2147 / _2155;
    float _2158 = _2151 / _2155;
    float _2305;
    float _2306;
    float _2307;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2185 = ((uint(_2158 > cbSceneParam._m0[59u].y) + uint(_2158 > cbSceneParam._m0[59u].x)) + uint(_2158 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2186 = _2185 + 43u;
        uint _2194 = _2185 + 44u;
        uint _2202 = _2185 + 45u;
        uint _2210 = _2185 + 46u;
        float _2221 = fma(_2155, cbSceneParam._m0[_2186].w, fma(_2151, cbSceneParam._m0[_2186].z, fma(_2147, cbSceneParam._m0[_2186].y, _2143 * cbSceneParam._m0[_2186].x)));
        float _2225 = fma(_2155, cbSceneParam._m0[_2194].w, fma(_2151, cbSceneParam._m0[_2194].z, fma(_2147, cbSceneParam._m0[_2194].y, _2143 * cbSceneParam._m0[_2194].x)));
        float _2233 = fma(_2155, cbSceneParam._m0[_2210].w, fma(_2151, cbSceneParam._m0[_2210].z, fma(_2147, cbSceneParam._m0[_2210].y, _2143 * cbSceneParam._m0[_2210].x)));
        float _2238 = cbSceneParam._m0[33u].z * _2233;
        float _2240 = cbSceneParam._m0[33u].w * _2233;
        float _2243 = fma(_2155, cbSceneParam._m0[_2202].w, fma(_2151, cbSceneParam._m0[_2202].z, fma(_2147, cbSceneParam._m0[_2202].y, _2143 * cbSceneParam._m0[_2202].x))) / _2233;
        float _2291 = (cbSceneParam._m0[33u].x - sqrt(((_2157 * _2157) + (_2156 * _2156)) + (_2158 * _2158))) * cbSceneParam._m0[33u].y;
        float _4603 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2298 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2238 + _2221) / _2233, (_2240 + _2225) / _2233), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 + _2221) / _2233, (_2225 - _2238) / _2233), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 - _2238) / _2233, (_2225 - _2240) / _2233), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 - _2240) / _2233, (_2238 + _2225) / _2233), _2243), 0.0)).x), vec4(0.25)));
        _2305 = 1.0 - (_2298 * cbSceneParam._m0[34u].x);
        _2306 = 1.0 - (_2298 * cbSceneParam._m0[34u].y);
        _2307 = 1.0 - (_2298 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2305 = 1.0;
        _2306 = 1.0;
        _2307 = 1.0;
    }
    float _2371;
    float _2373;
    float _2375;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2359 = fma(_2155, cbSceneParam._m0[63u].w, fma(_2151, cbSceneParam._m0[63u].z, fma(_2147, cbSceneParam._m0[63u].y, _2143 * cbSceneParam._m0[63u].x)));
        float _2360 = fma(_2155, cbSceneParam._m0[60u].w, fma(_2151, cbSceneParam._m0[60u].z, fma(_2147, cbSceneParam._m0[60u].y, _2143 * cbSceneParam._m0[60u].x))) / _2359;
        float _2361 = fma(_2155, cbSceneParam._m0[61u].w, fma(_2151, cbSceneParam._m0[61u].z, fma(_2147, cbSceneParam._m0[61u].y, _2143 * cbSceneParam._m0[61u].x))) / _2359;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2360 >= cbSceneParam._m0[64u].x) && (_2361 >= cbSceneParam._m0[64u].y)) && (_2360 <= cbSceneParam._m0[64u].z)) && (_2361 <= cbSceneParam._m0[64u].w))
        {
            float _2499 = fma(_2155, cbSceneParam._m0[62u].w, fma(_2151, cbSceneParam._m0[62u].z, fma(_2147, cbSceneParam._m0[62u].y, _2143 * cbSceneParam._m0[62u].x))) / _2359;
            float _2503 = isnan(cbSceneParam._m0[41u].w) ? _2499 : (isnan(_2499) ? cbSceneParam._m0[41u].w : max(_2499, cbSceneParam._m0[41u].w));
            float _2546 = (cbSceneParam._m0[33u].x - sqrt(((_2157 * _2157) + (_2156 * _2156)) + (_2158 * _2158))) * cbSceneParam._m0[33u].y;
            float _4619 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
            float _2553 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2360, cbSceneParam._m0[33u].w + _2361), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2360, _2361 - cbSceneParam._m0[33u].z), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2360 - cbSceneParam._m0[33u].z, _2361 - cbSceneParam._m0[33u].w), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2360 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2361), _2503), 0.0)).x), vec4(0.25)));
            float _2557 = 1.0 - (_2553 * cbSceneParam._m0[34u].x);
            float _2558 = 1.0 - (_2553 * cbSceneParam._m0[34u].y);
            float _2559 = 1.0 - (_2553 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
            frontier_phi_34_33_ladder_1 = isnan(_2558) ? _2306 : (isnan(_2306) ? _2558 : min(_2306, _2558));
            frontier_phi_34_33_ladder_2 = isnan(_2557) ? _2305 : (isnan(_2305) ? _2557 : min(_2305, _2557));
        }
        else
        {
            frontier_phi_34_33_ladder = _2307;
            frontier_phi_34_33_ladder_1 = _2306;
            frontier_phi_34_33_ladder_2 = _2305;
        }
        _2371 = frontier_phi_34_33_ladder_2;
        _2373 = frontier_phi_34_33_ladder_1;
        _2375 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2371 = _2305;
        _2373 = _2306;
        _2375 = _2307;
    }
    uvec4 _2380 = floatBitsToUint(cbInstanceData._m0[_1046 + 5u]);
    uint _2382 = _2380.x * 14u;
    uint _2383 = _2382 + 13u;
    float _2390 = _1086 + (-1.0);
    float _2395 = (cbLight._m0[_2383].x * _2390) + 1.0;
    float _2396 = (cbLight._m0[_2383].y * _2390) + 1.0;
    float _2397 = (cbLight._m0[_2383].z * _2390) + 1.0;
    float _2398 = (cbLight._m0[_2383].w * _2390) + 1.0;
    uint _2399 = _2382 + 5u;
    float _2405 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2409 = _2382 + 4u;
    float _2418 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
    uint _2422 = _2382 | 1u;
    float _2433 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_920, _921, _922));
    float _2436 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_920, _921, _922));
    float _4655 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _4666 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2441 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2443 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * 0.3183098733425140380859375;
    float _2450 = ((cbLight._m0[_2399].x * _2405) * _2443) + (((cbLight._m0[_2409].x * _2371) * _2418) * _2441);
    float _2451 = ((_2405 * cbLight._m0[_2399].y) * _2443) + (((cbLight._m0[_2409].y * _2373) * _2418) * _2441);
    float _2452 = ((_2405 * cbLight._m0[_2399].z) * _2443) + (((cbLight._m0[_2409].z * _2375) * _2418) * _2441);
    uvec4 _2456 = floatBitsToUint(cbLight._m0[_2382 + 12u]);
    bool _2458 = _2456.x == 0u;
    float _2560;
    float _2562;
    float _2564;
    if (_2458)
    {
        _2560 = _2450;
        _2562 = _2451;
        _2564 = _2452;
    }
    else
    {
        uint _2568 = _2382 + 6u;
        float _2584 = (dot(vec3(cbLight._m0[_2382 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2585 = _2584 * _2584;
        float _4677 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2586 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2587 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2560 = (((cbLight._m0[_2568].x * 0.3183098733425140380859375) * _2586) * _2587) + _2450;
        _2562 = (((cbLight._m0[_2568].y * 0.3183098733425140380859375) * _2586) * _2587) + _2451;
        _2564 = (((cbLight._m0[_2568].z * 0.3183098733425140380859375) * _2586) * _2587) + _2452;
    }
    bool _2567 = _2456.y == 0u;
    float _2622;
    float _2624;
    float _2626;
    if (_2567)
    {
        _2622 = _2560;
        _2624 = _2562;
        _2626 = _2564;
    }
    else
    {
        uint _2795 = _2382 + 7u;
        float _2811 = (dot(vec3(cbLight._m0[_2382 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2812 = _2811 * _2811;
        float _4693 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2813 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2814 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2622 = (((cbLight._m0[_2795].x * 0.3183098733425140380859375) * _2813) * _2814) + _2560;
        _2624 = (((cbLight._m0[_2795].y * 0.3183098733425140380859375) * _2813) * _2814) + _2562;
        _2626 = (((cbLight._m0[_2795].z * 0.3183098733425140380859375) * _2813) * _2814) + _2564;
    }
    uint _2629 = _2382 + 8u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _923) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2382].x + _1000;
    float _2645 = cbLight._m0[_2382].y + _1001;
    float _2646 = cbLight._m0[_2382].z + _1002;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2382].xyz));
    float _4709 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _4720 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _2658 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2659 = dot(vec3(_920, _921, _922), vec3(_2651, _2652, _2653));
    float _4731 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2663 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2651, _2652, _2653));
    float _4742 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2667 = _2643 * _2643;
    float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
    float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
    float _2680 = 0.959999978542327880859375 - _1068;
    float _2682 = 0.959999978542327880859375 - _1069;
    float _2683 = 0.959999978542327880859375 - _1070;
    float _2690 = 1.0 - _2643;
    float _2701 = (0.5 / (((_2658 * ((_2657 * _2690) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2690) + _2643) * _2657))) * _2657;
    float _4753 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
    uint _2717 = _2382 + 9u;
    float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _923) * 0.949999988079071044921875);
    float _2729 = _2728 * _2728;
    float _2730 = cbLight._m0[_2422].x + _1000;
    float _2731 = cbLight._m0[_2422].y + _1001;
    float _2732 = cbLight._m0[_2422].z + _1002;
    float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
    float _2737 = _2736 * _2730;
    float _2738 = _2736 * _2731;
    float _2739 = _2736 * _2732;
    float _2740 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2422].xyz));
    float _4764 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2743 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2744 = dot(vec3(_920, _921, _922), vec3(_2737, _2738, _2739));
    float _4775 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2747 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2748 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2737, _2738, _2739));
    float _4786 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2752 = _2729 * _2729;
    float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
    float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
    float _2770 = 1.0 - _2729;
    float _2780 = (0.5 / (((_2658 * ((_2743 * _2770) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2770) + _2729) * _2743))) * _2743;
    float _4797 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2782 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
    float _2792 = (((((_2763 * _2680) + _1071) * cbLight._m0[_2717].x) * _2782) * _2405) + ((((cbLight._m0[_2629].x * _2371) * ((_2679 * _2680) + _1071)) * _2703) * _2418);
    float _2793 = (((((_2763 * _2682) + _1073) * cbLight._m0[_2717].y) * _2782) * _2405) + ((((cbLight._m0[_2629].y * _2373) * ((_2679 * _2682) + _1073)) * _2703) * _2418);
    float _2794 = (((((_2763 * _2683) + _1074) * cbLight._m0[_2717].z) * _2782) * _2405) + ((((cbLight._m0[_2629].z * _2375) * ((_2679 * _2683) + _1074)) * _2703) * _2418);
    float _2850;
    float _2852;
    float _2854;
    if (_2458)
    {
        _2850 = _2792;
        _2852 = _2793;
        _2854 = _2794;
    }
    else
    {
        uint _2856 = _2382 + 2u;
        uint _2860 = _2382 + 10u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _923) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _1000;
        float _2877 = cbLight._m0[_2856].y + _1001;
        float _2878 = cbLight._m0[_2856].z + _1002;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2856].xyz));
        float _4808 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2890 = dot(vec3(_920, _921, _922), vec3(_2883, _2884, _2885));
        float _4819 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4830 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2909 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
        float _2916 = 1.0 - _2875;
        float _2926 = (0.5 / (((_2658 * ((_2889 * _2916) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2916) + _2875) * _2889))) * _2889;
        float _4841 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2928 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2929 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2850 = (((((_2909 * _2680) + _1071) * cbLight._m0[_2860].x) * _2928) * _2929) + _2792;
        _2852 = (((((_2909 * _2682) + _1073) * cbLight._m0[_2860].y) * _2928) * _2929) + _2793;
        _2854 = (((((_2909 * _2683) + _1074) * cbLight._m0[_2860].z) * _2928) * _2929) + _2794;
    }
    float _2960;
    float _2962;
    float _2964;
    if (_2567)
    {
        _2960 = _2850;
        _2962 = _2852;
        _2964 = _2854;
    }
    else
    {
        uint _2971 = _2382 + 3u;
        uint _2975 = _2382 + 11u;
        float _2989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2971].w)) * _923) * 0.949999988079071044921875);
        float _2990 = _2989 * _2989;
        float _2991 = cbLight._m0[_2971].x + _1000;
        float _2992 = cbLight._m0[_2971].y + _1001;
        float _2993 = cbLight._m0[_2971].z + _1002;
        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
        float _2998 = _2997 * _2991;
        float _2999 = _2997 * _2992;
        float _3000 = _2997 * _2993;
        float _3001 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2971].xyz));
        float _4857 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3004 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _3005 = dot(vec3(_920, _921, _922), vec3(_2998, _2999, _3000));
        float _4868 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3008 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _3009 = dot(vec3(cbLight._m0[_2971].xyz), vec3(_2998, _2999, _3000));
        float _4879 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        float _3013 = _2990 * _2990;
        float _3017 = ((_3008 * _3008) * (_3013 + (-1.0))) + 1.0;
        float _3024 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
        float _3031 = 1.0 - _2990;
        float _3041 = (0.5 / (((_2658 * ((_3004 * _3031) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _3031) + _2990) * _3004))) * _3004;
        float _4890 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        float _3043 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_3013 / ((_3017 * _3017) * 3.141590118408203125));
        float _3044 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2960 = (((((_3024 * _2680) + _1071) * cbLight._m0[_2975].x) * _3043) * _3044) + _2850;
        _2962 = (((((_3024 * _2682) + _1073) * cbLight._m0[_2975].y) * _3043) * _3044) + _2852;
        _2964 = (((((_3024 * _2683) + _1074) * cbLight._m0[_2975].z) * _3043) * _3044) + _2854;
    }
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_2380.y == 0u)
    {
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.x;
        uint _3077 = uint((float(_3065.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1009) / _3066))) + floor(float(uint(cbSceneParam._m0[85u].x * _1008) / _3066)));
        float _3087 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3088 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        uint _3091 = uint(isnan(14.0) ? _3088 : (isnan(_3088) ? 14.0 : min(_3088, 14.0)));
        uvec4 _3096 = texelFetch(g_lightClusterGridBuffer, int(((_3091 << 2u) + (_3077 << 6u)) >> 2u));
        uint _3097 = _3096.x;
        uint _3098 = _3065.z;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((((1u << ((_3098 >> 4u) & 15u)) + 4294967295u) & _3097) == 0u) || ((_3098 & 240u) == 0u))
        {
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
        }
        else
        {
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            uint _3328 = 0u;
            uint _3337;
            bool _3338;
            for (;;)
            {
                _3337 = texelFetch(g_lightClassification, int((((_3091 << 5u) + (_3077 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                _3338 = _3337 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3338)
                {
                    frontier_phi_66_pred = _3327;
                    frontier_phi_66_pred_1 = _3326;
                    frontier_phi_66_pred_2 = _3325;
                    frontier_phi_66_pred_3 = _3324;
                    frontier_phi_66_pred_4 = _3323;
                    frontier_phi_66_pred_5 = _3322;
                }
                else
                {
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    uint _3452;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3326;
                    _3451 = _3327;
                    _3452 = _3337;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    for (;;)
                    {
                        uint _3456 = uint(findLSB(_3452)) + (_3328 << 5u);
                        uint _3453 = (_3452 + 4294967295u) & _3452;
                        uint _3458 = _3456 * 48u;
                        vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 3u)).x));
                        uint _3478 = (_3456 * 48u) + 4u;
                        vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3478)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 3u)).x));
                        uint _3497 = (_3456 * 48u) + 8u;
                        vec3 _3508 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x));
                        float _3512 = _3472.x - _2156;
                        float _3513 = _3472.y - _2157;
                        float _3514 = _3472.z - _2158;
                        float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                        float _3518 = inversesqrt(_3515);
                        float _3519 = _3518 * _3512;
                        float _3520 = _3518 * _3513;
                        float _3521 = _3518 * _3514;
                        float _3522 = dot(vec3(_1027, _1030, _1033), vec3(_3519, _3520, _3521));
                        float _3527 = 1.0 - (_3515 * _3472.w);
                        float _4916 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3529 = sqrt(_3515) * _3491.w;
                        float _3532 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                        float _3533 = _3532 * _3532;
                        float _3536 = ((1.0 - _3533) * _3522) + _3533;
                        float _3539 = _3529 * _3529;
                        float _3543 = ((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3528) / ((_3539 * 0.699999988079071044921875) + 1.0);
                        float _3547 = (-0.0) - _2156;
                        float _3548 = (-0.0) - _2157;
                        float _3549 = (-0.0) - _2158;
                        float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                        float _3554 = _3553 * _3547;
                        float _3555 = _3553 * _3548;
                        float _3556 = _3553 * _3549;
                        float _3563 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                        float _3564 = 1.0 - _1102;
                        float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                        float _3572 = _3571 * _3571;
                        float _3573 = _3572 * _3572;
                        float _3574 = _3554 + _3519;
                        float _3575 = _3555 + _3520;
                        float _3576 = _3556 + _3521;
                        float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                        float _3584 = dot(vec3(_1027, _1030, _1033), vec3(_3554, _3555, _3556));
                        float _4932 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3587 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3588 = dot(vec3(_1027, _1030, _1033), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                        float _4943 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3591 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                        float _3596 = _3532 * _3572;
                        float _3597 = _3596 * _3596;
                        float _3600 = ((1.0 - _3597) * _3522) + _3597;
                        float _4954 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3601 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3602 = 1.0 - _3572;
                        float _3612 = (0.5 / (((_3601 * ((_3587 * _3602) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3601 * _3602) + _3572) * _3587))) * _3601;
                        float _4965 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3623 = (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) / ((_3595 * _3595) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125))) * _3528;
                        _3381 = (_3543 * _3491.x) + _3449;
                        _3382 = (_3543 * _3491.y) + _3450;
                        _3383 = (_3543 * _3491.z) + _3451;
                        _3378 = (_3623 * _3508.x) + _3446;
                        _3379 = (_3623 * _3508.y) + _3447;
                        _3380 = (_3623 * _3508.z) + _3448;
                        if (_3453 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3382;
                            _3451 = _3383;
                            _3452 = _3453;
                        }
                    }
                    frontier_phi_66_pred = _3383;
                    frontier_phi_66_pred_1 = _3382;
                    frontier_phi_66_pred_2 = _3381;
                    frontier_phi_66_pred_3 = _3380;
                    frontier_phi_66_pred_4 = _3379;
                    frontier_phi_66_pred_5 = _3378;
                }
                _3188 = frontier_phi_66_pred;
                _3186 = frontier_phi_66_pred_1;
                _3184 = frontier_phi_66_pred_2;
                _3182 = frontier_phi_66_pred_3;
                _3180 = frontier_phi_66_pred_4;
                _3178 = frontier_phi_66_pred_5;
                uint _3329 = _3328 + 1u;
                if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3322 = _3178;
                    _3323 = _3180;
                    _3324 = _3182;
                    _3325 = _3184;
                    _3326 = _3186;
                    _3327 = _3188;
                    _3328 = _3329;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
        }
        uvec4 _3191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3192 = _3191.z;
        uint _3194 = (_3192 >> 8u) & 15u;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        float _3300;
        if (((4294967295u << _3194) & _3097) == 0u)
        {
            _3290 = _3177;
            _3292 = _3179;
            _3294 = _3181;
            _3296 = _3183;
            _3298 = _3185;
            _3300 = _3187;
        }
        else
        {
            float _3315 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _3316 = _3315 * _2156;
            float _3317 = _3315 * _2157;
            float _3318 = _3315 * _2158;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3194 < ((_3192 >> 12u) & 15u))
            {
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3301;
                float _3429 = _3177;
                float _3430 = _3179;
                float _3431 = _3181;
                float _3432 = _3183;
                float _3433 = _3185;
                float _3434 = _3187;
                uint _3435 = _3194;
                uint _3444;
                bool _3445;
                for (;;)
                {
                    _3444 = texelFetch(g_lightClassification, int((((_3091 << 5u) + (_3077 << 9u)) + (_3435 << 2u)) >> 2u)).x;
                    _3445 = _3444 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3445)
                    {
                        frontier_phi_72_pred = _3434;
                        frontier_phi_72_pred_1 = _3433;
                        frontier_phi_72_pred_2 = _3432;
                        frontier_phi_72_pred_3 = _3431;
                        frontier_phi_72_pred_4 = _3430;
                        frontier_phi_72_pred_5 = _3429;
                    }
                    else
                    {
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3641 = _3429;
                        float _3642 = _3430;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        float _3645 = _3433;
                        float _3646 = _3434;
                        uint _3647 = _3444;
                        uint _3648;
                        vec4 _3673;
                        float _3674;
                        vec4 _3689;
                        vec3 _3701;
                        vec4 _3716;
                        vec4 _3731;
                        float _3777;
                        bool _3778;
                        for (;;)
                        {
                            uint _3658 = ((_3435 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3647));
                            _3648 = (_3647 + 4294967295u) & _3647;
                            uint _3660 = _3658 * 40u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3674 = _3673.w;
                            uint _3676 = (_3658 * 40u) + 4u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3658 * 40u) + 8u;
                            _3701 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x));
                            uint _3703 = (_3658 * 40u) + 16u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3718 = (_3658 * 40u) + 20u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3658 * 40u) + 24u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3752 = (_3658 * 40u) + 28u;
                            vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3777 = fma(_2158, _3765.z, fma(_2157, _3765.y, _3765.x * _2156)) + _3765.w;
                            _3778 = !((fma(_2158, _3746.z, fma(_2157, _3746.y, _3746.x * _2156)) + _3746.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3778)
                            {
                                float _3805 = _3673.x - _2156;
                                float _3806 = _3673.y - _2157;
                                float _3807 = _3673.z - _2158;
                                float _3808 = dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807));
                                float _3811 = inversesqrt(_3808);
                                float _3812 = _3811 * _3805;
                                float _3813 = _3811 * _3806;
                                float _3814 = _3811 * _3807;
                                float _3818 = 1.0 - (_3808 / (_3674 * _3674));
                                float _4976 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3823 = sqrt(_3808) * _3689.w;
                                float _3825 = 1.39999997615814208984375 / (_3823 + 1.39999997615814208984375);
                                float _3826 = _3825 * _3825;
                                float _3829 = ((1.0 - _3826) * dot(vec3(_3812, _3813, _3814), vec3(_1027, _1030, _1033))) + _3826;
                                float _3832 = _3823 * _3823;
                                float _3836 = (fma(_2158, _3716.z, fma(_2157, _3716.y, _3716.x * _2156)) + _3716.w) / _3777;
                                float _3837 = (fma(_2158, _3731.z, fma(_2157, _3731.y, _3731.x * _2156)) + _3731.w) / _3777;
                                float _3841 = 1.0 - dot(vec2(_3836, _3837), vec2(_3836, _3837));
                                float _4992 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3843 = _3842 * (((isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0))) * _3819) / ((_3832 * 0.699999988079071044921875) + 1.0));
                                float _3855 = exp2(log2(1.0 / ((_3832 * 3.5) + 5.0)) * 0.25);
                                float _3856 = 1.0 - _1102;
                                float _3863 = sqrt(1.0 - ((1.0 - (_3856 * _3856)) * (1.0 - (_3855 * _3855))));
                                float _3864 = _3863 * _3863;
                                float _3865 = _3864 * _3864;
                                float _3866 = _3812 - _3316;
                                float _3867 = _3813 - _3317;
                                float _3868 = _3814 - _3318;
                                float _3872 = inversesqrt(dot(vec3(_3866, _3867, _3868), vec3(_3866, _3867, _3868)));
                                float _3876 = dot(vec3(_1027, _1030, _1033), vec3((-0.0) - _3316, (-0.0) - _3317, (-0.0) - _3318));
                                float _5003 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3880 = dot(vec3(_1027, _1030, _1033), vec3(_3872 * _3866, _3872 * _3867, _3872 * _3868));
                                float _5014 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3883 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3887 = ((_3883 * _3883) * (_3865 + (-1.0))) + 1.0;
                                float _3888 = _3825 * _3864;
                                float _3889 = _3888 * _3888;
                                float _3895 = ((1.0 - _3889) * dot(vec3(_1027, _1030, _1033), vec3(_3812, _3813, _3814))) + _3889;
                                float _5025 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3897 = 1.0 - _3864;
                                float _3907 = (0.5 / (((_3896 * ((_3879 * _3897) + _3864)) + 9.9999999392252902907785028219223e-09) + (((_3896 * _3897) + _3864) * _3879))) * _3896;
                                float _5036 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3917 = (_3842 * _3819) * (((_3865 * 3.1415927410125732421875) * (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0)))) / ((_3887 * _3887) * ((_3832 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3843 * _3689.y;
                                frontier_phi_78_pred_1 = _3843 * _3689.x;
                                frontier_phi_78_pred_2 = _3917 * _3701.z;
                                frontier_phi_78_pred_3 = _3917 * _3701.y;
                                frontier_phi_78_pred_4 = _3917 * _3701.x;
                                frontier_phi_78_pred_5 = _3843 * _3689.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3925 = frontier_phi_78_pred;
                            _3924 = frontier_phi_78_pred_1;
                            _3923 = frontier_phi_78_pred_2;
                            _3922 = frontier_phi_78_pred_3;
                            _3921 = frontier_phi_78_pred_4;
                            _3926 = frontier_phi_78_pred_5;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            if (_3648 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3648;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3633;
                        frontier_phi_72_pred_1 = _3632;
                        frontier_phi_72_pred_2 = _3631;
                        frontier_phi_72_pred_3 = _3630;
                        frontier_phi_72_pred_4 = _3629;
                        frontier_phi_72_pred_5 = _3628;
                    }
                    _3301 = frontier_phi_72_pred;
                    _3299 = frontier_phi_72_pred_1;
                    _3297 = frontier_phi_72_pred_2;
                    _3295 = frontier_phi_72_pred_3;
                    _3293 = frontier_phi_72_pred_4;
                    _3291 = frontier_phi_72_pred_5;
                    uint _3436 = _3435 + 1u;
                    if (_3436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3429 = _3291;
                        _3430 = _3293;
                        _3431 = _3295;
                        _3432 = _3297;
                        _3433 = _3299;
                        _3434 = _3301;
                        _3435 = _3436;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3301;
                frontier_phi_60_61_ladder_1 = _3299;
                frontier_phi_60_61_ladder_2 = _3295;
                frontier_phi_60_61_ladder_3 = _3293;
                frontier_phi_60_61_ladder_4 = _3291;
                frontier_phi_60_61_ladder_5 = _3297;
            }
            else
            {
                frontier_phi_60_61_ladder = _3187;
                frontier_phi_60_61_ladder_1 = _3185;
                frontier_phi_60_61_ladder_2 = _3181;
                frontier_phi_60_61_ladder_3 = _3179;
                frontier_phi_60_61_ladder_4 = _3177;
                frontier_phi_60_61_ladder_5 = _3183;
            }
            _3290 = frontier_phi_60_61_ladder_4;
            _3292 = frontier_phi_60_61_ladder_3;
            _3294 = frontier_phi_60_61_ladder_2;
            _3296 = frontier_phi_60_61_ladder_5;
            _3298 = frontier_phi_60_61_ladder_1;
            _3300 = frontier_phi_60_61_ladder;
        }
        float _3305 = isnan(1.0) ? _1086 : (isnan(_1086) ? 1.0 : min(_1086, 1.0));
        _3110 = (_3305 * _3296) + _2622;
        _3112 = (_3305 * _3298) + _2624;
        _3114 = (_3305 * _3300) + _2626;
        _3116 = ((_3290 * _1071) * _3305) + _2960;
        _3118 = ((_3292 * _1073) * _3305) + _2962;
        _3120 = ((_3294 * _1074) * _3305) + _2964;
    }
    else
    {
        _3110 = _2622;
        _3112 = _2624;
        _3114 = _2626;
        _3116 = _2960;
        _3118 = _2962;
        _3120 = _2964;
    }
    float _5052 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _5063 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _5074 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    uint _3140 = _1046 + 6u;
    float _3148 = _1008 / cbSceneParam._m0[86u].x;
    float _3149 = _1009 / cbSceneParam._m0[86u].y;
    vec4 _3163 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3165 = _3163.x;
    float _3166 = _3163.y;
    float _3167 = _3163.z;
    float _3168 = _3163.w;
    float _3240;
    float _3242;
    float _3244;
    float _3246;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _3202 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _3203 = _3202 / _943;
        float _3214 = _3203 * _993;
        float _3215 = _994 * _3203;
        float _3216 = (-0.0) - _3215;
        float _3218 = _3203 * _995;
        float _3220 = (cbSceneParam._m0[77u].w * _3216) / _3202;
        float _3221 = _3220 + cbSceneParam._m0[79u].w;
        float _3222 = cbSceneParam._m0[79u].w - _3215;
        float _3228 = sqrt(((_3214 * _3214) + (_3215 * _3215)) + (_3218 * _3218));
        float _3231 = (1.0 - (cbSceneParam._m0[77u].w / _3202)) * _3228;
        float _3236 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3238 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3391;
        if (abs((_3216 - _3220) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3391 = ((((_3221 > 0.0) ? exp2(_3236 * _3221) : (2.0 - exp2(_3238 * _3221))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3231;
        }
        else
        {
            float _3351 = 1.0 / cbSceneParam._m0[80u].x;
            float _3352 = isnan(_3222) ? _3221 : (isnan(_3221) ? _3222 : max(_3221, _3222));
            float _3353 = isnan(_3222) ? _3221 : (isnan(_3221) ? _3222 : min(_3221, _3222));
            float _3362 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : min(_3352, 0.0));
            float _3363 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : min(_3353, 0.0));
            _3391 = ((abs(_3228 / _3216) * cbSceneParam._m0[80u].y) * ((((_3362 - _3363) * 2.0) - ((exp2(_3236 * (isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0)))) - exp2(_3236 * (isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))))) * _3351)) - ((exp2(_3238 * _3362) - exp2(_3238 * _3363)) * _3351))) + (_3231 * cbSceneParam._m0[80u].z);
        }
        vec4 _3393 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, 1.0), 0.0);
        float _3402 = exp2((_3391 * (-1.44269502162933349609375)) * (1.0 - _3393.w));
        float _3403 = log2(_3402);
        float _3419 = log2(_3168);
        _3240 = (exp2(_3419 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3403 * cbSceneParam._m0[78u].x)) * _3393.x) / cbSceneParam._m0[78u].x)) + _3165;
        _3242 = (exp2(_3419 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3403 * cbSceneParam._m0[78u].y)) * _3393.y) / cbSceneParam._m0[78u].y)) + _3166;
        _3244 = (exp2(_3419 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3403 * cbSceneParam._m0[78u].z)) * _3393.z) / cbSceneParam._m0[78u].z)) + _3167;
        _3246 = _3402 * _3168;
    }
    else
    {
        _3240 = _3165;
        _3242 = _3166;
        _3244 = _3167;
        _3246 = _3168;
    }
    float _3258 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3259 = _3258 == 3.0;
    float _3260 = log2(_3246);
    float _3267 = exp2(_3260 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3110 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1086))) + ((_3116 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3268 = exp2(_3260 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3112 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1086))) + ((_3118 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3269 = exp2(_3260 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3114 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1086))) + ((_3120 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3278 = (_3258 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3278 * (_3259 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3240)));
    SV_Target.y = _3278 * (_3259 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3242)));
    SV_Target.z = _3278 * (_3259 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3244)));
    SV_Target.w = cbInstanceData._m0[_3140].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3140].w;
}


