#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _301 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _316 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _324 = log2(0.0);
    float _326 = exp2(_324 * cbMtdParam._m0[23u].x);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    float _337 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _339 = isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0));
    vec4 _351 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _354 = _351.y;
    float _357 = (_351.x + (-0.02500000037252902984619140625)) * 8.0;
    float _361 = roundEven(5.0 - _357);
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(4.0) ? _362 : (isnan(_362) ? 4.0 : min(_362, 4.0));
    float _376 = floor(_363);
    vec4 _379 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _376));
    float _196[6];
    float _197[6];
    float _198[6];
    _196[0u] = cbMtdParam._m0[17u].x;
    _197[0u] = cbMtdParam._m0[17u].y;
    _198[0u] = cbMtdParam._m0[17u].z;
    _196[1u] = cbMtdParam._m0[15u].x;
    _197[1u] = cbMtdParam._m0[15u].y;
    _198[1u] = cbMtdParam._m0[15u].z;
    _196[2u] = cbMtdParam._m0[14u].x;
    _197[2u] = cbMtdParam._m0[14u].y;
    _198[2u] = cbMtdParam._m0[14u].z;
    _196[3u] = cbMtdParam._m0[13u].x;
    _197[3u] = cbMtdParam._m0[13u].y;
    _198[3u] = cbMtdParam._m0[13u].z;
    _196[4u] = cbMtdParam._m0[12u].x;
    _197[4u] = cbMtdParam._m0[12u].y;
    _198[4u] = cbMtdParam._m0[12u].z;
    _196[5u] = cbMtdParam._m0[18u].x;
    _197[5u] = cbMtdParam._m0[18u].y;
    _198[5u] = cbMtdParam._m0[18u].z;
    float _443 = roundEven(_357);
    float _444 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    uint _446 = uint(int(isnan(5.0) ? _444 : (isnan(_444) ? 5.0 : min(_444, 5.0))));
    vec4 _476 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _487 = cbMtdParam._m0[9u].x * _476.x;
    float _488 = cbMtdParam._m0[9u].y * _476.y;
    float _489 = cbMtdParam._m0[9u].z * _476.z;
    float _496 = ((((((_196[_446] - cbMtdParam._m0[10u].x) * _354) + cbMtdParam._m0[10u].x) * _379.x) - _487) * _339) + _487;
    float _497 = ((((((_197[_446] - cbMtdParam._m0[10u].y) * _354) + cbMtdParam._m0[10u].y) * _379.y) - _488) * _339) + _488;
    float _498 = ((((((_198[_446] - cbMtdParam._m0[10u].z) * _354) + cbMtdParam._m0[10u].z) * _379.z) - _489) * _339) + _489;
    float _504 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _517 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _536 = (((cbMtdParam._m0[16u].x * _517.x) - _496) * _504) + _496;
    float _537 = (((cbMtdParam._m0[16u].y * _517.y) - _497) * _504) + _497;
    float _538 = (((cbMtdParam._m0[16u].z * _517.z) - _498) * _504) + _498;
    vec4 _551 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _571 = (((cbMtdParam._m0[19u].x * _551.x) - _536) * _328) + _536;
    float _572 = (((cbMtdParam._m0[19u].y * _551.y) - _537) * _328) + _537;
    float _573 = (((cbMtdParam._m0[19u].z * _551.z) - _538) * _328) + _538;
    vec4 _585 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _610 = (_316.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _585.x) - _571) * _303) + _571);
    float _612 = (_316.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _585.y) - _572) * _303) + _572);
    float _614 = (_316.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _585.z) - _573) * _303) + _573);
    float _618 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _627 = (_618 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _618))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3848 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _635 = ((cbMtdParam._m0[21u].x - _610) * _628) + _610;
    float _636 = ((cbMtdParam._m0[21u].y - _612) * _628) + _612;
    float _637 = ((cbMtdParam._m0[21u].z - _614) * _628) + _614;
    float _191[5];
    float _192[5];
    _191[0u] = cbMtdParam._m0[28u].w;
    _192[0u] = cbMtdParam._m0[29u].x;
    _191[1u] = cbMtdParam._m0[30u].w;
    _192[1u] = cbMtdParam._m0[31u].x;
    _191[2u] = cbMtdParam._m0[30u].y;
    _192[2u] = cbMtdParam._m0[30u].z;
    _191[3u] = cbMtdParam._m0[29u].w;
    _192[3u] = cbMtdParam._m0[30u].x;
    _191[4u] = cbMtdParam._m0[29u].y;
    _192[4u] = cbMtdParam._m0[29u].z;
    float _677 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    uint _679 = uint(int(isnan(4.0) ? _677 : (isnan(_677) ? 4.0 : min(_677, 4.0))));
    float _686 = ((_192[_679] - cbMtdParam._m0[22u].z) * _339) + cbMtdParam._m0[22u].z;
    float _689 = ((cbMtdParam._m0[22u].w - _686) * _504) + _686;
    float _692 = ((cbMtdParam._m0[25u].x - _689) * _328) + _689;
    float _695 = ((cbMtdParam._m0[26u].x - _692) * _303) + _692;
    float _697 = _695 - (_695 * _618);
    vec4 _713 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _376));
    vec4 _730 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _732 = _730.x;
    float _733 = _730.y;
    float _738 = cbMtdParam._m0[22u].x + _730.z;
    float _741 = (((_713.z + _191[_679]) - _738) * _339) + _738;
    vec4 _753 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _764 = (((_753.z - _741) + cbMtdParam._m0[28u].y) * _504) + _741;
    float _770 = ((((_288 * 2.0) * _764) - _764) * cbMtdParam._m0[24u].w) + _764;
    vec4 _782 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _793 = (((cbMtdParam._m0[23u].z + _782.z) - _770) * _328) + _770;
    vec4 _806 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _817 = (((_806.z - _793) + cbMtdParam._m0[26u].y) * _303) + _793;
    vec4 _832 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _847 = ((cbMtdParam._m0[27u].y * _618) * ((_832.z * cbMtdParam._m0[27u].x) - _817)) + _817;
    float _859 = ((_713.x - _732) * _339) + _732;
    float _860 = ((_713.y - _733) * _339) + _733;
    float _865 = ((_753.x - _859) * _504) + _859;
    float _866 = ((_753.y - _860) * _504) + _860;
    float _871 = ((_782.x - _865) * _328) + _865;
    float _872 = ((_782.y - _866) * _328) + _866;
    float _881 = ((((_806.x - _871) * _303) + _871) * 2.0) + (-1.0);
    float _882 = ((((_806.y - _872) * _303) + _872) * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _3869 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _888 = sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))));
    float _898 = ((cbMtdParam._m0[25u].y * ((_284.x * 2.0) + (-1.0))) + _881) + ((((_832.x * 2.0) + (-1.0)) * _618) * cbMtdParam._m0[26u].w);
    float _899 = ((cbMtdParam._m0[25u].y * ((_284.y * 2.0) + (-1.0))) + _882) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_832.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _902 = fma(_888, _233 * NORMAL.x, fma(_899, _240 * TANGENT.x, (_226 * _218) * _898));
    float _905 = fma(_888, _233 * NORMAL.y, fma(_899, _240 * TANGENT.y, (_226 * _219) * _898));
    float _908 = fma(_888, _233 * NORMAL.z, fma(_899, _240 * TANGENT.z, (_226 * _220) * _898));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3880 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _916 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3902 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3913 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3924 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _920 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _936 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _986 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _976);
    float _987 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _976);
    float _988 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _976);
    float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
    float _993 = _986 * _992;
    float _994 = _987 * _992;
    float _995 = _988 * _992;
    float _1001 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1002 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1020 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1023 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1026 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1039 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1041 = (_1039 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1047 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_1041].x;
    float _1048 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_1041].y;
    float _1049 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_1041].z;
    float _3935 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1053 = 1.0 - _920;
    float _1054 = _1050 * _1053;
    float _1055 = _1051 * _1053;
    float _1056 = _1052 * _1053;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _920;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _920;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _920;
    float _1064 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    vec4 _1076 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1001, cbSceneParam._m0[86u].y * _1002));
    float _1079 = _1076.x * TEXCOORD_3.w;
    float _1080 = dot(vec3(_913, _914, _915), vec3(_993, _994, _995));
    float _1083 = _1080 * 2.0;
    float _1087 = (_1083 * _913) - _993;
    float _1088 = (_1083 * _914) - _994;
    float _1089 = (_1083 * _915) - _995;
    float _1093 = abs(dot(vec3(_993, _994, _995), vec3(_913, _914, _915)));
    float _3968 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1095 = sqrt(_916);
    float _1106 = exp2((_1095 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1095 * 3.0));
    float _1112 = (1.0 - _1106) * ((_1095 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1113 = _1106 * _1095;
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1450;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1175 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1179 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1183 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1208 = _1141 + _913;
        float _1209 = _1145 + _914;
        float _1210 = _1149 + _915;
        float _1220 = fma(_1210, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1208)) - _1175;
        float _1221 = fma(_1210, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1208)) - _1179;
        float _1222 = fma(_1210, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1208)) - _1183;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1175 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1179 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[34u].z) + ((((((_1183 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1278 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1244.x + (-0.5));
        float _1280 = _1278 * (_1244.y + (-0.5));
        float _1281 = _1278 * (_1244.z + (-0.5));
        float _1288 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1251.x + (-0.5));
        float _1290 = _1288 * (_1251.y + (-0.5));
        float _1291 = _1288 * (_1251.z + (-0.5));
        float _1298 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1258.x + (-0.5));
        float _1300 = _1298 * (_1258.y + (-0.5));
        float _1301 = _1298 * (_1258.z + (-0.5));
        float _1308 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1265.x + (-0.5));
        float _1310 = _1308 * (_1265.y + (-0.5));
        float _1311 = _1308 * (_1265.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1332 = (dot(vec3(_913, _914, _915), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1342 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4016 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1344 + 1.0))) + _1349) * _1312;
        float _1359 = _1280 * 0.5;
        float _1360 = _1290 * 0.5;
        float _1361 = _1300 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_913, _914, _915), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4049 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1386 + 1.0))) + _1391) * _1313;
        float _1401 = _1281 * 0.5;
        float _1402 = _1291 * 0.5;
        float _1403 = _1301 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_913, _914, _915), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4082 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1428 + 1.0))) + _1433) * _1314;
        _1450 = _1281;
        _1452 = _1280;
        _1453 = _1279;
        _1454 = _1291;
        _1455 = _1290;
        _1456 = _1289;
        _1457 = _1301;
        _1458 = _1300;
        _1459 = _1299;
        _1460 = _1314;
        _1461 = _1313;
        _1462 = _1312;
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1451;
        _1452 = _1451;
        _1453 = _1451;
        _1454 = _1451;
        _1455 = _1451;
        _1456 = _1451;
        _1457 = _1451;
        _1458 = _1451;
        _1459 = _1451;
        _1460 = _1451;
        _1461 = _1451;
        _1462 = _1451;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1488 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1492 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1496 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1519 = _1141 + _913;
        float _1520 = _1145 + _914;
        float _1521 = _1149 + _915;
        float _1531 = fma(_1521, cbModelParam._m0[30u].z, fma(_1520, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1519)) - _1488;
        float _1532 = fma(_1521, cbModelParam._m0[31u].z, fma(_1520, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1519)) - _1492;
        float _1533 = fma(_1521, cbModelParam._m0[32u].z, fma(_1520, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1519)) - _1496;
        float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
        float _1550 = ((_1537 * _1531) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1488 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1537 * _1532) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1492 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1537 * _1533) / cbModelParam._m0[35u].z) + ((((((_1496 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        float _1587 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1554.x + (-0.5));
        float _1589 = _1587 * (_1554.y + (-0.5));
        float _1590 = _1587 * (_1554.z + (-0.5));
        float _1597 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1561.x + (-0.5));
        float _1599 = _1597 * (_1561.y + (-0.5));
        float _1600 = _1597 * (_1561.z + (-0.5));
        float _1607 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1568.x + (-0.5));
        float _1609 = _1607 * (_1568.y + (-0.5));
        float _1610 = _1607 * (_1568.z + (-0.5));
        float _1617 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1575.x + (-0.5));
        float _1619 = _1617 * (_1575.y + (-0.5));
        float _1620 = _1617 * (_1575.z + (-0.5));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = _1588 * 0.5;
        float _1625 = _1598 * 0.5;
        float _1626 = _1608 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_913, _914, _915), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4145 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1651 + 1.0))) + _1656) * _1621;
        float _1666 = _1589 * 0.5;
        float _1667 = _1599 * 0.5;
        float _1668 = _1609 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_913, _914, _915), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4178 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1693 + 1.0))) + _1698) * _1622;
        float _1708 = _1590 * 0.5;
        float _1709 = _1600 * 0.5;
        float _1710 = _1610 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_913, _914, _915), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4211 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1735 + 1.0))) + _1740) * _1623;
        _1757 = _1590;
        _1758 = _1589;
        _1759 = _1588;
        _1760 = _1600;
        _1761 = _1599;
        _1762 = _1598;
        _1763 = _1610;
        _1764 = _1609;
        _1765 = _1608;
        _1766 = _1623;
        _1767 = _1622;
        _1768 = _1621;
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
    }
    else
    {
        _1757 = _1451;
        _1758 = _1451;
        _1759 = _1451;
        _1760 = _1451;
        _1761 = _1451;
        _1762 = _1451;
        _1763 = _1451;
        _1764 = _1451;
        _1765 = _1451;
        _1766 = _1451;
        _1767 = _1451;
        _1768 = _1451;
        _1769 = 0.0;
        _1770 = 0.0;
        _1771 = 0.0;
    }
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1463)) + _1463;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1464)) + _1464;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1804 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1781));
    float _1825 = _1087 * 0.5;
    float _1826 = _1088 * 0.5;
    float _1827 = _1089 * 0.5;
    float _1828 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1831 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1834 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1868;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1841 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1450, _1454, _1457, _1460));
        float _1845 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1849 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1856 = dot(vec4(cbModelParam._m0[39u]), vec4(_1825, _1826, _1827, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1879;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1870 = dot(vec4(cbModelParam._m0[40u]), vec4(_1825, _1826, _1827, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1883 = (_1879 * cbModelParam._m0[1u].x) + (_1868 * (1.0 - cbModelParam._m0[1u].x));
    float _1893 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1893 : min(cbModelParam._m0[25u].z, _1893));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1941 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1945 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1949 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1952 = fma(_1089, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087));
        float _1955 = fma(_1089, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087));
        float _1958 = fma(_1089, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087));
        float _1986;
        if (_1952 > 0.0)
        {
            _1986 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1986 = frontier_phi_14_12_ladder;
        }
        float _2209;
        if (_1955 > 0.0)
        {
            _2209 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2209 = frontier_phi_23_19_ladder;
        }
        float _2466;
        if (_1958 > 0.0)
        {
            _2466 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2466 = frontier_phi_35_30_ladder;
        }
        float _2468 = isnan(_2209) ? _1986 : (isnan(_1986) ? _2209 : min(_1986, _2209));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1952) + _1941;
        float _2474 = (_2469 * _1955) + _1945;
        float _2475 = (_2469 * _1958) + _1949;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1894);
            frontier_phi_13_35_ladder = _2603.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2603.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2603.x * cbModelParam._m0[1u].y;
        }
        _1974 = frontier_phi_13_35_ladder_2;
        _1976 = frontier_phi_13_35_ladder_1;
        _1978 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1087, _1088, _1089), _1894);
        _1974 = _1962.x * cbModelParam._m0[1u].y;
        _1976 = _1962.y * cbModelParam._m0[1u].y;
        _1978 = _1962.z * cbModelParam._m0[1u].y;
    }
    float _1982 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1982 : min(cbModelParam._m0[25u].w, _1982));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2036 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2040 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2044 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2047 = fma(_1089, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087));
        float _2050 = fma(_1089, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087));
        float _2053 = fma(_1089, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087));
        float _2214;
        if (_2047 > 0.0)
        {
            _2214 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2214 = frontier_phi_25_21_ladder;
        }
        float _2493;
        if (_2050 > 0.0)
        {
            _2493 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2493 = frontier_phi_37_32_ladder;
        }
        float _2706;
        if (_2053 > 0.0)
        {
            _2706 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2706 = frontier_phi_46_43_ladder;
        }
        float _2708 = isnan(_2493) ? _2214 : (isnan(_2214) ? _2493 : min(_2214, _2493));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _2047) + _2036;
        float _2714 = (_2709 * _2050) + _2040;
        float _2715 = (_2709 * _2053) + _2044;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _1983);
            frontier_phi_22_46_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _2072 = frontier_phi_22_46_ladder_2;
        _2074 = frontier_phi_22_46_ladder_1;
        _2076 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1087, _1088, _1089), _1983);
        _2072 = _2056.x * cbModelParam._m0[1u].z;
        _2074 = _2056.y * cbModelParam._m0[1u].z;
        _2076 = _2056.z * cbModelParam._m0[1u].z;
    }
    float _2089 = (((_1112 * _1064) + _1113) * _1079) * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2091 = (((_1112 * _1066) + _1113) * _1079) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1112 * _1067) + _1113) * _1079) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2096 = fma(_2093, cbSceneParam._m0[89u].z, fma(_2091, cbSceneParam._m0[89u].y, _2089 * cbSceneParam._m0[89u].x));
    float _2099 = fma(_2093, cbSceneParam._m0[90u].z, fma(_2091, cbSceneParam._m0[90u].y, _2089 * cbSceneParam._m0[90u].x));
    float _2102 = fma(_2093, cbSceneParam._m0[91u].z, fma(_2091, cbSceneParam._m0[91u].y, _2089 * cbSceneParam._m0[91u].x));
    vec4 _2110 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1001, _1002));
    float _2112 = _2110.w;
    float _2124 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2112);
    float _2125 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2112);
    float _2126 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2112);
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_1039 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2140 = _1079 + (-1.0);
    float _2145 = (cbLight._m0[_2133].x * _2140) + 1.0;
    float _2146 = (cbLight._m0[_2133].y * _2140) + 1.0;
    float _2147 = (cbLight._m0[_2133].z * _2140) + 1.0;
    float _2148 = (cbLight._m0[_2133].w * _2140) + 1.0;
    uint _2149 = _2132 + 5u;
    float _2155 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2159 = _2132 + 4u;
    float _2168 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2172 = _2132 | 1u;
    float _2183 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_913, _914, _915));
    float _2186 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_913, _914, _915));
    float _4347 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _4358 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2193 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2200 = ((cbLight._m0[_2149].x * _2155) * _2193) + (((cbLight._m0[_2159].x * _2124) * _2168) * _2191);
    float _2201 = ((_2155 * cbLight._m0[_2149].y) * _2193) + (((cbLight._m0[_2159].y * _2125) * _2168) * _2191);
    float _2202 = ((_2155 * cbLight._m0[_2149].z) * _2193) + (((cbLight._m0[_2159].z * _2126) * _2168) * _2191);
    uvec4 _2206 = floatBitsToUint(cbLight._m0[_2132 + 12u]);
    bool _2208 = _2206.x == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2208)
    {
        _2219 = _2200;
        _2221 = _2201;
        _2223 = _2202;
    }
    else
    {
        uint _2227 = _2132 + 6u;
        float _2243 = (dot(vec3(cbLight._m0[_2132 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4369 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2246 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2219 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2200;
        _2221 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2201;
        _2223 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2202;
    }
    bool _2226 = _2206.y == 0u;
    float _2264;
    float _2266;
    float _2268;
    if (_2226)
    {
        _2264 = _2219;
        _2266 = _2221;
        _2268 = _2223;
    }
    else
    {
        uint _2437 = _2132 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2132 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4385 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2456 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2264 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2219;
        _2266 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2221;
        _2268 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2223;
    }
    uint _2271 = _2132 + 8u;
    float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _916) * 0.949999988079071044921875);
    float _2285 = _2284 * _2284;
    float _2286 = cbLight._m0[_2132].x + _993;
    float _2287 = cbLight._m0[_2132].y + _994;
    float _2288 = cbLight._m0[_2132].z + _995;
    float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
    float _2293 = _2292 * _2286;
    float _2294 = _2292 * _2287;
    float _2295 = _2292 * _2288;
    float _2296 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2132].xyz));
    float _4401 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2300 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2301 = dot(vec3(_913, _914, _915), vec3(_2293, _2294, _2295));
    float _4423 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2293, _2294, _2295));
    float _4434 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2285 * _2285;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2322 = 0.959999978542327880859375 - _1061;
    float _2324 = 0.959999978542327880859375 - _1062;
    float _2325 = 0.959999978542327880859375 - _1063;
    float _2332 = 1.0 - _2285;
    float _2343 = (0.5 / (((_2300 * ((_2299 * _2332) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2332) + _2285) * _2299))) * _2299;
    float _4445 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    uint _2359 = _2132 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _916) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2172].x + _993;
    float _2373 = cbLight._m0[_2172].y + _994;
    float _2374 = cbLight._m0[_2172].z + _995;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2172].xyz));
    float _4456 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2386 = dot(vec3(_913, _914, _915), vec3(_2379, _2380, _2381));
    float _4467 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2379, _2380, _2381));
    float _4478 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2412 = 1.0 - _2371;
    float _2422 = (0.5 / (((_2300 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2412) + _2371) * _2385))) * _2385;
    float _4489 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2434 = (((((_2405 * _2322) + _1064) * cbLight._m0[_2359].x) * _2424) * _2155) + ((((cbLight._m0[_2271].x * _2124) * ((_2321 * _2322) + _1064)) * _2345) * _2168);
    float _2435 = (((((_2405 * _2324) + _1066) * cbLight._m0[_2359].y) * _2424) * _2155) + ((((cbLight._m0[_2271].y * _2125) * ((_2321 * _2324) + _1066)) * _2345) * _2168);
    float _2436 = (((((_2405 * _2325) + _1067) * cbLight._m0[_2359].z) * _2424) * _2155) + ((((cbLight._m0[_2271].z * _2126) * ((_2321 * _2325) + _1067)) * _2345) * _2168);
    float _2498;
    float _2500;
    float _2502;
    if (_2208)
    {
        _2498 = _2434;
        _2500 = _2435;
        _2502 = _2436;
    }
    else
    {
        uint _2504 = _2132 + 2u;
        uint _2508 = _2132 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _916) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _993;
        float _2525 = cbLight._m0[_2504].y + _994;
        float _2526 = cbLight._m0[_2504].z + _995;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2504].xyz));
        float _4500 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2538 = dot(vec3(_913, _914, _915), vec3(_2531, _2532, _2533));
        float _4511 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4522 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2300 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2564) + _2523) * _2537))) * _2537;
        float _4533 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2498 = (((((_2557 * _2322) + _1064) * cbLight._m0[_2508].x) * _2576) * _2577) + _2434;
        _2500 = (((((_2557 * _2324) + _1066) * cbLight._m0[_2508].y) * _2576) * _2577) + _2435;
        _2502 = (((((_2557 * _2325) + _1067) * cbLight._m0[_2508].z) * _2576) * _2577) + _2436;
    }
    float _2612;
    float _2614;
    float _2616;
    if (_2226)
    {
        _2612 = _2498;
        _2614 = _2500;
        _2616 = _2502;
    }
    else
    {
        uint _2623 = _2132 + 3u;
        uint _2627 = _2132 + 11u;
        float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _916) * 0.949999988079071044921875);
        float _2642 = _2641 * _2641;
        float _2643 = cbLight._m0[_2623].x + _993;
        float _2644 = cbLight._m0[_2623].y + _994;
        float _2645 = cbLight._m0[_2623].z + _995;
        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
        float _2650 = _2649 * _2643;
        float _2651 = _2649 * _2644;
        float _2652 = _2649 * _2645;
        float _2653 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2623].xyz));
        float _4549 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2657 = dot(vec3(_913, _914, _915), vec3(_2650, _2651, _2652));
        float _4560 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2661 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2650, _2651, _2652));
        float _4571 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2665 = _2642 * _2642;
        float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
        float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
        float _2683 = 1.0 - _2642;
        float _2693 = (0.5 / (((_2300 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2683) + _2642) * _2656))) * _2656;
        float _4582 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2612 = (((((_2676 * _2322) + _1064) * cbLight._m0[_2627].x) * _2695) * _2696) + _2498;
        _2614 = (((((_2676 * _2324) + _1066) * cbLight._m0[_2627].y) * _2695) * _2696) + _2500;
        _2616 = (((((_2676 * _2325) + _1067) * cbLight._m0[_2627].z) * _2695) * _2696) + _2502;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2130.y == 0u)
    {
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2771;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2771;
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2771;
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.x;
        uint _2798 = uint((float(_2786.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1002) / _2787))) + floor(float(uint(cbSceneParam._m0[85u].x * _1001) / _2787)));
        float _2808 = (log2(_2774 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2809 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        uint _2812 = uint(isnan(14.0) ? _2809 : (isnan(_2809) ? 14.0 : min(_2809, 14.0)));
        uvec4 _2817 = texelFetch(g_lightClusterGridBuffer, int(((_2812 << 2u) + (_2798 << 6u)) >> 2u));
        uint _2818 = _2817.x;
        uint _2819 = _2786.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2819 >> 4u) & 15u)) + 4294967295u) & _2818) == 0u) || ((_2819 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3080)
                {
                    frontier_phi_61_pred = _3064;
                    frontier_phi_61_pred_1 = _3069;
                    frontier_phi_61_pred_2 = _3068;
                    frontier_phi_61_pred_3 = _3067;
                    frontier_phi_61_pred_4 = _3066;
                    frontier_phi_61_pred_5 = _3065;
                }
                else
                {
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    uint _3194;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3079;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    for (;;)
                    {
                        uint _3198 = uint(findLSB(_3194)) + (_3070 << 5u);
                        uint _3195 = (_3194 + 4294967295u) & _3194;
                        uint _3200 = _3198 * 48u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3220 = (_3198 * 48u) + 4u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3239 = (_3198 * 48u) + 8u;
                        vec3 _3250 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x));
                        float _3254 = _3214.x - _2772;
                        float _3255 = _3214.y - _2773;
                        float _3256 = _3214.z - _2774;
                        float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                        float _3260 = inversesqrt(_3257);
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3264 = dot(vec3(_1020, _1023, _1026), vec3(_3261, _3262, _3263));
                        float _3269 = 1.0 - (_3257 * _3214.w);
                        float _4608 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3271 = sqrt(_3257) * _3233.w;
                        float _3274 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3264) + _3275;
                        float _3281 = _3271 * _3271;
                        float _3285 = ((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3270) / ((_3281 * 0.699999988079071044921875) + 1.0);
                        float _3289 = (-0.0) - _2772;
                        float _3290 = (-0.0) - _2773;
                        float _3291 = (-0.0) - _2774;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3306 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                        float _3307 = 1.0 - _1095;
                        float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                        float _3315 = _3314 * _3314;
                        float _3316 = _3315 * _3315;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3327 = dot(vec3(_1020, _1023, _1026), vec3(_3296, _3297, _3298));
                        float _4624 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3331 = dot(vec3(_1020, _1023, _1026), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                        float _4635 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                        float _3339 = _3274 * _3315;
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3264) + _3340;
                        float _4646 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3345 = 1.0 - _3315;
                        float _3355 = (0.5 / (((_3344 * ((_3330 * _3345) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3315) * _3330))) * _3344;
                        float _4657 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3366 = (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3338 * _3338) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125))) * _3270;
                        _3123 = (_3285 * _3233.x) + _3191;
                        _3124 = (_3285 * _3233.y) + _3192;
                        _3125 = (_3285 * _3233.z) + _3193;
                        _3120 = (_3366 * _3250.x) + _3188;
                        _3121 = (_3366 * _3250.y) + _3189;
                        _3122 = (_3366 * _3250.z) + _3190;
                        if (_3195 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3195;
                        }
                    }
                    frontier_phi_61_pred = _3120;
                    frontier_phi_61_pred_1 = _3125;
                    frontier_phi_61_pred_2 = _3124;
                    frontier_phi_61_pred_3 = _3123;
                    frontier_phi_61_pred_4 = _3122;
                    frontier_phi_61_pred_5 = _3121;
                }
                _2920 = frontier_phi_61_pred;
                _2930 = frontier_phi_61_pred_1;
                _2928 = frontier_phi_61_pred_2;
                _2926 = frontier_phi_61_pred_3;
                _2924 = frontier_phi_61_pred_4;
                _2922 = frontier_phi_61_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2920;
                    _3065 = _2922;
                    _3066 = _2924;
                    _3067 = _2926;
                    _3068 = _2928;
                    _3069 = _2930;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2936) & _2818) == 0u)
        {
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
            float _3058 = _3057 * _2772;
            float _3059 = _3057 * _2773;
            float _3060 = _3057 * _2774;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3171 = _2919;
                float _3172 = _2921;
                float _3173 = _2923;
                float _3174 = _2925;
                float _3175 = _2927;
                float _3176 = _2929;
                uint _3177 = _2936;
                uint _3186;
                bool _3187;
                for (;;)
                {
                    _3186 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                    _3187 = _3186 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3187)
                    {
                        frontier_phi_67_pred = _3174;
                        frontier_phi_67_pred_1 = _3175;
                        frontier_phi_67_pred_2 = _3176;
                        frontier_phi_67_pred_3 = _3173;
                        frontier_phi_67_pred_4 = _3172;
                        frontier_phi_67_pred_5 = _3171;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        uint _3390 = _3186;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3459;
                        vec4 _3474;
                        float _3520;
                        bool _3521;
                        for (;;)
                        {
                            uint _3401 = ((_3177 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3446 = (_3401 * 40u) + 16u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3401 * 40u) + 20u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3401 * 40u) + 24u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3495 = (_3401 * 40u) + 28u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3520 = fma(_2774, _3508.z, fma(_2773, _3508.y, _3508.x * _2772)) + _3508.w;
                            _3521 = !((fma(_2774, _3489.z, fma(_2773, _3489.y, _3489.x * _2772)) + _3489.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3521)
                            {
                                float _3548 = _3416.x - _2772;
                                float _3549 = _3416.y - _2773;
                                float _3550 = _3416.z - _2774;
                                float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                                float _3554 = inversesqrt(_3551);
                                float _3555 = _3554 * _3548;
                                float _3556 = _3554 * _3549;
                                float _3557 = _3554 * _3550;
                                float _3561 = 1.0 - (_3551 / (_3417 * _3417));
                                float _4668 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3566 = sqrt(_3551) * _3432.w;
                                float _3568 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                                float _3569 = _3568 * _3568;
                                float _3572 = ((1.0 - _3569) * dot(vec3(_3555, _3556, _3557), vec3(_1020, _1023, _1026))) + _3569;
                                float _3575 = _3566 * _3566;
                                float _3579 = (fma(_2774, _3459.z, fma(_2773, _3459.y, _3459.x * _2772)) + _3459.w) / _3520;
                                float _3580 = (fma(_2774, _3474.z, fma(_2773, _3474.y, _3474.x * _2772)) + _3474.w) / _3520;
                                float _3584 = 1.0 - dot(vec2(_3579, _3580), vec2(_3579, _3580));
                                float _4684 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3586 = _3585 * (((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3562) / ((_3575 * 0.699999988079071044921875) + 1.0));
                                float _3598 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                                float _3599 = 1.0 - _1095;
                                float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                                float _3607 = _3606 * _3606;
                                float _3608 = _3607 * _3607;
                                float _3609 = _3555 - _3058;
                                float _3610 = _3556 - _3059;
                                float _3611 = _3557 - _3060;
                                float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                                float _3619 = dot(vec3(_1020, _1023, _1026), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4695 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3623 = dot(vec3(_1020, _1023, _1026), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                                float _4706 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                                float _3631 = _3568 * _3607;
                                float _3632 = _3631 * _3631;
                                float _3638 = ((1.0 - _3632) * dot(vec3(_1020, _1023, _1026), vec3(_3555, _3556, _3557))) + _3632;
                                float _4717 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3640 = 1.0 - _3607;
                                float _3650 = (0.5 / (((_3639 * ((_3622 * _3640) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3607) * _3622))) * _3639;
                                float _4728 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3660 = (_3585 * _3562) * (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3630 * _3630) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3660 * _3444.x;
                                frontier_phi_73_pred_1 = _3660 * _3444.y;
                                frontier_phi_73_pred_2 = _3586 * _3432.z;
                                frontier_phi_73_pred_3 = _3586 * _3432.y;
                                frontier_phi_73_pred_4 = _3586 * _3432.x;
                                frontier_phi_73_pred_5 = _3660 * _3444.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_73_pred;
                            _3665 = frontier_phi_73_pred_1;
                            _3669 = frontier_phi_73_pred_2;
                            _3668 = frontier_phi_73_pred_3;
                            _3667 = frontier_phi_73_pred_4;
                            _3666 = frontier_phi_73_pred_5;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3374;
                        frontier_phi_67_pred_1 = _3375;
                        frontier_phi_67_pred_2 = _3376;
                        frontier_phi_67_pred_3 = _3373;
                        frontier_phi_67_pred_4 = _3372;
                        frontier_phi_67_pred_5 = _3371;
                    }
                    _3039 = frontier_phi_67_pred;
                    _3041 = frontier_phi_67_pred_1;
                    _3043 = frontier_phi_67_pred_2;
                    _3037 = frontier_phi_67_pred_3;
                    _3035 = frontier_phi_67_pred_4;
                    _3033 = frontier_phi_67_pred_5;
                    uint _3178 = _3177 + 1u;
                    if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3171 = _3033;
                        _3172 = _3035;
                        _3173 = _3037;
                        _3174 = _3039;
                        _3175 = _3041;
                        _3176 = _3043;
                        _3177 = _3178;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3041;
                frontier_phi_55_56_ladder_1 = _3043;
                frontier_phi_55_56_ladder_2 = _3039;
                frontier_phi_55_56_ladder_3 = _3037;
                frontier_phi_55_56_ladder_4 = _3035;
                frontier_phi_55_56_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            _3032 = frontier_phi_55_56_ladder_5;
            _3034 = frontier_phi_55_56_ladder_4;
            _3036 = frontier_phi_55_56_ladder_3;
            _3038 = frontier_phi_55_56_ladder_2;
            _3040 = frontier_phi_55_56_ladder;
            _3042 = frontier_phi_55_56_ladder_1;
        }
        float _3047 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _2831 = (_3047 * _3038) + _2264;
        _2833 = (_3047 * _3040) + _2266;
        _2835 = (_3047 * _3042) + _2268;
        _2837 = ((_3032 * _1064) * _3047) + _2612;
        _2839 = ((_3034 * _1066) * _3047) + _2614;
        _2841 = ((_3036 * _1067) * _3047) + _2616;
    }
    else
    {
        _2831 = _2264;
        _2833 = _2266;
        _2835 = _2268;
        _2837 = _2612;
        _2839 = _2614;
        _2841 = _2616;
    }
    float _4744 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4755 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _4766 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    uint _2861 = _1039 + 6u;
    float _2869 = _1001 / cbSceneParam._m0[86u].x;
    float _2870 = _1002 / cbSceneParam._m0[86u].y;
    vec4 _2884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, (log2((isnan(cbSceneParam._m0[77u].w) ? _936 : (isnan(_936) ? cbSceneParam._m0[77u].w : min(_936, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2886 = _2884.x;
    float _2887 = _2884.y;
    float _2888 = _2884.z;
    float _2889 = _2884.w;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_936 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_936) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _936 : min(cbSceneParam._m0[80u].w, _936));
        float _2945 = _2944 / _936;
        float _2956 = _2945 * _986;
        float _2957 = _987 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2960 = _2945 * _988;
        float _2962 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2963 = _2962 + cbSceneParam._m0[79u].w;
        float _2964 = cbSceneParam._m0[79u].w - _2957;
        float _2970 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2960 * _2960));
        float _2973 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2970;
        float _2978 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2980 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3133;
        if (abs((_2958 - _2962) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3133 = ((((_2963 > 0.0) ? exp2(_2978 * _2963) : (2.0 - exp2(_2980 * _2963))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2973;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : max(_2963, _2964));
            float _3095 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : min(_2963, _2964));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3133 = ((abs(_2970 / _2958) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2978 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2978 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2980 * _3104) - exp2(_2980 * _3105)) * _3093))) + (_2973 * cbSceneParam._m0[80u].z);
        }
        vec4 _3135 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, 1.0), 0.0);
        float _3144 = exp2((_3133 * (-1.44269502162933349609375)) * (1.0 - _3135.w));
        float _3145 = log2(_3144);
        float _3161 = log2(_2889);
        _2982 = (exp2(_3161 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].x)) * _3135.x) / cbSceneParam._m0[78u].x)) + _2886;
        _2984 = (exp2(_3161 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].y)) * _3135.y) / cbSceneParam._m0[78u].y)) + _2887;
        _2986 = (exp2(_3161 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].z)) * _3135.z) / cbSceneParam._m0[78u].z)) + _2888;
        _2988 = _3144 * _2889;
    }
    else
    {
        _2982 = _2886;
        _2984 = _2887;
        _2986 = _2888;
        _2988 = _2889;
    }
    float _3000 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3001 = _3000 == 3.0;
    float _3002 = log2(_2988);
    float _3009 = exp2(_3002 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2831 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1079))) + ((_2837 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1883)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3002 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2833 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1079))) + ((_2839 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1883)) * cbPerFrame._m0[3u].x));
    float _3011 = exp2(_3002 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2835 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1079))) + ((_2841 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1883)) * cbPerFrame._m0[3u].x));
    float _3020 = (_3000 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3020 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.y = _3020 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.z = _3020 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.w = cbInstanceData._m0[_2861].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2861].w;
}


