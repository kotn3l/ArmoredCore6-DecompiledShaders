#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1565;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _315 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _319 = _315.z;
    float _332 = exp2(log2((1.0 - _319) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _350 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _362 = exp2(log2(_350.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _364 = isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0));
    float _373 = exp2(log2(cbMtdParam._m0[23u].y * _319) * cbMtdParam._m0[22u].y);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
    vec4 _387 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _390 = _387.y;
    float _393 = (_387.x + (-0.02500000037252902984619140625)) * 8.0;
    float _397 = roundEven(5.0 - _393);
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(4.0) ? _398 : (isnan(_398) ? 4.0 : min(_398, 4.0));
    float _412 = floor(_399);
    vec4 _415 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _412));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[17u].x;
    _209[0u] = cbMtdParam._m0[17u].y;
    _210[0u] = cbMtdParam._m0[17u].z;
    _208[1u] = cbMtdParam._m0[15u].x;
    _209[1u] = cbMtdParam._m0[15u].y;
    _210[1u] = cbMtdParam._m0[15u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[13u].x;
    _209[3u] = cbMtdParam._m0[13u].y;
    _210[3u] = cbMtdParam._m0[13u].z;
    _208[4u] = cbMtdParam._m0[12u].x;
    _209[4u] = cbMtdParam._m0[12u].y;
    _210[4u] = cbMtdParam._m0[12u].z;
    _208[5u] = cbMtdParam._m0[18u].x;
    _209[5u] = cbMtdParam._m0[18u].y;
    _210[5u] = cbMtdParam._m0[18u].z;
    float _479 = roundEven(_393);
    float _480 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    uint _482 = uint(int(isnan(5.0) ? _480 : (isnan(_480) ? 5.0 : min(_480, 5.0))));
    vec4 _512 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _523 = cbMtdParam._m0[9u].x * _512.x;
    float _524 = cbMtdParam._m0[9u].y * _512.y;
    float _525 = cbMtdParam._m0[9u].z * _512.z;
    float _532 = ((((((_208[_482] - cbMtdParam._m0[10u].x) * _390) + cbMtdParam._m0[10u].x) * _415.x) - _523) * _375) + _523;
    float _533 = ((((((_209[_482] - cbMtdParam._m0[10u].y) * _390) + cbMtdParam._m0[10u].y) * _415.y) - _524) * _375) + _524;
    float _534 = ((((((_210[_482] - cbMtdParam._m0[10u].z) * _390) + cbMtdParam._m0[10u].z) * _415.z) - _525) * _375) + _525;
    float _540 = exp2(log2(_315.w) * cbMtdParam._m0[23u].w);
    vec4 _553 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _572 = (((cbMtdParam._m0[16u].x * _553.x) - _532) * _540) + _532;
    float _573 = (((cbMtdParam._m0[16u].y * _553.y) - _533) * _540) + _533;
    float _574 = (((cbMtdParam._m0[16u].z * _553.z) - _534) * _540) + _534;
    vec4 _587 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _607 = (((cbMtdParam._m0[19u].x * _587.x) - _572) * _364) + _572;
    float _608 = (((cbMtdParam._m0[19u].y * _587.y) - _573) * _364) + _573;
    float _609 = (((cbMtdParam._m0[19u].z * _587.z) - _574) * _364) + _574;
    vec4 _621 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _646 = (_350.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _621.x) - _607) * _334) + _607);
    float _648 = (_350.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _621.y) - _608) * _334) + _608);
    float _650 = (_350.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _621.z) - _609) * _334) + _609);
    vec4 _662 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _680 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _682 = _680 * (cbMtdParam._m0[24u].z + 1.0);
    float _4221 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _690 = (_683 * ((cbMtdParam._m0[11u].x * _662.x) - _646)) + _646;
    float _691 = (((cbMtdParam._m0[11u].y * _662.y) - _648) * _683) + _648;
    float _692 = (((cbMtdParam._m0[11u].z * _662.z) - _650) * _683) + _650;
    float _696 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _704 = (_696 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _696))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4232 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _712 = ((cbMtdParam._m0[21u].x - _690) * _705) + _690;
    float _713 = ((cbMtdParam._m0[21u].y - _691) * _705) + _691;
    float _714 = ((cbMtdParam._m0[21u].z - _692) * _705) + _692;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[28u].w;
    _204[0u] = cbMtdParam._m0[29u].x;
    _203[1u] = cbMtdParam._m0[30u].w;
    _204[1u] = cbMtdParam._m0[31u].x;
    _203[2u] = cbMtdParam._m0[30u].y;
    _204[2u] = cbMtdParam._m0[30u].z;
    _203[3u] = cbMtdParam._m0[29u].w;
    _204[3u] = cbMtdParam._m0[30u].x;
    _203[4u] = cbMtdParam._m0[29u].y;
    _204[4u] = cbMtdParam._m0[29u].z;
    float _754 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    uint _756 = uint(int(isnan(4.0) ? _754 : (isnan(_754) ? 4.0 : min(_754, 4.0))));
    float _763 = ((_204[_756] - cbMtdParam._m0[22u].z) * _375) + cbMtdParam._m0[22u].z;
    float _766 = ((cbMtdParam._m0[22u].w - _763) * _540) + _763;
    float _769 = ((cbMtdParam._m0[25u].x - _766) * _364) + _766;
    float _772 = ((cbMtdParam._m0[26u].x - _769) * _334) + _769;
    float _777 = (cbMtdParam._m0[24u].y + 1.0) * _680;
    float _4253 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _780 = _772 - (_772 * _778);
    float _782 = _780 - (_780 * _696);
    vec4 _795 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _412));
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _814 = _812.x;
    float _815 = _812.y;
    float _820 = cbMtdParam._m0[22u].x + _812.z;
    float _823 = (((_795.z + _203[_756]) - _820) * _375) + _820;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _846 = (((_835.z - _823) + cbMtdParam._m0[28u].y) * _540) + _823;
    float _852 = ((((_319 * 2.0) * _846) - _846) * cbMtdParam._m0[24u].w) + _846;
    vec4 _864 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _875 = (((cbMtdParam._m0[23u].z + _864.z) - _852) * _364) + _852;
    vec4 _888 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _899 = (((_888.z - _875) + cbMtdParam._m0[26u].y) * _334) + _875;
    vec4 _911 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _923 = ((_911.z - _899) * _778) + _899;
    vec4 _938 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _952 = ((cbMtdParam._m0[27u].y * _696) * ((_938.z * cbMtdParam._m0[27u].x) - _923)) + _923;
    float _967 = ((_795.x - _814) * _375) + _814;
    float _968 = ((_795.y - _815) * _375) + _815;
    float _973 = ((_835.x - _967) * _540) + _967;
    float _974 = ((_835.y - _968) * _540) + _968;
    float _979 = ((_864.x - _973) * _364) + _973;
    float _980 = ((_864.y - _974) * _364) + _974;
    float _989 = ((((_888.x - _979) * _334) + _979) * 2.0) + (-1.0);
    float _990 = ((((_888.y - _980) * _334) + _980) * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4264 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _996 = sqrt(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))));
    float _1012 = (((cbMtdParam._m0[25u].y * ((_315.x * 2.0) + (-1.0))) + _989) + (((((_911.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _778)) + ((((_938.x * 2.0) + (-1.0)) * _696) * cbMtdParam._m0[26u].w);
    float _1013 = (((cbMtdParam._m0[25u].y * ((_315.y * 2.0) + (-1.0))) + _990) + (((((_911.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _778)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_938.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1016 = fma(_996, _245 * NORMAL.x, fma(_1013, _252 * TANGENT.x, (_238 * _230) * _1012));
    float _1019 = fma(_996, _245 * NORMAL.y, fma(_1013, _252 * TANGENT.y, (_238 * _231) * _1012));
    float _1022 = fma(_996, _245 * NORMAL.z, fma(_1013, _252 * TANGENT.z, (_238 * _232) * _1012));
    float _1026 = inversesqrt(dot(vec3(_1016, _1019, _1022), vec3(_1016, _1019, _1022)));
    float _1027 = _1026 * _1016;
    float _1028 = _1026 * _1019;
    float _1029 = _1026 * _1022;
    float _4275 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _1030 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4297 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4308 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4319 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1034 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _1050 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1100 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1090);
    float _1101 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1090);
    float _1102 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1090);
    float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
    float _1107 = _1100 * _1106;
    float _1108 = _1101 * _1106;
    float _1109 = _1102 * _1106;
    float _1115 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1116 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1134 = fma(_1029, cbSceneParam._m0[5u].z, fma(_1028, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1027));
    float _1137 = fma(_1029, cbSceneParam._m0[6u].z, fma(_1028, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1027));
    float _1140 = fma(_1029, cbSceneParam._m0[7u].z, fma(_1028, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1027));
    uint _1153 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1155 = (_1153 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1161 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * cbInstanceData._m0[_1155].x;
    float _1162 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * cbInstanceData._m0[_1155].y;
    float _1163 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * cbInstanceData._m0[_1155].z;
    float _4330 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _4341 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _1167 = 1.0 - _1034;
    float _1168 = _1164 * _1167;
    float _1169 = _1165 * _1167;
    float _1170 = _1166 * _1167;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1034;
    float _1176 = (_1165 + (-0.039999999105930328369140625)) * _1034;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1034;
    float _1178 = _1175 + 0.039999999105930328369140625;
    float _1180 = _1176 + 0.039999999105930328369140625;
    float _1181 = _1177 + 0.039999999105930328369140625;
    vec4 _1190 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1115, cbSceneParam._m0[86u].y * _1116));
    float _1193 = _1190.x * TEXCOORD_3.w;
    float _1194 = dot(vec3(_1027, _1028, _1029), vec3(_1107, _1108, _1109));
    float _1197 = _1194 * 2.0;
    float _1201 = (_1197 * _1027) - _1107;
    float _1202 = (_1197 * _1028) - _1108;
    float _1203 = (_1197 * _1029) - _1109;
    float _1207 = abs(dot(vec3(_1107, _1108, _1109), vec3(_1027, _1028, _1029)));
    float _4363 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1209 = sqrt(_1030);
    float _1220 = exp2((_1209 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1209 * 3.0));
    float _1226 = (1.0 - _1220) * ((_1209 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1227 = _1220 * _1209;
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1564;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1289 = fma(_1263, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1255));
        float _1293 = fma(_1263, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1255));
        float _1297 = fma(_1263, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1255));
        float _1322 = _1255 + _1027;
        float _1323 = _1259 + _1028;
        float _1324 = _1263 + _1029;
        float _1334 = fma(_1324, cbModelParam._m0[26u].z, fma(_1323, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1322)) - _1289;
        float _1335 = fma(_1324, cbModelParam._m0[27u].z, fma(_1323, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1322)) - _1293;
        float _1336 = fma(_1324, cbModelParam._m0[28u].z, fma(_1323, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1322)) - _1297;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1289 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1293 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[34u].z) + ((((((_1297 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1392 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1358.x + (-0.5));
        float _1394 = _1392 * (_1358.y + (-0.5));
        float _1395 = _1392 * (_1358.z + (-0.5));
        float _1402 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1365.x + (-0.5));
        float _1404 = _1402 * (_1365.y + (-0.5));
        float _1405 = _1402 * (_1365.z + (-0.5));
        float _1412 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1372.x + (-0.5));
        float _1414 = _1412 * (_1372.y + (-0.5));
        float _1415 = _1412 * (_1372.z + (-0.5));
        float _1422 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1379.x + (-0.5));
        float _1424 = _1422 * (_1379.y + (-0.5));
        float _1425 = _1422 * (_1379.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1446 = (dot(vec3(_1027, _1028, _1029), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1456 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4411 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1458 + 1.0))) + _1463) * _1426;
        float _1473 = _1394 * 0.5;
        float _1474 = _1404 * 0.5;
        float _1475 = _1414 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_1027, _1028, _1029), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4444 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1500 + 1.0))) + _1505) * _1427;
        float _1515 = _1395 * 0.5;
        float _1516 = _1405 * 0.5;
        float _1517 = _1415 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_1027, _1028, _1029), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4477 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1542 + 1.0))) + _1547) * _1428;
        _1564 = _1395;
        _1566 = _1394;
        _1567 = _1393;
        _1568 = _1405;
        _1569 = _1404;
        _1570 = _1403;
        _1571 = _1415;
        _1572 = _1414;
        _1573 = _1413;
        _1574 = _1428;
        _1575 = _1427;
        _1576 = _1426;
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1565;
        _1566 = _1565;
        _1567 = _1565;
        _1568 = _1565;
        _1569 = _1565;
        _1570 = _1565;
        _1571 = _1565;
        _1572 = _1565;
        _1573 = _1565;
        _1574 = _1565;
        _1575 = _1565;
        _1576 = _1565;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1602 = fma(_1263, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255));
        float _1606 = fma(_1263, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255));
        float _1610 = fma(_1263, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255));
        float _1633 = _1255 + _1027;
        float _1634 = _1259 + _1028;
        float _1635 = _1263 + _1029;
        float _1645 = fma(_1635, cbModelParam._m0[30u].z, fma(_1634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1633)) - _1602;
        float _1646 = fma(_1635, cbModelParam._m0[31u].z, fma(_1634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1633)) - _1606;
        float _1647 = fma(_1635, cbModelParam._m0[32u].z, fma(_1634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1633)) - _1610;
        float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
        float _1664 = ((_1651 * _1645) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1602 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1665 = ((_1651 * _1646) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1606 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1666 = ((_1651 * _1647) / cbModelParam._m0[35u].z) + ((((((_1610 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        float _1701 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1668.x + (-0.5));
        float _1703 = _1701 * (_1668.y + (-0.5));
        float _1704 = _1701 * (_1668.z + (-0.5));
        float _1711 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1675.x + (-0.5));
        float _1713 = _1711 * (_1675.y + (-0.5));
        float _1714 = _1711 * (_1675.z + (-0.5));
        float _1721 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1682.x + (-0.5));
        float _1723 = _1721 * (_1682.y + (-0.5));
        float _1724 = _1721 * (_1682.z + (-0.5));
        float _1731 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1689.x + (-0.5));
        float _1733 = _1731 * (_1689.y + (-0.5));
        float _1734 = _1731 * (_1689.z + (-0.5));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = _1702 * 0.5;
        float _1739 = _1712 * 0.5;
        float _1740 = _1722 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_1027, _1028, _1029), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4518 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4529 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4540 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_1765 + 1.0))) + _1770) * _1735;
        float _1780 = _1703 * 0.5;
        float _1781 = _1713 * 0.5;
        float _1782 = _1723 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1027, _1028, _1029), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4551 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1736 + 9.9999997473787516355514526367188e-06);
        float _4562 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4573 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_1807 + 1.0))) + _1812) * _1736;
        float _1822 = _1704 * 0.5;
        float _1823 = _1714 * 0.5;
        float _1824 = _1724 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1027, _1028, _1029), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4584 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4595 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4606 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_1849 + 1.0))) + _1854) * _1737;
        _1871 = _1704;
        _1872 = _1703;
        _1873 = _1702;
        _1874 = _1714;
        _1875 = _1713;
        _1876 = _1712;
        _1877 = _1724;
        _1878 = _1723;
        _1879 = _1722;
        _1880 = _1737;
        _1881 = _1736;
        _1882 = _1735;
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
        _1884 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
    }
    else
    {
        _1871 = _1565;
        _1872 = _1565;
        _1873 = _1565;
        _1874 = _1565;
        _1875 = _1565;
        _1876 = _1565;
        _1877 = _1565;
        _1878 = _1565;
        _1879 = _1565;
        _1880 = _1565;
        _1881 = _1565;
        _1882 = _1565;
        _1883 = 0.0;
        _1884 = 0.0;
        _1885 = 0.0;
    }
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1577)) + _1577;
    float _1896 = (cbModelParam._m0[1u].x * (_1884 - _1578)) + _1578;
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1579)) + _1579;
    float _1918 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1895));
    float _1939 = _1201 * 0.5;
    float _1940 = _1202 * 0.5;
    float _1941 = _1203 * 0.5;
    float _1942 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1945 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1872, _1875, _1878, _1881));
    float _1948 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1982;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1955 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1564, _1568, _1571, _1574));
        float _1959 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1566, _1569, _1572, _1575));
        float _1963 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1567, _1570, _1573, _1576));
        float _1970 = dot(vec4(cbModelParam._m0[39u]), vec4(_1939, _1940, _1941, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1993;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1984 = dot(vec4(cbModelParam._m0[40u]), vec4(_1939, _1940, _1941, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _1997 = (_1993 * cbModelParam._m0[1u].x) + (_1982 * (1.0 - cbModelParam._m0[1u].x));
    float _2007 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1030);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2007 : min(cbModelParam._m0[25u].z, _2007));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2055 = fma(_1263, cbModelParam._m0[13u].z, fma(_1259, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1255)) + cbModelParam._m0[13u].w;
        float _2059 = fma(_1263, cbModelParam._m0[14u].z, fma(_1259, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1255)) + cbModelParam._m0[14u].w;
        float _2063 = fma(_1263, cbModelParam._m0[15u].z, fma(_1259, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1255)) + cbModelParam._m0[15u].w;
        float _2066 = fma(_1203, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1201));
        float _2069 = fma(_1203, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1201));
        float _2072 = fma(_1203, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1201));
        float _2100;
        if (_2066 > 0.0)
        {
            _2100 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2100 = frontier_phi_14_12_ladder;
        }
        float _2271;
        if (_2069 > 0.0)
        {
            _2271 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2271 = frontier_phi_23_19_ladder;
        }
        float _2566;
        if (_2072 > 0.0)
        {
            _2566 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2566 = frontier_phi_35_30_ladder;
        }
        float _2568 = isnan(_2271) ? _2100 : (isnan(_2100) ? _2271 : min(_2100, _2271));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _2066) + _2055;
        float _2574 = (_2569 * _2069) + _2059;
        float _2575 = (_2569 * _2072) + _2063;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2576;
        float _2580 = _2576 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 > _2580) || ((_2574 < _2578) || ((_2573 < _2578) || (_2573 > _2580))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2575, cbModelParam._m0[9u].z, fma(_2574, cbModelParam._m0[9u].y, _2573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2575, cbModelParam._m0[10u].z, fma(_2574, cbModelParam._m0[10u].y, _2573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2575, cbModelParam._m0[11u].z, fma(_2574, cbModelParam._m0[11u].y, _2573 * cbModelParam._m0[11u].x))), _2008);
            frontier_phi_13_35_ladder = _2720.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2720.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2720.x * cbModelParam._m0[1u].y;
        }
        _2088 = frontier_phi_13_35_ladder_2;
        _2090 = frontier_phi_13_35_ladder_1;
        _2092 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1201, _1202, _1203), _2008);
        _2088 = _2076.x * cbModelParam._m0[1u].y;
        _2090 = _2076.y * cbModelParam._m0[1u].y;
        _2092 = _2076.z * cbModelParam._m0[1u].y;
    }
    float _2096 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1030);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2096 : min(cbModelParam._m0[25u].w, _2096));
    float _2186;
    float _2188;
    float _2190;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2150 = fma(_1263, cbModelParam._m0[21u].z, fma(_1259, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1255)) + cbModelParam._m0[21u].w;
        float _2154 = fma(_1263, cbModelParam._m0[22u].z, fma(_1259, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1255)) + cbModelParam._m0[22u].w;
        float _2158 = fma(_1263, cbModelParam._m0[23u].z, fma(_1259, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1255)) + cbModelParam._m0[23u].w;
        float _2161 = fma(_1203, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1201));
        float _2164 = fma(_1203, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1201));
        float _2167 = fma(_1203, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1201));
        float _2276;
        if (_2161 > 0.0)
        {
            _2276 = abs((1.0 - _2150) / _2161);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2150 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2276 = frontier_phi_25_21_ladder;
        }
        float _2593;
        if (_2164 > 0.0)
        {
            _2593 = abs((1.0 - _2154) / _2164);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2154 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2593 = frontier_phi_37_32_ladder;
        }
        float _2931;
        if (_2167 > 0.0)
        {
            _2931 = abs((1.0 - _2158) / _2167);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2158 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2931 = frontier_phi_47_44_ladder;
        }
        float _2933 = isnan(_2593) ? _2276 : (isnan(_2276) ? _2593 : min(_2276, _2593));
        float _2934 = isnan(_2931) ? _2933 : (isnan(_2933) ? _2931 : min(_2933, _2931));
        float _2938 = (_2934 * _2161) + _2150;
        float _2939 = (_2934 * _2164) + _2154;
        float _2940 = (_2934 * _2167) + _2158;
        float _2941 = _2934 * 9.9999997473787516355514526367188e-05;
        float _2942 = (-1.0) - _2941;
        float _2944 = _2941 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2940 > _2944) || ((_2940 < _2942) || ((_2939 > _2944) || ((_2939 < _2942) || ((_2938 < _2942) || (_2938 > _2944))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2940, cbModelParam._m0[17u].z, fma(_2939, cbModelParam._m0[17u].y, _2938 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2940, cbModelParam._m0[18u].z, fma(_2939, cbModelParam._m0[18u].y, _2938 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2940, cbModelParam._m0[19u].z, fma(_2939, cbModelParam._m0[19u].y, _2938 * cbModelParam._m0[19u].x))), _2097);
            frontier_phi_22_47_ladder = _3062.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3062.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3062.x * cbModelParam._m0[1u].z;
        }
        _2186 = frontier_phi_22_47_ladder_2;
        _2188 = frontier_phi_22_47_ladder_1;
        _2190 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1201, _1202, _1203), _2097);
        _2186 = _2170.x * cbModelParam._m0[1u].z;
        _2188 = _2170.y * cbModelParam._m0[1u].z;
        _2190 = _2170.z * cbModelParam._m0[1u].z;
    }
    float _2203 = (((_1226 * _1178) + _1227) * _1193) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2205 = (((_1226 * _1180) + _1227) * _1193) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2207 = (((_1226 * _1181) + _1227) * _1193) * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2210 = fma(_2207, cbSceneParam._m0[89u].z, fma(_2205, cbSceneParam._m0[89u].y, _2203 * cbSceneParam._m0[89u].x));
    float _2213 = fma(_2207, cbSceneParam._m0[90u].z, fma(_2205, cbSceneParam._m0[90u].y, _2203 * cbSceneParam._m0[90u].x));
    float _2216 = fma(_2207, cbSceneParam._m0[91u].z, fma(_2205, cbSceneParam._m0[91u].y, _2203 * cbSceneParam._m0[91u].x));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2263 = _2250 / _2262;
    float _2264 = _2254 / _2262;
    float _2265 = _2258 / _2262;
    float _2412;
    float _2413;
    float _2414;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2292 = ((uint(_2265 > cbSceneParam._m0[59u].y) + uint(_2265 > cbSceneParam._m0[59u].x)) + uint(_2265 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2293 = _2292 + 43u;
        uint _2301 = _2292 + 44u;
        uint _2309 = _2292 + 45u;
        uint _2317 = _2292 + 46u;
        float _2328 = fma(_2262, cbSceneParam._m0[_2293].w, fma(_2258, cbSceneParam._m0[_2293].z, fma(_2254, cbSceneParam._m0[_2293].y, _2250 * cbSceneParam._m0[_2293].x)));
        float _2332 = fma(_2262, cbSceneParam._m0[_2301].w, fma(_2258, cbSceneParam._m0[_2301].z, fma(_2254, cbSceneParam._m0[_2301].y, _2250 * cbSceneParam._m0[_2301].x)));
        float _2340 = fma(_2262, cbSceneParam._m0[_2317].w, fma(_2258, cbSceneParam._m0[_2317].z, fma(_2254, cbSceneParam._m0[_2317].y, _2250 * cbSceneParam._m0[_2317].x)));
        float _2345 = cbSceneParam._m0[33u].z * _2340;
        float _2347 = cbSceneParam._m0[33u].w * _2340;
        float _2350 = fma(_2262, cbSceneParam._m0[_2309].w, fma(_2258, cbSceneParam._m0[_2309].z, fma(_2254, cbSceneParam._m0[_2309].y, _2250 * cbSceneParam._m0[_2309].x))) / _2340;
        float _2398 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
        float _4732 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2405 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2345 + _2328) / _2340, (_2347 + _2332) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2347 + _2328) / _2340, (_2332 - _2345) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2345) / _2340, (_2332 - _2347) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2347) / _2340, (_2345 + _2332) / _2340), _2350), 0.0)).x), vec4(0.25)));
        _2412 = 1.0 - (_2405 * cbSceneParam._m0[34u].x);
        _2413 = 1.0 - (_2405 * cbSceneParam._m0[34u].y);
        _2414 = 1.0 - (_2405 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2412 = 1.0;
        _2413 = 1.0;
        _2414 = 1.0;
    }
    float _2478;
    float _2480;
    float _2482;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2466 = fma(_2262, cbSceneParam._m0[63u].w, fma(_2258, cbSceneParam._m0[63u].z, fma(_2254, cbSceneParam._m0[63u].y, _2250 * cbSceneParam._m0[63u].x)));
        float _2467 = fma(_2262, cbSceneParam._m0[60u].w, fma(_2258, cbSceneParam._m0[60u].z, fma(_2254, cbSceneParam._m0[60u].y, _2250 * cbSceneParam._m0[60u].x))) / _2466;
        float _2468 = fma(_2262, cbSceneParam._m0[61u].w, fma(_2258, cbSceneParam._m0[61u].z, fma(_2254, cbSceneParam._m0[61u].y, _2250 * cbSceneParam._m0[61u].x))) / _2466;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2467 >= cbSceneParam._m0[64u].x) && (_2468 >= cbSceneParam._m0[64u].y)) && (_2467 <= cbSceneParam._m0[64u].z)) && (_2468 <= cbSceneParam._m0[64u].w))
        {
            float _2606 = fma(_2262, cbSceneParam._m0[62u].w, fma(_2258, cbSceneParam._m0[62u].z, fma(_2254, cbSceneParam._m0[62u].y, _2250 * cbSceneParam._m0[62u].x))) / _2466;
            float _2610 = isnan(cbSceneParam._m0[41u].w) ? _2606 : (isnan(_2606) ? cbSceneParam._m0[41u].w : max(_2606, cbSceneParam._m0[41u].w));
            float _2653 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
            float _4748 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
            float _2660 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2467, cbSceneParam._m0[33u].w + _2468), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2467, _2468 - cbSceneParam._m0[33u].z), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].z, _2468 - cbSceneParam._m0[33u].w), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2468), _2610), 0.0)).x), vec4(0.25)));
            float _2664 = 1.0 - (_2660 * cbSceneParam._m0[34u].x);
            float _2665 = 1.0 - (_2660 * cbSceneParam._m0[34u].y);
            float _2666 = 1.0 - (_2660 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2666) ? _2414 : (isnan(_2414) ? _2666 : min(_2414, _2666));
            frontier_phi_34_33_ladder_1 = isnan(_2665) ? _2413 : (isnan(_2413) ? _2665 : min(_2413, _2665));
            frontier_phi_34_33_ladder_2 = isnan(_2664) ? _2412 : (isnan(_2412) ? _2664 : min(_2412, _2664));
        }
        else
        {
            frontier_phi_34_33_ladder = _2414;
            frontier_phi_34_33_ladder_1 = _2413;
            frontier_phi_34_33_ladder_2 = _2412;
        }
        _2478 = frontier_phi_34_33_ladder_2;
        _2480 = frontier_phi_34_33_ladder_1;
        _2482 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2478 = _2412;
        _2480 = _2413;
        _2482 = _2414;
    }
    uvec4 _2487 = floatBitsToUint(cbInstanceData._m0[_1153 + 5u]);
    uint _2489 = _2487.x * 14u;
    uint _2490 = _2489 + 13u;
    float _2497 = _1193 + (-1.0);
    float _2502 = (cbLight._m0[_2490].x * _2497) + 1.0;
    float _2503 = (cbLight._m0[_2490].y * _2497) + 1.0;
    float _2504 = (cbLight._m0[_2490].z * _2497) + 1.0;
    float _2505 = (cbLight._m0[_2490].w * _2497) + 1.0;
    uint _2506 = _2489 + 5u;
    float _2512 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
    uint _2516 = _2489 + 4u;
    float _2525 = isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0));
    uint _2529 = _2489 | 1u;
    float _2540 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_1027, _1028, _1029));
    float _2543 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_1027, _1028, _1029));
    float _4784 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _4795 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2548 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * 0.3183098733425140380859375;
    float _2550 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * 0.3183098733425140380859375;
    float _2557 = ((cbLight._m0[_2506].x * _2512) * _2550) + (((cbLight._m0[_2516].x * _2478) * _2525) * _2548);
    float _2558 = ((_2512 * cbLight._m0[_2506].y) * _2550) + (((cbLight._m0[_2516].y * _2480) * _2525) * _2548);
    float _2559 = ((_2512 * cbLight._m0[_2506].z) * _2550) + (((cbLight._m0[_2516].z * _2482) * _2525) * _2548);
    uvec4 _2563 = floatBitsToUint(cbLight._m0[_2489 + 12u]);
    bool _2565 = _2563.x == 0u;
    float _2667;
    float _2669;
    float _2671;
    if (_2565)
    {
        _2667 = _2557;
        _2669 = _2558;
        _2671 = _2559;
    }
    else
    {
        uint _2675 = _2489 + 6u;
        float _2691 = (dot(vec3(cbLight._m0[_2489 + 2u].xyz), vec3(_1027, _1028, _1029)) * 0.5) + 0.5;
        float _2692 = _2691 * _2691;
        float _4806 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2693 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2694 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2667 = (((cbLight._m0[_2675].x * 0.3183098733425140380859375) * _2693) * _2694) + _2557;
        _2669 = (((cbLight._m0[_2675].y * 0.3183098733425140380859375) * _2693) * _2694) + _2558;
        _2671 = (((cbLight._m0[_2675].z * 0.3183098733425140380859375) * _2693) * _2694) + _2559;
    }
    bool _2674 = _2563.y == 0u;
    float _2729;
    float _2731;
    float _2733;
    if (_2674)
    {
        _2729 = _2667;
        _2731 = _2669;
        _2733 = _2671;
    }
    else
    {
        uint _2902 = _2489 + 7u;
        float _2918 = (dot(vec3(cbLight._m0[_2489 + 3u].xyz), vec3(_1027, _1028, _1029)) * 0.5) + 0.5;
        float _2919 = _2918 * _2918;
        float _4822 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2920 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2921 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _2729 = (((cbLight._m0[_2902].x * 0.3183098733425140380859375) * _2920) * _2921) + _2667;
        _2731 = (((cbLight._m0[_2902].y * 0.3183098733425140380859375) * _2920) * _2921) + _2669;
        _2733 = (((cbLight._m0[_2902].z * 0.3183098733425140380859375) * _2920) * _2921) + _2671;
    }
    uint _2736 = _2489 + 8u;
    float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _1030) * 0.949999988079071044921875);
    float _2750 = _2749 * _2749;
    float _2751 = cbLight._m0[_2489].x + _1107;
    float _2752 = cbLight._m0[_2489].y + _1108;
    float _2753 = cbLight._m0[_2489].z + _1109;
    float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
    float _2758 = _2757 * _2751;
    float _2759 = _2757 * _2752;
    float _2760 = _2757 * _2753;
    float _2761 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2489].xyz));
    float _4838 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _4849 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _2765 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
    float _2766 = dot(vec3(_1027, _1028, _1029), vec3(_2758, _2759, _2760));
    float _4860 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _2770 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2758, _2759, _2760));
    float _4871 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2774 = _2750 * _2750;
    float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
    float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
    float _2787 = 0.959999978542327880859375 - _1175;
    float _2789 = 0.959999978542327880859375 - _1176;
    float _2790 = 0.959999978542327880859375 - _1177;
    float _2797 = 1.0 - _2750;
    float _2808 = (0.5 / (((_2765 * ((_2764 * _2797) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2797) + _2750) * _2764))) * _2764;
    float _4882 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2810 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
    uint _2824 = _2489 + 9u;
    float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _1030) * 0.949999988079071044921875);
    float _2836 = _2835 * _2835;
    float _2837 = cbLight._m0[_2529].x + _1107;
    float _2838 = cbLight._m0[_2529].y + _1108;
    float _2839 = cbLight._m0[_2529].z + _1109;
    float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
    float _2844 = _2843 * _2837;
    float _2845 = _2843 * _2838;
    float _2846 = _2843 * _2839;
    float _2847 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2529].xyz));
    float _4893 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2850 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
    float _2851 = dot(vec3(_1027, _1028, _1029), vec3(_2844, _2845, _2846));
    float _4904 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2854 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
    float _2855 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2844, _2845, _2846));
    float _4915 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2859 = _2836 * _2836;
    float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
    float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) * 5.0);
    float _2877 = 1.0 - _2836;
    float _2887 = (0.5 / (((_2765 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2877) + _2836) * _2850))) * _2850;
    float _4926 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    float _2889 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
    float _2899 = (((((_2870 * _2787) + _1178) * cbLight._m0[_2824].x) * _2889) * _2512) + ((((cbLight._m0[_2736].x * _2478) * ((_2786 * _2787) + _1178)) * _2810) * _2525);
    float _2900 = (((((_2870 * _2789) + _1180) * cbLight._m0[_2824].y) * _2889) * _2512) + ((((cbLight._m0[_2736].y * _2480) * ((_2786 * _2789) + _1180)) * _2810) * _2525);
    float _2901 = (((((_2870 * _2790) + _1181) * cbLight._m0[_2824].z) * _2889) * _2512) + ((((cbLight._m0[_2736].z * _2482) * ((_2786 * _2790) + _1181)) * _2810) * _2525);
    float _2957;
    float _2959;
    float _2961;
    if (_2565)
    {
        _2957 = _2899;
        _2959 = _2900;
        _2961 = _2901;
    }
    else
    {
        uint _2963 = _2489 + 2u;
        uint _2967 = _2489 + 10u;
        float _2981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2963].w)) * _1030) * 0.949999988079071044921875);
        float _2982 = _2981 * _2981;
        float _2983 = cbLight._m0[_2963].x + _1107;
        float _2984 = cbLight._m0[_2963].y + _1108;
        float _2985 = cbLight._m0[_2963].z + _1109;
        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
        float _2990 = _2989 * _2983;
        float _2991 = _2989 * _2984;
        float _2992 = _2989 * _2985;
        float _2993 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2963].xyz));
        float _4937 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
        float _2997 = dot(vec3(_1027, _1028, _1029), vec3(_2990, _2991, _2992));
        float _4948 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3000 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
        float _3001 = dot(vec3(cbLight._m0[_2963].xyz), vec3(_2990, _2991, _2992));
        float _4959 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3005 = _2982 * _2982;
        float _3009 = ((_3000 * _3000) * (_3005 + (-1.0))) + 1.0;
        float _3016 = exp2(log2(1.0 - (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) * 5.0);
        float _3023 = 1.0 - _2982;
        float _3033 = (0.5 / (((_2765 * ((_2996 * _3023) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3023) + _2982) * _2996))) * _2996;
        float _4970 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3035 = (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_3005 / ((_3009 * _3009) * 3.141590118408203125));
        float _3036 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2957 = (((((_3016 * _2787) + _1178) * cbLight._m0[_2967].x) * _3035) * _3036) + _2899;
        _2959 = (((((_3016 * _2789) + _1180) * cbLight._m0[_2967].y) * _3035) * _3036) + _2900;
        _2961 = (((((_3016 * _2790) + _1181) * cbLight._m0[_2967].z) * _3035) * _3036) + _2901;
    }
    float _3067;
    float _3069;
    float _3071;
    if (_2674)
    {
        _3067 = _2957;
        _3069 = _2959;
        _3071 = _2961;
    }
    else
    {
        uint _3078 = _2489 + 3u;
        uint _3082 = _2489 + 11u;
        float _3096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3078].w)) * _1030) * 0.949999988079071044921875);
        float _3097 = _3096 * _3096;
        float _3098 = cbLight._m0[_3078].x + _1107;
        float _3099 = cbLight._m0[_3078].y + _1108;
        float _3100 = cbLight._m0[_3078].z + _1109;
        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
        float _3105 = _3104 * _3098;
        float _3106 = _3104 * _3099;
        float _3107 = _3104 * _3100;
        float _3108 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_3078].xyz));
        float _4986 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3111 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _3112 = dot(vec3(_1027, _1028, _1029), vec3(_3105, _3106, _3107));
        float _4997 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3115 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _3116 = dot(vec3(cbLight._m0[_3078].xyz), vec3(_3105, _3106, _3107));
        float _5008 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        float _3120 = _3097 * _3097;
        float _3124 = ((_3115 * _3115) * (_3120 + (-1.0))) + 1.0;
        float _3131 = exp2(log2(1.0 - (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) * 5.0);
        float _3138 = 1.0 - _3097;
        float _3148 = (0.5 / (((_2765 * ((_3111 * _3138) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3138) + _3097) * _3111))) * _3111;
        float _5019 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
        float _3150 = (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_3120 / ((_3124 * _3124) * 3.141590118408203125));
        float _3151 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _3067 = (((((_3131 * _2787) + _1178) * cbLight._m0[_3082].x) * _3150) * _3151) + _2957;
        _3069 = (((((_3131 * _2789) + _1180) * cbLight._m0[_3082].y) * _3150) * _3151) + _2959;
        _3071 = (((((_3131 * _2790) + _1181) * cbLight._m0[_3082].z) * _3150) * _3151) + _2961;
    }
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    if (_2487.y == 0u)
    {
        uvec4 _3172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3173 = _3172.x;
        uint _3184 = uint((float(_3172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1116) / _3173))) + floor(float(uint(cbSceneParam._m0[85u].x * _1115) / _3173)));
        float _3194 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3195 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        uint _3198 = uint(isnan(14.0) ? _3195 : (isnan(_3195) ? 14.0 : min(_3195, 14.0)));
        uvec4 _3203 = texelFetch(g_lightClusterGridBuffer, int(((_3198 << 2u) + (_3184 << 6u)) >> 2u));
        uint _3204 = _3203.x;
        uint _3205 = _3172.z;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((((1u << ((_3205 >> 4u) & 15u)) + 4294967295u) & _3204) == 0u) || ((_3205 & 240u) == 0u))
        {
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
            _3290 = 0.0;
            _3292 = 0.0;
            _3294 = 0.0;
        }
        else
        {
            float _3285;
            float _3287;
            float _3289;
            float _3291;
            float _3293;
            float _3295;
            float _3429 = 0.0;
            float _3430 = 0.0;
            float _3431 = 0.0;
            float _3432 = 0.0;
            float _3433 = 0.0;
            float _3434 = 0.0;
            uint _3435 = 0u;
            uint _3444;
            bool _3445;
            for (;;)
            {
                _3444 = texelFetch(g_lightClassification, int((((_3198 << 5u) + (_3184 << 9u)) + (_3435 << 2u)) >> 2u)).x;
                _3445 = _3444 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3445)
                {
                    frontier_phi_66_pred = _3434;
                    frontier_phi_66_pred_1 = _3433;
                    frontier_phi_66_pred_2 = _3432;
                    frontier_phi_66_pred_3 = _3431;
                    frontier_phi_66_pred_4 = _3430;
                    frontier_phi_66_pred_5 = _3429;
                }
                else
                {
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    uint _3559;
                    _3553 = _3429;
                    _3554 = _3430;
                    _3555 = _3431;
                    _3556 = _3432;
                    _3557 = _3433;
                    _3558 = _3434;
                    _3559 = _3444;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    for (;;)
                    {
                        uint _3563 = uint(findLSB(_3559)) + (_3435 << 5u);
                        uint _3560 = (_3559 + 4294967295u) & _3559;
                        uint _3565 = _3563 * 48u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 3u)).x));
                        uint _3585 = (_3563 * 48u) + 4u;
                        vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 3u)).x));
                        uint _3604 = (_3563 * 48u) + 8u;
                        vec3 _3615 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3604)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 2u)).x));
                        float _3619 = _3579.x - _2263;
                        float _3620 = _3579.y - _2264;
                        float _3621 = _3579.z - _2265;
                        float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                        float _3625 = inversesqrt(_3622);
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3629 = dot(vec3(_1134, _1137, _1140), vec3(_3626, _3627, _3628));
                        float _3634 = 1.0 - (_3622 * _3579.w);
                        float _5045 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                        float _3636 = sqrt(_3622) * _3598.w;
                        float _3639 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                        float _3640 = _3639 * _3639;
                        float _3643 = ((1.0 - _3640) * _3629) + _3640;
                        float _3646 = _3636 * _3636;
                        float _3650 = ((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3635) / ((_3646 * 0.699999988079071044921875) + 1.0);
                        float _3654 = (-0.0) - _2263;
                        float _3655 = (-0.0) - _2264;
                        float _3656 = (-0.0) - _2265;
                        float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                        float _3661 = _3660 * _3654;
                        float _3662 = _3660 * _3655;
                        float _3663 = _3660 * _3656;
                        float _3670 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                        float _3671 = 1.0 - _1209;
                        float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                        float _3679 = _3678 * _3678;
                        float _3680 = _3679 * _3679;
                        float _3681 = _3661 + _3626;
                        float _3682 = _3662 + _3627;
                        float _3683 = _3663 + _3628;
                        float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                        float _3691 = dot(vec3(_1134, _1137, _1140), vec3(_3661, _3662, _3663));
                        float _5061 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3694 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                        float _3695 = dot(vec3(_1134, _1137, _1140), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                        float _5072 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3698 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                        float _3703 = _3639 * _3679;
                        float _3704 = _3703 * _3703;
                        float _3707 = ((1.0 - _3704) * _3629) + _3704;
                        float _5083 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3708 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                        float _3709 = 1.0 - _3679;
                        float _3719 = (0.5 / (((_3708 * ((_3694 * _3709) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3679) * _3694))) * _3708;
                        float _5094 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3730 = (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0)))) / ((_3702 * _3702) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125))) * _3635;
                        _3488 = (_3650 * _3598.x) + _3556;
                        _3489 = (_3650 * _3598.y) + _3557;
                        _3490 = (_3650 * _3598.z) + _3558;
                        _3485 = (_3730 * _3615.x) + _3553;
                        _3486 = (_3730 * _3615.y) + _3554;
                        _3487 = (_3730 * _3615.z) + _3555;
                        if (_3560 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3553 = _3485;
                            _3554 = _3486;
                            _3555 = _3487;
                            _3556 = _3488;
                            _3557 = _3489;
                            _3558 = _3490;
                            _3559 = _3560;
                        }
                    }
                    frontier_phi_66_pred = _3490;
                    frontier_phi_66_pred_1 = _3489;
                    frontier_phi_66_pred_2 = _3488;
                    frontier_phi_66_pred_3 = _3487;
                    frontier_phi_66_pred_4 = _3486;
                    frontier_phi_66_pred_5 = _3485;
                }
                _3295 = frontier_phi_66_pred;
                _3293 = frontier_phi_66_pred_1;
                _3291 = frontier_phi_66_pred_2;
                _3289 = frontier_phi_66_pred_3;
                _3287 = frontier_phi_66_pred_4;
                _3285 = frontier_phi_66_pred_5;
                uint _3436 = _3435 + 1u;
                if (_3436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3429 = _3285;
                    _3430 = _3287;
                    _3431 = _3289;
                    _3432 = _3291;
                    _3433 = _3293;
                    _3434 = _3295;
                    _3435 = _3436;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
            _3290 = _3291;
            _3292 = _3293;
            _3294 = _3295;
        }
        uvec4 _3298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3299 = _3298.z;
        uint _3301 = (_3299 >> 8u) & 15u;
        float _3397;
        float _3399;
        float _3401;
        float _3403;
        float _3405;
        float _3407;
        if (((4294967295u << _3301) & _3204) == 0u)
        {
            _3397 = _3284;
            _3399 = _3286;
            _3401 = _3288;
            _3403 = _3290;
            _3405 = _3292;
            _3407 = _3294;
        }
        else
        {
            float _3422 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _3423 = _3422 * _2263;
            float _3424 = _3422 * _2264;
            float _3425 = _3422 * _2265;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3301 < ((_3299 >> 12u) & 15u))
            {
                float _3398;
                float _3400;
                float _3402;
                float _3404;
                float _3406;
                float _3408;
                float _3536 = _3284;
                float _3537 = _3286;
                float _3538 = _3288;
                float _3539 = _3290;
                float _3540 = _3292;
                float _3541 = _3294;
                uint _3542 = _3301;
                uint _3551;
                bool _3552;
                for (;;)
                {
                    _3551 = texelFetch(g_lightClassification, int((((_3198 << 5u) + (_3184 << 9u)) + (_3542 << 2u)) >> 2u)).x;
                    _3552 = _3551 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3552)
                    {
                        frontier_phi_72_pred = _3541;
                        frontier_phi_72_pred_1 = _3540;
                        frontier_phi_72_pred_2 = _3539;
                        frontier_phi_72_pred_3 = _3538;
                        frontier_phi_72_pred_4 = _3537;
                        frontier_phi_72_pred_5 = _3536;
                    }
                    else
                    {
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _4028;
                        float _4029;
                        float _4030;
                        float _4031;
                        float _4032;
                        float _4033;
                        float _3748 = _3536;
                        float _3749 = _3537;
                        float _3750 = _3538;
                        float _3751 = _3539;
                        float _3752 = _3540;
                        float _3753 = _3541;
                        uint _3754 = _3551;
                        uint _3755;
                        vec4 _3780;
                        float _3781;
                        vec4 _3796;
                        vec3 _3808;
                        vec4 _3823;
                        vec4 _3838;
                        float _3884;
                        bool _3885;
                        for (;;)
                        {
                            uint _3765 = ((_3542 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3754));
                            _3755 = (_3754 + 4294967295u) & _3754;
                            uint _3767 = _3765 * 40u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            _3781 = _3780.w;
                            uint _3783 = (_3765 * 40u) + 4u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3765 * 40u) + 8u;
                            _3808 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x));
                            uint _3810 = (_3765 * 40u) + 16u;
                            _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3825 = (_3765 * 40u) + 20u;
                            _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3840 = (_3765 * 40u) + 24u;
                            vec4 _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            uint _3859 = (_3765 * 40u) + 28u;
                            vec4 _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            _3884 = fma(_2265, _3872.z, fma(_2264, _3872.y, _3872.x * _2263)) + _3872.w;
                            _3885 = !((fma(_2265, _3853.z, fma(_2264, _3853.y, _3853.x * _2263)) + _3853.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3885)
                            {
                                float _3912 = _3780.x - _2263;
                                float _3913 = _3780.y - _2264;
                                float _3914 = _3780.z - _2265;
                                float _3915 = dot(vec3(_3912, _3913, _3914), vec3(_3912, _3913, _3914));
                                float _3918 = inversesqrt(_3915);
                                float _3919 = _3918 * _3912;
                                float _3920 = _3918 * _3913;
                                float _3921 = _3918 * _3914;
                                float _3925 = 1.0 - (_3915 / (_3781 * _3781));
                                float _5105 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3926 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                                float _3930 = sqrt(_3915) * _3796.w;
                                float _3932 = 1.39999997615814208984375 / (_3930 + 1.39999997615814208984375);
                                float _3933 = _3932 * _3932;
                                float _3936 = ((1.0 - _3933) * dot(vec3(_3919, _3920, _3921), vec3(_1134, _1137, _1140))) + _3933;
                                float _3939 = _3930 * _3930;
                                float _3943 = (fma(_2265, _3823.z, fma(_2264, _3823.y, _3823.x * _2263)) + _3823.w) / _3884;
                                float _3944 = (fma(_2265, _3838.z, fma(_2264, _3838.y, _3838.x * _2263)) + _3838.w) / _3884;
                                float _3948 = 1.0 - dot(vec2(_3943, _3944), vec2(_3943, _3944));
                                float _5121 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3949 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                                float _3950 = _3949 * (((isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0))) * _3926) / ((_3939 * 0.699999988079071044921875) + 1.0));
                                float _3962 = exp2(log2(1.0 / ((_3939 * 3.5) + 5.0)) * 0.25);
                                float _3963 = 1.0 - _1209;
                                float _3970 = sqrt(1.0 - ((1.0 - (_3963 * _3963)) * (1.0 - (_3962 * _3962))));
                                float _3971 = _3970 * _3970;
                                float _3972 = _3971 * _3971;
                                float _3973 = _3919 - _3423;
                                float _3974 = _3920 - _3424;
                                float _3975 = _3921 - _3425;
                                float _3979 = inversesqrt(dot(vec3(_3973, _3974, _3975), vec3(_3973, _3974, _3975)));
                                float _3983 = dot(vec3(_1134, _1137, _1140), vec3((-0.0) - _3423, (-0.0) - _3424, (-0.0) - _3425));
                                float _5132 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3986 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3987 = dot(vec3(_1134, _1137, _1140), vec3(_3979 * _3973, _3979 * _3974, _3979 * _3975));
                                float _5143 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3990 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3994 = ((_3990 * _3990) * (_3972 + (-1.0))) + 1.0;
                                float _3995 = _3932 * _3971;
                                float _3996 = _3995 * _3995;
                                float _4002 = ((1.0 - _3996) * dot(vec3(_1134, _1137, _1140), vec3(_3919, _3920, _3921))) + _3996;
                                float _5154 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4003 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _4004 = 1.0 - _3971;
                                float _4014 = (0.5 / (((_4003 * ((_3986 * _4004) + _3971)) + 9.9999999392252902907785028219223e-09) + (((_4003 * _4004) + _3971) * _3986))) * _4003;
                                float _5165 = isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0));
                                float _4024 = (_3949 * _3926) * (((_3972 * 3.1415927410125732421875) * (isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0)))) / ((_3994 * _3994) * ((_3939 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3950 * _3796.y;
                                frontier_phi_78_pred_1 = _3950 * _3796.x;
                                frontier_phi_78_pred_2 = _4024 * _3808.z;
                                frontier_phi_78_pred_3 = _4024 * _3808.y;
                                frontier_phi_78_pred_4 = _4024 * _3808.x;
                                frontier_phi_78_pred_5 = _3950 * _3796.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4032 = frontier_phi_78_pred;
                            _4031 = frontier_phi_78_pred_1;
                            _4030 = frontier_phi_78_pred_2;
                            _4029 = frontier_phi_78_pred_3;
                            _4028 = frontier_phi_78_pred_4;
                            _4033 = frontier_phi_78_pred_5;
                            _3738 = _4031 + _3751;
                            _3739 = _4032 + _3752;
                            _3740 = _4033 + _3753;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3737 = _4030 + _3750;
                            if (_3755 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3737;
                                _3751 = _3738;
                                _3752 = _3739;
                                _3753 = _3740;
                                _3754 = _3755;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3740;
                        frontier_phi_72_pred_1 = _3739;
                        frontier_phi_72_pred_2 = _3738;
                        frontier_phi_72_pred_3 = _3737;
                        frontier_phi_72_pred_4 = _3736;
                        frontier_phi_72_pred_5 = _3735;
                    }
                    _3408 = frontier_phi_72_pred;
                    _3406 = frontier_phi_72_pred_1;
                    _3404 = frontier_phi_72_pred_2;
                    _3402 = frontier_phi_72_pred_3;
                    _3400 = frontier_phi_72_pred_4;
                    _3398 = frontier_phi_72_pred_5;
                    uint _3543 = _3542 + 1u;
                    if (_3543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3536 = _3398;
                        _3537 = _3400;
                        _3538 = _3402;
                        _3539 = _3404;
                        _3540 = _3406;
                        _3541 = _3408;
                        _3542 = _3543;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3408;
                frontier_phi_60_61_ladder_1 = _3406;
                frontier_phi_60_61_ladder_2 = _3402;
                frontier_phi_60_61_ladder_3 = _3400;
                frontier_phi_60_61_ladder_4 = _3398;
                frontier_phi_60_61_ladder_5 = _3404;
            }
            else
            {
                frontier_phi_60_61_ladder = _3294;
                frontier_phi_60_61_ladder_1 = _3292;
                frontier_phi_60_61_ladder_2 = _3288;
                frontier_phi_60_61_ladder_3 = _3286;
                frontier_phi_60_61_ladder_4 = _3284;
                frontier_phi_60_61_ladder_5 = _3290;
            }
            _3397 = frontier_phi_60_61_ladder_4;
            _3399 = frontier_phi_60_61_ladder_3;
            _3401 = frontier_phi_60_61_ladder_2;
            _3403 = frontier_phi_60_61_ladder_5;
            _3405 = frontier_phi_60_61_ladder_1;
            _3407 = frontier_phi_60_61_ladder;
        }
        float _3412 = isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0));
        _3217 = (_3412 * _3403) + _2729;
        _3219 = (_3412 * _3405) + _2731;
        _3221 = (_3412 * _3407) + _2733;
        _3223 = ((_3397 * _1178) * _3412) + _3067;
        _3225 = ((_3399 * _1180) * _3412) + _3069;
        _3227 = ((_3401 * _1181) * _3412) + _3071;
    }
    else
    {
        _3217 = _2729;
        _3219 = _2731;
        _3221 = _2733;
        _3223 = _3067;
        _3225 = _3069;
        _3227 = _3071;
    }
    float _5181 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _5192 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _5203 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    uint _3247 = _1153 + 6u;
    float _3255 = _1115 / cbSceneParam._m0[86u].x;
    float _3256 = _1116 / cbSceneParam._m0[86u].y;
    vec4 _3270 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3255, _3256, (log2((isnan(cbSceneParam._m0[77u].w) ? _1050 : (isnan(_1050) ? cbSceneParam._m0[77u].w : min(_1050, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3272 = _3270.x;
    float _3273 = _3270.y;
    float _3274 = _3270.z;
    float _3275 = _3270.w;
    float _3347;
    float _3349;
    float _3351;
    float _3353;
    if (_1050 > cbSceneParam._m0[78u].w)
    {
        float _3309 = isnan(_1050) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1050 : min(cbSceneParam._m0[80u].w, _1050));
        float _3310 = _3309 / _1050;
        float _3321 = _3310 * _1100;
        float _3322 = _1101 * _3310;
        float _3323 = (-0.0) - _3322;
        float _3325 = _3310 * _1102;
        float _3327 = (cbSceneParam._m0[77u].w * _3323) / _3309;
        float _3328 = _3327 + cbSceneParam._m0[79u].w;
        float _3329 = cbSceneParam._m0[79u].w - _3322;
        float _3335 = sqrt(((_3321 * _3321) + (_3322 * _3322)) + (_3325 * _3325));
        float _3338 = (1.0 - (cbSceneParam._m0[77u].w / _3309)) * _3335;
        float _3343 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3345 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3498;
        if (abs((_3323 - _3327) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3498 = ((((_3328 > 0.0) ? exp2(_3343 * _3328) : (2.0 - exp2(_3345 * _3328))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3338;
        }
        else
        {
            float _3458 = 1.0 / cbSceneParam._m0[80u].x;
            float _3459 = isnan(_3329) ? _3328 : (isnan(_3328) ? _3329 : max(_3328, _3329));
            float _3460 = isnan(_3329) ? _3328 : (isnan(_3328) ? _3329 : min(_3328, _3329));
            float _3469 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : min(_3459, 0.0));
            float _3470 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : min(_3460, 0.0));
            _3498 = ((abs(_3335 / _3323) * cbSceneParam._m0[80u].y) * ((((_3469 - _3470) * 2.0) - ((exp2(_3343 * (isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0)))) - exp2(_3343 * (isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))))) * _3458)) - ((exp2(_3345 * _3469) - exp2(_3345 * _3470)) * _3458))) + (_3338 * cbSceneParam._m0[80u].z);
        }
        vec4 _3500 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3255, _3256, 1.0), 0.0);
        float _3509 = exp2((_3498 * (-1.44269502162933349609375)) * (1.0 - _3500.w));
        float _3510 = log2(_3509);
        float _3526 = log2(_3275);
        _3347 = (exp2(_3526 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].x)) * _3500.x) / cbSceneParam._m0[78u].x)) + _3272;
        _3349 = (exp2(_3526 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].y)) * _3500.y) / cbSceneParam._m0[78u].y)) + _3273;
        _3351 = (exp2(_3526 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].z)) * _3500.z) / cbSceneParam._m0[78u].z)) + _3274;
        _3353 = _3509 * _3275;
    }
    else
    {
        _3347 = _3272;
        _3349 = _3273;
        _3351 = _3274;
        _3353 = _3275;
    }
    float _3365 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3366 = _3365 == 3.0;
    float _3367 = log2(_3353);
    float _3374 = exp2(_3367 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0))) * (_3217 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1193))) + ((_3223 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1997)) * cbPerFrame._m0[3u].x));
    float _3375 = exp2(_3367 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0))) * (_3219 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1193))) + ((_3225 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1997)) * cbPerFrame._m0[3u].x));
    float _3376 = exp2(_3367 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0))) * (_3221 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1193))) + ((_3227 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1997)) * cbPerFrame._m0[3u].x));
    float _3385 = (_3365 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3385 * (_3366 ? _3374 : (_3374 + (cbSceneParam._m0[72u].w * _3347)));
    SV_Target.y = _3385 * (_3366 ? _3375 : (_3375 + (cbSceneParam._m0[72u].w * _3349)));
    SV_Target.z = _3385 * (_3366 ? _3376 : (_3376 + (cbSceneParam._m0[72u].w * _3351)));
    SV_Target.w = cbInstanceData._m0[_3247].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3247].w;
}


