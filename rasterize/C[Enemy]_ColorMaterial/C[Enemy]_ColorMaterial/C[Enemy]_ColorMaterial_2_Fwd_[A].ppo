#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1531;
float _3909;
float _3910;
float _3911;
float _3912;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _275 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _309 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _313 = _309.z;
    float _326 = exp2(log2((1.0 - _313) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _344 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _356 = exp2(log2(_344.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(1.0) ? _357 : (isnan(_357) ? 1.0 : min(_357, 1.0));
    float _367 = exp2(log2(cbMtdParam._m0[23u].y * _313) * cbMtdParam._m0[22u].y);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0));
    float _390 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _391 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _392 = isnan(4.0) ? _391 : (isnan(_391) ? 4.0 : min(_391, 4.0));
    float _405 = floor(_392);
    vec4 _408 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _405));
    vec4 _432 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _443 = cbMtdParam._m0[9u].x * _432.x;
    float _444 = cbMtdParam._m0[9u].y * _432.y;
    float _445 = cbMtdParam._m0[9u].z * _432.z;
    float _452 = (((cbMtdParam._m0[10u].x * _408.x) - _443) * _369) + _443;
    float _453 = (((cbMtdParam._m0[10u].y * _408.y) - _444) * _369) + _444;
    float _454 = (((cbMtdParam._m0[10u].z * _408.z) - _445) * _369) + _445;
    float _460 = exp2(log2(_309.w) * cbMtdParam._m0[23u].w);
    vec4 _473 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _492 = (((cbMtdParam._m0[16u].x * _473.x) - _452) * _460) + _452;
    float _493 = (((cbMtdParam._m0[16u].y * _473.y) - _453) * _460) + _453;
    float _494 = (((cbMtdParam._m0[16u].z * _473.z) - _454) * _460) + _454;
    vec4 _507 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _527 = (((cbMtdParam._m0[19u].x * _507.x) - _492) * _358) + _492;
    float _528 = (((cbMtdParam._m0[19u].y * _507.y) - _493) * _358) + _493;
    float _529 = (((cbMtdParam._m0[19u].z * _507.z) - _494) * _358) + _494;
    vec4 _542 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _567 = (_344.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _542.x) - _527) * _328) + _527);
    float _569 = (_344.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _542.y) - _528) * _328) + _528);
    float _571 = (_344.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _542.z) - _529) * _328) + _529);
    vec4 _584 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _602 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _604 = _602 * (cbMtdParam._m0[24u].z + 1.0);
    float _3961 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _612 = (_605 * ((cbMtdParam._m0[11u].x * _584.x) - _567)) + _567;
    float _613 = (((cbMtdParam._m0[11u].y * _584.y) - _569) * _605) + _569;
    float _614 = (((cbMtdParam._m0[11u].z * _584.z) - _571) * _605) + _571;
    float _618 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _626 = (_618 - (((_275.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _618))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3972 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _634 = ((cbMtdParam._m0[21u].x - _612) * _627) + _612;
    float _635 = ((cbMtdParam._m0[21u].y - _613) * _627) + _613;
    float _636 = ((cbMtdParam._m0[21u].z - _614) * _627) + _614;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[28u].w;
    _204[0u] = cbMtdParam._m0[29u].x;
    _203[1u] = cbMtdParam._m0[30u].w;
    _204[1u] = cbMtdParam._m0[31u].x;
    _203[2u] = cbMtdParam._m0[30u].y;
    _204[2u] = cbMtdParam._m0[30u].z;
    _203[3u] = cbMtdParam._m0[29u].w;
    _204[3u] = cbMtdParam._m0[30u].x;
    _203[4u] = cbMtdParam._m0[29u].y;
    _204[4u] = cbMtdParam._m0[29u].z;
    float _677 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    uint _679 = uint(int(isnan(4.0) ? _677 : (isnan(_677) ? 4.0 : min(_677, 4.0))));
    float _686 = ((_204[_679] - cbMtdParam._m0[22u].z) * _369) + cbMtdParam._m0[22u].z;
    float _689 = ((cbMtdParam._m0[22u].w - _686) * _460) + _686;
    float _692 = ((cbMtdParam._m0[25u].x - _689) * _358) + _689;
    float _695 = ((cbMtdParam._m0[26u].x - _692) * _328) + _692;
    float _700 = (cbMtdParam._m0[24u].y + 1.0) * _602;
    float _3993 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _703 = _695 - (_695 * _701);
    float _705 = _703 - (_703 * _618);
    vec4 _718 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _405));
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _744 = cbMtdParam._m0[22u].x + _736.z;
    float _747 = (((_718.z + _203[_679]) - _744) * _369) + _744;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _771 = (((_760.z - _747) + cbMtdParam._m0[28u].y) * _460) + _747;
    float _777 = ((((_313 * 2.0) * _771) - _771) * cbMtdParam._m0[24u].w) + _771;
    vec4 _790 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _801 = (((cbMtdParam._m0[23u].z + _790.z) - _777) * _358) + _777;
    vec4 _814 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _825 = (((_814.z - _801) + cbMtdParam._m0[26u].y) * _328) + _801;
    vec4 _837 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _849 = ((_837.z - _825) * _701) + _825;
    vec4 _864 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _878 = ((cbMtdParam._m0[27u].y * _618) * ((_864.z * cbMtdParam._m0[27u].x) - _849)) + _849;
    float _893 = ((_718.x - _738) * _369) + _738;
    float _894 = ((_718.y - _739) * _369) + _739;
    float _899 = ((_760.x - _893) * _460) + _893;
    float _900 = ((_760.y - _894) * _460) + _894;
    float _905 = ((_790.x - _899) * _358) + _899;
    float _906 = ((_790.y - _900) * _358) + _900;
    float _915 = ((((_814.x - _905) * _328) + _905) * 2.0) + (-1.0);
    float _916 = ((((_814.y - _906) * _328) + _906) * 2.0) + (-1.0);
    float _917 = dot(vec2(_915, _916), vec2(_915, _916));
    float _4004 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _922 = sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))));
    float _938 = (((cbMtdParam._m0[25u].y * ((_309.x * 2.0) + (-1.0))) + _915) + (((((_837.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _701)) + ((((_864.x * 2.0) + (-1.0)) * _618) * cbMtdParam._m0[26u].w);
    float _939 = (((cbMtdParam._m0[25u].y * ((_309.y * 2.0) + (-1.0))) + _916) + (((((_837.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _701)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_864.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _942 = fma(_922, _239 * NORMAL.x, fma(_939, _246 * TANGENT.x, (_232 * _224) * _938));
    float _945 = fma(_922, _239 * NORMAL.y, fma(_939, _246 * TANGENT.y, (_232 * _225) * _938));
    float _948 = fma(_922, _239 * NORMAL.z, fma(_939, _246 * TANGENT.z, (_232 * _226) * _938));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4015 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _956 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4037 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4048 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4059 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _960 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _976 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1026 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1016);
    float _1027 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1016);
    float _1028 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1016);
    float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
    float _1033 = _1026 * _1032;
    float _1034 = _1027 * _1032;
    float _1035 = _1028 * _1032;
    vec4 _1040 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1042 = _1040.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1212 = sqrt(((_1026 * _1026) + (_1027 * _1027)) + (_1028 * _1028));
        float _1218 = (cbMatDynParam._m0[5u].x * _1212) + cbMatDynParam._m0[5u].y;
        float _4070 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1223 = (cbMatDynParam._m0[5u].z * _1212) + cbMatDynParam._m0[5u].w;
        float _4081 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) - _1219)) + _1219) < ((_1042 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1053 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1054 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1075 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1078 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1091 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1092 = _1091 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4092 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1105 = 1.0 - _960;
    float _1106 = _1102 * _1105;
    float _1107 = _1103 * _1105;
    float _1108 = _1104 * _1105;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _960;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _960;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _960;
    float _1116 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1053, cbSceneParam._m0[86u].y * _1054));
    float _1131 = _1128.x * TEXCOORD_3.w;
    float _1132 = dot(vec3(_953, _954, _955), vec3(_1033, _1034, _1035));
    float _1135 = _1132 * 2.0;
    float _1139 = (_1135 * _953) - _1033;
    float _1140 = (_1135 * _954) - _1034;
    float _1141 = (_1135 * _955) - _1035;
    float _1145 = abs(dot(vec3(_1033, _1034, _1035), vec3(_953, _954, _955)));
    float _4125 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1147 = sqrt(_956);
    float _1158 = exp2((_1147 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1147 * 3.0));
    float _1164 = (1.0 - _1158) * ((_1147 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1165 = _1158 * _1147;
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1530;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1201, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193));
        float _1259 = fma(_1201, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193));
        float _1263 = fma(_1201, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193));
        float _1288 = _1193 + _953;
        float _1289 = _1197 + _954;
        float _1290 = _1201 + _955;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1255;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1259;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1263;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1358 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1324.x + (-0.5));
        float _1360 = _1358 * (_1324.y + (-0.5));
        float _1361 = _1358 * (_1324.z + (-0.5));
        float _1368 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1331.x + (-0.5));
        float _1370 = _1368 * (_1331.y + (-0.5));
        float _1371 = _1368 * (_1331.z + (-0.5));
        float _1378 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1338.x + (-0.5));
        float _1380 = _1378 * (_1338.y + (-0.5));
        float _1381 = _1378 * (_1338.z + (-0.5));
        float _1388 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1345.x + (-0.5));
        float _1390 = _1388 * (_1345.y + (-0.5));
        float _1391 = _1388 * (_1345.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1412 = (dot(vec3(_953, _954, _955), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1422 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4173 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1424 + 1.0))) + _1429) * _1392;
        float _1439 = _1360 * 0.5;
        float _1440 = _1370 * 0.5;
        float _1441 = _1380 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_953, _954, _955), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4206 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1466 + 1.0))) + _1471) * _1393;
        float _1481 = _1361 * 0.5;
        float _1482 = _1371 * 0.5;
        float _1483 = _1381 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_953, _954, _955), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4239 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1508 + 1.0))) + _1513) * _1394;
        _1530 = _1361;
        _1532 = _1360;
        _1533 = _1359;
        _1534 = _1371;
        _1535 = _1370;
        _1536 = _1369;
        _1537 = _1381;
        _1538 = _1380;
        _1539 = _1379;
        _1540 = _1394;
        _1541 = _1393;
        _1542 = _1392;
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1531;
        _1532 = _1531;
        _1533 = _1531;
        _1534 = _1531;
        _1535 = _1531;
        _1536 = _1531;
        _1537 = _1531;
        _1538 = _1531;
        _1539 = _1531;
        _1540 = _1531;
        _1541 = _1531;
        _1542 = _1531;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1571 = fma(_1201, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193));
        float _1575 = fma(_1201, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193));
        float _1579 = fma(_1201, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193));
        float _1602 = _1193 + _953;
        float _1603 = _1197 + _954;
        float _1604 = _1201 + _955;
        float _1614 = fma(_1604, cbModelParam._m0[30u].z, fma(_1603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1602)) - _1571;
        float _1615 = fma(_1604, cbModelParam._m0[31u].z, fma(_1603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1602)) - _1575;
        float _1616 = fma(_1604, cbModelParam._m0[32u].z, fma(_1603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1602)) - _1579;
        float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
        float _1633 = ((_1620 * _1614) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1571 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1620 * _1615) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1575 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1620 * _1616) / cbModelParam._m0[35u].z) + ((((((_1579 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        float _1670 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1637.x + (-0.5));
        float _1672 = _1670 * (_1637.y + (-0.5));
        float _1673 = _1670 * (_1637.z + (-0.5));
        float _1680 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1644.x + (-0.5));
        float _1682 = _1680 * (_1644.y + (-0.5));
        float _1683 = _1680 * (_1644.z + (-0.5));
        float _1690 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1651.x + (-0.5));
        float _1692 = _1690 * (_1651.y + (-0.5));
        float _1693 = _1690 * (_1651.z + (-0.5));
        float _1700 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1658.x + (-0.5));
        float _1702 = _1700 * (_1658.y + (-0.5));
        float _1703 = _1700 * (_1658.z + (-0.5));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = _1671 * 0.5;
        float _1708 = _1681 * 0.5;
        float _1709 = _1691 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_953, _954, _955), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4302 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1734 + 1.0))) + _1739) * _1704;
        float _1749 = _1672 * 0.5;
        float _1750 = _1682 * 0.5;
        float _1751 = _1692 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_953, _954, _955), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4335 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1776 + 1.0))) + _1781) * _1705;
        float _1791 = _1673 * 0.5;
        float _1792 = _1683 * 0.5;
        float _1793 = _1693 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_953, _954, _955), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4368 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1818 + 1.0))) + _1823) * _1706;
        _1840 = _1673;
        _1841 = _1672;
        _1842 = _1671;
        _1843 = _1683;
        _1844 = _1682;
        _1845 = _1681;
        _1846 = _1693;
        _1847 = _1692;
        _1848 = _1691;
        _1849 = _1706;
        _1850 = _1705;
        _1851 = _1704;
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
    }
    else
    {
        _1840 = _1531;
        _1841 = _1531;
        _1842 = _1531;
        _1843 = _1531;
        _1844 = _1531;
        _1845 = _1531;
        _1846 = _1531;
        _1847 = _1531;
        _1848 = _1531;
        _1849 = _1531;
        _1850 = _1531;
        _1851 = _1531;
        _1852 = 0.0;
        _1853 = 0.0;
        _1854 = 0.0;
    }
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1887 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1864));
    float _1908 = _1139 * 0.5;
    float _1909 = _1140 * 0.5;
    float _1910 = _1141 * 0.5;
    float _1911 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1914 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1917 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1951;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1924 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1530, _1534, _1537, _1540));
        float _1928 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1932 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1939 = dot(vec4(cbModelParam._m0[39u]), vec4(_1908, _1909, _1910, 1.0));
        _1951 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1951 = 1.0;
    }
    float _1962;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1953 = dot(vec4(cbModelParam._m0[40u]), vec4(_1908, _1909, _1910, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1953) ? 0.0 : (isnan(0.0) ? _1953 : max(0.0, _1953))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1966 = (_1962 * cbModelParam._m0[1u].x) + (_1951 * (1.0 - cbModelParam._m0[1u].x));
    float _1976 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1976 : min(cbModelParam._m0[25u].z, _1976));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2024 = fma(_1201, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193)) + cbModelParam._m0[13u].w;
        float _2028 = fma(_1201, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193)) + cbModelParam._m0[14u].w;
        float _2032 = fma(_1201, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193)) + cbModelParam._m0[15u].w;
        float _2035 = fma(_1141, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139));
        float _2038 = fma(_1141, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139));
        float _2041 = fma(_1141, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139));
        float _2069;
        if (_2035 > 0.0)
        {
            _2069 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2069 = frontier_phi_17_15_ladder;
        }
        float _2272;
        if (_2038 > 0.0)
        {
            _2272 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2272 = frontier_phi_26_22_ladder;
        }
        float _2526;
        if (_2041 > 0.0)
        {
            _2526 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2526 = frontier_phi_38_33_ladder;
        }
        float _2528 = isnan(_2272) ? _2069 : (isnan(_2069) ? _2272 : min(_2069, _2272));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _2035) + _2024;
        float _2534 = (_2529 * _2038) + _2028;
        float _2535 = (_2529 * _2041) + _2032;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2536;
        float _2540 = _2536 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 > _2540) || ((_2534 < _2538) || ((_2533 < _2538) || (_2533 > _2540))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2535, cbModelParam._m0[9u].z, fma(_2534, cbModelParam._m0[9u].y, _2533 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2535, cbModelParam._m0[10u].z, fma(_2534, cbModelParam._m0[10u].y, _2533 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2535, cbModelParam._m0[11u].z, fma(_2534, cbModelParam._m0[11u].y, _2533 * cbModelParam._m0[11u].x))), _1977);
            frontier_phi_16_38_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2057 = frontier_phi_16_38_ladder_2;
        _2059 = frontier_phi_16_38_ladder_1;
        _2061 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1139, _1140, _1141), _1977);
        _2057 = _2045.x * cbModelParam._m0[1u].y;
        _2059 = _2045.y * cbModelParam._m0[1u].y;
        _2061 = _2045.z * cbModelParam._m0[1u].y;
    }
    float _2065 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2065 : min(cbModelParam._m0[25u].w, _2065));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1201, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1201, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1201, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1141, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139));
        float _2134 = fma(_1141, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139));
        float _2137 = fma(_1141, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139));
        float _2277;
        if (_2131 > 0.0)
        {
            _2277 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2277 = frontier_phi_28_24_ladder;
        }
        float _2553;
        if (_2134 > 0.0)
        {
            _2553 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2553 = frontier_phi_40_35_ladder;
        }
        float _2766;
        if (_2137 > 0.0)
        {
            _2766 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2766 = frontier_phi_49_46_ladder;
        }
        float _2768 = isnan(_2553) ? _2277 : (isnan(_2277) ? _2553 : min(_2277, _2553));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2131) + _2120;
        float _2774 = (_2769 * _2134) + _2124;
        float _2775 = (_2769 * _2137) + _2128;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2066);
            frontier_phi_25_49_ladder = _2974.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2974.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_25_49_ladder_2;
        _2158 = frontier_phi_25_49_ladder_1;
        _2160 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1139, _1140, _1141), _2066);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2173 = (((_1164 * _1116) + _1165) * _1131) * ((cbModelParam._m0[1u].w * (_2156 - _2057)) + _2057);
    float _2175 = (((_1164 * _1118) + _1165) * _1131) * ((cbModelParam._m0[1u].w * (_2158 - _2059)) + _2059);
    float _2177 = (((_1164 * _1119) + _1165) * _1131) * ((cbModelParam._m0[1u].w * (_2160 - _2061)) + _2061);
    float _2180 = fma(_2177, cbSceneParam._m0[89u].z, fma(_2175, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2183 = fma(_2177, cbSceneParam._m0[90u].z, fma(_2175, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2186 = fma(_2177, cbSceneParam._m0[91u].z, fma(_2175, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    uvec4 _2196 = floatBitsToUint(cbInstanceData._m0[_1091 + 5u]);
    uint _2198 = _2196.x * 14u;
    uint _2199 = _2198 + 13u;
    float _2206 = _1131 + (-1.0);
    float _2211 = (cbLight._m0[_2199].x * _2206) + 1.0;
    float _2212 = (cbLight._m0[_2199].y * _2206) + 1.0;
    float _2213 = (cbLight._m0[_2199].z * _2206) + 1.0;
    float _2214 = (cbLight._m0[_2199].w * _2206) + 1.0;
    uint _2215 = _2198 + 5u;
    float _2221 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2225 = _2198 + 4u;
    float _2231 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2235 = _2198 | 1u;
    float _2246 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_953, _954, _955));
    float _2249 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_953, _954, _955));
    float _4504 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _4515 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2254 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2256 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2263 = ((cbLight._m0[_2215].x * _2221) * _2256) + ((cbLight._m0[_2225].x * _2231) * _2254);
    float _2264 = ((_2221 * cbLight._m0[_2215].y) * _2256) + ((_2231 * cbLight._m0[_2225].y) * _2254);
    float _2265 = ((_2221 * cbLight._m0[_2215].z) * _2256) + ((_2231 * cbLight._m0[_2225].z) * _2254);
    uvec4 _2269 = floatBitsToUint(cbLight._m0[_2198 + 12u]);
    bool _2271 = _2269.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2271)
    {
        _2282 = _2263;
        _2284 = _2264;
        _2286 = _2265;
    }
    else
    {
        uint _2290 = _2198 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2198 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4526 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2309 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2263;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2264;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2265;
    }
    bool _2289 = _2269.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2289)
    {
        _2327 = _2282;
        _2329 = _2284;
        _2331 = _2286;
    }
    else
    {
        uint _2497 = _2198 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2198 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4542 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2516 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2327 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2282;
        _2329 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2284;
        _2331 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2286;
    }
    uint _2334 = _2198 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _956) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2198].x + _1033;
    float _2350 = cbLight._m0[_2198].y + _1034;
    float _2351 = cbLight._m0[_2198].z + _1035;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2198].xyz));
    float _4558 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _2363 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2364 = dot(vec3(_953, _954, _955), vec3(_2356, _2357, _2358));
    float _4580 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2356, _2357, _2358));
    float _4591 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2385 = 0.959999978542327880859375 - _1113;
    float _2387 = 0.959999978542327880859375 - _1114;
    float _2388 = 0.959999978542327880859375 - _1115;
    float _2395 = 1.0 - _2348;
    float _2406 = (0.5 / (((_2363 * ((_2362 * _2395) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2395) + _2348) * _2362))) * _2362;
    float _4602 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2419 = _2198 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _956) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2235].x + _1033;
    float _2433 = cbLight._m0[_2235].y + _1034;
    float _2434 = cbLight._m0[_2235].z + _1035;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2235].xyz));
    float _4613 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2446 = dot(vec3(_953, _954, _955), vec3(_2439, _2440, _2441));
    float _4624 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2439, _2440, _2441));
    float _4635 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2363 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2472) + _2431) * _2445))) * _2445;
    float _4646 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2385) + _1116) * cbLight._m0[_2419].x) * _2484) * _2221) + (((((_2384 * _2385) + _1116) * cbLight._m0[_2334].x) * _2408) * _2231);
    float _2495 = (((((_2465 * _2387) + _1118) * cbLight._m0[_2419].y) * _2484) * _2221) + (((((_2384 * _2387) + _1118) * cbLight._m0[_2334].y) * _2408) * _2231);
    float _2496 = (((((_2465 * _2388) + _1119) * cbLight._m0[_2419].z) * _2484) * _2221) + (((((_2384 * _2388) + _1119) * cbLight._m0[_2334].z) * _2408) * _2231);
    float _2558;
    float _2560;
    float _2562;
    if (_2271)
    {
        _2558 = _2494;
        _2560 = _2495;
        _2562 = _2496;
    }
    else
    {
        uint _2564 = _2198 + 2u;
        uint _2568 = _2198 + 10u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _956) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _1033;
        float _2585 = cbLight._m0[_2564].y + _1034;
        float _2586 = cbLight._m0[_2564].z + _1035;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2564].xyz));
        float _4657 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2598 = dot(vec3(_953, _954, _955), vec3(_2591, _2592, _2593));
        float _4668 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4679 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2363 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2624) + _2583) * _2597))) * _2597;
        float _4690 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2558 = (((((_2617 * _2385) + _1116) * cbLight._m0[_2568].x) * _2636) * _2637) + _2494;
        _2560 = (((((_2617 * _2387) + _1118) * cbLight._m0[_2568].y) * _2636) * _2637) + _2495;
        _2562 = (((((_2617 * _2388) + _1119) * cbLight._m0[_2568].z) * _2636) * _2637) + _2496;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2289)
    {
        _2672 = _2558;
        _2674 = _2560;
        _2676 = _2562;
    }
    else
    {
        uint _2683 = _2198 + 3u;
        uint _2687 = _2198 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _956) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1033;
        float _2704 = cbLight._m0[_2683].y + _1034;
        float _2705 = cbLight._m0[_2683].z + _1035;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2683].xyz));
        float _4706 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2717 = dot(vec3(_953, _954, _955), vec3(_2710, _2711, _2712));
        float _4717 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4728 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2363 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2743) + _2702) * _2716))) * _2716;
        float _4739 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2672 = (((((_2736 * _2385) + _1116) * cbLight._m0[_2687].x) * _2755) * _2756) + _2558;
        _2674 = (((((_2736 * _2387) + _1118) * cbLight._m0[_2687].y) * _2755) * _2756) + _2560;
        _2676 = (((((_2736 * _2388) + _1119) * cbLight._m0[_2687].z) * _2755) * _2756) + _2562;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2196.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1054) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1053) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            uint _3138 = 0u;
            uint _3147;
            bool _3148;
            for (;;)
            {
                _3147 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                _3148 = _3147 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3148)
                {
                    frontier_phi_66_pred = _3132;
                    frontier_phi_66_pred_1 = _3137;
                    frontier_phi_66_pred_2 = _3136;
                    frontier_phi_66_pred_3 = _3135;
                    frontier_phi_66_pred_4 = _3134;
                    frontier_phi_66_pred_5 = _3133;
                }
                else
                {
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    uint _3283;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3147;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    for (;;)
                    {
                        uint _3287 = uint(findLSB(_3283)) + (_3138 << 5u);
                        uint _3284 = (_3283 + 4294967295u) & _3283;
                        uint _3289 = _3287 * 48u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3309 = (_3287 * 48u) + 4u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3328 = (_3287 * 48u) + 8u;
                        vec3 _3339 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x));
                        float _3343 = _3303.x - _2832;
                        float _3344 = _3303.y - _2833;
                        float _3345 = _3303.z - _2834;
                        float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                        float _3349 = inversesqrt(_3346);
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3353 = dot(vec3(_1072, _1075, _1078), vec3(_3350, _3351, _3352));
                        float _3358 = 1.0 - (_3346 * _3303.w);
                        float _4765 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3360 = sqrt(_3346) * _3322.w;
                        float _3363 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3353) + _3364;
                        float _3370 = _3360 * _3360;
                        float _3374 = ((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3359) / ((_3370 * 0.699999988079071044921875) + 1.0);
                        float _3378 = (-0.0) - _2832;
                        float _3379 = (-0.0) - _2833;
                        float _3380 = (-0.0) - _2834;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3395 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                        float _3396 = 1.0 - _1147;
                        float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                        float _3404 = _3403 * _3403;
                        float _3405 = _3404 * _3404;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3408 = _3387 + _3352;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3416 = dot(vec3(_1072, _1075, _1078), vec3(_3385, _3386, _3387));
                        float _4781 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3420 = dot(vec3(_1072, _1075, _1078), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                        float _4792 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                        float _3428 = _3363 * _3404;
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3353) + _3429;
                        float _4803 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3433 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3434 = 1.0 - _3404;
                        float _3444 = (0.5 / (((_3433 * ((_3419 * _3434) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3404) * _3419))) * _3433;
                        float _4814 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3455 = (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3427 * _3427) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125))) * _3359;
                        _3207 = (_3374 * _3322.x) + _3280;
                        _3208 = (_3374 * _3322.y) + _3281;
                        _3209 = (_3374 * _3322.z) + _3282;
                        _3204 = (_3455 * _3339.x) + _3277;
                        _3205 = (_3455 * _3339.y) + _3278;
                        _3206 = (_3455 * _3339.z) + _3279;
                        if (_3284 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3284;
                        }
                    }
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                _2980 = frontier_phi_66_pred;
                _2990 = frontier_phi_66_pred_1;
                _2988 = frontier_phi_66_pred_2;
                _2986 = frontier_phi_66_pred_3;
                _2984 = frontier_phi_66_pred_4;
                _2982 = frontier_phi_66_pred_5;
                uint _3139 = _3138 + 1u;
                if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3132 = _2980;
                    _3133 = _2982;
                    _3134 = _2984;
                    _3135 = _2986;
                    _3136 = _2988;
                    _3137 = _2990;
                    _3138 = _3139;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((4294967295u << _2996) & _2878) == 0u)
        {
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
        }
        else
        {
            float _3125 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3126 = _3125 * _2832;
            float _3127 = _3125 * _2833;
            float _3128 = _3125 * _2834;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3260 = _2979;
                float _3261 = _2981;
                float _3262 = _2983;
                float _3263 = _2985;
                float _3264 = _2987;
                float _3265 = _2989;
                uint _3266 = _2996;
                uint _3275;
                bool _3276;
                for (;;)
                {
                    _3275 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                    _3276 = _3275 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3276)
                    {
                        frontier_phi_77_pred = _3265;
                        frontier_phi_77_pred_1 = _3264;
                        frontier_phi_77_pred_2 = _3263;
                        frontier_phi_77_pred_3 = _3262;
                        frontier_phi_77_pred_4 = _3261;
                        frontier_phi_77_pred_5 = _3260;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        uint _3488 = _3275;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3266 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_2834, _3606.z, fma(_2833, _3606.y, _3606.x * _2832)) + _3606.w;
                            _3619 = !((fma(_2834, _3587.z, fma(_2833, _3587.y, _3587.x * _2832)) + _3587.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _2832;
                                float _3647 = _3514.y - _2833;
                                float _3648 = _3514.z - _2834;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4825 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_1072, _1075, _1078))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_2834, _3557.z, fma(_2833, _3557.y, _3557.x * _2832)) + _3557.w) / _3618;
                                float _3678 = (fma(_2834, _3572.z, fma(_2833, _3572.y, _3572.x * _2832)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4841 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _1147;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3709 = _3655 - _3128;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3126, (-0.0) - _3127, (-0.0) - _3128));
                                float _4852 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3721 = dot(vec3(_1072, _1075, _1078), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4863 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_1072, _1075, _1078), vec3(_3653, _3654, _3655))) + _3730;
                                float _4874 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4885 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3684 * _3530.y;
                                frontier_phi_83_pred_1 = _3684 * _3530.x;
                                frontier_phi_83_pred_2 = _3758 * _3542.z;
                                frontier_phi_83_pred_3 = _3758 * _3542.y;
                                frontier_phi_83_pred_4 = _3758 * _3542.x;
                                frontier_phi_83_pred_5 = _3684 * _3530.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3766 = frontier_phi_83_pred;
                            _3765 = frontier_phi_83_pred_1;
                            _3764 = frontier_phi_83_pred_2;
                            _3763 = frontier_phi_83_pred_3;
                            _3762 = frontier_phi_83_pred_4;
                            _3767 = frontier_phi_83_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3474;
                        frontier_phi_77_pred_1 = _3473;
                        frontier_phi_77_pred_2 = _3472;
                        frontier_phi_77_pred_3 = _3471;
                        frontier_phi_77_pred_4 = _3470;
                        frontier_phi_77_pred_5 = _3469;
                    }
                    _3111 = frontier_phi_77_pred;
                    _3109 = frontier_phi_77_pred_1;
                    _3107 = frontier_phi_77_pred_2;
                    _3105 = frontier_phi_77_pred_3;
                    _3103 = frontier_phi_77_pred_4;
                    _3101 = frontier_phi_77_pred_5;
                    uint _3267 = _3266 + 1u;
                    if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3260 = _3101;
                        _3261 = _3103;
                        _3262 = _3105;
                        _3263 = _3107;
                        _3264 = _3109;
                        _3265 = _3111;
                        _3266 = _3267;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3105;
                frontier_phi_58_59_ladder_1 = _3111;
                frontier_phi_58_59_ladder_2 = _3109;
                frontier_phi_58_59_ladder_3 = _3107;
                frontier_phi_58_59_ladder_4 = _3103;
                frontier_phi_58_59_ladder_5 = _3101;
            }
            else
            {
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            _3100 = frontier_phi_58_59_ladder_5;
            _3102 = frontier_phi_58_59_ladder_4;
            _3104 = frontier_phi_58_59_ladder;
            _3106 = frontier_phi_58_59_ladder_3;
            _3108 = frontier_phi_58_59_ladder_2;
            _3110 = frontier_phi_58_59_ladder_1;
        }
        float _3115 = isnan(1.0) ? _1131 : (isnan(_1131) ? 1.0 : min(_1131, 1.0));
        _2891 = (_3115 * _3106) + _2327;
        _2893 = (_3115 * _3108) + _2329;
        _2895 = (_3115 * _3110) + _2331;
        _2897 = ((_3100 * _1116) * _3115) + _2672;
        _2899 = ((_3102 * _1118) * _3115) + _2674;
        _2901 = ((_3104 * _1119) * _3115) + _2676;
    }
    else
    {
        _2891 = _2327;
        _2893 = _2329;
        _2895 = _2331;
        _2897 = _2672;
        _2899 = _2674;
        _2901 = _2676;
    }
    float _4901 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4912 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4923 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2918 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2891 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1131))) + ((_2897 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2893 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1131))) + ((_2899 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2895 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1131))) + ((_2901 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    uint _2921 = _1091 + 6u;
    float _2929 = _1053 / cbSceneParam._m0[86u].x;
    float _2930 = _1054 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _976 : (isnan(_976) ? cbSceneParam._m0[77u].w : min(_976, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_976 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_976) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _976 : min(cbSceneParam._m0[80u].w, _976));
        float _3005 = _3004 / _976;
        float _3016 = _3005 * _1026;
        float _3017 = _1027 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3020 = _3005 * _1028;
        float _3022 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3023 = _3022 + cbSceneParam._m0[79u].w;
        float _3024 = cbSceneParam._m0[79u].w - _3017;
        float _3030 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3020 * _3020));
        float _3033 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3030;
        float _3038 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3040 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3217;
        if (abs((_3018 - _3022) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3217 = ((((_3023 > 0.0) ? exp2(_3038 * _3023) : (2.0 - exp2(_3040 * _3023))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3033;
        }
        else
        {
            float _3161 = 1.0 / cbSceneParam._m0[80u].x;
            float _3162 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : max(_3023, _3024));
            float _3163 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : min(_3023, _3024));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            _3217 = ((abs(_3030 / _3018) * cbSceneParam._m0[80u].y) * ((((_3172 - _3173) * 2.0) - ((exp2(_3038 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0)))) - exp2(_3038 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))))) * _3161)) - ((exp2(_3040 * _3172) - exp2(_3040 * _3173)) * _3161))) + (_3033 * cbSceneParam._m0[80u].z);
        }
        vec4 _3219 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3228 = exp2((_3217 * (-1.44269502162933349609375)) * (1.0 - _3219.w));
        float _3229 = log2(_3228);
        float _3245 = log2(_2949);
        _3042 = (exp2(_3245 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].x)) * _3219.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3044 = (exp2(_3245 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].y)) * _3219.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3046 = (exp2(_3245 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].z)) * _3219.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3048 = _3228 * _2949;
    }
    else
    {
        _3042 = _2946;
        _3044 = _2947;
        _3046 = _2948;
        _3048 = _2949;
    }
    bool _3255;
    vec4 _3058;
    vec4 _3080;
    float _3082;
    float _3086;
    float _3087;
    float _3088;
    float _3089;
    bool _3099;
    for (;;)
    {
        _3058 = cbMatDynParam._m0[0u];
        float _3060 = roundEven(_3058.y);
        bool _3061 = _3060 == 3.0;
        float _3062 = log2(_3048);
        float _3069 = exp2(_3062 * cbSceneParam._m0[78u].x) * _2918;
        float _3070 = exp2(_3062 * cbSceneParam._m0[78u].y) * _2919;
        float _3071 = exp2(_3062 * cbSceneParam._m0[78u].z) * _2920;
        float _3078 = _1042 + (-0.5);
        _3080 = cbMtdParam._m0[1u];
        _3082 = _3080.y * _3078;
        float _3085 = (_3060 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3086 = _3085 * (_3061 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3042)));
        _3087 = _3085 * (_3061 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3044)));
        _3088 = _3085 * (_3061 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3046)));
        _3089 = _3078 * 0.999000012874603271484375;
        _3099 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3099)
        {
            if ((cbInstanceData._m0[_1091 + 7u].x + _3089) < 0.5)
            {
                _3255 = true;
                break;
            }
        }
        uint _3196 = _1092 + uint(_3058.w);
        if ((cbInstanceData._m0[_3196].w < 1.0) && ((cbInstanceData._m0[_3196].w + _3089) < 0.5))
        {
            _3255 = true;
            break;
        }
        if ((_3082 + 1.0) < _3080.x)
        {
            _3255 = true;
            break;
        }
        _3255 = false;
        break;
    }
    float _3460;
    if (_3255)
    {
        discard_state = true;
        _3460 = 0.0;
    }
    else
    {
        _3460 = cbInstanceData._m0[_2921].w;
    }
    SV_Target.x = _3086;
    SV_Target.y = _3087;
    SV_Target.z = _3088;
    SV_Target.w = _3460;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
    discard_exit();
}


