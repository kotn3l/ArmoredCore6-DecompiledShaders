#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1453;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _303 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _326 = log2(0.0);
    float _328 = exp2(_326 * cbMtdParam._m0[23u].x);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    float _339 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _341 = isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0));
    vec4 _353 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _356 = _353.y;
    float _359 = (_353.x + (-0.02500000037252902984619140625)) * 8.0;
    float _363 = roundEven(5.0 - _359);
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(4.0) ? _364 : (isnan(_364) ? 4.0 : min(_364, 4.0));
    float _378 = floor(_365);
    vec4 _381 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _378));
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[17u].x;
    _199[0u] = cbMtdParam._m0[17u].y;
    _200[0u] = cbMtdParam._m0[17u].z;
    _198[1u] = cbMtdParam._m0[15u].x;
    _199[1u] = cbMtdParam._m0[15u].y;
    _200[1u] = cbMtdParam._m0[15u].z;
    _198[2u] = cbMtdParam._m0[14u].x;
    _199[2u] = cbMtdParam._m0[14u].y;
    _200[2u] = cbMtdParam._m0[14u].z;
    _198[3u] = cbMtdParam._m0[13u].x;
    _199[3u] = cbMtdParam._m0[13u].y;
    _200[3u] = cbMtdParam._m0[13u].z;
    _198[4u] = cbMtdParam._m0[12u].x;
    _199[4u] = cbMtdParam._m0[12u].y;
    _200[4u] = cbMtdParam._m0[12u].z;
    _198[5u] = cbMtdParam._m0[18u].x;
    _199[5u] = cbMtdParam._m0[18u].y;
    _200[5u] = cbMtdParam._m0[18u].z;
    float _445 = roundEven(_359);
    float _446 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    uint _448 = uint(int(isnan(5.0) ? _446 : (isnan(_446) ? 5.0 : min(_446, 5.0))));
    vec4 _478 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _489 = cbMtdParam._m0[9u].x * _478.x;
    float _490 = cbMtdParam._m0[9u].y * _478.y;
    float _491 = cbMtdParam._m0[9u].z * _478.z;
    float _498 = ((((((_198[_448] - cbMtdParam._m0[10u].x) * _356) + cbMtdParam._m0[10u].x) * _381.x) - _489) * _341) + _489;
    float _499 = ((((((_199[_448] - cbMtdParam._m0[10u].y) * _356) + cbMtdParam._m0[10u].y) * _381.y) - _490) * _341) + _490;
    float _500 = ((((((_200[_448] - cbMtdParam._m0[10u].z) * _356) + cbMtdParam._m0[10u].z) * _381.z) - _491) * _341) + _491;
    float _506 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _519 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _538 = (((cbMtdParam._m0[16u].x * _519.x) - _498) * _506) + _498;
    float _539 = (((cbMtdParam._m0[16u].y * _519.y) - _499) * _506) + _499;
    float _540 = (((cbMtdParam._m0[16u].z * _519.z) - _500) * _506) + _500;
    vec4 _553 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _573 = (((cbMtdParam._m0[19u].x * _553.x) - _538) * _330) + _538;
    float _574 = (((cbMtdParam._m0[19u].y * _553.y) - _539) * _330) + _539;
    float _575 = (((cbMtdParam._m0[19u].z * _553.z) - _540) * _330) + _540;
    vec4 _587 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _612 = (_318.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _587.x) - _573) * _305) + _573);
    float _614 = (_318.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _587.y) - _574) * _305) + _574);
    float _616 = (_318.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _587.z) - _575) * _305) + _575);
    float _620 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _629 = (_620 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _620))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4109 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _637 = ((cbMtdParam._m0[21u].x - _612) * _630) + _612;
    float _638 = ((cbMtdParam._m0[21u].y - _614) * _630) + _614;
    float _639 = ((cbMtdParam._m0[21u].z - _616) * _630) + _616;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _679 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _681 = uint(int(isnan(4.0) ? _679 : (isnan(_679) ? 4.0 : min(_679, 4.0))));
    float _688 = ((_194[_681] - cbMtdParam._m0[22u].z) * _341) + cbMtdParam._m0[22u].z;
    float _691 = ((cbMtdParam._m0[22u].w - _688) * _506) + _688;
    float _694 = ((cbMtdParam._m0[25u].x - _691) * _330) + _691;
    float _697 = ((cbMtdParam._m0[26u].x - _694) * _305) + _694;
    float _699 = _697 - (_697 * _620);
    vec4 _715 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _378));
    vec4 _732 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _734 = _732.x;
    float _735 = _732.y;
    float _740 = cbMtdParam._m0[22u].x + _732.z;
    float _743 = (((_715.z + _193[_681]) - _740) * _341) + _740;
    vec4 _755 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _766 = (((_755.z - _743) + cbMtdParam._m0[28u].y) * _506) + _743;
    float _772 = ((((_290 * 2.0) * _766) - _766) * cbMtdParam._m0[24u].w) + _766;
    vec4 _784 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _795 = (((cbMtdParam._m0[23u].z + _784.z) - _772) * _330) + _772;
    vec4 _808 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _819 = (((_808.z - _795) + cbMtdParam._m0[26u].y) * _305) + _795;
    vec4 _834 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _849 = ((cbMtdParam._m0[27u].y * _620) * ((_834.z * cbMtdParam._m0[27u].x) - _819)) + _819;
    float _861 = ((_715.x - _734) * _341) + _734;
    float _862 = ((_715.y - _735) * _341) + _735;
    float _867 = ((_755.x - _861) * _506) + _861;
    float _868 = ((_755.y - _862) * _506) + _862;
    float _873 = ((_784.x - _867) * _330) + _867;
    float _874 = ((_784.y - _868) * _330) + _868;
    float _883 = ((((_808.x - _873) * _305) + _873) * 2.0) + (-1.0);
    float _884 = ((((_808.y - _874) * _305) + _874) * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _4130 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _890 = sqrt(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))));
    float _900 = ((cbMtdParam._m0[25u].y * ((_286.x * 2.0) + (-1.0))) + _883) + ((((_834.x * 2.0) + (-1.0)) * _620) * cbMtdParam._m0[26u].w);
    float _901 = ((cbMtdParam._m0[25u].y * ((_286.y * 2.0) + (-1.0))) + _884) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_834.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _904 = fma(_890, _235 * NORMAL.x, fma(_901, _242 * TANGENT.x, (_228 * _220) * _900));
    float _907 = fma(_890, _235 * NORMAL.y, fma(_901, _242 * TANGENT.y, (_228 * _221) * _900));
    float _910 = fma(_890, _235 * NORMAL.z, fma(_901, _242 * TANGENT.z, (_228 * _222) * _900));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _4141 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _918 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4163 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4174 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4185 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _922 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _938 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _988 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _978);
    float _989 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _978);
    float _990 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _978);
    float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
    float _995 = _988 * _994;
    float _996 = _989 * _994;
    float _997 = _990 * _994;
    float _1003 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1004 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1022 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1025 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1028 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1041 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1043 = (_1041 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _4196 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _1055 = 1.0 - _922;
    float _1056 = _1052 * _1055;
    float _1057 = _1053 * _1055;
    float _1058 = _1054 * _1055;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _922;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _922;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _922;
    float _1066 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    vec4 _1078 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1003, cbSceneParam._m0[86u].y * _1004));
    float _1081 = _1078.x * TEXCOORD_3.w;
    float _1082 = dot(vec3(_915, _916, _917), vec3(_995, _996, _997));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _915) - _995;
    float _1090 = (_1085 * _916) - _996;
    float _1091 = (_1085 * _917) - _997;
    float _1095 = abs(dot(vec3(_995, _996, _997), vec3(_915, _916, _917)));
    float _4229 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_918);
    float _1108 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1114 = (1.0 - _1108) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1115 = _1108 * _1097;
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1452;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1177 = fma(_1151, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143));
        float _1181 = fma(_1151, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143));
        float _1185 = fma(_1151, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143));
        float _1210 = _1143 + _915;
        float _1211 = _1147 + _916;
        float _1212 = _1151 + _917;
        float _1222 = fma(_1212, cbModelParam._m0[26u].z, fma(_1211, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1210)) - _1177;
        float _1223 = fma(_1212, cbModelParam._m0[27u].z, fma(_1211, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1210)) - _1181;
        float _1224 = fma(_1212, cbModelParam._m0[28u].z, fma(_1211, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1210)) - _1185;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1177 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1181 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[34u].z) + ((((((_1185 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1280 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1246.x + (-0.5));
        float _1282 = _1280 * (_1246.y + (-0.5));
        float _1283 = _1280 * (_1246.z + (-0.5));
        float _1290 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1253.x + (-0.5));
        float _1292 = _1290 * (_1253.y + (-0.5));
        float _1293 = _1290 * (_1253.z + (-0.5));
        float _1300 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1260.x + (-0.5));
        float _1302 = _1300 * (_1260.y + (-0.5));
        float _1303 = _1300 * (_1260.z + (-0.5));
        float _1310 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1267.x + (-0.5));
        float _1312 = _1310 * (_1267.y + (-0.5));
        float _1313 = _1310 * (_1267.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1334 = (dot(vec3(_915, _916, _917), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1344 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4277 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1346 + 1.0))) + _1351) * _1314;
        float _1361 = _1282 * 0.5;
        float _1362 = _1292 * 0.5;
        float _1363 = _1302 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_915, _916, _917), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4310 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1388 + 1.0))) + _1393) * _1315;
        float _1403 = _1283 * 0.5;
        float _1404 = _1293 * 0.5;
        float _1405 = _1303 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_915, _916, _917), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4343 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1430 + 1.0))) + _1435) * _1316;
        _1452 = _1283;
        _1454 = _1282;
        _1455 = _1281;
        _1456 = _1293;
        _1457 = _1292;
        _1458 = _1291;
        _1459 = _1303;
        _1460 = _1302;
        _1461 = _1301;
        _1462 = _1316;
        _1463 = _1315;
        _1464 = _1314;
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1453;
        _1454 = _1453;
        _1455 = _1453;
        _1456 = _1453;
        _1457 = _1453;
        _1458 = _1453;
        _1459 = _1453;
        _1460 = _1453;
        _1461 = _1453;
        _1462 = _1453;
        _1463 = _1453;
        _1464 = _1453;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1151, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143));
        float _1494 = fma(_1151, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143));
        float _1498 = fma(_1151, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143));
        float _1521 = _1143 + _915;
        float _1522 = _1147 + _916;
        float _1523 = _1151 + _917;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_915, _916, _917), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4406 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_915, _916, _917), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4439 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_915, _916, _917), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4472 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1453;
        _1760 = _1453;
        _1761 = _1453;
        _1762 = _1453;
        _1763 = _1453;
        _1764 = _1453;
        _1765 = _1453;
        _1766 = _1453;
        _1767 = _1453;
        _1768 = _1453;
        _1769 = _1453;
        _1770 = _1453;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1466)) + _1466;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1467)) + _1467;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1089 * 0.5;
    float _1828 = _1090 * 0.5;
    float _1829 = _1091 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1870;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1452, _1456, _1459, _1462));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1881;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1872 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1885 = (_1881 * cbModelParam._m0[1u].x) + (_1870 * (1.0 - cbModelParam._m0[1u].x));
    float _1895 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1895 : min(cbModelParam._m0[25u].z, _1895));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1943 = fma(_1151, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143)) + cbModelParam._m0[13u].w;
        float _1947 = fma(_1151, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143)) + cbModelParam._m0[14u].w;
        float _1951 = fma(_1151, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143)) + cbModelParam._m0[15u].w;
        float _1954 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1957 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1960 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _1988;
        if (_1954 > 0.0)
        {
            _1988 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1988 = frontier_phi_14_12_ladder;
        }
        float _2159;
        if (_1957 > 0.0)
        {
            _2159 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2159 = frontier_phi_23_19_ladder;
        }
        float _2454;
        if (_1960 > 0.0)
        {
            _2454 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2454 = frontier_phi_35_30_ladder;
        }
        float _2456 = isnan(_2159) ? _1988 : (isnan(_1988) ? _2159 : min(_1988, _2159));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1954) + _1943;
        float _2462 = (_2457 * _1957) + _1947;
        float _2463 = (_2457 * _1960) + _1951;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2464;
        float _2468 = _2464 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 > _2468) || ((_2462 < _2466) || ((_2461 < _2466) || (_2461 > _2468))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2463, cbModelParam._m0[9u].z, fma(_2462, cbModelParam._m0[9u].y, _2461 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2463, cbModelParam._m0[10u].z, fma(_2462, cbModelParam._m0[10u].y, _2461 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2463, cbModelParam._m0[11u].z, fma(_2462, cbModelParam._m0[11u].y, _2461 * cbModelParam._m0[11u].x))), _1896);
            frontier_phi_13_35_ladder = _2608.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2608.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2608.x * cbModelParam._m0[1u].y;
        }
        _1976 = frontier_phi_13_35_ladder_2;
        _1978 = frontier_phi_13_35_ladder_1;
        _1980 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1896);
        _1976 = _1964.x * cbModelParam._m0[1u].y;
        _1978 = _1964.y * cbModelParam._m0[1u].y;
        _1980 = _1964.z * cbModelParam._m0[1u].y;
    }
    float _1984 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1984 : min(cbModelParam._m0[25u].w, _1984));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2038 = fma(_1151, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143)) + cbModelParam._m0[21u].w;
        float _2042 = fma(_1151, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143)) + cbModelParam._m0[22u].w;
        float _2046 = fma(_1151, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143)) + cbModelParam._m0[23u].w;
        float _2049 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2052 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2055 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2164;
        if (_2049 > 0.0)
        {
            _2164 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2164 = frontier_phi_25_21_ladder;
        }
        float _2481;
        if (_2052 > 0.0)
        {
            _2481 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2481 = frontier_phi_37_32_ladder;
        }
        float _2819;
        if (_2055 > 0.0)
        {
            _2819 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2819 = frontier_phi_47_44_ladder;
        }
        float _2821 = isnan(_2481) ? _2164 : (isnan(_2164) ? _2481 : min(_2164, _2481));
        float _2822 = isnan(_2819) ? _2821 : (isnan(_2821) ? _2819 : min(_2821, _2819));
        float _2826 = (_2822 * _2049) + _2038;
        float _2827 = (_2822 * _2052) + _2042;
        float _2828 = (_2822 * _2055) + _2046;
        float _2829 = _2822 * 9.9999997473787516355514526367188e-05;
        float _2830 = (-1.0) - _2829;
        float _2832 = _2829 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2828 > _2832) || ((_2828 < _2830) || ((_2827 > _2832) || ((_2827 < _2830) || ((_2826 < _2830) || (_2826 > _2832))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2828, cbModelParam._m0[17u].z, fma(_2827, cbModelParam._m0[17u].y, _2826 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2828, cbModelParam._m0[18u].z, fma(_2827, cbModelParam._m0[18u].y, _2826 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2828, cbModelParam._m0[19u].z, fma(_2827, cbModelParam._m0[19u].y, _2826 * cbModelParam._m0[19u].x))), _1985);
            frontier_phi_22_47_ladder = _2950.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2950.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2950.x * cbModelParam._m0[1u].z;
        }
        _2074 = frontier_phi_22_47_ladder_2;
        _2076 = frontier_phi_22_47_ladder_1;
        _2078 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _1985);
        _2074 = _2058.x * cbModelParam._m0[1u].z;
        _2076 = _2058.y * cbModelParam._m0[1u].z;
        _2078 = _2058.z * cbModelParam._m0[1u].z;
    }
    float _2091 = (((_1114 * _1066) + _1115) * _1081) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1114 * _1068) + _1115) * _1081) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1114 * _1069) + _1115) * _1081) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2098 = fma(_2095, cbSceneParam._m0[89u].z, fma(_2093, cbSceneParam._m0[89u].y, _2091 * cbSceneParam._m0[89u].x));
    float _2101 = fma(_2095, cbSceneParam._m0[90u].z, fma(_2093, cbSceneParam._m0[90u].y, _2091 * cbSceneParam._m0[90u].x));
    float _2104 = fma(_2095, cbSceneParam._m0[91u].z, fma(_2093, cbSceneParam._m0[91u].y, _2091 * cbSceneParam._m0[91u].x));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2150 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2151 = _2138 / _2150;
    float _2152 = _2142 / _2150;
    float _2153 = _2146 / _2150;
    float _2300;
    float _2301;
    float _2302;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2180 = ((uint(_2153 > cbSceneParam._m0[59u].y) + uint(_2153 > cbSceneParam._m0[59u].x)) + uint(_2153 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2181 = _2180 + 43u;
        uint _2189 = _2180 + 44u;
        uint _2197 = _2180 + 45u;
        uint _2205 = _2180 + 46u;
        float _2216 = fma(_2150, cbSceneParam._m0[_2181].w, fma(_2146, cbSceneParam._m0[_2181].z, fma(_2142, cbSceneParam._m0[_2181].y, _2138 * cbSceneParam._m0[_2181].x)));
        float _2220 = fma(_2150, cbSceneParam._m0[_2189].w, fma(_2146, cbSceneParam._m0[_2189].z, fma(_2142, cbSceneParam._m0[_2189].y, _2138 * cbSceneParam._m0[_2189].x)));
        float _2228 = fma(_2150, cbSceneParam._m0[_2205].w, fma(_2146, cbSceneParam._m0[_2205].z, fma(_2142, cbSceneParam._m0[_2205].y, _2138 * cbSceneParam._m0[_2205].x)));
        float _2233 = cbSceneParam._m0[33u].z * _2228;
        float _2235 = cbSceneParam._m0[33u].w * _2228;
        float _2238 = fma(_2150, cbSceneParam._m0[_2197].w, fma(_2146, cbSceneParam._m0[_2197].z, fma(_2142, cbSceneParam._m0[_2197].y, _2138 * cbSceneParam._m0[_2197].x))) / _2228;
        float _2286 = (cbSceneParam._m0[33u].x - sqrt(((_2152 * _2152) + (_2151 * _2151)) + (_2153 * _2153))) * cbSceneParam._m0[33u].y;
        float _4598 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2293 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2233 + _2216) / _2228, (_2235 + _2220) / _2228), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2235 + _2216) / _2228, (_2220 - _2233) / _2228), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 - _2233) / _2228, (_2220 - _2235) / _2228), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 - _2235) / _2228, (_2233 + _2220) / _2228), _2238), 0.0)).x), vec4(0.25)));
        _2300 = 1.0 - (_2293 * cbSceneParam._m0[34u].x);
        _2301 = 1.0 - (_2293 * cbSceneParam._m0[34u].y);
        _2302 = 1.0 - (_2293 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2300 = 1.0;
        _2301 = 1.0;
        _2302 = 1.0;
    }
    float _2366;
    float _2368;
    float _2370;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2354 = fma(_2150, cbSceneParam._m0[63u].w, fma(_2146, cbSceneParam._m0[63u].z, fma(_2142, cbSceneParam._m0[63u].y, _2138 * cbSceneParam._m0[63u].x)));
        float _2355 = fma(_2150, cbSceneParam._m0[60u].w, fma(_2146, cbSceneParam._m0[60u].z, fma(_2142, cbSceneParam._m0[60u].y, _2138 * cbSceneParam._m0[60u].x))) / _2354;
        float _2356 = fma(_2150, cbSceneParam._m0[61u].w, fma(_2146, cbSceneParam._m0[61u].z, fma(_2142, cbSceneParam._m0[61u].y, _2138 * cbSceneParam._m0[61u].x))) / _2354;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2355 >= cbSceneParam._m0[64u].x) && (_2356 >= cbSceneParam._m0[64u].y)) && (_2355 <= cbSceneParam._m0[64u].z)) && (_2356 <= cbSceneParam._m0[64u].w))
        {
            float _2494 = fma(_2150, cbSceneParam._m0[62u].w, fma(_2146, cbSceneParam._m0[62u].z, fma(_2142, cbSceneParam._m0[62u].y, _2138 * cbSceneParam._m0[62u].x))) / _2354;
            float _2498 = isnan(cbSceneParam._m0[41u].w) ? _2494 : (isnan(_2494) ? cbSceneParam._m0[41u].w : max(_2494, cbSceneParam._m0[41u].w));
            float _2541 = (cbSceneParam._m0[33u].x - sqrt(((_2152 * _2152) + (_2151 * _2151)) + (_2153 * _2153))) * cbSceneParam._m0[33u].y;
            float _4614 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
            float _2548 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2355, cbSceneParam._m0[33u].w + _2356), _2498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2355, _2356 - cbSceneParam._m0[33u].z), _2498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2355 - cbSceneParam._m0[33u].z, _2356 - cbSceneParam._m0[33u].w), _2498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2355 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2356), _2498), 0.0)).x), vec4(0.25)));
            float _2552 = 1.0 - (_2548 * cbSceneParam._m0[34u].x);
            float _2553 = 1.0 - (_2548 * cbSceneParam._m0[34u].y);
            float _2554 = 1.0 - (_2548 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2554) ? _2302 : (isnan(_2302) ? _2554 : min(_2302, _2554));
            frontier_phi_34_33_ladder_1 = isnan(_2553) ? _2301 : (isnan(_2301) ? _2553 : min(_2301, _2553));
            frontier_phi_34_33_ladder_2 = isnan(_2552) ? _2300 : (isnan(_2300) ? _2552 : min(_2300, _2552));
        }
        else
        {
            frontier_phi_34_33_ladder = _2302;
            frontier_phi_34_33_ladder_1 = _2301;
            frontier_phi_34_33_ladder_2 = _2300;
        }
        _2366 = frontier_phi_34_33_ladder_2;
        _2368 = frontier_phi_34_33_ladder_1;
        _2370 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2366 = _2300;
        _2368 = _2301;
        _2370 = _2302;
    }
    uvec4 _2375 = floatBitsToUint(cbInstanceData._m0[_1041 + 5u]);
    uint _2377 = _2375.x * 14u;
    uint _2378 = _2377 + 13u;
    float _2385 = _1081 + (-1.0);
    float _2390 = (cbLight._m0[_2378].x * _2385) + 1.0;
    float _2391 = (cbLight._m0[_2378].y * _2385) + 1.0;
    float _2392 = (cbLight._m0[_2378].z * _2385) + 1.0;
    float _2393 = (cbLight._m0[_2378].w * _2385) + 1.0;
    uint _2394 = _2377 + 5u;
    float _2400 = isnan(1.0) ? _2391 : (isnan(_2391) ? 1.0 : min(_2391, 1.0));
    uint _2404 = _2377 + 4u;
    float _2413 = isnan(1.0) ? _2390 : (isnan(_2390) ? 1.0 : min(_2390, 1.0));
    uint _2417 = _2377 | 1u;
    float _2428 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_915, _916, _917));
    float _2431 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_915, _916, _917));
    float _4650 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _4661 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2436 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2438 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2445 = ((cbLight._m0[_2394].x * _2400) * _2438) + (((cbLight._m0[_2404].x * _2366) * _2413) * _2436);
    float _2446 = ((_2400 * cbLight._m0[_2394].y) * _2438) + (((cbLight._m0[_2404].y * _2368) * _2413) * _2436);
    float _2447 = ((_2400 * cbLight._m0[_2394].z) * _2438) + (((cbLight._m0[_2404].z * _2370) * _2413) * _2436);
    uvec4 _2451 = floatBitsToUint(cbLight._m0[_2377 + 12u]);
    bool _2453 = _2451.x == 0u;
    float _2555;
    float _2557;
    float _2559;
    if (_2453)
    {
        _2555 = _2445;
        _2557 = _2446;
        _2559 = _2447;
    }
    else
    {
        uint _2563 = _2377 + 6u;
        float _2579 = (dot(vec3(cbLight._m0[_2377 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2580 = _2579 * _2579;
        float _4672 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2581 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2582 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        _2555 = (((cbLight._m0[_2563].x * 0.3183098733425140380859375) * _2581) * _2582) + _2445;
        _2557 = (((cbLight._m0[_2563].y * 0.3183098733425140380859375) * _2581) * _2582) + _2446;
        _2559 = (((cbLight._m0[_2563].z * 0.3183098733425140380859375) * _2581) * _2582) + _2447;
    }
    bool _2562 = _2451.y == 0u;
    float _2617;
    float _2619;
    float _2621;
    if (_2562)
    {
        _2617 = _2555;
        _2619 = _2557;
        _2621 = _2559;
    }
    else
    {
        uint _2790 = _2377 + 7u;
        float _2806 = (dot(vec3(cbLight._m0[_2377 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2807 = _2806 * _2806;
        float _4688 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2808 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2809 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2617 = (((cbLight._m0[_2790].x * 0.3183098733425140380859375) * _2808) * _2809) + _2555;
        _2619 = (((cbLight._m0[_2790].y * 0.3183098733425140380859375) * _2808) * _2809) + _2557;
        _2621 = (((cbLight._m0[_2790].z * 0.3183098733425140380859375) * _2808) * _2809) + _2559;
    }
    uint _2624 = _2377 + 8u;
    float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _918) * 0.949999988079071044921875);
    float _2638 = _2637 * _2637;
    float _2639 = cbLight._m0[_2377].x + _995;
    float _2640 = cbLight._m0[_2377].y + _996;
    float _2641 = cbLight._m0[_2377].z + _997;
    float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
    float _2646 = _2645 * _2639;
    float _2647 = _2645 * _2640;
    float _2648 = _2645 * _2641;
    float _2649 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2377].xyz));
    float _4704 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2652 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _4715 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2653 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2654 = dot(vec3(_915, _916, _917), vec3(_2646, _2647, _2648));
    float _4726 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2646, _2647, _2648));
    float _4737 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2638 * _2638;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
    float _2675 = 0.959999978542327880859375 - _1063;
    float _2677 = 0.959999978542327880859375 - _1064;
    float _2678 = 0.959999978542327880859375 - _1065;
    float _2685 = 1.0 - _2638;
    float _2696 = (0.5 / (((_2653 * ((_2652 * _2685) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2685) + _2638) * _2652))) * _2652;
    float _4748 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    uint _2712 = _2377 + 9u;
    float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _918) * 0.949999988079071044921875);
    float _2724 = _2723 * _2723;
    float _2725 = cbLight._m0[_2417].x + _995;
    float _2726 = cbLight._m0[_2417].y + _996;
    float _2727 = cbLight._m0[_2417].z + _997;
    float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
    float _2732 = _2731 * _2725;
    float _2733 = _2731 * _2726;
    float _2734 = _2731 * _2727;
    float _2735 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2417].xyz));
    float _4759 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2739 = dot(vec3(_915, _916, _917), vec3(_2732, _2733, _2734));
    float _4770 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2742 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2743 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2732, _2733, _2734));
    float _4781 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2747 = _2724 * _2724;
    float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
    float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0);
    float _2765 = 1.0 - _2724;
    float _2775 = (0.5 / (((_2653 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2765) + _2724) * _2738))) * _2738;
    float _4792 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2777 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
    float _2787 = (((((_2758 * _2675) + _1066) * cbLight._m0[_2712].x) * _2777) * _2400) + ((((cbLight._m0[_2624].x * _2366) * ((_2674 * _2675) + _1066)) * _2698) * _2413);
    float _2788 = (((((_2758 * _2677) + _1068) * cbLight._m0[_2712].y) * _2777) * _2400) + ((((cbLight._m0[_2624].y * _2368) * ((_2674 * _2677) + _1068)) * _2698) * _2413);
    float _2789 = (((((_2758 * _2678) + _1069) * cbLight._m0[_2712].z) * _2777) * _2400) + ((((cbLight._m0[_2624].z * _2370) * ((_2674 * _2678) + _1069)) * _2698) * _2413);
    float _2845;
    float _2847;
    float _2849;
    if (_2453)
    {
        _2845 = _2787;
        _2847 = _2788;
        _2849 = _2789;
    }
    else
    {
        uint _2851 = _2377 + 2u;
        uint _2855 = _2377 + 10u;
        float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _918) * 0.949999988079071044921875);
        float _2870 = _2869 * _2869;
        float _2871 = cbLight._m0[_2851].x + _995;
        float _2872 = cbLight._m0[_2851].y + _996;
        float _2873 = cbLight._m0[_2851].z + _997;
        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
        float _2878 = _2877 * _2871;
        float _2879 = _2877 * _2872;
        float _2880 = _2877 * _2873;
        float _2881 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2851].xyz));
        float _4803 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2885 = dot(vec3(_915, _916, _917), vec3(_2878, _2879, _2880));
        float _4814 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2889 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_2878, _2879, _2880));
        float _4825 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2893 = _2870 * _2870;
        float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
        float _2904 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
        float _2911 = 1.0 - _2870;
        float _2921 = (0.5 / (((_2653 * ((_2884 * _2911) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2911) + _2870) * _2884))) * _2884;
        float _4836 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2923 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
        float _2924 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        _2845 = (((((_2904 * _2675) + _1066) * cbLight._m0[_2855].x) * _2923) * _2924) + _2787;
        _2847 = (((((_2904 * _2677) + _1068) * cbLight._m0[_2855].y) * _2923) * _2924) + _2788;
        _2849 = (((((_2904 * _2678) + _1069) * cbLight._m0[_2855].z) * _2923) * _2924) + _2789;
    }
    float _2955;
    float _2957;
    float _2959;
    if (_2562)
    {
        _2955 = _2845;
        _2957 = _2847;
        _2959 = _2849;
    }
    else
    {
        uint _2966 = _2377 + 3u;
        uint _2970 = _2377 + 11u;
        float _2984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2966].w)) * _918) * 0.949999988079071044921875);
        float _2985 = _2984 * _2984;
        float _2986 = cbLight._m0[_2966].x + _995;
        float _2987 = cbLight._m0[_2966].y + _996;
        float _2988 = cbLight._m0[_2966].z + _997;
        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
        float _2993 = _2992 * _2986;
        float _2994 = _2992 * _2987;
        float _2995 = _2992 * _2988;
        float _2996 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2966].xyz));
        float _4852 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _3000 = dot(vec3(_915, _916, _917), vec3(_2993, _2994, _2995));
        float _4863 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3003 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _3004 = dot(vec3(cbLight._m0[_2966].xyz), vec3(_2993, _2994, _2995));
        float _4874 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        float _3008 = _2985 * _2985;
        float _3012 = ((_3003 * _3003) * (_3008 + (-1.0))) + 1.0;
        float _3019 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
        float _3026 = 1.0 - _2985;
        float _3036 = (0.5 / (((_2653 * ((_2999 * _3026) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _3026) + _2985) * _2999))) * _2999;
        float _4885 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3038 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_3008 / ((_3012 * _3012) * 3.141590118408203125));
        float _3039 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2955 = (((((_3019 * _2675) + _1066) * cbLight._m0[_2970].x) * _3038) * _3039) + _2845;
        _2957 = (((((_3019 * _2677) + _1068) * cbLight._m0[_2970].y) * _3038) * _3039) + _2847;
        _2959 = (((((_3019 * _2678) + _1069) * cbLight._m0[_2970].z) * _3038) * _3039) + _2849;
    }
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_2375.y == 0u)
    {
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.x;
        uint _3072 = uint((float(_3060.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1004) / _3061))) + floor(float(uint(cbSceneParam._m0[85u].x * _1003) / _3061)));
        float _3082 = (log2(_2153 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3083 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        uint _3086 = uint(isnan(14.0) ? _3083 : (isnan(_3083) ? 14.0 : min(_3083, 14.0)));
        uvec4 _3091 = texelFetch(g_lightClusterGridBuffer, int(((_3086 << 2u) + (_3072 << 6u)) >> 2u));
        uint _3092 = _3091.x;
        uint _3093 = _3060.z;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((((1u << ((_3093 >> 4u) & 15u)) + 4294967295u) & _3092) == 0u) || ((_3093 & 240u) == 0u))
        {
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
            _3180 = 0.0;
            _3182 = 0.0;
        }
        else
        {
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3181;
            float _3183;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            uint _3323 = 0u;
            uint _3332;
            bool _3333;
            for (;;)
            {
                _3332 = texelFetch(g_lightClassification, int((((_3086 << 5u) + (_3072 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                _3333 = _3332 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3333)
                {
                    frontier_phi_66_pred = _3322;
                    frontier_phi_66_pred_1 = _3321;
                    frontier_phi_66_pred_2 = _3320;
                    frontier_phi_66_pred_3 = _3319;
                    frontier_phi_66_pred_4 = _3318;
                    frontier_phi_66_pred_5 = _3317;
                }
                else
                {
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    uint _3447;
                    _3441 = _3317;
                    _3442 = _3318;
                    _3443 = _3319;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3332;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    for (;;)
                    {
                        uint _3451 = uint(findLSB(_3447)) + (_3323 << 5u);
                        uint _3448 = (_3447 + 4294967295u) & _3447;
                        uint _3453 = _3451 * 48u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 3u)).x));
                        uint _3473 = (_3451 * 48u) + 4u;
                        vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 3u)).x));
                        uint _3492 = (_3451 * 48u) + 8u;
                        vec3 _3503 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x));
                        float _3507 = _3467.x - _2151;
                        float _3508 = _3467.y - _2152;
                        float _3509 = _3467.z - _2153;
                        float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                        float _3513 = inversesqrt(_3510);
                        float _3514 = _3513 * _3507;
                        float _3515 = _3513 * _3508;
                        float _3516 = _3513 * _3509;
                        float _3517 = dot(vec3(_1022, _1025, _1028), vec3(_3514, _3515, _3516));
                        float _3522 = 1.0 - (_3510 * _3467.w);
                        float _4911 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3524 = sqrt(_3510) * _3486.w;
                        float _3527 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3517) + _3528;
                        float _3534 = _3524 * _3524;
                        float _3538 = ((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3523) / ((_3534 * 0.699999988079071044921875) + 1.0);
                        float _3542 = (-0.0) - _2151;
                        float _3543 = (-0.0) - _2152;
                        float _3544 = (-0.0) - _2153;
                        float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                        float _3549 = _3548 * _3542;
                        float _3550 = _3548 * _3543;
                        float _3551 = _3548 * _3544;
                        float _3558 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                        float _3559 = 1.0 - _1097;
                        float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                        float _3567 = _3566 * _3566;
                        float _3568 = _3567 * _3567;
                        float _3569 = _3549 + _3514;
                        float _3570 = _3550 + _3515;
                        float _3571 = _3551 + _3516;
                        float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                        float _3579 = dot(vec3(_1022, _1025, _1028), vec3(_3549, _3550, _3551));
                        float _4927 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3583 = dot(vec3(_1022, _1025, _1028), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                        float _4938 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3586 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                        float _3591 = _3527 * _3567;
                        float _3592 = _3591 * _3591;
                        float _3595 = ((1.0 - _3592) * _3517) + _3592;
                        float _4949 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3597 = 1.0 - _3567;
                        float _3607 = (0.5 / (((_3596 * ((_3582 * _3597) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3567) * _3582))) * _3596;
                        float _4960 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3618 = (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3590 * _3590) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125))) * _3523;
                        _3376 = (_3538 * _3486.x) + _3444;
                        _3377 = (_3538 * _3486.y) + _3445;
                        _3378 = (_3538 * _3486.z) + _3446;
                        _3373 = (_3618 * _3503.x) + _3441;
                        _3374 = (_3618 * _3503.y) + _3442;
                        _3375 = (_3618 * _3503.z) + _3443;
                        if (_3448 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3441 = _3373;
                            _3442 = _3374;
                            _3443 = _3375;
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3448;
                        }
                    }
                    frontier_phi_66_pred = _3378;
                    frontier_phi_66_pred_1 = _3377;
                    frontier_phi_66_pred_2 = _3376;
                    frontier_phi_66_pred_3 = _3375;
                    frontier_phi_66_pred_4 = _3374;
                    frontier_phi_66_pred_5 = _3373;
                }
                _3183 = frontier_phi_66_pred;
                _3181 = frontier_phi_66_pred_1;
                _3179 = frontier_phi_66_pred_2;
                _3177 = frontier_phi_66_pred_3;
                _3175 = frontier_phi_66_pred_4;
                _3173 = frontier_phi_66_pred_5;
                uint _3324 = _3323 + 1u;
                if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3317 = _3173;
                    _3318 = _3175;
                    _3319 = _3177;
                    _3320 = _3179;
                    _3321 = _3181;
                    _3322 = _3183;
                    _3323 = _3324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
            _3180 = _3181;
            _3182 = _3183;
        }
        uvec4 _3186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3187 = _3186.z;
        uint _3189 = (_3187 >> 8u) & 15u;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((4294967295u << _3189) & _3092) == 0u)
        {
            _3285 = _3172;
            _3287 = _3174;
            _3289 = _3176;
            _3291 = _3178;
            _3293 = _3180;
            _3295 = _3182;
        }
        else
        {
            float _3310 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
            float _3311 = _3310 * _2151;
            float _3312 = _3310 * _2152;
            float _3313 = _3310 * _2153;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3189 < ((_3187 >> 12u) & 15u))
            {
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3424 = _3172;
                float _3425 = _3174;
                float _3426 = _3176;
                float _3427 = _3178;
                float _3428 = _3180;
                float _3429 = _3182;
                uint _3430 = _3189;
                uint _3439;
                bool _3440;
                for (;;)
                {
                    _3439 = texelFetch(g_lightClassification, int((((_3086 << 5u) + (_3072 << 9u)) + (_3430 << 2u)) >> 2u)).x;
                    _3440 = _3439 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3440)
                    {
                        frontier_phi_72_pred = _3429;
                        frontier_phi_72_pred_1 = _3428;
                        frontier_phi_72_pred_2 = _3427;
                        frontier_phi_72_pred_3 = _3426;
                        frontier_phi_72_pred_4 = _3425;
                        frontier_phi_72_pred_5 = _3424;
                    }
                    else
                    {
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3636 = _3424;
                        float _3637 = _3425;
                        float _3638 = _3426;
                        float _3639 = _3427;
                        float _3640 = _3428;
                        float _3641 = _3429;
                        uint _3642 = _3439;
                        uint _3643;
                        vec4 _3668;
                        float _3669;
                        vec4 _3684;
                        vec3 _3696;
                        vec4 _3711;
                        vec4 _3726;
                        float _3772;
                        bool _3773;
                        for (;;)
                        {
                            uint _3653 = ((_3430 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3642));
                            _3643 = (_3642 + 4294967295u) & _3642;
                            uint _3655 = _3653 * 40u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3669 = _3668.w;
                            uint _3671 = (_3653 * 40u) + 4u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3653 * 40u) + 8u;
                            _3696 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x));
                            uint _3698 = (_3653 * 40u) + 16u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3653 * 40u) + 20u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3653 * 40u) + 24u;
                            vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3747 = (_3653 * 40u) + 28u;
                            vec4 _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            _3772 = fma(_2153, _3760.z, fma(_2152, _3760.y, _3760.x * _2151)) + _3760.w;
                            _3773 = !((fma(_2153, _3741.z, fma(_2152, _3741.y, _3741.x * _2151)) + _3741.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3773)
                            {
                                float _3800 = _3668.x - _2151;
                                float _3801 = _3668.y - _2152;
                                float _3802 = _3668.z - _2153;
                                float _3803 = dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802));
                                float _3806 = inversesqrt(_3803);
                                float _3807 = _3806 * _3800;
                                float _3808 = _3806 * _3801;
                                float _3809 = _3806 * _3802;
                                float _3813 = 1.0 - (_3803 / (_3669 * _3669));
                                float _4971 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3818 = sqrt(_3803) * _3684.w;
                                float _3820 = 1.39999997615814208984375 / (_3818 + 1.39999997615814208984375);
                                float _3821 = _3820 * _3820;
                                float _3824 = ((1.0 - _3821) * dot(vec3(_3807, _3808, _3809), vec3(_1022, _1025, _1028))) + _3821;
                                float _3827 = _3818 * _3818;
                                float _3831 = (fma(_2153, _3711.z, fma(_2152, _3711.y, _3711.x * _2151)) + _3711.w) / _3772;
                                float _3832 = (fma(_2153, _3726.z, fma(_2152, _3726.y, _3726.x * _2151)) + _3726.w) / _3772;
                                float _3836 = 1.0 - dot(vec2(_3831, _3832), vec2(_3831, _3832));
                                float _4987 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3838 = _3837 * (((isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0))) * _3814) / ((_3827 * 0.699999988079071044921875) + 1.0));
                                float _3850 = exp2(log2(1.0 / ((_3827 * 3.5) + 5.0)) * 0.25);
                                float _3851 = 1.0 - _1097;
                                float _3858 = sqrt(1.0 - ((1.0 - (_3851 * _3851)) * (1.0 - (_3850 * _3850))));
                                float _3859 = _3858 * _3858;
                                float _3860 = _3859 * _3859;
                                float _3861 = _3807 - _3311;
                                float _3862 = _3808 - _3312;
                                float _3863 = _3809 - _3313;
                                float _3867 = inversesqrt(dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863)));
                                float _3871 = dot(vec3(_1022, _1025, _1028), vec3((-0.0) - _3311, (-0.0) - _3312, (-0.0) - _3313));
                                float _4998 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3874 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3875 = dot(vec3(_1022, _1025, _1028), vec3(_3867 * _3861, _3867 * _3862, _3867 * _3863));
                                float _5009 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3882 = ((_3878 * _3878) * (_3860 + (-1.0))) + 1.0;
                                float _3883 = _3820 * _3859;
                                float _3884 = _3883 * _3883;
                                float _3890 = ((1.0 - _3884) * dot(vec3(_1022, _1025, _1028), vec3(_3807, _3808, _3809))) + _3884;
                                float _5020 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3892 = 1.0 - _3859;
                                float _3902 = (0.5 / (((_3891 * ((_3874 * _3892) + _3859)) + 9.9999999392252902907785028219223e-09) + (((_3891 * _3892) + _3859) * _3874))) * _3891;
                                float _5031 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3912 = (_3837 * _3814) * (((_3860 * 3.1415927410125732421875) * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) / ((_3882 * _3882) * ((_3827 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3838 * _3684.y;
                                frontier_phi_78_pred_1 = _3838 * _3684.x;
                                frontier_phi_78_pred_2 = _3912 * _3696.z;
                                frontier_phi_78_pred_3 = _3912 * _3696.y;
                                frontier_phi_78_pred_4 = _3912 * _3696.x;
                                frontier_phi_78_pred_5 = _3838 * _3684.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3920 = frontier_phi_78_pred;
                            _3919 = frontier_phi_78_pred_1;
                            _3918 = frontier_phi_78_pred_2;
                            _3917 = frontier_phi_78_pred_3;
                            _3916 = frontier_phi_78_pred_4;
                            _3921 = frontier_phi_78_pred_5;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            if (_3643 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3643;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3628;
                        frontier_phi_72_pred_1 = _3627;
                        frontier_phi_72_pred_2 = _3626;
                        frontier_phi_72_pred_3 = _3625;
                        frontier_phi_72_pred_4 = _3624;
                        frontier_phi_72_pred_5 = _3623;
                    }
                    _3296 = frontier_phi_72_pred;
                    _3294 = frontier_phi_72_pred_1;
                    _3292 = frontier_phi_72_pred_2;
                    _3290 = frontier_phi_72_pred_3;
                    _3288 = frontier_phi_72_pred_4;
                    _3286 = frontier_phi_72_pred_5;
                    uint _3431 = _3430 + 1u;
                    if (_3431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3424 = _3286;
                        _3425 = _3288;
                        _3426 = _3290;
                        _3427 = _3292;
                        _3428 = _3294;
                        _3429 = _3296;
                        _3430 = _3431;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3296;
                frontier_phi_60_61_ladder_1 = _3294;
                frontier_phi_60_61_ladder_2 = _3290;
                frontier_phi_60_61_ladder_3 = _3288;
                frontier_phi_60_61_ladder_4 = _3286;
                frontier_phi_60_61_ladder_5 = _3292;
            }
            else
            {
                frontier_phi_60_61_ladder = _3182;
                frontier_phi_60_61_ladder_1 = _3180;
                frontier_phi_60_61_ladder_2 = _3176;
                frontier_phi_60_61_ladder_3 = _3174;
                frontier_phi_60_61_ladder_4 = _3172;
                frontier_phi_60_61_ladder_5 = _3178;
            }
            _3285 = frontier_phi_60_61_ladder_4;
            _3287 = frontier_phi_60_61_ladder_3;
            _3289 = frontier_phi_60_61_ladder_2;
            _3291 = frontier_phi_60_61_ladder_5;
            _3293 = frontier_phi_60_61_ladder_1;
            _3295 = frontier_phi_60_61_ladder;
        }
        float _3300 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _3105 = (_3300 * _3291) + _2617;
        _3107 = (_3300 * _3293) + _2619;
        _3109 = (_3300 * _3295) + _2621;
        _3111 = ((_3285 * _1066) * _3300) + _2955;
        _3113 = ((_3287 * _1068) * _3300) + _2957;
        _3115 = ((_3289 * _1069) * _3300) + _2959;
    }
    else
    {
        _3105 = _2617;
        _3107 = _2619;
        _3109 = _2621;
        _3111 = _2955;
        _3113 = _2957;
        _3115 = _2959;
    }
    float _5047 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _5058 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _5069 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    uint _3135 = _1041 + 6u;
    float _3143 = _1003 / cbSceneParam._m0[86u].x;
    float _3144 = _1004 / cbSceneParam._m0[86u].y;
    vec4 _3158 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3143, _3144, (log2((isnan(cbSceneParam._m0[77u].w) ? _938 : (isnan(_938) ? cbSceneParam._m0[77u].w : min(_938, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3160 = _3158.x;
    float _3161 = _3158.y;
    float _3162 = _3158.z;
    float _3163 = _3158.w;
    float _3235;
    float _3237;
    float _3239;
    float _3241;
    if (_938 > cbSceneParam._m0[78u].w)
    {
        float _3197 = isnan(_938) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _938 : min(cbSceneParam._m0[80u].w, _938));
        float _3198 = _3197 / _938;
        float _3209 = _3198 * _988;
        float _3210 = _989 * _3198;
        float _3211 = (-0.0) - _3210;
        float _3213 = _3198 * _990;
        float _3215 = (cbSceneParam._m0[77u].w * _3211) / _3197;
        float _3216 = _3215 + cbSceneParam._m0[79u].w;
        float _3217 = cbSceneParam._m0[79u].w - _3210;
        float _3223 = sqrt(((_3209 * _3209) + (_3210 * _3210)) + (_3213 * _3213));
        float _3226 = (1.0 - (cbSceneParam._m0[77u].w / _3197)) * _3223;
        float _3231 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3233 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3386;
        if (abs((_3211 - _3215) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3386 = ((((_3216 > 0.0) ? exp2(_3231 * _3216) : (2.0 - exp2(_3233 * _3216))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3226;
        }
        else
        {
            float _3346 = 1.0 / cbSceneParam._m0[80u].x;
            float _3347 = isnan(_3217) ? _3216 : (isnan(_3216) ? _3217 : max(_3216, _3217));
            float _3348 = isnan(_3217) ? _3216 : (isnan(_3216) ? _3217 : min(_3216, _3217));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            _3386 = ((abs(_3223 / _3211) * cbSceneParam._m0[80u].y) * ((((_3357 - _3358) * 2.0) - ((exp2(_3231 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0)))) - exp2(_3231 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))))) * _3346)) - ((exp2(_3233 * _3357) - exp2(_3233 * _3358)) * _3346))) + (_3226 * cbSceneParam._m0[80u].z);
        }
        vec4 _3388 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3143, _3144, 1.0), 0.0);
        float _3397 = exp2((_3386 * (-1.44269502162933349609375)) * (1.0 - _3388.w));
        float _3398 = log2(_3397);
        float _3414 = log2(_3163);
        _3235 = (exp2(_3414 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].x)) * _3388.x) / cbSceneParam._m0[78u].x)) + _3160;
        _3237 = (exp2(_3414 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].y)) * _3388.y) / cbSceneParam._m0[78u].y)) + _3161;
        _3239 = (exp2(_3414 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].z)) * _3388.z) / cbSceneParam._m0[78u].z)) + _3162;
        _3241 = _3397 * _3163;
    }
    else
    {
        _3235 = _3160;
        _3237 = _3161;
        _3239 = _3162;
        _3241 = _3163;
    }
    float _3253 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3254 = _3253 == 3.0;
    float _3255 = log2(_3241);
    float _3262 = exp2(_3255 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3105 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1081))) + ((_3111 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1885)) * cbPerFrame._m0[3u].x));
    float _3263 = exp2(_3255 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3107 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1081))) + ((_3113 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1885)) * cbPerFrame._m0[3u].x));
    float _3264 = exp2(_3255 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3109 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1081))) + ((_3115 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1885)) * cbPerFrame._m0[3u].x));
    float _3273 = (_3253 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3273 * (_3254 ? _3262 : (_3262 + (cbSceneParam._m0[72u].w * _3235)));
    SV_Target.y = _3273 * (_3254 ? _3263 : (_3263 + (cbSceneParam._m0[72u].w * _3237)));
    SV_Target.z = _3273 * (_3254 ? _3264 : (_3264 + (cbSceneParam._m0[72u].w * _3239)));
    SV_Target.w = cbInstanceData._m0[_3135].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3135].w;
}


