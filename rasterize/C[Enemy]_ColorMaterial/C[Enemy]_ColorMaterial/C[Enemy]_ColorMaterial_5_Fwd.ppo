#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1561;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _311 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _315 = _311.z;
    float _328 = exp2(log2((1.0 - _315) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _346 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _358 = exp2(log2(_346.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0));
    float _369 = exp2(log2(cbMtdParam._m0[23u].y * _315) * cbMtdParam._m0[22u].y);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0));
    vec4 _383 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _386 = _383.y;
    float _389 = (_383.x + (-0.02500000037252902984619140625)) * 8.0;
    float _393 = roundEven(5.0 - _389);
    float _394 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _395 = isnan(4.0) ? _394 : (isnan(_394) ? 4.0 : min(_394, 4.0));
    float _408 = floor(_395);
    vec4 _411 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _408));
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = cbMtdParam._m0[17u].x;
    _205[0u] = cbMtdParam._m0[17u].y;
    _206[0u] = cbMtdParam._m0[17u].z;
    _204[1u] = cbMtdParam._m0[15u].x;
    _205[1u] = cbMtdParam._m0[15u].y;
    _206[1u] = cbMtdParam._m0[15u].z;
    _204[2u] = cbMtdParam._m0[14u].x;
    _205[2u] = cbMtdParam._m0[14u].y;
    _206[2u] = cbMtdParam._m0[14u].z;
    _204[3u] = cbMtdParam._m0[13u].x;
    _205[3u] = cbMtdParam._m0[13u].y;
    _206[3u] = cbMtdParam._m0[13u].z;
    _204[4u] = cbMtdParam._m0[12u].x;
    _205[4u] = cbMtdParam._m0[12u].y;
    _206[4u] = cbMtdParam._m0[12u].z;
    _204[5u] = cbMtdParam._m0[18u].x;
    _205[5u] = cbMtdParam._m0[18u].y;
    _206[5u] = cbMtdParam._m0[18u].z;
    float _475 = roundEven(_389);
    float _476 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    uint _478 = uint(int(isnan(5.0) ? _476 : (isnan(_476) ? 5.0 : min(_476, 5.0))));
    vec4 _508 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _519 = cbMtdParam._m0[9u].x * _508.x;
    float _520 = cbMtdParam._m0[9u].y * _508.y;
    float _521 = cbMtdParam._m0[9u].z * _508.z;
    float _528 = ((((((_204[_478] - cbMtdParam._m0[10u].x) * _386) + cbMtdParam._m0[10u].x) * _411.x) - _519) * _371) + _519;
    float _529 = ((((((_205[_478] - cbMtdParam._m0[10u].y) * _386) + cbMtdParam._m0[10u].y) * _411.y) - _520) * _371) + _520;
    float _530 = ((((((_206[_478] - cbMtdParam._m0[10u].z) * _386) + cbMtdParam._m0[10u].z) * _411.z) - _521) * _371) + _521;
    float _536 = exp2(log2(_311.w) * cbMtdParam._m0[23u].w);
    vec4 _549 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _568 = (((cbMtdParam._m0[16u].x * _549.x) - _528) * _536) + _528;
    float _569 = (((cbMtdParam._m0[16u].y * _549.y) - _529) * _536) + _529;
    float _570 = (((cbMtdParam._m0[16u].z * _549.z) - _530) * _536) + _530;
    vec4 _583 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _603 = (((cbMtdParam._m0[19u].x * _583.x) - _568) * _360) + _568;
    float _604 = (((cbMtdParam._m0[19u].y * _583.y) - _569) * _360) + _569;
    float _605 = (((cbMtdParam._m0[19u].z * _583.z) - _570) * _360) + _570;
    vec4 _617 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _642 = (_346.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _617.x) - _603) * _330) + _603);
    float _644 = (_346.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _617.y) - _604) * _330) + _604);
    float _646 = (_346.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _617.z) - _605) * _330) + _605);
    vec4 _658 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _676 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _678 = _676 * (cbMtdParam._m0[24u].z + 1.0);
    float _3934 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _686 = (_679 * ((cbMtdParam._m0[11u].x * _658.x) - _642)) + _642;
    float _687 = (((cbMtdParam._m0[11u].y * _658.y) - _644) * _679) + _644;
    float _688 = (((cbMtdParam._m0[11u].z * _658.z) - _646) * _679) + _646;
    float _692 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _700 = (_692 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _692))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3945 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _708 = ((cbMtdParam._m0[21u].x - _686) * _701) + _686;
    float _709 = ((cbMtdParam._m0[21u].y - _687) * _701) + _687;
    float _710 = ((cbMtdParam._m0[21u].z - _688) * _701) + _688;
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[28u].w;
    _200[0u] = cbMtdParam._m0[29u].x;
    _199[1u] = cbMtdParam._m0[30u].w;
    _200[1u] = cbMtdParam._m0[31u].x;
    _199[2u] = cbMtdParam._m0[30u].y;
    _200[2u] = cbMtdParam._m0[30u].z;
    _199[3u] = cbMtdParam._m0[29u].w;
    _200[3u] = cbMtdParam._m0[30u].x;
    _199[4u] = cbMtdParam._m0[29u].y;
    _200[4u] = cbMtdParam._m0[29u].z;
    float _750 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    uint _752 = uint(int(isnan(4.0) ? _750 : (isnan(_750) ? 4.0 : min(_750, 4.0))));
    float _759 = ((_200[_752] - cbMtdParam._m0[22u].z) * _371) + cbMtdParam._m0[22u].z;
    float _762 = ((cbMtdParam._m0[22u].w - _759) * _536) + _759;
    float _765 = ((cbMtdParam._m0[25u].x - _762) * _360) + _762;
    float _768 = ((cbMtdParam._m0[26u].x - _765) * _330) + _765;
    float _773 = (cbMtdParam._m0[24u].y + 1.0) * _676;
    float _3966 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _776 = _768 - (_768 * _774);
    float _778 = _776 - (_776 * _692);
    vec4 _791 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _408));
    vec4 _808 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _810 = _808.x;
    float _811 = _808.y;
    float _816 = cbMtdParam._m0[22u].x + _808.z;
    float _819 = (((_791.z + _199[_752]) - _816) * _371) + _816;
    vec4 _831 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _842 = (((_831.z - _819) + cbMtdParam._m0[28u].y) * _536) + _819;
    float _848 = ((((_315 * 2.0) * _842) - _842) * cbMtdParam._m0[24u].w) + _842;
    vec4 _860 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _871 = (((cbMtdParam._m0[23u].z + _860.z) - _848) * _360) + _848;
    vec4 _884 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _895 = (((_884.z - _871) + cbMtdParam._m0[26u].y) * _330) + _871;
    vec4 _907 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _919 = ((_907.z - _895) * _774) + _895;
    vec4 _934 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _948 = ((cbMtdParam._m0[27u].y * _692) * ((_934.z * cbMtdParam._m0[27u].x) - _919)) + _919;
    float _963 = ((_791.x - _810) * _371) + _810;
    float _964 = ((_791.y - _811) * _371) + _811;
    float _969 = ((_831.x - _963) * _536) + _963;
    float _970 = ((_831.y - _964) * _536) + _964;
    float _975 = ((_860.x - _969) * _360) + _969;
    float _976 = ((_860.y - _970) * _360) + _970;
    float _985 = ((((_884.x - _975) * _330) + _975) * 2.0) + (-1.0);
    float _986 = ((((_884.y - _976) * _330) + _976) * 2.0) + (-1.0);
    float _987 = dot(vec2(_985, _986), vec2(_985, _986));
    float _3977 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _992 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    float _1008 = (((cbMtdParam._m0[25u].y * ((_311.x * 2.0) + (-1.0))) + _985) + (((((_907.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _774)) + ((((_934.x * 2.0) + (-1.0)) * _692) * cbMtdParam._m0[26u].w);
    float _1009 = (((cbMtdParam._m0[25u].y * ((_311.y * 2.0) + (-1.0))) + _986) + (((((_907.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _774)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_934.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1012 = fma(_992, _241 * NORMAL.x, fma(_1009, _248 * TANGENT.x, (_234 * _226) * _1008));
    float _1015 = fma(_992, _241 * NORMAL.y, fma(_1009, _248 * TANGENT.y, (_234 * _227) * _1008));
    float _1018 = fma(_992, _241 * NORMAL.z, fma(_1009, _248 * TANGENT.z, (_234 * _228) * _1008));
    float _1022 = inversesqrt(dot(vec3(_1012, _1015, _1018), vec3(_1012, _1015, _1018)));
    float _1023 = _1022 * _1012;
    float _1024 = _1022 * _1015;
    float _1025 = _1022 * _1018;
    float _3988 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _1026 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4010 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4021 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4032 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _1030 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1046 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1096 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1086);
    float _1097 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1086);
    float _1098 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1086);
    float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
    float _1103 = _1096 * _1102;
    float _1104 = _1097 * _1102;
    float _1105 = _1098 * _1102;
    float _1111 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1112 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1130 = fma(_1025, cbSceneParam._m0[5u].z, fma(_1024, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1023));
    float _1133 = fma(_1025, cbSceneParam._m0[6u].z, fma(_1024, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1023));
    float _1136 = fma(_1025, cbSceneParam._m0[7u].z, fma(_1024, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1023));
    uint _1149 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1151 = (_1149 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1157 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1151].x;
    float _1158 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1151].y;
    float _1159 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1151].z;
    float _4043 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1163 = 1.0 - _1030;
    float _1164 = _1160 * _1163;
    float _1165 = _1161 * _1163;
    float _1166 = _1162 * _1163;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1030;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1030;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1030;
    float _1174 = _1171 + 0.039999999105930328369140625;
    float _1176 = _1172 + 0.039999999105930328369140625;
    float _1177 = _1173 + 0.039999999105930328369140625;
    vec4 _1186 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1111, cbSceneParam._m0[86u].y * _1112));
    float _1189 = _1186.x * TEXCOORD_3.w;
    float _1190 = dot(vec3(_1023, _1024, _1025), vec3(_1103, _1104, _1105));
    float _1193 = _1190 * 2.0;
    float _1197 = (_1193 * _1023) - _1103;
    float _1198 = (_1193 * _1024) - _1104;
    float _1199 = (_1193 * _1025) - _1105;
    float _1203 = abs(dot(vec3(_1103, _1104, _1105), vec3(_1023, _1024, _1025)));
    float _4076 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1205 = sqrt(_1026);
    float _1216 = exp2((_1205 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1205 * 3.0));
    float _1222 = (1.0 - _1216) * ((_1205 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1223 = _1216 * _1205;
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1560;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1285 = fma(_1259, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251));
        float _1289 = fma(_1259, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251));
        float _1293 = fma(_1259, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251));
        float _1318 = _1251 + _1023;
        float _1319 = _1255 + _1024;
        float _1320 = _1259 + _1025;
        float _1330 = fma(_1320, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1318)) - _1285;
        float _1331 = fma(_1320, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1318)) - _1289;
        float _1332 = fma(_1320, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1318)) - _1293;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1285 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1289 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[34u].z) + ((((((_1293 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1388 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1354.x + (-0.5));
        float _1390 = _1388 * (_1354.y + (-0.5));
        float _1391 = _1388 * (_1354.z + (-0.5));
        float _1398 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1361.x + (-0.5));
        float _1400 = _1398 * (_1361.y + (-0.5));
        float _1401 = _1398 * (_1361.z + (-0.5));
        float _1408 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1368.x + (-0.5));
        float _1410 = _1408 * (_1368.y + (-0.5));
        float _1411 = _1408 * (_1368.z + (-0.5));
        float _1418 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1375.x + (-0.5));
        float _1420 = _1418 * (_1375.y + (-0.5));
        float _1421 = _1418 * (_1375.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1442 = (dot(vec3(_1023, _1024, _1025), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1452 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4124 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1454 + 1.0))) + _1459) * _1422;
        float _1469 = _1390 * 0.5;
        float _1470 = _1400 * 0.5;
        float _1471 = _1410 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_1023, _1024, _1025), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4157 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1496 + 1.0))) + _1501) * _1423;
        float _1511 = _1391 * 0.5;
        float _1512 = _1401 * 0.5;
        float _1513 = _1411 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_1023, _1024, _1025), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4190 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1538 + 1.0))) + _1543) * _1424;
        _1560 = _1391;
        _1562 = _1390;
        _1563 = _1389;
        _1564 = _1401;
        _1565 = _1400;
        _1566 = _1399;
        _1567 = _1411;
        _1568 = _1410;
        _1569 = _1409;
        _1570 = _1424;
        _1571 = _1423;
        _1572 = _1422;
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1561;
        _1562 = _1561;
        _1563 = _1561;
        _1564 = _1561;
        _1565 = _1561;
        _1566 = _1561;
        _1567 = _1561;
        _1568 = _1561;
        _1569 = _1561;
        _1570 = _1561;
        _1571 = _1561;
        _1572 = _1561;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1598 = fma(_1259, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251));
        float _1602 = fma(_1259, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251));
        float _1606 = fma(_1259, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251));
        float _1629 = _1251 + _1023;
        float _1630 = _1255 + _1024;
        float _1631 = _1259 + _1025;
        float _1641 = fma(_1631, cbModelParam._m0[30u].z, fma(_1630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1629)) - _1598;
        float _1642 = fma(_1631, cbModelParam._m0[31u].z, fma(_1630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1629)) - _1602;
        float _1643 = fma(_1631, cbModelParam._m0[32u].z, fma(_1630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1629)) - _1606;
        float _1647 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
        float _1660 = ((_1647 * _1641) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1598 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1647 * _1642) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1602 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1647 * _1643) / cbModelParam._m0[35u].z) + ((((((_1606 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        float _1697 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1664.x + (-0.5));
        float _1699 = _1697 * (_1664.y + (-0.5));
        float _1700 = _1697 * (_1664.z + (-0.5));
        float _1707 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1671.x + (-0.5));
        float _1709 = _1707 * (_1671.y + (-0.5));
        float _1710 = _1707 * (_1671.z + (-0.5));
        float _1717 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1678.x + (-0.5));
        float _1719 = _1717 * (_1678.y + (-0.5));
        float _1720 = _1717 * (_1678.z + (-0.5));
        float _1727 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1685.x + (-0.5));
        float _1729 = _1727 * (_1685.y + (-0.5));
        float _1730 = _1727 * (_1685.z + (-0.5));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = _1698 * 0.5;
        float _1735 = _1708 * 0.5;
        float _1736 = _1718 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_1023, _1024, _1025), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4253 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1761 + 1.0))) + _1766) * _1731;
        float _1776 = _1699 * 0.5;
        float _1777 = _1709 * 0.5;
        float _1778 = _1719 * 0.5;
        float _1779 = dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778));
        float _1784 = (_1779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1779);
        float _1792 = (dot(vec3(_1023, _1024, _1025), vec3(_1784 * _1776, _1784 * _1777, _1784 * _1778)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1801 = sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1803 = _1802 * 2.0;
        float _1807 = (1.0 - _1802) / (_1802 + 1.0);
        float _4286 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1817 = ((((1.0 - _1808) * (_1803 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1803 + 1.0))) + _1808) * _1732;
        float _1818 = _1700 * 0.5;
        float _1819 = _1710 * 0.5;
        float _1820 = _1720 * 0.5;
        float _1821 = dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820));
        float _1826 = (_1821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1821);
        float _1834 = (dot(vec3(_1023, _1024, _1025), vec3(_1826 * _1818, _1826 * _1819, _1826 * _1820)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1845 = _1844 * 2.0;
        float _1849 = (1.0 - _1844) / (_1844 + 1.0);
        float _4319 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1859 = ((((1.0 - _1850) * (_1845 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1845 + 1.0))) + _1850) * _1733;
        _1867 = _1700;
        _1868 = _1699;
        _1869 = _1698;
        _1870 = _1710;
        _1871 = _1709;
        _1872 = _1708;
        _1873 = _1720;
        _1874 = _1719;
        _1875 = _1718;
        _1876 = _1733;
        _1877 = _1732;
        _1878 = _1731;
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)));
    }
    else
    {
        _1867 = _1561;
        _1868 = _1561;
        _1869 = _1561;
        _1870 = _1561;
        _1871 = _1561;
        _1872 = _1561;
        _1873 = _1561;
        _1874 = _1561;
        _1875 = _1561;
        _1876 = _1561;
        _1877 = _1561;
        _1878 = _1561;
        _1879 = 0.0;
        _1880 = 0.0;
        _1881 = 0.0;
    }
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1573)) + _1573;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1574)) + _1574;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1575)) + _1575;
    float _1914 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1891));
    float _1935 = _1197 * 0.5;
    float _1936 = _1198 * 0.5;
    float _1937 = _1199 * 0.5;
    float _1938 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1941 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1944 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1978;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1951 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1560, _1564, _1567, _1570));
        float _1955 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1959 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1966 = dot(vec4(cbModelParam._m0[39u]), vec4(_1935, _1936, _1937, 1.0));
        _1978 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1978 = 1.0;
    }
    float _1989;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1980 = dot(vec4(cbModelParam._m0[40u]), vec4(_1935, _1936, _1937, 1.0));
        _1989 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1989 = 1.0;
    }
    float _1993 = (_1989 * cbModelParam._m0[1u].x) + (_1978 * (1.0 - cbModelParam._m0[1u].x));
    float _2003 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1026);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2003 : min(cbModelParam._m0[25u].z, _2003));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2051 = fma(_1259, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251)) + cbModelParam._m0[13u].w;
        float _2055 = fma(_1259, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251)) + cbModelParam._m0[14u].w;
        float _2059 = fma(_1259, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251)) + cbModelParam._m0[15u].w;
        float _2062 = fma(_1199, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197));
        float _2065 = fma(_1199, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197));
        float _2068 = fma(_1199, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197));
        float _2096;
        if (_2062 > 0.0)
        {
            _2096 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2096 = frontier_phi_14_12_ladder;
        }
        float _2298;
        if (_2065 > 0.0)
        {
            _2298 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2298 = frontier_phi_23_19_ladder;
        }
        float _2552;
        if (_2068 > 0.0)
        {
            _2552 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2552 = frontier_phi_35_30_ladder;
        }
        float _2554 = isnan(_2298) ? _2096 : (isnan(_2096) ? _2298 : min(_2096, _2298));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _2062) + _2051;
        float _2560 = (_2555 * _2065) + _2055;
        float _2561 = (_2555 * _2068) + _2059;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _2004);
            frontier_phi_13_35_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2084 = frontier_phi_13_35_ladder_2;
        _2086 = frontier_phi_13_35_ladder_1;
        _2088 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1197, _1198, _1199), _2004);
        _2084 = _2072.x * cbModelParam._m0[1u].y;
        _2086 = _2072.y * cbModelParam._m0[1u].y;
        _2088 = _2072.z * cbModelParam._m0[1u].y;
    }
    float _2092 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1026);
    float _2093 = isnan(_2092) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2092 : min(cbModelParam._m0[25u].w, _2092));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2146 = fma(_1259, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251)) + cbModelParam._m0[21u].w;
        float _2150 = fma(_1259, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251)) + cbModelParam._m0[22u].w;
        float _2154 = fma(_1259, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251)) + cbModelParam._m0[23u].w;
        float _2157 = fma(_1199, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197));
        float _2160 = fma(_1199, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197));
        float _2163 = fma(_1199, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197));
        float _2303;
        if (_2157 > 0.0)
        {
            _2303 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2303 = frontier_phi_25_21_ladder;
        }
        float _2579;
        if (_2160 > 0.0)
        {
            _2579 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2579 = frontier_phi_37_32_ladder;
        }
        float _2792;
        if (_2163 > 0.0)
        {
            _2792 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2792 = frontier_phi_46_43_ladder;
        }
        float _2794 = isnan(_2579) ? _2303 : (isnan(_2303) ? _2579 : min(_2303, _2579));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2157) + _2146;
        float _2800 = (_2795 * _2160) + _2150;
        float _2801 = (_2795 * _2163) + _2154;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2093);
            frontier_phi_22_46_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2182 = frontier_phi_22_46_ladder_2;
        _2184 = frontier_phi_22_46_ladder_1;
        _2186 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1197, _1198, _1199), _2093);
        _2182 = _2166.x * cbModelParam._m0[1u].z;
        _2184 = _2166.y * cbModelParam._m0[1u].z;
        _2186 = _2166.z * cbModelParam._m0[1u].z;
    }
    float _2199 = (((_1222 * _1174) + _1223) * _1189) * ((cbModelParam._m0[1u].w * (_2182 - _2084)) + _2084);
    float _2201 = (((_1222 * _1176) + _1223) * _1189) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2203 = (((_1222 * _1177) + _1223) * _1189) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2199 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2199 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2199 * cbSceneParam._m0[91u].x));
    uvec4 _2222 = floatBitsToUint(cbInstanceData._m0[_1149 + 5u]);
    uint _2224 = _2222.x * 14u;
    uint _2225 = _2224 + 13u;
    float _2232 = _1189 + (-1.0);
    float _2237 = (cbLight._m0[_2225].x * _2232) + 1.0;
    float _2238 = (cbLight._m0[_2225].y * _2232) + 1.0;
    float _2239 = (cbLight._m0[_2225].z * _2232) + 1.0;
    float _2240 = (cbLight._m0[_2225].w * _2232) + 1.0;
    uint _2241 = _2224 + 5u;
    float _2247 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2251 = _2224 + 4u;
    float _2257 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2261 = _2224 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_1023, _1024, _1025));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_1023, _1024, _1025));
    float _4455 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4466 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2241].x * _2247) * _2282) + ((cbLight._m0[_2251].x * _2257) * _2280);
    float _2290 = ((_2247 * cbLight._m0[_2241].y) * _2282) + ((_2257 * cbLight._m0[_2251].y) * _2280);
    float _2291 = ((_2247 * cbLight._m0[_2241].z) * _2282) + ((_2257 * cbLight._m0[_2251].z) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2224 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2297)
    {
        _2308 = _2289;
        _2310 = _2290;
        _2312 = _2291;
    }
    else
    {
        uint _2316 = _2224 + 6u;
        float _2332 = (dot(vec3(cbLight._m0[_2224 + 2u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2333 = _2332 * _2332;
        float _4477 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2334 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2335 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2308 = (((cbLight._m0[_2316].x * 0.3183098733425140380859375) * _2334) * _2335) + _2289;
        _2310 = (((cbLight._m0[_2316].y * 0.3183098733425140380859375) * _2334) * _2335) + _2290;
        _2312 = (((cbLight._m0[_2316].z * 0.3183098733425140380859375) * _2334) * _2335) + _2291;
    }
    bool _2315 = _2295.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2315)
    {
        _2353 = _2308;
        _2355 = _2310;
        _2357 = _2312;
    }
    else
    {
        uint _2523 = _2224 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2224 + 3u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4493 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2542 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2353 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2308;
        _2355 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2310;
        _2357 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2312;
    }
    uint _2360 = _2224 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _1026) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2224].x + _1103;
    float _2376 = cbLight._m0[_2224].y + _1104;
    float _2377 = cbLight._m0[_2224].z + _1105;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2224].xyz));
    float _4509 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _4520 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _2389 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2390 = dot(vec3(_1023, _1024, _1025), vec3(_2382, _2383, _2384));
    float _4531 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2382, _2383, _2384));
    float _4542 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
    float _2411 = 0.959999978542327880859375 - _1171;
    float _2413 = 0.959999978542327880859375 - _1172;
    float _2414 = 0.959999978542327880859375 - _1173;
    float _2421 = 1.0 - _2374;
    float _2432 = (0.5 / (((_2389 * ((_2388 * _2421) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2421) + _2374) * _2388))) * _2388;
    float _4553 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2445 = _2224 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _1026) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2261].x + _1103;
    float _2459 = cbLight._m0[_2261].y + _1104;
    float _2460 = cbLight._m0[_2261].z + _1105;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2261].xyz));
    float _4564 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2472 = dot(vec3(_1023, _1024, _1025), vec3(_2465, _2466, _2467));
    float _4575 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2465, _2466, _2467));
    float _4586 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2389 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2498) + _2457) * _2471))) * _2471;
    float _4597 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2411) + _1174) * cbLight._m0[_2445].x) * _2510) * _2247) + (((((_2410 * _2411) + _1174) * cbLight._m0[_2360].x) * _2434) * _2257);
    float _2521 = (((((_2491 * _2413) + _1176) * cbLight._m0[_2445].y) * _2510) * _2247) + (((((_2410 * _2413) + _1176) * cbLight._m0[_2360].y) * _2434) * _2257);
    float _2522 = (((((_2491 * _2414) + _1177) * cbLight._m0[_2445].z) * _2510) * _2247) + (((((_2410 * _2414) + _1177) * cbLight._m0[_2360].z) * _2434) * _2257);
    float _2584;
    float _2586;
    float _2588;
    if (_2297)
    {
        _2584 = _2520;
        _2586 = _2521;
        _2588 = _2522;
    }
    else
    {
        uint _2590 = _2224 + 2u;
        uint _2594 = _2224 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _1026) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _1103;
        float _2611 = cbLight._m0[_2590].y + _1104;
        float _2612 = cbLight._m0[_2590].z + _1105;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2590].xyz));
        float _4608 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2624 = dot(vec3(_1023, _1024, _1025), vec3(_2617, _2618, _2619));
        float _4619 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4630 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2389 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2650) + _2609) * _2623))) * _2623;
        float _4641 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2584 = (((((_2643 * _2411) + _1174) * cbLight._m0[_2594].x) * _2662) * _2663) + _2520;
        _2586 = (((((_2643 * _2413) + _1176) * cbLight._m0[_2594].y) * _2662) * _2663) + _2521;
        _2588 = (((((_2643 * _2414) + _1177) * cbLight._m0[_2594].z) * _2662) * _2663) + _2522;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2315)
    {
        _2698 = _2584;
        _2700 = _2586;
        _2702 = _2588;
    }
    else
    {
        uint _2709 = _2224 + 3u;
        uint _2713 = _2224 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _1026) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1103;
        float _2730 = cbLight._m0[_2709].y + _1104;
        float _2731 = cbLight._m0[_2709].z + _1105;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2709].xyz));
        float _4657 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2743 = dot(vec3(_1023, _1024, _1025), vec3(_2736, _2737, _2738));
        float _4668 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4679 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2389 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2769) + _2728) * _2742))) * _2742;
        float _4690 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2698 = (((((_2762 * _2411) + _1174) * cbLight._m0[_2713].x) * _2781) * _2782) + _2584;
        _2700 = (((((_2762 * _2413) + _1176) * cbLight._m0[_2713].y) * _2781) * _2782) + _2586;
        _2702 = (((((_2762 * _2414) + _1177) * cbLight._m0[_2713].z) * _2781) * _2782) + _2588;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2222.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1112) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1111) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            uint _3156 = 0u;
            uint _3165;
            bool _3166;
            for (;;)
            {
                _3165 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                _3166 = _3165 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3166)
                {
                    frontier_phi_61_pred = _3150;
                    frontier_phi_61_pred_1 = _3155;
                    frontier_phi_61_pred_2 = _3154;
                    frontier_phi_61_pred_3 = _3153;
                    frontier_phi_61_pred_4 = _3152;
                    frontier_phi_61_pred_5 = _3151;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3165;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3156 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _2858;
                        float _3341 = _3300.y - _2859;
                        float _3342 = _3300.z - _2860;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_1130, _1133, _1136), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4716 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _2858;
                        float _3376 = (-0.0) - _2859;
                        float _3377 = (-0.0) - _2860;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3392 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3393 = 1.0 - _1205;
                        float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                        float _3401 = _3400 * _3400;
                        float _3402 = _3401 * _3401;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3413 = dot(vec3(_1130, _1133, _1136), vec3(_3382, _3383, _3384));
                        float _4732 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3417 = dot(vec3(_1130, _1133, _1136), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                        float _4743 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                        float _3425 = _3360 * _3401;
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3350) + _3426;
                        float _4754 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3431 = 1.0 - _3401;
                        float _3441 = (0.5 / (((_3430 * ((_3416 * _3431) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3401) * _3416))) * _3430;
                        float _4765 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3452 = (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) / ((_3424 * _3424) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3209 = (_3371 * _3319.x) + _3277;
                        _3210 = (_3371 * _3319.y) + _3278;
                        _3211 = (_3371 * _3319.z) + _3279;
                        _3206 = (_3452 * _3336.x) + _3274;
                        _3207 = (_3452 * _3336.y) + _3275;
                        _3208 = (_3452 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_61_pred = _3206;
                    frontier_phi_61_pred_1 = _3211;
                    frontier_phi_61_pred_2 = _3210;
                    frontier_phi_61_pred_3 = _3209;
                    frontier_phi_61_pred_4 = _3208;
                    frontier_phi_61_pred_5 = _3207;
                }
                _3006 = frontier_phi_61_pred;
                _3016 = frontier_phi_61_pred_1;
                _3014 = frontier_phi_61_pred_2;
                _3012 = frontier_phi_61_pred_3;
                _3010 = frontier_phi_61_pred_4;
                _3008 = frontier_phi_61_pred_5;
                uint _3157 = _3156 + 1u;
                if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3150 = _3006;
                    _3151 = _3008;
                    _3152 = _3010;
                    _3153 = _3012;
                    _3154 = _3014;
                    _3155 = _3016;
                    _3156 = _3157;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((4294967295u << _3022) & _2904) == 0u)
        {
            _3118 = _3005;
            _3120 = _3007;
            _3122 = _3009;
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
        }
        else
        {
            float _3143 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3144 = _3143 * _2858;
            float _3145 = _3143 * _2859;
            float _3146 = _3143 * _2860;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3257 = _3005;
                float _3258 = _3007;
                float _3259 = _3009;
                float _3260 = _3011;
                float _3261 = _3013;
                float _3262 = _3015;
                uint _3263 = _3022;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3273)
                    {
                        frontier_phi_67_pred = _3260;
                        frontier_phi_67_pred_1 = _3261;
                        frontier_phi_67_pred_2 = _3262;
                        frontier_phi_67_pred_3 = _3259;
                        frontier_phi_67_pred_4 = _3258;
                        frontier_phi_67_pred_5 = _3257;
                    }
                    else
                    {
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        float _3472 = _3259;
                        float _3473 = _3260;
                        float _3474 = _3261;
                        float _3475 = _3262;
                        uint _3476 = _3272;
                        uint _3477;
                        vec4 _3502;
                        float _3503;
                        vec4 _3518;
                        vec3 _3530;
                        vec4 _3545;
                        vec4 _3560;
                        float _3606;
                        bool _3607;
                        for (;;)
                        {
                            uint _3487 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3476));
                            _3477 = (_3476 + 4294967295u) & _3476;
                            uint _3489 = _3487 * 40u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3503 = _3502.w;
                            uint _3505 = (_3487 * 40u) + 4u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3487 * 40u) + 8u;
                            _3530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x));
                            uint _3532 = (_3487 * 40u) + 16u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3487 * 40u) + 20u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3487 * 40u) + 24u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3581 = (_3487 * 40u) + 28u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3606 = fma(_2860, _3594.z, fma(_2859, _3594.y, _3594.x * _2858)) + _3594.w;
                            _3607 = !((fma(_2860, _3575.z, fma(_2859, _3575.y, _3575.x * _2858)) + _3575.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3607)
                            {
                                float _3634 = _3502.x - _2858;
                                float _3635 = _3502.y - _2859;
                                float _3636 = _3502.z - _2860;
                                float _3637 = dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636));
                                float _3640 = inversesqrt(_3637);
                                float _3641 = _3640 * _3634;
                                float _3642 = _3640 * _3635;
                                float _3643 = _3640 * _3636;
                                float _3647 = 1.0 - (_3637 / (_3503 * _3503));
                                float _4776 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3652 = sqrt(_3637) * _3518.w;
                                float _3654 = 1.39999997615814208984375 / (_3652 + 1.39999997615814208984375);
                                float _3655 = _3654 * _3654;
                                float _3658 = ((1.0 - _3655) * dot(vec3(_3641, _3642, _3643), vec3(_1130, _1133, _1136))) + _3655;
                                float _3661 = _3652 * _3652;
                                float _3665 = (fma(_2860, _3545.z, fma(_2859, _3545.y, _3545.x * _2858)) + _3545.w) / _3606;
                                float _3666 = (fma(_2860, _3560.z, fma(_2859, _3560.y, _3560.x * _2858)) + _3560.w) / _3606;
                                float _3670 = 1.0 - dot(vec2(_3665, _3666), vec2(_3665, _3666));
                                float _4792 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3672 = _3671 * (((isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0))) * _3648) / ((_3661 * 0.699999988079071044921875) + 1.0));
                                float _3684 = exp2(log2(1.0 / ((_3661 * 3.5) + 5.0)) * 0.25);
                                float _3685 = 1.0 - _1205;
                                float _3692 = sqrt(1.0 - ((1.0 - (_3685 * _3685)) * (1.0 - (_3684 * _3684))));
                                float _3693 = _3692 * _3692;
                                float _3694 = _3693 * _3693;
                                float _3695 = _3641 - _3144;
                                float _3696 = _3642 - _3145;
                                float _3697 = _3643 - _3146;
                                float _3701 = inversesqrt(dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697)));
                                float _3705 = dot(vec3(_1130, _1133, _1136), vec3((-0.0) - _3144, (-0.0) - _3145, (-0.0) - _3146));
                                float _4803 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3709 = dot(vec3(_1130, _1133, _1136), vec3(_3701 * _3695, _3701 * _3696, _3701 * _3697));
                                float _4814 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3716 = ((_3712 * _3712) * (_3694 + (-1.0))) + 1.0;
                                float _3717 = _3654 * _3693;
                                float _3718 = _3717 * _3717;
                                float _3724 = ((1.0 - _3718) * dot(vec3(_1130, _1133, _1136), vec3(_3641, _3642, _3643))) + _3718;
                                float _4825 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3726 = 1.0 - _3693;
                                float _3736 = (0.5 / (((_3725 * ((_3708 * _3726) + _3693)) + 9.9999999392252902907785028219223e-09) + (((_3725 * _3726) + _3693) * _3708))) * _3725;
                                float _4836 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3746 = (_3671 * _3648) * (((_3694 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3716 * _3716) * ((_3661 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3746 * _3530.x;
                                frontier_phi_73_pred_1 = _3746 * _3530.y;
                                frontier_phi_73_pred_2 = _3672 * _3518.z;
                                frontier_phi_73_pred_3 = _3672 * _3518.y;
                                frontier_phi_73_pred_4 = _3672 * _3518.x;
                                frontier_phi_73_pred_5 = _3746 * _3530.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3750 = frontier_phi_73_pred;
                            _3751 = frontier_phi_73_pred_1;
                            _3755 = frontier_phi_73_pred_2;
                            _3754 = frontier_phi_73_pred_3;
                            _3753 = frontier_phi_73_pred_4;
                            _3752 = frontier_phi_73_pred_5;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            if (_3477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3477;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3460;
                        frontier_phi_67_pred_1 = _3461;
                        frontier_phi_67_pred_2 = _3462;
                        frontier_phi_67_pred_3 = _3459;
                        frontier_phi_67_pred_4 = _3458;
                        frontier_phi_67_pred_5 = _3457;
                    }
                    _3125 = frontier_phi_67_pred;
                    _3127 = frontier_phi_67_pred_1;
                    _3129 = frontier_phi_67_pred_2;
                    _3123 = frontier_phi_67_pred_3;
                    _3121 = frontier_phi_67_pred_4;
                    _3119 = frontier_phi_67_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3119;
                        _3258 = _3121;
                        _3259 = _3123;
                        _3260 = _3125;
                        _3261 = _3127;
                        _3262 = _3129;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3127;
                frontier_phi_55_56_ladder_1 = _3129;
                frontier_phi_55_56_ladder_2 = _3125;
                frontier_phi_55_56_ladder_3 = _3123;
                frontier_phi_55_56_ladder_4 = _3121;
                frontier_phi_55_56_ladder_5 = _3119;
            }
            else
            {
                frontier_phi_55_56_ladder = _3013;
                frontier_phi_55_56_ladder_1 = _3015;
                frontier_phi_55_56_ladder_2 = _3011;
                frontier_phi_55_56_ladder_3 = _3009;
                frontier_phi_55_56_ladder_4 = _3007;
                frontier_phi_55_56_ladder_5 = _3005;
            }
            _3118 = frontier_phi_55_56_ladder_5;
            _3120 = frontier_phi_55_56_ladder_4;
            _3122 = frontier_phi_55_56_ladder_3;
            _3124 = frontier_phi_55_56_ladder_2;
            _3126 = frontier_phi_55_56_ladder;
            _3128 = frontier_phi_55_56_ladder_1;
        }
        float _3133 = isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0));
        _2917 = (_3133 * _3124) + _2353;
        _2919 = (_3133 * _3126) + _2355;
        _2921 = (_3133 * _3128) + _2357;
        _2923 = ((_3118 * _1174) * _3133) + _2698;
        _2925 = ((_3120 * _1176) * _3133) + _2700;
        _2927 = ((_3122 * _1177) * _3133) + _2702;
    }
    else
    {
        _2917 = _2353;
        _2919 = _2355;
        _2921 = _2357;
        _2923 = _2698;
        _2925 = _2700;
        _2927 = _2702;
    }
    float _4852 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _4863 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _4874 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    uint _2947 = _1149 + 6u;
    float _2955 = _1111 / cbSceneParam._m0[86u].x;
    float _2956 = _1112 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _1046 : (isnan(_1046) ? cbSceneParam._m0[77u].w : min(_1046, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_1046 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_1046) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1046 : min(cbSceneParam._m0[80u].w, _1046));
        float _3031 = _3030 / _1046;
        float _3042 = _3031 * _1096;
        float _3043 = _1097 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3046 = _3031 * _1098;
        float _3048 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3049 = _3048 + cbSceneParam._m0[79u].w;
        float _3050 = cbSceneParam._m0[79u].w - _3043;
        float _3056 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3046 * _3046));
        float _3059 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3056;
        float _3064 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3066 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3044 - _3048) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3049 > 0.0) ? exp2(_3064 * _3049) : (2.0 - exp2(_3066 * _3049))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3059;
        }
        else
        {
            float _3179 = 1.0 / cbSceneParam._m0[80u].x;
            float _3180 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : max(_3049, _3050));
            float _3181 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : min(_3049, _3050));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            float _3191 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : min(_3181, 0.0));
            _3219 = ((abs(_3056 / _3044) * cbSceneParam._m0[80u].y) * ((((_3190 - _3191) * 2.0) - ((exp2(_3064 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0)))) - exp2(_3064 * (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))))) * _3179)) - ((exp2(_3066 * _3190) - exp2(_3066 * _3191)) * _3179))) + (_3059 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2975);
        _3068 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3070 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3072 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3074 = _3230 * _2975;
    }
    else
    {
        _3068 = _2972;
        _3070 = _2973;
        _3072 = _2974;
        _3074 = _2975;
    }
    float _3086 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3087 = _3086 == 3.0;
    float _3088 = log2(_3074);
    float _3095 = exp2(_3088 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2917 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1189))) + ((_2923 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1993)) * cbPerFrame._m0[3u].x));
    float _3096 = exp2(_3088 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2919 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1189))) + ((_2925 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1993)) * cbPerFrame._m0[3u].x));
    float _3097 = exp2(_3088 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2921 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1189))) + ((_2927 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1993)) * cbPerFrame._m0[3u].x));
    float _3106 = (_3086 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3106 * (_3087 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3068)));
    SV_Target.y = _3106 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.z = _3106 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.w = cbInstanceData._m0[_2947].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
}


