#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1491;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _309 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _313 = _309.z;
    float _326 = exp2(log2((1.0 - _313) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _344 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _356 = exp2(log2(_344.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(1.0) ? _357 : (isnan(_357) ? 1.0 : min(_357, 1.0));
    float _367 = exp2(log2(cbMtdParam._m0[23u].y * _313) * cbMtdParam._m0[22u].y);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0));
    float _390 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _391 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _392 = isnan(4.0) ? _391 : (isnan(_391) ? 4.0 : min(_391, 4.0));
    float _405 = floor(_392);
    vec4 _408 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _405));
    vec4 _432 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _443 = cbMtdParam._m0[9u].x * _432.x;
    float _444 = cbMtdParam._m0[9u].y * _432.y;
    float _445 = cbMtdParam._m0[9u].z * _432.z;
    float _452 = (((cbMtdParam._m0[10u].x * _408.x) - _443) * _369) + _443;
    float _453 = (((cbMtdParam._m0[10u].y * _408.y) - _444) * _369) + _444;
    float _454 = (((cbMtdParam._m0[10u].z * _408.z) - _445) * _369) + _445;
    float _460 = exp2(log2(_309.w) * cbMtdParam._m0[23u].w);
    vec4 _473 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _492 = (((cbMtdParam._m0[16u].x * _473.x) - _452) * _460) + _452;
    float _493 = (((cbMtdParam._m0[16u].y * _473.y) - _453) * _460) + _453;
    float _494 = (((cbMtdParam._m0[16u].z * _473.z) - _454) * _460) + _454;
    vec4 _507 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _527 = (((cbMtdParam._m0[19u].x * _507.x) - _492) * _358) + _492;
    float _528 = (((cbMtdParam._m0[19u].y * _507.y) - _493) * _358) + _493;
    float _529 = (((cbMtdParam._m0[19u].z * _507.z) - _494) * _358) + _494;
    vec4 _542 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _567 = (_344.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _542.x) - _527) * _328) + _527);
    float _569 = (_344.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _542.y) - _528) * _328) + _528);
    float _571 = (_344.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _542.z) - _529) * _328) + _529);
    vec4 _584 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _602 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _604 = _602 * (cbMtdParam._m0[24u].z + 1.0);
    float _4138 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _612 = (_605 * ((cbMtdParam._m0[11u].x * _584.x) - _567)) + _567;
    float _613 = (((cbMtdParam._m0[11u].y * _584.y) - _569) * _605) + _569;
    float _614 = (((cbMtdParam._m0[11u].z * _584.z) - _571) * _605) + _571;
    float _618 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _626 = (_618 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _618))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4149 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _634 = ((cbMtdParam._m0[21u].x - _612) * _627) + _612;
    float _635 = ((cbMtdParam._m0[21u].y - _613) * _627) + _613;
    float _636 = ((cbMtdParam._m0[21u].z - _614) * _627) + _614;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[28u].w;
    _204[0u] = cbMtdParam._m0[29u].x;
    _203[1u] = cbMtdParam._m0[30u].w;
    _204[1u] = cbMtdParam._m0[31u].x;
    _203[2u] = cbMtdParam._m0[30u].y;
    _204[2u] = cbMtdParam._m0[30u].z;
    _203[3u] = cbMtdParam._m0[29u].w;
    _204[3u] = cbMtdParam._m0[30u].x;
    _203[4u] = cbMtdParam._m0[29u].y;
    _204[4u] = cbMtdParam._m0[29u].z;
    float _677 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    uint _679 = uint(int(isnan(4.0) ? _677 : (isnan(_677) ? 4.0 : min(_677, 4.0))));
    float _686 = ((_204[_679] - cbMtdParam._m0[22u].z) * _369) + cbMtdParam._m0[22u].z;
    float _689 = ((cbMtdParam._m0[22u].w - _686) * _460) + _686;
    float _692 = ((cbMtdParam._m0[25u].x - _689) * _358) + _689;
    float _695 = ((cbMtdParam._m0[26u].x - _692) * _328) + _692;
    float _700 = (cbMtdParam._m0[24u].y + 1.0) * _602;
    float _4170 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _703 = _695 - (_695 * _701);
    float _705 = _703 - (_703 * _618);
    vec4 _718 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _405));
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _744 = cbMtdParam._m0[22u].x + _736.z;
    float _747 = (((_718.z + _203[_679]) - _744) * _369) + _744;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _771 = (((_760.z - _747) + cbMtdParam._m0[28u].y) * _460) + _747;
    float _777 = ((((_313 * 2.0) * _771) - _771) * cbMtdParam._m0[24u].w) + _771;
    vec4 _790 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _801 = (((cbMtdParam._m0[23u].z + _790.z) - _777) * _358) + _777;
    vec4 _814 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _825 = (((_814.z - _801) + cbMtdParam._m0[26u].y) * _328) + _801;
    vec4 _837 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _849 = ((_837.z - _825) * _701) + _825;
    vec4 _864 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _878 = ((cbMtdParam._m0[27u].y * _618) * ((_864.z * cbMtdParam._m0[27u].x) - _849)) + _849;
    float _893 = ((_718.x - _738) * _369) + _738;
    float _894 = ((_718.y - _739) * _369) + _739;
    float _899 = ((_760.x - _893) * _460) + _893;
    float _900 = ((_760.y - _894) * _460) + _894;
    float _905 = ((_790.x - _899) * _358) + _899;
    float _906 = ((_790.y - _900) * _358) + _900;
    float _915 = ((((_814.x - _905) * _328) + _905) * 2.0) + (-1.0);
    float _916 = ((((_814.y - _906) * _328) + _906) * 2.0) + (-1.0);
    float _917 = dot(vec2(_915, _916), vec2(_915, _916));
    float _4181 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _922 = sqrt(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))));
    float _938 = (((cbMtdParam._m0[25u].y * ((_309.x * 2.0) + (-1.0))) + _915) + (((((_837.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _701)) + ((((_864.x * 2.0) + (-1.0)) * _618) * cbMtdParam._m0[26u].w);
    float _939 = (((cbMtdParam._m0[25u].y * ((_309.y * 2.0) + (-1.0))) + _916) + (((((_837.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _701)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_864.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _942 = fma(_922, _239 * NORMAL.x, fma(_939, _246 * TANGENT.x, (_232 * _224) * _938));
    float _945 = fma(_922, _239 * NORMAL.y, fma(_939, _246 * TANGENT.y, (_232 * _225) * _938));
    float _948 = fma(_922, _239 * NORMAL.z, fma(_939, _246 * TANGENT.z, (_232 * _226) * _938));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4192 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _956 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4214 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4225 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4236 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _960 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _976 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1026 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1016);
    float _1027 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1016);
    float _1028 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1016);
    float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
    float _1033 = _1026 * _1032;
    float _1034 = _1027 * _1032;
    float _1035 = _1028 * _1032;
    float _1041 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1042 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1060 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1063 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1066 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1079 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1081 = (_1079 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _4247 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _1093 = 1.0 - _960;
    float _1094 = _1090 * _1093;
    float _1095 = _1091 * _1093;
    float _1096 = _1092 * _1093;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _960;
    float _1102 = (_1091 + (-0.039999999105930328369140625)) * _960;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _960;
    float _1104 = _1101 + 0.039999999105930328369140625;
    float _1106 = _1102 + 0.039999999105930328369140625;
    float _1107 = _1103 + 0.039999999105930328369140625;
    vec4 _1116 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1041, cbSceneParam._m0[86u].y * _1042));
    float _1119 = _1116.x * TEXCOORD_3.w;
    float _1120 = dot(vec3(_953, _954, _955), vec3(_1033, _1034, _1035));
    float _1123 = _1120 * 2.0;
    float _1127 = (_1123 * _953) - _1033;
    float _1128 = (_1123 * _954) - _1034;
    float _1129 = (_1123 * _955) - _1035;
    float _1133 = abs(dot(vec3(_1033, _1034, _1035), vec3(_953, _954, _955)));
    float _4280 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1135 = sqrt(_956);
    float _1146 = exp2((_1135 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1135 * 3.0));
    float _1152 = (1.0 - _1146) * ((_1135 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1153 = _1146 * _1135;
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1490;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1215 = fma(_1189, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1181));
        float _1219 = fma(_1189, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1181));
        float _1223 = fma(_1189, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1181));
        float _1248 = _1181 + _953;
        float _1249 = _1185 + _954;
        float _1250 = _1189 + _955;
        float _1260 = fma(_1250, cbModelParam._m0[26u].z, fma(_1249, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1248)) - _1215;
        float _1261 = fma(_1250, cbModelParam._m0[27u].z, fma(_1249, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1248)) - _1219;
        float _1262 = fma(_1250, cbModelParam._m0[28u].z, fma(_1249, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1248)) - _1223;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1215 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1219 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[34u].z) + ((((((_1223 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1318 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1284.x + (-0.5));
        float _1320 = _1318 * (_1284.y + (-0.5));
        float _1321 = _1318 * (_1284.z + (-0.5));
        float _1328 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1291.x + (-0.5));
        float _1330 = _1328 * (_1291.y + (-0.5));
        float _1331 = _1328 * (_1291.z + (-0.5));
        float _1338 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1298.x + (-0.5));
        float _1340 = _1338 * (_1298.y + (-0.5));
        float _1341 = _1338 * (_1298.z + (-0.5));
        float _1348 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1305.x + (-0.5));
        float _1350 = _1348 * (_1305.y + (-0.5));
        float _1351 = _1348 * (_1305.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1372 = (dot(vec3(_953, _954, _955), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1382 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4328 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1384 + 1.0))) + _1389) * _1352;
        float _1399 = _1320 * 0.5;
        float _1400 = _1330 * 0.5;
        float _1401 = _1340 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_953, _954, _955), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4361 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1426 + 1.0))) + _1431) * _1353;
        float _1441 = _1321 * 0.5;
        float _1442 = _1331 * 0.5;
        float _1443 = _1341 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_953, _954, _955), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4394 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1468 + 1.0))) + _1473) * _1354;
        _1490 = _1321;
        _1492 = _1320;
        _1493 = _1319;
        _1494 = _1331;
        _1495 = _1330;
        _1496 = _1329;
        _1497 = _1341;
        _1498 = _1340;
        _1499 = _1339;
        _1500 = _1354;
        _1501 = _1353;
        _1502 = _1352;
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1491;
        _1492 = _1491;
        _1493 = _1491;
        _1494 = _1491;
        _1495 = _1491;
        _1496 = _1491;
        _1497 = _1491;
        _1498 = _1491;
        _1499 = _1491;
        _1500 = _1491;
        _1501 = _1491;
        _1502 = _1491;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1528 = fma(_1189, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181));
        float _1532 = fma(_1189, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181));
        float _1536 = fma(_1189, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181));
        float _1559 = _1181 + _953;
        float _1560 = _1185 + _954;
        float _1561 = _1189 + _955;
        float _1571 = fma(_1561, cbModelParam._m0[30u].z, fma(_1560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1559)) - _1528;
        float _1572 = fma(_1561, cbModelParam._m0[31u].z, fma(_1560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1559)) - _1532;
        float _1573 = fma(_1561, cbModelParam._m0[32u].z, fma(_1560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1559)) - _1536;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1590 = ((_1577 * _1571) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1528 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1577 * _1572) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1532 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1592 = ((_1577 * _1573) / cbModelParam._m0[35u].z) + ((((((_1536 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        float _1627 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1594.x + (-0.5));
        float _1629 = _1627 * (_1594.y + (-0.5));
        float _1630 = _1627 * (_1594.z + (-0.5));
        float _1637 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1601.x + (-0.5));
        float _1639 = _1637 * (_1601.y + (-0.5));
        float _1640 = _1637 * (_1601.z + (-0.5));
        float _1647 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1608.x + (-0.5));
        float _1649 = _1647 * (_1608.y + (-0.5));
        float _1650 = _1647 * (_1608.z + (-0.5));
        float _1657 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1615.x + (-0.5));
        float _1659 = _1657 * (_1615.y + (-0.5));
        float _1660 = _1657 * (_1615.z + (-0.5));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = _1628 * 0.5;
        float _1665 = _1638 * 0.5;
        float _1666 = _1648 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_953, _954, _955), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4457 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1691 + 1.0))) + _1696) * _1661;
        float _1706 = _1629 * 0.5;
        float _1707 = _1639 * 0.5;
        float _1708 = _1649 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_953, _954, _955), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4490 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1733 + 1.0))) + _1738) * _1662;
        float _1748 = _1630 * 0.5;
        float _1749 = _1640 * 0.5;
        float _1750 = _1650 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_953, _954, _955), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4523 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1775 + 1.0))) + _1780) * _1663;
        _1797 = _1630;
        _1798 = _1629;
        _1799 = _1628;
        _1800 = _1640;
        _1801 = _1639;
        _1802 = _1638;
        _1803 = _1650;
        _1804 = _1649;
        _1805 = _1648;
        _1806 = _1663;
        _1807 = _1662;
        _1808 = _1661;
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
    }
    else
    {
        _1797 = _1491;
        _1798 = _1491;
        _1799 = _1491;
        _1800 = _1491;
        _1801 = _1491;
        _1802 = _1491;
        _1803 = _1491;
        _1804 = _1491;
        _1805 = _1491;
        _1806 = _1491;
        _1807 = _1491;
        _1808 = _1491;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1503)) + _1503;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1504)) + _1504;
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1505)) + _1505;
    float _1844 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1821));
    float _1865 = _1127 * 0.5;
    float _1866 = _1128 * 0.5;
    float _1867 = _1129 * 0.5;
    float _1868 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1871 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1874 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1908;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1881 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1490, _1494, _1497, _1500));
        float _1885 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1889 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1493, _1496, _1499, _1502));
        float _1896 = dot(vec4(cbModelParam._m0[39u]), vec4(_1865, _1866, _1867, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1919;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1910 = dot(vec4(cbModelParam._m0[40u]), vec4(_1865, _1866, _1867, 1.0));
        _1919 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1919 = 1.0;
    }
    float _1923 = (_1919 * cbModelParam._m0[1u].x) + (_1908 * (1.0 - cbModelParam._m0[1u].x));
    float _1933 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1933 : min(cbModelParam._m0[25u].z, _1933));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1981 = fma(_1189, cbModelParam._m0[13u].z, fma(_1185, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1181)) + cbModelParam._m0[13u].w;
        float _1985 = fma(_1189, cbModelParam._m0[14u].z, fma(_1185, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1181)) + cbModelParam._m0[14u].w;
        float _1989 = fma(_1189, cbModelParam._m0[15u].z, fma(_1185, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1181)) + cbModelParam._m0[15u].w;
        float _1992 = fma(_1129, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127));
        float _1995 = fma(_1129, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127));
        float _1998 = fma(_1129, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127));
        float _2026;
        if (_1992 > 0.0)
        {
            _2026 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2026 = frontier_phi_14_12_ladder;
        }
        float _2198;
        if (_1995 > 0.0)
        {
            _2198 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2198 = frontier_phi_23_19_ladder;
        }
        float _2493;
        if (_1998 > 0.0)
        {
            _2493 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2493 = frontier_phi_35_30_ladder;
        }
        float _2495 = isnan(_2198) ? _2026 : (isnan(_2026) ? _2198 : min(_2026, _2198));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1992) + _1981;
        float _2501 = (_2496 * _1995) + _1985;
        float _2502 = (_2496 * _1998) + _1989;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2503;
        float _2507 = _2503 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 > _2507) || ((_2501 < _2505) || ((_2500 < _2505) || (_2500 > _2507))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2502, cbModelParam._m0[9u].z, fma(_2501, cbModelParam._m0[9u].y, _2500 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2502, cbModelParam._m0[10u].z, fma(_2501, cbModelParam._m0[10u].y, _2500 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2502, cbModelParam._m0[11u].z, fma(_2501, cbModelParam._m0[11u].y, _2500 * cbModelParam._m0[11u].x))), _1934);
            frontier_phi_13_35_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _2014 = frontier_phi_13_35_ladder_2;
        _2016 = frontier_phi_13_35_ladder_1;
        _2018 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1127, _1128, _1129), _1934);
        _2014 = _2002.x * cbModelParam._m0[1u].y;
        _2016 = _2002.y * cbModelParam._m0[1u].y;
        _2018 = _2002.z * cbModelParam._m0[1u].y;
    }
    float _2022 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2022 : min(cbModelParam._m0[25u].w, _2022));
    float _2113;
    float _2115;
    float _2117;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2077 = fma(_1189, cbModelParam._m0[21u].z, fma(_1185, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1181)) + cbModelParam._m0[21u].w;
        float _2081 = fma(_1189, cbModelParam._m0[22u].z, fma(_1185, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1181)) + cbModelParam._m0[22u].w;
        float _2085 = fma(_1189, cbModelParam._m0[23u].z, fma(_1185, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1181)) + cbModelParam._m0[23u].w;
        float _2088 = fma(_1129, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127));
        float _2091 = fma(_1129, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127));
        float _2094 = fma(_1129, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127));
        float _2203;
        if (_2088 > 0.0)
        {
            _2203 = abs((1.0 - _2077) / _2088);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2077 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2203 = frontier_phi_25_21_ladder;
        }
        float _2520;
        if (_2091 > 0.0)
        {
            _2520 = abs((1.0 - _2081) / _2091);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2081 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2520 = frontier_phi_37_32_ladder;
        }
        float _2858;
        if (_2094 > 0.0)
        {
            _2858 = abs((1.0 - _2085) / _2094);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2085 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2858 = frontier_phi_47_44_ladder;
        }
        float _2860 = isnan(_2520) ? _2203 : (isnan(_2203) ? _2520 : min(_2203, _2520));
        float _2861 = isnan(_2858) ? _2860 : (isnan(_2860) ? _2858 : min(_2860, _2858));
        float _2865 = (_2861 * _2088) + _2077;
        float _2866 = (_2861 * _2091) + _2081;
        float _2867 = (_2861 * _2094) + _2085;
        float _2868 = _2861 * 9.9999997473787516355514526367188e-05;
        float _2869 = (-1.0) - _2868;
        float _2871 = _2868 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2867 > _2871) || ((_2867 < _2869) || ((_2866 > _2871) || ((_2866 < _2869) || ((_2865 < _2869) || (_2865 > _2871))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2867, cbModelParam._m0[17u].z, fma(_2866, cbModelParam._m0[17u].y, _2865 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2867, cbModelParam._m0[18u].z, fma(_2866, cbModelParam._m0[18u].y, _2865 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2867, cbModelParam._m0[19u].z, fma(_2866, cbModelParam._m0[19u].y, _2865 * cbModelParam._m0[19u].x))), _2023);
            frontier_phi_22_47_ladder = _2989.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2989.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2989.x * cbModelParam._m0[1u].z;
        }
        _2113 = frontier_phi_22_47_ladder_2;
        _2115 = frontier_phi_22_47_ladder_1;
        _2117 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1127, _1128, _1129), _2023);
        _2113 = _2097.x * cbModelParam._m0[1u].z;
        _2115 = _2097.y * cbModelParam._m0[1u].z;
        _2117 = _2097.z * cbModelParam._m0[1u].z;
    }
    float _2130 = (((_1152 * _1104) + _1153) * _1119) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2132 = (((_1152 * _1106) + _1153) * _1119) * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2134 = (((_1152 * _1107) + _1153) * _1119) * ((cbModelParam._m0[1u].w * (_2117 - _2018)) + _2018);
    float _2137 = fma(_2134, cbSceneParam._m0[89u].z, fma(_2132, cbSceneParam._m0[89u].y, _2130 * cbSceneParam._m0[89u].x));
    float _2140 = fma(_2134, cbSceneParam._m0[90u].z, fma(_2132, cbSceneParam._m0[90u].y, _2130 * cbSceneParam._m0[90u].x));
    float _2143 = fma(_2134, cbSceneParam._m0[91u].z, fma(_2132, cbSceneParam._m0[91u].y, _2130 * cbSceneParam._m0[91u].x));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2189 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2190 = _2177 / _2189;
    float _2191 = _2181 / _2189;
    float _2192 = _2185 / _2189;
    float _2339;
    float _2340;
    float _2341;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2219 = ((uint(_2192 > cbSceneParam._m0[59u].y) + uint(_2192 > cbSceneParam._m0[59u].x)) + uint(_2192 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2220 = _2219 + 43u;
        uint _2228 = _2219 + 44u;
        uint _2236 = _2219 + 45u;
        uint _2244 = _2219 + 46u;
        float _2255 = fma(_2189, cbSceneParam._m0[_2220].w, fma(_2185, cbSceneParam._m0[_2220].z, fma(_2181, cbSceneParam._m0[_2220].y, _2177 * cbSceneParam._m0[_2220].x)));
        float _2259 = fma(_2189, cbSceneParam._m0[_2228].w, fma(_2185, cbSceneParam._m0[_2228].z, fma(_2181, cbSceneParam._m0[_2228].y, _2177 * cbSceneParam._m0[_2228].x)));
        float _2267 = fma(_2189, cbSceneParam._m0[_2244].w, fma(_2185, cbSceneParam._m0[_2244].z, fma(_2181, cbSceneParam._m0[_2244].y, _2177 * cbSceneParam._m0[_2244].x)));
        float _2272 = cbSceneParam._m0[33u].z * _2267;
        float _2274 = cbSceneParam._m0[33u].w * _2267;
        float _2277 = fma(_2189, cbSceneParam._m0[_2236].w, fma(_2185, cbSceneParam._m0[_2236].z, fma(_2181, cbSceneParam._m0[_2236].y, _2177 * cbSceneParam._m0[_2236].x))) / _2267;
        float _2325 = (cbSceneParam._m0[33u].x - sqrt(((_2191 * _2191) + (_2190 * _2190)) + (_2192 * _2192))) * cbSceneParam._m0[33u].y;
        float _4649 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2332 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 + _2255) / _2267, (_2274 + _2259) / _2267), _2277), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 + _2255) / _2267, (_2259 - _2272) / _2267), _2277), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2255 - _2272) / _2267, (_2259 - _2274) / _2267), _2277), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2255 - _2274) / _2267, (_2272 + _2259) / _2267), _2277), 0.0)).x), vec4(0.25)));
        _2339 = 1.0 - (_2332 * cbSceneParam._m0[34u].x);
        _2340 = 1.0 - (_2332 * cbSceneParam._m0[34u].y);
        _2341 = 1.0 - (_2332 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2339 = 1.0;
        _2340 = 1.0;
        _2341 = 1.0;
    }
    float _2405;
    float _2407;
    float _2409;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2393 = fma(_2189, cbSceneParam._m0[63u].w, fma(_2185, cbSceneParam._m0[63u].z, fma(_2181, cbSceneParam._m0[63u].y, _2177 * cbSceneParam._m0[63u].x)));
        float _2394 = fma(_2189, cbSceneParam._m0[60u].w, fma(_2185, cbSceneParam._m0[60u].z, fma(_2181, cbSceneParam._m0[60u].y, _2177 * cbSceneParam._m0[60u].x))) / _2393;
        float _2395 = fma(_2189, cbSceneParam._m0[61u].w, fma(_2185, cbSceneParam._m0[61u].z, fma(_2181, cbSceneParam._m0[61u].y, _2177 * cbSceneParam._m0[61u].x))) / _2393;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2394 >= cbSceneParam._m0[64u].x) && (_2395 >= cbSceneParam._m0[64u].y)) && (_2394 <= cbSceneParam._m0[64u].z)) && (_2395 <= cbSceneParam._m0[64u].w))
        {
            float _2533 = fma(_2189, cbSceneParam._m0[62u].w, fma(_2185, cbSceneParam._m0[62u].z, fma(_2181, cbSceneParam._m0[62u].y, _2177 * cbSceneParam._m0[62u].x))) / _2393;
            float _2537 = isnan(cbSceneParam._m0[41u].w) ? _2533 : (isnan(_2533) ? cbSceneParam._m0[41u].w : max(_2533, cbSceneParam._m0[41u].w));
            float _2580 = (cbSceneParam._m0[33u].x - sqrt(((_2191 * _2191) + (_2190 * _2190)) + (_2192 * _2192))) * cbSceneParam._m0[33u].y;
            float _4665 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
            float _2587 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2394, cbSceneParam._m0[33u].w + _2395), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2394, _2395 - cbSceneParam._m0[33u].z), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2394 - cbSceneParam._m0[33u].z, _2395 - cbSceneParam._m0[33u].w), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2394 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2395), _2537), 0.0)).x), vec4(0.25)));
            float _2591 = 1.0 - (_2587 * cbSceneParam._m0[34u].x);
            float _2592 = 1.0 - (_2587 * cbSceneParam._m0[34u].y);
            float _2593 = 1.0 - (_2587 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2593) ? _2341 : (isnan(_2341) ? _2593 : min(_2341, _2593));
            frontier_phi_34_33_ladder_1 = isnan(_2592) ? _2340 : (isnan(_2340) ? _2592 : min(_2340, _2592));
            frontier_phi_34_33_ladder_2 = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
        }
        else
        {
            frontier_phi_34_33_ladder = _2341;
            frontier_phi_34_33_ladder_1 = _2340;
            frontier_phi_34_33_ladder_2 = _2339;
        }
        _2405 = frontier_phi_34_33_ladder_2;
        _2407 = frontier_phi_34_33_ladder_1;
        _2409 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2405 = _2339;
        _2407 = _2340;
        _2409 = _2341;
    }
    uvec4 _2414 = floatBitsToUint(cbInstanceData._m0[_1079 + 5u]);
    uint _2416 = _2414.x * 14u;
    uint _2417 = _2416 + 13u;
    float _2424 = _1119 + (-1.0);
    float _2429 = (cbLight._m0[_2417].x * _2424) + 1.0;
    float _2430 = (cbLight._m0[_2417].y * _2424) + 1.0;
    float _2431 = (cbLight._m0[_2417].z * _2424) + 1.0;
    float _2432 = (cbLight._m0[_2417].w * _2424) + 1.0;
    uint _2433 = _2416 + 5u;
    float _2439 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
    uint _2443 = _2416 + 4u;
    float _2452 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
    uint _2456 = _2416 | 1u;
    float _2467 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_953, _954, _955));
    float _2470 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_953, _954, _955));
    float _4701 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _4712 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2475 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2477 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2484 = ((cbLight._m0[_2433].x * _2439) * _2477) + (((cbLight._m0[_2443].x * _2405) * _2452) * _2475);
    float _2485 = ((_2439 * cbLight._m0[_2433].y) * _2477) + (((cbLight._m0[_2443].y * _2407) * _2452) * _2475);
    float _2486 = ((_2439 * cbLight._m0[_2433].z) * _2477) + (((cbLight._m0[_2443].z * _2409) * _2452) * _2475);
    uvec4 _2490 = floatBitsToUint(cbLight._m0[_2416 + 12u]);
    bool _2492 = _2490.x == 0u;
    float _2594;
    float _2596;
    float _2598;
    if (_2492)
    {
        _2594 = _2484;
        _2596 = _2485;
        _2598 = _2486;
    }
    else
    {
        uint _2602 = _2416 + 6u;
        float _2618 = (dot(vec3(cbLight._m0[_2416 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2619 = _2618 * _2618;
        float _4723 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2620 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2621 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2594 = (((cbLight._m0[_2602].x * 0.3183098733425140380859375) * _2620) * _2621) + _2484;
        _2596 = (((cbLight._m0[_2602].y * 0.3183098733425140380859375) * _2620) * _2621) + _2485;
        _2598 = (((cbLight._m0[_2602].z * 0.3183098733425140380859375) * _2620) * _2621) + _2486;
    }
    bool _2601 = _2490.y == 0u;
    float _2656;
    float _2658;
    float _2660;
    if (_2601)
    {
        _2656 = _2594;
        _2658 = _2596;
        _2660 = _2598;
    }
    else
    {
        uint _2829 = _2416 + 7u;
        float _2845 = (dot(vec3(cbLight._m0[_2416 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2846 = _2845 * _2845;
        float _4739 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2847 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2848 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2656 = (((cbLight._m0[_2829].x * 0.3183098733425140380859375) * _2847) * _2848) + _2594;
        _2658 = (((cbLight._m0[_2829].y * 0.3183098733425140380859375) * _2847) * _2848) + _2596;
        _2660 = (((cbLight._m0[_2829].z * 0.3183098733425140380859375) * _2847) * _2848) + _2598;
    }
    uint _2663 = _2416 + 8u;
    float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _956) * 0.949999988079071044921875);
    float _2677 = _2676 * _2676;
    float _2678 = cbLight._m0[_2416].x + _1033;
    float _2679 = cbLight._m0[_2416].y + _1034;
    float _2680 = cbLight._m0[_2416].z + _1035;
    float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
    float _2685 = _2684 * _2678;
    float _2686 = _2684 * _2679;
    float _2687 = _2684 * _2680;
    float _2688 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2416].xyz));
    float _4755 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _4766 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _2692 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2693 = dot(vec3(_953, _954, _955), vec3(_2685, _2686, _2687));
    float _4777 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2697 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2685, _2686, _2687));
    float _4788 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2701 = _2677 * _2677;
    float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
    float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
    float _2714 = 0.959999978542327880859375 - _1101;
    float _2716 = 0.959999978542327880859375 - _1102;
    float _2717 = 0.959999978542327880859375 - _1103;
    float _2724 = 1.0 - _2677;
    float _2735 = (0.5 / (((_2692 * ((_2691 * _2724) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2724) + _2677) * _2691))) * _2691;
    float _4799 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
    uint _2751 = _2416 + 9u;
    float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _956) * 0.949999988079071044921875);
    float _2763 = _2762 * _2762;
    float _2764 = cbLight._m0[_2456].x + _1033;
    float _2765 = cbLight._m0[_2456].y + _1034;
    float _2766 = cbLight._m0[_2456].z + _1035;
    float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
    float _2771 = _2770 * _2764;
    float _2772 = _2770 * _2765;
    float _2773 = _2770 * _2766;
    float _2774 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2456].xyz));
    float _4810 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2777 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2778 = dot(vec3(_953, _954, _955), vec3(_2771, _2772, _2773));
    float _4821 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2781 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2782 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2771, _2772, _2773));
    float _4832 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2786 = _2763 * _2763;
    float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
    float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
    float _2804 = 1.0 - _2763;
    float _2814 = (0.5 / (((_2692 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2804) + _2763) * _2777))) * _2777;
    float _4843 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2816 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
    float _2826 = (((((_2797 * _2714) + _1104) * cbLight._m0[_2751].x) * _2816) * _2439) + ((((cbLight._m0[_2663].x * _2405) * ((_2713 * _2714) + _1104)) * _2737) * _2452);
    float _2827 = (((((_2797 * _2716) + _1106) * cbLight._m0[_2751].y) * _2816) * _2439) + ((((cbLight._m0[_2663].y * _2407) * ((_2713 * _2716) + _1106)) * _2737) * _2452);
    float _2828 = (((((_2797 * _2717) + _1107) * cbLight._m0[_2751].z) * _2816) * _2439) + ((((cbLight._m0[_2663].z * _2409) * ((_2713 * _2717) + _1107)) * _2737) * _2452);
    float _2884;
    float _2886;
    float _2888;
    if (_2492)
    {
        _2884 = _2826;
        _2886 = _2827;
        _2888 = _2828;
    }
    else
    {
        uint _2890 = _2416 + 2u;
        uint _2894 = _2416 + 10u;
        float _2908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2890].w)) * _956) * 0.949999988079071044921875);
        float _2909 = _2908 * _2908;
        float _2910 = cbLight._m0[_2890].x + _1033;
        float _2911 = cbLight._m0[_2890].y + _1034;
        float _2912 = cbLight._m0[_2890].z + _1035;
        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
        float _2917 = _2916 * _2910;
        float _2918 = _2916 * _2911;
        float _2919 = _2916 * _2912;
        float _2920 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2890].xyz));
        float _4854 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2924 = dot(vec3(_953, _954, _955), vec3(_2917, _2918, _2919));
        float _4865 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2928 = dot(vec3(cbLight._m0[_2890].xyz), vec3(_2917, _2918, _2919));
        float _4876 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2932 = _2909 * _2909;
        float _2936 = ((_2927 * _2927) * (_2932 + (-1.0))) + 1.0;
        float _2943 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2950 = 1.0 - _2909;
        float _2960 = (0.5 / (((_2692 * ((_2923 * _2950) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2950) + _2909) * _2923))) * _2923;
        float _4887 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2962 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2932 / ((_2936 * _2936) * 3.141590118408203125));
        float _2963 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2884 = (((((_2943 * _2714) + _1104) * cbLight._m0[_2894].x) * _2962) * _2963) + _2826;
        _2886 = (((((_2943 * _2716) + _1106) * cbLight._m0[_2894].y) * _2962) * _2963) + _2827;
        _2888 = (((((_2943 * _2717) + _1107) * cbLight._m0[_2894].z) * _2962) * _2963) + _2828;
    }
    float _2994;
    float _2996;
    float _2998;
    if (_2601)
    {
        _2994 = _2884;
        _2996 = _2886;
        _2998 = _2888;
    }
    else
    {
        uint _3005 = _2416 + 3u;
        uint _3009 = _2416 + 11u;
        float _3023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3005].w)) * _956) * 0.949999988079071044921875);
        float _3024 = _3023 * _3023;
        float _3025 = cbLight._m0[_3005].x + _1033;
        float _3026 = cbLight._m0[_3005].y + _1034;
        float _3027 = cbLight._m0[_3005].z + _1035;
        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
        float _3032 = _3031 * _3025;
        float _3033 = _3031 * _3026;
        float _3034 = _3031 * _3027;
        float _3035 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_3005].xyz));
        float _4903 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3038 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _3039 = dot(vec3(_953, _954, _955), vec3(_3032, _3033, _3034));
        float _4914 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3042 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _3043 = dot(vec3(cbLight._m0[_3005].xyz), vec3(_3032, _3033, _3034));
        float _4925 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3047 = _3024 * _3024;
        float _3051 = ((_3042 * _3042) * (_3047 + (-1.0))) + 1.0;
        float _3058 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
        float _3065 = 1.0 - _3024;
        float _3075 = (0.5 / (((_2692 * ((_3038 * _3065) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _3065) + _3024) * _3038))) * _3038;
        float _4936 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3077 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_3047 / ((_3051 * _3051) * 3.141590118408203125));
        float _3078 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2994 = (((((_3058 * _2714) + _1104) * cbLight._m0[_3009].x) * _3077) * _3078) + _2884;
        _2996 = (((((_3058 * _2716) + _1106) * cbLight._m0[_3009].y) * _3077) * _3078) + _2886;
        _2998 = (((((_3058 * _2717) + _1107) * cbLight._m0[_3009].z) * _3077) * _3078) + _2888;
    }
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_2414.y == 0u)
    {
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.x;
        uint _3111 = uint((float(_3099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1042) / _3100))) + floor(float(uint(cbSceneParam._m0[85u].x * _1041) / _3100)));
        float _3121 = (log2(_2192 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3122 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        uint _3125 = uint(isnan(14.0) ? _3122 : (isnan(_3122) ? 14.0 : min(_3122, 14.0)));
        uvec4 _3130 = texelFetch(g_lightClusterGridBuffer, int(((_3125 << 2u) + (_3111 << 6u)) >> 2u));
        uint _3131 = _3130.x;
        uint _3132 = _3099.z;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((((1u << ((_3132 >> 4u) & 15u)) + 4294967295u) & _3131) == 0u) || ((_3132 & 240u) == 0u))
        {
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
        }
        else
        {
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3222;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            uint _3362 = 0u;
            uint _3371;
            bool _3372;
            for (;;)
            {
                _3371 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                _3372 = _3371 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3372)
                {
                    frontier_phi_66_pred = _3361;
                    frontier_phi_66_pred_1 = _3360;
                    frontier_phi_66_pred_2 = _3359;
                    frontier_phi_66_pred_3 = _3358;
                    frontier_phi_66_pred_4 = _3357;
                    frontier_phi_66_pred_5 = _3356;
                }
                else
                {
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    uint _3486;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3360;
                    _3485 = _3361;
                    _3486 = _3371;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    for (;;)
                    {
                        uint _3490 = uint(findLSB(_3486)) + (_3362 << 5u);
                        uint _3487 = (_3486 + 4294967295u) & _3486;
                        uint _3492 = _3490 * 48u;
                        vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 3u)).x));
                        uint _3512 = (_3490 * 48u) + 4u;
                        vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 3u)).x));
                        uint _3531 = (_3490 * 48u) + 8u;
                        vec3 _3542 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3531)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 2u)).x));
                        float _3546 = _3506.x - _2190;
                        float _3547 = _3506.y - _2191;
                        float _3548 = _3506.z - _2192;
                        float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                        float _3552 = inversesqrt(_3549);
                        float _3553 = _3552 * _3546;
                        float _3554 = _3552 * _3547;
                        float _3555 = _3552 * _3548;
                        float _3556 = dot(vec3(_1060, _1063, _1066), vec3(_3553, _3554, _3555));
                        float _3561 = 1.0 - (_3549 * _3506.w);
                        float _4962 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3563 = sqrt(_3549) * _3525.w;
                        float _3566 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                        float _3567 = _3566 * _3566;
                        float _3570 = ((1.0 - _3567) * _3556) + _3567;
                        float _3573 = _3563 * _3563;
                        float _3577 = ((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3562) / ((_3573 * 0.699999988079071044921875) + 1.0);
                        float _3581 = (-0.0) - _2190;
                        float _3582 = (-0.0) - _2191;
                        float _3583 = (-0.0) - _2192;
                        float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                        float _3588 = _3587 * _3581;
                        float _3589 = _3587 * _3582;
                        float _3590 = _3587 * _3583;
                        float _3597 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                        float _3598 = 1.0 - _1135;
                        float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                        float _3606 = _3605 * _3605;
                        float _3607 = _3606 * _3606;
                        float _3608 = _3588 + _3553;
                        float _3609 = _3589 + _3554;
                        float _3610 = _3590 + _3555;
                        float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                        float _3618 = dot(vec3(_1060, _1063, _1066), vec3(_3588, _3589, _3590));
                        float _4978 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3621 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3622 = dot(vec3(_1060, _1063, _1066), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                        float _4989 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3625 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                        float _3630 = _3566 * _3606;
                        float _3631 = _3630 * _3630;
                        float _3634 = ((1.0 - _3631) * _3556) + _3631;
                        float _5000 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3636 = 1.0 - _3606;
                        float _3646 = (0.5 / (((_3635 * ((_3621 * _3636) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3635 * _3636) + _3606) * _3621))) * _3635;
                        float _5011 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3657 = (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3629 * _3629) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125))) * _3562;
                        _3415 = (_3577 * _3525.x) + _3483;
                        _3416 = (_3577 * _3525.y) + _3484;
                        _3417 = (_3577 * _3525.z) + _3485;
                        _3412 = (_3657 * _3542.x) + _3480;
                        _3413 = (_3657 * _3542.y) + _3481;
                        _3414 = (_3657 * _3542.z) + _3482;
                        if (_3487 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3416;
                            _3485 = _3417;
                            _3486 = _3487;
                        }
                    }
                    frontier_phi_66_pred = _3417;
                    frontier_phi_66_pred_1 = _3416;
                    frontier_phi_66_pred_2 = _3415;
                    frontier_phi_66_pred_3 = _3414;
                    frontier_phi_66_pred_4 = _3413;
                    frontier_phi_66_pred_5 = _3412;
                }
                _3222 = frontier_phi_66_pred;
                _3220 = frontier_phi_66_pred_1;
                _3218 = frontier_phi_66_pred_2;
                _3216 = frontier_phi_66_pred_3;
                _3214 = frontier_phi_66_pred_4;
                _3212 = frontier_phi_66_pred_5;
                uint _3363 = _3362 + 1u;
                if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3356 = _3212;
                    _3357 = _3214;
                    _3358 = _3216;
                    _3359 = _3218;
                    _3360 = _3220;
                    _3361 = _3222;
                    _3362 = _3363;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
        }
        uvec4 _3225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3226 = _3225.z;
        uint _3228 = (_3226 >> 8u) & 15u;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        float _3334;
        if (((4294967295u << _3228) & _3131) == 0u)
        {
            _3324 = _3211;
            _3326 = _3213;
            _3328 = _3215;
            _3330 = _3217;
            _3332 = _3219;
            _3334 = _3221;
        }
        else
        {
            float _3349 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
            float _3350 = _3349 * _2190;
            float _3351 = _3349 * _2191;
            float _3352 = _3349 * _2192;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3228 < ((_3226 >> 12u) & 15u))
            {
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3335;
                float _3463 = _3211;
                float _3464 = _3213;
                float _3465 = _3215;
                float _3466 = _3217;
                float _3467 = _3219;
                float _3468 = _3221;
                uint _3469 = _3228;
                uint _3478;
                bool _3479;
                for (;;)
                {
                    _3478 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3469 << 2u)) >> 2u)).x;
                    _3479 = _3478 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3479)
                    {
                        frontier_phi_72_pred = _3468;
                        frontier_phi_72_pred_1 = _3467;
                        frontier_phi_72_pred_2 = _3466;
                        frontier_phi_72_pred_3 = _3465;
                        frontier_phi_72_pred_4 = _3464;
                        frontier_phi_72_pred_5 = _3463;
                    }
                    else
                    {
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _3960;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        float _3678 = _3466;
                        float _3679 = _3467;
                        float _3680 = _3468;
                        uint _3681 = _3478;
                        uint _3682;
                        vec4 _3707;
                        float _3708;
                        vec4 _3723;
                        vec3 _3735;
                        vec4 _3750;
                        vec4 _3765;
                        float _3811;
                        bool _3812;
                        for (;;)
                        {
                            uint _3692 = ((_3469 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3681));
                            _3682 = (_3681 + 4294967295u) & _3681;
                            uint _3694 = _3692 * 40u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            _3708 = _3707.w;
                            uint _3710 = (_3692 * 40u) + 4u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3692 * 40u) + 8u;
                            _3735 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x));
                            uint _3737 = (_3692 * 40u) + 16u;
                            _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            uint _3752 = (_3692 * 40u) + 20u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            uint _3767 = (_3692 * 40u) + 24u;
                            vec4 _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            uint _3786 = (_3692 * 40u) + 28u;
                            vec4 _3799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 3u)).x));
                            _3811 = fma(_2192, _3799.z, fma(_2191, _3799.y, _3799.x * _2190)) + _3799.w;
                            _3812 = !((fma(_2192, _3780.z, fma(_2191, _3780.y, _3780.x * _2190)) + _3780.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3812)
                            {
                                float _3839 = _3707.x - _2190;
                                float _3840 = _3707.y - _2191;
                                float _3841 = _3707.z - _2192;
                                float _3842 = dot(vec3(_3839, _3840, _3841), vec3(_3839, _3840, _3841));
                                float _3845 = inversesqrt(_3842);
                                float _3846 = _3845 * _3839;
                                float _3847 = _3845 * _3840;
                                float _3848 = _3845 * _3841;
                                float _3852 = 1.0 - (_3842 / (_3708 * _3708));
                                float _5022 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3857 = sqrt(_3842) * _3723.w;
                                float _3859 = 1.39999997615814208984375 / (_3857 + 1.39999997615814208984375);
                                float _3860 = _3859 * _3859;
                                float _3863 = ((1.0 - _3860) * dot(vec3(_3846, _3847, _3848), vec3(_1060, _1063, _1066))) + _3860;
                                float _3866 = _3857 * _3857;
                                float _3870 = (fma(_2192, _3750.z, fma(_2191, _3750.y, _3750.x * _2190)) + _3750.w) / _3811;
                                float _3871 = (fma(_2192, _3765.z, fma(_2191, _3765.y, _3765.x * _2190)) + _3765.w) / _3811;
                                float _3875 = 1.0 - dot(vec2(_3870, _3871), vec2(_3870, _3871));
                                float _5038 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3876 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3877 = _3876 * (((isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0))) * _3853) / ((_3866 * 0.699999988079071044921875) + 1.0));
                                float _3889 = exp2(log2(1.0 / ((_3866 * 3.5) + 5.0)) * 0.25);
                                float _3890 = 1.0 - _1135;
                                float _3897 = sqrt(1.0 - ((1.0 - (_3890 * _3890)) * (1.0 - (_3889 * _3889))));
                                float _3898 = _3897 * _3897;
                                float _3899 = _3898 * _3898;
                                float _3900 = _3846 - _3350;
                                float _3901 = _3847 - _3351;
                                float _3902 = _3848 - _3352;
                                float _3906 = inversesqrt(dot(vec3(_3900, _3901, _3902), vec3(_3900, _3901, _3902)));
                                float _3910 = dot(vec3(_1060, _1063, _1066), vec3((-0.0) - _3350, (-0.0) - _3351, (-0.0) - _3352));
                                float _5049 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3913 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3914 = dot(vec3(_1060, _1063, _1066), vec3(_3906 * _3900, _3906 * _3901, _3906 * _3902));
                                float _5060 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3917 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3921 = ((_3917 * _3917) * (_3899 + (-1.0))) + 1.0;
                                float _3922 = _3859 * _3898;
                                float _3923 = _3922 * _3922;
                                float _3929 = ((1.0 - _3923) * dot(vec3(_1060, _1063, _1066), vec3(_3846, _3847, _3848))) + _3923;
                                float _5071 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3930 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3931 = 1.0 - _3898;
                                float _3941 = (0.5 / (((_3930 * ((_3913 * _3931) + _3898)) + 9.9999999392252902907785028219223e-09) + (((_3930 * _3931) + _3898) * _3913))) * _3930;
                                float _5082 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3951 = (_3876 * _3853) * (((_3899 * 3.1415927410125732421875) * (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) / ((_3921 * _3921) * ((_3866 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3877 * _3723.y;
                                frontier_phi_78_pred_1 = _3877 * _3723.x;
                                frontier_phi_78_pred_2 = _3951 * _3735.z;
                                frontier_phi_78_pred_3 = _3951 * _3735.y;
                                frontier_phi_78_pred_4 = _3951 * _3735.x;
                                frontier_phi_78_pred_5 = _3877 * _3723.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3959 = frontier_phi_78_pred;
                            _3958 = frontier_phi_78_pred_1;
                            _3957 = frontier_phi_78_pred_2;
                            _3956 = frontier_phi_78_pred_3;
                            _3955 = frontier_phi_78_pred_4;
                            _3960 = frontier_phi_78_pred_5;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            _3667 = _3960 + _3680;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            if (_3682 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3667;
                                _3681 = _3682;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3667;
                        frontier_phi_72_pred_1 = _3666;
                        frontier_phi_72_pred_2 = _3665;
                        frontier_phi_72_pred_3 = _3664;
                        frontier_phi_72_pred_4 = _3663;
                        frontier_phi_72_pred_5 = _3662;
                    }
                    _3335 = frontier_phi_72_pred;
                    _3333 = frontier_phi_72_pred_1;
                    _3331 = frontier_phi_72_pred_2;
                    _3329 = frontier_phi_72_pred_3;
                    _3327 = frontier_phi_72_pred_4;
                    _3325 = frontier_phi_72_pred_5;
                    uint _3470 = _3469 + 1u;
                    if (_3470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3463 = _3325;
                        _3464 = _3327;
                        _3465 = _3329;
                        _3466 = _3331;
                        _3467 = _3333;
                        _3468 = _3335;
                        _3469 = _3470;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3335;
                frontier_phi_60_61_ladder_1 = _3333;
                frontier_phi_60_61_ladder_2 = _3329;
                frontier_phi_60_61_ladder_3 = _3327;
                frontier_phi_60_61_ladder_4 = _3325;
                frontier_phi_60_61_ladder_5 = _3331;
            }
            else
            {
                frontier_phi_60_61_ladder = _3221;
                frontier_phi_60_61_ladder_1 = _3219;
                frontier_phi_60_61_ladder_2 = _3215;
                frontier_phi_60_61_ladder_3 = _3213;
                frontier_phi_60_61_ladder_4 = _3211;
                frontier_phi_60_61_ladder_5 = _3217;
            }
            _3324 = frontier_phi_60_61_ladder_4;
            _3326 = frontier_phi_60_61_ladder_3;
            _3328 = frontier_phi_60_61_ladder_2;
            _3330 = frontier_phi_60_61_ladder_5;
            _3332 = frontier_phi_60_61_ladder_1;
            _3334 = frontier_phi_60_61_ladder;
        }
        float _3339 = isnan(1.0) ? _1119 : (isnan(_1119) ? 1.0 : min(_1119, 1.0));
        _3144 = (_3339 * _3330) + _2656;
        _3146 = (_3339 * _3332) + _2658;
        _3148 = (_3339 * _3334) + _2660;
        _3150 = ((_3324 * _1104) * _3339) + _2994;
        _3152 = ((_3326 * _1106) * _3339) + _2996;
        _3154 = ((_3328 * _1107) * _3339) + _2998;
    }
    else
    {
        _3144 = _2656;
        _3146 = _2658;
        _3148 = _2660;
        _3150 = _2994;
        _3152 = _2996;
        _3154 = _2998;
    }
    float _5098 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _5109 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _5120 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    uint _3174 = _1079 + 6u;
    float _3182 = _1041 / cbSceneParam._m0[86u].x;
    float _3183 = _1042 / cbSceneParam._m0[86u].y;
    vec4 _3197 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, (log2((isnan(cbSceneParam._m0[77u].w) ? _976 : (isnan(_976) ? cbSceneParam._m0[77u].w : min(_976, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3199 = _3197.x;
    float _3200 = _3197.y;
    float _3201 = _3197.z;
    float _3202 = _3197.w;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_976 > cbSceneParam._m0[78u].w)
    {
        float _3236 = isnan(_976) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _976 : min(cbSceneParam._m0[80u].w, _976));
        float _3237 = _3236 / _976;
        float _3248 = _3237 * _1026;
        float _3249 = _1027 * _3237;
        float _3250 = (-0.0) - _3249;
        float _3252 = _3237 * _1028;
        float _3254 = (cbSceneParam._m0[77u].w * _3250) / _3236;
        float _3255 = _3254 + cbSceneParam._m0[79u].w;
        float _3256 = cbSceneParam._m0[79u].w - _3249;
        float _3262 = sqrt(((_3248 * _3248) + (_3249 * _3249)) + (_3252 * _3252));
        float _3265 = (1.0 - (cbSceneParam._m0[77u].w / _3236)) * _3262;
        float _3270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3425;
        if (abs((_3250 - _3254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3425 = ((((_3255 > 0.0) ? exp2(_3270 * _3255) : (2.0 - exp2(_3272 * _3255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3265;
        }
        else
        {
            float _3385 = 1.0 / cbSceneParam._m0[80u].x;
            float _3386 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : max(_3255, _3256));
            float _3387 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : min(_3255, _3256));
            float _3396 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : min(_3386, 0.0));
            float _3397 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : min(_3387, 0.0));
            _3425 = ((abs(_3262 / _3250) * cbSceneParam._m0[80u].y) * ((((_3396 - _3397) * 2.0) - ((exp2(_3270 * (isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0)))) - exp2(_3270 * (isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))))) * _3385)) - ((exp2(_3272 * _3396) - exp2(_3272 * _3397)) * _3385))) + (_3265 * cbSceneParam._m0[80u].z);
        }
        vec4 _3427 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, 1.0), 0.0);
        float _3436 = exp2((_3425 * (-1.44269502162933349609375)) * (1.0 - _3427.w));
        float _3437 = log2(_3436);
        float _3453 = log2(_3202);
        _3274 = (exp2(_3453 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].x)) * _3427.x) / cbSceneParam._m0[78u].x)) + _3199;
        _3276 = (exp2(_3453 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].y)) * _3427.y) / cbSceneParam._m0[78u].y)) + _3200;
        _3278 = (exp2(_3453 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].z)) * _3427.z) / cbSceneParam._m0[78u].z)) + _3201;
        _3280 = _3436 * _3202;
    }
    else
    {
        _3274 = _3199;
        _3276 = _3200;
        _3278 = _3201;
        _3280 = _3202;
    }
    float _3292 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3293 = _3292 == 3.0;
    float _3294 = log2(_3280);
    float _3301 = exp2(_3294 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3144 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1119))) + ((_3150 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3302 = exp2(_3294 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3146 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1119))) + ((_3152 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3303 = exp2(_3294 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3148 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1119))) + ((_3154 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3312 = (_3292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3312 * (_3293 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3274)));
    SV_Target.y = _3312 * (_3293 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3276)));
    SV_Target.z = _3312 * (_3293 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3278)));
    SV_Target.w = cbInstanceData._m0[_3174].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3174].w;
}


