#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1379;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _284 = _280.z;
    float _297 = exp2(log2((1.0 - _284) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _312 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _320 = log2(0.0);
    float _322 = exp2(_320 * cbMtdParam._m0[23u].x);
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(1.0) ? _323 : (isnan(_323) ? 1.0 : min(_323, 1.0));
    float _333 = exp2(log2(cbMtdParam._m0[23u].y * _284) * cbMtdParam._m0[22u].y);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _356 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(4.0) ? _357 : (isnan(_357) ? 4.0 : min(_357, 4.0));
    float _371 = floor(_358);
    vec4 _374 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _371));
    vec4 _398 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _409 = cbMtdParam._m0[9u].x * _398.x;
    float _410 = cbMtdParam._m0[9u].y * _398.y;
    float _411 = cbMtdParam._m0[9u].z * _398.z;
    float _418 = (((cbMtdParam._m0[10u].x * _374.x) - _409) * _335) + _409;
    float _419 = (((cbMtdParam._m0[10u].y * _374.y) - _410) * _335) + _410;
    float _420 = (((cbMtdParam._m0[10u].z * _374.z) - _411) * _335) + _411;
    float _426 = exp2(log2(_280.w) * cbMtdParam._m0[23u].w);
    vec4 _439 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _458 = (((cbMtdParam._m0[16u].x * _439.x) - _418) * _426) + _418;
    float _459 = (((cbMtdParam._m0[16u].y * _439.y) - _419) * _426) + _419;
    float _460 = (((cbMtdParam._m0[16u].z * _439.z) - _420) * _426) + _420;
    vec4 _473 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _493 = (((cbMtdParam._m0[19u].x * _473.x) - _458) * _324) + _458;
    float _494 = (((cbMtdParam._m0[19u].y * _473.y) - _459) * _324) + _459;
    float _495 = (((cbMtdParam._m0[19u].z * _473.z) - _460) * _324) + _460;
    vec4 _508 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _533 = (_312.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _508.x) - _493) * _299) + _493);
    float _535 = (_312.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _508.y) - _494) * _299) + _494);
    float _537 = (_312.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _508.z) - _495) * _299) + _495);
    float _541 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _550 = (_541 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _541))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4026 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _558 = ((cbMtdParam._m0[21u].x - _533) * _551) + _533;
    float _559 = ((cbMtdParam._m0[21u].y - _535) * _551) + _535;
    float _560 = ((cbMtdParam._m0[21u].z - _537) * _551) + _537;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _602 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    uint _604 = uint(int(isnan(4.0) ? _602 : (isnan(_602) ? 4.0 : min(_602, 4.0))));
    float _611 = ((_194[_604] - cbMtdParam._m0[22u].z) * _335) + cbMtdParam._m0[22u].z;
    float _614 = ((cbMtdParam._m0[22u].w - _611) * _426) + _611;
    float _617 = ((cbMtdParam._m0[25u].x - _614) * _324) + _614;
    float _620 = ((cbMtdParam._m0[26u].x - _617) * _299) + _617;
    float _622 = _620 - (_620 * _541);
    vec4 _638 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _371));
    vec4 _656 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _664 = cbMtdParam._m0[22u].x + _656.z;
    float _667 = (((_638.z + _193[_604]) - _664) * _335) + _664;
    vec4 _680 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _691 = (((_680.z - _667) + cbMtdParam._m0[28u].y) * _426) + _667;
    float _697 = ((((_284 * 2.0) * _691) - _691) * cbMtdParam._m0[24u].w) + _691;
    vec4 _710 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _721 = (((cbMtdParam._m0[23u].z + _710.z) - _697) * _324) + _697;
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _745 = (((_734.z - _721) + cbMtdParam._m0[26u].y) * _299) + _721;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _775 = ((cbMtdParam._m0[27u].y * _541) * ((_760.z * cbMtdParam._m0[27u].x) - _745)) + _745;
    float _787 = ((_638.x - _658) * _335) + _658;
    float _788 = ((_638.y - _659) * _335) + _659;
    float _793 = ((_680.x - _787) * _426) + _787;
    float _794 = ((_680.y - _788) * _426) + _788;
    float _799 = ((_710.x - _793) * _324) + _793;
    float _800 = ((_710.y - _794) * _324) + _794;
    float _809 = ((((_734.x - _799) * _299) + _799) * 2.0) + (-1.0);
    float _810 = ((((_734.y - _800) * _299) + _800) * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _4047 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _816 = sqrt(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))));
    float _826 = ((cbMtdParam._m0[25u].y * ((_280.x * 2.0) + (-1.0))) + _809) + ((((_760.x * 2.0) + (-1.0)) * _541) * cbMtdParam._m0[26u].w);
    float _827 = ((cbMtdParam._m0[25u].y * ((_280.y * 2.0) + (-1.0))) + _810) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_760.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _830 = fma(_816, _229 * NORMAL.x, fma(_827, _236 * TANGENT.x, (_222 * _214) * _826));
    float _833 = fma(_816, _229 * NORMAL.y, fma(_827, _236 * TANGENT.y, (_222 * _215) * _826));
    float _836 = fma(_816, _229 * NORMAL.z, fma(_827, _236 * TANGENT.z, (_222 * _216) * _826));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _4058 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _844 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4080 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4091 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4102 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _848 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _864 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _904);
    float _915 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _904);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _904);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    float _929 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _930 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _948 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _951 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _954 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _967 = uint(roundEven(NORMAL.w)) * 13u;
    uint _969 = (_967 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_969].z;
    float _4113 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _981 = 1.0 - _848;
    float _982 = _978 * _981;
    float _983 = _979 * _981;
    float _984 = _980 * _981;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _848;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _848;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _848;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _929, cbSceneParam._m0[86u].y * _930));
    float _1007 = _1004.x * TEXCOORD_3.w;
    float _1008 = dot(vec3(_841, _842, _843), vec3(_921, _922, _923));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _841) - _921;
    float _1016 = (_1011 * _842) - _922;
    float _1017 = (_1011 * _843) - _923;
    float _1021 = abs(dot(vec3(_921, _922, _923), vec3(_841, _842, _843)));
    float _4146 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_844);
    float _1034 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1040 = (1.0 - _1034) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1041 = _1034 * _1023;
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1378;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1077, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069));
        float _1107 = fma(_1077, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069));
        float _1111 = fma(_1077, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069));
        float _1136 = _1069 + _841;
        float _1137 = _1073 + _842;
        float _1138 = _1077 + _843;
        float _1148 = fma(_1138, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136)) - _1103;
        float _1149 = fma(_1138, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136)) - _1107;
        float _1150 = fma(_1138, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136)) - _1111;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1206 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1172.x + (-0.5));
        float _1208 = _1206 * (_1172.y + (-0.5));
        float _1209 = _1206 * (_1172.z + (-0.5));
        float _1216 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1179.x + (-0.5));
        float _1218 = _1216 * (_1179.y + (-0.5));
        float _1219 = _1216 * (_1179.z + (-0.5));
        float _1226 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1186.x + (-0.5));
        float _1228 = _1226 * (_1186.y + (-0.5));
        float _1229 = _1226 * (_1186.z + (-0.5));
        float _1236 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1193.x + (-0.5));
        float _1238 = _1236 * (_1193.y + (-0.5));
        float _1239 = _1236 * (_1193.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1260 = (dot(vec3(_841, _842, _843), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1270 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4194 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1272 + 1.0))) + _1277) * _1240;
        float _1287 = _1208 * 0.5;
        float _1288 = _1218 * 0.5;
        float _1289 = _1228 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_841, _842, _843), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4227 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1314 + 1.0))) + _1319) * _1241;
        float _1329 = _1209 * 0.5;
        float _1330 = _1219 * 0.5;
        float _1331 = _1229 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_841, _842, _843), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4260 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1356 + 1.0))) + _1361) * _1242;
        _1378 = _1209;
        _1380 = _1208;
        _1381 = _1207;
        _1382 = _1219;
        _1383 = _1218;
        _1384 = _1217;
        _1385 = _1229;
        _1386 = _1228;
        _1387 = _1227;
        _1388 = _1242;
        _1389 = _1241;
        _1390 = _1240;
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1379;
        _1380 = _1379;
        _1381 = _1379;
        _1382 = _1379;
        _1383 = _1379;
        _1384 = _1379;
        _1385 = _1379;
        _1386 = _1379;
        _1387 = _1379;
        _1388 = _1379;
        _1389 = _1379;
        _1390 = _1379;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1077, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069));
        float _1420 = fma(_1077, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069));
        float _1424 = fma(_1077, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069));
        float _1447 = _1069 + _841;
        float _1448 = _1073 + _842;
        float _1449 = _1077 + _843;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_841, _842, _843), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4323 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_841, _842, _843), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4356 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_841, _842, _843), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4389 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1379;
        _1686 = _1379;
        _1687 = _1379;
        _1688 = _1379;
        _1689 = _1379;
        _1690 = _1379;
        _1691 = _1379;
        _1692 = _1379;
        _1693 = _1379;
        _1694 = _1379;
        _1695 = _1379;
        _1696 = _1379;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1391)) + _1391;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1392)) + _1392;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1393)) + _1393;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _1015 * 0.5;
    float _1754 = _1016 * 0.5;
    float _1755 = _1017 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1378, _1382, _1385, _1388));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _844);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1077, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1077, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1077, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1883 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1886 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1914 = frontier_phi_14_12_ladder;
        }
        float _2086;
        if (_1883 > 0.0)
        {
            _2086 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2086 = frontier_phi_23_19_ladder;
        }
        float _2381;
        if (_1886 > 0.0)
        {
            _2381 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2381 = frontier_phi_35_30_ladder;
        }
        float _2383 = isnan(_2086) ? _1914 : (isnan(_1914) ? _2086 : min(_1914, _2086));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1880) + _1869;
        float _2389 = (_2384 * _1883) + _1873;
        float _2390 = (_2384 * _1886) + _1877;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2391;
        float _2395 = _2391 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 > _2395) || ((_2389 < _2393) || ((_2388 < _2393) || (_2388 > _2395))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_13_35_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_13_35_ladder_2;
        _1904 = frontier_phi_13_35_ladder_1;
        _1906 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _844);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1077, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1077, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1077, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _1979 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _1982 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2091;
        if (_1976 > 0.0)
        {
            _2091 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2091 = frontier_phi_25_21_ladder;
        }
        float _2408;
        if (_1979 > 0.0)
        {
            _2408 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2408 = frontier_phi_37_32_ladder;
        }
        float _2746;
        if (_1982 > 0.0)
        {
            _2746 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2746 = frontier_phi_47_44_ladder;
        }
        float _2748 = isnan(_2408) ? _2091 : (isnan(_2091) ? _2408 : min(_2091, _2408));
        float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
        float _2753 = (_2749 * _1976) + _1965;
        float _2754 = (_2749 * _1979) + _1969;
        float _2755 = (_2749 * _1982) + _1973;
        float _2756 = _2749 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2756;
        float _2759 = _2756 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2755 > _2759) || ((_2755 < _2757) || ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 < _2757) || (_2753 > _2759))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2755, cbModelParam._m0[17u].z, fma(_2754, cbModelParam._m0[17u].y, _2753 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2755, cbModelParam._m0[18u].z, fma(_2754, cbModelParam._m0[18u].y, _2753 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2755, cbModelParam._m0[19u].z, fma(_2754, cbModelParam._m0[19u].y, _2753 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_22_47_ladder = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2877.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2877.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_22_47_ladder_2;
        _2003 = frontier_phi_22_47_ladder_1;
        _2005 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1911);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2018 = (((_1040 * _992) + _1041) * _1007) * ((cbModelParam._m0[1u].w * (_2001 - _1902)) + _1902);
    float _2020 = (((_1040 * _994) + _1041) * _1007) * ((cbModelParam._m0[1u].w * (_2003 - _1904)) + _1904);
    float _2022 = (((_1040 * _995) + _1041) * _1007) * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2078 = _2065 / _2077;
    float _2079 = _2069 / _2077;
    float _2080 = _2073 / _2077;
    float _2227;
    float _2228;
    float _2229;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2107 = ((uint(_2080 > cbSceneParam._m0[59u].y) + uint(_2080 > cbSceneParam._m0[59u].x)) + uint(_2080 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2108 = _2107 + 43u;
        uint _2116 = _2107 + 44u;
        uint _2124 = _2107 + 45u;
        uint _2132 = _2107 + 46u;
        float _2143 = fma(_2077, cbSceneParam._m0[_2108].w, fma(_2073, cbSceneParam._m0[_2108].z, fma(_2069, cbSceneParam._m0[_2108].y, _2065 * cbSceneParam._m0[_2108].x)));
        float _2147 = fma(_2077, cbSceneParam._m0[_2116].w, fma(_2073, cbSceneParam._m0[_2116].z, fma(_2069, cbSceneParam._m0[_2116].y, _2065 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2077, cbSceneParam._m0[_2132].w, fma(_2073, cbSceneParam._m0[_2132].z, fma(_2069, cbSceneParam._m0[_2132].y, _2065 * cbSceneParam._m0[_2132].x)));
        float _2160 = cbSceneParam._m0[33u].z * _2155;
        float _2162 = cbSceneParam._m0[33u].w * _2155;
        float _2165 = fma(_2077, cbSceneParam._m0[_2124].w, fma(_2073, cbSceneParam._m0[_2124].z, fma(_2069, cbSceneParam._m0[_2124].y, _2065 * cbSceneParam._m0[_2124].x))) / _2155;
        float _2213 = (cbSceneParam._m0[33u].x - sqrt(((_2079 * _2079) + (_2078 * _2078)) + (_2080 * _2080))) * cbSceneParam._m0[33u].y;
        float _4515 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2220 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2143) / _2155, (_2162 + _2147) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 + _2143) / _2155, (_2147 - _2160) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 - _2160) / _2155, (_2147 - _2162) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 - _2162) / _2155, (_2160 + _2147) / _2155), _2165), 0.0)).x), vec4(0.25)));
        _2227 = 1.0 - (_2220 * cbSceneParam._m0[34u].x);
        _2228 = 1.0 - (_2220 * cbSceneParam._m0[34u].y);
        _2229 = 1.0 - (_2220 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2227 = 1.0;
        _2228 = 1.0;
        _2229 = 1.0;
    }
    float _2293;
    float _2295;
    float _2297;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2281 = fma(_2077, cbSceneParam._m0[63u].w, fma(_2073, cbSceneParam._m0[63u].z, fma(_2069, cbSceneParam._m0[63u].y, _2065 * cbSceneParam._m0[63u].x)));
        float _2282 = fma(_2077, cbSceneParam._m0[60u].w, fma(_2073, cbSceneParam._m0[60u].z, fma(_2069, cbSceneParam._m0[60u].y, _2065 * cbSceneParam._m0[60u].x))) / _2281;
        float _2283 = fma(_2077, cbSceneParam._m0[61u].w, fma(_2073, cbSceneParam._m0[61u].z, fma(_2069, cbSceneParam._m0[61u].y, _2065 * cbSceneParam._m0[61u].x))) / _2281;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2282 >= cbSceneParam._m0[64u].x) && (_2283 >= cbSceneParam._m0[64u].y)) && (_2282 <= cbSceneParam._m0[64u].z)) && (_2283 <= cbSceneParam._m0[64u].w))
        {
            float _2421 = fma(_2077, cbSceneParam._m0[62u].w, fma(_2073, cbSceneParam._m0[62u].z, fma(_2069, cbSceneParam._m0[62u].y, _2065 * cbSceneParam._m0[62u].x))) / _2281;
            float _2425 = isnan(cbSceneParam._m0[41u].w) ? _2421 : (isnan(_2421) ? cbSceneParam._m0[41u].w : max(_2421, cbSceneParam._m0[41u].w));
            float _2468 = (cbSceneParam._m0[33u].x - sqrt(((_2079 * _2079) + (_2078 * _2078)) + (_2080 * _2080))) * cbSceneParam._m0[33u].y;
            float _4531 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
            float _2475 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2282, cbSceneParam._m0[33u].w + _2283), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2282, _2283 - cbSceneParam._m0[33u].z), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2282 - cbSceneParam._m0[33u].z, _2283 - cbSceneParam._m0[33u].w), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2282 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2283), _2425), 0.0)).x), vec4(0.25)));
            float _2479 = 1.0 - (_2475 * cbSceneParam._m0[34u].x);
            float _2480 = 1.0 - (_2475 * cbSceneParam._m0[34u].y);
            float _2481 = 1.0 - (_2475 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
            frontier_phi_34_33_ladder_1 = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_34_33_ladder_2 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
        }
        else
        {
            frontier_phi_34_33_ladder = _2229;
            frontier_phi_34_33_ladder_1 = _2228;
            frontier_phi_34_33_ladder_2 = _2227;
        }
        _2293 = frontier_phi_34_33_ladder_2;
        _2295 = frontier_phi_34_33_ladder_1;
        _2297 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2293 = _2227;
        _2295 = _2228;
        _2297 = _2229;
    }
    uvec4 _2302 = floatBitsToUint(cbInstanceData._m0[_967 + 5u]);
    uint _2304 = _2302.x * 14u;
    uint _2305 = _2304 + 13u;
    float _2312 = _1007 + (-1.0);
    float _2317 = (cbLight._m0[_2305].x * _2312) + 1.0;
    float _2318 = (cbLight._m0[_2305].y * _2312) + 1.0;
    float _2319 = (cbLight._m0[_2305].z * _2312) + 1.0;
    float _2320 = (cbLight._m0[_2305].w * _2312) + 1.0;
    uint _2321 = _2304 + 5u;
    float _2327 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
    uint _2331 = _2304 + 4u;
    float _2340 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2344 = _2304 | 1u;
    float _2355 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_841, _842, _843));
    float _2358 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_841, _842, _843));
    float _4567 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _4578 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2363 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.3183098733425140380859375;
    float _2365 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * 0.3183098733425140380859375;
    float _2372 = ((cbLight._m0[_2321].x * _2327) * _2365) + (((cbLight._m0[_2331].x * _2293) * _2340) * _2363);
    float _2373 = ((_2327 * cbLight._m0[_2321].y) * _2365) + (((cbLight._m0[_2331].y * _2295) * _2340) * _2363);
    float _2374 = ((_2327 * cbLight._m0[_2321].z) * _2365) + (((cbLight._m0[_2331].z * _2297) * _2340) * _2363);
    uvec4 _2378 = floatBitsToUint(cbLight._m0[_2304 + 12u]);
    bool _2380 = _2378.x == 0u;
    float _2482;
    float _2484;
    float _2486;
    if (_2380)
    {
        _2482 = _2372;
        _2484 = _2373;
        _2486 = _2374;
    }
    else
    {
        uint _2490 = _2304 + 6u;
        float _2506 = (dot(vec3(cbLight._m0[_2304 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4589 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2509 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2482 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2372;
        _2484 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2373;
        _2486 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2374;
    }
    bool _2489 = _2378.y == 0u;
    float _2544;
    float _2546;
    float _2548;
    if (_2489)
    {
        _2544 = _2482;
        _2546 = _2484;
        _2548 = _2486;
    }
    else
    {
        uint _2717 = _2304 + 7u;
        float _2733 = (dot(vec3(cbLight._m0[_2304 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2734 = _2733 * _2733;
        float _4605 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2735 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2736 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2544 = (((cbLight._m0[_2717].x * 0.3183098733425140380859375) * _2735) * _2736) + _2482;
        _2546 = (((cbLight._m0[_2717].y * 0.3183098733425140380859375) * _2735) * _2736) + _2484;
        _2548 = (((cbLight._m0[_2717].z * 0.3183098733425140380859375) * _2735) * _2736) + _2486;
    }
    uint _2551 = _2304 + 8u;
    float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _844) * 0.949999988079071044921875);
    float _2565 = _2564 * _2564;
    float _2566 = cbLight._m0[_2304].x + _921;
    float _2567 = cbLight._m0[_2304].y + _922;
    float _2568 = cbLight._m0[_2304].z + _923;
    float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
    float _2573 = _2572 * _2566;
    float _2574 = _2572 * _2567;
    float _2575 = _2572 * _2568;
    float _2576 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2304].xyz));
    float _4621 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _4632 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2580 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2581 = dot(vec3(_841, _842, _843), vec3(_2573, _2574, _2575));
    float _4643 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2585 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2573, _2574, _2575));
    float _4654 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2589 = _2565 * _2565;
    float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
    float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
    float _2602 = 0.959999978542327880859375 - _989;
    float _2604 = 0.959999978542327880859375 - _990;
    float _2605 = 0.959999978542327880859375 - _991;
    float _2612 = 1.0 - _2565;
    float _2623 = (0.5 / (((_2580 * ((_2579 * _2612) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2612) + _2565) * _2579))) * _2579;
    float _4665 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
    uint _2639 = _2304 + 9u;
    float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _844) * 0.949999988079071044921875);
    float _2651 = _2650 * _2650;
    float _2652 = cbLight._m0[_2344].x + _921;
    float _2653 = cbLight._m0[_2344].y + _922;
    float _2654 = cbLight._m0[_2344].z + _923;
    float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
    float _2659 = _2658 * _2652;
    float _2660 = _2658 * _2653;
    float _2661 = _2658 * _2654;
    float _2662 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2344].xyz));
    float _4676 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2666 = dot(vec3(_841, _842, _843), vec3(_2659, _2660, _2661));
    float _4687 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2670 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2659, _2660, _2661));
    float _4698 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2674 = _2651 * _2651;
    float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
    float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
    float _2692 = 1.0 - _2651;
    float _2702 = (0.5 / (((_2580 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2692) + _2651) * _2665))) * _2665;
    float _4709 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2704 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
    float _2714 = (((((_2685 * _2602) + _992) * cbLight._m0[_2639].x) * _2704) * _2327) + ((((cbLight._m0[_2551].x * _2293) * ((_2601 * _2602) + _992)) * _2625) * _2340);
    float _2715 = (((((_2685 * _2604) + _994) * cbLight._m0[_2639].y) * _2704) * _2327) + ((((cbLight._m0[_2551].y * _2295) * ((_2601 * _2604) + _994)) * _2625) * _2340);
    float _2716 = (((((_2685 * _2605) + _995) * cbLight._m0[_2639].z) * _2704) * _2327) + ((((cbLight._m0[_2551].z * _2297) * ((_2601 * _2605) + _995)) * _2625) * _2340);
    float _2772;
    float _2774;
    float _2776;
    if (_2380)
    {
        _2772 = _2714;
        _2774 = _2715;
        _2776 = _2716;
    }
    else
    {
        uint _2778 = _2304 + 2u;
        uint _2782 = _2304 + 10u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _844) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _921;
        float _2799 = cbLight._m0[_2778].y + _922;
        float _2800 = cbLight._m0[_2778].z + _923;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2778].xyz));
        float _4720 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2812 = dot(vec3(_841, _842, _843), vec3(_2805, _2806, _2807));
        float _4731 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4742 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2831 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
        float _2838 = 1.0 - _2797;
        float _2848 = (0.5 / (((_2580 * ((_2811 * _2838) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2838) + _2797) * _2811))) * _2811;
        float _4753 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2772 = (((((_2831 * _2602) + _992) * cbLight._m0[_2782].x) * _2850) * _2851) + _2714;
        _2774 = (((((_2831 * _2604) + _994) * cbLight._m0[_2782].y) * _2850) * _2851) + _2715;
        _2776 = (((((_2831 * _2605) + _995) * cbLight._m0[_2782].z) * _2850) * _2851) + _2716;
    }
    float _2882;
    float _2884;
    float _2886;
    if (_2489)
    {
        _2882 = _2772;
        _2884 = _2774;
        _2886 = _2776;
    }
    else
    {
        uint _2893 = _2304 + 3u;
        uint _2897 = _2304 + 11u;
        float _2911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2893].w)) * _844) * 0.949999988079071044921875);
        float _2912 = _2911 * _2911;
        float _2913 = cbLight._m0[_2893].x + _921;
        float _2914 = cbLight._m0[_2893].y + _922;
        float _2915 = cbLight._m0[_2893].z + _923;
        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
        float _2920 = _2919 * _2913;
        float _2921 = _2919 * _2914;
        float _2922 = _2919 * _2915;
        float _2923 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2893].xyz));
        float _4769 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2927 = dot(vec3(_841, _842, _843), vec3(_2920, _2921, _2922));
        float _4780 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2930 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2931 = dot(vec3(cbLight._m0[_2893].xyz), vec3(_2920, _2921, _2922));
        float _4791 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2935 = _2912 * _2912;
        float _2939 = ((_2930 * _2930) * (_2935 + (-1.0))) + 1.0;
        float _2946 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
        float _2953 = 1.0 - _2912;
        float _2963 = (0.5 / (((_2580 * ((_2926 * _2953) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2953) + _2912) * _2926))) * _2926;
        float _4802 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2965 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2935 / ((_2939 * _2939) * 3.141590118408203125));
        float _2966 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2882 = (((((_2946 * _2602) + _992) * cbLight._m0[_2897].x) * _2965) * _2966) + _2772;
        _2884 = (((((_2946 * _2604) + _994) * cbLight._m0[_2897].y) * _2965) * _2966) + _2774;
        _2886 = (((((_2946 * _2605) + _995) * cbLight._m0[_2897].z) * _2965) * _2966) + _2776;
    }
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    if (_2302.y == 0u)
    {
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.x;
        uint _2999 = uint((float(_2987.y) * floor(float(uint(cbSceneParam._m0[85u].y * _930) / _2988))) + floor(float(uint(cbSceneParam._m0[85u].x * _929) / _2988)));
        float _3009 = (log2(_2080 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3010 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        uint _3013 = uint(isnan(14.0) ? _3010 : (isnan(_3010) ? 14.0 : min(_3010, 14.0)));
        uvec4 _3018 = texelFetch(g_lightClusterGridBuffer, int(((_3013 << 2u) + (_2999 << 6u)) >> 2u));
        uint _3019 = _3018.x;
        uint _3020 = _2987.z;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((((1u << ((_3020 >> 4u) & 15u)) + 4294967295u) & _3019) == 0u) || ((_3020 & 240u) == 0u))
        {
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
        }
        else
        {
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            uint _3250 = 0u;
            uint _3259;
            bool _3260;
            for (;;)
            {
                _3259 = texelFetch(g_lightClassification, int((((_3013 << 5u) + (_2999 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                _3260 = _3259 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3260)
                {
                    frontier_phi_66_pred = _3249;
                    frontier_phi_66_pred_1 = _3248;
                    frontier_phi_66_pred_2 = _3247;
                    frontier_phi_66_pred_3 = _3246;
                    frontier_phi_66_pred_4 = _3245;
                    frontier_phi_66_pred_5 = _3244;
                }
                else
                {
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    uint _3374;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3246;
                    _3371 = _3247;
                    _3372 = _3248;
                    _3373 = _3249;
                    _3374 = _3259;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    for (;;)
                    {
                        uint _3378 = uint(findLSB(_3374)) + (_3250 << 5u);
                        uint _3375 = (_3374 + 4294967295u) & _3374;
                        uint _3380 = _3378 * 48u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 3u)).x));
                        uint _3400 = (_3378 * 48u) + 4u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3419 = (_3378 * 48u) + 8u;
                        vec3 _3430 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x));
                        float _3434 = _3394.x - _2078;
                        float _3435 = _3394.y - _2079;
                        float _3436 = _3394.z - _2080;
                        float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                        float _3440 = inversesqrt(_3437);
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3444 = dot(vec3(_948, _951, _954), vec3(_3441, _3442, _3443));
                        float _3449 = 1.0 - (_3437 * _3394.w);
                        float _4828 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3451 = sqrt(_3437) * _3413.w;
                        float _3454 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3444) + _3455;
                        float _3461 = _3451 * _3451;
                        float _3465 = ((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3450) / ((_3461 * 0.699999988079071044921875) + 1.0);
                        float _3469 = (-0.0) - _2078;
                        float _3470 = (-0.0) - _2079;
                        float _3471 = (-0.0) - _2080;
                        float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3485 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                        float _3486 = 1.0 - _1023;
                        float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                        float _3494 = _3493 * _3493;
                        float _3495 = _3494 * _3494;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3498 = _3478 + _3443;
                        float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                        float _3506 = dot(vec3(_948, _951, _954), vec3(_3476, _3477, _3478));
                        float _4844 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3510 = dot(vec3(_948, _951, _954), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                        float _4855 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3513 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                        float _3518 = _3454 * _3494;
                        float _3519 = _3518 * _3518;
                        float _3522 = ((1.0 - _3519) * _3444) + _3519;
                        float _4866 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3524 = 1.0 - _3494;
                        float _3534 = (0.5 / (((_3523 * ((_3509 * _3524) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3523 * _3524) + _3494) * _3509))) * _3523;
                        float _4877 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3545 = (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3517 * _3517) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125))) * _3450;
                        _3303 = (_3465 * _3413.x) + _3371;
                        _3304 = (_3465 * _3413.y) + _3372;
                        _3305 = (_3465 * _3413.z) + _3373;
                        _3300 = (_3545 * _3430.x) + _3368;
                        _3301 = (_3545 * _3430.y) + _3369;
                        _3302 = (_3545 * _3430.z) + _3370;
                        if (_3375 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3302;
                            _3371 = _3303;
                            _3372 = _3304;
                            _3373 = _3305;
                            _3374 = _3375;
                        }
                    }
                    frontier_phi_66_pred = _3305;
                    frontier_phi_66_pred_1 = _3304;
                    frontier_phi_66_pred_2 = _3303;
                    frontier_phi_66_pred_3 = _3302;
                    frontier_phi_66_pred_4 = _3301;
                    frontier_phi_66_pred_5 = _3300;
                }
                _3110 = frontier_phi_66_pred;
                _3108 = frontier_phi_66_pred_1;
                _3106 = frontier_phi_66_pred_2;
                _3104 = frontier_phi_66_pred_3;
                _3102 = frontier_phi_66_pred_4;
                _3100 = frontier_phi_66_pred_5;
                uint _3251 = _3250 + 1u;
                if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3244 = _3100;
                    _3245 = _3102;
                    _3246 = _3104;
                    _3247 = _3106;
                    _3248 = _3108;
                    _3249 = _3110;
                    _3250 = _3251;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
        }
        uvec4 _3113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3114 = _3113.z;
        uint _3116 = (_3114 >> 8u) & 15u;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((4294967295u << _3116) & _3019) == 0u)
        {
            _3212 = _3099;
            _3214 = _3101;
            _3216 = _3103;
            _3218 = _3105;
            _3220 = _3107;
            _3222 = _3109;
        }
        else
        {
            float _3237 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
            float _3238 = _3237 * _2078;
            float _3239 = _3237 * _2079;
            float _3240 = _3237 * _2080;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3116 < ((_3114 >> 12u) & 15u))
            {
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3351 = _3099;
                float _3352 = _3101;
                float _3353 = _3103;
                float _3354 = _3105;
                float _3355 = _3107;
                float _3356 = _3109;
                uint _3357 = _3116;
                uint _3366;
                bool _3367;
                for (;;)
                {
                    _3366 = texelFetch(g_lightClassification, int((((_3013 << 5u) + (_2999 << 9u)) + (_3357 << 2u)) >> 2u)).x;
                    _3367 = _3366 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3367)
                    {
                        frontier_phi_72_pred = _3356;
                        frontier_phi_72_pred_1 = _3355;
                        frontier_phi_72_pred_2 = _3354;
                        frontier_phi_72_pred_3 = _3353;
                        frontier_phi_72_pred_4 = _3352;
                        frontier_phi_72_pred_5 = _3351;
                    }
                    else
                    {
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3563 = _3351;
                        float _3564 = _3352;
                        float _3565 = _3353;
                        float _3566 = _3354;
                        float _3567 = _3355;
                        float _3568 = _3356;
                        uint _3569 = _3366;
                        uint _3570;
                        vec4 _3595;
                        float _3596;
                        vec4 _3611;
                        vec3 _3623;
                        vec4 _3638;
                        vec4 _3653;
                        float _3699;
                        bool _3700;
                        for (;;)
                        {
                            uint _3580 = ((_3357 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3569));
                            _3570 = (_3569 + 4294967295u) & _3569;
                            uint _3582 = _3580 * 40u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3596 = _3595.w;
                            uint _3598 = (_3580 * 40u) + 4u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3580 * 40u) + 8u;
                            _3623 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x));
                            uint _3625 = (_3580 * 40u) + 16u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3580 * 40u) + 20u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3580 * 40u) + 24u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3674 = (_3580 * 40u) + 28u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            _3699 = fma(_2080, _3687.z, fma(_2079, _3687.y, _3687.x * _2078)) + _3687.w;
                            _3700 = !((fma(_2080, _3668.z, fma(_2079, _3668.y, _3668.x * _2078)) + _3668.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3700)
                            {
                                float _3727 = _3595.x - _2078;
                                float _3728 = _3595.y - _2079;
                                float _3729 = _3595.z - _2080;
                                float _3730 = dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729));
                                float _3733 = inversesqrt(_3730);
                                float _3734 = _3733 * _3727;
                                float _3735 = _3733 * _3728;
                                float _3736 = _3733 * _3729;
                                float _3740 = 1.0 - (_3730 / (_3596 * _3596));
                                float _4888 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3745 = sqrt(_3730) * _3611.w;
                                float _3747 = 1.39999997615814208984375 / (_3745 + 1.39999997615814208984375);
                                float _3748 = _3747 * _3747;
                                float _3751 = ((1.0 - _3748) * dot(vec3(_3734, _3735, _3736), vec3(_948, _951, _954))) + _3748;
                                float _3754 = _3745 * _3745;
                                float _3758 = (fma(_2080, _3638.z, fma(_2079, _3638.y, _3638.x * _2078)) + _3638.w) / _3699;
                                float _3759 = (fma(_2080, _3653.z, fma(_2079, _3653.y, _3653.x * _2078)) + _3653.w) / _3699;
                                float _3763 = 1.0 - dot(vec2(_3758, _3759), vec2(_3758, _3759));
                                float _4904 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3765 = _3764 * (((isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0))) * _3741) / ((_3754 * 0.699999988079071044921875) + 1.0));
                                float _3777 = exp2(log2(1.0 / ((_3754 * 3.5) + 5.0)) * 0.25);
                                float _3778 = 1.0 - _1023;
                                float _3785 = sqrt(1.0 - ((1.0 - (_3778 * _3778)) * (1.0 - (_3777 * _3777))));
                                float _3786 = _3785 * _3785;
                                float _3787 = _3786 * _3786;
                                float _3788 = _3734 - _3238;
                                float _3789 = _3735 - _3239;
                                float _3790 = _3736 - _3240;
                                float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                                float _3798 = dot(vec3(_948, _951, _954), vec3((-0.0) - _3238, (-0.0) - _3239, (-0.0) - _3240));
                                float _4915 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3802 = dot(vec3(_948, _951, _954), vec3(_3794 * _3788, _3794 * _3789, _3794 * _3790));
                                float _4926 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3809 = ((_3805 * _3805) * (_3787 + (-1.0))) + 1.0;
                                float _3810 = _3747 * _3786;
                                float _3811 = _3810 * _3810;
                                float _3817 = ((1.0 - _3811) * dot(vec3(_948, _951, _954), vec3(_3734, _3735, _3736))) + _3811;
                                float _4937 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3819 = 1.0 - _3786;
                                float _3829 = (0.5 / (((_3818 * ((_3801 * _3819) + _3786)) + 9.9999999392252902907785028219223e-09) + (((_3818 * _3819) + _3786) * _3801))) * _3818;
                                float _4948 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3839 = (_3764 * _3741) * (((_3787 * 3.1415927410125732421875) * (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) / ((_3809 * _3809) * ((_3754 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3765 * _3611.y;
                                frontier_phi_78_pred_1 = _3765 * _3611.x;
                                frontier_phi_78_pred_2 = _3839 * _3623.z;
                                frontier_phi_78_pred_3 = _3839 * _3623.y;
                                frontier_phi_78_pred_4 = _3839 * _3623.x;
                                frontier_phi_78_pred_5 = _3765 * _3611.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3847 = frontier_phi_78_pred;
                            _3846 = frontier_phi_78_pred_1;
                            _3845 = frontier_phi_78_pred_2;
                            _3844 = frontier_phi_78_pred_3;
                            _3843 = frontier_phi_78_pred_4;
                            _3848 = frontier_phi_78_pred_5;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            if (_3570 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3570;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3555;
                        frontier_phi_72_pred_1 = _3554;
                        frontier_phi_72_pred_2 = _3553;
                        frontier_phi_72_pred_3 = _3552;
                        frontier_phi_72_pred_4 = _3551;
                        frontier_phi_72_pred_5 = _3550;
                    }
                    _3223 = frontier_phi_72_pred;
                    _3221 = frontier_phi_72_pred_1;
                    _3219 = frontier_phi_72_pred_2;
                    _3217 = frontier_phi_72_pred_3;
                    _3215 = frontier_phi_72_pred_4;
                    _3213 = frontier_phi_72_pred_5;
                    uint _3358 = _3357 + 1u;
                    if (_3358 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3351 = _3213;
                        _3352 = _3215;
                        _3353 = _3217;
                        _3354 = _3219;
                        _3355 = _3221;
                        _3356 = _3223;
                        _3357 = _3358;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3223;
                frontier_phi_60_61_ladder_1 = _3221;
                frontier_phi_60_61_ladder_2 = _3217;
                frontier_phi_60_61_ladder_3 = _3215;
                frontier_phi_60_61_ladder_4 = _3213;
                frontier_phi_60_61_ladder_5 = _3219;
            }
            else
            {
                frontier_phi_60_61_ladder = _3109;
                frontier_phi_60_61_ladder_1 = _3107;
                frontier_phi_60_61_ladder_2 = _3103;
                frontier_phi_60_61_ladder_3 = _3101;
                frontier_phi_60_61_ladder_4 = _3099;
                frontier_phi_60_61_ladder_5 = _3105;
            }
            _3212 = frontier_phi_60_61_ladder_4;
            _3214 = frontier_phi_60_61_ladder_3;
            _3216 = frontier_phi_60_61_ladder_2;
            _3218 = frontier_phi_60_61_ladder_5;
            _3220 = frontier_phi_60_61_ladder_1;
            _3222 = frontier_phi_60_61_ladder;
        }
        float _3227 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3032 = (_3227 * _3218) + _2544;
        _3034 = (_3227 * _3220) + _2546;
        _3036 = (_3227 * _3222) + _2548;
        _3038 = ((_3212 * _992) * _3227) + _2882;
        _3040 = ((_3214 * _994) * _3227) + _2884;
        _3042 = ((_3216 * _995) * _3227) + _2886;
    }
    else
    {
        _3032 = _2544;
        _3034 = _2546;
        _3036 = _2548;
        _3038 = _2882;
        _3040 = _2884;
        _3042 = _2886;
    }
    float _4964 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4975 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4986 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    uint _3062 = _967 + 6u;
    float _3070 = _929 / cbSceneParam._m0[86u].x;
    float _3071 = _930 / cbSceneParam._m0[86u].y;
    vec4 _3085 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3070, _3071, (log2((isnan(cbSceneParam._m0[77u].w) ? _864 : (isnan(_864) ? cbSceneParam._m0[77u].w : min(_864, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3087 = _3085.x;
    float _3088 = _3085.y;
    float _3089 = _3085.z;
    float _3090 = _3085.w;
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    if (_864 > cbSceneParam._m0[78u].w)
    {
        float _3124 = isnan(_864) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _864 : min(cbSceneParam._m0[80u].w, _864));
        float _3125 = _3124 / _864;
        float _3136 = _3125 * _914;
        float _3137 = _915 * _3125;
        float _3138 = (-0.0) - _3137;
        float _3140 = _3125 * _916;
        float _3142 = (cbSceneParam._m0[77u].w * _3138) / _3124;
        float _3143 = _3142 + cbSceneParam._m0[79u].w;
        float _3144 = cbSceneParam._m0[79u].w - _3137;
        float _3150 = sqrt(((_3136 * _3136) + (_3137 * _3137)) + (_3140 * _3140));
        float _3153 = (1.0 - (cbSceneParam._m0[77u].w / _3124)) * _3150;
        float _3158 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3160 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3313;
        if (abs((_3138 - _3142) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3313 = ((((_3143 > 0.0) ? exp2(_3158 * _3143) : (2.0 - exp2(_3160 * _3143))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3153;
        }
        else
        {
            float _3273 = 1.0 / cbSceneParam._m0[80u].x;
            float _3274 = isnan(_3144) ? _3143 : (isnan(_3143) ? _3144 : max(_3143, _3144));
            float _3275 = isnan(_3144) ? _3143 : (isnan(_3143) ? _3144 : min(_3143, _3144));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            _3313 = ((abs(_3150 / _3138) * cbSceneParam._m0[80u].y) * ((((_3284 - _3285) * 2.0) - ((exp2(_3158 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0)))) - exp2(_3158 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))))) * _3273)) - ((exp2(_3160 * _3284) - exp2(_3160 * _3285)) * _3273))) + (_3153 * cbSceneParam._m0[80u].z);
        }
        vec4 _3315 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3070, _3071, 1.0), 0.0);
        float _3324 = exp2((_3313 * (-1.44269502162933349609375)) * (1.0 - _3315.w));
        float _3325 = log2(_3324);
        float _3341 = log2(_3090);
        _3162 = (exp2(_3341 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].x)) * _3315.x) / cbSceneParam._m0[78u].x)) + _3087;
        _3164 = (exp2(_3341 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].y)) * _3315.y) / cbSceneParam._m0[78u].y)) + _3088;
        _3166 = (exp2(_3341 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].z)) * _3315.z) / cbSceneParam._m0[78u].z)) + _3089;
        _3168 = _3324 * _3090;
    }
    else
    {
        _3162 = _3087;
        _3164 = _3088;
        _3166 = _3089;
        _3168 = _3090;
    }
    float _3180 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3181 = _3180 == 3.0;
    float _3182 = log2(_3168);
    float _3189 = exp2(_3182 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_3032 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1007))) + ((_3038 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1811)) * cbPerFrame._m0[3u].x));
    float _3190 = exp2(_3182 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_3034 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1007))) + ((_3040 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1811)) * cbPerFrame._m0[3u].x));
    float _3191 = exp2(_3182 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_3036 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1007))) + ((_3042 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1811)) * cbPerFrame._m0[3u].x));
    float _3200 = (_3180 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3200 * (_3181 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3162)));
    SV_Target.y = _3200 * (_3181 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3164)));
    SV_Target.z = _3200 * (_3181 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3166)));
    SV_Target.w = cbInstanceData._m0[_3062].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3062].w;
}


