#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1605;
float _3982;
float _3983;
float _3984;
float _3985;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _281 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _315 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _319 = _315.z;
    float _332 = exp2(log2((1.0 - _319) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _350 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _362 = exp2(log2(_350.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _364 = isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0));
    float _373 = exp2(log2(cbMtdParam._m0[23u].y * _319) * cbMtdParam._m0[22u].y);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
    vec4 _387 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _390 = _387.y;
    float _393 = (_387.x + (-0.02500000037252902984619140625)) * 8.0;
    float _397 = roundEven(5.0 - _393);
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(4.0) ? _398 : (isnan(_398) ? 4.0 : min(_398, 4.0));
    float _412 = floor(_399);
    vec4 _415 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _412));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[17u].x;
    _209[0u] = cbMtdParam._m0[17u].y;
    _210[0u] = cbMtdParam._m0[17u].z;
    _208[1u] = cbMtdParam._m0[15u].x;
    _209[1u] = cbMtdParam._m0[15u].y;
    _210[1u] = cbMtdParam._m0[15u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[13u].x;
    _209[3u] = cbMtdParam._m0[13u].y;
    _210[3u] = cbMtdParam._m0[13u].z;
    _208[4u] = cbMtdParam._m0[12u].x;
    _209[4u] = cbMtdParam._m0[12u].y;
    _210[4u] = cbMtdParam._m0[12u].z;
    _208[5u] = cbMtdParam._m0[18u].x;
    _209[5u] = cbMtdParam._m0[18u].y;
    _210[5u] = cbMtdParam._m0[18u].z;
    float _479 = roundEven(_393);
    float _480 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    uint _482 = uint(int(isnan(5.0) ? _480 : (isnan(_480) ? 5.0 : min(_480, 5.0))));
    vec4 _512 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _523 = cbMtdParam._m0[9u].x * _512.x;
    float _524 = cbMtdParam._m0[9u].y * _512.y;
    float _525 = cbMtdParam._m0[9u].z * _512.z;
    float _532 = ((((((_208[_482] - cbMtdParam._m0[10u].x) * _390) + cbMtdParam._m0[10u].x) * _415.x) - _523) * _375) + _523;
    float _533 = ((((((_209[_482] - cbMtdParam._m0[10u].y) * _390) + cbMtdParam._m0[10u].y) * _415.y) - _524) * _375) + _524;
    float _534 = ((((((_210[_482] - cbMtdParam._m0[10u].z) * _390) + cbMtdParam._m0[10u].z) * _415.z) - _525) * _375) + _525;
    float _540 = exp2(log2(_315.w) * cbMtdParam._m0[23u].w);
    vec4 _553 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _572 = (((cbMtdParam._m0[16u].x * _553.x) - _532) * _540) + _532;
    float _573 = (((cbMtdParam._m0[16u].y * _553.y) - _533) * _540) + _533;
    float _574 = (((cbMtdParam._m0[16u].z * _553.z) - _534) * _540) + _534;
    vec4 _587 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _607 = (((cbMtdParam._m0[19u].x * _587.x) - _572) * _364) + _572;
    float _608 = (((cbMtdParam._m0[19u].y * _587.y) - _573) * _364) + _573;
    float _609 = (((cbMtdParam._m0[19u].z * _587.z) - _574) * _364) + _574;
    vec4 _621 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _646 = (_350.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _621.x) - _607) * _334) + _607);
    float _648 = (_350.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _621.y) - _608) * _334) + _608);
    float _650 = (_350.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _621.z) - _609) * _334) + _609);
    vec4 _662 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _680 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _682 = _680 * (cbMtdParam._m0[24u].z + 1.0);
    float _4044 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _690 = (_683 * ((cbMtdParam._m0[11u].x * _662.x) - _646)) + _646;
    float _691 = (((cbMtdParam._m0[11u].y * _662.y) - _648) * _683) + _648;
    float _692 = (((cbMtdParam._m0[11u].z * _662.z) - _650) * _683) + _650;
    float _696 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _704 = (_696 - (((_281.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _696))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4055 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _712 = ((cbMtdParam._m0[21u].x - _690) * _705) + _690;
    float _713 = ((cbMtdParam._m0[21u].y - _691) * _705) + _691;
    float _714 = ((cbMtdParam._m0[21u].z - _692) * _705) + _692;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[28u].w;
    _204[0u] = cbMtdParam._m0[29u].x;
    _203[1u] = cbMtdParam._m0[30u].w;
    _204[1u] = cbMtdParam._m0[31u].x;
    _203[2u] = cbMtdParam._m0[30u].y;
    _204[2u] = cbMtdParam._m0[30u].z;
    _203[3u] = cbMtdParam._m0[29u].w;
    _204[3u] = cbMtdParam._m0[30u].x;
    _203[4u] = cbMtdParam._m0[29u].y;
    _204[4u] = cbMtdParam._m0[29u].z;
    float _754 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    uint _756 = uint(int(isnan(4.0) ? _754 : (isnan(_754) ? 4.0 : min(_754, 4.0))));
    float _763 = ((_204[_756] - cbMtdParam._m0[22u].z) * _375) + cbMtdParam._m0[22u].z;
    float _766 = ((cbMtdParam._m0[22u].w - _763) * _540) + _763;
    float _769 = ((cbMtdParam._m0[25u].x - _766) * _364) + _766;
    float _772 = ((cbMtdParam._m0[26u].x - _769) * _334) + _769;
    float _777 = (cbMtdParam._m0[24u].y + 1.0) * _680;
    float _4076 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _780 = _772 - (_772 * _778);
    float _782 = _780 - (_780 * _696);
    vec4 _795 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _412));
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _814 = _812.x;
    float _815 = _812.y;
    float _820 = cbMtdParam._m0[22u].x + _812.z;
    float _823 = (((_795.z + _203[_756]) - _820) * _375) + _820;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _846 = (((_835.z - _823) + cbMtdParam._m0[28u].y) * _540) + _823;
    float _852 = ((((_319 * 2.0) * _846) - _846) * cbMtdParam._m0[24u].w) + _846;
    vec4 _864 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _875 = (((cbMtdParam._m0[23u].z + _864.z) - _852) * _364) + _852;
    vec4 _888 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _899 = (((_888.z - _875) + cbMtdParam._m0[26u].y) * _334) + _875;
    vec4 _911 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _923 = ((_911.z - _899) * _778) + _899;
    vec4 _938 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _952 = ((cbMtdParam._m0[27u].y * _696) * ((_938.z * cbMtdParam._m0[27u].x) - _923)) + _923;
    float _967 = ((_795.x - _814) * _375) + _814;
    float _968 = ((_795.y - _815) * _375) + _815;
    float _973 = ((_835.x - _967) * _540) + _967;
    float _974 = ((_835.y - _968) * _540) + _968;
    float _979 = ((_864.x - _973) * _364) + _973;
    float _980 = ((_864.y - _974) * _364) + _974;
    float _989 = ((((_888.x - _979) * _334) + _979) * 2.0) + (-1.0);
    float _990 = ((((_888.y - _980) * _334) + _980) * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4087 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _996 = sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))));
    float _1012 = (((cbMtdParam._m0[25u].y * ((_315.x * 2.0) + (-1.0))) + _989) + (((((_911.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _778)) + ((((_938.x * 2.0) + (-1.0)) * _696) * cbMtdParam._m0[26u].w);
    float _1013 = (((cbMtdParam._m0[25u].y * ((_315.y * 2.0) + (-1.0))) + _990) + (((((_911.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _778)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_938.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1016 = fma(_996, _245 * NORMAL.x, fma(_1013, _252 * TANGENT.x, (_238 * _230) * _1012));
    float _1019 = fma(_996, _245 * NORMAL.y, fma(_1013, _252 * TANGENT.y, (_238 * _231) * _1012));
    float _1022 = fma(_996, _245 * NORMAL.z, fma(_1013, _252 * TANGENT.z, (_238 * _232) * _1012));
    float _1026 = inversesqrt(dot(vec3(_1016, _1019, _1022), vec3(_1016, _1019, _1022)));
    float _1027 = _1026 * _1016;
    float _1028 = _1026 * _1019;
    float _1029 = _1026 * _1022;
    float _4098 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _1030 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4120 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4131 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4142 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1034 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _1050 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1100 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1090);
    float _1101 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1090);
    float _1102 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1090);
    float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
    float _1107 = _1100 * _1106;
    float _1108 = _1101 * _1106;
    float _1109 = _1102 * _1106;
    vec4 _1114 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1116 = _1114.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1286 = sqrt(((_1100 * _1100) + (_1101 * _1101)) + (_1102 * _1102));
        float _1292 = (cbMatDynParam._m0[5u].x * _1286) + cbMatDynParam._m0[5u].y;
        float _4153 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1297 = (cbMatDynParam._m0[5u].z * _1286) + cbMatDynParam._m0[5u].w;
        float _4164 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) - _1293)) + _1293) < ((_1116 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1127 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1128 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1146 = fma(_1029, cbSceneParam._m0[5u].z, fma(_1028, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1027));
    float _1149 = fma(_1029, cbSceneParam._m0[6u].z, fma(_1028, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1027));
    float _1152 = fma(_1029, cbSceneParam._m0[7u].z, fma(_1028, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1027));
    uint _1165 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1166 = _1165 + 9u;
    uint _1167 = _1166 + uint(cbMatDynParam._m0[0u].w);
    float _1173 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_1167].x;
    float _1174 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_1167].y;
    float _1175 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_1167].z;
    float _4175 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _1179 = 1.0 - _1034;
    float _1180 = _1176 * _1179;
    float _1181 = _1177 * _1179;
    float _1182 = _1178 * _1179;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1034;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1034;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1034;
    float _1190 = _1187 + 0.039999999105930328369140625;
    float _1192 = _1188 + 0.039999999105930328369140625;
    float _1193 = _1189 + 0.039999999105930328369140625;
    vec4 _1202 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1127, cbSceneParam._m0[86u].y * _1128));
    float _1205 = _1202.x * TEXCOORD_3.w;
    float _1206 = dot(vec3(_1027, _1028, _1029), vec3(_1107, _1108, _1109));
    float _1209 = _1206 * 2.0;
    float _1213 = (_1209 * _1027) - _1107;
    float _1214 = (_1209 * _1028) - _1108;
    float _1215 = (_1209 * _1029) - _1109;
    float _1219 = abs(dot(vec3(_1107, _1108, _1109), vec3(_1027, _1028, _1029)));
    float _4208 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1221 = sqrt(_1030);
    float _1232 = exp2((_1221 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1221 * 3.0));
    float _1238 = (1.0 - _1232) * ((_1221 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1239 = _1232 * _1221;
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1604;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1329 = fma(_1275, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267));
        float _1333 = fma(_1275, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267));
        float _1337 = fma(_1275, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267));
        float _1362 = _1267 + _1027;
        float _1363 = _1271 + _1028;
        float _1364 = _1275 + _1029;
        float _1374 = fma(_1364, cbModelParam._m0[26u].z, fma(_1363, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1362)) - _1329;
        float _1375 = fma(_1364, cbModelParam._m0[27u].z, fma(_1363, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1362)) - _1333;
        float _1376 = fma(_1364, cbModelParam._m0[28u].z, fma(_1363, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1362)) - _1337;
        float _1380 = inversesqrt(dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376)));
        float _1393 = ((_1380 * _1374) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1329 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1380 * _1375) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1333 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1380 * _1376) / cbModelParam._m0[34u].z) + ((((((_1337 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        float _1432 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1398.x + (-0.5));
        float _1434 = _1432 * (_1398.y + (-0.5));
        float _1435 = _1432 * (_1398.z + (-0.5));
        float _1442 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1405.x + (-0.5));
        float _1444 = _1442 * (_1405.y + (-0.5));
        float _1445 = _1442 * (_1405.z + (-0.5));
        float _1452 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1412.x + (-0.5));
        float _1454 = _1452 * (_1412.y + (-0.5));
        float _1455 = _1452 * (_1412.z + (-0.5));
        float _1462 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1419.x + (-0.5));
        float _1464 = _1462 * (_1419.y + (-0.5));
        float _1465 = _1462 * (_1419.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1486 = (dot(vec3(_1027, _1028, _1029), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1496 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4256 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1498 + 1.0))) + _1503) * _1466;
        float _1513 = _1434 * 0.5;
        float _1514 = _1444 * 0.5;
        float _1515 = _1454 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_1027, _1028, _1029), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4289 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1540 + 1.0))) + _1545) * _1467;
        float _1555 = _1435 * 0.5;
        float _1556 = _1445 * 0.5;
        float _1557 = _1455 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_1027, _1028, _1029), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4322 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1582 + 1.0))) + _1587) * _1468;
        _1604 = _1435;
        _1606 = _1434;
        _1607 = _1433;
        _1608 = _1445;
        _1609 = _1444;
        _1610 = _1443;
        _1611 = _1455;
        _1612 = _1454;
        _1613 = _1453;
        _1614 = _1468;
        _1615 = _1467;
        _1616 = _1466;
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1605;
        _1606 = _1605;
        _1607 = _1605;
        _1608 = _1605;
        _1609 = _1605;
        _1610 = _1605;
        _1611 = _1605;
        _1612 = _1605;
        _1613 = _1605;
        _1614 = _1605;
        _1615 = _1605;
        _1616 = _1605;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1645 = fma(_1275, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267));
        float _1649 = fma(_1275, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267));
        float _1653 = fma(_1275, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267));
        float _1676 = _1267 + _1027;
        float _1677 = _1271 + _1028;
        float _1678 = _1275 + _1029;
        float _1688 = fma(_1678, cbModelParam._m0[30u].z, fma(_1677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1676)) - _1645;
        float _1689 = fma(_1678, cbModelParam._m0[31u].z, fma(_1677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1676)) - _1649;
        float _1690 = fma(_1678, cbModelParam._m0[32u].z, fma(_1677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1676)) - _1653;
        float _1694 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
        float _1707 = ((_1694 * _1688) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1645 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1694 * _1689) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1649 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1709 = ((_1694 * _1690) / cbModelParam._m0[35u].z) + ((((((_1653 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        float _1744 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1711.x + (-0.5));
        float _1746 = _1744 * (_1711.y + (-0.5));
        float _1747 = _1744 * (_1711.z + (-0.5));
        float _1754 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1718.x + (-0.5));
        float _1756 = _1754 * (_1718.y + (-0.5));
        float _1757 = _1754 * (_1718.z + (-0.5));
        float _1764 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1725.x + (-0.5));
        float _1766 = _1764 * (_1725.y + (-0.5));
        float _1767 = _1764 * (_1725.z + (-0.5));
        float _1774 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1732.x + (-0.5));
        float _1776 = _1774 * (_1732.y + (-0.5));
        float _1777 = _1774 * (_1732.z + (-0.5));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = _1745 * 0.5;
        float _1782 = _1755 * 0.5;
        float _1783 = _1765 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_1027, _1028, _1029), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4385 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1808 + 1.0))) + _1813) * _1778;
        float _1823 = _1746 * 0.5;
        float _1824 = _1756 * 0.5;
        float _1825 = _1766 * 0.5;
        float _1826 = dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825));
        float _1831 = (_1826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1826);
        float _1839 = (dot(vec3(_1027, _1028, _1029), vec3(_1831 * _1823, _1831 * _1824, _1831 * _1825)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1848 = sqrt(((_1824 * _1824) + (_1823 * _1823)) + (_1825 * _1825)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1850 = _1849 * 2.0;
        float _1854 = (1.0 - _1849) / (_1849 + 1.0);
        float _4418 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1864 = ((((1.0 - _1855) * (_1850 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1850 + 1.0))) + _1855) * _1779;
        float _1865 = _1747 * 0.5;
        float _1866 = _1757 * 0.5;
        float _1867 = _1767 * 0.5;
        float _1868 = dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867));
        float _1873 = (_1868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1868);
        float _1881 = (dot(vec3(_1027, _1028, _1029), vec3(_1873 * _1865, _1873 * _1866, _1873 * _1867)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = sqrt(((_1866 * _1866) + (_1865 * _1865)) + (_1867 * _1867)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1892 = _1891 * 2.0;
        float _1896 = (1.0 - _1891) / (_1891 + 1.0);
        float _4451 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1906 = ((((1.0 - _1897) * (_1892 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1892 + 1.0))) + _1897) * _1780;
        _1914 = _1747;
        _1915 = _1746;
        _1916 = _1745;
        _1917 = _1757;
        _1918 = _1756;
        _1919 = _1755;
        _1920 = _1767;
        _1921 = _1766;
        _1922 = _1765;
        _1923 = _1780;
        _1924 = _1779;
        _1925 = _1778;
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)));
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)));
    }
    else
    {
        _1914 = _1605;
        _1915 = _1605;
        _1916 = _1605;
        _1917 = _1605;
        _1918 = _1605;
        _1919 = _1605;
        _1920 = _1605;
        _1921 = _1605;
        _1922 = _1605;
        _1923 = _1605;
        _1924 = _1605;
        _1925 = _1605;
        _1926 = 0.0;
        _1927 = 0.0;
        _1928 = 0.0;
    }
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1617)) + _1617;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1618)) + _1618;
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1619)) + _1619;
    float _1961 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1964 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1967 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1938));
    float _1982 = _1213 * 0.5;
    float _1983 = _1214 * 0.5;
    float _1984 = _1215 * 0.5;
    float _1985 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _1988 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1991 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _2025;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1998 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1604, _1608, _1611, _1614));
        float _2002 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1606, _1609, _1612, _1615));
        float _2006 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1607, _1610, _1613, _1616));
        float _2013 = dot(vec4(cbModelParam._m0[39u]), vec4(_1982, _1983, _1984, 1.0));
        _2025 = dot(vec3(isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2013) ? 0.0 : (isnan(0.0) ? _2013 : max(0.0, _2013))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2025 = 1.0;
    }
    float _2036;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2027 = dot(vec4(cbModelParam._m0[40u]), vec4(_1982, _1983, _1984, 1.0));
        _2036 = dot(vec3(isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2027) ? 0.0 : (isnan(0.0) ? _2027 : max(0.0, _2027))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2036 = 1.0;
    }
    float _2040 = (_2036 * cbModelParam._m0[1u].x) + (_2025 * (1.0 - cbModelParam._m0[1u].x));
    float _2050 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1030);
    float _2051 = isnan(_2050) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2050 : min(cbModelParam._m0[25u].z, _2050));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2098 = fma(_1275, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267)) + cbModelParam._m0[13u].w;
        float _2102 = fma(_1275, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267)) + cbModelParam._m0[14u].w;
        float _2106 = fma(_1275, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267)) + cbModelParam._m0[15u].w;
        float _2109 = fma(_1215, cbModelParam._m0[13u].z, fma(_1214, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213));
        float _2112 = fma(_1215, cbModelParam._m0[14u].z, fma(_1214, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213));
        float _2115 = fma(_1215, cbModelParam._m0[15u].z, fma(_1214, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213));
        float _2143;
        if (_2109 > 0.0)
        {
            _2143 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2143 = frontier_phi_17_15_ladder;
        }
        float _2345;
        if (_2112 > 0.0)
        {
            _2345 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2345 = frontier_phi_26_22_ladder;
        }
        float _2599;
        if (_2115 > 0.0)
        {
            _2599 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2599 = frontier_phi_38_33_ladder;
        }
        float _2601 = isnan(_2345) ? _2143 : (isnan(_2143) ? _2345 : min(_2143, _2345));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2109) + _2098;
        float _2607 = (_2602 * _2112) + _2102;
        float _2608 = (_2602 * _2115) + _2106;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2051);
            frontier_phi_16_38_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2131 = frontier_phi_16_38_ladder_2;
        _2133 = frontier_phi_16_38_ladder_1;
        _2135 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1213, _1214, _1215), _2051);
        _2131 = _2119.x * cbModelParam._m0[1u].y;
        _2133 = _2119.y * cbModelParam._m0[1u].y;
        _2135 = _2119.z * cbModelParam._m0[1u].y;
    }
    float _2139 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1030);
    float _2140 = isnan(_2139) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2139 : min(cbModelParam._m0[25u].w, _2139));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1275, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1275, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1275, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1215, cbModelParam._m0[21u].z, fma(_1214, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213));
        float _2207 = fma(_1215, cbModelParam._m0[22u].z, fma(_1214, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213));
        float _2210 = fma(_1215, cbModelParam._m0[23u].z, fma(_1214, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213));
        float _2350;
        if (_2204 > 0.0)
        {
            _2350 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2350 = frontier_phi_28_24_ladder;
        }
        float _2626;
        if (_2207 > 0.0)
        {
            _2626 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2626 = frontier_phi_40_35_ladder;
        }
        float _2839;
        if (_2210 > 0.0)
        {
            _2839 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2839 = frontier_phi_49_46_ladder;
        }
        float _2841 = isnan(_2626) ? _2350 : (isnan(_2350) ? _2626 : min(_2350, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2204) + _2193;
        float _2847 = (_2842 * _2207) + _2197;
        float _2848 = (_2842 * _2210) + _2201;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2140);
            frontier_phi_25_49_ladder = _3047.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3047.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3047.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_25_49_ladder_2;
        _2231 = frontier_phi_25_49_ladder_1;
        _2233 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1213, _1214, _1215), _2140);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2246 = (((_1238 * _1190) + _1239) * _1205) * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2248 = (((_1238 * _1192) + _1239) * _1205) * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2250 = (((_1238 * _1193) + _1239) * _1205) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2253 = fma(_2250, cbSceneParam._m0[89u].z, fma(_2248, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2256 = fma(_2250, cbSceneParam._m0[90u].z, fma(_2248, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2259 = fma(_2250, cbSceneParam._m0[91u].z, fma(_2248, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    uvec4 _2269 = floatBitsToUint(cbInstanceData._m0[_1165 + 5u]);
    uint _2271 = _2269.x * 14u;
    uint _2272 = _2271 + 13u;
    float _2279 = _1205 + (-1.0);
    float _2284 = (cbLight._m0[_2272].x * _2279) + 1.0;
    float _2285 = (cbLight._m0[_2272].y * _2279) + 1.0;
    float _2286 = (cbLight._m0[_2272].z * _2279) + 1.0;
    float _2287 = (cbLight._m0[_2272].w * _2279) + 1.0;
    uint _2288 = _2271 + 5u;
    float _2294 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2298 = _2271 + 4u;
    float _2304 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2308 = _2271 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_1027, _1028, _1029));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1027, _1028, _1029));
    float _4587 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4598 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2288].x * _2294) * _2329) + ((cbLight._m0[_2298].x * _2304) * _2327);
    float _2337 = ((_2294 * cbLight._m0[_2288].y) * _2329) + ((_2304 * cbLight._m0[_2298].y) * _2327);
    float _2338 = ((_2294 * cbLight._m0[_2288].z) * _2329) + ((_2304 * cbLight._m0[_2298].z) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2271 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2344)
    {
        _2355 = _2336;
        _2357 = _2337;
        _2359 = _2338;
    }
    else
    {
        uint _2363 = _2271 + 6u;
        float _2379 = (dot(vec3(cbLight._m0[_2271 + 2u].xyz), vec3(_1027, _1028, _1029)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4609 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2382 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2355 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2336;
        _2357 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2337;
        _2359 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2338;
    }
    bool _2362 = _2342.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2362)
    {
        _2400 = _2355;
        _2402 = _2357;
        _2404 = _2359;
    }
    else
    {
        uint _2570 = _2271 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2271 + 3u].xyz), vec3(_1027, _1028, _1029)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4625 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2589 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2400 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2355;
        _2402 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2357;
        _2404 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2359;
    }
    uint _2407 = _2271 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _1030) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2271].x + _1107;
    float _2423 = cbLight._m0[_2271].y + _1108;
    float _2424 = cbLight._m0[_2271].z + _1109;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2271].xyz));
    float _4641 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _4652 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _2436 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2437 = dot(vec3(_1027, _1028, _1029), vec3(_2429, _2430, _2431));
    float _4663 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2429, _2430, _2431));
    float _4674 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
    float _2458 = 0.959999978542327880859375 - _1187;
    float _2460 = 0.959999978542327880859375 - _1188;
    float _2461 = 0.959999978542327880859375 - _1189;
    float _2468 = 1.0 - _2421;
    float _2479 = (0.5 / (((_2436 * ((_2435 * _2468) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2468) + _2421) * _2435))) * _2435;
    float _4685 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2492 = _2271 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1030) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2308].x + _1107;
    float _2506 = cbLight._m0[_2308].y + _1108;
    float _2507 = cbLight._m0[_2308].z + _1109;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2308].xyz));
    float _4696 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2519 = dot(vec3(_1027, _1028, _1029), vec3(_2512, _2513, _2514));
    float _4707 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2512, _2513, _2514));
    float _4718 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2436 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2545) + _2504) * _2518))) * _2518;
    float _4729 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2458) + _1190) * cbLight._m0[_2492].x) * _2557) * _2294) + (((((_2457 * _2458) + _1190) * cbLight._m0[_2407].x) * _2481) * _2304);
    float _2568 = (((((_2538 * _2460) + _1192) * cbLight._m0[_2492].y) * _2557) * _2294) + (((((_2457 * _2460) + _1192) * cbLight._m0[_2407].y) * _2481) * _2304);
    float _2569 = (((((_2538 * _2461) + _1193) * cbLight._m0[_2492].z) * _2557) * _2294) + (((((_2457 * _2461) + _1193) * cbLight._m0[_2407].z) * _2481) * _2304);
    float _2631;
    float _2633;
    float _2635;
    if (_2344)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2271 + 2u;
        uint _2641 = _2271 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1030) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1107;
        float _2658 = cbLight._m0[_2637].y + _1108;
        float _2659 = cbLight._m0[_2637].z + _1109;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2637].xyz));
        float _4740 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2671 = dot(vec3(_1027, _1028, _1029), vec3(_2664, _2665, _2666));
        float _4751 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4762 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2436 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2697) + _2656) * _2670))) * _2670;
        float _4773 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2631 = (((((_2690 * _2458) + _1190) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2460) + _1192) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2461) + _1193) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2362)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2271 + 3u;
        uint _2760 = _2271 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1030) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1107;
        float _2777 = cbLight._m0[_2756].y + _1108;
        float _2778 = cbLight._m0[_2756].z + _1109;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2756].xyz));
        float _4789 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2790 = dot(vec3(_1027, _1028, _1029), vec3(_2783, _2784, _2785));
        float _4800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4811 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2436 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2816) + _2775) * _2789))) * _2789;
        float _4822 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2745 = (((((_2809 * _2458) + _1190) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2460) + _1192) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2461) + _1193) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2269.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1128) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1127) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            uint _3211 = 0u;
            uint _3220;
            bool _3221;
            for (;;)
            {
                _3220 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                _3221 = _3220 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3221)
                {
                    frontier_phi_66_pred = _3205;
                    frontier_phi_66_pred_1 = _3210;
                    frontier_phi_66_pred_2 = _3209;
                    frontier_phi_66_pred_3 = _3208;
                    frontier_phi_66_pred_4 = _3207;
                    frontier_phi_66_pred_5 = _3206;
                }
                else
                {
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    uint _3356;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3220;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    for (;;)
                    {
                        uint _3360 = uint(findLSB(_3356)) + (_3211 << 5u);
                        uint _3357 = (_3356 + 4294967295u) & _3356;
                        uint _3362 = _3360 * 48u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3382 = (_3360 * 48u) + 4u;
                        vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3401 = (_3360 * 48u) + 8u;
                        vec3 _3412 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x));
                        float _3416 = _3376.x - _2905;
                        float _3417 = _3376.y - _2906;
                        float _3418 = _3376.z - _2907;
                        float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                        float _3422 = inversesqrt(_3419);
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3426 = dot(vec3(_1146, _1149, _1152), vec3(_3423, _3424, _3425));
                        float _3431 = 1.0 - (_3419 * _3376.w);
                        float _4848 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3433 = sqrt(_3419) * _3395.w;
                        float _3436 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3426) + _3437;
                        float _3443 = _3433 * _3433;
                        float _3447 = ((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3432) / ((_3443 * 0.699999988079071044921875) + 1.0);
                        float _3451 = (-0.0) - _2905;
                        float _3452 = (-0.0) - _2906;
                        float _3453 = (-0.0) - _2907;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3468 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                        float _3469 = 1.0 - _1221;
                        float _3476 = sqrt(1.0 - ((1.0 - (_3469 * _3469)) * (1.0 - (_3468 * _3468))));
                        float _3477 = _3476 * _3476;
                        float _3478 = _3477 * _3477;
                        float _3479 = _3458 + _3423;
                        float _3480 = _3459 + _3424;
                        float _3481 = _3460 + _3425;
                        float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                        float _3489 = dot(vec3(_1146, _1149, _1152), vec3(_3458, _3459, _3460));
                        float _4864 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3493 = dot(vec3(_1146, _1149, _1152), vec3(_3485 * _3479, _3485 * _3480, _3485 * _3481));
                        float _4875 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3496 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3500 = ((_3496 * _3496) * (_3478 + (-1.0))) + 1.0;
                        float _3501 = _3436 * _3477;
                        float _3502 = _3501 * _3501;
                        float _3505 = ((1.0 - _3502) * _3426) + _3502;
                        float _4886 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3506 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3507 = 1.0 - _3477;
                        float _3517 = (0.5 / (((_3506 * ((_3492 * _3507) + _3477)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3477) * _3492))) * _3506;
                        float _4897 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3528 = (((_3478 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3500 * _3500) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125))) * _3432;
                        _3280 = (_3447 * _3395.x) + _3353;
                        _3281 = (_3447 * _3395.y) + _3354;
                        _3282 = (_3447 * _3395.z) + _3355;
                        _3277 = (_3528 * _3412.x) + _3350;
                        _3278 = (_3528 * _3412.y) + _3351;
                        _3279 = (_3528 * _3412.z) + _3352;
                        if (_3357 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3357;
                        }
                    }
                    frontier_phi_66_pred = _3277;
                    frontier_phi_66_pred_1 = _3282;
                    frontier_phi_66_pred_2 = _3281;
                    frontier_phi_66_pred_3 = _3280;
                    frontier_phi_66_pred_4 = _3279;
                    frontier_phi_66_pred_5 = _3278;
                }
                _3053 = frontier_phi_66_pred;
                _3063 = frontier_phi_66_pred_1;
                _3061 = frontier_phi_66_pred_2;
                _3059 = frontier_phi_66_pred_3;
                _3057 = frontier_phi_66_pred_4;
                _3055 = frontier_phi_66_pred_5;
                uint _3212 = _3211 + 1u;
                if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3205 = _3053;
                    _3206 = _3055;
                    _3207 = _3057;
                    _3208 = _3059;
                    _3209 = _3061;
                    _3210 = _3063;
                    _3211 = _3212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((4294967295u << _3069) & _2951) == 0u)
        {
            _3173 = _3052;
            _3175 = _3054;
            _3177 = _3056;
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
        }
        else
        {
            float _3198 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3199 = _3198 * _2905;
            float _3200 = _3198 * _2906;
            float _3201 = _3198 * _2907;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3333 = _3052;
                float _3334 = _3054;
                float _3335 = _3056;
                float _3336 = _3058;
                float _3337 = _3060;
                float _3338 = _3062;
                uint _3339 = _3069;
                uint _3348;
                bool _3349;
                for (;;)
                {
                    _3348 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                    _3349 = _3348 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3349)
                    {
                        frontier_phi_77_pred = _3338;
                        frontier_phi_77_pred_1 = _3337;
                        frontier_phi_77_pred_2 = _3336;
                        frontier_phi_77_pred_3 = _3335;
                        frontier_phi_77_pred_4 = _3334;
                        frontier_phi_77_pred_5 = _3333;
                    }
                    else
                    {
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        float _3557 = _3335;
                        float _3558 = _3336;
                        float _3559 = _3337;
                        float _3560 = _3338;
                        uint _3561 = _3348;
                        uint _3562;
                        vec4 _3587;
                        float _3588;
                        vec4 _3603;
                        vec3 _3615;
                        vec4 _3630;
                        vec4 _3645;
                        float _3691;
                        bool _3692;
                        for (;;)
                        {
                            uint _3572 = ((_3339 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3561));
                            _3562 = (_3561 + 4294967295u) & _3561;
                            uint _3574 = _3572 * 40u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3588 = _3587.w;
                            uint _3590 = (_3572 * 40u) + 4u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3572 * 40u) + 8u;
                            _3615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x));
                            uint _3617 = (_3572 * 40u) + 16u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3572 * 40u) + 20u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3572 * 40u) + 24u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3666 = (_3572 * 40u) + 28u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3691 = fma(_2907, _3679.z, fma(_2906, _3679.y, _3679.x * _2905)) + _3679.w;
                            _3692 = !((fma(_2907, _3660.z, fma(_2906, _3660.y, _3660.x * _2905)) + _3660.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3692)
                            {
                                float _3719 = _3587.x - _2905;
                                float _3720 = _3587.y - _2906;
                                float _3721 = _3587.z - _2907;
                                float _3722 = dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721));
                                float _3725 = inversesqrt(_3722);
                                float _3726 = _3725 * _3719;
                                float _3727 = _3725 * _3720;
                                float _3728 = _3725 * _3721;
                                float _3732 = 1.0 - (_3722 / (_3588 * _3588));
                                float _4908 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3737 = sqrt(_3722) * _3603.w;
                                float _3739 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                                float _3740 = _3739 * _3739;
                                float _3743 = ((1.0 - _3740) * dot(vec3(_3726, _3727, _3728), vec3(_1146, _1149, _1152))) + _3740;
                                float _3746 = _3737 * _3737;
                                float _3750 = (fma(_2907, _3630.z, fma(_2906, _3630.y, _3630.x * _2905)) + _3630.w) / _3691;
                                float _3751 = (fma(_2907, _3645.z, fma(_2906, _3645.y, _3645.x * _2905)) + _3645.w) / _3691;
                                float _3755 = 1.0 - dot(vec2(_3750, _3751), vec2(_3750, _3751));
                                float _4924 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3757 = _3756 * (((isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0))) * _3733) / ((_3746 * 0.699999988079071044921875) + 1.0));
                                float _3769 = exp2(log2(1.0 / ((_3746 * 3.5) + 5.0)) * 0.25);
                                float _3770 = 1.0 - _1221;
                                float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                                float _3778 = _3777 * _3777;
                                float _3779 = _3778 * _3778;
                                float _3780 = _3726 - _3199;
                                float _3781 = _3727 - _3200;
                                float _3782 = _3728 - _3201;
                                float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                                float _3790 = dot(vec3(_1146, _1149, _1152), vec3((-0.0) - _3199, (-0.0) - _3200, (-0.0) - _3201));
                                float _4935 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3794 = dot(vec3(_1146, _1149, _1152), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                                float _4946 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                                float _3802 = _3739 * _3778;
                                float _3803 = _3802 * _3802;
                                float _3809 = ((1.0 - _3803) * dot(vec3(_1146, _1149, _1152), vec3(_3726, _3727, _3728))) + _3803;
                                float _4957 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3811 = 1.0 - _3778;
                                float _3821 = (0.5 / (((_3810 * ((_3793 * _3811) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3778) * _3793))) * _3810;
                                float _4968 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3831 = (_3756 * _3733) * (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3801 * _3801) * ((_3746 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3757 * _3603.y;
                                frontier_phi_83_pred_1 = _3757 * _3603.x;
                                frontier_phi_83_pred_2 = _3831 * _3615.z;
                                frontier_phi_83_pred_3 = _3831 * _3615.y;
                                frontier_phi_83_pred_4 = _3831 * _3615.x;
                                frontier_phi_83_pred_5 = _3757 * _3603.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3839 = frontier_phi_83_pred;
                            _3838 = frontier_phi_83_pred_1;
                            _3837 = frontier_phi_83_pred_2;
                            _3836 = frontier_phi_83_pred_3;
                            _3835 = frontier_phi_83_pred_4;
                            _3840 = frontier_phi_83_pred_5;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            if (_3562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3562;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3547;
                        frontier_phi_77_pred_1 = _3546;
                        frontier_phi_77_pred_2 = _3545;
                        frontier_phi_77_pred_3 = _3544;
                        frontier_phi_77_pred_4 = _3543;
                        frontier_phi_77_pred_5 = _3542;
                    }
                    _3184 = frontier_phi_77_pred;
                    _3182 = frontier_phi_77_pred_1;
                    _3180 = frontier_phi_77_pred_2;
                    _3178 = frontier_phi_77_pred_3;
                    _3176 = frontier_phi_77_pred_4;
                    _3174 = frontier_phi_77_pred_5;
                    uint _3340 = _3339 + 1u;
                    if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3333 = _3174;
                        _3334 = _3176;
                        _3335 = _3178;
                        _3336 = _3180;
                        _3337 = _3182;
                        _3338 = _3184;
                        _3339 = _3340;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3178;
                frontier_phi_58_59_ladder_1 = _3184;
                frontier_phi_58_59_ladder_2 = _3182;
                frontier_phi_58_59_ladder_3 = _3180;
                frontier_phi_58_59_ladder_4 = _3176;
                frontier_phi_58_59_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_58_59_ladder = _3056;
                frontier_phi_58_59_ladder_1 = _3062;
                frontier_phi_58_59_ladder_2 = _3060;
                frontier_phi_58_59_ladder_3 = _3058;
                frontier_phi_58_59_ladder_4 = _3054;
                frontier_phi_58_59_ladder_5 = _3052;
            }
            _3173 = frontier_phi_58_59_ladder_5;
            _3175 = frontier_phi_58_59_ladder_4;
            _3177 = frontier_phi_58_59_ladder;
            _3179 = frontier_phi_58_59_ladder_3;
            _3181 = frontier_phi_58_59_ladder_2;
            _3183 = frontier_phi_58_59_ladder_1;
        }
        float _3188 = isnan(1.0) ? _1205 : (isnan(_1205) ? 1.0 : min(_1205, 1.0));
        _2964 = (_3188 * _3179) + _2400;
        _2966 = (_3188 * _3181) + _2402;
        _2968 = (_3188 * _3183) + _2404;
        _2970 = ((_3173 * _1190) * _3188) + _2745;
        _2972 = ((_3175 * _1192) * _3188) + _2747;
        _2974 = ((_3177 * _1193) * _3188) + _2749;
    }
    else
    {
        _2964 = _2400;
        _2966 = _2402;
        _2968 = _2404;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    float _4984 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _4995 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _5006 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _2991 = ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2964 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1205))) + ((_2970 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2040)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2966 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1205))) + ((_2972 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2040)) * cbPerFrame._m0[3u].x);
    float _2993 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2968 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1205))) + ((_2974 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2040)) * cbPerFrame._m0[3u].x);
    uint _2994 = _1165 + 6u;
    float _3002 = _1127 / cbSceneParam._m0[86u].x;
    float _3003 = _1128 / cbSceneParam._m0[86u].y;
    vec4 _3017 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, (log2((isnan(cbSceneParam._m0[77u].w) ? _1050 : (isnan(_1050) ? cbSceneParam._m0[77u].w : min(_1050, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3019 = _3017.x;
    float _3020 = _3017.y;
    float _3021 = _3017.z;
    float _3022 = _3017.w;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_1050 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_1050) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1050 : min(cbSceneParam._m0[80u].w, _1050));
        float _3078 = _3077 / _1050;
        float _3089 = _3078 * _1100;
        float _3090 = _1101 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3093 = _3078 * _1102;
        float _3095 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3096 = _3095 + cbSceneParam._m0[79u].w;
        float _3097 = cbSceneParam._m0[79u].w - _3090;
        float _3103 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3093 * _3093));
        float _3106 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3103;
        float _3111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3290;
        if (abs((_3091 - _3095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3290 = ((((_3096 > 0.0) ? exp2(_3111 * _3096) : (2.0 - exp2(_3113 * _3096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3106;
        }
        else
        {
            float _3234 = 1.0 / cbSceneParam._m0[80u].x;
            float _3235 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : max(_3096, _3097));
            float _3236 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : min(_3096, _3097));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            _3290 = ((abs(_3103 / _3091) * cbSceneParam._m0[80u].y) * ((((_3245 - _3246) * 2.0) - ((exp2(_3111 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0)))) - exp2(_3111 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))))) * _3234)) - ((exp2(_3113 * _3245) - exp2(_3113 * _3246)) * _3234))) + (_3106 * cbSceneParam._m0[80u].z);
        }
        vec4 _3292 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, 1.0), 0.0);
        float _3301 = exp2((_3290 * (-1.44269502162933349609375)) * (1.0 - _3292.w));
        float _3302 = log2(_3301);
        float _3318 = log2(_3022);
        _3115 = (exp2(_3318 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].x)) * _3292.x) / cbSceneParam._m0[78u].x)) + _3019;
        _3117 = (exp2(_3318 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].y)) * _3292.y) / cbSceneParam._m0[78u].y)) + _3020;
        _3119 = (exp2(_3318 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].z)) * _3292.z) / cbSceneParam._m0[78u].z)) + _3021;
        _3121 = _3301 * _3022;
    }
    else
    {
        _3115 = _3019;
        _3117 = _3020;
        _3119 = _3021;
        _3121 = _3022;
    }
    bool _3328;
    vec4 _3131;
    vec4 _3153;
    float _3155;
    float _3159;
    float _3160;
    float _3161;
    float _3162;
    bool _3172;
    for (;;)
    {
        _3131 = cbMatDynParam._m0[0u];
        float _3133 = roundEven(_3131.y);
        bool _3134 = _3133 == 3.0;
        float _3135 = log2(_3121);
        float _3142 = exp2(_3135 * cbSceneParam._m0[78u].x) * _2991;
        float _3143 = exp2(_3135 * cbSceneParam._m0[78u].y) * _2992;
        float _3144 = exp2(_3135 * cbSceneParam._m0[78u].z) * _2993;
        float _3151 = _1116 + (-0.5);
        _3153 = cbMtdParam._m0[1u];
        _3155 = _3153.y * _3151;
        float _3158 = (_3133 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3159 = _3158 * (_3134 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3115)));
        _3160 = _3158 * (_3134 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3117)));
        _3161 = _3158 * (_3134 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3119)));
        _3162 = _3151 * 0.999000012874603271484375;
        _3172 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3172)
        {
            if ((cbInstanceData._m0[_1165 + 7u].x + _3162) < 0.5)
            {
                _3328 = true;
                break;
            }
        }
        uint _3269 = _1166 + uint(_3131.w);
        if ((cbInstanceData._m0[_3269].w < 1.0) && ((cbInstanceData._m0[_3269].w + _3162) < 0.5))
        {
            _3328 = true;
            break;
        }
        if ((_3155 + 1.0) < _3153.x)
        {
            _3328 = true;
            break;
        }
        _3328 = false;
        break;
    }
    float _3533;
    if (_3328)
    {
        discard_state = true;
        _3533 = 0.0;
    }
    else
    {
        _3533 = cbInstanceData._m0[_2994].w;
    }
    SV_Target.x = _3159;
    SV_Target.y = _3160;
    SV_Target.z = _3161;
    SV_Target.w = _3533;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2994].w;
    discard_exit();
}


