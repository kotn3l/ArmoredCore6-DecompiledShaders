#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1424;
float _3802;
float _3803;
float _3804;
float _3805;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _284 = _280.z;
    float _297 = exp2(log2((1.0 - _284) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _315 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _327 = exp2(log2(_315.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    float _338 = exp2(log2(cbMtdParam._m0[23u].y * _284) * cbMtdParam._m0[22u].y);
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(1.0) ? _339 : (isnan(_339) ? 1.0 : min(_339, 1.0));
    float _361 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(4.0) ? _362 : (isnan(_362) ? 4.0 : min(_362, 4.0));
    float _376 = floor(_363);
    vec4 _379 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _376));
    vec4 _403 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _414 = cbMtdParam._m0[9u].x * _403.x;
    float _415 = cbMtdParam._m0[9u].y * _403.y;
    float _416 = cbMtdParam._m0[9u].z * _403.z;
    float _423 = (((cbMtdParam._m0[10u].x * _379.x) - _414) * _340) + _414;
    float _424 = (((cbMtdParam._m0[10u].y * _379.y) - _415) * _340) + _415;
    float _425 = (((cbMtdParam._m0[10u].z * _379.z) - _416) * _340) + _416;
    float _431 = exp2(log2(_280.w) * cbMtdParam._m0[23u].w);
    vec4 _444 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _463 = (((cbMtdParam._m0[16u].x * _444.x) - _423) * _431) + _423;
    float _464 = (((cbMtdParam._m0[16u].y * _444.y) - _424) * _431) + _424;
    float _465 = (((cbMtdParam._m0[16u].z * _444.z) - _425) * _431) + _425;
    vec4 _478 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _498 = (((cbMtdParam._m0[19u].x * _478.x) - _463) * _329) + _463;
    float _499 = (((cbMtdParam._m0[19u].y * _478.y) - _464) * _329) + _464;
    float _500 = (((cbMtdParam._m0[19u].z * _478.z) - _465) * _329) + _465;
    vec4 _513 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _538 = (_315.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _513.x) - _498) * _299) + _498);
    float _540 = (_315.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _513.y) - _499) * _299) + _499);
    float _542 = (_315.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _513.z) - _500) * _299) + _500);
    float _546 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _555 = (_546 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _546))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3854 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _563 = ((cbMtdParam._m0[21u].x - _538) * _556) + _538;
    float _564 = ((cbMtdParam._m0[21u].y - _540) * _556) + _540;
    float _565 = ((cbMtdParam._m0[21u].z - _542) * _556) + _542;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _607 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    uint _609 = uint(int(isnan(4.0) ? _607 : (isnan(_607) ? 4.0 : min(_607, 4.0))));
    float _616 = ((_194[_609] - cbMtdParam._m0[22u].z) * _340) + cbMtdParam._m0[22u].z;
    float _619 = ((cbMtdParam._m0[22u].w - _616) * _431) + _616;
    float _622 = ((cbMtdParam._m0[25u].x - _619) * _329) + _619;
    float _625 = ((cbMtdParam._m0[26u].x - _622) * _299) + _622;
    float _627 = _625 - (_625 * _546);
    vec4 _643 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _376));
    vec4 _661 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _663 = _661.x;
    float _664 = _661.y;
    float _669 = cbMtdParam._m0[22u].x + _661.z;
    float _672 = (((_643.z + _193[_609]) - _669) * _340) + _669;
    vec4 _685 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _696 = (((_685.z - _672) + cbMtdParam._m0[28u].y) * _431) + _672;
    float _702 = ((((_284 * 2.0) * _696) - _696) * cbMtdParam._m0[24u].w) + _696;
    vec4 _715 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _726 = (((cbMtdParam._m0[23u].z + _715.z) - _702) * _329) + _702;
    vec4 _739 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _750 = (((_739.z - _726) + cbMtdParam._m0[26u].y) * _299) + _726;
    vec4 _765 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _780 = ((cbMtdParam._m0[27u].y * _546) * ((_765.z * cbMtdParam._m0[27u].x) - _750)) + _750;
    float _792 = ((_643.x - _663) * _340) + _663;
    float _793 = ((_643.y - _664) * _340) + _664;
    float _798 = ((_685.x - _792) * _431) + _792;
    float _799 = ((_685.y - _793) * _431) + _793;
    float _804 = ((_715.x - _798) * _329) + _798;
    float _805 = ((_715.y - _799) * _329) + _799;
    float _814 = ((((_739.x - _804) * _299) + _804) * 2.0) + (-1.0);
    float _815 = ((((_739.y - _805) * _299) + _805) * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _3875 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _821 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _831 = ((cbMtdParam._m0[25u].y * ((_280.x * 2.0) + (-1.0))) + _814) + ((((_765.x * 2.0) + (-1.0)) * _546) * cbMtdParam._m0[26u].w);
    float _832 = ((cbMtdParam._m0[25u].y * ((_280.y * 2.0) + (-1.0))) + _815) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_765.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _835 = fma(_821, _229 * NORMAL.x, fma(_832, _236 * TANGENT.x, (_222 * _214) * _831));
    float _838 = fma(_821, _229 * NORMAL.y, fma(_832, _236 * TANGENT.y, (_222 * _215) * _831));
    float _841 = fma(_821, _229 * NORMAL.z, fma(_832, _236 * TANGENT.z, (_222 * _216) * _831));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _3886 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _849 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3908 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3919 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3930 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _853 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    vec4 _933 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _935 = _933.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1105 = sqrt(((_919 * _919) + (_920 * _920)) + (_921 * _921));
        float _1111 = (cbMatDynParam._m0[5u].x * _1105) + cbMatDynParam._m0[5u].y;
        float _3941 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1116 = (cbMatDynParam._m0[5u].z * _1105) + cbMatDynParam._m0[5u].w;
        float _3952 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) - _1112)) + _1112) < ((_935 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _968 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _971 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _984 = uint(roundEven(NORMAL.w)) * 13u;
    uint _985 = _984 + 9u;
    uint _986 = _985 + uint(cbMatDynParam._m0[0u].w);
    float _992 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_986].x;
    float _993 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_986].y;
    float _994 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_986].z;
    float _3963 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _998 = 1.0 - _853;
    float _999 = _995 * _998;
    float _1000 = _996 * _998;
    float _1001 = _997 * _998;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _853;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _853;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _853;
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    vec4 _1021 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1024 = _1021.x * TEXCOORD_3.w;
    float _1025 = dot(vec3(_846, _847, _848), vec3(_926, _927, _928));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _846) - _926;
    float _1033 = (_1028 * _847) - _927;
    float _1034 = (_1028 * _848) - _928;
    float _1038 = abs(dot(vec3(_926, _927, _928), vec3(_846, _847, _848)));
    float _3996 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_849);
    float _1051 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1057 = (1.0 - _1051) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1058 = _1051 * _1040;
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1423;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1148 = fma(_1094, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086));
        float _1152 = fma(_1094, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086));
        float _1156 = fma(_1094, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086));
        float _1181 = _1086 + _846;
        float _1182 = _1090 + _847;
        float _1183 = _1094 + _848;
        float _1193 = fma(_1183, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1181)) - _1148;
        float _1194 = fma(_1183, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1181)) - _1152;
        float _1195 = fma(_1183, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1181)) - _1156;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1148 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1152 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[34u].z) + ((((((_1156 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1251 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1217.x + (-0.5));
        float _1253 = _1251 * (_1217.y + (-0.5));
        float _1254 = _1251 * (_1217.z + (-0.5));
        float _1261 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1224.x + (-0.5));
        float _1263 = _1261 * (_1224.y + (-0.5));
        float _1264 = _1261 * (_1224.z + (-0.5));
        float _1271 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1231.x + (-0.5));
        float _1273 = _1271 * (_1231.y + (-0.5));
        float _1274 = _1271 * (_1231.z + (-0.5));
        float _1281 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1238.x + (-0.5));
        float _1283 = _1281 * (_1238.y + (-0.5));
        float _1284 = _1281 * (_1238.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1305 = (dot(vec3(_846, _847, _848), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1315 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4044 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1317 + 1.0))) + _1322) * _1285;
        float _1332 = _1253 * 0.5;
        float _1333 = _1263 * 0.5;
        float _1334 = _1273 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_846, _847, _848), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4077 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1359 + 1.0))) + _1364) * _1286;
        float _1374 = _1254 * 0.5;
        float _1375 = _1264 * 0.5;
        float _1376 = _1274 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_846, _847, _848), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4110 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1401 + 1.0))) + _1406) * _1287;
        _1423 = _1254;
        _1425 = _1253;
        _1426 = _1252;
        _1427 = _1264;
        _1428 = _1263;
        _1429 = _1262;
        _1430 = _1274;
        _1431 = _1273;
        _1432 = _1272;
        _1433 = _1287;
        _1434 = _1286;
        _1435 = _1285;
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1424;
        _1425 = _1424;
        _1426 = _1424;
        _1427 = _1424;
        _1428 = _1424;
        _1429 = _1424;
        _1430 = _1424;
        _1431 = _1424;
        _1432 = _1424;
        _1433 = _1424;
        _1434 = _1424;
        _1435 = _1424;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1464 = fma(_1094, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086));
        float _1468 = fma(_1094, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086));
        float _1472 = fma(_1094, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086));
        float _1495 = _1086 + _846;
        float _1496 = _1090 + _847;
        float _1497 = _1094 + _848;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1464;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1468;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1472;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1526 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1464 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1468 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1472 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1563 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1530.x + (-0.5));
        float _1565 = _1563 * (_1530.y + (-0.5));
        float _1566 = _1563 * (_1530.z + (-0.5));
        float _1573 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1537.x + (-0.5));
        float _1575 = _1573 * (_1537.y + (-0.5));
        float _1576 = _1573 * (_1537.z + (-0.5));
        float _1583 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1544.x + (-0.5));
        float _1585 = _1583 * (_1544.y + (-0.5));
        float _1586 = _1583 * (_1544.z + (-0.5));
        float _1593 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1551.x + (-0.5));
        float _1595 = _1593 * (_1551.y + (-0.5));
        float _1596 = _1593 * (_1551.z + (-0.5));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = _1564 * 0.5;
        float _1601 = _1574 * 0.5;
        float _1602 = _1584 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_846, _847, _848), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4173 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1627 + 1.0))) + _1632) * _1597;
        float _1642 = _1565 * 0.5;
        float _1643 = _1575 * 0.5;
        float _1644 = _1585 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_846, _847, _848), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4206 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1669 + 1.0))) + _1674) * _1598;
        float _1684 = _1566 * 0.5;
        float _1685 = _1576 * 0.5;
        float _1686 = _1586 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_846, _847, _848), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4239 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1711 + 1.0))) + _1716) * _1599;
        _1733 = _1566;
        _1734 = _1565;
        _1735 = _1564;
        _1736 = _1576;
        _1737 = _1575;
        _1738 = _1574;
        _1739 = _1586;
        _1740 = _1585;
        _1741 = _1584;
        _1742 = _1599;
        _1743 = _1598;
        _1744 = _1597;
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    }
    else
    {
        _1733 = _1424;
        _1734 = _1424;
        _1735 = _1424;
        _1736 = _1424;
        _1737 = _1424;
        _1738 = _1424;
        _1739 = _1424;
        _1740 = _1424;
        _1741 = _1424;
        _1742 = _1424;
        _1743 = _1424;
        _1744 = _1424;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1436)) + _1436;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1437)) + _1437;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1438)) + _1438;
    float _1780 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1757));
    float _1801 = _1032 * 0.5;
    float _1802 = _1033 * 0.5;
    float _1803 = _1034 * 0.5;
    float _1804 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1807 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1810 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1817 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1423, _1427, _1430, _1433));
        float _1821 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1825 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1832 = dot(vec4(cbModelParam._m0[39u]), vec4(_1801, _1802, _1803, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1801, _1802, _1803, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1869 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1869 : min(cbModelParam._m0[25u].z, _1869));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1094, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1094, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1094, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1931 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1934 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1962 = frontier_phi_17_15_ladder;
        }
        float _2165;
        if (_1931 > 0.0)
        {
            _2165 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2165 = frontier_phi_26_22_ladder;
        }
        float _2419;
        if (_1934 > 0.0)
        {
            _2419 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2419 = frontier_phi_38_33_ladder;
        }
        float _2421 = isnan(_2165) ? _1962 : (isnan(_1962) ? _2165 : min(_1962, _2165));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1928) + _1917;
        float _2427 = (_2422 * _1931) + _1921;
        float _2428 = (_2422 * _1934) + _1925;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2429;
        float _2433 = _2429 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 > _2433) || ((_2427 < _2431) || ((_2426 < _2431) || (_2426 > _2433))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2428, cbModelParam._m0[9u].z, fma(_2427, cbModelParam._m0[9u].y, _2426 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2428, cbModelParam._m0[10u].z, fma(_2427, cbModelParam._m0[10u].y, _2426 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2428, cbModelParam._m0[11u].z, fma(_2427, cbModelParam._m0[11u].y, _2426 * cbModelParam._m0[11u].x))), _1870);
            frontier_phi_16_38_ladder = _2556.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2556.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2556.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_16_38_ladder_2;
        _1952 = frontier_phi_16_38_ladder_1;
        _1954 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1870);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2049;
    float _2051;
    float _2053;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2013 = fma(_1094, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086)) + cbModelParam._m0[21u].w;
        float _2017 = fma(_1094, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086)) + cbModelParam._m0[22u].w;
        float _2021 = fma(_1094, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086)) + cbModelParam._m0[23u].w;
        float _2024 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2027 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2030 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2170;
        if (_2024 > 0.0)
        {
            _2170 = abs((1.0 - _2013) / _2024);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2013 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2170 = frontier_phi_28_24_ladder;
        }
        float _2446;
        if (_2027 > 0.0)
        {
            _2446 = abs((1.0 - _2017) / _2027);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2017 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2446 = frontier_phi_40_35_ladder;
        }
        float _2659;
        if (_2030 > 0.0)
        {
            _2659 = abs((1.0 - _2021) / _2030);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2021 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2659 = frontier_phi_49_46_ladder;
        }
        float _2661 = isnan(_2446) ? _2170 : (isnan(_2170) ? _2446 : min(_2170, _2446));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _2024) + _2013;
        float _2667 = (_2662 * _2027) + _2017;
        float _2668 = (_2662 * _2030) + _2021;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_25_49_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _2049 = frontier_phi_25_49_ladder_2;
        _2051 = frontier_phi_25_49_ladder_1;
        _2053 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1959);
        _2049 = _2033.x * cbModelParam._m0[1u].z;
        _2051 = _2033.y * cbModelParam._m0[1u].z;
        _2053 = _2033.z * cbModelParam._m0[1u].z;
    }
    float _2066 = (((_1057 * _1009) + _1058) * _1024) * ((cbModelParam._m0[1u].w * (_2049 - _1950)) + _1950);
    float _2068 = (((_1057 * _1011) + _1058) * _1024) * ((cbModelParam._m0[1u].w * (_2051 - _1952)) + _1952);
    float _2070 = (((_1057 * _1012) + _1058) * _1024) * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2073 = fma(_2070, cbSceneParam._m0[89u].z, fma(_2068, cbSceneParam._m0[89u].y, _2066 * cbSceneParam._m0[89u].x));
    float _2076 = fma(_2070, cbSceneParam._m0[90u].z, fma(_2068, cbSceneParam._m0[90u].y, _2066 * cbSceneParam._m0[90u].x));
    float _2079 = fma(_2070, cbSceneParam._m0[91u].z, fma(_2068, cbSceneParam._m0[91u].y, _2066 * cbSceneParam._m0[91u].x));
    uvec4 _2089 = floatBitsToUint(cbInstanceData._m0[_984 + 5u]);
    uint _2091 = _2089.x * 14u;
    uint _2092 = _2091 + 13u;
    float _2099 = _1024 + (-1.0);
    float _2104 = (cbLight._m0[_2092].x * _2099) + 1.0;
    float _2105 = (cbLight._m0[_2092].y * _2099) + 1.0;
    float _2106 = (cbLight._m0[_2092].z * _2099) + 1.0;
    float _2107 = (cbLight._m0[_2092].w * _2099) + 1.0;
    uint _2108 = _2091 + 5u;
    float _2114 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2118 = _2091 + 4u;
    float _2124 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2128 = _2091 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_846, _847, _848));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_846, _847, _848));
    float _4375 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4386 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2108].x * _2114) * _2149) + ((cbLight._m0[_2118].x * _2124) * _2147);
    float _2157 = ((_2114 * cbLight._m0[_2108].y) * _2149) + ((_2124 * cbLight._m0[_2118].y) * _2147);
    float _2158 = ((_2114 * cbLight._m0[_2108].z) * _2149) + ((_2124 * cbLight._m0[_2118].z) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2091 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2164)
    {
        _2175 = _2156;
        _2177 = _2157;
        _2179 = _2158;
    }
    else
    {
        uint _2183 = _2091 + 6u;
        float _2199 = (dot(vec3(cbLight._m0[_2091 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4397 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2202 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2175 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _2156;
        _2177 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _2157;
        _2179 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _2158;
    }
    bool _2182 = _2162.y == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2182)
    {
        _2220 = _2175;
        _2222 = _2177;
        _2224 = _2179;
    }
    else
    {
        uint _2390 = _2091 + 7u;
        float _2406 = (dot(vec3(cbLight._m0[_2091 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4413 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2409 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2220 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2175;
        _2222 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2177;
        _2224 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2179;
    }
    uint _2227 = _2091 + 8u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _849) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2091].x + _926;
    float _2243 = cbLight._m0[_2091].y + _927;
    float _2244 = cbLight._m0[_2091].z + _928;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2091].xyz));
    float _4429 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _4440 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2256 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2257 = dot(vec3(_846, _847, _848), vec3(_2249, _2250, _2251));
    float _4451 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2249, _2250, _2251));
    float _4462 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2241 * _2241;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2278 = 0.959999978542327880859375 - _1006;
    float _2280 = 0.959999978542327880859375 - _1007;
    float _2281 = 0.959999978542327880859375 - _1008;
    float _2288 = 1.0 - _2241;
    float _2299 = (0.5 / (((_2256 * ((_2255 * _2288) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2288) + _2241) * _2255))) * _2255;
    float _4473 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    uint _2312 = _2091 + 9u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _849) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2128].x + _926;
    float _2326 = cbLight._m0[_2128].y + _927;
    float _2327 = cbLight._m0[_2128].z + _928;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2128].xyz));
    float _4484 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2339 = dot(vec3(_846, _847, _848), vec3(_2332, _2333, _2334));
    float _4495 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2332, _2333, _2334));
    float _4506 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2324 * _2324;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
    float _2365 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2256 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2365) + _2324) * _2338))) * _2338;
    float _4517 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    float _2387 = (((((_2358 * _2278) + _1009) * cbLight._m0[_2312].x) * _2377) * _2114) + (((((_2277 * _2278) + _1009) * cbLight._m0[_2227].x) * _2301) * _2124);
    float _2388 = (((((_2358 * _2280) + _1011) * cbLight._m0[_2312].y) * _2377) * _2114) + (((((_2277 * _2280) + _1011) * cbLight._m0[_2227].y) * _2301) * _2124);
    float _2389 = (((((_2358 * _2281) + _1012) * cbLight._m0[_2312].z) * _2377) * _2114) + (((((_2277 * _2281) + _1012) * cbLight._m0[_2227].z) * _2301) * _2124);
    float _2451;
    float _2453;
    float _2455;
    if (_2164)
    {
        _2451 = _2387;
        _2453 = _2388;
        _2455 = _2389;
    }
    else
    {
        uint _2457 = _2091 + 2u;
        uint _2461 = _2091 + 10u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _849) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _926;
        float _2478 = cbLight._m0[_2457].y + _927;
        float _2479 = cbLight._m0[_2457].z + _928;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2457].xyz));
        float _4528 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2491 = dot(vec3(_846, _847, _848), vec3(_2484, _2485, _2486));
        float _4539 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4550 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2517 = 1.0 - _2476;
        float _2527 = (0.5 / (((_2256 * ((_2490 * _2517) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2517) + _2476) * _2490))) * _2490;
        float _4561 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2451 = (((((_2510 * _2278) + _1009) * cbLight._m0[_2461].x) * _2529) * _2530) + _2387;
        _2453 = (((((_2510 * _2280) + _1011) * cbLight._m0[_2461].y) * _2529) * _2530) + _2388;
        _2455 = (((((_2510 * _2281) + _1012) * cbLight._m0[_2461].z) * _2529) * _2530) + _2389;
    }
    float _2565;
    float _2567;
    float _2569;
    if (_2182)
    {
        _2565 = _2451;
        _2567 = _2453;
        _2569 = _2455;
    }
    else
    {
        uint _2576 = _2091 + 3u;
        uint _2580 = _2091 + 11u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _849) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _926;
        float _2597 = cbLight._m0[_2576].y + _927;
        float _2598 = cbLight._m0[_2576].z + _928;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2576].xyz));
        float _4577 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2610 = dot(vec3(_846, _847, _848), vec3(_2603, _2604, _2605));
        float _4588 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4599 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2256 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2636) + _2595) * _2609))) * _2609;
        float _4610 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2565 = (((((_2629 * _2278) + _1009) * cbLight._m0[_2580].x) * _2648) * _2649) + _2451;
        _2567 = (((((_2629 * _2280) + _1011) * cbLight._m0[_2580].y) * _2648) * _2649) + _2453;
        _2569 = (((((_2629 * _2281) + _1012) * cbLight._m0[_2580].z) * _2648) * _2649) + _2455;
    }
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_2089.y == 0u)
    {
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2724;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2724;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2724;
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.x;
        uint _2751 = uint((float(_2739.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _2740))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _2740)));
        float _2761 = (log2(_2727 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2762 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        uint _2765 = uint(isnan(14.0) ? _2762 : (isnan(_2762) ? 14.0 : min(_2762, 14.0)));
        uvec4 _2770 = texelFetch(g_lightClusterGridBuffer, int(((_2765 << 2u) + (_2751 << 6u)) >> 2u));
        uint _2771 = _2770.x;
        uint _2772 = _2739.z;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((((1u << ((_2772 >> 4u) & 15u)) + 4294967295u) & _2771) == 0u) || ((_2772 & 240u) == 0u))
        {
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
        }
        else
        {
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3041)
                {
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                else
                {
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    uint _3176;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3040;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3180 = uint(findLSB(_3176)) + (_3031 << 5u);
                        uint _3177 = (_3176 + 4294967295u) & _3176;
                        uint _3182 = _3180 * 48u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3202 = (_3180 * 48u) + 4u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3221 = (_3180 * 48u) + 8u;
                        vec3 _3232 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x));
                        float _3236 = _3196.x - _2725;
                        float _3237 = _3196.y - _2726;
                        float _3238 = _3196.z - _2727;
                        float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                        float _3242 = inversesqrt(_3239);
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3246 = dot(vec3(_965, _968, _971), vec3(_3243, _3244, _3245));
                        float _3251 = 1.0 - (_3239 * _3196.w);
                        float _4636 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3253 = sqrt(_3239) * _3215.w;
                        float _3256 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3246) + _3257;
                        float _3263 = _3253 * _3253;
                        float _3267 = ((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3252) / ((_3263 * 0.699999988079071044921875) + 1.0);
                        float _3271 = (-0.0) - _2725;
                        float _3272 = (-0.0) - _2726;
                        float _3273 = (-0.0) - _2727;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3288 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _1040;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_965, _968, _971), vec3(_3278, _3279, _3280));
                        float _4652 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3313 = dot(vec3(_965, _968, _971), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4663 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3256 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3246) + _3322;
                        float _4674 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4685 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3320 * _3320) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125))) * _3252;
                        _3100 = (_3267 * _3215.x) + _3173;
                        _3101 = (_3267 * _3215.y) + _3174;
                        _3102 = (_3267 * _3215.z) + _3175;
                        _3097 = (_3348 * _3232.x) + _3170;
                        _3098 = (_3348 * _3232.y) + _3171;
                        _3099 = (_3348 * _3232.z) + _3172;
                        if (_3177 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3177;
                        }
                    }
                    frontier_phi_66_pred = _3097;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                _2873 = frontier_phi_66_pred;
                _2883 = frontier_phi_66_pred_1;
                _2881 = frontier_phi_66_pred_2;
                _2879 = frontier_phi_66_pred_3;
                _2877 = frontier_phi_66_pred_4;
                _2875 = frontier_phi_66_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2873;
                    _3026 = _2875;
                    _3027 = _2877;
                    _3028 = _2879;
                    _3029 = _2881;
                    _3030 = _2883;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
        }
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.z;
        uint _2889 = (_2887 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2889) & _2771) == 0u)
        {
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
            float _3019 = _3018 * _2725;
            float _3020 = _3018 * _2726;
            float _3021 = _3018 * _2727;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2889 < ((_2887 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3153 = _2872;
                float _3154 = _2874;
                float _3155 = _2876;
                float _3156 = _2878;
                float _3157 = _2880;
                float _3158 = _2882;
                uint _3159 = _2889;
                uint _3168;
                bool _3169;
                for (;;)
                {
                    _3168 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                    _3169 = _3168 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3169)
                    {
                        frontier_phi_77_pred = _3158;
                        frontier_phi_77_pred_1 = _3157;
                        frontier_phi_77_pred_2 = _3156;
                        frontier_phi_77_pred_3 = _3155;
                        frontier_phi_77_pred_4 = _3154;
                        frontier_phi_77_pred_5 = _3153;
                    }
                    else
                    {
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        uint _3381 = _3168;
                        uint _3382;
                        vec4 _3407;
                        float _3408;
                        vec4 _3423;
                        vec3 _3435;
                        vec4 _3450;
                        vec4 _3465;
                        float _3511;
                        bool _3512;
                        for (;;)
                        {
                            uint _3392 = ((_3159 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3381));
                            _3382 = (_3381 + 4294967295u) & _3381;
                            uint _3394 = _3392 * 40u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3408 = _3407.w;
                            uint _3410 = (_3392 * 40u) + 4u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3392 * 40u) + 8u;
                            _3435 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x));
                            uint _3437 = (_3392 * 40u) + 16u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3392 * 40u) + 20u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3392 * 40u) + 24u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3486 = (_3392 * 40u) + 28u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3511 = fma(_2727, _3499.z, fma(_2726, _3499.y, _3499.x * _2725)) + _3499.w;
                            _3512 = !((fma(_2727, _3480.z, fma(_2726, _3480.y, _3480.x * _2725)) + _3480.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3512)
                            {
                                float _3539 = _3407.x - _2725;
                                float _3540 = _3407.y - _2726;
                                float _3541 = _3407.z - _2727;
                                float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                                float _3545 = inversesqrt(_3542);
                                float _3546 = _3545 * _3539;
                                float _3547 = _3545 * _3540;
                                float _3548 = _3545 * _3541;
                                float _3552 = 1.0 - (_3542 / (_3408 * _3408));
                                float _4696 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3557 = sqrt(_3542) * _3423.w;
                                float _3559 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                                float _3560 = _3559 * _3559;
                                float _3563 = ((1.0 - _3560) * dot(vec3(_3546, _3547, _3548), vec3(_965, _968, _971))) + _3560;
                                float _3566 = _3557 * _3557;
                                float _3570 = (fma(_2727, _3450.z, fma(_2726, _3450.y, _3450.x * _2725)) + _3450.w) / _3511;
                                float _3571 = (fma(_2727, _3465.z, fma(_2726, _3465.y, _3465.x * _2725)) + _3465.w) / _3511;
                                float _3575 = 1.0 - dot(vec2(_3570, _3571), vec2(_3570, _3571));
                                float _4712 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3577 = _3576 * (((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3553) / ((_3566 * 0.699999988079071044921875) + 1.0));
                                float _3589 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                                float _3590 = 1.0 - _1040;
                                float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                                float _3598 = _3597 * _3597;
                                float _3599 = _3598 * _3598;
                                float _3600 = _3546 - _3019;
                                float _3601 = _3547 - _3020;
                                float _3602 = _3548 - _3021;
                                float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                                float _3610 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4723 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3614 = dot(vec3(_965, _968, _971), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                                float _4734 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                                float _3622 = _3559 * _3598;
                                float _3623 = _3622 * _3622;
                                float _3629 = ((1.0 - _3623) * dot(vec3(_965, _968, _971), vec3(_3546, _3547, _3548))) + _3623;
                                float _4745 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3631 = 1.0 - _3598;
                                float _3641 = (0.5 / (((_3630 * ((_3613 * _3631) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3598) * _3613))) * _3630;
                                float _4756 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3651 = (_3576 * _3553) * (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) / ((_3621 * _3621) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3577 * _3423.y;
                                frontier_phi_83_pred_1 = _3577 * _3423.x;
                                frontier_phi_83_pred_2 = _3651 * _3435.z;
                                frontier_phi_83_pred_3 = _3651 * _3435.y;
                                frontier_phi_83_pred_4 = _3651 * _3435.x;
                                frontier_phi_83_pred_5 = _3577 * _3423.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_83_pred;
                            _3658 = frontier_phi_83_pred_1;
                            _3657 = frontier_phi_83_pred_2;
                            _3656 = frontier_phi_83_pred_3;
                            _3655 = frontier_phi_83_pred_4;
                            _3660 = frontier_phi_83_pred_5;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            if (_3382 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3382;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3367;
                        frontier_phi_77_pred_1 = _3366;
                        frontier_phi_77_pred_2 = _3365;
                        frontier_phi_77_pred_3 = _3364;
                        frontier_phi_77_pred_4 = _3363;
                        frontier_phi_77_pred_5 = _3362;
                    }
                    _3004 = frontier_phi_77_pred;
                    _3002 = frontier_phi_77_pred_1;
                    _3000 = frontier_phi_77_pred_2;
                    _2998 = frontier_phi_77_pred_3;
                    _2996 = frontier_phi_77_pred_4;
                    _2994 = frontier_phi_77_pred_5;
                    uint _3160 = _3159 + 1u;
                    if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3153 = _2994;
                        _3154 = _2996;
                        _3155 = _2998;
                        _3156 = _3000;
                        _3157 = _3002;
                        _3158 = _3004;
                        _3159 = _3160;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2998;
                frontier_phi_58_59_ladder_1 = _3004;
                frontier_phi_58_59_ladder_2 = _3002;
                frontier_phi_58_59_ladder_3 = _3000;
                frontier_phi_58_59_ladder_4 = _2996;
                frontier_phi_58_59_ladder_5 = _2994;
            }
            else
            {
                frontier_phi_58_59_ladder = _2876;
                frontier_phi_58_59_ladder_1 = _2882;
                frontier_phi_58_59_ladder_2 = _2880;
                frontier_phi_58_59_ladder_3 = _2878;
                frontier_phi_58_59_ladder_4 = _2874;
                frontier_phi_58_59_ladder_5 = _2872;
            }
            _2993 = frontier_phi_58_59_ladder_5;
            _2995 = frontier_phi_58_59_ladder_4;
            _2997 = frontier_phi_58_59_ladder;
            _2999 = frontier_phi_58_59_ladder_3;
            _3001 = frontier_phi_58_59_ladder_2;
            _3003 = frontier_phi_58_59_ladder_1;
        }
        float _3008 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _2784 = (_3008 * _2999) + _2220;
        _2786 = (_3008 * _3001) + _2222;
        _2788 = (_3008 * _3003) + _2224;
        _2790 = ((_2993 * _1009) * _3008) + _2565;
        _2792 = ((_2995 * _1011) * _3008) + _2567;
        _2794 = ((_2997 * _1012) * _3008) + _2569;
    }
    else
    {
        _2784 = _2220;
        _2786 = _2222;
        _2788 = _2224;
        _2790 = _2565;
        _2792 = _2567;
        _2794 = _2569;
    }
    float _4772 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4783 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4794 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2811 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2784 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1024))) + ((_2790 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2786 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1024))) + ((_2792 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _2813 = ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2788 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1024))) + ((_2794 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    uint _2814 = _984 + 6u;
    float _2822 = _946 / cbSceneParam._m0[86u].x;
    float _2823 = _947 / cbSceneParam._m0[86u].y;
    vec4 _2837 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2839 = _2837.x;
    float _2840 = _2837.y;
    float _2841 = _2837.z;
    float _2842 = _2837.w;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _2897 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _2898 = _2897 / _869;
        float _2909 = _2898 * _919;
        float _2910 = _920 * _2898;
        float _2911 = (-0.0) - _2910;
        float _2913 = _2898 * _921;
        float _2915 = (cbSceneParam._m0[77u].w * _2911) / _2897;
        float _2916 = _2915 + cbSceneParam._m0[79u].w;
        float _2917 = cbSceneParam._m0[79u].w - _2910;
        float _2923 = sqrt(((_2909 * _2909) + (_2910 * _2910)) + (_2913 * _2913));
        float _2926 = (1.0 - (cbSceneParam._m0[77u].w / _2897)) * _2923;
        float _2931 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2933 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2911 - _2915) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2916 > 0.0) ? exp2(_2931 * _2916) : (2.0 - exp2(_2933 * _2916))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2926;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2917) ? _2916 : (isnan(_2916) ? _2917 : max(_2916, _2917));
            float _3056 = isnan(_2917) ? _2916 : (isnan(_2916) ? _2917 : min(_2916, _2917));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3110 = ((abs(_2923 / _2911) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2931 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2931 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2933 * _3065) - exp2(_2933 * _3066)) * _3054))) + (_2926 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2842);
        _2935 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2839;
        _2937 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2840;
        _2939 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2841;
        _2941 = _3121 * _2842;
    }
    else
    {
        _2935 = _2839;
        _2937 = _2840;
        _2939 = _2841;
        _2941 = _2842;
    }
    bool _3148;
    vec4 _2951;
    vec4 _2973;
    float _2975;
    float _2979;
    float _2980;
    float _2981;
    float _2982;
    bool _2992;
    for (;;)
    {
        _2951 = cbMatDynParam._m0[0u];
        float _2953 = roundEven(_2951.y);
        bool _2954 = _2953 == 3.0;
        float _2955 = log2(_2941);
        float _2962 = exp2(_2955 * cbSceneParam._m0[78u].x) * _2811;
        float _2963 = exp2(_2955 * cbSceneParam._m0[78u].y) * _2812;
        float _2964 = exp2(_2955 * cbSceneParam._m0[78u].z) * _2813;
        float _2971 = _935 + (-0.5);
        _2973 = cbMtdParam._m0[1u];
        _2975 = _2973.y * _2971;
        float _2978 = (_2953 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2979 = _2978 * (_2954 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2935)));
        _2980 = _2978 * (_2954 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2937)));
        _2981 = _2978 * (_2954 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2939)));
        _2982 = _2971 * 0.999000012874603271484375;
        _2992 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2992)
        {
            if ((cbInstanceData._m0[_984 + 7u].x + _2982) < 0.5)
            {
                _3148 = true;
                break;
            }
        }
        uint _3089 = _985 + uint(_2951.w);
        if ((cbInstanceData._m0[_3089].w < 1.0) && ((cbInstanceData._m0[_3089].w + _2982) < 0.5))
        {
            _3148 = true;
            break;
        }
        if ((_2975 + 1.0) < _2973.x)
        {
            _3148 = true;
            break;
        }
        _3148 = false;
        break;
    }
    float _3353;
    if (_3148)
    {
        discard_state = true;
        _3353 = 0.0;
    }
    else
    {
        _3353 = cbInstanceData._m0[_2814].w;
    }
    SV_Target.x = _2979;
    SV_Target.y = _2980;
    SV_Target.z = _2981;
    SV_Target.w = _3353;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2814].w;
    discard_exit();
}


