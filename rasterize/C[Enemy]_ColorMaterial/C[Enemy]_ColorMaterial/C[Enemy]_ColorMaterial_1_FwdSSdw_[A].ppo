#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1426;
float _3828;
float _3829;
float _3830;
float _3831;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _299 = exp2(log2((1.0 - _286) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _317 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _329 = exp2(log2(_317.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    float _340 = exp2(log2(cbMtdParam._m0[23u].y * _286) * cbMtdParam._m0[22u].y);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0));
    float _363 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(4.0) ? _364 : (isnan(_364) ? 4.0 : min(_364, 4.0));
    float _378 = floor(_365);
    vec4 _381 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _378));
    vec4 _405 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _416 = cbMtdParam._m0[9u].x * _405.x;
    float _417 = cbMtdParam._m0[9u].y * _405.y;
    float _418 = cbMtdParam._m0[9u].z * _405.z;
    float _425 = (((cbMtdParam._m0[10u].x * _381.x) - _416) * _342) + _416;
    float _426 = (((cbMtdParam._m0[10u].y * _381.y) - _417) * _342) + _417;
    float _427 = (((cbMtdParam._m0[10u].z * _381.z) - _418) * _342) + _418;
    float _433 = exp2(log2(_282.w) * cbMtdParam._m0[23u].w);
    vec4 _446 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _465 = (((cbMtdParam._m0[16u].x * _446.x) - _425) * _433) + _425;
    float _466 = (((cbMtdParam._m0[16u].y * _446.y) - _426) * _433) + _426;
    float _467 = (((cbMtdParam._m0[16u].z * _446.z) - _427) * _433) + _427;
    vec4 _480 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _500 = (((cbMtdParam._m0[19u].x * _480.x) - _465) * _331) + _465;
    float _501 = (((cbMtdParam._m0[19u].y * _480.y) - _466) * _331) + _466;
    float _502 = (((cbMtdParam._m0[19u].z * _480.z) - _467) * _331) + _467;
    vec4 _515 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _540 = (_317.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _515.x) - _500) * _301) + _500);
    float _542 = (_317.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _515.y) - _501) * _301) + _501);
    float _544 = (_317.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _515.z) - _502) * _301) + _502);
    float _548 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _557 = (_548 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _548))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3880 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _565 = ((cbMtdParam._m0[21u].x - _540) * _558) + _540;
    float _566 = ((cbMtdParam._m0[21u].y - _542) * _558) + _542;
    float _567 = ((cbMtdParam._m0[21u].z - _544) * _558) + _544;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[28u].w;
    _196[0u] = cbMtdParam._m0[29u].x;
    _195[1u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[31u].x;
    _195[2u] = cbMtdParam._m0[30u].y;
    _196[2u] = cbMtdParam._m0[30u].z;
    _195[3u] = cbMtdParam._m0[29u].w;
    _196[3u] = cbMtdParam._m0[30u].x;
    _195[4u] = cbMtdParam._m0[29u].y;
    _196[4u] = cbMtdParam._m0[29u].z;
    float _609 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _611 = uint(int(isnan(4.0) ? _609 : (isnan(_609) ? 4.0 : min(_609, 4.0))));
    float _618 = ((_196[_611] - cbMtdParam._m0[22u].z) * _342) + cbMtdParam._m0[22u].z;
    float _621 = ((cbMtdParam._m0[22u].w - _618) * _433) + _618;
    float _624 = ((cbMtdParam._m0[25u].x - _621) * _331) + _621;
    float _627 = ((cbMtdParam._m0[26u].x - _624) * _301) + _624;
    float _629 = _627 - (_627 * _548);
    vec4 _645 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _378));
    vec4 _663 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _665 = _663.x;
    float _666 = _663.y;
    float _671 = cbMtdParam._m0[22u].x + _663.z;
    float _674 = (((_645.z + _195[_611]) - _671) * _342) + _671;
    vec4 _687 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _698 = (((_687.z - _674) + cbMtdParam._m0[28u].y) * _433) + _674;
    float _704 = ((((_286 * 2.0) * _698) - _698) * cbMtdParam._m0[24u].w) + _698;
    vec4 _717 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _728 = (((cbMtdParam._m0[23u].z + _717.z) - _704) * _331) + _704;
    vec4 _741 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _752 = (((_741.z - _728) + cbMtdParam._m0[26u].y) * _301) + _728;
    vec4 _767 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _782 = ((cbMtdParam._m0[27u].y * _548) * ((_767.z * cbMtdParam._m0[27u].x) - _752)) + _752;
    float _794 = ((_645.x - _665) * _342) + _665;
    float _795 = ((_645.y - _666) * _342) + _666;
    float _800 = ((_687.x - _794) * _433) + _794;
    float _801 = ((_687.y - _795) * _433) + _795;
    float _806 = ((_717.x - _800) * _331) + _800;
    float _807 = ((_717.y - _801) * _331) + _801;
    float _816 = ((((_741.x - _806) * _301) + _806) * 2.0) + (-1.0);
    float _817 = ((((_741.y - _807) * _301) + _807) * 2.0) + (-1.0);
    float _818 = dot(vec2(_816, _817), vec2(_816, _817));
    float _3901 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _823 = sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))));
    float _833 = ((cbMtdParam._m0[25u].y * ((_282.x * 2.0) + (-1.0))) + _816) + ((((_767.x * 2.0) + (-1.0)) * _548) * cbMtdParam._m0[26u].w);
    float _834 = ((cbMtdParam._m0[25u].y * ((_282.y * 2.0) + (-1.0))) + _817) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_767.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _837 = fma(_823, _231 * NORMAL.x, fma(_834, _238 * TANGENT.x, (_224 * _216) * _833));
    float _840 = fma(_823, _231 * NORMAL.y, fma(_834, _238 * TANGENT.y, (_224 * _217) * _833));
    float _843 = fma(_823, _231 * NORMAL.z, fma(_834, _238 * TANGENT.z, (_224 * _218) * _833));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _3912 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _851 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3934 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3945 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3956 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _855 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _871 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _921 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _911);
    float _922 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _911);
    float _923 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _911);
    float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
    float _928 = _921 * _927;
    float _929 = _922 * _927;
    float _930 = _923 * _927;
    vec4 _935 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _937 = _935.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1107 = sqrt(((_921 * _921) + (_922 * _922)) + (_923 * _923));
        float _1113 = (cbMatDynParam._m0[5u].x * _1107) + cbMatDynParam._m0[5u].y;
        float _3967 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1118 = (cbMatDynParam._m0[5u].z * _1107) + cbMatDynParam._m0[5u].w;
        float _3978 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) - _1114)) + _1114) < ((_937 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _948 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _949 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _967 = fma(_850, cbSceneParam._m0[5u].z, fma(_849, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _848));
    float _970 = fma(_850, cbSceneParam._m0[6u].z, fma(_849, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _848));
    float _973 = fma(_850, cbSceneParam._m0[7u].z, fma(_849, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _848));
    uint _986 = uint(roundEven(NORMAL.w)) * 13u;
    uint _987 = _986 + 9u;
    uint _988 = _987 + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_988].z;
    float _3989 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1000 = 1.0 - _855;
    float _1001 = _997 * _1000;
    float _1002 = _998 * _1000;
    float _1003 = _999 * _1000;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _855;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _855;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _855;
    float _1011 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    vec4 _1023 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _948, cbSceneParam._m0[86u].y * _949));
    float _1026 = _1023.x * TEXCOORD_3.w;
    float _1027 = dot(vec3(_848, _849, _850), vec3(_928, _929, _930));
    float _1030 = _1027 * 2.0;
    float _1034 = (_1030 * _848) - _928;
    float _1035 = (_1030 * _849) - _929;
    float _1036 = (_1030 * _850) - _930;
    float _1040 = abs(dot(vec3(_928, _929, _930), vec3(_848, _849, _850)));
    float _4022 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1042 = sqrt(_851);
    float _1053 = exp2((_1042 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1042 * 3.0));
    float _1059 = (1.0 - _1053) * ((_1042 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1060 = _1053 * _1042;
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1425;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1150 = fma(_1096, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088));
        float _1154 = fma(_1096, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088));
        float _1158 = fma(_1096, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088));
        float _1183 = _1088 + _848;
        float _1184 = _1092 + _849;
        float _1185 = _1096 + _850;
        float _1195 = fma(_1185, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1183)) - _1150;
        float _1196 = fma(_1185, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1183)) - _1154;
        float _1197 = fma(_1185, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1183)) - _1158;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1150 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1154 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[34u].z) + ((((((_1158 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1253 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1219.x + (-0.5));
        float _1255 = _1253 * (_1219.y + (-0.5));
        float _1256 = _1253 * (_1219.z + (-0.5));
        float _1263 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1226.x + (-0.5));
        float _1265 = _1263 * (_1226.y + (-0.5));
        float _1266 = _1263 * (_1226.z + (-0.5));
        float _1273 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1233.x + (-0.5));
        float _1275 = _1273 * (_1233.y + (-0.5));
        float _1276 = _1273 * (_1233.z + (-0.5));
        float _1283 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1240.x + (-0.5));
        float _1285 = _1283 * (_1240.y + (-0.5));
        float _1286 = _1283 * (_1240.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1307 = (dot(vec3(_848, _849, _850), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1317 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4070 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1319 + 1.0))) + _1324) * _1287;
        float _1334 = _1255 * 0.5;
        float _1335 = _1265 * 0.5;
        float _1336 = _1275 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_848, _849, _850), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4103 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1361 + 1.0))) + _1366) * _1288;
        float _1376 = _1256 * 0.5;
        float _1377 = _1266 * 0.5;
        float _1378 = _1276 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_848, _849, _850), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4136 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1403 + 1.0))) + _1408) * _1289;
        _1425 = _1256;
        _1427 = _1255;
        _1428 = _1254;
        _1429 = _1266;
        _1430 = _1265;
        _1431 = _1264;
        _1432 = _1276;
        _1433 = _1275;
        _1434 = _1274;
        _1435 = _1289;
        _1436 = _1288;
        _1437 = _1287;
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1426;
        _1427 = _1426;
        _1428 = _1426;
        _1429 = _1426;
        _1430 = _1426;
        _1431 = _1426;
        _1432 = _1426;
        _1433 = _1426;
        _1434 = _1426;
        _1435 = _1426;
        _1436 = _1426;
        _1437 = _1426;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1096, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088));
        float _1470 = fma(_1096, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088));
        float _1474 = fma(_1096, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088));
        float _1497 = _1088 + _848;
        float _1498 = _1092 + _849;
        float _1499 = _1096 + _850;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_848, _849, _850), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4199 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_848, _849, _850), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4232 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_848, _849, _850), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4265 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1426;
        _1736 = _1426;
        _1737 = _1426;
        _1738 = _1426;
        _1739 = _1426;
        _1740 = _1426;
        _1741 = _1426;
        _1742 = _1426;
        _1743 = _1426;
        _1744 = _1426;
        _1745 = _1426;
        _1746 = _1426;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1438)) + _1438;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1439)) + _1439;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1440)) + _1440;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1034 * 0.5;
    float _1804 = _1035 * 0.5;
    float _1805 = _1036 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1425, _1429, _1432, _1435));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1919 = fma(_1096, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088)) + cbModelParam._m0[13u].w;
        float _1923 = fma(_1096, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088)) + cbModelParam._m0[14u].w;
        float _1927 = fma(_1096, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088)) + cbModelParam._m0[15u].w;
        float _1930 = fma(_1036, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034));
        float _1933 = fma(_1036, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034));
        float _1936 = fma(_1036, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034));
        float _1964;
        if (_1930 > 0.0)
        {
            _1964 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1964 = frontier_phi_17_15_ladder;
        }
        float _2188;
        if (_1933 > 0.0)
        {
            _2188 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2188 = frontier_phi_26_22_ladder;
        }
        float _2445;
        if (_1936 > 0.0)
        {
            _2445 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2445 = frontier_phi_38_33_ladder;
        }
        float _2447 = isnan(_2188) ? _1964 : (isnan(_1964) ? _2188 : min(_1964, _2188));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1930) + _1919;
        float _2453 = (_2448 * _1933) + _1923;
        float _2454 = (_2448 * _1936) + _1927;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2455;
        float _2459 = _2455 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 > _2459) || ((_2453 < _2457) || ((_2452 < _2457) || (_2452 > _2459))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2454, cbModelParam._m0[9u].z, fma(_2453, cbModelParam._m0[9u].y, _2452 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2454, cbModelParam._m0[10u].z, fma(_2453, cbModelParam._m0[10u].y, _2452 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2454, cbModelParam._m0[11u].z, fma(_2453, cbModelParam._m0[11u].y, _2452 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_16_38_ladder = _2582.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2582.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2582.x * cbModelParam._m0[1u].y;
        }
        _1952 = frontier_phi_16_38_ladder_2;
        _1954 = frontier_phi_16_38_ladder_1;
        _1956 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1034, _1035, _1036), _1872);
        _1952 = _1940.x * cbModelParam._m0[1u].y;
        _1954 = _1940.y * cbModelParam._m0[1u].y;
        _1956 = _1940.z * cbModelParam._m0[1u].y;
    }
    float _1960 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1960 : min(cbModelParam._m0[25u].w, _1960));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2015 = fma(_1096, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088)) + cbModelParam._m0[21u].w;
        float _2019 = fma(_1096, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088)) + cbModelParam._m0[22u].w;
        float _2023 = fma(_1096, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088)) + cbModelParam._m0[23u].w;
        float _2026 = fma(_1036, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034));
        float _2029 = fma(_1036, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034));
        float _2032 = fma(_1036, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034));
        float _2193;
        if (_2026 > 0.0)
        {
            _2193 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2193 = frontier_phi_28_24_ladder;
        }
        float _2472;
        if (_2029 > 0.0)
        {
            _2472 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2472 = frontier_phi_40_35_ladder;
        }
        float _2685;
        if (_2032 > 0.0)
        {
            _2685 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2685 = frontier_phi_49_46_ladder;
        }
        float _2687 = isnan(_2472) ? _2193 : (isnan(_2193) ? _2472 : min(_2193, _2472));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _2026) + _2015;
        float _2693 = (_2688 * _2029) + _2019;
        float _2694 = (_2688 * _2032) + _2023;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1961);
            frontier_phi_25_49_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2051 = frontier_phi_25_49_ladder_2;
        _2053 = frontier_phi_25_49_ladder_1;
        _2055 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1034, _1035, _1036), _1961);
        _2051 = _2035.x * cbModelParam._m0[1u].z;
        _2053 = _2035.y * cbModelParam._m0[1u].z;
        _2055 = _2035.z * cbModelParam._m0[1u].z;
    }
    float _2068 = (((_1059 * _1011) + _1060) * _1026) * ((cbModelParam._m0[1u].w * (_2051 - _1952)) + _1952);
    float _2070 = (((_1059 * _1013) + _1060) * _1026) * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2072 = (((_1059 * _1014) + _1060) * _1026) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2070, cbSceneParam._m0[89u].y, _2068 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2070, cbSceneParam._m0[90u].y, _2068 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2070, cbSceneParam._m0[91u].y, _2068 * cbSceneParam._m0[91u].x));
    vec4 _2089 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_948, _949));
    float _2091 = _2089.w;
    float _2103 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2091);
    float _2104 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2091);
    float _2105 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2091);
    uvec4 _2109 = floatBitsToUint(cbInstanceData._m0[_986 + 5u]);
    uint _2111 = _2109.x * 14u;
    uint _2112 = _2111 + 13u;
    float _2119 = _1026 + (-1.0);
    float _2124 = (cbLight._m0[_2112].x * _2119) + 1.0;
    float _2125 = (cbLight._m0[_2112].y * _2119) + 1.0;
    float _2126 = (cbLight._m0[_2112].z * _2119) + 1.0;
    float _2127 = (cbLight._m0[_2112].w * _2119) + 1.0;
    uint _2128 = _2111 + 5u;
    float _2134 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2138 = _2111 + 4u;
    float _2147 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2151 = _2111 | 1u;
    float _2162 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_848, _849, _850));
    float _2165 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_848, _849, _850));
    float _4401 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _4412 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2170 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2172 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2179 = ((cbLight._m0[_2128].x * _2134) * _2172) + (((cbLight._m0[_2138].x * _2103) * _2147) * _2170);
    float _2180 = ((_2134 * cbLight._m0[_2128].y) * _2172) + (((cbLight._m0[_2138].y * _2104) * _2147) * _2170);
    float _2181 = ((_2134 * cbLight._m0[_2128].z) * _2172) + (((cbLight._m0[_2138].z * _2105) * _2147) * _2170);
    uvec4 _2185 = floatBitsToUint(cbLight._m0[_2111 + 12u]);
    bool _2187 = _2185.x == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2187)
    {
        _2198 = _2179;
        _2200 = _2180;
        _2202 = _2181;
    }
    else
    {
        uint _2206 = _2111 + 6u;
        float _2222 = (dot(vec3(cbLight._m0[_2111 + 2u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4423 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2225 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2198 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _2179;
        _2200 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _2180;
        _2202 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _2181;
    }
    bool _2205 = _2185.y == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2205)
    {
        _2243 = _2198;
        _2245 = _2200;
        _2247 = _2202;
    }
    else
    {
        uint _2416 = _2111 + 7u;
        float _2432 = (dot(vec3(cbLight._m0[_2111 + 3u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4439 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2435 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2243 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2198;
        _2245 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2200;
        _2247 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2202;
    }
    uint _2250 = _2111 + 8u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _851) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2111].x + _928;
    float _2266 = cbLight._m0[_2111].y + _929;
    float _2267 = cbLight._m0[_2111].z + _930;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2111].xyz));
    float _4455 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2279 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2280 = dot(vec3(_848, _849, _850), vec3(_2272, _2273, _2274));
    float _4477 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2272, _2273, _2274));
    float _4488 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2264 * _2264;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2301 = 0.959999978542327880859375 - _1008;
    float _2303 = 0.959999978542327880859375 - _1009;
    float _2304 = 0.959999978542327880859375 - _1010;
    float _2311 = 1.0 - _2264;
    float _2322 = (0.5 / (((_2279 * ((_2278 * _2311) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2311) + _2264) * _2278))) * _2278;
    float _4499 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    uint _2338 = _2111 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _851) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2151].x + _928;
    float _2352 = cbLight._m0[_2151].y + _929;
    float _2353 = cbLight._m0[_2151].z + _930;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2151].xyz));
    float _4510 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2365 = dot(vec3(_848, _849, _850), vec3(_2358, _2359, _2360));
    float _4521 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2358, _2359, _2360));
    float _4532 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2391 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2279 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2391) + _2350) * _2364))) * _2364;
    float _4543 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2413 = (((((_2384 * _2301) + _1011) * cbLight._m0[_2338].x) * _2403) * _2134) + ((((cbLight._m0[_2250].x * _2103) * ((_2300 * _2301) + _1011)) * _2324) * _2147);
    float _2414 = (((((_2384 * _2303) + _1013) * cbLight._m0[_2338].y) * _2403) * _2134) + ((((cbLight._m0[_2250].y * _2104) * ((_2300 * _2303) + _1013)) * _2324) * _2147);
    float _2415 = (((((_2384 * _2304) + _1014) * cbLight._m0[_2338].z) * _2403) * _2134) + ((((cbLight._m0[_2250].z * _2105) * ((_2300 * _2304) + _1014)) * _2324) * _2147);
    float _2477;
    float _2479;
    float _2481;
    if (_2187)
    {
        _2477 = _2413;
        _2479 = _2414;
        _2481 = _2415;
    }
    else
    {
        uint _2483 = _2111 + 2u;
        uint _2487 = _2111 + 10u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _851) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _928;
        float _2504 = cbLight._m0[_2483].y + _929;
        float _2505 = cbLight._m0[_2483].z + _930;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2483].xyz));
        float _4554 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2517 = dot(vec3(_848, _849, _850), vec3(_2510, _2511, _2512));
        float _4565 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4576 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2279 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2543) + _2502) * _2516))) * _2516;
        float _4587 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2477 = (((((_2536 * _2301) + _1011) * cbLight._m0[_2487].x) * _2555) * _2556) + _2413;
        _2479 = (((((_2536 * _2303) + _1013) * cbLight._m0[_2487].y) * _2555) * _2556) + _2414;
        _2481 = (((((_2536 * _2304) + _1014) * cbLight._m0[_2487].z) * _2555) * _2556) + _2415;
    }
    float _2591;
    float _2593;
    float _2595;
    if (_2205)
    {
        _2591 = _2477;
        _2593 = _2479;
        _2595 = _2481;
    }
    else
    {
        uint _2602 = _2111 + 3u;
        uint _2606 = _2111 + 11u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _851) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _928;
        float _2623 = cbLight._m0[_2602].y + _929;
        float _2624 = cbLight._m0[_2602].z + _930;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2602].xyz));
        float _4603 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2636 = dot(vec3(_848, _849, _850), vec3(_2629, _2630, _2631));
        float _4614 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4625 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2662 = 1.0 - _2621;
        float _2672 = (0.5 / (((_2279 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2662) + _2621) * _2635))) * _2635;
        float _4636 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2591 = (((((_2655 * _2301) + _1011) * cbLight._m0[_2606].x) * _2674) * _2675) + _2477;
        _2593 = (((((_2655 * _2303) + _1013) * cbLight._m0[_2606].y) * _2674) * _2675) + _2479;
        _2595 = (((((_2655 * _2304) + _1014) * cbLight._m0[_2606].z) * _2674) * _2675) + _2481;
    }
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_2109.y == 0u)
    {
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2750;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2750;
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2750;
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.x;
        uint _2777 = uint((float(_2765.y) * floor(float(uint(cbSceneParam._m0[85u].y * _949) / _2766))) + floor(float(uint(cbSceneParam._m0[85u].x * _948) / _2766)));
        float _2787 = (log2(_2753 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2788 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        uint _2791 = uint(isnan(14.0) ? _2788 : (isnan(_2788) ? 14.0 : min(_2788, 14.0)));
        uvec4 _2796 = texelFetch(g_lightClusterGridBuffer, int(((_2791 << 2u) + (_2777 << 6u)) >> 2u));
        uint _2797 = _2796.x;
        uint _2798 = _2765.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2798 >> 4u) & 15u)) + 4294967295u) & _2797) == 0u) || ((_2798 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            uint _3057 = 0u;
            uint _3066;
            bool _3067;
            for (;;)
            {
                _3066 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                _3067 = _3066 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3067)
                {
                    frontier_phi_66_pred = _3051;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3066;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3057 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _2751;
                        float _3263 = _3222.y - _2752;
                        float _3264 = _3222.z - _2753;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_967, _970, _973), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4662 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _2751;
                        float _3298 = (-0.0) - _2752;
                        float _3299 = (-0.0) - _2753;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3314 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3315 = 1.0 - _1042;
                        float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                        float _3323 = _3322 * _3322;
                        float _3324 = _3323 * _3323;
                        float _3325 = _3304 + _3269;
                        float _3326 = _3305 + _3270;
                        float _3327 = _3306 + _3271;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3335 = dot(vec3(_967, _970, _973), vec3(_3304, _3305, _3306));
                        float _4678 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3339 = dot(vec3(_967, _970, _973), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                        float _4689 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                        float _3347 = _3282 * _3323;
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3272) + _3348;
                        float _4700 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3353 = 1.0 - _3323;
                        float _3363 = (0.5 / (((_3352 * ((_3338 * _3353) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3323) * _3338))) * _3352;
                        float _4711 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3374 = (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3346 * _3346) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3126 = (_3293 * _3241.x) + _3199;
                        _3127 = (_3293 * _3241.y) + _3200;
                        _3128 = (_3293 * _3241.z) + _3201;
                        _3123 = (_3374 * _3258.x) + _3196;
                        _3124 = (_3374 * _3258.y) + _3197;
                        _3125 = (_3374 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_66_pred = _3123;
                    frontier_phi_66_pred_1 = _3128;
                    frontier_phi_66_pred_2 = _3127;
                    frontier_phi_66_pred_3 = _3126;
                    frontier_phi_66_pred_4 = _3125;
                    frontier_phi_66_pred_5 = _3124;
                }
                _2899 = frontier_phi_66_pred;
                _2909 = frontier_phi_66_pred_1;
                _2907 = frontier_phi_66_pred_2;
                _2905 = frontier_phi_66_pred_3;
                _2903 = frontier_phi_66_pred_4;
                _2901 = frontier_phi_66_pred_5;
                uint _3058 = _3057 + 1u;
                if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3051 = _2899;
                    _3052 = _2901;
                    _3053 = _2903;
                    _3054 = _2905;
                    _3055 = _2907;
                    _3056 = _2909;
                    _3057 = _3058;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((4294967295u << _2915) & _2797) == 0u)
        {
            _3019 = _2898;
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
        }
        else
        {
            float _3044 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
            float _3045 = _3044 * _2751;
            float _3046 = _3044 * _2752;
            float _3047 = _3044 * _2753;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3179 = _2898;
                float _3180 = _2900;
                float _3181 = _2902;
                float _3182 = _2904;
                float _3183 = _2906;
                float _3184 = _2908;
                uint _3185 = _2915;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3195)
                    {
                        frontier_phi_77_pred = _3184;
                        frontier_phi_77_pred_1 = _3183;
                        frontier_phi_77_pred_2 = _3182;
                        frontier_phi_77_pred_3 = _3181;
                        frontier_phi_77_pred_4 = _3180;
                        frontier_phi_77_pred_5 = _3179;
                    }
                    else
                    {
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3401 = _3179;
                        float _3402 = _3180;
                        float _3403 = _3181;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        uint _3407 = _3194;
                        uint _3408;
                        vec4 _3433;
                        float _3434;
                        vec4 _3449;
                        vec3 _3461;
                        vec4 _3476;
                        vec4 _3491;
                        float _3537;
                        bool _3538;
                        for (;;)
                        {
                            uint _3418 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3407));
                            _3408 = (_3407 + 4294967295u) & _3407;
                            uint _3420 = _3418 * 40u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3434 = _3433.w;
                            uint _3436 = (_3418 * 40u) + 4u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3418 * 40u) + 8u;
                            _3461 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x));
                            uint _3463 = (_3418 * 40u) + 16u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3418 * 40u) + 20u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3418 * 40u) + 24u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3512 = (_3418 * 40u) + 28u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3537 = fma(_2753, _3525.z, fma(_2752, _3525.y, _3525.x * _2751)) + _3525.w;
                            _3538 = !((fma(_2753, _3506.z, fma(_2752, _3506.y, _3506.x * _2751)) + _3506.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3538)
                            {
                                float _3565 = _3433.x - _2751;
                                float _3566 = _3433.y - _2752;
                                float _3567 = _3433.z - _2753;
                                float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                                float _3571 = inversesqrt(_3568);
                                float _3572 = _3571 * _3565;
                                float _3573 = _3571 * _3566;
                                float _3574 = _3571 * _3567;
                                float _3578 = 1.0 - (_3568 / (_3434 * _3434));
                                float _4722 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3583 = sqrt(_3568) * _3449.w;
                                float _3585 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                                float _3586 = _3585 * _3585;
                                float _3589 = ((1.0 - _3586) * dot(vec3(_3572, _3573, _3574), vec3(_967, _970, _973))) + _3586;
                                float _3592 = _3583 * _3583;
                                float _3596 = (fma(_2753, _3476.z, fma(_2752, _3476.y, _3476.x * _2751)) + _3476.w) / _3537;
                                float _3597 = (fma(_2753, _3491.z, fma(_2752, _3491.y, _3491.x * _2751)) + _3491.w) / _3537;
                                float _3601 = 1.0 - dot(vec2(_3596, _3597), vec2(_3596, _3597));
                                float _4738 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3603 = _3602 * (((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3579) / ((_3592 * 0.699999988079071044921875) + 1.0));
                                float _3615 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                                float _3616 = 1.0 - _1042;
                                float _3623 = sqrt(1.0 - ((1.0 - (_3616 * _3616)) * (1.0 - (_3615 * _3615))));
                                float _3624 = _3623 * _3623;
                                float _3625 = _3624 * _3624;
                                float _3626 = _3572 - _3045;
                                float _3627 = _3573 - _3046;
                                float _3628 = _3574 - _3047;
                                float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                                float _3636 = dot(vec3(_967, _970, _973), vec3((-0.0) - _3045, (-0.0) - _3046, (-0.0) - _3047));
                                float _4749 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3640 = dot(vec3(_967, _970, _973), vec3(_3632 * _3626, _3632 * _3627, _3632 * _3628));
                                float _4760 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3647 = ((_3643 * _3643) * (_3625 + (-1.0))) + 1.0;
                                float _3648 = _3585 * _3624;
                                float _3649 = _3648 * _3648;
                                float _3655 = ((1.0 - _3649) * dot(vec3(_967, _970, _973), vec3(_3572, _3573, _3574))) + _3649;
                                float _4771 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3657 = 1.0 - _3624;
                                float _3667 = (0.5 / (((_3656 * ((_3639 * _3657) + _3624)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3624) * _3639))) * _3656;
                                float _4782 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3677 = (_3602 * _3579) * (((_3625 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3647 * _3647) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3603 * _3449.y;
                                frontier_phi_83_pred_1 = _3603 * _3449.x;
                                frontier_phi_83_pred_2 = _3677 * _3461.z;
                                frontier_phi_83_pred_3 = _3677 * _3461.y;
                                frontier_phi_83_pred_4 = _3677 * _3461.x;
                                frontier_phi_83_pred_5 = _3603 * _3449.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3685 = frontier_phi_83_pred;
                            _3684 = frontier_phi_83_pred_1;
                            _3683 = frontier_phi_83_pred_2;
                            _3682 = frontier_phi_83_pred_3;
                            _3681 = frontier_phi_83_pred_4;
                            _3686 = frontier_phi_83_pred_5;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            if (_3408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3408;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3393;
                        frontier_phi_77_pred_1 = _3392;
                        frontier_phi_77_pred_2 = _3391;
                        frontier_phi_77_pred_3 = _3390;
                        frontier_phi_77_pred_4 = _3389;
                        frontier_phi_77_pred_5 = _3388;
                    }
                    _3030 = frontier_phi_77_pred;
                    _3028 = frontier_phi_77_pred_1;
                    _3026 = frontier_phi_77_pred_2;
                    _3024 = frontier_phi_77_pred_3;
                    _3022 = frontier_phi_77_pred_4;
                    _3020 = frontier_phi_77_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3020;
                        _3180 = _3022;
                        _3181 = _3024;
                        _3182 = _3026;
                        _3183 = _3028;
                        _3184 = _3030;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3024;
                frontier_phi_58_59_ladder_1 = _3030;
                frontier_phi_58_59_ladder_2 = _3028;
                frontier_phi_58_59_ladder_3 = _3026;
                frontier_phi_58_59_ladder_4 = _3022;
                frontier_phi_58_59_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_58_59_ladder = _2902;
                frontier_phi_58_59_ladder_1 = _2908;
                frontier_phi_58_59_ladder_2 = _2906;
                frontier_phi_58_59_ladder_3 = _2904;
                frontier_phi_58_59_ladder_4 = _2900;
                frontier_phi_58_59_ladder_5 = _2898;
            }
            _3019 = frontier_phi_58_59_ladder_5;
            _3021 = frontier_phi_58_59_ladder_4;
            _3023 = frontier_phi_58_59_ladder;
            _3025 = frontier_phi_58_59_ladder_3;
            _3027 = frontier_phi_58_59_ladder_2;
            _3029 = frontier_phi_58_59_ladder_1;
        }
        float _3034 = isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0));
        _2810 = (_3034 * _3025) + _2243;
        _2812 = (_3034 * _3027) + _2245;
        _2814 = (_3034 * _3029) + _2247;
        _2816 = ((_3019 * _1011) * _3034) + _2591;
        _2818 = ((_3021 * _1013) * _3034) + _2593;
        _2820 = ((_3023 * _1014) * _3034) + _2595;
    }
    else
    {
        _2810 = _2243;
        _2812 = _2245;
        _2814 = _2247;
        _2816 = _2591;
        _2818 = _2593;
        _2820 = _2595;
    }
    float _4798 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4809 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4820 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _2837 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2810 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1026))) + ((_2816 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2838 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2812 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1026))) + ((_2818 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2839 = ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2814 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1026))) + ((_2820 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    uint _2840 = _986 + 6u;
    float _2848 = _948 / cbSceneParam._m0[86u].x;
    float _2849 = _949 / cbSceneParam._m0[86u].y;
    vec4 _2863 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, (log2((isnan(cbSceneParam._m0[77u].w) ? _871 : (isnan(_871) ? cbSceneParam._m0[77u].w : min(_871, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2865 = _2863.x;
    float _2866 = _2863.y;
    float _2867 = _2863.z;
    float _2868 = _2863.w;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_871 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_871) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _871 : min(cbSceneParam._m0[80u].w, _871));
        float _2924 = _2923 / _871;
        float _2935 = _2924 * _921;
        float _2936 = _922 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2939 = _2924 * _923;
        float _2941 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2942 = _2941 + cbSceneParam._m0[79u].w;
        float _2943 = cbSceneParam._m0[79u].w - _2936;
        float _2949 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2939 * _2939));
        float _2952 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2949;
        float _2957 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2959 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3136;
        if (abs((_2937 - _2941) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3136 = ((((_2942 > 0.0) ? exp2(_2957 * _2942) : (2.0 - exp2(_2959 * _2942))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2952;
        }
        else
        {
            float _3080 = 1.0 / cbSceneParam._m0[80u].x;
            float _3081 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : max(_2942, _2943));
            float _3082 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : min(_2942, _2943));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            _3136 = ((abs(_2949 / _2937) * cbSceneParam._m0[80u].y) * ((((_3091 - _3092) * 2.0) - ((exp2(_2957 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0)))) - exp2(_2957 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))))) * _3080)) - ((exp2(_2959 * _3091) - exp2(_2959 * _3092)) * _3080))) + (_2952 * cbSceneParam._m0[80u].z);
        }
        vec4 _3138 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, 1.0), 0.0);
        float _3147 = exp2((_3136 * (-1.44269502162933349609375)) * (1.0 - _3138.w));
        float _3148 = log2(_3147);
        float _3164 = log2(_2868);
        _2961 = (exp2(_3164 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].x)) * _3138.x) / cbSceneParam._m0[78u].x)) + _2865;
        _2963 = (exp2(_3164 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].y)) * _3138.y) / cbSceneParam._m0[78u].y)) + _2866;
        _2965 = (exp2(_3164 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].z)) * _3138.z) / cbSceneParam._m0[78u].z)) + _2867;
        _2967 = _3147 * _2868;
    }
    else
    {
        _2961 = _2865;
        _2963 = _2866;
        _2965 = _2867;
        _2967 = _2868;
    }
    bool _3174;
    vec4 _2977;
    vec4 _2999;
    float _3001;
    float _3005;
    float _3006;
    float _3007;
    float _3008;
    bool _3018;
    for (;;)
    {
        _2977 = cbMatDynParam._m0[0u];
        float _2979 = roundEven(_2977.y);
        bool _2980 = _2979 == 3.0;
        float _2981 = log2(_2967);
        float _2988 = exp2(_2981 * cbSceneParam._m0[78u].x) * _2837;
        float _2989 = exp2(_2981 * cbSceneParam._m0[78u].y) * _2838;
        float _2990 = exp2(_2981 * cbSceneParam._m0[78u].z) * _2839;
        float _2997 = _937 + (-0.5);
        _2999 = cbMtdParam._m0[1u];
        _3001 = _2999.y * _2997;
        float _3004 = (_2979 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3005 = _3004 * (_2980 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2961)));
        _3006 = _3004 * (_2980 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2963)));
        _3007 = _3004 * (_2980 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2965)));
        _3008 = _2997 * 0.999000012874603271484375;
        _3018 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3018)
        {
            if ((cbInstanceData._m0[_986 + 7u].x + _3008) < 0.5)
            {
                _3174 = true;
                break;
            }
        }
        uint _3115 = _987 + uint(_2977.w);
        if ((cbInstanceData._m0[_3115].w < 1.0) && ((cbInstanceData._m0[_3115].w + _3008) < 0.5))
        {
            _3174 = true;
            break;
        }
        if ((_3001 + 1.0) < _2999.x)
        {
            _3174 = true;
            break;
        }
        _3174 = false;
        break;
    }
    float _3379;
    if (_3174)
    {
        discard_state = true;
        _3379 = 0.0;
    }
    else
    {
        _3379 = cbInstanceData._m0[_2840].w;
    }
    SV_Target.x = _3005;
    SV_Target.y = _3006;
    SV_Target.z = _3007;
    SV_Target.w = _3379;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2840].w;
    discard_exit();
}


