#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1533;
float _3935;
float _3936;
float _3937;
float _3938;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _277 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _311 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _315 = _311.z;
    float _328 = exp2(log2((1.0 - _315) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _346 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _358 = exp2(log2(_346.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0));
    float _369 = exp2(log2(cbMtdParam._m0[23u].y * _315) * cbMtdParam._m0[22u].y);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0));
    float _392 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = isnan(4.0) ? _393 : (isnan(_393) ? 4.0 : min(_393, 4.0));
    float _407 = floor(_394);
    vec4 _410 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _407));
    vec4 _434 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _445 = cbMtdParam._m0[9u].x * _434.x;
    float _446 = cbMtdParam._m0[9u].y * _434.y;
    float _447 = cbMtdParam._m0[9u].z * _434.z;
    float _454 = (((cbMtdParam._m0[10u].x * _410.x) - _445) * _371) + _445;
    float _455 = (((cbMtdParam._m0[10u].y * _410.y) - _446) * _371) + _446;
    float _456 = (((cbMtdParam._m0[10u].z * _410.z) - _447) * _371) + _447;
    float _462 = exp2(log2(_311.w) * cbMtdParam._m0[23u].w);
    vec4 _475 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _494 = (((cbMtdParam._m0[16u].x * _475.x) - _454) * _462) + _454;
    float _495 = (((cbMtdParam._m0[16u].y * _475.y) - _455) * _462) + _455;
    float _496 = (((cbMtdParam._m0[16u].z * _475.z) - _456) * _462) + _456;
    vec4 _509 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _529 = (((cbMtdParam._m0[19u].x * _509.x) - _494) * _360) + _494;
    float _530 = (((cbMtdParam._m0[19u].y * _509.y) - _495) * _360) + _495;
    float _531 = (((cbMtdParam._m0[19u].z * _509.z) - _496) * _360) + _496;
    vec4 _544 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _569 = (_346.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _544.x) - _529) * _330) + _529);
    float _571 = (_346.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _544.y) - _530) * _330) + _530);
    float _573 = (_346.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _544.z) - _531) * _330) + _531);
    vec4 _586 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _604 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _606 = _604 * (cbMtdParam._m0[24u].z + 1.0);
    float _3987 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _614 = (_607 * ((cbMtdParam._m0[11u].x * _586.x) - _569)) + _569;
    float _615 = (((cbMtdParam._m0[11u].y * _586.y) - _571) * _607) + _571;
    float _616 = (((cbMtdParam._m0[11u].z * _586.z) - _573) * _607) + _573;
    float _620 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _628 = (_620 - (((_277.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _620))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3998 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _636 = ((cbMtdParam._m0[21u].x - _614) * _629) + _614;
    float _637 = ((cbMtdParam._m0[21u].y - _615) * _629) + _615;
    float _638 = ((cbMtdParam._m0[21u].z - _616) * _629) + _616;
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[28u].w;
    _206[0u] = cbMtdParam._m0[29u].x;
    _205[1u] = cbMtdParam._m0[30u].w;
    _206[1u] = cbMtdParam._m0[31u].x;
    _205[2u] = cbMtdParam._m0[30u].y;
    _206[2u] = cbMtdParam._m0[30u].z;
    _205[3u] = cbMtdParam._m0[29u].w;
    _206[3u] = cbMtdParam._m0[30u].x;
    _205[4u] = cbMtdParam._m0[29u].y;
    _206[4u] = cbMtdParam._m0[29u].z;
    float _679 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    uint _681 = uint(int(isnan(4.0) ? _679 : (isnan(_679) ? 4.0 : min(_679, 4.0))));
    float _688 = ((_206[_681] - cbMtdParam._m0[22u].z) * _371) + cbMtdParam._m0[22u].z;
    float _691 = ((cbMtdParam._m0[22u].w - _688) * _462) + _688;
    float _694 = ((cbMtdParam._m0[25u].x - _691) * _360) + _691;
    float _697 = ((cbMtdParam._m0[26u].x - _694) * _330) + _694;
    float _702 = (cbMtdParam._m0[24u].y + 1.0) * _604;
    float _4019 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _705 = _697 - (_697 * _703);
    float _707 = _705 - (_705 * _620);
    vec4 _720 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _407));
    vec4 _738 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _740 = _738.x;
    float _741 = _738.y;
    float _746 = cbMtdParam._m0[22u].x + _738.z;
    float _749 = (((_720.z + _205[_681]) - _746) * _371) + _746;
    vec4 _762 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _773 = (((_762.z - _749) + cbMtdParam._m0[28u].y) * _462) + _749;
    float _779 = ((((_315 * 2.0) * _773) - _773) * cbMtdParam._m0[24u].w) + _773;
    vec4 _792 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _803 = (((cbMtdParam._m0[23u].z + _792.z) - _779) * _360) + _779;
    vec4 _816 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _827 = (((_816.z - _803) + cbMtdParam._m0[26u].y) * _330) + _803;
    vec4 _839 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _851 = ((_839.z - _827) * _703) + _827;
    vec4 _866 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _880 = ((cbMtdParam._m0[27u].y * _620) * ((_866.z * cbMtdParam._m0[27u].x) - _851)) + _851;
    float _895 = ((_720.x - _740) * _371) + _740;
    float _896 = ((_720.y - _741) * _371) + _741;
    float _901 = ((_762.x - _895) * _462) + _895;
    float _902 = ((_762.y - _896) * _462) + _896;
    float _907 = ((_792.x - _901) * _360) + _901;
    float _908 = ((_792.y - _902) * _360) + _902;
    float _917 = ((((_816.x - _907) * _330) + _907) * 2.0) + (-1.0);
    float _918 = ((((_816.y - _908) * _330) + _908) * 2.0) + (-1.0);
    float _919 = dot(vec2(_917, _918), vec2(_917, _918));
    float _4030 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _924 = sqrt(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))));
    float _940 = (((cbMtdParam._m0[25u].y * ((_311.x * 2.0) + (-1.0))) + _917) + (((((_839.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _703)) + ((((_866.x * 2.0) + (-1.0)) * _620) * cbMtdParam._m0[26u].w);
    float _941 = (((cbMtdParam._m0[25u].y * ((_311.y * 2.0) + (-1.0))) + _918) + (((((_839.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _703)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_866.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _944 = fma(_924, _241 * NORMAL.x, fma(_941, _248 * TANGENT.x, (_234 * _226) * _940));
    float _947 = fma(_924, _241 * NORMAL.y, fma(_941, _248 * TANGENT.y, (_234 * _227) * _940));
    float _950 = fma(_924, _241 * NORMAL.z, fma(_941, _248 * TANGENT.z, (_234 * _228) * _940));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4041 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _958 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4063 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4074 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4085 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _962 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _978 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1028 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1018);
    float _1029 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1018);
    float _1030 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1018);
    float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
    float _1035 = _1028 * _1034;
    float _1036 = _1029 * _1034;
    float _1037 = _1030 * _1034;
    vec4 _1042 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1044 = _1042.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1214 = sqrt(((_1028 * _1028) + (_1029 * _1029)) + (_1030 * _1030));
        float _1220 = (cbMatDynParam._m0[5u].x * _1214) + cbMatDynParam._m0[5u].y;
        float _4096 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1225 = (cbMatDynParam._m0[5u].z * _1214) + cbMatDynParam._m0[5u].w;
        float _4107 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) - _1221)) + _1221) < ((_1044 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1055 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1056 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1074 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1077 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1080 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1093 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1094 = _1093 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4118 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _1107 = 1.0 - _962;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _962;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _962;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _962;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1055, cbSceneParam._m0[86u].y * _1056));
    float _1133 = _1130.x * TEXCOORD_3.w;
    float _1134 = dot(vec3(_955, _956, _957), vec3(_1035, _1036, _1037));
    float _1137 = _1134 * 2.0;
    float _1141 = (_1137 * _955) - _1035;
    float _1142 = (_1137 * _956) - _1036;
    float _1143 = (_1137 * _957) - _1037;
    float _1147 = abs(dot(vec3(_1035, _1036, _1037), vec3(_955, _956, _957)));
    float _4151 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1149 = sqrt(_958);
    float _1160 = exp2((_1149 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1149 * 3.0));
    float _1166 = (1.0 - _1160) * ((_1149 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1167 = _1160 * _1149;
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1532;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1257 = fma(_1203, cbModelParam._m0[26u].z, fma(_1199, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195));
        float _1261 = fma(_1203, cbModelParam._m0[27u].z, fma(_1199, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195));
        float _1265 = fma(_1203, cbModelParam._m0[28u].z, fma(_1199, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195));
        float _1290 = _1195 + _955;
        float _1291 = _1199 + _956;
        float _1292 = _1203 + _957;
        float _1302 = fma(_1292, cbModelParam._m0[26u].z, fma(_1291, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290)) - _1257;
        float _1303 = fma(_1292, cbModelParam._m0[27u].z, fma(_1291, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290)) - _1261;
        float _1304 = fma(_1292, cbModelParam._m0[28u].z, fma(_1291, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290)) - _1265;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1257 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1261 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[34u].z) + ((((((_1265 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1360 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1326.x + (-0.5));
        float _1362 = _1360 * (_1326.y + (-0.5));
        float _1363 = _1360 * (_1326.z + (-0.5));
        float _1370 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1333.x + (-0.5));
        float _1372 = _1370 * (_1333.y + (-0.5));
        float _1373 = _1370 * (_1333.z + (-0.5));
        float _1380 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1340.x + (-0.5));
        float _1382 = _1380 * (_1340.y + (-0.5));
        float _1383 = _1380 * (_1340.z + (-0.5));
        float _1390 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1347.x + (-0.5));
        float _1392 = _1390 * (_1347.y + (-0.5));
        float _1393 = _1390 * (_1347.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1414 = (dot(vec3(_955, _956, _957), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1424 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4199 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1426 + 1.0))) + _1431) * _1394;
        float _1441 = _1362 * 0.5;
        float _1442 = _1372 * 0.5;
        float _1443 = _1382 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_955, _956, _957), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4232 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1468 + 1.0))) + _1473) * _1395;
        float _1483 = _1363 * 0.5;
        float _1484 = _1373 * 0.5;
        float _1485 = _1383 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_955, _956, _957), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4265 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1510 + 1.0))) + _1515) * _1396;
        _1532 = _1363;
        _1534 = _1362;
        _1535 = _1361;
        _1536 = _1373;
        _1537 = _1372;
        _1538 = _1371;
        _1539 = _1383;
        _1540 = _1382;
        _1541 = _1381;
        _1542 = _1396;
        _1543 = _1395;
        _1544 = _1394;
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1533;
        _1534 = _1533;
        _1535 = _1533;
        _1536 = _1533;
        _1537 = _1533;
        _1538 = _1533;
        _1539 = _1533;
        _1540 = _1533;
        _1541 = _1533;
        _1542 = _1533;
        _1543 = _1533;
        _1544 = _1533;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1573 = fma(_1203, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195));
        float _1577 = fma(_1203, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195));
        float _1581 = fma(_1203, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195));
        float _1604 = _1195 + _955;
        float _1605 = _1199 + _956;
        float _1606 = _1203 + _957;
        float _1616 = fma(_1606, cbModelParam._m0[30u].z, fma(_1605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1604)) - _1573;
        float _1617 = fma(_1606, cbModelParam._m0[31u].z, fma(_1605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1604)) - _1577;
        float _1618 = fma(_1606, cbModelParam._m0[32u].z, fma(_1605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1604)) - _1581;
        float _1622 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
        float _1635 = ((_1622 * _1616) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1573 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1622 * _1617) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1577 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1622 * _1618) / cbModelParam._m0[35u].z) + ((((((_1581 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        float _1672 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1639.x + (-0.5));
        float _1674 = _1672 * (_1639.y + (-0.5));
        float _1675 = _1672 * (_1639.z + (-0.5));
        float _1682 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1646.x + (-0.5));
        float _1684 = _1682 * (_1646.y + (-0.5));
        float _1685 = _1682 * (_1646.z + (-0.5));
        float _1692 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1653.x + (-0.5));
        float _1694 = _1692 * (_1653.y + (-0.5));
        float _1695 = _1692 * (_1653.z + (-0.5));
        float _1702 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1660.x + (-0.5));
        float _1704 = _1702 * (_1660.y + (-0.5));
        float _1705 = _1702 * (_1660.z + (-0.5));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = _1673 * 0.5;
        float _1710 = _1683 * 0.5;
        float _1711 = _1693 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_955, _956, _957), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4328 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1736 + 1.0))) + _1741) * _1706;
        float _1751 = _1674 * 0.5;
        float _1752 = _1684 * 0.5;
        float _1753 = _1694 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_955, _956, _957), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4361 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1778 + 1.0))) + _1783) * _1707;
        float _1793 = _1675 * 0.5;
        float _1794 = _1685 * 0.5;
        float _1795 = _1695 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_955, _956, _957), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4394 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1820 + 1.0))) + _1825) * _1708;
        _1842 = _1675;
        _1843 = _1674;
        _1844 = _1673;
        _1845 = _1685;
        _1846 = _1684;
        _1847 = _1683;
        _1848 = _1695;
        _1849 = _1694;
        _1850 = _1693;
        _1851 = _1708;
        _1852 = _1707;
        _1853 = _1706;
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
    }
    else
    {
        _1842 = _1533;
        _1843 = _1533;
        _1844 = _1533;
        _1845 = _1533;
        _1846 = _1533;
        _1847 = _1533;
        _1848 = _1533;
        _1849 = _1533;
        _1850 = _1533;
        _1851 = _1533;
        _1852 = _1533;
        _1853 = _1533;
        _1854 = 0.0;
        _1855 = 0.0;
        _1856 = 0.0;
    }
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1547)) + _1547;
    float _1889 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1866));
    float _1910 = _1141 * 0.5;
    float _1911 = _1142 * 0.5;
    float _1912 = _1143 * 0.5;
    float _1913 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1916 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1919 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1953;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1926 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1532, _1536, _1539, _1542));
        float _1930 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1934 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1941 = dot(vec4(cbModelParam._m0[39u]), vec4(_1910, _1911, _1912, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1964;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1955 = dot(vec4(cbModelParam._m0[40u]), vec4(_1910, _1911, _1912, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1955) ? 0.0 : (isnan(0.0) ? _1955 : max(0.0, _1955))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1968 = (_1964 * cbModelParam._m0[1u].x) + (_1953 * (1.0 - cbModelParam._m0[1u].x));
    float _1978 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1979 = isnan(_1978) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1978 : min(cbModelParam._m0[25u].z, _1978));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2026 = fma(_1203, cbModelParam._m0[13u].z, fma(_1199, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195)) + cbModelParam._m0[13u].w;
        float _2030 = fma(_1203, cbModelParam._m0[14u].z, fma(_1199, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195)) + cbModelParam._m0[14u].w;
        float _2034 = fma(_1203, cbModelParam._m0[15u].z, fma(_1199, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195)) + cbModelParam._m0[15u].w;
        float _2037 = fma(_1143, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141));
        float _2040 = fma(_1143, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141));
        float _2043 = fma(_1143, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141));
        float _2071;
        if (_2037 > 0.0)
        {
            _2071 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2071 = frontier_phi_17_15_ladder;
        }
        float _2295;
        if (_2040 > 0.0)
        {
            _2295 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2295 = frontier_phi_26_22_ladder;
        }
        float _2552;
        if (_2043 > 0.0)
        {
            _2552 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2552 = frontier_phi_38_33_ladder;
        }
        float _2554 = isnan(_2295) ? _2071 : (isnan(_2071) ? _2295 : min(_2071, _2295));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _2037) + _2026;
        float _2560 = (_2555 * _2040) + _2030;
        float _2561 = (_2555 * _2043) + _2034;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _1979);
            frontier_phi_16_38_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2059 = frontier_phi_16_38_ladder_2;
        _2061 = frontier_phi_16_38_ladder_1;
        _2063 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1141, _1142, _1143), _1979);
        _2059 = _2047.x * cbModelParam._m0[1u].y;
        _2061 = _2047.y * cbModelParam._m0[1u].y;
        _2063 = _2047.z * cbModelParam._m0[1u].y;
    }
    float _2067 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2067 : min(cbModelParam._m0[25u].w, _2067));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2122 = fma(_1203, cbModelParam._m0[21u].z, fma(_1199, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195)) + cbModelParam._m0[21u].w;
        float _2126 = fma(_1203, cbModelParam._m0[22u].z, fma(_1199, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195)) + cbModelParam._m0[22u].w;
        float _2130 = fma(_1203, cbModelParam._m0[23u].z, fma(_1199, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195)) + cbModelParam._m0[23u].w;
        float _2133 = fma(_1143, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141));
        float _2136 = fma(_1143, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141));
        float _2139 = fma(_1143, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141));
        float _2300;
        if (_2133 > 0.0)
        {
            _2300 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2300 = frontier_phi_28_24_ladder;
        }
        float _2579;
        if (_2136 > 0.0)
        {
            _2579 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2579 = frontier_phi_40_35_ladder;
        }
        float _2792;
        if (_2139 > 0.0)
        {
            _2792 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2792 = frontier_phi_49_46_ladder;
        }
        float _2794 = isnan(_2579) ? _2300 : (isnan(_2300) ? _2579 : min(_2300, _2579));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2133) + _2122;
        float _2800 = (_2795 * _2136) + _2126;
        float _2801 = (_2795 * _2139) + _2130;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2068);
            frontier_phi_25_49_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2158 = frontier_phi_25_49_ladder_2;
        _2160 = frontier_phi_25_49_ladder_1;
        _2162 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1141, _1142, _1143), _2068);
        _2158 = _2142.x * cbModelParam._m0[1u].z;
        _2160 = _2142.y * cbModelParam._m0[1u].z;
        _2162 = _2142.z * cbModelParam._m0[1u].z;
    }
    float _2175 = (((_1166 * _1118) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2158 - _2059)) + _2059);
    float _2177 = (((_1166 * _1120) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2160 - _2061)) + _2061);
    float _2179 = (((_1166 * _1121) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2162 - _2063)) + _2063);
    float _2182 = fma(_2179, cbSceneParam._m0[89u].z, fma(_2177, cbSceneParam._m0[89u].y, _2175 * cbSceneParam._m0[89u].x));
    float _2185 = fma(_2179, cbSceneParam._m0[90u].z, fma(_2177, cbSceneParam._m0[90u].y, _2175 * cbSceneParam._m0[90u].x));
    float _2188 = fma(_2179, cbSceneParam._m0[91u].z, fma(_2177, cbSceneParam._m0[91u].y, _2175 * cbSceneParam._m0[91u].x));
    vec4 _2196 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1055, _1056));
    float _2198 = _2196.w;
    float _2210 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2198);
    float _2211 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2198);
    float _2212 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2198);
    uvec4 _2216 = floatBitsToUint(cbInstanceData._m0[_1093 + 5u]);
    uint _2218 = _2216.x * 14u;
    uint _2219 = _2218 + 13u;
    float _2226 = _1133 + (-1.0);
    float _2231 = (cbLight._m0[_2219].x * _2226) + 1.0;
    float _2232 = (cbLight._m0[_2219].y * _2226) + 1.0;
    float _2233 = (cbLight._m0[_2219].z * _2226) + 1.0;
    float _2234 = (cbLight._m0[_2219].w * _2226) + 1.0;
    uint _2235 = _2218 + 5u;
    float _2241 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2245 = _2218 + 4u;
    float _2254 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2258 = _2218 | 1u;
    float _2269 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_955, _956, _957));
    float _2272 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_955, _956, _957));
    float _4530 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _4541 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2277 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2279 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2286 = ((cbLight._m0[_2235].x * _2241) * _2279) + (((cbLight._m0[_2245].x * _2210) * _2254) * _2277);
    float _2287 = ((_2241 * cbLight._m0[_2235].y) * _2279) + (((cbLight._m0[_2245].y * _2211) * _2254) * _2277);
    float _2288 = ((_2241 * cbLight._m0[_2235].z) * _2279) + (((cbLight._m0[_2245].z * _2212) * _2254) * _2277);
    uvec4 _2292 = floatBitsToUint(cbLight._m0[_2218 + 12u]);
    bool _2294 = _2292.x == 0u;
    float _2305;
    float _2307;
    float _2309;
    if (_2294)
    {
        _2305 = _2286;
        _2307 = _2287;
        _2309 = _2288;
    }
    else
    {
        uint _2313 = _2218 + 6u;
        float _2329 = (dot(vec3(cbLight._m0[_2218 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4552 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2332 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2305 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2286;
        _2307 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2287;
        _2309 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2288;
    }
    bool _2312 = _2292.y == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2312)
    {
        _2350 = _2305;
        _2352 = _2307;
        _2354 = _2309;
    }
    else
    {
        uint _2523 = _2218 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2218 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4568 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2542 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2350 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2305;
        _2352 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2307;
        _2354 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2309;
    }
    uint _2357 = _2218 + 8u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _958) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2218].x + _1035;
    float _2373 = cbLight._m0[_2218].y + _1036;
    float _2374 = cbLight._m0[_2218].z + _1037;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2218].xyz));
    float _4584 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _2386 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2387 = dot(vec3(_955, _956, _957), vec3(_2379, _2380, _2381));
    float _4606 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2379, _2380, _2381));
    float _4617 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2371 * _2371;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2408 = 0.959999978542327880859375 - _1115;
    float _2410 = 0.959999978542327880859375 - _1116;
    float _2411 = 0.959999978542327880859375 - _1117;
    float _2418 = 1.0 - _2371;
    float _2429 = (0.5 / (((_2386 * ((_2385 * _2418) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2418) + _2371) * _2385))) * _2385;
    float _4628 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    uint _2445 = _2218 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _958) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2258].x + _1035;
    float _2459 = cbLight._m0[_2258].y + _1036;
    float _2460 = cbLight._m0[_2258].z + _1037;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2258].xyz));
    float _4639 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2472 = dot(vec3(_955, _956, _957), vec3(_2465, _2466, _2467));
    float _4650 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2465, _2466, _2467));
    float _4661 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2386 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2498) + _2457) * _2471))) * _2471;
    float _4672 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2408) + _1118) * cbLight._m0[_2445].x) * _2510) * _2241) + ((((cbLight._m0[_2357].x * _2210) * ((_2407 * _2408) + _1118)) * _2431) * _2254);
    float _2521 = (((((_2491 * _2410) + _1120) * cbLight._m0[_2445].y) * _2510) * _2241) + ((((cbLight._m0[_2357].y * _2211) * ((_2407 * _2410) + _1120)) * _2431) * _2254);
    float _2522 = (((((_2491 * _2411) + _1121) * cbLight._m0[_2445].z) * _2510) * _2241) + ((((cbLight._m0[_2357].z * _2212) * ((_2407 * _2411) + _1121)) * _2431) * _2254);
    float _2584;
    float _2586;
    float _2588;
    if (_2294)
    {
        _2584 = _2520;
        _2586 = _2521;
        _2588 = _2522;
    }
    else
    {
        uint _2590 = _2218 + 2u;
        uint _2594 = _2218 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _958) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _1035;
        float _2611 = cbLight._m0[_2590].y + _1036;
        float _2612 = cbLight._m0[_2590].z + _1037;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2590].xyz));
        float _4683 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2624 = dot(vec3(_955, _956, _957), vec3(_2617, _2618, _2619));
        float _4694 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4705 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2386 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2650) + _2609) * _2623))) * _2623;
        float _4716 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2584 = (((((_2643 * _2408) + _1118) * cbLight._m0[_2594].x) * _2662) * _2663) + _2520;
        _2586 = (((((_2643 * _2410) + _1120) * cbLight._m0[_2594].y) * _2662) * _2663) + _2521;
        _2588 = (((((_2643 * _2411) + _1121) * cbLight._m0[_2594].z) * _2662) * _2663) + _2522;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2312)
    {
        _2698 = _2584;
        _2700 = _2586;
        _2702 = _2588;
    }
    else
    {
        uint _2709 = _2218 + 3u;
        uint _2713 = _2218 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _958) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1035;
        float _2730 = cbLight._m0[_2709].y + _1036;
        float _2731 = cbLight._m0[_2709].z + _1037;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2709].xyz));
        float _4732 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2743 = dot(vec3(_955, _956, _957), vec3(_2736, _2737, _2738));
        float _4743 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4754 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2386 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2769) + _2728) * _2742))) * _2742;
        float _4765 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2698 = (((((_2762 * _2408) + _1118) * cbLight._m0[_2713].x) * _2781) * _2782) + _2584;
        _2700 = (((((_2762 * _2410) + _1120) * cbLight._m0[_2713].y) * _2781) * _2782) + _2586;
        _2702 = (((((_2762 * _2411) + _1121) * cbLight._m0[_2713].z) * _2781) * _2782) + _2588;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2216.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1056) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1055) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            uint _3164 = 0u;
            uint _3173;
            bool _3174;
            for (;;)
            {
                _3173 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                _3174 = _3173 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3174)
                {
                    frontier_phi_66_pred = _3158;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                else
                {
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    uint _3309;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3173;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3313 = uint(findLSB(_3309)) + (_3164 << 5u);
                        uint _3310 = (_3309 + 4294967295u) & _3309;
                        uint _3315 = _3313 * 48u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3335 = (_3313 * 48u) + 4u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3354 = (_3313 * 48u) + 8u;
                        vec3 _3365 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x));
                        float _3369 = _3329.x - _2858;
                        float _3370 = _3329.y - _2859;
                        float _3371 = _3329.z - _2860;
                        float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                        float _3375 = inversesqrt(_3372);
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3379 = dot(vec3(_1074, _1077, _1080), vec3(_3376, _3377, _3378));
                        float _3384 = 1.0 - (_3372 * _3329.w);
                        float _4791 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3386 = sqrt(_3372) * _3348.w;
                        float _3389 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3379) + _3390;
                        float _3396 = _3386 * _3386;
                        float _3400 = ((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3385) / ((_3396 * 0.699999988079071044921875) + 1.0);
                        float _3404 = (-0.0) - _2858;
                        float _3405 = (-0.0) - _2859;
                        float _3406 = (-0.0) - _2860;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3421 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _1149;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3434 = _3413 + _3378;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_1074, _1077, _1080), vec3(_3411, _3412, _3413));
                        float _4807 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3446 = dot(vec3(_1074, _1077, _1080), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4818 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3389 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3379) + _3455;
                        float _4829 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4840 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3453 * _3453) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125))) * _3385;
                        _3233 = (_3400 * _3348.x) + _3306;
                        _3234 = (_3400 * _3348.y) + _3307;
                        _3235 = (_3400 * _3348.z) + _3308;
                        _3230 = (_3481 * _3365.x) + _3303;
                        _3231 = (_3481 * _3365.y) + _3304;
                        _3232 = (_3481 * _3365.z) + _3305;
                        if (_3310 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3310;
                        }
                    }
                    frontier_phi_66_pred = _3230;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                _3006 = frontier_phi_66_pred;
                _3016 = frontier_phi_66_pred_1;
                _3014 = frontier_phi_66_pred_2;
                _3012 = frontier_phi_66_pred_3;
                _3010 = frontier_phi_66_pred_4;
                _3008 = frontier_phi_66_pred_5;
                uint _3165 = _3164 + 1u;
                if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3158 = _3006;
                    _3159 = _3008;
                    _3160 = _3010;
                    _3161 = _3012;
                    _3162 = _3014;
                    _3163 = _3016;
                    _3164 = _3165;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((4294967295u << _3022) & _2904) == 0u)
        {
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
            _3136 = _3015;
        }
        else
        {
            float _3151 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3152 = _3151 * _2858;
            float _3153 = _3151 * _2859;
            float _3154 = _3151 * _2860;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3286 = _3005;
                float _3287 = _3007;
                float _3288 = _3009;
                float _3289 = _3011;
                float _3290 = _3013;
                float _3291 = _3015;
                uint _3292 = _3022;
                uint _3301;
                bool _3302;
                for (;;)
                {
                    _3301 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                    _3302 = _3301 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3302)
                    {
                        frontier_phi_77_pred = _3291;
                        frontier_phi_77_pred_1 = _3290;
                        frontier_phi_77_pred_2 = _3289;
                        frontier_phi_77_pred_3 = _3288;
                        frontier_phi_77_pred_4 = _3287;
                        frontier_phi_77_pred_5 = _3286;
                    }
                    else
                    {
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        uint _3514 = _3301;
                        uint _3515;
                        vec4 _3540;
                        float _3541;
                        vec4 _3556;
                        vec3 _3568;
                        vec4 _3583;
                        vec4 _3598;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3525 = ((_3292 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3514));
                            _3515 = (_3514 + 4294967295u) & _3514;
                            uint _3527 = _3525 * 40u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3541 = _3540.w;
                            uint _3543 = (_3525 * 40u) + 4u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3525 * 40u) + 8u;
                            _3568 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x));
                            uint _3570 = (_3525 * 40u) + 16u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3525 * 40u) + 20u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3525 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3525 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_2860, _3632.z, fma(_2859, _3632.y, _3632.x * _2858)) + _3632.w;
                            _3645 = !((fma(_2860, _3613.z, fma(_2859, _3613.y, _3613.x * _2858)) + _3613.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3540.x - _2858;
                                float _3673 = _3540.y - _2859;
                                float _3674 = _3540.z - _2860;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3541 * _3541));
                                float _4851 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3690 = sqrt(_3675) * _3556.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_1074, _1077, _1080))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_2860, _3583.z, fma(_2859, _3583.y, _3583.x * _2858)) + _3583.w) / _3644;
                                float _3704 = (fma(_2860, _3598.z, fma(_2859, _3598.y, _3598.x * _2858)) + _3598.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4867 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _1149;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3152;
                                float _3734 = _3680 - _3153;
                                float _3735 = _3681 - _3154;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_1074, _1077, _1080), vec3((-0.0) - _3152, (-0.0) - _3153, (-0.0) - _3154));
                                float _4878 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3747 = dot(vec3(_1074, _1077, _1080), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4889 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_1074, _1077, _1080), vec3(_3679, _3680, _3681))) + _3756;
                                float _4900 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4911 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3710 * _3556.y;
                                frontier_phi_83_pred_1 = _3710 * _3556.x;
                                frontier_phi_83_pred_2 = _3784 * _3568.z;
                                frontier_phi_83_pred_3 = _3784 * _3568.y;
                                frontier_phi_83_pred_4 = _3784 * _3568.x;
                                frontier_phi_83_pred_5 = _3710 * _3556.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3792 = frontier_phi_83_pred;
                            _3791 = frontier_phi_83_pred_1;
                            _3790 = frontier_phi_83_pred_2;
                            _3789 = frontier_phi_83_pred_3;
                            _3788 = frontier_phi_83_pred_4;
                            _3793 = frontier_phi_83_pred_5;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            if (_3515 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3515;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3500;
                        frontier_phi_77_pred_1 = _3499;
                        frontier_phi_77_pred_2 = _3498;
                        frontier_phi_77_pred_3 = _3497;
                        frontier_phi_77_pred_4 = _3496;
                        frontier_phi_77_pred_5 = _3495;
                    }
                    _3137 = frontier_phi_77_pred;
                    _3135 = frontier_phi_77_pred_1;
                    _3133 = frontier_phi_77_pred_2;
                    _3131 = frontier_phi_77_pred_3;
                    _3129 = frontier_phi_77_pred_4;
                    _3127 = frontier_phi_77_pred_5;
                    uint _3293 = _3292 + 1u;
                    if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3286 = _3127;
                        _3287 = _3129;
                        _3288 = _3131;
                        _3289 = _3133;
                        _3290 = _3135;
                        _3291 = _3137;
                        _3292 = _3293;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3131;
                frontier_phi_58_59_ladder_1 = _3137;
                frontier_phi_58_59_ladder_2 = _3135;
                frontier_phi_58_59_ladder_3 = _3133;
                frontier_phi_58_59_ladder_4 = _3129;
                frontier_phi_58_59_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_58_59_ladder = _3009;
                frontier_phi_58_59_ladder_1 = _3015;
                frontier_phi_58_59_ladder_2 = _3013;
                frontier_phi_58_59_ladder_3 = _3011;
                frontier_phi_58_59_ladder_4 = _3007;
                frontier_phi_58_59_ladder_5 = _3005;
            }
            _3126 = frontier_phi_58_59_ladder_5;
            _3128 = frontier_phi_58_59_ladder_4;
            _3130 = frontier_phi_58_59_ladder;
            _3132 = frontier_phi_58_59_ladder_3;
            _3134 = frontier_phi_58_59_ladder_2;
            _3136 = frontier_phi_58_59_ladder_1;
        }
        float _3141 = isnan(1.0) ? _1133 : (isnan(_1133) ? 1.0 : min(_1133, 1.0));
        _2917 = (_3141 * _3132) + _2350;
        _2919 = (_3141 * _3134) + _2352;
        _2921 = (_3141 * _3136) + _2354;
        _2923 = ((_3126 * _1118) * _3141) + _2698;
        _2925 = ((_3128 * _1120) * _3141) + _2700;
        _2927 = ((_3130 * _1121) * _3141) + _2702;
    }
    else
    {
        _2917 = _2350;
        _2919 = _2352;
        _2921 = _2354;
        _2923 = _2698;
        _2925 = _2700;
        _2927 = _2702;
    }
    float _4927 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4938 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4949 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2944 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2917 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1133))) + ((_2923 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2919 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1133))) + ((_2925 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2921 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1133))) + ((_2927 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    uint _2947 = _1093 + 6u;
    float _2955 = _1055 / cbSceneParam._m0[86u].x;
    float _2956 = _1056 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _978 : (isnan(_978) ? cbSceneParam._m0[77u].w : min(_978, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_978 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_978) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _978 : min(cbSceneParam._m0[80u].w, _978));
        float _3031 = _3030 / _978;
        float _3042 = _3031 * _1028;
        float _3043 = _1029 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3046 = _3031 * _1030;
        float _3048 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3049 = _3048 + cbSceneParam._m0[79u].w;
        float _3050 = cbSceneParam._m0[79u].w - _3043;
        float _3056 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3046 * _3046));
        float _3059 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3056;
        float _3064 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3066 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3044 - _3048) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3049 > 0.0) ? exp2(_3064 * _3049) : (2.0 - exp2(_3066 * _3049))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3059;
        }
        else
        {
            float _3187 = 1.0 / cbSceneParam._m0[80u].x;
            float _3188 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : max(_3049, _3050));
            float _3189 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : min(_3049, _3050));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            _3243 = ((abs(_3056 / _3044) * cbSceneParam._m0[80u].y) * ((((_3198 - _3199) * 2.0) - ((exp2(_3064 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0)))) - exp2(_3064 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))))) * _3187)) - ((exp2(_3066 * _3198) - exp2(_3066 * _3199)) * _3187))) + (_3059 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2975);
        _3068 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3070 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3072 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3074 = _3254 * _2975;
    }
    else
    {
        _3068 = _2972;
        _3070 = _2973;
        _3072 = _2974;
        _3074 = _2975;
    }
    bool _3281;
    vec4 _3084;
    vec4 _3106;
    float _3108;
    float _3112;
    float _3113;
    float _3114;
    float _3115;
    bool _3125;
    for (;;)
    {
        _3084 = cbMatDynParam._m0[0u];
        float _3086 = roundEven(_3084.y);
        bool _3087 = _3086 == 3.0;
        float _3088 = log2(_3074);
        float _3095 = exp2(_3088 * cbSceneParam._m0[78u].x) * _2944;
        float _3096 = exp2(_3088 * cbSceneParam._m0[78u].y) * _2945;
        float _3097 = exp2(_3088 * cbSceneParam._m0[78u].z) * _2946;
        float _3104 = _1044 + (-0.5);
        _3106 = cbMtdParam._m0[1u];
        _3108 = _3106.y * _3104;
        float _3111 = (_3086 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3112 = _3111 * (_3087 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3068)));
        _3113 = _3111 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
        _3114 = _3111 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
        _3115 = _3104 * 0.999000012874603271484375;
        _3125 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3125)
        {
            if ((cbInstanceData._m0[_1093 + 7u].x + _3115) < 0.5)
            {
                _3281 = true;
                break;
            }
        }
        uint _3222 = _1094 + uint(_3084.w);
        if ((cbInstanceData._m0[_3222].w < 1.0) && ((cbInstanceData._m0[_3222].w + _3115) < 0.5))
        {
            _3281 = true;
            break;
        }
        if ((_3108 + 1.0) < _3106.x)
        {
            _3281 = true;
            break;
        }
        _3281 = false;
        break;
    }
    float _3486;
    if (_3281)
    {
        discard_state = true;
        _3486 = 0.0;
    }
    else
    {
        _3486 = cbInstanceData._m0[_2947].w;
    }
    SV_Target.x = _3112;
    SV_Target.y = _3113;
    SV_Target.z = _3114;
    SV_Target.w = _3486;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
    discard_exit();
}


