#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1495;
float _3896;
float _3897;
float _3898;
float _3899;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _288 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _305 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _320 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _328 = log2(0.0);
    float _330 = exp2(_328 * cbMtdParam._m0[23u].x);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    float _341 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _342 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _343 = isnan(1.0) ? _342 : (isnan(_342) ? 1.0 : min(_342, 1.0));
    vec4 _355 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _358 = _355.y;
    float _361 = (_355.x + (-0.02500000037252902984619140625)) * 8.0;
    float _365 = roundEven(5.0 - _361);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(4.0) ? _366 : (isnan(_366) ? 4.0 : min(_366, 4.0));
    float _380 = floor(_367);
    vec4 _383 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _380));
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[17u].x;
    _201[0u] = cbMtdParam._m0[17u].y;
    _202[0u] = cbMtdParam._m0[17u].z;
    _200[1u] = cbMtdParam._m0[15u].x;
    _201[1u] = cbMtdParam._m0[15u].y;
    _202[1u] = cbMtdParam._m0[15u].z;
    _200[2u] = cbMtdParam._m0[14u].x;
    _201[2u] = cbMtdParam._m0[14u].y;
    _202[2u] = cbMtdParam._m0[14u].z;
    _200[3u] = cbMtdParam._m0[13u].x;
    _201[3u] = cbMtdParam._m0[13u].y;
    _202[3u] = cbMtdParam._m0[13u].z;
    _200[4u] = cbMtdParam._m0[12u].x;
    _201[4u] = cbMtdParam._m0[12u].y;
    _202[4u] = cbMtdParam._m0[12u].z;
    _200[5u] = cbMtdParam._m0[18u].x;
    _201[5u] = cbMtdParam._m0[18u].y;
    _202[5u] = cbMtdParam._m0[18u].z;
    float _447 = roundEven(_361);
    float _448 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    uint _450 = uint(int(isnan(5.0) ? _448 : (isnan(_448) ? 5.0 : min(_448, 5.0))));
    vec4 _480 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _491 = cbMtdParam._m0[9u].x * _480.x;
    float _492 = cbMtdParam._m0[9u].y * _480.y;
    float _493 = cbMtdParam._m0[9u].z * _480.z;
    float _500 = ((((((_200[_450] - cbMtdParam._m0[10u].x) * _358) + cbMtdParam._m0[10u].x) * _383.x) - _491) * _343) + _491;
    float _501 = ((((((_201[_450] - cbMtdParam._m0[10u].y) * _358) + cbMtdParam._m0[10u].y) * _383.y) - _492) * _343) + _492;
    float _502 = ((((((_202[_450] - cbMtdParam._m0[10u].z) * _358) + cbMtdParam._m0[10u].z) * _383.z) - _493) * _343) + _493;
    float _508 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _521 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _540 = (((cbMtdParam._m0[16u].x * _521.x) - _500) * _508) + _500;
    float _541 = (((cbMtdParam._m0[16u].y * _521.y) - _501) * _508) + _501;
    float _542 = (((cbMtdParam._m0[16u].z * _521.z) - _502) * _508) + _502;
    vec4 _555 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _575 = (((cbMtdParam._m0[19u].x * _555.x) - _540) * _332) + _540;
    float _576 = (((cbMtdParam._m0[19u].y * _555.y) - _541) * _332) + _541;
    float _577 = (((cbMtdParam._m0[19u].z * _555.z) - _542) * _332) + _542;
    vec4 _589 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _614 = (_320.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _589.x) - _575) * _307) + _575);
    float _616 = (_320.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _589.y) - _576) * _307) + _576);
    float _618 = (_320.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _589.z) - _577) * _307) + _577);
    float _622 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _631 = (_622 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _622))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3958 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _639 = ((cbMtdParam._m0[21u].x - _614) * _632) + _614;
    float _640 = ((cbMtdParam._m0[21u].y - _616) * _632) + _616;
    float _641 = ((cbMtdParam._m0[21u].z - _618) * _632) + _618;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[28u].w;
    _196[0u] = cbMtdParam._m0[29u].x;
    _195[1u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[31u].x;
    _195[2u] = cbMtdParam._m0[30u].y;
    _196[2u] = cbMtdParam._m0[30u].z;
    _195[3u] = cbMtdParam._m0[29u].w;
    _196[3u] = cbMtdParam._m0[30u].x;
    _195[4u] = cbMtdParam._m0[29u].y;
    _196[4u] = cbMtdParam._m0[29u].z;
    float _681 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    uint _683 = uint(int(isnan(4.0) ? _681 : (isnan(_681) ? 4.0 : min(_681, 4.0))));
    float _690 = ((_196[_683] - cbMtdParam._m0[22u].z) * _343) + cbMtdParam._m0[22u].z;
    float _693 = ((cbMtdParam._m0[22u].w - _690) * _508) + _690;
    float _696 = ((cbMtdParam._m0[25u].x - _693) * _332) + _693;
    float _699 = ((cbMtdParam._m0[26u].x - _696) * _307) + _696;
    float _701 = _699 - (_699 * _622);
    vec4 _717 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _380));
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _742 = cbMtdParam._m0[22u].x + _734.z;
    float _745 = (((_717.z + _195[_683]) - _742) * _343) + _742;
    vec4 _757 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _768 = (((_757.z - _745) + cbMtdParam._m0[28u].y) * _508) + _745;
    float _774 = ((((_292 * 2.0) * _768) - _768) * cbMtdParam._m0[24u].w) + _768;
    vec4 _786 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _797 = (((cbMtdParam._m0[23u].z + _786.z) - _774) * _332) + _774;
    vec4 _810 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _821 = (((_810.z - _797) + cbMtdParam._m0[26u].y) * _307) + _797;
    vec4 _836 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _851 = ((cbMtdParam._m0[27u].y * _622) * ((_836.z * cbMtdParam._m0[27u].x) - _821)) + _821;
    float _863 = ((_717.x - _736) * _343) + _736;
    float _864 = ((_717.y - _737) * _343) + _737;
    float _869 = ((_757.x - _863) * _508) + _863;
    float _870 = ((_757.y - _864) * _508) + _864;
    float _875 = ((_786.x - _869) * _332) + _869;
    float _876 = ((_786.y - _870) * _332) + _870;
    float _885 = ((((_810.x - _875) * _307) + _875) * 2.0) + (-1.0);
    float _886 = ((((_810.y - _876) * _307) + _876) * 2.0) + (-1.0);
    float _887 = dot(vec2(_885, _886), vec2(_885, _886));
    float _3979 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _892 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    float _902 = ((cbMtdParam._m0[25u].y * ((_288.x * 2.0) + (-1.0))) + _885) + ((((_836.x * 2.0) + (-1.0)) * _622) * cbMtdParam._m0[26u].w);
    float _903 = ((cbMtdParam._m0[25u].y * ((_288.y * 2.0) + (-1.0))) + _886) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_836.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _906 = fma(_892, _237 * NORMAL.x, fma(_903, _244 * TANGENT.x, (_230 * _222) * _902));
    float _909 = fma(_892, _237 * NORMAL.y, fma(_903, _244 * TANGENT.y, (_230 * _223) * _902));
    float _912 = fma(_892, _237 * NORMAL.z, fma(_903, _244 * TANGENT.z, (_230 * _224) * _902));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _3990 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _920 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4012 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4023 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4034 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _924 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    vec4 _1004 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1006 = _1004.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1176 = sqrt(((_990 * _990) + (_991 * _991)) + (_992 * _992));
        float _1182 = (cbMatDynParam._m0[5u].x * _1176) + cbMatDynParam._m0[5u].y;
        float _4045 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1187 = (cbMatDynParam._m0[5u].z * _1176) + cbMatDynParam._m0[5u].w;
        float _4056 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) - _1183)) + _1183) < ((_1006 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1017 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1018 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1036 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1039 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1042 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1055 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1056 = _1055 + 9u;
    uint _1057 = _1056 + uint(cbMatDynParam._m0[0u].w);
    float _1063 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_1057].x;
    float _1064 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1057].y;
    float _1065 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1057].z;
    float _4067 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1069 = 1.0 - _924;
    float _1070 = _1066 * _1069;
    float _1071 = _1067 * _1069;
    float _1072 = _1068 * _1069;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _924;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _924;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _924;
    float _1080 = _1077 + 0.039999999105930328369140625;
    float _1082 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    vec4 _1092 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1017, cbSceneParam._m0[86u].y * _1018));
    float _1095 = _1092.x * TEXCOORD_3.w;
    float _1096 = dot(vec3(_917, _918, _919), vec3(_997, _998, _999));
    float _1099 = _1096 * 2.0;
    float _1103 = (_1099 * _917) - _997;
    float _1104 = (_1099 * _918) - _998;
    float _1105 = (_1099 * _919) - _999;
    float _1109 = abs(dot(vec3(_997, _998, _999), vec3(_917, _918, _919)));
    float _4100 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1111 = sqrt(_920);
    float _1122 = exp2((_1111 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1111 * 3.0));
    float _1128 = (1.0 - _1122) * ((_1111 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1129 = _1122 * _1111;
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1494;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1219 = fma(_1165, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157));
        float _1223 = fma(_1165, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157));
        float _1227 = fma(_1165, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157));
        float _1252 = _1157 + _917;
        float _1253 = _1161 + _918;
        float _1254 = _1165 + _919;
        float _1264 = fma(_1254, cbModelParam._m0[26u].z, fma(_1253, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1252)) - _1219;
        float _1265 = fma(_1254, cbModelParam._m0[27u].z, fma(_1253, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1252)) - _1223;
        float _1266 = fma(_1254, cbModelParam._m0[28u].z, fma(_1253, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1252)) - _1227;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1219 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1223 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[34u].z) + ((((((_1227 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1322 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1288.x + (-0.5));
        float _1324 = _1322 * (_1288.y + (-0.5));
        float _1325 = _1322 * (_1288.z + (-0.5));
        float _1332 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1295.x + (-0.5));
        float _1334 = _1332 * (_1295.y + (-0.5));
        float _1335 = _1332 * (_1295.z + (-0.5));
        float _1342 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1302.x + (-0.5));
        float _1344 = _1342 * (_1302.y + (-0.5));
        float _1345 = _1342 * (_1302.z + (-0.5));
        float _1352 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1309.x + (-0.5));
        float _1354 = _1352 * (_1309.y + (-0.5));
        float _1355 = _1352 * (_1309.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1376 = (dot(vec3(_917, _918, _919), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1386 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4148 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1388 + 1.0))) + _1393) * _1356;
        float _1403 = _1324 * 0.5;
        float _1404 = _1334 * 0.5;
        float _1405 = _1344 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_917, _918, _919), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4181 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1430 + 1.0))) + _1435) * _1357;
        float _1445 = _1325 * 0.5;
        float _1446 = _1335 * 0.5;
        float _1447 = _1345 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_917, _918, _919), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4214 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1472 + 1.0))) + _1477) * _1358;
        _1494 = _1325;
        _1496 = _1324;
        _1497 = _1323;
        _1498 = _1335;
        _1499 = _1334;
        _1500 = _1333;
        _1501 = _1345;
        _1502 = _1344;
        _1503 = _1343;
        _1504 = _1358;
        _1505 = _1357;
        _1506 = _1356;
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1495;
        _1496 = _1495;
        _1497 = _1495;
        _1498 = _1495;
        _1499 = _1495;
        _1500 = _1495;
        _1501 = _1495;
        _1502 = _1495;
        _1503 = _1495;
        _1504 = _1495;
        _1505 = _1495;
        _1506 = _1495;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1535 = fma(_1165, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1157));
        float _1539 = fma(_1165, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1157));
        float _1543 = fma(_1165, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1157));
        float _1566 = _1157 + _917;
        float _1567 = _1161 + _918;
        float _1568 = _1165 + _919;
        float _1578 = fma(_1568, cbModelParam._m0[30u].z, fma(_1567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1566)) - _1535;
        float _1579 = fma(_1568, cbModelParam._m0[31u].z, fma(_1567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1566)) - _1539;
        float _1580 = fma(_1568, cbModelParam._m0[32u].z, fma(_1567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1566)) - _1543;
        float _1584 = inversesqrt(dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580)));
        float _1597 = ((_1584 * _1578) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1535 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1584 * _1579) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1539 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1599 = ((_1584 * _1580) / cbModelParam._m0[35u].z) + ((((((_1543 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        float _1634 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1601.x + (-0.5));
        float _1636 = _1634 * (_1601.y + (-0.5));
        float _1637 = _1634 * (_1601.z + (-0.5));
        float _1644 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1608.x + (-0.5));
        float _1646 = _1644 * (_1608.y + (-0.5));
        float _1647 = _1644 * (_1608.z + (-0.5));
        float _1654 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1615.x + (-0.5));
        float _1656 = _1654 * (_1615.y + (-0.5));
        float _1657 = _1654 * (_1615.z + (-0.5));
        float _1664 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1622.x + (-0.5));
        float _1666 = _1664 * (_1622.y + (-0.5));
        float _1667 = _1664 * (_1622.z + (-0.5));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = _1635 * 0.5;
        float _1672 = _1645 * 0.5;
        float _1673 = _1655 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_917, _918, _919), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4277 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1698 + 1.0))) + _1703) * _1668;
        float _1713 = _1636 * 0.5;
        float _1714 = _1646 * 0.5;
        float _1715 = _1656 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_917, _918, _919), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4310 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1740 + 1.0))) + _1745) * _1669;
        float _1755 = _1637 * 0.5;
        float _1756 = _1647 * 0.5;
        float _1757 = _1657 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_917, _918, _919), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4343 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1782 + 1.0))) + _1787) * _1670;
        _1804 = _1637;
        _1805 = _1636;
        _1806 = _1635;
        _1807 = _1647;
        _1808 = _1646;
        _1809 = _1645;
        _1810 = _1657;
        _1811 = _1656;
        _1812 = _1655;
        _1813 = _1670;
        _1814 = _1669;
        _1815 = _1668;
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
    }
    else
    {
        _1804 = _1495;
        _1805 = _1495;
        _1806 = _1495;
        _1807 = _1495;
        _1808 = _1495;
        _1809 = _1495;
        _1810 = _1495;
        _1811 = _1495;
        _1812 = _1495;
        _1813 = _1495;
        _1814 = _1495;
        _1815 = _1495;
        _1816 = 0.0;
        _1817 = 0.0;
        _1818 = 0.0;
    }
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1507)) + _1507;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1508)) + _1508;
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1509)) + _1509;
    float _1851 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1828));
    float _1872 = _1103 * 0.5;
    float _1873 = _1104 * 0.5;
    float _1874 = _1105 * 0.5;
    float _1875 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1878 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1881 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1915;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1888 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1494, _1498, _1501, _1504));
        float _1892 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1896 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1903 = dot(vec4(cbModelParam._m0[39u]), vec4(_1872, _1873, _1874, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1926;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1917 = dot(vec4(cbModelParam._m0[40u]), vec4(_1872, _1873, _1874, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1930 = (_1926 * cbModelParam._m0[1u].x) + (_1915 * (1.0 - cbModelParam._m0[1u].x));
    float _1940 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1940 : min(cbModelParam._m0[25u].z, _1940));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1988 = fma(_1165, cbModelParam._m0[13u].z, fma(_1161, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157)) + cbModelParam._m0[13u].w;
        float _1992 = fma(_1165, cbModelParam._m0[14u].z, fma(_1161, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157)) + cbModelParam._m0[14u].w;
        float _1996 = fma(_1165, cbModelParam._m0[15u].z, fma(_1161, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157)) + cbModelParam._m0[15u].w;
        float _1999 = fma(_1105, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103));
        float _2002 = fma(_1105, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103));
        float _2005 = fma(_1105, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103));
        float _2033;
        if (_1999 > 0.0)
        {
            _2033 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2033 = frontier_phi_17_15_ladder;
        }
        float _2256;
        if (_2002 > 0.0)
        {
            _2256 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2256 = frontier_phi_26_22_ladder;
        }
        float _2513;
        if (_2005 > 0.0)
        {
            _2513 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2513 = frontier_phi_38_33_ladder;
        }
        float _2515 = isnan(_2256) ? _2033 : (isnan(_2033) ? _2256 : min(_2033, _2256));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1999) + _1988;
        float _2521 = (_2516 * _2002) + _1992;
        float _2522 = (_2516 * _2005) + _1996;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1941);
            frontier_phi_16_38_ladder = _2650.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2650.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2650.x * cbModelParam._m0[1u].y;
        }
        _2021 = frontier_phi_16_38_ladder_2;
        _2023 = frontier_phi_16_38_ladder_1;
        _2025 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1103, _1104, _1105), _1941);
        _2021 = _2009.x * cbModelParam._m0[1u].y;
        _2023 = _2009.y * cbModelParam._m0[1u].y;
        _2025 = _2009.z * cbModelParam._m0[1u].y;
    }
    float _2029 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _2030 = isnan(_2029) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2029 : min(cbModelParam._m0[25u].w, _2029));
    float _2119;
    float _2121;
    float _2123;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2083 = fma(_1165, cbModelParam._m0[21u].z, fma(_1161, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157)) + cbModelParam._m0[21u].w;
        float _2087 = fma(_1165, cbModelParam._m0[22u].z, fma(_1161, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157)) + cbModelParam._m0[22u].w;
        float _2091 = fma(_1165, cbModelParam._m0[23u].z, fma(_1161, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157)) + cbModelParam._m0[23u].w;
        float _2094 = fma(_1105, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103));
        float _2097 = fma(_1105, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103));
        float _2100 = fma(_1105, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103));
        float _2261;
        if (_2094 > 0.0)
        {
            _2261 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2261 = frontier_phi_28_24_ladder;
        }
        float _2540;
        if (_2097 > 0.0)
        {
            _2540 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2540 = frontier_phi_40_35_ladder;
        }
        float _2753;
        if (_2100 > 0.0)
        {
            _2753 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2753 = frontier_phi_49_46_ladder;
        }
        float _2755 = isnan(_2540) ? _2261 : (isnan(_2261) ? _2540 : min(_2261, _2540));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _2094) + _2083;
        float _2761 = (_2756 * _2097) + _2087;
        float _2762 = (_2756 * _2100) + _2091;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2764 = (-1.0) - _2763;
        float _2766 = _2763 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2762 > _2766) || ((_2762 < _2764) || ((_2761 > _2766) || ((_2761 < _2764) || ((_2760 < _2764) || (_2760 > _2766))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2762, cbModelParam._m0[17u].z, fma(_2761, cbModelParam._m0[17u].y, _2760 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2762, cbModelParam._m0[18u].z, fma(_2761, cbModelParam._m0[18u].y, _2760 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2762, cbModelParam._m0[19u].z, fma(_2761, cbModelParam._m0[19u].y, _2760 * cbModelParam._m0[19u].x))), _2030);
            frontier_phi_25_49_ladder = _2961.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2961.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2961.x * cbModelParam._m0[1u].z;
        }
        _2119 = frontier_phi_25_49_ladder_2;
        _2121 = frontier_phi_25_49_ladder_1;
        _2123 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1103, _1104, _1105), _2030);
        _2119 = _2103.x * cbModelParam._m0[1u].z;
        _2121 = _2103.y * cbModelParam._m0[1u].z;
        _2123 = _2103.z * cbModelParam._m0[1u].z;
    }
    float _2136 = (((_1128 * _1080) + _1129) * _1095) * ((cbModelParam._m0[1u].w * (_2119 - _2021)) + _2021);
    float _2138 = (((_1128 * _1082) + _1129) * _1095) * ((cbModelParam._m0[1u].w * (_2121 - _2023)) + _2023);
    float _2140 = (((_1128 * _1083) + _1129) * _1095) * ((cbModelParam._m0[1u].w * (_2123 - _2025)) + _2025);
    float _2143 = fma(_2140, cbSceneParam._m0[89u].z, fma(_2138, cbSceneParam._m0[89u].y, _2136 * cbSceneParam._m0[89u].x));
    float _2146 = fma(_2140, cbSceneParam._m0[90u].z, fma(_2138, cbSceneParam._m0[90u].y, _2136 * cbSceneParam._m0[90u].x));
    float _2149 = fma(_2140, cbSceneParam._m0[91u].z, fma(_2138, cbSceneParam._m0[91u].y, _2136 * cbSceneParam._m0[91u].x));
    vec4 _2157 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1017, _1018));
    float _2159 = _2157.w;
    float _2171 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2159);
    float _2172 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2159);
    float _2173 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2159);
    uvec4 _2177 = floatBitsToUint(cbInstanceData._m0[_1055 + 5u]);
    uint _2179 = _2177.x * 14u;
    uint _2180 = _2179 + 13u;
    float _2187 = _1095 + (-1.0);
    float _2192 = (cbLight._m0[_2180].x * _2187) + 1.0;
    float _2193 = (cbLight._m0[_2180].y * _2187) + 1.0;
    float _2194 = (cbLight._m0[_2180].z * _2187) + 1.0;
    float _2195 = (cbLight._m0[_2180].w * _2187) + 1.0;
    uint _2196 = _2179 + 5u;
    float _2202 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2206 = _2179 + 4u;
    float _2215 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
    uint _2219 = _2179 | 1u;
    float _2230 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_917, _918, _919));
    float _2233 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_917, _918, _919));
    float _4479 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _4490 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2238 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2240 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2247 = ((cbLight._m0[_2196].x * _2202) * _2240) + (((cbLight._m0[_2206].x * _2171) * _2215) * _2238);
    float _2248 = ((_2202 * cbLight._m0[_2196].y) * _2240) + (((cbLight._m0[_2206].y * _2172) * _2215) * _2238);
    float _2249 = ((_2202 * cbLight._m0[_2196].z) * _2240) + (((cbLight._m0[_2206].z * _2173) * _2215) * _2238);
    uvec4 _2253 = floatBitsToUint(cbLight._m0[_2179 + 12u]);
    bool _2255 = _2253.x == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2255)
    {
        _2266 = _2247;
        _2268 = _2248;
        _2270 = _2249;
    }
    else
    {
        uint _2274 = _2179 + 6u;
        float _2290 = (dot(vec3(cbLight._m0[_2179 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4501 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2293 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2266 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2247;
        _2268 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2248;
        _2270 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2249;
    }
    bool _2273 = _2253.y == 0u;
    float _2311;
    float _2313;
    float _2315;
    if (_2273)
    {
        _2311 = _2266;
        _2313 = _2268;
        _2315 = _2270;
    }
    else
    {
        uint _2484 = _2179 + 7u;
        float _2500 = (dot(vec3(cbLight._m0[_2179 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4517 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2503 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2311 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2266;
        _2313 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2268;
        _2315 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2270;
    }
    uint _2318 = _2179 + 8u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _920) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2179].x + _997;
    float _2334 = cbLight._m0[_2179].y + _998;
    float _2335 = cbLight._m0[_2179].z + _999;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2179].xyz));
    float _4533 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2347 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2348 = dot(vec3(_917, _918, _919), vec3(_2340, _2341, _2342));
    float _4555 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2352 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2340, _2341, _2342));
    float _4566 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2356 = _2332 * _2332;
    float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
    float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
    float _2369 = 0.959999978542327880859375 - _1077;
    float _2371 = 0.959999978542327880859375 - _1078;
    float _2372 = 0.959999978542327880859375 - _1079;
    float _2379 = 1.0 - _2332;
    float _2390 = (0.5 / (((_2347 * ((_2346 * _2379) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2379) + _2332) * _2346))) * _2346;
    float _4577 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
    uint _2406 = _2179 + 9u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _920) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2219].x + _997;
    float _2420 = cbLight._m0[_2219].y + _998;
    float _2421 = cbLight._m0[_2219].z + _999;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2219].xyz));
    float _4588 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2433 = dot(vec3(_917, _918, _919), vec3(_2426, _2427, _2428));
    float _4599 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2437 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2426, _2427, _2428));
    float _4610 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2441 = _2418 * _2418;
    float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
    float _2452 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2459 = 1.0 - _2418;
    float _2469 = (0.5 / (((_2347 * ((_2432 * _2459) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2459) + _2418) * _2432))) * _2432;
    float _4621 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
    float _2481 = (((((_2452 * _2369) + _1080) * cbLight._m0[_2406].x) * _2471) * _2202) + ((((cbLight._m0[_2318].x * _2171) * ((_2368 * _2369) + _1080)) * _2392) * _2215);
    float _2482 = (((((_2452 * _2371) + _1082) * cbLight._m0[_2406].y) * _2471) * _2202) + ((((cbLight._m0[_2318].y * _2172) * ((_2368 * _2371) + _1082)) * _2392) * _2215);
    float _2483 = (((((_2452 * _2372) + _1083) * cbLight._m0[_2406].z) * _2471) * _2202) + ((((cbLight._m0[_2318].z * _2173) * ((_2368 * _2372) + _1083)) * _2392) * _2215);
    float _2545;
    float _2547;
    float _2549;
    if (_2255)
    {
        _2545 = _2481;
        _2547 = _2482;
        _2549 = _2483;
    }
    else
    {
        uint _2551 = _2179 + 2u;
        uint _2555 = _2179 + 10u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _920) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _997;
        float _2572 = cbLight._m0[_2551].y + _998;
        float _2573 = cbLight._m0[_2551].z + _999;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2551].xyz));
        float _4632 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2585 = dot(vec3(_917, _918, _919), vec3(_2578, _2579, _2580));
        float _4643 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4654 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2611 = 1.0 - _2570;
        float _2621 = (0.5 / (((_2347 * ((_2584 * _2611) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2611) + _2570) * _2584))) * _2584;
        float _4665 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2623 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2624 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2545 = (((((_2604 * _2369) + _1080) * cbLight._m0[_2555].x) * _2623) * _2624) + _2481;
        _2547 = (((((_2604 * _2371) + _1082) * cbLight._m0[_2555].y) * _2623) * _2624) + _2482;
        _2549 = (((((_2604 * _2372) + _1083) * cbLight._m0[_2555].z) * _2623) * _2624) + _2483;
    }
    float _2659;
    float _2661;
    float _2663;
    if (_2273)
    {
        _2659 = _2545;
        _2661 = _2547;
        _2663 = _2549;
    }
    else
    {
        uint _2670 = _2179 + 3u;
        uint _2674 = _2179 + 11u;
        float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2670].w)) * _920) * 0.949999988079071044921875);
        float _2689 = _2688 * _2688;
        float _2690 = cbLight._m0[_2670].x + _997;
        float _2691 = cbLight._m0[_2670].y + _998;
        float _2692 = cbLight._m0[_2670].z + _999;
        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
        float _2697 = _2696 * _2690;
        float _2698 = _2696 * _2691;
        float _2699 = _2696 * _2692;
        float _2700 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2670].xyz));
        float _4681 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2704 = dot(vec3(_917, _918, _919), vec3(_2697, _2698, _2699));
        float _4692 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2708 = dot(vec3(cbLight._m0[_2670].xyz), vec3(_2697, _2698, _2699));
        float _4703 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2712 = _2689 * _2689;
        float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
        float _2723 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2730 = 1.0 - _2689;
        float _2740 = (0.5 / (((_2347 * ((_2703 * _2730) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2730) + _2689) * _2703))) * _2703;
        float _4714 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2742 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
        float _2743 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2659 = (((((_2723 * _2369) + _1080) * cbLight._m0[_2674].x) * _2742) * _2743) + _2545;
        _2661 = (((((_2723 * _2371) + _1082) * cbLight._m0[_2674].y) * _2742) * _2743) + _2547;
        _2663 = (((((_2723 * _2372) + _1083) * cbLight._m0[_2674].z) * _2742) * _2743) + _2549;
    }
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_2177.y == 0u)
    {
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2818;
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2818;
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2818;
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.x;
        uint _2845 = uint((float(_2833.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1018) / _2834))) + floor(float(uint(cbSceneParam._m0[85u].x * _1017) / _2834)));
        float _2855 = (log2(_2821 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2856 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        uint _2859 = uint(isnan(14.0) ? _2856 : (isnan(_2856) ? 14.0 : min(_2856, 14.0)));
        uvec4 _2864 = texelFetch(g_lightClusterGridBuffer, int(((_2859 << 2u) + (_2845 << 6u)) >> 2u));
        uint _2865 = _2864.x;
        uint _2866 = _2833.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2866 >> 4u) & 15u)) + 4294967295u) & _2865) == 0u) || ((_2866 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            uint _3125 = 0u;
            uint _3134;
            bool _3135;
            for (;;)
            {
                _3134 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                _3135 = _3134 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3135)
                {
                    frontier_phi_66_pred = _3119;
                    frontier_phi_66_pred_1 = _3124;
                    frontier_phi_66_pred_2 = _3123;
                    frontier_phi_66_pred_3 = _3122;
                    frontier_phi_66_pred_4 = _3121;
                    frontier_phi_66_pred_5 = _3120;
                }
                else
                {
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    uint _3270;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3134;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    for (;;)
                    {
                        uint _3274 = uint(findLSB(_3270)) + (_3125 << 5u);
                        uint _3271 = (_3270 + 4294967295u) & _3270;
                        uint _3276 = _3274 * 48u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3296 = (_3274 * 48u) + 4u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3315 = (_3274 * 48u) + 8u;
                        vec3 _3326 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x));
                        float _3330 = _3290.x - _2819;
                        float _3331 = _3290.y - _2820;
                        float _3332 = _3290.z - _2821;
                        float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                        float _3336 = inversesqrt(_3333);
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3340 = dot(vec3(_1036, _1039, _1042), vec3(_3337, _3338, _3339));
                        float _3345 = 1.0 - (_3333 * _3290.w);
                        float _4740 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3347 = sqrt(_3333) * _3309.w;
                        float _3350 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3340) + _3351;
                        float _3357 = _3347 * _3347;
                        float _3361 = ((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3346) / ((_3357 * 0.699999988079071044921875) + 1.0);
                        float _3365 = (-0.0) - _2819;
                        float _3366 = (-0.0) - _2820;
                        float _3367 = (-0.0) - _2821;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3382 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                        float _3383 = 1.0 - _1111;
                        float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                        float _3391 = _3390 * _3390;
                        float _3392 = _3391 * _3391;
                        float _3393 = _3372 + _3337;
                        float _3394 = _3373 + _3338;
                        float _3395 = _3374 + _3339;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3403 = dot(vec3(_1036, _1039, _1042), vec3(_3372, _3373, _3374));
                        float _4756 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3407 = dot(vec3(_1036, _1039, _1042), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                        float _4767 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                        float _3415 = _3350 * _3391;
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3340) + _3416;
                        float _4778 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3421 = 1.0 - _3391;
                        float _3431 = (0.5 / (((_3420 * ((_3406 * _3421) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3391) * _3406))) * _3420;
                        float _4789 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3442 = (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3414 * _3414) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125))) * _3346;
                        _3194 = (_3361 * _3309.x) + _3267;
                        _3195 = (_3361 * _3309.y) + _3268;
                        _3196 = (_3361 * _3309.z) + _3269;
                        _3191 = (_3442 * _3326.x) + _3264;
                        _3192 = (_3442 * _3326.y) + _3265;
                        _3193 = (_3442 * _3326.z) + _3266;
                        if (_3271 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3271;
                        }
                    }
                    frontier_phi_66_pred = _3191;
                    frontier_phi_66_pred_1 = _3196;
                    frontier_phi_66_pred_2 = _3195;
                    frontier_phi_66_pred_3 = _3194;
                    frontier_phi_66_pred_4 = _3193;
                    frontier_phi_66_pred_5 = _3192;
                }
                _2967 = frontier_phi_66_pred;
                _2977 = frontier_phi_66_pred_1;
                _2975 = frontier_phi_66_pred_2;
                _2973 = frontier_phi_66_pred_3;
                _2971 = frontier_phi_66_pred_4;
                _2969 = frontier_phi_66_pred_5;
                uint _3126 = _3125 + 1u;
                if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3119 = _2967;
                    _3120 = _2969;
                    _3121 = _2971;
                    _3122 = _2973;
                    _3123 = _2975;
                    _3124 = _2977;
                    _3125 = _3126;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((4294967295u << _2983) & _2865) == 0u)
        {
            _3087 = _2966;
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
            _3095 = _2974;
            _3097 = _2976;
        }
        else
        {
            float _3112 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
            float _3113 = _3112 * _2819;
            float _3114 = _3112 * _2820;
            float _3115 = _3112 * _2821;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3247 = _2966;
                float _3248 = _2968;
                float _3249 = _2970;
                float _3250 = _2972;
                float _3251 = _2974;
                float _3252 = _2976;
                uint _3253 = _2983;
                uint _3262;
                bool _3263;
                for (;;)
                {
                    _3262 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                    _3263 = _3262 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3263)
                    {
                        frontier_phi_77_pred = _3252;
                        frontier_phi_77_pred_1 = _3251;
                        frontier_phi_77_pred_2 = _3250;
                        frontier_phi_77_pred_3 = _3249;
                        frontier_phi_77_pred_4 = _3248;
                        frontier_phi_77_pred_5 = _3247;
                    }
                    else
                    {
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        float _3473 = _3251;
                        float _3474 = _3252;
                        uint _3475 = _3262;
                        uint _3476;
                        vec4 _3501;
                        float _3502;
                        vec4 _3517;
                        vec3 _3529;
                        vec4 _3544;
                        vec4 _3559;
                        float _3605;
                        bool _3606;
                        for (;;)
                        {
                            uint _3486 = ((_3253 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3475));
                            _3476 = (_3475 + 4294967295u) & _3475;
                            uint _3488 = _3486 * 40u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3502 = _3501.w;
                            uint _3504 = (_3486 * 40u) + 4u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3486 * 40u) + 8u;
                            _3529 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x));
                            uint _3531 = (_3486 * 40u) + 16u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3486 * 40u) + 20u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3486 * 40u) + 24u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3580 = (_3486 * 40u) + 28u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3605 = fma(_2821, _3593.z, fma(_2820, _3593.y, _3593.x * _2819)) + _3593.w;
                            _3606 = !((fma(_2821, _3574.z, fma(_2820, _3574.y, _3574.x * _2819)) + _3574.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3606)
                            {
                                float _3633 = _3501.x - _2819;
                                float _3634 = _3501.y - _2820;
                                float _3635 = _3501.z - _2821;
                                float _3636 = dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635));
                                float _3639 = inversesqrt(_3636);
                                float _3640 = _3639 * _3633;
                                float _3641 = _3639 * _3634;
                                float _3642 = _3639 * _3635;
                                float _3646 = 1.0 - (_3636 / (_3502 * _3502));
                                float _4800 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3651 = sqrt(_3636) * _3517.w;
                                float _3653 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                                float _3654 = _3653 * _3653;
                                float _3657 = ((1.0 - _3654) * dot(vec3(_3640, _3641, _3642), vec3(_1036, _1039, _1042))) + _3654;
                                float _3660 = _3651 * _3651;
                                float _3664 = (fma(_2821, _3544.z, fma(_2820, _3544.y, _3544.x * _2819)) + _3544.w) / _3605;
                                float _3665 = (fma(_2821, _3559.z, fma(_2820, _3559.y, _3559.x * _2819)) + _3559.w) / _3605;
                                float _3669 = 1.0 - dot(vec2(_3664, _3665), vec2(_3664, _3665));
                                float _4816 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3671 = _3670 * (((isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))) * _3647) / ((_3660 * 0.699999988079071044921875) + 1.0));
                                float _3683 = exp2(log2(1.0 / ((_3660 * 3.5) + 5.0)) * 0.25);
                                float _3684 = 1.0 - _1111;
                                float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                                float _3692 = _3691 * _3691;
                                float _3693 = _3692 * _3692;
                                float _3694 = _3640 - _3113;
                                float _3695 = _3641 - _3114;
                                float _3696 = _3642 - _3115;
                                float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                                float _3704 = dot(vec3(_1036, _1039, _1042), vec3((-0.0) - _3113, (-0.0) - _3114, (-0.0) - _3115));
                                float _4827 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3708 = dot(vec3(_1036, _1039, _1042), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                                float _4838 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                                float _3716 = _3653 * _3692;
                                float _3717 = _3716 * _3716;
                                float _3723 = ((1.0 - _3717) * dot(vec3(_1036, _1039, _1042), vec3(_3640, _3641, _3642))) + _3717;
                                float _4849 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3725 = 1.0 - _3692;
                                float _3735 = (0.5 / (((_3724 * ((_3707 * _3725) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3724 * _3725) + _3692) * _3707))) * _3724;
                                float _4860 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3745 = (_3670 * _3647) * (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3715 * _3715) * ((_3660 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3671 * _3517.y;
                                frontier_phi_83_pred_1 = _3671 * _3517.x;
                                frontier_phi_83_pred_2 = _3745 * _3529.z;
                                frontier_phi_83_pred_3 = _3745 * _3529.y;
                                frontier_phi_83_pred_4 = _3745 * _3529.x;
                                frontier_phi_83_pred_5 = _3671 * _3517.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3753 = frontier_phi_83_pred;
                            _3752 = frontier_phi_83_pred_1;
                            _3751 = frontier_phi_83_pred_2;
                            _3750 = frontier_phi_83_pred_3;
                            _3749 = frontier_phi_83_pred_4;
                            _3754 = frontier_phi_83_pred_5;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            if (_3476 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3476;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3461;
                        frontier_phi_77_pred_1 = _3460;
                        frontier_phi_77_pred_2 = _3459;
                        frontier_phi_77_pred_3 = _3458;
                        frontier_phi_77_pred_4 = _3457;
                        frontier_phi_77_pred_5 = _3456;
                    }
                    _3098 = frontier_phi_77_pred;
                    _3096 = frontier_phi_77_pred_1;
                    _3094 = frontier_phi_77_pred_2;
                    _3092 = frontier_phi_77_pred_3;
                    _3090 = frontier_phi_77_pred_4;
                    _3088 = frontier_phi_77_pred_5;
                    uint _3254 = _3253 + 1u;
                    if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3247 = _3088;
                        _3248 = _3090;
                        _3249 = _3092;
                        _3250 = _3094;
                        _3251 = _3096;
                        _3252 = _3098;
                        _3253 = _3254;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3092;
                frontier_phi_58_59_ladder_1 = _3098;
                frontier_phi_58_59_ladder_2 = _3096;
                frontier_phi_58_59_ladder_3 = _3094;
                frontier_phi_58_59_ladder_4 = _3090;
                frontier_phi_58_59_ladder_5 = _3088;
            }
            else
            {
                frontier_phi_58_59_ladder = _2970;
                frontier_phi_58_59_ladder_1 = _2976;
                frontier_phi_58_59_ladder_2 = _2974;
                frontier_phi_58_59_ladder_3 = _2972;
                frontier_phi_58_59_ladder_4 = _2968;
                frontier_phi_58_59_ladder_5 = _2966;
            }
            _3087 = frontier_phi_58_59_ladder_5;
            _3089 = frontier_phi_58_59_ladder_4;
            _3091 = frontier_phi_58_59_ladder;
            _3093 = frontier_phi_58_59_ladder_3;
            _3095 = frontier_phi_58_59_ladder_2;
            _3097 = frontier_phi_58_59_ladder_1;
        }
        float _3102 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _2878 = (_3102 * _3093) + _2311;
        _2880 = (_3102 * _3095) + _2313;
        _2882 = (_3102 * _3097) + _2315;
        _2884 = ((_3087 * _1080) * _3102) + _2659;
        _2886 = ((_3089 * _1082) * _3102) + _2661;
        _2888 = ((_3091 * _1083) * _3102) + _2663;
    }
    else
    {
        _2878 = _2311;
        _2880 = _2313;
        _2882 = _2315;
        _2884 = _2659;
        _2886 = _2661;
        _2888 = _2663;
    }
    float _4876 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4887 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4898 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _2905 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2878 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1095))) + ((_2884 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    float _2906 = ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2880 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1095))) + ((_2886 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    float _2907 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2882 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1095))) + ((_2888 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    uint _2908 = _1055 + 6u;
    float _2916 = _1017 / cbSceneParam._m0[86u].x;
    float _2917 = _1018 / cbSceneParam._m0[86u].y;
    vec4 _2931 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2933 = _2931.x;
    float _2934 = _2931.y;
    float _2935 = _2931.z;
    float _2936 = _2931.w;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _2992 = _2991 / _940;
        float _3003 = _2992 * _990;
        float _3004 = _991 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3007 = _2992 * _992;
        float _3009 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3010 = _3009 + cbSceneParam._m0[79u].w;
        float _3011 = cbSceneParam._m0[79u].w - _3004;
        float _3017 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3007 * _3007));
        float _3020 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3017;
        float _3025 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3027 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3204;
        if (abs((_3005 - _3009) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3204 = ((((_3010 > 0.0) ? exp2(_3025 * _3010) : (2.0 - exp2(_3027 * _3010))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3020;
        }
        else
        {
            float _3148 = 1.0 / cbSceneParam._m0[80u].x;
            float _3149 = isnan(_3011) ? _3010 : (isnan(_3010) ? _3011 : max(_3010, _3011));
            float _3150 = isnan(_3011) ? _3010 : (isnan(_3010) ? _3011 : min(_3010, _3011));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            _3204 = ((abs(_3017 / _3005) * cbSceneParam._m0[80u].y) * ((((_3159 - _3160) * 2.0) - ((exp2(_3025 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0)))) - exp2(_3025 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))))) * _3148)) - ((exp2(_3027 * _3159) - exp2(_3027 * _3160)) * _3148))) + (_3020 * cbSceneParam._m0[80u].z);
        }
        vec4 _3206 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, 1.0), 0.0);
        float _3215 = exp2((_3204 * (-1.44269502162933349609375)) * (1.0 - _3206.w));
        float _3216 = log2(_3215);
        float _3232 = log2(_2936);
        _3029 = (exp2(_3232 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].x)) * _3206.x) / cbSceneParam._m0[78u].x)) + _2933;
        _3031 = (exp2(_3232 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].y)) * _3206.y) / cbSceneParam._m0[78u].y)) + _2934;
        _3033 = (exp2(_3232 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].z)) * _3206.z) / cbSceneParam._m0[78u].z)) + _2935;
        _3035 = _3215 * _2936;
    }
    else
    {
        _3029 = _2933;
        _3031 = _2934;
        _3033 = _2935;
        _3035 = _2936;
    }
    bool _3242;
    vec4 _3045;
    vec4 _3067;
    float _3069;
    float _3073;
    float _3074;
    float _3075;
    float _3076;
    bool _3086;
    for (;;)
    {
        _3045 = cbMatDynParam._m0[0u];
        float _3047 = roundEven(_3045.y);
        bool _3048 = _3047 == 3.0;
        float _3049 = log2(_3035);
        float _3056 = exp2(_3049 * cbSceneParam._m0[78u].x) * _2905;
        float _3057 = exp2(_3049 * cbSceneParam._m0[78u].y) * _2906;
        float _3058 = exp2(_3049 * cbSceneParam._m0[78u].z) * _2907;
        float _3065 = _1006 + (-0.5);
        _3067 = cbMtdParam._m0[1u];
        _3069 = _3067.y * _3065;
        float _3072 = (_3047 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3073 = _3072 * (_3048 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3029)));
        _3074 = _3072 * (_3048 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3031)));
        _3075 = _3072 * (_3048 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3033)));
        _3076 = _3065 * 0.999000012874603271484375;
        _3086 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3086)
        {
            if ((cbInstanceData._m0[_1055 + 7u].x + _3076) < 0.5)
            {
                _3242 = true;
                break;
            }
        }
        uint _3183 = _1056 + uint(_3045.w);
        if ((cbInstanceData._m0[_3183].w < 1.0) && ((cbInstanceData._m0[_3183].w + _3076) < 0.5))
        {
            _3242 = true;
            break;
        }
        if ((_3069 + 1.0) < _3067.x)
        {
            _3242 = true;
            break;
        }
        _3242 = false;
        break;
    }
    float _3447;
    if (_3242)
    {
        discard_state = true;
        _3447 = 0.0;
    }
    else
    {
        _3447 = cbInstanceData._m0[_2908].w;
    }
    SV_Target.x = _3073;
    SV_Target.y = _3074;
    SV_Target.z = _3075;
    SV_Target.w = _3447;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2908].w;
    discard_exit();
}


