#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1493;
float _3870;
float _3871;
float _3872;
float _3873;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _303 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _326 = log2(0.0);
    float _328 = exp2(_326 * cbMtdParam._m0[23u].x);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    float _339 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _341 = isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0));
    vec4 _353 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _356 = _353.y;
    float _359 = (_353.x + (-0.02500000037252902984619140625)) * 8.0;
    float _363 = roundEven(5.0 - _359);
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(4.0) ? _364 : (isnan(_364) ? 4.0 : min(_364, 4.0));
    float _378 = floor(_365);
    vec4 _381 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _378));
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[17u].x;
    _199[0u] = cbMtdParam._m0[17u].y;
    _200[0u] = cbMtdParam._m0[17u].z;
    _198[1u] = cbMtdParam._m0[15u].x;
    _199[1u] = cbMtdParam._m0[15u].y;
    _200[1u] = cbMtdParam._m0[15u].z;
    _198[2u] = cbMtdParam._m0[14u].x;
    _199[2u] = cbMtdParam._m0[14u].y;
    _200[2u] = cbMtdParam._m0[14u].z;
    _198[3u] = cbMtdParam._m0[13u].x;
    _199[3u] = cbMtdParam._m0[13u].y;
    _200[3u] = cbMtdParam._m0[13u].z;
    _198[4u] = cbMtdParam._m0[12u].x;
    _199[4u] = cbMtdParam._m0[12u].y;
    _200[4u] = cbMtdParam._m0[12u].z;
    _198[5u] = cbMtdParam._m0[18u].x;
    _199[5u] = cbMtdParam._m0[18u].y;
    _200[5u] = cbMtdParam._m0[18u].z;
    float _445 = roundEven(_359);
    float _446 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    uint _448 = uint(int(isnan(5.0) ? _446 : (isnan(_446) ? 5.0 : min(_446, 5.0))));
    vec4 _478 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _489 = cbMtdParam._m0[9u].x * _478.x;
    float _490 = cbMtdParam._m0[9u].y * _478.y;
    float _491 = cbMtdParam._m0[9u].z * _478.z;
    float _498 = ((((((_198[_448] - cbMtdParam._m0[10u].x) * _356) + cbMtdParam._m0[10u].x) * _381.x) - _489) * _341) + _489;
    float _499 = ((((((_199[_448] - cbMtdParam._m0[10u].y) * _356) + cbMtdParam._m0[10u].y) * _381.y) - _490) * _341) + _490;
    float _500 = ((((((_200[_448] - cbMtdParam._m0[10u].z) * _356) + cbMtdParam._m0[10u].z) * _381.z) - _491) * _341) + _491;
    float _506 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _519 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _538 = (((cbMtdParam._m0[16u].x * _519.x) - _498) * _506) + _498;
    float _539 = (((cbMtdParam._m0[16u].y * _519.y) - _499) * _506) + _499;
    float _540 = (((cbMtdParam._m0[16u].z * _519.z) - _500) * _506) + _500;
    vec4 _553 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _573 = (((cbMtdParam._m0[19u].x * _553.x) - _538) * _330) + _538;
    float _574 = (((cbMtdParam._m0[19u].y * _553.y) - _539) * _330) + _539;
    float _575 = (((cbMtdParam._m0[19u].z * _553.z) - _540) * _330) + _540;
    vec4 _587 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _612 = (_318.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _587.x) - _573) * _305) + _573);
    float _614 = (_318.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _587.y) - _574) * _305) + _574);
    float _616 = (_318.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _587.z) - _575) * _305) + _575);
    float _620 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _629 = (_620 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _620))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3932 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _637 = ((cbMtdParam._m0[21u].x - _612) * _630) + _612;
    float _638 = ((cbMtdParam._m0[21u].y - _614) * _630) + _614;
    float _639 = ((cbMtdParam._m0[21u].z - _616) * _630) + _616;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _679 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _681 = uint(int(isnan(4.0) ? _679 : (isnan(_679) ? 4.0 : min(_679, 4.0))));
    float _688 = ((_194[_681] - cbMtdParam._m0[22u].z) * _341) + cbMtdParam._m0[22u].z;
    float _691 = ((cbMtdParam._m0[22u].w - _688) * _506) + _688;
    float _694 = ((cbMtdParam._m0[25u].x - _691) * _330) + _691;
    float _697 = ((cbMtdParam._m0[26u].x - _694) * _305) + _694;
    float _699 = _697 - (_697 * _620);
    vec4 _715 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _378));
    vec4 _732 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _734 = _732.x;
    float _735 = _732.y;
    float _740 = cbMtdParam._m0[22u].x + _732.z;
    float _743 = (((_715.z + _193[_681]) - _740) * _341) + _740;
    vec4 _755 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _766 = (((_755.z - _743) + cbMtdParam._m0[28u].y) * _506) + _743;
    float _772 = ((((_290 * 2.0) * _766) - _766) * cbMtdParam._m0[24u].w) + _766;
    vec4 _784 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _795 = (((cbMtdParam._m0[23u].z + _784.z) - _772) * _330) + _772;
    vec4 _808 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _819 = (((_808.z - _795) + cbMtdParam._m0[26u].y) * _305) + _795;
    vec4 _834 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _849 = ((cbMtdParam._m0[27u].y * _620) * ((_834.z * cbMtdParam._m0[27u].x) - _819)) + _819;
    float _861 = ((_715.x - _734) * _341) + _734;
    float _862 = ((_715.y - _735) * _341) + _735;
    float _867 = ((_755.x - _861) * _506) + _861;
    float _868 = ((_755.y - _862) * _506) + _862;
    float _873 = ((_784.x - _867) * _330) + _867;
    float _874 = ((_784.y - _868) * _330) + _868;
    float _883 = ((((_808.x - _873) * _305) + _873) * 2.0) + (-1.0);
    float _884 = ((((_808.y - _874) * _305) + _874) * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _3953 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _890 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _900 = ((cbMtdParam._m0[25u].y * ((_286.x * 2.0) + (-1.0))) + _883) + ((((_834.x * 2.0) + (-1.0)) * _620) * cbMtdParam._m0[26u].w);
    float _901 = ((cbMtdParam._m0[25u].y * ((_286.y * 2.0) + (-1.0))) + _884) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_834.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _904 = fma(_890, _235 * NORMAL.x, fma(_901, _242 * TANGENT.x, (_228 * _220) * _900));
    float _907 = fma(_890, _235 * NORMAL.y, fma(_901, _242 * TANGENT.y, (_228 * _221) * _900));
    float _910 = fma(_890, _235 * NORMAL.z, fma(_901, _242 * TANGENT.z, (_228 * _222) * _900));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _3964 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _918 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3986 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3997 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4008 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _922 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _938 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _988 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _978);
    float _989 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _978);
    float _990 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _978);
    float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
    float _995 = _988 * _994;
    float _996 = _989 * _994;
    float _997 = _990 * _994;
    vec4 _1002 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1004 = _1002.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1174 = sqrt(((_988 * _988) + (_989 * _989)) + (_990 * _990));
        float _1180 = (cbMatDynParam._m0[5u].x * _1174) + cbMatDynParam._m0[5u].y;
        float _4019 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1185 = (cbMatDynParam._m0[5u].z * _1174) + cbMatDynParam._m0[5u].w;
        float _4030 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) - _1181)) + _1181) < ((_1004 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1015 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1016 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1034 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1037 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1040 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1053 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1054 = _1053 + 9u;
    uint _1055 = _1054 + uint(cbMatDynParam._m0[0u].w);
    float _1061 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_1055].x;
    float _1062 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1055].y;
    float _1063 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1055].z;
    float _4041 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1067 = 1.0 - _922;
    float _1068 = _1064 * _1067;
    float _1069 = _1065 * _1067;
    float _1070 = _1066 * _1067;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _922;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _922;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _922;
    float _1078 = _1075 + 0.039999999105930328369140625;
    float _1080 = _1076 + 0.039999999105930328369140625;
    float _1081 = _1077 + 0.039999999105930328369140625;
    vec4 _1090 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1015, cbSceneParam._m0[86u].y * _1016));
    float _1093 = _1090.x * TEXCOORD_3.w;
    float _1094 = dot(vec3(_915, _916, _917), vec3(_995, _996, _997));
    float _1097 = _1094 * 2.0;
    float _1101 = (_1097 * _915) - _995;
    float _1102 = (_1097 * _916) - _996;
    float _1103 = (_1097 * _917) - _997;
    float _1107 = abs(dot(vec3(_995, _996, _997), vec3(_915, _916, _917)));
    float _4074 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = sqrt(_918);
    float _1120 = exp2((_1109 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1109 * 3.0));
    float _1126 = (1.0 - _1120) * ((_1109 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1127 = _1120 * _1109;
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1163, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155));
        float _1221 = fma(_1163, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155));
        float _1225 = fma(_1163, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155));
        float _1250 = _1155 + _915;
        float _1251 = _1159 + _916;
        float _1252 = _1163 + _917;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_915, _916, _917), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4122 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_915, _916, _917), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4155 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_915, _916, _917), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4188 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1533 = fma(_1163, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155));
        float _1537 = fma(_1163, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155));
        float _1541 = fma(_1163, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155));
        float _1564 = _1155 + _915;
        float _1565 = _1159 + _916;
        float _1566 = _1163 + _917;
        float _1576 = fma(_1566, cbModelParam._m0[30u].z, fma(_1565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1564)) - _1533;
        float _1577 = fma(_1566, cbModelParam._m0[31u].z, fma(_1565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1564)) - _1537;
        float _1578 = fma(_1566, cbModelParam._m0[32u].z, fma(_1565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1564)) - _1541;
        float _1582 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
        float _1595 = ((_1582 * _1576) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1533 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1596 = ((_1582 * _1577) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1537 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1582 * _1578) / cbModelParam._m0[35u].z) + ((((((_1541 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        float _1632 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1599.x + (-0.5));
        float _1634 = _1632 * (_1599.y + (-0.5));
        float _1635 = _1632 * (_1599.z + (-0.5));
        float _1642 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1606.x + (-0.5));
        float _1644 = _1642 * (_1606.y + (-0.5));
        float _1645 = _1642 * (_1606.z + (-0.5));
        float _1652 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1613.x + (-0.5));
        float _1654 = _1652 * (_1613.y + (-0.5));
        float _1655 = _1652 * (_1613.z + (-0.5));
        float _1662 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1620.x + (-0.5));
        float _1664 = _1662 * (_1620.y + (-0.5));
        float _1665 = _1662 * (_1620.z + (-0.5));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = _1633 * 0.5;
        float _1670 = _1643 * 0.5;
        float _1671 = _1653 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_915, _916, _917), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4251 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1696 + 1.0))) + _1701) * _1666;
        float _1711 = _1634 * 0.5;
        float _1712 = _1644 * 0.5;
        float _1713 = _1654 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_915, _916, _917), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4284 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1738 + 1.0))) + _1743) * _1667;
        float _1753 = _1635 * 0.5;
        float _1754 = _1645 * 0.5;
        float _1755 = _1655 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_915, _916, _917), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4317 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1780 + 1.0))) + _1785) * _1668;
        _1802 = _1635;
        _1803 = _1634;
        _1804 = _1633;
        _1805 = _1645;
        _1806 = _1644;
        _1807 = _1643;
        _1808 = _1655;
        _1809 = _1654;
        _1810 = _1653;
        _1811 = _1668;
        _1812 = _1667;
        _1813 = _1666;
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
    }
    else
    {
        _1802 = _1493;
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = _1493;
        _1812 = _1493;
        _1813 = _1493;
        _1814 = 0.0;
        _1815 = 0.0;
        _1816 = 0.0;
    }
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1505)) + _1505;
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1506)) + _1506;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1507)) + _1507;
    float _1849 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1826));
    float _1870 = _1101 * 0.5;
    float _1871 = _1102 * 0.5;
    float _1872 = _1103 * 0.5;
    float _1873 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1876 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1879 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1913;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1886 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1890 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1894 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1901 = dot(vec4(cbModelParam._m0[39u]), vec4(_1870, _1871, _1872, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1901) ? 0.0 : (isnan(0.0) ? _1901 : max(0.0, _1901))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1924;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1915 = dot(vec4(cbModelParam._m0[40u]), vec4(_1870, _1871, _1872, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1928 = (_1924 * cbModelParam._m0[1u].x) + (_1913 * (1.0 - cbModelParam._m0[1u].x));
    float _1938 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1938 : min(cbModelParam._m0[25u].z, _1938));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1986 = fma(_1163, cbModelParam._m0[13u].z, fma(_1159, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155)) + cbModelParam._m0[13u].w;
        float _1990 = fma(_1163, cbModelParam._m0[14u].z, fma(_1159, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155)) + cbModelParam._m0[14u].w;
        float _1994 = fma(_1163, cbModelParam._m0[15u].z, fma(_1159, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155)) + cbModelParam._m0[15u].w;
        float _1997 = fma(_1103, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101));
        float _2000 = fma(_1103, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101));
        float _2003 = fma(_1103, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101));
        float _2031;
        if (_1997 > 0.0)
        {
            _2031 = abs((1.0 - _1986) / _1997);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1986 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2031 = frontier_phi_17_15_ladder;
        }
        float _2233;
        if (_2000 > 0.0)
        {
            _2233 = abs((1.0 - _1990) / _2000);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1990 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2233 = frontier_phi_26_22_ladder;
        }
        float _2487;
        if (_2003 > 0.0)
        {
            _2487 = abs((1.0 - _1994) / _2003);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1994 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2487 = frontier_phi_38_33_ladder;
        }
        float _2489 = isnan(_2233) ? _2031 : (isnan(_2031) ? _2233 : min(_2031, _2233));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1997) + _1986;
        float _2495 = (_2490 * _2000) + _1990;
        float _2496 = (_2490 * _2003) + _1994;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1939);
            frontier_phi_16_38_ladder = _2624.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2624.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2624.x * cbModelParam._m0[1u].y;
        }
        _2019 = frontier_phi_16_38_ladder_2;
        _2021 = frontier_phi_16_38_ladder_1;
        _2023 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1101, _1102, _1103), _1939);
        _2019 = _2007.x * cbModelParam._m0[1u].y;
        _2021 = _2007.y * cbModelParam._m0[1u].y;
        _2023 = _2007.z * cbModelParam._m0[1u].y;
    }
    float _2027 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2027 : min(cbModelParam._m0[25u].w, _2027));
    float _2117;
    float _2119;
    float _2121;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2081 = fma(_1163, cbModelParam._m0[21u].z, fma(_1159, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155)) + cbModelParam._m0[21u].w;
        float _2085 = fma(_1163, cbModelParam._m0[22u].z, fma(_1159, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155)) + cbModelParam._m0[22u].w;
        float _2089 = fma(_1163, cbModelParam._m0[23u].z, fma(_1159, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155)) + cbModelParam._m0[23u].w;
        float _2092 = fma(_1103, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101));
        float _2095 = fma(_1103, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101));
        float _2098 = fma(_1103, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101));
        float _2238;
        if (_2092 > 0.0)
        {
            _2238 = abs((1.0 - _2081) / _2092);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2081 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2238 = frontier_phi_28_24_ladder;
        }
        float _2514;
        if (_2095 > 0.0)
        {
            _2514 = abs((1.0 - _2085) / _2095);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2085 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2514 = frontier_phi_40_35_ladder;
        }
        float _2727;
        if (_2098 > 0.0)
        {
            _2727 = abs((1.0 - _2089) / _2098);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2089 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2727 = frontier_phi_49_46_ladder;
        }
        float _2729 = isnan(_2514) ? _2238 : (isnan(_2238) ? _2514 : min(_2238, _2514));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _2092) + _2081;
        float _2735 = (_2730 * _2095) + _2085;
        float _2736 = (_2730 * _2098) + _2089;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _2028);
            frontier_phi_25_49_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2117 = frontier_phi_25_49_ladder_2;
        _2119 = frontier_phi_25_49_ladder_1;
        _2121 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2101 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1101, _1102, _1103), _2028);
        _2117 = _2101.x * cbModelParam._m0[1u].z;
        _2119 = _2101.y * cbModelParam._m0[1u].z;
        _2121 = _2101.z * cbModelParam._m0[1u].z;
    }
    float _2134 = (((_1126 * _1078) + _1127) * _1093) * ((cbModelParam._m0[1u].w * (_2117 - _2019)) + _2019);
    float _2136 = (((_1126 * _1080) + _1127) * _1093) * ((cbModelParam._m0[1u].w * (_2119 - _2021)) + _2021);
    float _2138 = (((_1126 * _1081) + _1127) * _1093) * ((cbModelParam._m0[1u].w * (_2121 - _2023)) + _2023);
    float _2141 = fma(_2138, cbSceneParam._m0[89u].z, fma(_2136, cbSceneParam._m0[89u].y, _2134 * cbSceneParam._m0[89u].x));
    float _2144 = fma(_2138, cbSceneParam._m0[90u].z, fma(_2136, cbSceneParam._m0[90u].y, _2134 * cbSceneParam._m0[90u].x));
    float _2147 = fma(_2138, cbSceneParam._m0[91u].z, fma(_2136, cbSceneParam._m0[91u].y, _2134 * cbSceneParam._m0[91u].x));
    uvec4 _2157 = floatBitsToUint(cbInstanceData._m0[_1053 + 5u]);
    uint _2159 = _2157.x * 14u;
    uint _2160 = _2159 + 13u;
    float _2167 = _1093 + (-1.0);
    float _2172 = (cbLight._m0[_2160].x * _2167) + 1.0;
    float _2173 = (cbLight._m0[_2160].y * _2167) + 1.0;
    float _2174 = (cbLight._m0[_2160].z * _2167) + 1.0;
    float _2175 = (cbLight._m0[_2160].w * _2167) + 1.0;
    uint _2176 = _2159 + 5u;
    float _2182 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2186 = _2159 + 4u;
    float _2192 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2196 = _2159 | 1u;
    float _2207 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_915, _916, _917));
    float _2210 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_915, _916, _917));
    float _4453 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _4464 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2215 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2217 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2224 = ((cbLight._m0[_2176].x * _2182) * _2217) + ((cbLight._m0[_2186].x * _2192) * _2215);
    float _2225 = ((_2182 * cbLight._m0[_2176].y) * _2217) + ((_2192 * cbLight._m0[_2186].y) * _2215);
    float _2226 = ((_2182 * cbLight._m0[_2176].z) * _2217) + ((_2192 * cbLight._m0[_2186].z) * _2215);
    uvec4 _2230 = floatBitsToUint(cbLight._m0[_2159 + 12u]);
    bool _2232 = _2230.x == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2232)
    {
        _2243 = _2224;
        _2245 = _2225;
        _2247 = _2226;
    }
    else
    {
        uint _2251 = _2159 + 6u;
        float _2267 = (dot(vec3(cbLight._m0[_2159 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4475 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2270 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2243 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2224;
        _2245 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2225;
        _2247 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2226;
    }
    bool _2250 = _2230.y == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2250)
    {
        _2288 = _2243;
        _2290 = _2245;
        _2292 = _2247;
    }
    else
    {
        uint _2458 = _2159 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2159 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4491 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2477 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2288 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2243;
        _2290 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2245;
        _2292 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2247;
    }
    uint _2295 = _2159 + 8u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _918) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2159].x + _995;
    float _2311 = cbLight._m0[_2159].y + _996;
    float _2312 = cbLight._m0[_2159].z + _997;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2159].xyz));
    float _4507 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2324 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2325 = dot(vec3(_915, _916, _917), vec3(_2317, _2318, _2319));
    float _4529 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2317, _2318, _2319));
    float _4540 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2309 * _2309;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2346 = 0.959999978542327880859375 - _1075;
    float _2348 = 0.959999978542327880859375 - _1076;
    float _2349 = 0.959999978542327880859375 - _1077;
    float _2356 = 1.0 - _2309;
    float _2367 = (0.5 / (((_2324 * ((_2323 * _2356) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2356) + _2309) * _2323))) * _2323;
    float _4551 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    uint _2380 = _2159 + 9u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _918) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2196].x + _995;
    float _2394 = cbLight._m0[_2196].y + _996;
    float _2395 = cbLight._m0[_2196].z + _997;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2196].xyz));
    float _4562 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2407 = dot(vec3(_915, _916, _917), vec3(_2400, _2401, _2402));
    float _4573 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2400, _2401, _2402));
    float _4584 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2392 * _2392;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2433 = 1.0 - _2392;
    float _2443 = (0.5 / (((_2324 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2433) + _2392) * _2406))) * _2406;
    float _4595 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    float _2455 = (((((_2426 * _2346) + _1078) * cbLight._m0[_2380].x) * _2445) * _2182) + (((((_2345 * _2346) + _1078) * cbLight._m0[_2295].x) * _2369) * _2192);
    float _2456 = (((((_2426 * _2348) + _1080) * cbLight._m0[_2380].y) * _2445) * _2182) + (((((_2345 * _2348) + _1080) * cbLight._m0[_2295].y) * _2369) * _2192);
    float _2457 = (((((_2426 * _2349) + _1081) * cbLight._m0[_2380].z) * _2445) * _2182) + (((((_2345 * _2349) + _1081) * cbLight._m0[_2295].z) * _2369) * _2192);
    float _2519;
    float _2521;
    float _2523;
    if (_2232)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2159 + 2u;
        uint _2529 = _2159 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _918) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _995;
        float _2546 = cbLight._m0[_2525].y + _996;
        float _2547 = cbLight._m0[_2525].z + _997;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2525].xyz));
        float _4606 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2559 = dot(vec3(_915, _916, _917), vec3(_2552, _2553, _2554));
        float _4617 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4628 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2585 = 1.0 - _2544;
        float _2595 = (0.5 / (((_2324 * ((_2558 * _2585) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2585) + _2544) * _2558))) * _2558;
        float _4639 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2519 = (((((_2578 * _2346) + _1078) * cbLight._m0[_2529].x) * _2597) * _2598) + _2455;
        _2521 = (((((_2578 * _2348) + _1080) * cbLight._m0[_2529].y) * _2597) * _2598) + _2456;
        _2523 = (((((_2578 * _2349) + _1081) * cbLight._m0[_2529].z) * _2597) * _2598) + _2457;
    }
    float _2633;
    float _2635;
    float _2637;
    if (_2250)
    {
        _2633 = _2519;
        _2635 = _2521;
        _2637 = _2523;
    }
    else
    {
        uint _2644 = _2159 + 3u;
        uint _2648 = _2159 + 11u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _918) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _995;
        float _2665 = cbLight._m0[_2644].y + _996;
        float _2666 = cbLight._m0[_2644].z + _997;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2644].xyz));
        float _4655 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2678 = dot(vec3(_915, _916, _917), vec3(_2671, _2672, _2673));
        float _4666 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4677 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2704 = 1.0 - _2663;
        float _2714 = (0.5 / (((_2324 * ((_2677 * _2704) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2704) + _2663) * _2677))) * _2677;
        float _4688 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2633 = (((((_2697 * _2346) + _1078) * cbLight._m0[_2648].x) * _2716) * _2717) + _2519;
        _2635 = (((((_2697 * _2348) + _1080) * cbLight._m0[_2648].y) * _2716) * _2717) + _2521;
        _2637 = (((((_2697 * _2349) + _1081) * cbLight._m0[_2648].z) * _2716) * _2717) + _2523;
    }
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_2157.y == 0u)
    {
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2792;
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2792;
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2792;
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.x;
        uint _2819 = uint((float(_2807.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1016) / _2808))) + floor(float(uint(cbSceneParam._m0[85u].x * _1015) / _2808)));
        float _2829 = (log2(_2795 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2830 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        uint _2833 = uint(isnan(14.0) ? _2830 : (isnan(_2830) ? 14.0 : min(_2830, 14.0)));
        uvec4 _2838 = texelFetch(g_lightClusterGridBuffer, int(((_2833 << 2u) + (_2819 << 6u)) >> 2u));
        uint _2839 = _2838.x;
        uint _2840 = _2807.z;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((((1u << ((_2840 >> 4u) & 15u)) + 4294967295u) & _2839) == 0u) || ((_2840 & 240u) == 0u))
        {
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
        }
        else
        {
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            uint _3099 = 0u;
            uint _3108;
            bool _3109;
            for (;;)
            {
                _3108 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                _3109 = _3108 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3109)
                {
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3098;
                    frontier_phi_66_pred_2 = _3097;
                    frontier_phi_66_pred_3 = _3096;
                    frontier_phi_66_pred_4 = _3095;
                    frontier_phi_66_pred_5 = _3094;
                }
                else
                {
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    uint _3244;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3108;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    for (;;)
                    {
                        uint _3248 = uint(findLSB(_3244)) + (_3099 << 5u);
                        uint _3245 = (_3244 + 4294967295u) & _3244;
                        uint _3250 = _3248 * 48u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 3u)).x));
                        uint _3270 = (_3248 * 48u) + 4u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3289 = (_3248 * 48u) + 8u;
                        vec3 _3300 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x));
                        float _3304 = _3264.x - _2793;
                        float _3305 = _3264.y - _2794;
                        float _3306 = _3264.z - _2795;
                        float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                        float _3310 = inversesqrt(_3307);
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3314 = dot(vec3(_1034, _1037, _1040), vec3(_3311, _3312, _3313));
                        float _3319 = 1.0 - (_3307 * _3264.w);
                        float _4714 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3321 = sqrt(_3307) * _3283.w;
                        float _3324 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3314) + _3325;
                        float _3331 = _3321 * _3321;
                        float _3335 = ((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3320) / ((_3331 * 0.699999988079071044921875) + 1.0);
                        float _3339 = (-0.0) - _2793;
                        float _3340 = (-0.0) - _2794;
                        float _3341 = (-0.0) - _2795;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3356 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _1109;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3346 + _3311;
                        float _3368 = _3347 + _3312;
                        float _3369 = _3348 + _3313;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_1034, _1037, _1040), vec3(_3346, _3347, _3348));
                        float _4730 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3381 = dot(vec3(_1034, _1037, _1040), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4741 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3324 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3314) + _3390;
                        float _4752 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4763 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3416 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3388 * _3388) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125))) * _3320;
                        _3168 = (_3335 * _3283.x) + _3241;
                        _3169 = (_3335 * _3283.y) + _3242;
                        _3170 = (_3335 * _3283.z) + _3243;
                        _3165 = (_3416 * _3300.x) + _3238;
                        _3166 = (_3416 * _3300.y) + _3239;
                        _3167 = (_3416 * _3300.z) + _3240;
                        if (_3245 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3245;
                        }
                    }
                    frontier_phi_66_pred = _3165;
                    frontier_phi_66_pred_1 = _3170;
                    frontier_phi_66_pred_2 = _3169;
                    frontier_phi_66_pred_3 = _3168;
                    frontier_phi_66_pred_4 = _3167;
                    frontier_phi_66_pred_5 = _3166;
                }
                _2941 = frontier_phi_66_pred;
                _2951 = frontier_phi_66_pred_1;
                _2949 = frontier_phi_66_pred_2;
                _2947 = frontier_phi_66_pred_3;
                _2945 = frontier_phi_66_pred_4;
                _2943 = frontier_phi_66_pred_5;
                uint _3100 = _3099 + 1u;
                if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3093 = _2941;
                    _3094 = _2943;
                    _3095 = _2945;
                    _3096 = _2947;
                    _3097 = _2949;
                    _3098 = _2951;
                    _3099 = _3100;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
        }
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.z;
        uint _2957 = (_2955 >> 8u) & 15u;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((4294967295u << _2957) & _2839) == 0u)
        {
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
        }
        else
        {
            float _3086 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
            float _3087 = _3086 * _2793;
            float _3088 = _3086 * _2794;
            float _3089 = _3086 * _2795;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2957 < ((_2955 >> 12u) & 15u))
            {
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3221 = _2940;
                float _3222 = _2942;
                float _3223 = _2944;
                float _3224 = _2946;
                float _3225 = _2948;
                float _3226 = _2950;
                uint _3227 = _2957;
                uint _3236;
                bool _3237;
                for (;;)
                {
                    _3236 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                    _3237 = _3236 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3237)
                    {
                        frontier_phi_77_pred = _3226;
                        frontier_phi_77_pred_1 = _3225;
                        frontier_phi_77_pred_2 = _3224;
                        frontier_phi_77_pred_3 = _3223;
                        frontier_phi_77_pred_4 = _3222;
                        frontier_phi_77_pred_5 = _3221;
                    }
                    else
                    {
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        uint _3449 = _3236;
                        uint _3450;
                        vec4 _3475;
                        float _3476;
                        vec4 _3491;
                        vec3 _3503;
                        vec4 _3518;
                        vec4 _3533;
                        float _3579;
                        bool _3580;
                        for (;;)
                        {
                            uint _3460 = ((_3227 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3449));
                            _3450 = (_3449 + 4294967295u) & _3449;
                            uint _3462 = _3460 * 40u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3476 = _3475.w;
                            uint _3478 = (_3460 * 40u) + 4u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3460 * 40u) + 8u;
                            _3503 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x));
                            uint _3505 = (_3460 * 40u) + 16u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3460 * 40u) + 20u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3460 * 40u) + 24u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3554 = (_3460 * 40u) + 28u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            _3579 = fma(_2795, _3567.z, fma(_2794, _3567.y, _3567.x * _2793)) + _3567.w;
                            _3580 = !((fma(_2795, _3548.z, fma(_2794, _3548.y, _3548.x * _2793)) + _3548.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3580)
                            {
                                float _3607 = _3475.x - _2793;
                                float _3608 = _3475.y - _2794;
                                float _3609 = _3475.z - _2795;
                                float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                                float _3613 = inversesqrt(_3610);
                                float _3614 = _3613 * _3607;
                                float _3615 = _3613 * _3608;
                                float _3616 = _3613 * _3609;
                                float _3620 = 1.0 - (_3610 / (_3476 * _3476));
                                float _4774 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3625 = sqrt(_3610) * _3491.w;
                                float _3627 = 1.39999997615814208984375 / (_3625 + 1.39999997615814208984375);
                                float _3628 = _3627 * _3627;
                                float _3631 = ((1.0 - _3628) * dot(vec3(_3614, _3615, _3616), vec3(_1034, _1037, _1040))) + _3628;
                                float _3634 = _3625 * _3625;
                                float _3638 = (fma(_2795, _3518.z, fma(_2794, _3518.y, _3518.x * _2793)) + _3518.w) / _3579;
                                float _3639 = (fma(_2795, _3533.z, fma(_2794, _3533.y, _3533.x * _2793)) + _3533.w) / _3579;
                                float _3643 = 1.0 - dot(vec2(_3638, _3639), vec2(_3638, _3639));
                                float _4790 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3645 = _3644 * (((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3621) / ((_3634 * 0.699999988079071044921875) + 1.0));
                                float _3657 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                                float _3658 = 1.0 - _1109;
                                float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                                float _3666 = _3665 * _3665;
                                float _3667 = _3666 * _3666;
                                float _3668 = _3614 - _3087;
                                float _3669 = _3615 - _3088;
                                float _3670 = _3616 - _3089;
                                float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                                float _3678 = dot(vec3(_1034, _1037, _1040), vec3((-0.0) - _3087, (-0.0) - _3088, (-0.0) - _3089));
                                float _4801 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3682 = dot(vec3(_1034, _1037, _1040), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                                float _4812 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                                float _3690 = _3627 * _3666;
                                float _3691 = _3690 * _3690;
                                float _3697 = ((1.0 - _3691) * dot(vec3(_1034, _1037, _1040), vec3(_3614, _3615, _3616))) + _3691;
                                float _4823 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3699 = 1.0 - _3666;
                                float _3709 = (0.5 / (((_3698 * ((_3681 * _3699) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3698 * _3699) + _3666) * _3681))) * _3698;
                                float _4834 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3719 = (_3644 * _3621) * (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3689 * _3689) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3645 * _3491.y;
                                frontier_phi_83_pred_1 = _3645 * _3491.x;
                                frontier_phi_83_pred_2 = _3719 * _3503.z;
                                frontier_phi_83_pred_3 = _3719 * _3503.y;
                                frontier_phi_83_pred_4 = _3719 * _3503.x;
                                frontier_phi_83_pred_5 = _3645 * _3491.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3727 = frontier_phi_83_pred;
                            _3726 = frontier_phi_83_pred_1;
                            _3725 = frontier_phi_83_pred_2;
                            _3724 = frontier_phi_83_pred_3;
                            _3723 = frontier_phi_83_pred_4;
                            _3728 = frontier_phi_83_pred_5;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            if (_3450 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3450;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3435;
                        frontier_phi_77_pred_1 = _3434;
                        frontier_phi_77_pred_2 = _3433;
                        frontier_phi_77_pred_3 = _3432;
                        frontier_phi_77_pred_4 = _3431;
                        frontier_phi_77_pred_5 = _3430;
                    }
                    _3072 = frontier_phi_77_pred;
                    _3070 = frontier_phi_77_pred_1;
                    _3068 = frontier_phi_77_pred_2;
                    _3066 = frontier_phi_77_pred_3;
                    _3064 = frontier_phi_77_pred_4;
                    _3062 = frontier_phi_77_pred_5;
                    uint _3228 = _3227 + 1u;
                    if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3221 = _3062;
                        _3222 = _3064;
                        _3223 = _3066;
                        _3224 = _3068;
                        _3225 = _3070;
                        _3226 = _3072;
                        _3227 = _3228;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3066;
                frontier_phi_58_59_ladder_1 = _3072;
                frontier_phi_58_59_ladder_2 = _3070;
                frontier_phi_58_59_ladder_3 = _3068;
                frontier_phi_58_59_ladder_4 = _3064;
                frontier_phi_58_59_ladder_5 = _3062;
            }
            else
            {
                frontier_phi_58_59_ladder = _2944;
                frontier_phi_58_59_ladder_1 = _2950;
                frontier_phi_58_59_ladder_2 = _2948;
                frontier_phi_58_59_ladder_3 = _2946;
                frontier_phi_58_59_ladder_4 = _2942;
                frontier_phi_58_59_ladder_5 = _2940;
            }
            _3061 = frontier_phi_58_59_ladder_5;
            _3063 = frontier_phi_58_59_ladder_4;
            _3065 = frontier_phi_58_59_ladder;
            _3067 = frontier_phi_58_59_ladder_3;
            _3069 = frontier_phi_58_59_ladder_2;
            _3071 = frontier_phi_58_59_ladder_1;
        }
        float _3076 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        _2852 = (_3076 * _3067) + _2288;
        _2854 = (_3076 * _3069) + _2290;
        _2856 = (_3076 * _3071) + _2292;
        _2858 = ((_3061 * _1078) * _3076) + _2633;
        _2860 = ((_3063 * _1080) * _3076) + _2635;
        _2862 = ((_3065 * _1081) * _3076) + _2637;
    }
    else
    {
        _2852 = _2288;
        _2854 = _2290;
        _2856 = _2292;
        _2858 = _2633;
        _2860 = _2635;
        _2862 = _2637;
    }
    float _4850 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4861 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4872 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2879 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2852 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1093))) + ((_2858 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1928)) * cbPerFrame._m0[3u].x);
    float _2880 = ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2854 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1093))) + ((_2860 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1928)) * cbPerFrame._m0[3u].x);
    float _2881 = ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2856 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1093))) + ((_2862 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1928)) * cbPerFrame._m0[3u].x);
    uint _2882 = _1053 + 6u;
    float _2890 = _1015 / cbSceneParam._m0[86u].x;
    float _2891 = _1016 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _938 : (isnan(_938) ? cbSceneParam._m0[77u].w : min(_938, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_938 > cbSceneParam._m0[78u].w)
    {
        float _2965 = isnan(_938) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _938 : min(cbSceneParam._m0[80u].w, _938));
        float _2966 = _2965 / _938;
        float _2977 = _2966 * _988;
        float _2978 = _989 * _2966;
        float _2979 = (-0.0) - _2978;
        float _2981 = _2966 * _990;
        float _2983 = (cbSceneParam._m0[77u].w * _2979) / _2965;
        float _2984 = _2983 + cbSceneParam._m0[79u].w;
        float _2985 = cbSceneParam._m0[79u].w - _2978;
        float _2991 = sqrt(((_2977 * _2977) + (_2978 * _2978)) + (_2981 * _2981));
        float _2994 = (1.0 - (cbSceneParam._m0[77u].w / _2965)) * _2991;
        float _2999 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3001 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3178;
        if (abs((_2979 - _2983) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3178 = ((((_2984 > 0.0) ? exp2(_2999 * _2984) : (2.0 - exp2(_3001 * _2984))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2994;
        }
        else
        {
            float _3122 = 1.0 / cbSceneParam._m0[80u].x;
            float _3123 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : max(_2984, _2985));
            float _3124 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : min(_2984, _2985));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            _3178 = ((abs(_2991 / _2979) * cbSceneParam._m0[80u].y) * ((((_3133 - _3134) * 2.0) - ((exp2(_2999 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0)))) - exp2(_2999 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))))) * _3122)) - ((exp2(_3001 * _3133) - exp2(_3001 * _3134)) * _3122))) + (_2994 * cbSceneParam._m0[80u].z);
        }
        vec4 _3180 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3189 = exp2((_3178 * (-1.44269502162933349609375)) * (1.0 - _3180.w));
        float _3190 = log2(_3189);
        float _3206 = log2(_2910);
        _3003 = (exp2(_3206 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].x)) * _3180.x) / cbSceneParam._m0[78u].x)) + _2907;
        _3005 = (exp2(_3206 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].y)) * _3180.y) / cbSceneParam._m0[78u].y)) + _2908;
        _3007 = (exp2(_3206 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].z)) * _3180.z) / cbSceneParam._m0[78u].z)) + _2909;
        _3009 = _3189 * _2910;
    }
    else
    {
        _3003 = _2907;
        _3005 = _2908;
        _3007 = _2909;
        _3009 = _2910;
    }
    bool _3216;
    vec4 _3019;
    vec4 _3041;
    float _3043;
    float _3047;
    float _3048;
    float _3049;
    float _3050;
    bool _3060;
    for (;;)
    {
        _3019 = cbMatDynParam._m0[0u];
        float _3021 = roundEven(_3019.y);
        bool _3022 = _3021 == 3.0;
        float _3023 = log2(_3009);
        float _3030 = exp2(_3023 * cbSceneParam._m0[78u].x) * _2879;
        float _3031 = exp2(_3023 * cbSceneParam._m0[78u].y) * _2880;
        float _3032 = exp2(_3023 * cbSceneParam._m0[78u].z) * _2881;
        float _3039 = _1004 + (-0.5);
        _3041 = cbMtdParam._m0[1u];
        _3043 = _3041.y * _3039;
        float _3046 = (_3021 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3047 = _3046 * (_3022 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3003)));
        _3048 = _3046 * (_3022 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3005)));
        _3049 = _3046 * (_3022 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3007)));
        _3050 = _3039 * 0.999000012874603271484375;
        _3060 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3060)
        {
            if ((cbInstanceData._m0[_1053 + 7u].x + _3050) < 0.5)
            {
                _3216 = true;
                break;
            }
        }
        uint _3157 = _1054 + uint(_3019.w);
        if ((cbInstanceData._m0[_3157].w < 1.0) && ((cbInstanceData._m0[_3157].w + _3050) < 0.5))
        {
            _3216 = true;
            break;
        }
        if ((_3043 + 1.0) < _3041.x)
        {
            _3216 = true;
            break;
        }
        _3216 = false;
        break;
    }
    float _3421;
    if (_3216)
    {
        discard_state = true;
        _3421 = 0.0;
    }
    else
    {
        _3421 = cbInstanceData._m0[_2882].w;
    }
    SV_Target.x = _3047;
    SV_Target.y = _3048;
    SV_Target.z = _3049;
    SV_Target.w = _3421;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
    discard_exit();
}


