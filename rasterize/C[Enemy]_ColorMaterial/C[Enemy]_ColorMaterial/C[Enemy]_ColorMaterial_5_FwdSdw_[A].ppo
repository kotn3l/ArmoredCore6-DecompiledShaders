#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1609;
float _4269;
float _4270;
float _4271;
float _4272;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _285 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _319 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _323 = _319.z;
    float _336 = exp2(log2((1.0 - _323) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    vec4 _354 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _366 = exp2(log2(_354.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _368 = isnan(1.0) ? _367 : (isnan(_367) ? 1.0 : min(_367, 1.0));
    float _377 = exp2(log2(cbMtdParam._m0[23u].y * _323) * cbMtdParam._m0[22u].y);
    float _378 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
    vec4 _391 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _394 = _391.y;
    float _397 = (_391.x + (-0.02500000037252902984619140625)) * 8.0;
    float _401 = roundEven(5.0 - _397);
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(4.0) ? _402 : (isnan(_402) ? 4.0 : min(_402, 4.0));
    float _416 = floor(_403);
    vec4 _419 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _416));
    float _212[6];
    float _213[6];
    float _214[6];
    _212[0u] = cbMtdParam._m0[17u].x;
    _213[0u] = cbMtdParam._m0[17u].y;
    _214[0u] = cbMtdParam._m0[17u].z;
    _212[1u] = cbMtdParam._m0[15u].x;
    _213[1u] = cbMtdParam._m0[15u].y;
    _214[1u] = cbMtdParam._m0[15u].z;
    _212[2u] = cbMtdParam._m0[14u].x;
    _213[2u] = cbMtdParam._m0[14u].y;
    _214[2u] = cbMtdParam._m0[14u].z;
    _212[3u] = cbMtdParam._m0[13u].x;
    _213[3u] = cbMtdParam._m0[13u].y;
    _214[3u] = cbMtdParam._m0[13u].z;
    _212[4u] = cbMtdParam._m0[12u].x;
    _213[4u] = cbMtdParam._m0[12u].y;
    _214[4u] = cbMtdParam._m0[12u].z;
    _212[5u] = cbMtdParam._m0[18u].x;
    _213[5u] = cbMtdParam._m0[18u].y;
    _214[5u] = cbMtdParam._m0[18u].z;
    float _483 = roundEven(_397);
    float _484 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    uint _486 = uint(int(isnan(5.0) ? _484 : (isnan(_484) ? 5.0 : min(_484, 5.0))));
    vec4 _516 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _527 = cbMtdParam._m0[9u].x * _516.x;
    float _528 = cbMtdParam._m0[9u].y * _516.y;
    float _529 = cbMtdParam._m0[9u].z * _516.z;
    float _536 = ((((((_212[_486] - cbMtdParam._m0[10u].x) * _394) + cbMtdParam._m0[10u].x) * _419.x) - _527) * _379) + _527;
    float _537 = ((((((_213[_486] - cbMtdParam._m0[10u].y) * _394) + cbMtdParam._m0[10u].y) * _419.y) - _528) * _379) + _528;
    float _538 = ((((((_214[_486] - cbMtdParam._m0[10u].z) * _394) + cbMtdParam._m0[10u].z) * _419.z) - _529) * _379) + _529;
    float _544 = exp2(log2(_319.w) * cbMtdParam._m0[23u].w);
    vec4 _557 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _576 = (((cbMtdParam._m0[16u].x * _557.x) - _536) * _544) + _536;
    float _577 = (((cbMtdParam._m0[16u].y * _557.y) - _537) * _544) + _537;
    float _578 = (((cbMtdParam._m0[16u].z * _557.z) - _538) * _544) + _538;
    vec4 _591 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _611 = (((cbMtdParam._m0[19u].x * _591.x) - _576) * _368) + _576;
    float _612 = (((cbMtdParam._m0[19u].y * _591.y) - _577) * _368) + _577;
    float _613 = (((cbMtdParam._m0[19u].z * _591.z) - _578) * _368) + _578;
    vec4 _625 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _650 = (_354.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _625.x) - _611) * _338) + _611);
    float _652 = (_354.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _625.y) - _612) * _338) + _612);
    float _654 = (_354.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _625.z) - _613) * _338) + _613);
    vec4 _666 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _684 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _686 = _684 * (cbMtdParam._m0[24u].z + 1.0);
    float _4331 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _694 = (_687 * ((cbMtdParam._m0[11u].x * _666.x) - _650)) + _650;
    float _695 = (((cbMtdParam._m0[11u].y * _666.y) - _652) * _687) + _652;
    float _696 = (((cbMtdParam._m0[11u].z * _666.z) - _654) * _687) + _654;
    float _700 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _708 = (_700 - (((_285.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _700))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4342 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _716 = ((cbMtdParam._m0[21u].x - _694) * _709) + _694;
    float _717 = ((cbMtdParam._m0[21u].y - _695) * _709) + _695;
    float _718 = ((cbMtdParam._m0[21u].z - _696) * _709) + _696;
    float _207[5];
    float _208[5];
    _207[0u] = cbMtdParam._m0[28u].w;
    _208[0u] = cbMtdParam._m0[29u].x;
    _207[1u] = cbMtdParam._m0[30u].w;
    _208[1u] = cbMtdParam._m0[31u].x;
    _207[2u] = cbMtdParam._m0[30u].y;
    _208[2u] = cbMtdParam._m0[30u].z;
    _207[3u] = cbMtdParam._m0[29u].w;
    _208[3u] = cbMtdParam._m0[30u].x;
    _207[4u] = cbMtdParam._m0[29u].y;
    _208[4u] = cbMtdParam._m0[29u].z;
    float _758 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    uint _760 = uint(int(isnan(4.0) ? _758 : (isnan(_758) ? 4.0 : min(_758, 4.0))));
    float _767 = ((_208[_760] - cbMtdParam._m0[22u].z) * _379) + cbMtdParam._m0[22u].z;
    float _770 = ((cbMtdParam._m0[22u].w - _767) * _544) + _767;
    float _773 = ((cbMtdParam._m0[25u].x - _770) * _368) + _770;
    float _776 = ((cbMtdParam._m0[26u].x - _773) * _338) + _773;
    float _781 = (cbMtdParam._m0[24u].y + 1.0) * _684;
    float _4363 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _782 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _784 = _776 - (_776 * _782);
    float _786 = _784 - (_784 * _700);
    vec4 _799 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _416));
    vec4 _816 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _818 = _816.x;
    float _819 = _816.y;
    float _824 = cbMtdParam._m0[22u].x + _816.z;
    float _827 = (((_799.z + _207[_760]) - _824) * _379) + _824;
    vec4 _839 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _850 = (((_839.z - _827) + cbMtdParam._m0[28u].y) * _544) + _827;
    float _856 = ((((_323 * 2.0) * _850) - _850) * cbMtdParam._m0[24u].w) + _850;
    vec4 _868 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _879 = (((cbMtdParam._m0[23u].z + _868.z) - _856) * _368) + _856;
    vec4 _892 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _903 = (((_892.z - _879) + cbMtdParam._m0[26u].y) * _338) + _879;
    vec4 _915 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _927 = ((_915.z - _903) * _782) + _903;
    vec4 _942 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _956 = ((cbMtdParam._m0[27u].y * _700) * ((_942.z * cbMtdParam._m0[27u].x) - _927)) + _927;
    float _971 = ((_799.x - _818) * _379) + _818;
    float _972 = ((_799.y - _819) * _379) + _819;
    float _977 = ((_839.x - _971) * _544) + _971;
    float _978 = ((_839.y - _972) * _544) + _972;
    float _983 = ((_868.x - _977) * _368) + _977;
    float _984 = ((_868.y - _978) * _368) + _978;
    float _993 = ((((_892.x - _983) * _338) + _983) * 2.0) + (-1.0);
    float _994 = ((((_892.y - _984) * _338) + _984) * 2.0) + (-1.0);
    float _995 = dot(vec2(_993, _994), vec2(_993, _994));
    float _4374 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1000 = sqrt(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))));
    float _1016 = (((cbMtdParam._m0[25u].y * ((_319.x * 2.0) + (-1.0))) + _993) + (((((_915.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].z) * _782)) + ((((_942.x * 2.0) + (-1.0)) * _700) * cbMtdParam._m0[26u].w);
    float _1017 = (((cbMtdParam._m0[25u].y * ((_319.y * 2.0) + (-1.0))) + _994) + (((((_915.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].z) * _782)) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_942.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1020 = fma(_1000, _249 * NORMAL.x, fma(_1017, _256 * TANGENT.x, (_242 * _234) * _1016));
    float _1023 = fma(_1000, _249 * NORMAL.y, fma(_1017, _256 * TANGENT.y, (_242 * _235) * _1016));
    float _1026 = fma(_1000, _249 * NORMAL.z, fma(_1017, _256 * TANGENT.z, (_242 * _236) * _1016));
    float _1030 = inversesqrt(dot(vec3(_1020, _1023, _1026), vec3(_1020, _1023, _1026)));
    float _1031 = _1030 * _1020;
    float _1032 = _1030 * _1023;
    float _1033 = _1030 * _1026;
    float _4385 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _1034 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4407 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4418 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4429 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _1038 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _1054 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1104 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1094);
    float _1105 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1094);
    float _1106 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1094);
    float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
    float _1111 = _1104 * _1110;
    float _1112 = _1105 * _1110;
    float _1113 = _1106 * _1110;
    vec4 _1118 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1120 = _1118.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1290 = sqrt(((_1104 * _1104) + (_1105 * _1105)) + (_1106 * _1106));
        float _1296 = (cbMatDynParam._m0[5u].x * _1290) + cbMatDynParam._m0[5u].y;
        float _4440 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1301 = (cbMatDynParam._m0[5u].z * _1290) + cbMatDynParam._m0[5u].w;
        float _4451 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) - _1297)) + _1297) < ((_1120 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1131 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1132 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1150 = fma(_1033, cbSceneParam._m0[5u].z, fma(_1032, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1031));
    float _1153 = fma(_1033, cbSceneParam._m0[6u].z, fma(_1032, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1031));
    float _1156 = fma(_1033, cbSceneParam._m0[7u].z, fma(_1032, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1031));
    uint _1169 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1170 = _1169 + 9u;
    uint _1171 = _1170 + uint(cbMatDynParam._m0[0u].w);
    float _1177 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * cbInstanceData._m0[_1171].x;
    float _1178 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * cbInstanceData._m0[_1171].y;
    float _1179 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * cbInstanceData._m0[_1171].z;
    float _4462 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _4473 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _4484 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _1183 = 1.0 - _1038;
    float _1184 = _1180 * _1183;
    float _1185 = _1181 * _1183;
    float _1186 = _1182 * _1183;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1038;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1038;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1038;
    float _1194 = _1191 + 0.039999999105930328369140625;
    float _1196 = _1192 + 0.039999999105930328369140625;
    float _1197 = _1193 + 0.039999999105930328369140625;
    vec4 _1206 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1131, cbSceneParam._m0[86u].y * _1132));
    float _1209 = _1206.x * TEXCOORD_3.w;
    float _1210 = dot(vec3(_1031, _1032, _1033), vec3(_1111, _1112, _1113));
    float _1213 = _1210 * 2.0;
    float _1217 = (_1213 * _1031) - _1111;
    float _1218 = (_1213 * _1032) - _1112;
    float _1219 = (_1213 * _1033) - _1113;
    float _1223 = abs(dot(vec3(_1111, _1112, _1113), vec3(_1031, _1032, _1033)));
    float _4495 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _1225 = sqrt(_1034);
    float _1236 = exp2((_1225 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1225 * 3.0));
    float _1242 = (1.0 - _1236) * ((_1225 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1243 = _1236 * _1225;
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1608;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1333 = fma(_1279, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1271));
        float _1337 = fma(_1279, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1271));
        float _1341 = fma(_1279, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1271));
        float _1366 = _1271 + _1031;
        float _1367 = _1275 + _1032;
        float _1368 = _1279 + _1033;
        float _1378 = fma(_1368, cbModelParam._m0[26u].z, fma(_1367, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1366)) - _1333;
        float _1379 = fma(_1368, cbModelParam._m0[27u].z, fma(_1367, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1366)) - _1337;
        float _1380 = fma(_1368, cbModelParam._m0[28u].z, fma(_1367, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1366)) - _1341;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1333 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1337 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[34u].z) + ((((((_1341 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1436 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1402.x + (-0.5));
        float _1438 = _1436 * (_1402.y + (-0.5));
        float _1439 = _1436 * (_1402.z + (-0.5));
        float _1446 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1409.x + (-0.5));
        float _1448 = _1446 * (_1409.y + (-0.5));
        float _1449 = _1446 * (_1409.z + (-0.5));
        float _1456 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1416.x + (-0.5));
        float _1458 = _1456 * (_1416.y + (-0.5));
        float _1459 = _1456 * (_1416.z + (-0.5));
        float _1466 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1423.x + (-0.5));
        float _1468 = _1466 * (_1423.y + (-0.5));
        float _1469 = _1466 * (_1423.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1490 = (dot(vec3(_1031, _1032, _1033), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4521 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1500 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4532 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4543 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_1502 + 1.0))) + _1507) * _1470;
        float _1517 = _1438 * 0.5;
        float _1518 = _1448 * 0.5;
        float _1519 = _1458 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_1031, _1032, _1033), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4554 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4565 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4576 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_1544 + 1.0))) + _1549) * _1471;
        float _1559 = _1439 * 0.5;
        float _1560 = _1449 * 0.5;
        float _1561 = _1459 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1031, _1032, _1033), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4587 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4598 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4609 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_1586 + 1.0))) + _1591) * _1472;
        _1608 = _1439;
        _1610 = _1438;
        _1611 = _1437;
        _1612 = _1449;
        _1613 = _1448;
        _1614 = _1447;
        _1615 = _1459;
        _1616 = _1458;
        _1617 = _1457;
        _1618 = _1472;
        _1619 = _1471;
        _1620 = _1470;
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1622 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1623 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1609;
        _1610 = _1609;
        _1611 = _1609;
        _1612 = _1609;
        _1613 = _1609;
        _1614 = _1609;
        _1615 = _1609;
        _1616 = _1609;
        _1617 = _1609;
        _1618 = _1609;
        _1619 = _1609;
        _1620 = _1609;
        _1621 = 0.0;
        _1622 = 0.0;
        _1623 = 0.0;
    }
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1649 = fma(_1279, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271));
        float _1653 = fma(_1279, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271));
        float _1657 = fma(_1279, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271));
        float _1680 = _1271 + _1031;
        float _1681 = _1275 + _1032;
        float _1682 = _1279 + _1033;
        float _1692 = fma(_1682, cbModelParam._m0[30u].z, fma(_1681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1680)) - _1649;
        float _1693 = fma(_1682, cbModelParam._m0[31u].z, fma(_1681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1680)) - _1653;
        float _1694 = fma(_1682, cbModelParam._m0[32u].z, fma(_1681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1680)) - _1657;
        float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
        float _1711 = ((_1698 * _1692) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1649 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1712 = ((_1698 * _1693) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1653 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1713 = ((_1698 * _1694) / cbModelParam._m0[35u].z) + ((((((_1657 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        float _1748 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1715.x + (-0.5));
        float _1750 = _1748 * (_1715.y + (-0.5));
        float _1751 = _1748 * (_1715.z + (-0.5));
        float _1758 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1722.x + (-0.5));
        float _1760 = _1758 * (_1722.y + (-0.5));
        float _1761 = _1758 * (_1722.z + (-0.5));
        float _1768 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1729.x + (-0.5));
        float _1770 = _1768 * (_1729.y + (-0.5));
        float _1771 = _1768 * (_1729.z + (-0.5));
        float _1778 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1736.x + (-0.5));
        float _1780 = _1778 * (_1736.y + (-0.5));
        float _1781 = _1778 * (_1736.z + (-0.5));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = _1749 * 0.5;
        float _1786 = _1759 * 0.5;
        float _1787 = _1769 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_1031, _1032, _1033), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4650 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4661 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4672 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_1812 + 1.0))) + _1817) * _1782;
        float _1827 = _1750 * 0.5;
        float _1828 = _1760 * 0.5;
        float _1829 = _1770 * 0.5;
        float _1830 = dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829));
        float _1835 = (_1830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1830);
        float _1843 = (dot(vec3(_1031, _1032, _1033), vec3(_1835 * _1827, _1835 * _1828, _1835 * _1829)) + 1.0) * 0.5;
        float _4683 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1852 = sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829)) / (_1783 + 9.9999997473787516355514526367188e-06);
        float _4694 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _4705 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_1854 + 1.0))) + _1859) * _1783;
        float _1869 = _1751 * 0.5;
        float _1870 = _1761 * 0.5;
        float _1871 = _1771 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1031, _1032, _1033), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _4716 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4727 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _4738 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_1896 + 1.0))) + _1901) * _1784;
        _1918 = _1751;
        _1919 = _1750;
        _1920 = _1749;
        _1921 = _1761;
        _1922 = _1760;
        _1923 = _1759;
        _1924 = _1771;
        _1925 = _1770;
        _1926 = _1769;
        _1927 = _1784;
        _1928 = _1783;
        _1929 = _1782;
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
        _1931 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
    }
    else
    {
        _1918 = _1609;
        _1919 = _1609;
        _1920 = _1609;
        _1921 = _1609;
        _1922 = _1609;
        _1923 = _1609;
        _1924 = _1609;
        _1925 = _1609;
        _1926 = _1609;
        _1927 = _1609;
        _1928 = _1609;
        _1929 = _1609;
        _1930 = 0.0;
        _1931 = 0.0;
        _1932 = 0.0;
    }
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1621)) + _1621;
    float _1943 = (cbModelParam._m0[1u].x * (_1931 - _1622)) + _1622;
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1623)) + _1623;
    float _1965 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1942));
    float _1986 = _1217 * 0.5;
    float _1987 = _1218 * 0.5;
    float _1988 = _1219 * 0.5;
    float _1989 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _1992 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1919, _1922, _1925, _1928));
    float _1995 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _2029;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2002 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1608, _1612, _1615, _1618));
        float _2006 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1610, _1613, _1616, _1619));
        float _2010 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1611, _1614, _1617, _1620));
        float _2017 = dot(vec4(cbModelParam._m0[39u]), vec4(_1986, _1987, _1988, 1.0));
        _2029 = dot(vec3(isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2017) ? 0.0 : (isnan(0.0) ? _2017 : max(0.0, _2017))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2029 = 1.0;
    }
    float _2040;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2031 = dot(vec4(cbModelParam._m0[40u]), vec4(_1986, _1987, _1988, 1.0));
        _2040 = dot(vec3(isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2031) ? 0.0 : (isnan(0.0) ? _2031 : max(0.0, _2031))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2040 = 1.0;
    }
    float _2044 = (_2040 * cbModelParam._m0[1u].x) + (_2029 * (1.0 - cbModelParam._m0[1u].x));
    float _2054 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1034);
    float _2055 = isnan(_2054) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2054 : min(cbModelParam._m0[25u].z, _2054));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2102 = fma(_1279, cbModelParam._m0[13u].z, fma(_1275, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1271)) + cbModelParam._m0[13u].w;
        float _2106 = fma(_1279, cbModelParam._m0[14u].z, fma(_1275, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1271)) + cbModelParam._m0[14u].w;
        float _2110 = fma(_1279, cbModelParam._m0[15u].z, fma(_1275, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1271)) + cbModelParam._m0[15u].w;
        float _2113 = fma(_1219, cbModelParam._m0[13u].z, fma(_1218, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1217));
        float _2116 = fma(_1219, cbModelParam._m0[14u].z, fma(_1218, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1217));
        float _2119 = fma(_1219, cbModelParam._m0[15u].z, fma(_1218, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1217));
        float _2147;
        if (_2113 > 0.0)
        {
            _2147 = abs((1.0 - _2102) / _2113);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2102 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2147 = frontier_phi_17_15_ladder;
        }
        float _2318;
        if (_2116 > 0.0)
        {
            _2318 = abs((1.0 - _2106) / _2116);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2106 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2318 = frontier_phi_26_22_ladder;
        }
        float _2613;
        if (_2119 > 0.0)
        {
            _2613 = abs((1.0 - _2110) / _2119);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2110 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2613 = frontier_phi_38_33_ladder;
        }
        float _2615 = isnan(_2318) ? _2147 : (isnan(_2147) ? _2318 : min(_2147, _2318));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _2113) + _2102;
        float _2621 = (_2616 * _2116) + _2106;
        float _2622 = (_2616 * _2119) + _2110;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2623;
        float _2627 = _2623 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 > _2627) || ((_2621 < _2625) || ((_2620 < _2625) || (_2620 > _2627))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2622, cbModelParam._m0[9u].z, fma(_2621, cbModelParam._m0[9u].y, _2620 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2622, cbModelParam._m0[10u].z, fma(_2621, cbModelParam._m0[10u].y, _2620 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2622, cbModelParam._m0[11u].z, fma(_2621, cbModelParam._m0[11u].y, _2620 * cbModelParam._m0[11u].x))), _2055);
            frontier_phi_16_38_ladder = _2767.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2767.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2767.x * cbModelParam._m0[1u].y;
        }
        _2135 = frontier_phi_16_38_ladder_2;
        _2137 = frontier_phi_16_38_ladder_1;
        _2139 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1217, _1218, _1219), _2055);
        _2135 = _2123.x * cbModelParam._m0[1u].y;
        _2137 = _2123.y * cbModelParam._m0[1u].y;
        _2139 = _2123.z * cbModelParam._m0[1u].y;
    }
    float _2143 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1034);
    float _2144 = isnan(_2143) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2143 : min(cbModelParam._m0[25u].w, _2143));
    float _2233;
    float _2235;
    float _2237;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2197 = fma(_1279, cbModelParam._m0[21u].z, fma(_1275, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1271)) + cbModelParam._m0[21u].w;
        float _2201 = fma(_1279, cbModelParam._m0[22u].z, fma(_1275, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1271)) + cbModelParam._m0[22u].w;
        float _2205 = fma(_1279, cbModelParam._m0[23u].z, fma(_1275, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1271)) + cbModelParam._m0[23u].w;
        float _2208 = fma(_1219, cbModelParam._m0[21u].z, fma(_1218, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1217));
        float _2211 = fma(_1219, cbModelParam._m0[22u].z, fma(_1218, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1217));
        float _2214 = fma(_1219, cbModelParam._m0[23u].z, fma(_1218, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1217));
        float _2323;
        if (_2208 > 0.0)
        {
            _2323 = abs((1.0 - _2197) / _2208);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2197 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2323 = frontier_phi_28_24_ladder;
        }
        float _2640;
        if (_2211 > 0.0)
        {
            _2640 = abs((1.0 - _2201) / _2211);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2201 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2640 = frontier_phi_40_35_ladder;
        }
        float _2978;
        if (_2214 > 0.0)
        {
            _2978 = abs((1.0 - _2205) / _2214);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2205 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2978 = frontier_phi_50_47_ladder;
        }
        float _2980 = isnan(_2640) ? _2323 : (isnan(_2323) ? _2640 : min(_2323, _2640));
        float _2981 = isnan(_2978) ? _2980 : (isnan(_2980) ? _2978 : min(_2980, _2978));
        float _2985 = (_2981 * _2208) + _2197;
        float _2986 = (_2981 * _2211) + _2201;
        float _2987 = (_2981 * _2214) + _2205;
        float _2988 = _2981 * 9.9999997473787516355514526367188e-05;
        float _2989 = (-1.0) - _2988;
        float _2991 = _2988 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2987 > _2991) || ((_2987 < _2989) || ((_2986 > _2991) || ((_2986 < _2989) || ((_2985 < _2989) || (_2985 > _2991))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2987, cbModelParam._m0[17u].z, fma(_2986, cbModelParam._m0[17u].y, _2985 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2987, cbModelParam._m0[18u].z, fma(_2986, cbModelParam._m0[18u].y, _2985 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2987, cbModelParam._m0[19u].z, fma(_2986, cbModelParam._m0[19u].y, _2985 * cbModelParam._m0[19u].x))), _2144);
            frontier_phi_25_50_ladder = _3109.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3109.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3109.x * cbModelParam._m0[1u].z;
        }
        _2233 = frontier_phi_25_50_ladder_2;
        _2235 = frontier_phi_25_50_ladder_1;
        _2237 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1217, _1218, _1219), _2144);
        _2233 = _2217.x * cbModelParam._m0[1u].z;
        _2235 = _2217.y * cbModelParam._m0[1u].z;
        _2237 = _2217.z * cbModelParam._m0[1u].z;
    }
    float _2250 = (((_1242 * _1194) + _1243) * _1209) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2252 = (((_1242 * _1196) + _1243) * _1209) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2254 = (((_1242 * _1197) + _1243) * _1209) * ((cbModelParam._m0[1u].w * (_2237 - _2139)) + _2139);
    float _2257 = fma(_2254, cbSceneParam._m0[89u].z, fma(_2252, cbSceneParam._m0[89u].y, _2250 * cbSceneParam._m0[89u].x));
    float _2260 = fma(_2254, cbSceneParam._m0[90u].z, fma(_2252, cbSceneParam._m0[90u].y, _2250 * cbSceneParam._m0[90u].x));
    float _2263 = fma(_2254, cbSceneParam._m0[91u].z, fma(_2252, cbSceneParam._m0[91u].y, _2250 * cbSceneParam._m0[91u].x));
    float _2297 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2309 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2310 = _2297 / _2309;
    float _2311 = _2301 / _2309;
    float _2312 = _2305 / _2309;
    float _2459;
    float _2460;
    float _2461;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2339 = ((uint(_2312 > cbSceneParam._m0[59u].y) + uint(_2312 > cbSceneParam._m0[59u].x)) + uint(_2312 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2340 = _2339 + 43u;
        uint _2348 = _2339 + 44u;
        uint _2356 = _2339 + 45u;
        uint _2364 = _2339 + 46u;
        float _2375 = fma(_2309, cbSceneParam._m0[_2340].w, fma(_2305, cbSceneParam._m0[_2340].z, fma(_2301, cbSceneParam._m0[_2340].y, _2297 * cbSceneParam._m0[_2340].x)));
        float _2379 = fma(_2309, cbSceneParam._m0[_2348].w, fma(_2305, cbSceneParam._m0[_2348].z, fma(_2301, cbSceneParam._m0[_2348].y, _2297 * cbSceneParam._m0[_2348].x)));
        float _2387 = fma(_2309, cbSceneParam._m0[_2364].w, fma(_2305, cbSceneParam._m0[_2364].z, fma(_2301, cbSceneParam._m0[_2364].y, _2297 * cbSceneParam._m0[_2364].x)));
        float _2392 = cbSceneParam._m0[33u].z * _2387;
        float _2394 = cbSceneParam._m0[33u].w * _2387;
        float _2397 = fma(_2309, cbSceneParam._m0[_2356].w, fma(_2305, cbSceneParam._m0[_2356].z, fma(_2301, cbSceneParam._m0[_2356].y, _2297 * cbSceneParam._m0[_2356].x))) / _2387;
        float _2445 = (cbSceneParam._m0[33u].x - sqrt(((_2311 * _2311) + (_2310 * _2310)) + (_2312 * _2312))) * cbSceneParam._m0[33u].y;
        float _4864 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2452 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2392 + _2375) / _2387, (_2394 + _2379) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2394 + _2375) / _2387, (_2379 - _2392) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2375 - _2392) / _2387, (_2379 - _2394) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2375 - _2394) / _2387, (_2392 + _2379) / _2387), _2397), 0.0)).x), vec4(0.25)));
        _2459 = 1.0 - (_2452 * cbSceneParam._m0[34u].x);
        _2460 = 1.0 - (_2452 * cbSceneParam._m0[34u].y);
        _2461 = 1.0 - (_2452 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2459 = 1.0;
        _2460 = 1.0;
        _2461 = 1.0;
    }
    float _2525;
    float _2527;
    float _2529;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2513 = fma(_2309, cbSceneParam._m0[63u].w, fma(_2305, cbSceneParam._m0[63u].z, fma(_2301, cbSceneParam._m0[63u].y, _2297 * cbSceneParam._m0[63u].x)));
        float _2514 = fma(_2309, cbSceneParam._m0[60u].w, fma(_2305, cbSceneParam._m0[60u].z, fma(_2301, cbSceneParam._m0[60u].y, _2297 * cbSceneParam._m0[60u].x))) / _2513;
        float _2515 = fma(_2309, cbSceneParam._m0[61u].w, fma(_2305, cbSceneParam._m0[61u].z, fma(_2301, cbSceneParam._m0[61u].y, _2297 * cbSceneParam._m0[61u].x))) / _2513;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2514 >= cbSceneParam._m0[64u].x) && (_2515 >= cbSceneParam._m0[64u].y)) && (_2514 <= cbSceneParam._m0[64u].z)) && (_2515 <= cbSceneParam._m0[64u].w))
        {
            float _2653 = fma(_2309, cbSceneParam._m0[62u].w, fma(_2305, cbSceneParam._m0[62u].z, fma(_2301, cbSceneParam._m0[62u].y, _2297 * cbSceneParam._m0[62u].x))) / _2513;
            float _2657 = isnan(cbSceneParam._m0[41u].w) ? _2653 : (isnan(_2653) ? cbSceneParam._m0[41u].w : max(_2653, cbSceneParam._m0[41u].w));
            float _2700 = (cbSceneParam._m0[33u].x - sqrt(((_2311 * _2311) + (_2310 * _2310)) + (_2312 * _2312))) * cbSceneParam._m0[33u].y;
            float _4880 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
            float _2707 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2514, cbSceneParam._m0[33u].w + _2515), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2514, _2515 - cbSceneParam._m0[33u].z), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2514 - cbSceneParam._m0[33u].z, _2515 - cbSceneParam._m0[33u].w), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2514 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2515), _2657), 0.0)).x), vec4(0.25)));
            float _2711 = 1.0 - (_2707 * cbSceneParam._m0[34u].x);
            float _2712 = 1.0 - (_2707 * cbSceneParam._m0[34u].y);
            float _2713 = 1.0 - (_2707 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2713) ? _2461 : (isnan(_2461) ? _2713 : min(_2461, _2713));
            frontier_phi_37_36_ladder_1 = isnan(_2712) ? _2460 : (isnan(_2460) ? _2712 : min(_2460, _2712));
            frontier_phi_37_36_ladder_2 = isnan(_2711) ? _2459 : (isnan(_2459) ? _2711 : min(_2459, _2711));
        }
        else
        {
            frontier_phi_37_36_ladder = _2461;
            frontier_phi_37_36_ladder_1 = _2460;
            frontier_phi_37_36_ladder_2 = _2459;
        }
        _2525 = frontier_phi_37_36_ladder_2;
        _2527 = frontier_phi_37_36_ladder_1;
        _2529 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2525 = _2459;
        _2527 = _2460;
        _2529 = _2461;
    }
    uvec4 _2534 = floatBitsToUint(cbInstanceData._m0[_1169 + 5u]);
    uint _2536 = _2534.x * 14u;
    uint _2537 = _2536 + 13u;
    float _2544 = _1209 + (-1.0);
    float _2549 = (cbLight._m0[_2537].x * _2544) + 1.0;
    float _2550 = (cbLight._m0[_2537].y * _2544) + 1.0;
    float _2551 = (cbLight._m0[_2537].z * _2544) + 1.0;
    float _2552 = (cbLight._m0[_2537].w * _2544) + 1.0;
    uint _2553 = _2536 + 5u;
    float _2559 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
    uint _2563 = _2536 + 4u;
    float _2572 = isnan(1.0) ? _2549 : (isnan(_2549) ? 1.0 : min(_2549, 1.0));
    uint _2576 = _2536 | 1u;
    float _2587 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_1031, _1032, _1033));
    float _2590 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_1031, _1032, _1033));
    float _4916 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _4927 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2595 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * 0.3183098733425140380859375;
    float _2597 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * 0.3183098733425140380859375;
    float _2604 = ((cbLight._m0[_2553].x * _2559) * _2597) + (((cbLight._m0[_2563].x * _2525) * _2572) * _2595);
    float _2605 = ((_2559 * cbLight._m0[_2553].y) * _2597) + (((cbLight._m0[_2563].y * _2527) * _2572) * _2595);
    float _2606 = ((_2559 * cbLight._m0[_2553].z) * _2597) + (((cbLight._m0[_2563].z * _2529) * _2572) * _2595);
    uvec4 _2610 = floatBitsToUint(cbLight._m0[_2536 + 12u]);
    bool _2612 = _2610.x == 0u;
    float _2714;
    float _2716;
    float _2718;
    if (_2612)
    {
        _2714 = _2604;
        _2716 = _2605;
        _2718 = _2606;
    }
    else
    {
        uint _2722 = _2536 + 6u;
        float _2738 = (dot(vec3(cbLight._m0[_2536 + 2u].xyz), vec3(_1031, _1032, _1033)) * 0.5) + 0.5;
        float _2739 = _2738 * _2738;
        float _4938 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2740 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2741 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _2714 = (((cbLight._m0[_2722].x * 0.3183098733425140380859375) * _2740) * _2741) + _2604;
        _2716 = (((cbLight._m0[_2722].y * 0.3183098733425140380859375) * _2740) * _2741) + _2605;
        _2718 = (((cbLight._m0[_2722].z * 0.3183098733425140380859375) * _2740) * _2741) + _2606;
    }
    bool _2721 = _2610.y == 0u;
    float _2776;
    float _2778;
    float _2780;
    if (_2721)
    {
        _2776 = _2714;
        _2778 = _2716;
        _2780 = _2718;
    }
    else
    {
        uint _2949 = _2536 + 7u;
        float _2965 = (dot(vec3(cbLight._m0[_2536 + 3u].xyz), vec3(_1031, _1032, _1033)) * 0.5) + 0.5;
        float _2966 = _2965 * _2965;
        float _4954 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2967 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2968 = isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0));
        _2776 = (((cbLight._m0[_2949].x * 0.3183098733425140380859375) * _2967) * _2968) + _2714;
        _2778 = (((cbLight._m0[_2949].y * 0.3183098733425140380859375) * _2967) * _2968) + _2716;
        _2780 = (((cbLight._m0[_2949].z * 0.3183098733425140380859375) * _2967) * _2968) + _2718;
    }
    uint _2783 = _2536 + 8u;
    float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _1034) * 0.949999988079071044921875);
    float _2797 = _2796 * _2796;
    float _2798 = cbLight._m0[_2536].x + _1111;
    float _2799 = cbLight._m0[_2536].y + _1112;
    float _2800 = cbLight._m0[_2536].z + _1113;
    float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
    float _2805 = _2804 * _2798;
    float _2806 = _2804 * _2799;
    float _2807 = _2804 * _2800;
    float _2808 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_2536].xyz));
    float _4970 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2811 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
    float _4981 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _2812 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
    float _2813 = dot(vec3(_1031, _1032, _1033), vec3(_2805, _2806, _2807));
    float _4992 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
    float _2817 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2805, _2806, _2807));
    float _5003 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2821 = _2797 * _2797;
    float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
    float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) * 5.0);
    float _2834 = 0.959999978542327880859375 - _1191;
    float _2836 = 0.959999978542327880859375 - _1192;
    float _2837 = 0.959999978542327880859375 - _1193;
    float _2844 = 1.0 - _2797;
    float _2855 = (0.5 / (((_2812 * ((_2811 * _2844) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2844) + _2797) * _2811))) * _2811;
    float _5014 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2857 = (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
    uint _2871 = _2536 + 9u;
    float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _1034) * 0.949999988079071044921875);
    float _2883 = _2882 * _2882;
    float _2884 = cbLight._m0[_2576].x + _1111;
    float _2885 = cbLight._m0[_2576].y + _1112;
    float _2886 = cbLight._m0[_2576].z + _1113;
    float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
    float _2891 = _2890 * _2884;
    float _2892 = _2890 * _2885;
    float _2893 = _2890 * _2886;
    float _2894 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_2576].xyz));
    float _5025 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2897 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
    float _2898 = dot(vec3(_1031, _1032, _1033), vec3(_2891, _2892, _2893));
    float _5036 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2901 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
    float _2902 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2891, _2892, _2893));
    float _5047 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2906 = _2883 * _2883;
    float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
    float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0)))) * 5.0);
    float _2924 = 1.0 - _2883;
    float _2934 = (0.5 / (((_2812 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2924) + _2883) * _2897))) * _2897;
    float _5058 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
    float _2936 = (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
    float _2946 = (((((_2917 * _2834) + _1194) * cbLight._m0[_2871].x) * _2936) * _2559) + ((((cbLight._m0[_2783].x * _2525) * ((_2833 * _2834) + _1194)) * _2857) * _2572);
    float _2947 = (((((_2917 * _2836) + _1196) * cbLight._m0[_2871].y) * _2936) * _2559) + ((((cbLight._m0[_2783].y * _2527) * ((_2833 * _2836) + _1196)) * _2857) * _2572);
    float _2948 = (((((_2917 * _2837) + _1197) * cbLight._m0[_2871].z) * _2936) * _2559) + ((((cbLight._m0[_2783].z * _2529) * ((_2833 * _2837) + _1197)) * _2857) * _2572);
    float _3004;
    float _3006;
    float _3008;
    if (_2612)
    {
        _3004 = _2946;
        _3006 = _2947;
        _3008 = _2948;
    }
    else
    {
        uint _3010 = _2536 + 2u;
        uint _3014 = _2536 + 10u;
        float _3028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3010].w)) * _1034) * 0.949999988079071044921875);
        float _3029 = _3028 * _3028;
        float _3030 = cbLight._m0[_3010].x + _1111;
        float _3031 = cbLight._m0[_3010].y + _1112;
        float _3032 = cbLight._m0[_3010].z + _1113;
        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
        float _3037 = _3036 * _3030;
        float _3038 = _3036 * _3031;
        float _3039 = _3036 * _3032;
        float _3040 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_3010].xyz));
        float _5069 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
        float _3044 = dot(vec3(_1031, _1032, _1033), vec3(_3037, _3038, _3039));
        float _5080 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
        float _3048 = dot(vec3(cbLight._m0[_3010].xyz), vec3(_3037, _3038, _3039));
        float _5091 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3052 = _3029 * _3029;
        float _3056 = ((_3047 * _3047) * (_3052 + (-1.0))) + 1.0;
        float _3063 = exp2(log2(1.0 - (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0)))) * 5.0);
        float _3070 = 1.0 - _3029;
        float _3080 = (0.5 / (((_2812 * ((_3043 * _3070) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _3070) + _3029) * _3043))) * _3043;
        float _5102 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3082 = (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0))) * (_3052 / ((_3056 * _3056) * 3.141590118408203125));
        float _3083 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _3004 = (((((_3063 * _2834) + _1194) * cbLight._m0[_3014].x) * _3082) * _3083) + _2946;
        _3006 = (((((_3063 * _2836) + _1196) * cbLight._m0[_3014].y) * _3082) * _3083) + _2947;
        _3008 = (((((_3063 * _2837) + _1197) * cbLight._m0[_3014].z) * _3082) * _3083) + _2948;
    }
    float _3114;
    float _3116;
    float _3118;
    if (_2721)
    {
        _3114 = _3004;
        _3116 = _3006;
        _3118 = _3008;
    }
    else
    {
        uint _3125 = _2536 + 3u;
        uint _3129 = _2536 + 11u;
        float _3143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3125].w)) * _1034) * 0.949999988079071044921875);
        float _3144 = _3143 * _3143;
        float _3145 = cbLight._m0[_3125].x + _1111;
        float _3146 = cbLight._m0[_3125].y + _1112;
        float _3147 = cbLight._m0[_3125].z + _1113;
        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
        float _3152 = _3151 * _3145;
        float _3153 = _3151 * _3146;
        float _3154 = _3151 * _3147;
        float _3155 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_3125].xyz));
        float _5118 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        float _3158 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
        float _3159 = dot(vec3(_1031, _1032, _1033), vec3(_3152, _3153, _3154));
        float _5129 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
        float _3162 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
        float _3163 = dot(vec3(cbLight._m0[_3125].xyz), vec3(_3152, _3153, _3154));
        float _5140 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
        float _3167 = _3144 * _3144;
        float _3171 = ((_3162 * _3162) * (_3167 + (-1.0))) + 1.0;
        float _3178 = exp2(log2(1.0 - (isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0)))) * 5.0);
        float _3185 = 1.0 - _3144;
        float _3195 = (0.5 / (((_2812 * ((_3158 * _3185) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _3185) + _3144) * _3158))) * _3158;
        float _5151 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
        float _3197 = (isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0))) * (_3167 / ((_3171 * _3171) * 3.141590118408203125));
        float _3198 = isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0));
        _3114 = (((((_3178 * _2834) + _1194) * cbLight._m0[_3129].x) * _3197) * _3198) + _3004;
        _3116 = (((((_3178 * _2836) + _1196) * cbLight._m0[_3129].y) * _3197) * _3198) + _3006;
        _3118 = (((((_3178 * _2837) + _1197) * cbLight._m0[_3129].z) * _3197) * _3198) + _3008;
    }
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    float _3272;
    float _3274;
    if (_2534.y == 0u)
    {
        uvec4 _3219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3220 = _3219.x;
        uint _3231 = uint((float(_3219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1132) / _3220))) + floor(float(uint(cbSceneParam._m0[85u].x * _1131) / _3220)));
        float _3241 = (log2(_2312 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3242 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
        uint _3245 = uint(isnan(14.0) ? _3242 : (isnan(_3242) ? 14.0 : min(_3242, 14.0)));
        uvec4 _3250 = texelFetch(g_lightClusterGridBuffer, int(((_3245 << 2u) + (_3231 << 6u)) >> 2u));
        uint _3251 = _3250.x;
        uint _3252 = _3219.z;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        if (((((1u << ((_3252 >> 4u) & 15u)) + 4294967295u) & _3251) == 0u) || ((_3252 & 240u) == 0u))
        {
            _3331 = 0.0;
            _3333 = 0.0;
            _3335 = 0.0;
            _3337 = 0.0;
            _3339 = 0.0;
            _3341 = 0.0;
        }
        else
        {
            float _3332;
            float _3334;
            float _3336;
            float _3338;
            float _3340;
            float _3342;
            float _3484 = 0.0;
            float _3485 = 0.0;
            float _3486 = 0.0;
            float _3487 = 0.0;
            float _3488 = 0.0;
            float _3489 = 0.0;
            uint _3490 = 0u;
            uint _3499;
            bool _3500;
            for (;;)
            {
                _3499 = texelFetch(g_lightClassification, int((((_3245 << 5u) + (_3231 << 9u)) + (_3490 << 2u)) >> 2u)).x;
                _3500 = _3499 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3500)
                {
                    frontier_phi_71_pred = _3489;
                    frontier_phi_71_pred_1 = _3488;
                    frontier_phi_71_pred_2 = _3487;
                    frontier_phi_71_pred_3 = _3486;
                    frontier_phi_71_pred_4 = _3485;
                    frontier_phi_71_pred_5 = _3484;
                }
                else
                {
                    float _3629;
                    float _3630;
                    float _3631;
                    float _3632;
                    float _3633;
                    float _3634;
                    uint _3635;
                    _3629 = _3484;
                    _3630 = _3485;
                    _3631 = _3486;
                    _3632 = _3487;
                    _3633 = _3488;
                    _3634 = _3489;
                    _3635 = _3499;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    float _3561;
                    for (;;)
                    {
                        uint _3639 = uint(findLSB(_3635)) + (_3490 << 5u);
                        uint _3636 = (_3635 + 4294967295u) & _3635;
                        uint _3641 = _3639 * 48u;
                        vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3641)).x, texelFetch(g_PointLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3641 + 3u)).x));
                        uint _3661 = (_3639 * 48u) + 4u;
                        vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3661)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 3u)).x));
                        uint _3680 = (_3639 * 48u) + 8u;
                        vec3 _3691 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3680)).x, texelFetch(g_PointLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3680 + 2u)).x));
                        float _3695 = _3655.x - _2310;
                        float _3696 = _3655.y - _2311;
                        float _3697 = _3655.z - _2312;
                        float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                        float _3701 = inversesqrt(_3698);
                        float _3702 = _3701 * _3695;
                        float _3703 = _3701 * _3696;
                        float _3704 = _3701 * _3697;
                        float _3705 = dot(vec3(_1150, _1153, _1156), vec3(_3702, _3703, _3704));
                        float _3710 = 1.0 - (_3698 * _3655.w);
                        float _5177 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3711 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                        float _3712 = sqrt(_3698) * _3674.w;
                        float _3715 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                        float _3716 = _3715 * _3715;
                        float _3719 = ((1.0 - _3716) * _3705) + _3716;
                        float _3722 = _3712 * _3712;
                        float _3726 = ((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3711) / ((_3722 * 0.699999988079071044921875) + 1.0);
                        float _3730 = (-0.0) - _2310;
                        float _3731 = (-0.0) - _2311;
                        float _3732 = (-0.0) - _2312;
                        float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                        float _3737 = _3736 * _3730;
                        float _3738 = _3736 * _3731;
                        float _3739 = _3736 * _3732;
                        float _3746 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                        float _3747 = 1.0 - _1225;
                        float _3754 = sqrt(1.0 - ((1.0 - (_3747 * _3747)) * (1.0 - (_3746 * _3746))));
                        float _3755 = _3754 * _3754;
                        float _3756 = _3755 * _3755;
                        float _3757 = _3737 + _3702;
                        float _3758 = _3738 + _3703;
                        float _3759 = _3739 + _3704;
                        float _3763 = inversesqrt(dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759)));
                        float _3767 = dot(vec3(_1150, _1153, _1156), vec3(_3737, _3738, _3739));
                        float _5193 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                        float _3770 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                        float _3771 = dot(vec3(_1150, _1153, _1156), vec3(_3763 * _3757, _3763 * _3758, _3763 * _3759));
                        float _5204 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                        float _3774 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                        float _3778 = ((_3774 * _3774) * (_3756 + (-1.0))) + 1.0;
                        float _3779 = _3715 * _3755;
                        float _3780 = _3779 * _3779;
                        float _3783 = ((1.0 - _3780) * _3705) + _3780;
                        float _5215 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                        float _3784 = isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0));
                        float _3785 = 1.0 - _3755;
                        float _3795 = (0.5 / (((_3784 * ((_3770 * _3785) + _3755)) + 9.9999999392252902907785028219223e-09) + (((_3784 * _3785) + _3755) * _3770))) * _3784;
                        float _5226 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                        float _3806 = (((_3756 * 3.1415927410125732421875) * (isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0)))) / ((_3778 * _3778) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125))) * _3711;
                        _3559 = (_3726 * _3674.x) + _3632;
                        _3560 = (_3726 * _3674.y) + _3633;
                        _3561 = (_3726 * _3674.z) + _3634;
                        _3556 = (_3806 * _3691.x) + _3629;
                        _3557 = (_3806 * _3691.y) + _3630;
                        _3558 = (_3806 * _3691.z) + _3631;
                        if (_3636 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3629 = _3556;
                            _3630 = _3557;
                            _3631 = _3558;
                            _3632 = _3559;
                            _3633 = _3560;
                            _3634 = _3561;
                            _3635 = _3636;
                        }
                    }
                    frontier_phi_71_pred = _3561;
                    frontier_phi_71_pred_1 = _3560;
                    frontier_phi_71_pred_2 = _3559;
                    frontier_phi_71_pred_3 = _3558;
                    frontier_phi_71_pred_4 = _3557;
                    frontier_phi_71_pred_5 = _3556;
                }
                _3342 = frontier_phi_71_pred;
                _3340 = frontier_phi_71_pred_1;
                _3338 = frontier_phi_71_pred_2;
                _3336 = frontier_phi_71_pred_3;
                _3334 = frontier_phi_71_pred_4;
                _3332 = frontier_phi_71_pred_5;
                uint _3491 = _3490 + 1u;
                if (_3491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3484 = _3332;
                    _3485 = _3334;
                    _3486 = _3336;
                    _3487 = _3338;
                    _3488 = _3340;
                    _3489 = _3342;
                    _3490 = _3491;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3331 = _3332;
            _3333 = _3334;
            _3335 = _3336;
            _3337 = _3338;
            _3339 = _3340;
            _3341 = _3342;
        }
        uvec4 _3345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3346 = _3345.z;
        uint _3348 = (_3346 >> 8u) & 15u;
        float _3452;
        float _3454;
        float _3456;
        float _3458;
        float _3460;
        float _3462;
        if (((4294967295u << _3348) & _3251) == 0u)
        {
            _3452 = _3331;
            _3454 = _3333;
            _3456 = _3335;
            _3458 = _3337;
            _3460 = _3339;
            _3462 = _3341;
        }
        else
        {
            float _3477 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
            float _3478 = _3477 * _2310;
            float _3479 = _3477 * _2311;
            float _3480 = _3477 * _2312;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3348 < ((_3346 >> 12u) & 15u))
            {
                float _3453;
                float _3455;
                float _3457;
                float _3459;
                float _3461;
                float _3463;
                float _3612 = _3331;
                float _3613 = _3333;
                float _3614 = _3335;
                float _3615 = _3337;
                float _3616 = _3339;
                float _3617 = _3341;
                uint _3618 = _3348;
                uint _3627;
                bool _3628;
                for (;;)
                {
                    _3627 = texelFetch(g_lightClassification, int((((_3245 << 5u) + (_3231 << 9u)) + (_3618 << 2u)) >> 2u)).x;
                    _3628 = _3627 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3628)
                    {
                        frontier_phi_82_pred = _3617;
                        frontier_phi_82_pred_1 = _3616;
                        frontier_phi_82_pred_2 = _3615;
                        frontier_phi_82_pred_3 = _3614;
                        frontier_phi_82_pred_4 = _3613;
                        frontier_phi_82_pred_5 = _3612;
                    }
                    else
                    {
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _4113;
                        float _4114;
                        float _4115;
                        float _4116;
                        float _4117;
                        float _4118;
                        float _3833 = _3612;
                        float _3834 = _3613;
                        float _3835 = _3614;
                        float _3836 = _3615;
                        float _3837 = _3616;
                        float _3838 = _3617;
                        uint _3839 = _3627;
                        uint _3840;
                        vec4 _3865;
                        float _3866;
                        vec4 _3881;
                        vec3 _3893;
                        vec4 _3908;
                        vec4 _3923;
                        float _3969;
                        bool _3970;
                        for (;;)
                        {
                            uint _3850 = ((_3618 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3839));
                            _3840 = (_3839 + 4294967295u) & _3839;
                            uint _3852 = _3850 * 40u;
                            _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            _3866 = _3865.w;
                            uint _3868 = (_3850 * 40u) + 4u;
                            _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            uint _3883 = (_3850 * 40u) + 8u;
                            _3893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 2u)).x));
                            uint _3895 = (_3850 * 40u) + 16u;
                            _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            uint _3910 = (_3850 * 40u) + 20u;
                            _3923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 3u)).x));
                            uint _3925 = (_3850 * 40u) + 24u;
                            vec4 _3938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 3u)).x));
                            uint _3944 = (_3850 * 40u) + 28u;
                            vec4 _3957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 3u)).x));
                            _3969 = fma(_2312, _3957.z, fma(_2311, _3957.y, _3957.x * _2310)) + _3957.w;
                            _3970 = !((fma(_2312, _3938.z, fma(_2311, _3938.y, _3938.x * _2310)) + _3938.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3970)
                            {
                                float _3997 = _3865.x - _2310;
                                float _3998 = _3865.y - _2311;
                                float _3999 = _3865.z - _2312;
                                float _4000 = dot(vec3(_3997, _3998, _3999), vec3(_3997, _3998, _3999));
                                float _4003 = inversesqrt(_4000);
                                float _4004 = _4003 * _3997;
                                float _4005 = _4003 * _3998;
                                float _4006 = _4003 * _3999;
                                float _4010 = 1.0 - (_4000 / (_3866 * _3866));
                                float _5237 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4011 = isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0));
                                float _4015 = sqrt(_4000) * _3881.w;
                                float _4017 = 1.39999997615814208984375 / (_4015 + 1.39999997615814208984375);
                                float _4018 = _4017 * _4017;
                                float _4021 = ((1.0 - _4018) * dot(vec3(_4004, _4005, _4006), vec3(_1150, _1153, _1156))) + _4018;
                                float _4024 = _4015 * _4015;
                                float _4028 = (fma(_2312, _3908.z, fma(_2311, _3908.y, _3908.x * _2310)) + _3908.w) / _3969;
                                float _4029 = (fma(_2312, _3923.z, fma(_2311, _3923.y, _3923.x * _2310)) + _3923.w) / _3969;
                                float _4033 = 1.0 - dot(vec2(_4028, _4029), vec2(_4028, _4029));
                                float _5253 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                                float _4034 = isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0));
                                float _4035 = _4034 * (((isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0))) * _4011) / ((_4024 * 0.699999988079071044921875) + 1.0));
                                float _4047 = exp2(log2(1.0 / ((_4024 * 3.5) + 5.0)) * 0.25);
                                float _4048 = 1.0 - _1225;
                                float _4055 = sqrt(1.0 - ((1.0 - (_4048 * _4048)) * (1.0 - (_4047 * _4047))));
                                float _4056 = _4055 * _4055;
                                float _4057 = _4056 * _4056;
                                float _4058 = _4004 - _3478;
                                float _4059 = _4005 - _3479;
                                float _4060 = _4006 - _3480;
                                float _4064 = inversesqrt(dot(vec3(_4058, _4059, _4060), vec3(_4058, _4059, _4060)));
                                float _4068 = dot(vec3(_1150, _1153, _1156), vec3((-0.0) - _3478, (-0.0) - _3479, (-0.0) - _3480));
                                float _5264 = isnan(0.0) ? _4068 : (isnan(_4068) ? 0.0 : max(_4068, 0.0));
                                float _4071 = isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0));
                                float _4072 = dot(vec3(_1150, _1153, _1156), vec3(_4064 * _4058, _4064 * _4059, _4064 * _4060));
                                float _5275 = isnan(0.0) ? _4072 : (isnan(_4072) ? 0.0 : max(_4072, 0.0));
                                float _4075 = isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0));
                                float _4079 = ((_4075 * _4075) * (_4057 + (-1.0))) + 1.0;
                                float _4080 = _4017 * _4056;
                                float _4081 = _4080 * _4080;
                                float _4087 = ((1.0 - _4081) * dot(vec3(_1150, _1153, _1156), vec3(_4004, _4005, _4006))) + _4081;
                                float _5286 = isnan(0.0) ? _4087 : (isnan(_4087) ? 0.0 : max(_4087, 0.0));
                                float _4088 = isnan(1.0) ? _5286 : (isnan(_5286) ? 1.0 : min(_5286, 1.0));
                                float _4089 = 1.0 - _4056;
                                float _4099 = (0.5 / (((_4088 * ((_4071 * _4089) + _4056)) + 9.9999999392252902907785028219223e-09) + (((_4088 * _4089) + _4056) * _4071))) * _4088;
                                float _5297 = isnan(0.0) ? _4099 : (isnan(_4099) ? 0.0 : max(_4099, 0.0));
                                float _4109 = (_4034 * _4011) * (((_4057 * 3.1415927410125732421875) * (isnan(1.0) ? _5297 : (isnan(_5297) ? 1.0 : min(_5297, 1.0)))) / ((_4079 * _4079) * ((_4024 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4035 * _3881.z;
                                frontier_phi_88_pred_1 = _4035 * _3881.y;
                                frontier_phi_88_pred_2 = _4035 * _3881.x;
                                frontier_phi_88_pred_3 = _4109 * _3893.z;
                                frontier_phi_88_pred_4 = _4109 * _3893.y;
                                frontier_phi_88_pred_5 = _4109 * _3893.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4118 = frontier_phi_88_pred;
                            _4117 = frontier_phi_88_pred_1;
                            _4116 = frontier_phi_88_pred_2;
                            _4115 = frontier_phi_88_pred_3;
                            _4114 = frontier_phi_88_pred_4;
                            _4113 = frontier_phi_88_pred_5;
                            _3823 = _4116 + _3836;
                            _3824 = _4117 + _3837;
                            _3825 = _4118 + _3838;
                            _3820 = _4113 + _3833;
                            _3821 = _4114 + _3834;
                            _3822 = _4115 + _3835;
                            if (_3840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3833 = _3820;
                                _3834 = _3821;
                                _3835 = _3822;
                                _3836 = _3823;
                                _3837 = _3824;
                                _3838 = _3825;
                                _3839 = _3840;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3825;
                        frontier_phi_82_pred_1 = _3824;
                        frontier_phi_82_pred_2 = _3823;
                        frontier_phi_82_pred_3 = _3822;
                        frontier_phi_82_pred_4 = _3821;
                        frontier_phi_82_pred_5 = _3820;
                    }
                    _3463 = frontier_phi_82_pred;
                    _3461 = frontier_phi_82_pred_1;
                    _3459 = frontier_phi_82_pred_2;
                    _3457 = frontier_phi_82_pred_3;
                    _3455 = frontier_phi_82_pred_4;
                    _3453 = frontier_phi_82_pred_5;
                    uint _3619 = _3618 + 1u;
                    if (_3619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3612 = _3453;
                        _3613 = _3455;
                        _3614 = _3457;
                        _3615 = _3459;
                        _3616 = _3461;
                        _3617 = _3463;
                        _3618 = _3619;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3459;
                frontier_phi_63_64_ladder_1 = _3463;
                frontier_phi_63_64_ladder_2 = _3461;
                frontier_phi_63_64_ladder_3 = _3457;
                frontier_phi_63_64_ladder_4 = _3455;
                frontier_phi_63_64_ladder_5 = _3453;
            }
            else
            {
                frontier_phi_63_64_ladder = _3337;
                frontier_phi_63_64_ladder_1 = _3341;
                frontier_phi_63_64_ladder_2 = _3339;
                frontier_phi_63_64_ladder_3 = _3335;
                frontier_phi_63_64_ladder_4 = _3333;
                frontier_phi_63_64_ladder_5 = _3331;
            }
            _3452 = frontier_phi_63_64_ladder_5;
            _3454 = frontier_phi_63_64_ladder_4;
            _3456 = frontier_phi_63_64_ladder_3;
            _3458 = frontier_phi_63_64_ladder;
            _3460 = frontier_phi_63_64_ladder_2;
            _3462 = frontier_phi_63_64_ladder_1;
        }
        float _3467 = isnan(1.0) ? _1209 : (isnan(_1209) ? 1.0 : min(_1209, 1.0));
        _3264 = (_3467 * _3458) + _2776;
        _3266 = (_3467 * _3460) + _2778;
        _3268 = (_3467 * _3462) + _2780;
        _3270 = ((_3452 * _1194) * _3467) + _3114;
        _3272 = ((_3454 * _1196) * _3467) + _3116;
        _3274 = ((_3456 * _1197) * _3467) + _3118;
    }
    else
    {
        _3264 = _2776;
        _3266 = _2778;
        _3268 = _2780;
        _3270 = _3114;
        _3272 = _3116;
        _3274 = _3118;
    }
    float _5313 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _5324 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _5335 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _3291 = ((isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0))) * (_3264 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1209))) + ((_3270 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2044)) * cbPerFrame._m0[3u].x);
    float _3292 = ((isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0))) * (_3266 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1209))) + ((_3272 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2044)) * cbPerFrame._m0[3u].x);
    float _3293 = ((isnan(1.0) ? _5335 : (isnan(_5335) ? 1.0 : min(_5335, 1.0))) * (_3268 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1209))) + ((_3274 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2044)) * cbPerFrame._m0[3u].x);
    uint _3294 = _1169 + 6u;
    float _3302 = _1131 / cbSceneParam._m0[86u].x;
    float _3303 = _1132 / cbSceneParam._m0[86u].y;
    vec4 _3317 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3302, _3303, (log2((isnan(cbSceneParam._m0[77u].w) ? _1054 : (isnan(_1054) ? cbSceneParam._m0[77u].w : min(_1054, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3319 = _3317.x;
    float _3320 = _3317.y;
    float _3321 = _3317.z;
    float _3322 = _3317.w;
    float _3394;
    float _3396;
    float _3398;
    float _3400;
    if (_1054 > cbSceneParam._m0[78u].w)
    {
        float _3356 = isnan(_1054) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1054 : min(cbSceneParam._m0[80u].w, _1054));
        float _3357 = _3356 / _1054;
        float _3368 = _3357 * _1104;
        float _3369 = _1105 * _3357;
        float _3370 = (-0.0) - _3369;
        float _3372 = _3357 * _1106;
        float _3374 = (cbSceneParam._m0[77u].w * _3370) / _3356;
        float _3375 = _3374 + cbSceneParam._m0[79u].w;
        float _3376 = cbSceneParam._m0[79u].w - _3369;
        float _3382 = sqrt(((_3368 * _3368) + (_3369 * _3369)) + (_3372 * _3372));
        float _3385 = (1.0 - (cbSceneParam._m0[77u].w / _3356)) * _3382;
        float _3390 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3392 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3569;
        if (abs((_3370 - _3374) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3569 = ((((_3375 > 0.0) ? exp2(_3390 * _3375) : (2.0 - exp2(_3392 * _3375))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3385;
        }
        else
        {
            float _3513 = 1.0 / cbSceneParam._m0[80u].x;
            float _3514 = isnan(_3376) ? _3375 : (isnan(_3375) ? _3376 : max(_3375, _3376));
            float _3515 = isnan(_3376) ? _3375 : (isnan(_3375) ? _3376 : min(_3375, _3376));
            float _3524 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : min(_3514, 0.0));
            float _3525 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : min(_3515, 0.0));
            _3569 = ((abs(_3382 / _3370) * cbSceneParam._m0[80u].y) * ((((_3524 - _3525) * 2.0) - ((exp2(_3390 * (isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0)))) - exp2(_3390 * (isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))))) * _3513)) - ((exp2(_3392 * _3524) - exp2(_3392 * _3525)) * _3513))) + (_3385 * cbSceneParam._m0[80u].z);
        }
        vec4 _3571 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3302, _3303, 1.0), 0.0);
        float _3580 = exp2((_3569 * (-1.44269502162933349609375)) * (1.0 - _3571.w));
        float _3581 = log2(_3580);
        float _3597 = log2(_3322);
        _3394 = (exp2(_3597 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3581 * cbSceneParam._m0[78u].x)) * _3571.x) / cbSceneParam._m0[78u].x)) + _3319;
        _3396 = (exp2(_3597 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3581 * cbSceneParam._m0[78u].y)) * _3571.y) / cbSceneParam._m0[78u].y)) + _3320;
        _3398 = (exp2(_3597 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3581 * cbSceneParam._m0[78u].z)) * _3571.z) / cbSceneParam._m0[78u].z)) + _3321;
        _3400 = _3580 * _3322;
    }
    else
    {
        _3394 = _3319;
        _3396 = _3320;
        _3398 = _3321;
        _3400 = _3322;
    }
    bool _3607;
    vec4 _3410;
    vec4 _3432;
    float _3434;
    float _3438;
    float _3439;
    float _3440;
    float _3441;
    bool _3451;
    for (;;)
    {
        _3410 = cbMatDynParam._m0[0u];
        float _3412 = roundEven(_3410.y);
        bool _3413 = _3412 == 3.0;
        float _3414 = log2(_3400);
        float _3421 = exp2(_3414 * cbSceneParam._m0[78u].x) * _3291;
        float _3422 = exp2(_3414 * cbSceneParam._m0[78u].y) * _3292;
        float _3423 = exp2(_3414 * cbSceneParam._m0[78u].z) * _3293;
        float _3430 = _1120 + (-0.5);
        _3432 = cbMtdParam._m0[1u];
        _3434 = _3432.y * _3430;
        float _3437 = (_3412 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3438 = _3437 * (_3413 ? _3421 : (_3421 + (cbSceneParam._m0[72u].w * _3394)));
        _3439 = _3437 * (_3413 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3396)));
        _3440 = _3437 * (_3413 ? _3423 : (_3423 + (cbSceneParam._m0[72u].w * _3398)));
        _3441 = _3430 * 0.999000012874603271484375;
        _3451 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3451)
        {
            if ((cbInstanceData._m0[_1169 + 7u].x + _3441) < 0.5)
            {
                _3607 = true;
                break;
            }
        }
        uint _3548 = _1170 + uint(_3410.w);
        if ((cbInstanceData._m0[_3548].w < 1.0) && ((cbInstanceData._m0[_3548].w + _3441) < 0.5))
        {
            _3607 = true;
            break;
        }
        if ((_3434 + 1.0) < _3432.x)
        {
            _3607 = true;
            break;
        }
        _3607 = false;
        break;
    }
    float _3811;
    if (_3607)
    {
        discard_state = true;
        _3811 = 0.0;
    }
    else
    {
        _3811 = cbInstanceData._m0[_3294].w;
    }
    SV_Target.x = _3438;
    SV_Target.y = _3439;
    SV_Target.z = _3440;
    SV_Target.w = _3811;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3294].w;
    discard_exit();
}


