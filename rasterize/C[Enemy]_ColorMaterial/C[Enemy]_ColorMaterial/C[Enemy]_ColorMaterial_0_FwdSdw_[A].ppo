#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1423;
float _4084;
float _4085;
float _4086;
float _4087;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _301 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _316 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _324 = log2(0.0);
    float _326 = exp2(_324 * cbMtdParam._m0[23u].x);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    float _337 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _339 = isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0));
    float _360 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _362 = isnan(4.0) ? _361 : (isnan(_361) ? 4.0 : min(_361, 4.0));
    float _375 = floor(_362);
    vec4 _378 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _375));
    vec4 _402 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _413 = cbMtdParam._m0[9u].x * _402.x;
    float _414 = cbMtdParam._m0[9u].y * _402.y;
    float _415 = cbMtdParam._m0[9u].z * _402.z;
    float _422 = (((cbMtdParam._m0[10u].x * _378.x) - _413) * _339) + _413;
    float _423 = (((cbMtdParam._m0[10u].y * _378.y) - _414) * _339) + _414;
    float _424 = (((cbMtdParam._m0[10u].z * _378.z) - _415) * _339) + _415;
    float _430 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _443 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _462 = (((cbMtdParam._m0[16u].x * _443.x) - _422) * _430) + _422;
    float _463 = (((cbMtdParam._m0[16u].y * _443.y) - _423) * _430) + _423;
    float _464 = (((cbMtdParam._m0[16u].z * _443.z) - _424) * _430) + _424;
    vec4 _477 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _497 = (((cbMtdParam._m0[19u].x * _477.x) - _462) * _328) + _462;
    float _498 = (((cbMtdParam._m0[19u].y * _477.y) - _463) * _328) + _463;
    float _499 = (((cbMtdParam._m0[19u].z * _477.z) - _464) * _328) + _464;
    vec4 _512 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _537 = (_316.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _512.x) - _497) * _303) + _497);
    float _539 = (_316.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _512.y) - _498) * _303) + _498);
    float _541 = (_316.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _512.z) - _499) * _303) + _499);
    float _545 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _554 = (_545 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _545))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4136 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _562 = ((cbMtdParam._m0[21u].x - _537) * _555) + _537;
    float _563 = ((cbMtdParam._m0[21u].y - _539) * _555) + _539;
    float _564 = ((cbMtdParam._m0[21u].z - _541) * _555) + _541;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[28u].w;
    _198[0u] = cbMtdParam._m0[29u].x;
    _197[1u] = cbMtdParam._m0[30u].w;
    _198[1u] = cbMtdParam._m0[31u].x;
    _197[2u] = cbMtdParam._m0[30u].y;
    _198[2u] = cbMtdParam._m0[30u].z;
    _197[3u] = cbMtdParam._m0[29u].w;
    _198[3u] = cbMtdParam._m0[30u].x;
    _197[4u] = cbMtdParam._m0[29u].y;
    _198[4u] = cbMtdParam._m0[29u].z;
    float _606 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    uint _608 = uint(int(isnan(4.0) ? _606 : (isnan(_606) ? 4.0 : min(_606, 4.0))));
    float _615 = ((_198[_608] - cbMtdParam._m0[22u].z) * _339) + cbMtdParam._m0[22u].z;
    float _618 = ((cbMtdParam._m0[22u].w - _615) * _430) + _615;
    float _621 = ((cbMtdParam._m0[25u].x - _618) * _328) + _618;
    float _624 = ((cbMtdParam._m0[26u].x - _621) * _303) + _621;
    float _626 = _624 - (_624 * _545);
    vec4 _642 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _375));
    vec4 _660 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _668 = cbMtdParam._m0[22u].x + _660.z;
    float _671 = (((_642.z + _197[_608]) - _668) * _339) + _668;
    vec4 _684 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _695 = (((_684.z - _671) + cbMtdParam._m0[28u].y) * _430) + _671;
    float _701 = ((((_288 * 2.0) * _695) - _695) * cbMtdParam._m0[24u].w) + _695;
    vec4 _714 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _725 = (((cbMtdParam._m0[23u].z + _714.z) - _701) * _328) + _701;
    vec4 _738 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _749 = (((_738.z - _725) + cbMtdParam._m0[26u].y) * _303) + _725;
    vec4 _764 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _779 = ((cbMtdParam._m0[27u].y * _545) * ((_764.z * cbMtdParam._m0[27u].x) - _749)) + _749;
    float _791 = ((_642.x - _662) * _339) + _662;
    float _792 = ((_642.y - _663) * _339) + _663;
    float _797 = ((_684.x - _791) * _430) + _791;
    float _798 = ((_684.y - _792) * _430) + _792;
    float _803 = ((_714.x - _797) * _328) + _797;
    float _804 = ((_714.y - _798) * _328) + _798;
    float _813 = ((((_738.x - _803) * _303) + _803) * 2.0) + (-1.0);
    float _814 = ((((_738.y - _804) * _303) + _804) * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _4157 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _820 = sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))));
    float _830 = ((cbMtdParam._m0[25u].y * ((_284.x * 2.0) + (-1.0))) + _813) + ((((_764.x * 2.0) + (-1.0)) * _545) * cbMtdParam._m0[26u].w);
    float _831 = ((cbMtdParam._m0[25u].y * ((_284.y * 2.0) + (-1.0))) + _814) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_764.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _834 = fma(_820, _233 * NORMAL.x, fma(_831, _240 * TANGENT.x, (_226 * _218) * _830));
    float _837 = fma(_820, _233 * NORMAL.y, fma(_831, _240 * TANGENT.y, (_226 * _219) * _830));
    float _840 = fma(_820, _233 * NORMAL.z, fma(_831, _240 * TANGENT.z, (_226 * _220) * _830));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _4168 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _848 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4190 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4201 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4212 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _852 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _868 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _908);
    float _919 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    vec4 _932 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _934 = _932.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1104 = sqrt(((_918 * _918) + (_919 * _919)) + (_920 * _920));
        float _1110 = (cbMatDynParam._m0[5u].x * _1104) + cbMatDynParam._m0[5u].y;
        float _4223 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1115 = (cbMatDynParam._m0[5u].z * _1104) + cbMatDynParam._m0[5u].w;
        float _4234 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) - _1111)) + _1111) < ((_934 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _964 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _967 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _970 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _983 = uint(roundEven(NORMAL.w)) * 13u;
    uint _984 = _983 + 9u;
    uint _985 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_985].z;
    float _4245 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _997 = 1.0 - _852;
    float _998 = _994 * _997;
    float _999 = _995 * _997;
    float _1000 = _996 * _997;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _852;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _852;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _852;
    float _1008 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1023 = _1020.x * TEXCOORD_3.w;
    float _1024 = dot(vec3(_845, _846, _847), vec3(_925, _926, _927));
    float _1027 = _1024 * 2.0;
    float _1031 = (_1027 * _845) - _925;
    float _1032 = (_1027 * _846) - _926;
    float _1033 = (_1027 * _847) - _927;
    float _1037 = abs(dot(vec3(_925, _926, _927), vec3(_845, _846, _847)));
    float _4278 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1039 = sqrt(_848);
    float _1050 = exp2((_1039 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1039 * 3.0));
    float _1056 = (1.0 - _1050) * ((_1039 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1057 = _1050 * _1039;
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1422;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1147 = fma(_1093, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085));
        float _1151 = fma(_1093, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085));
        float _1155 = fma(_1093, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085));
        float _1180 = _1085 + _845;
        float _1181 = _1089 + _846;
        float _1182 = _1093 + _847;
        float _1192 = fma(_1182, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180)) - _1147;
        float _1193 = fma(_1182, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180)) - _1151;
        float _1194 = fma(_1182, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180)) - _1155;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1147 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1151 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[34u].z) + ((((((_1155 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1250 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1216.x + (-0.5));
        float _1252 = _1250 * (_1216.y + (-0.5));
        float _1253 = _1250 * (_1216.z + (-0.5));
        float _1260 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1223.x + (-0.5));
        float _1262 = _1260 * (_1223.y + (-0.5));
        float _1263 = _1260 * (_1223.z + (-0.5));
        float _1270 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1230.x + (-0.5));
        float _1272 = _1270 * (_1230.y + (-0.5));
        float _1273 = _1270 * (_1230.z + (-0.5));
        float _1280 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1237.x + (-0.5));
        float _1282 = _1280 * (_1237.y + (-0.5));
        float _1283 = _1280 * (_1237.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1304 = (dot(vec3(_845, _846, _847), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1314 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4326 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1316 + 1.0))) + _1321) * _1284;
        float _1331 = _1252 * 0.5;
        float _1332 = _1262 * 0.5;
        float _1333 = _1272 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_845, _846, _847), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4359 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1358 + 1.0))) + _1363) * _1285;
        float _1373 = _1253 * 0.5;
        float _1374 = _1263 * 0.5;
        float _1375 = _1273 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_845, _846, _847), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4392 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1400 + 1.0))) + _1405) * _1286;
        _1422 = _1253;
        _1424 = _1252;
        _1425 = _1251;
        _1426 = _1263;
        _1427 = _1262;
        _1428 = _1261;
        _1429 = _1273;
        _1430 = _1272;
        _1431 = _1271;
        _1432 = _1286;
        _1433 = _1285;
        _1434 = _1284;
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1423;
        _1424 = _1423;
        _1425 = _1423;
        _1426 = _1423;
        _1427 = _1423;
        _1428 = _1423;
        _1429 = _1423;
        _1430 = _1423;
        _1431 = _1423;
        _1432 = _1423;
        _1433 = _1423;
        _1434 = _1423;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1463 = fma(_1093, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085));
        float _1467 = fma(_1093, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085));
        float _1471 = fma(_1093, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085));
        float _1494 = _1085 + _845;
        float _1495 = _1089 + _846;
        float _1496 = _1093 + _847;
        float _1506 = fma(_1496, cbModelParam._m0[30u].z, fma(_1495, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1494)) - _1463;
        float _1507 = fma(_1496, cbModelParam._m0[31u].z, fma(_1495, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1494)) - _1467;
        float _1508 = fma(_1496, cbModelParam._m0[32u].z, fma(_1495, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1494)) - _1471;
        float _1512 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
        float _1525 = ((_1512 * _1506) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1463 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1512 * _1507) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1467 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1512 * _1508) / cbModelParam._m0[35u].z) + ((((((_1471 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1562 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1529.x + (-0.5));
        float _1564 = _1562 * (_1529.y + (-0.5));
        float _1565 = _1562 * (_1529.z + (-0.5));
        float _1572 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1536.x + (-0.5));
        float _1574 = _1572 * (_1536.y + (-0.5));
        float _1575 = _1572 * (_1536.z + (-0.5));
        float _1582 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1543.x + (-0.5));
        float _1584 = _1582 * (_1543.y + (-0.5));
        float _1585 = _1582 * (_1543.z + (-0.5));
        float _1592 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1550.x + (-0.5));
        float _1594 = _1592 * (_1550.y + (-0.5));
        float _1595 = _1592 * (_1550.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_845, _846, _847), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4455 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1626 + 1.0))) + _1631) * _1596;
        float _1641 = _1564 * 0.5;
        float _1642 = _1574 * 0.5;
        float _1643 = _1584 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_845, _846, _847), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4488 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1668 + 1.0))) + _1673) * _1597;
        float _1683 = _1565 * 0.5;
        float _1684 = _1575 * 0.5;
        float _1685 = _1585 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_845, _846, _847), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4521 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1710 + 1.0))) + _1715) * _1598;
        _1732 = _1565;
        _1733 = _1564;
        _1734 = _1563;
        _1735 = _1575;
        _1736 = _1574;
        _1737 = _1573;
        _1738 = _1585;
        _1739 = _1584;
        _1740 = _1583;
        _1741 = _1598;
        _1742 = _1597;
        _1743 = _1596;
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1423;
        _1733 = _1423;
        _1734 = _1423;
        _1735 = _1423;
        _1736 = _1423;
        _1737 = _1423;
        _1738 = _1423;
        _1739 = _1423;
        _1740 = _1423;
        _1741 = _1423;
        _1742 = _1423;
        _1743 = _1423;
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1435)) + _1435;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1436)) + _1436;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1437)) + _1437;
    float _1779 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1756));
    float _1800 = _1031 * 0.5;
    float _1801 = _1032 * 0.5;
    float _1802 = _1033 * 0.5;
    float _1803 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1806 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1809 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1843;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1816 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1422, _1426, _1429, _1432));
        float _1820 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1824 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1831 = dot(vec4(cbModelParam._m0[39u]), vec4(_1800, _1801, _1802, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1854;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1845 = dot(vec4(cbModelParam._m0[40u]), vec4(_1800, _1801, _1802, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1858 = (_1854 * cbModelParam._m0[1u].x) + (_1843 * (1.0 - cbModelParam._m0[1u].x));
    float _1868 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _848);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1868 : min(cbModelParam._m0[25u].z, _1868));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1916 = fma(_1093, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085)) + cbModelParam._m0[13u].w;
        float _1920 = fma(_1093, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085)) + cbModelParam._m0[14u].w;
        float _1924 = fma(_1093, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085)) + cbModelParam._m0[15u].w;
        float _1927 = fma(_1033, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031));
        float _1930 = fma(_1033, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031));
        float _1933 = fma(_1033, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031));
        float _1961;
        if (_1927 > 0.0)
        {
            _1961 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1961 = frontier_phi_17_15_ladder;
        }
        float _2133;
        if (_1930 > 0.0)
        {
            _2133 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2133 = frontier_phi_26_22_ladder;
        }
        float _2428;
        if (_1933 > 0.0)
        {
            _2428 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2428 = frontier_phi_38_33_ladder;
        }
        float _2430 = isnan(_2133) ? _1961 : (isnan(_1961) ? _2133 : min(_1961, _2133));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1927) + _1916;
        float _2436 = (_2431 * _1930) + _1920;
        float _2437 = (_2431 * _1933) + _1924;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2438;
        float _2442 = _2438 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 > _2442) || ((_2436 < _2440) || ((_2435 < _2440) || (_2435 > _2442))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2437, cbModelParam._m0[9u].z, fma(_2436, cbModelParam._m0[9u].y, _2435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2437, cbModelParam._m0[10u].z, fma(_2436, cbModelParam._m0[10u].y, _2435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2437, cbModelParam._m0[11u].z, fma(_2436, cbModelParam._m0[11u].y, _2435 * cbModelParam._m0[11u].x))), _1869);
            frontier_phi_16_38_ladder = _2582.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2582.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2582.x * cbModelParam._m0[1u].y;
        }
        _1949 = frontier_phi_16_38_ladder_2;
        _1951 = frontier_phi_16_38_ladder_1;
        _1953 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1031, _1032, _1033), _1869);
        _1949 = _1937.x * cbModelParam._m0[1u].y;
        _1951 = _1937.y * cbModelParam._m0[1u].y;
        _1953 = _1937.z * cbModelParam._m0[1u].y;
    }
    float _1957 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _848);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1957 : min(cbModelParam._m0[25u].w, _1957));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1093, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1093, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1093, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1033, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031));
        float _2026 = fma(_1033, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031));
        float _2029 = fma(_1033, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031));
        float _2138;
        if (_2023 > 0.0)
        {
            _2138 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2138 = frontier_phi_28_24_ladder;
        }
        float _2455;
        if (_2026 > 0.0)
        {
            _2455 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2455 = frontier_phi_40_35_ladder;
        }
        float _2793;
        if (_2029 > 0.0)
        {
            _2793 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2793 = frontier_phi_50_47_ladder;
        }
        float _2795 = isnan(_2455) ? _2138 : (isnan(_2138) ? _2455 : min(_2138, _2455));
        float _2796 = isnan(_2793) ? _2795 : (isnan(_2795) ? _2793 : min(_2795, _2793));
        float _2800 = (_2796 * _2023) + _2012;
        float _2801 = (_2796 * _2026) + _2016;
        float _2802 = (_2796 * _2029) + _2020;
        float _2803 = _2796 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2803;
        float _2806 = _2803 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2802 > _2806) || ((_2802 < _2804) || ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 < _2804) || (_2800 > _2806))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2802, cbModelParam._m0[17u].z, fma(_2801, cbModelParam._m0[17u].y, _2800 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2802, cbModelParam._m0[18u].z, fma(_2801, cbModelParam._m0[18u].y, _2800 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2802, cbModelParam._m0[19u].z, fma(_2801, cbModelParam._m0[19u].y, _2800 * cbModelParam._m0[19u].x))), _1958);
            frontier_phi_25_50_ladder = _2924.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2924.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2924.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_25_50_ladder_2;
        _2050 = frontier_phi_25_50_ladder_1;
        _2052 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1031, _1032, _1033), _1958);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1056 * _1008) + _1057) * _1023) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2067 = (((_1056 * _1010) + _1057) * _1023) * ((cbModelParam._m0[1u].w * (_2050 - _1951)) + _1951);
    float _2069 = (((_1056 * _1011) + _1057) * _1023) * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2125 = _2112 / _2124;
    float _2126 = _2116 / _2124;
    float _2127 = _2120 / _2124;
    float _2274;
    float _2275;
    float _2276;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2154 = ((uint(_2127 > cbSceneParam._m0[59u].y) + uint(_2127 > cbSceneParam._m0[59u].x)) + uint(_2127 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2155 = _2154 + 43u;
        uint _2163 = _2154 + 44u;
        uint _2171 = _2154 + 45u;
        uint _2179 = _2154 + 46u;
        float _2190 = fma(_2124, cbSceneParam._m0[_2155].w, fma(_2120, cbSceneParam._m0[_2155].z, fma(_2116, cbSceneParam._m0[_2155].y, _2112 * cbSceneParam._m0[_2155].x)));
        float _2194 = fma(_2124, cbSceneParam._m0[_2163].w, fma(_2120, cbSceneParam._m0[_2163].z, fma(_2116, cbSceneParam._m0[_2163].y, _2112 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2124, cbSceneParam._m0[_2179].w, fma(_2120, cbSceneParam._m0[_2179].z, fma(_2116, cbSceneParam._m0[_2179].y, _2112 * cbSceneParam._m0[_2179].x)));
        float _2207 = cbSceneParam._m0[33u].z * _2202;
        float _2209 = cbSceneParam._m0[33u].w * _2202;
        float _2212 = fma(_2124, cbSceneParam._m0[_2171].w, fma(_2120, cbSceneParam._m0[_2171].z, fma(_2116, cbSceneParam._m0[_2171].y, _2112 * cbSceneParam._m0[_2171].x))) / _2202;
        float _2260 = (cbSceneParam._m0[33u].x - sqrt(((_2126 * _2126) + (_2125 * _2125)) + (_2127 * _2127))) * cbSceneParam._m0[33u].y;
        float _4647 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2267 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 + _2190) / _2202, (_2209 + _2194) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 + _2190) / _2202, (_2194 - _2207) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 - _2207) / _2202, (_2194 - _2209) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 - _2209) / _2202, (_2207 + _2194) / _2202), _2212), 0.0)).x), vec4(0.25)));
        _2274 = 1.0 - (_2267 * cbSceneParam._m0[34u].x);
        _2275 = 1.0 - (_2267 * cbSceneParam._m0[34u].y);
        _2276 = 1.0 - (_2267 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2274 = 1.0;
        _2275 = 1.0;
        _2276 = 1.0;
    }
    float _2340;
    float _2342;
    float _2344;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2328 = fma(_2124, cbSceneParam._m0[63u].w, fma(_2120, cbSceneParam._m0[63u].z, fma(_2116, cbSceneParam._m0[63u].y, _2112 * cbSceneParam._m0[63u].x)));
        float _2329 = fma(_2124, cbSceneParam._m0[60u].w, fma(_2120, cbSceneParam._m0[60u].z, fma(_2116, cbSceneParam._m0[60u].y, _2112 * cbSceneParam._m0[60u].x))) / _2328;
        float _2330 = fma(_2124, cbSceneParam._m0[61u].w, fma(_2120, cbSceneParam._m0[61u].z, fma(_2116, cbSceneParam._m0[61u].y, _2112 * cbSceneParam._m0[61u].x))) / _2328;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2329 >= cbSceneParam._m0[64u].x) && (_2330 >= cbSceneParam._m0[64u].y)) && (_2329 <= cbSceneParam._m0[64u].z)) && (_2330 <= cbSceneParam._m0[64u].w))
        {
            float _2468 = fma(_2124, cbSceneParam._m0[62u].w, fma(_2120, cbSceneParam._m0[62u].z, fma(_2116, cbSceneParam._m0[62u].y, _2112 * cbSceneParam._m0[62u].x))) / _2328;
            float _2472 = isnan(cbSceneParam._m0[41u].w) ? _2468 : (isnan(_2468) ? cbSceneParam._m0[41u].w : max(_2468, cbSceneParam._m0[41u].w));
            float _2515 = (cbSceneParam._m0[33u].x - sqrt(((_2126 * _2126) + (_2125 * _2125)) + (_2127 * _2127))) * cbSceneParam._m0[33u].y;
            float _4663 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
            float _2522 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2329, cbSceneParam._m0[33u].w + _2330), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2329, _2330 - cbSceneParam._m0[33u].z), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2329 - cbSceneParam._m0[33u].z, _2330 - cbSceneParam._m0[33u].w), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2329 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2330), _2472), 0.0)).x), vec4(0.25)));
            float _2526 = 1.0 - (_2522 * cbSceneParam._m0[34u].x);
            float _2527 = 1.0 - (_2522 * cbSceneParam._m0[34u].y);
            float _2528 = 1.0 - (_2522 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2528) ? _2276 : (isnan(_2276) ? _2528 : min(_2276, _2528));
            frontier_phi_37_36_ladder_1 = isnan(_2527) ? _2275 : (isnan(_2275) ? _2527 : min(_2275, _2527));
            frontier_phi_37_36_ladder_2 = isnan(_2526) ? _2274 : (isnan(_2274) ? _2526 : min(_2274, _2526));
        }
        else
        {
            frontier_phi_37_36_ladder = _2276;
            frontier_phi_37_36_ladder_1 = _2275;
            frontier_phi_37_36_ladder_2 = _2274;
        }
        _2340 = frontier_phi_37_36_ladder_2;
        _2342 = frontier_phi_37_36_ladder_1;
        _2344 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2340 = _2274;
        _2342 = _2275;
        _2344 = _2276;
    }
    uvec4 _2349 = floatBitsToUint(cbInstanceData._m0[_983 + 5u]);
    uint _2351 = _2349.x * 14u;
    uint _2352 = _2351 + 13u;
    float _2359 = _1023 + (-1.0);
    float _2364 = (cbLight._m0[_2352].x * _2359) + 1.0;
    float _2365 = (cbLight._m0[_2352].y * _2359) + 1.0;
    float _2366 = (cbLight._m0[_2352].z * _2359) + 1.0;
    float _2367 = (cbLight._m0[_2352].w * _2359) + 1.0;
    uint _2368 = _2351 + 5u;
    float _2374 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
    uint _2378 = _2351 + 4u;
    float _2387 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
    uint _2391 = _2351 | 1u;
    float _2402 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_845, _846, _847));
    float _2405 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_845, _846, _847));
    float _4699 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _4710 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2410 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * 0.3183098733425140380859375;
    float _2412 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * 0.3183098733425140380859375;
    float _2419 = ((cbLight._m0[_2368].x * _2374) * _2412) + (((cbLight._m0[_2378].x * _2340) * _2387) * _2410);
    float _2420 = ((_2374 * cbLight._m0[_2368].y) * _2412) + (((cbLight._m0[_2378].y * _2342) * _2387) * _2410);
    float _2421 = ((_2374 * cbLight._m0[_2368].z) * _2412) + (((cbLight._m0[_2378].z * _2344) * _2387) * _2410);
    uvec4 _2425 = floatBitsToUint(cbLight._m0[_2351 + 12u]);
    bool _2427 = _2425.x == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2427)
    {
        _2529 = _2419;
        _2531 = _2420;
        _2533 = _2421;
    }
    else
    {
        uint _2537 = _2351 + 6u;
        float _2553 = (dot(vec3(cbLight._m0[_2351 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2554 = _2553 * _2553;
        float _4721 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2555 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2556 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2529 = (((cbLight._m0[_2537].x * 0.3183098733425140380859375) * _2555) * _2556) + _2419;
        _2531 = (((cbLight._m0[_2537].y * 0.3183098733425140380859375) * _2555) * _2556) + _2420;
        _2533 = (((cbLight._m0[_2537].z * 0.3183098733425140380859375) * _2555) * _2556) + _2421;
    }
    bool _2536 = _2425.y == 0u;
    float _2591;
    float _2593;
    float _2595;
    if (_2536)
    {
        _2591 = _2529;
        _2593 = _2531;
        _2595 = _2533;
    }
    else
    {
        uint _2764 = _2351 + 7u;
        float _2780 = (dot(vec3(cbLight._m0[_2351 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2781 = _2780 * _2780;
        float _4737 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2782 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2783 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2591 = (((cbLight._m0[_2764].x * 0.3183098733425140380859375) * _2782) * _2783) + _2529;
        _2593 = (((cbLight._m0[_2764].y * 0.3183098733425140380859375) * _2782) * _2783) + _2531;
        _2595 = (((cbLight._m0[_2764].z * 0.3183098733425140380859375) * _2782) * _2783) + _2533;
    }
    uint _2598 = _2351 + 8u;
    float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _848) * 0.949999988079071044921875);
    float _2612 = _2611 * _2611;
    float _2613 = cbLight._m0[_2351].x + _925;
    float _2614 = cbLight._m0[_2351].y + _926;
    float _2615 = cbLight._m0[_2351].z + _927;
    float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
    float _2620 = _2619 * _2613;
    float _2621 = _2619 * _2614;
    float _2622 = _2619 * _2615;
    float _2623 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2351].xyz));
    float _4753 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _4764 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _2627 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2628 = dot(vec3(_845, _846, _847), vec3(_2620, _2621, _2622));
    float _4775 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2632 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2620, _2621, _2622));
    float _4786 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2636 = _2612 * _2612;
    float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
    float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
    float _2649 = 0.959999978542327880859375 - _1005;
    float _2651 = 0.959999978542327880859375 - _1006;
    float _2652 = 0.959999978542327880859375 - _1007;
    float _2659 = 1.0 - _2612;
    float _2670 = (0.5 / (((_2627 * ((_2626 * _2659) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2659) + _2612) * _2626))) * _2626;
    float _4797 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2672 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
    uint _2686 = _2351 + 9u;
    float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _848) * 0.949999988079071044921875);
    float _2698 = _2697 * _2697;
    float _2699 = cbLight._m0[_2391].x + _925;
    float _2700 = cbLight._m0[_2391].y + _926;
    float _2701 = cbLight._m0[_2391].z + _927;
    float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
    float _2706 = _2705 * _2699;
    float _2707 = _2705 * _2700;
    float _2708 = _2705 * _2701;
    float _2709 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2391].xyz));
    float _4808 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
    float _2713 = dot(vec3(_845, _846, _847), vec3(_2706, _2707, _2708));
    float _4819 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2717 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2706, _2707, _2708));
    float _4830 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2721 = _2698 * _2698;
    float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
    float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
    float _2739 = 1.0 - _2698;
    float _2749 = (0.5 / (((_2627 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2739) + _2698) * _2712))) * _2712;
    float _4841 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2751 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
    float _2761 = (((((_2732 * _2649) + _1008) * cbLight._m0[_2686].x) * _2751) * _2374) + ((((cbLight._m0[_2598].x * _2340) * ((_2648 * _2649) + _1008)) * _2672) * _2387);
    float _2762 = (((((_2732 * _2651) + _1010) * cbLight._m0[_2686].y) * _2751) * _2374) + ((((cbLight._m0[_2598].y * _2342) * ((_2648 * _2651) + _1010)) * _2672) * _2387);
    float _2763 = (((((_2732 * _2652) + _1011) * cbLight._m0[_2686].z) * _2751) * _2374) + ((((cbLight._m0[_2598].z * _2344) * ((_2648 * _2652) + _1011)) * _2672) * _2387);
    float _2819;
    float _2821;
    float _2823;
    if (_2427)
    {
        _2819 = _2761;
        _2821 = _2762;
        _2823 = _2763;
    }
    else
    {
        uint _2825 = _2351 + 2u;
        uint _2829 = _2351 + 10u;
        float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2825].w)) * _848) * 0.949999988079071044921875);
        float _2844 = _2843 * _2843;
        float _2845 = cbLight._m0[_2825].x + _925;
        float _2846 = cbLight._m0[_2825].y + _926;
        float _2847 = cbLight._m0[_2825].z + _927;
        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
        float _2852 = _2851 * _2845;
        float _2853 = _2851 * _2846;
        float _2854 = _2851 * _2847;
        float _2855 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2825].xyz));
        float _4852 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2859 = dot(vec3(_845, _846, _847), vec3(_2852, _2853, _2854));
        float _4863 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2863 = dot(vec3(cbLight._m0[_2825].xyz), vec3(_2852, _2853, _2854));
        float _4874 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2867 = _2844 * _2844;
        float _2871 = ((_2862 * _2862) * (_2867 + (-1.0))) + 1.0;
        float _2878 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
        float _2885 = 1.0 - _2844;
        float _2895 = (0.5 / (((_2627 * ((_2858 * _2885) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2885) + _2844) * _2858))) * _2858;
        float _4885 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2897 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2867 / ((_2871 * _2871) * 3.141590118408203125));
        float _2898 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2819 = (((((_2878 * _2649) + _1008) * cbLight._m0[_2829].x) * _2897) * _2898) + _2761;
        _2821 = (((((_2878 * _2651) + _1010) * cbLight._m0[_2829].y) * _2897) * _2898) + _2762;
        _2823 = (((((_2878 * _2652) + _1011) * cbLight._m0[_2829].z) * _2897) * _2898) + _2763;
    }
    float _2929;
    float _2931;
    float _2933;
    if (_2536)
    {
        _2929 = _2819;
        _2931 = _2821;
        _2933 = _2823;
    }
    else
    {
        uint _2940 = _2351 + 3u;
        uint _2944 = _2351 + 11u;
        float _2958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2940].w)) * _848) * 0.949999988079071044921875);
        float _2959 = _2958 * _2958;
        float _2960 = cbLight._m0[_2940].x + _925;
        float _2961 = cbLight._m0[_2940].y + _926;
        float _2962 = cbLight._m0[_2940].z + _927;
        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
        float _2967 = _2966 * _2960;
        float _2968 = _2966 * _2961;
        float _2969 = _2966 * _2962;
        float _2970 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2940].xyz));
        float _4901 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
        float _2974 = dot(vec3(_845, _846, _847), vec3(_2967, _2968, _2969));
        float _4912 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2978 = dot(vec3(cbLight._m0[_2940].xyz), vec3(_2967, _2968, _2969));
        float _4923 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2982 = _2959 * _2959;
        float _2986 = ((_2977 * _2977) * (_2982 + (-1.0))) + 1.0;
        float _2993 = exp2(log2(1.0 - (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) * 5.0);
        float _3000 = 1.0 - _2959;
        float _3010 = (0.5 / (((_2627 * ((_2973 * _3000) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _3000) + _2959) * _2973))) * _2973;
        float _4934 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3012 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2982 / ((_2986 * _2986) * 3.141590118408203125));
        float _3013 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2929 = (((((_2993 * _2649) + _1008) * cbLight._m0[_2944].x) * _3012) * _3013) + _2819;
        _2931 = (((((_2993 * _2651) + _1010) * cbLight._m0[_2944].y) * _3012) * _3013) + _2821;
        _2933 = (((((_2993 * _2652) + _1011) * cbLight._m0[_2944].z) * _3012) * _3013) + _2823;
    }
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_2349.y == 0u)
    {
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.x;
        uint _3046 = uint((float(_3034.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _3035))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _3035)));
        float _3056 = (log2(_2127 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3057 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        uint _3060 = uint(isnan(14.0) ? _3057 : (isnan(_3057) ? 14.0 : min(_3057, 14.0)));
        uvec4 _3065 = texelFetch(g_lightClusterGridBuffer, int(((_3060 << 2u) + (_3046 << 6u)) >> 2u));
        uint _3066 = _3065.x;
        uint _3067 = _3034.z;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        if (((((1u << ((_3067 >> 4u) & 15u)) + 4294967295u) & _3066) == 0u) || ((_3067 & 240u) == 0u))
        {
            _3146 = 0.0;
            _3148 = 0.0;
            _3150 = 0.0;
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
        }
        else
        {
            float _3147;
            float _3149;
            float _3151;
            float _3153;
            float _3155;
            float _3157;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            uint _3305 = 0u;
            uint _3314;
            bool _3315;
            for (;;)
            {
                _3314 = texelFetch(g_lightClassification, int((((_3060 << 5u) + (_3046 << 9u)) + (_3305 << 2u)) >> 2u)).x;
                _3315 = _3314 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3315)
                {
                    frontier_phi_71_pred = _3304;
                    frontier_phi_71_pred_1 = _3303;
                    frontier_phi_71_pred_2 = _3302;
                    frontier_phi_71_pred_3 = _3301;
                    frontier_phi_71_pred_4 = _3300;
                    frontier_phi_71_pred_5 = _3299;
                }
                else
                {
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    uint _3450;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3302;
                    _3448 = _3303;
                    _3449 = _3304;
                    _3450 = _3314;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    for (;;)
                    {
                        uint _3454 = uint(findLSB(_3450)) + (_3305 << 5u);
                        uint _3451 = (_3450 + 4294967295u) & _3450;
                        uint _3456 = _3454 * 48u;
                        vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3476 = (_3454 * 48u) + 4u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 3u)).x));
                        uint _3495 = (_3454 * 48u) + 8u;
                        vec3 _3506 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x));
                        float _3510 = _3470.x - _2125;
                        float _3511 = _3470.y - _2126;
                        float _3512 = _3470.z - _2127;
                        float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                        float _3516 = inversesqrt(_3513);
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3520 = dot(vec3(_964, _967, _970), vec3(_3517, _3518, _3519));
                        float _3525 = 1.0 - (_3513 * _3470.w);
                        float _4960 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3527 = sqrt(_3513) * _3489.w;
                        float _3530 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3520) + _3531;
                        float _3537 = _3527 * _3527;
                        float _3541 = ((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3526) / ((_3537 * 0.699999988079071044921875) + 1.0);
                        float _3545 = (-0.0) - _2125;
                        float _3546 = (-0.0) - _2126;
                        float _3547 = (-0.0) - _2127;
                        float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                        float _3552 = _3551 * _3545;
                        float _3553 = _3551 * _3546;
                        float _3554 = _3551 * _3547;
                        float _3561 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                        float _3562 = 1.0 - _1039;
                        float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                        float _3570 = _3569 * _3569;
                        float _3571 = _3570 * _3570;
                        float _3572 = _3552 + _3517;
                        float _3573 = _3553 + _3518;
                        float _3574 = _3554 + _3519;
                        float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                        float _3582 = dot(vec3(_964, _967, _970), vec3(_3552, _3553, _3554));
                        float _4976 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3585 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3586 = dot(vec3(_964, _967, _970), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                        float _4987 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3589 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                        float _3594 = _3530 * _3570;
                        float _3595 = _3594 * _3594;
                        float _3598 = ((1.0 - _3595) * _3520) + _3595;
                        float _4998 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3600 = 1.0 - _3570;
                        float _3610 = (0.5 / (((_3599 * ((_3585 * _3600) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3570) * _3585))) * _3599;
                        float _5009 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3621 = (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) / ((_3593 * _3593) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125))) * _3526;
                        _3374 = (_3541 * _3489.x) + _3447;
                        _3375 = (_3541 * _3489.y) + _3448;
                        _3376 = (_3541 * _3489.z) + _3449;
                        _3371 = (_3621 * _3506.x) + _3444;
                        _3372 = (_3621 * _3506.y) + _3445;
                        _3373 = (_3621 * _3506.z) + _3446;
                        if (_3451 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3374;
                            _3448 = _3375;
                            _3449 = _3376;
                            _3450 = _3451;
                        }
                    }
                    frontier_phi_71_pred = _3376;
                    frontier_phi_71_pred_1 = _3375;
                    frontier_phi_71_pred_2 = _3374;
                    frontier_phi_71_pred_3 = _3373;
                    frontier_phi_71_pred_4 = _3372;
                    frontier_phi_71_pred_5 = _3371;
                }
                _3157 = frontier_phi_71_pred;
                _3155 = frontier_phi_71_pred_1;
                _3153 = frontier_phi_71_pred_2;
                _3151 = frontier_phi_71_pred_3;
                _3149 = frontier_phi_71_pred_4;
                _3147 = frontier_phi_71_pred_5;
                uint _3306 = _3305 + 1u;
                if (_3306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3299 = _3147;
                    _3300 = _3149;
                    _3301 = _3151;
                    _3302 = _3153;
                    _3303 = _3155;
                    _3304 = _3157;
                    _3305 = _3306;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3146 = _3147;
            _3148 = _3149;
            _3150 = _3151;
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
        }
        uvec4 _3160 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3161 = _3160.z;
        uint _3163 = (_3161 >> 8u) & 15u;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        float _3277;
        if (((4294967295u << _3163) & _3066) == 0u)
        {
            _3267 = _3146;
            _3269 = _3148;
            _3271 = _3150;
            _3273 = _3152;
            _3275 = _3154;
            _3277 = _3156;
        }
        else
        {
            float _3292 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
            float _3293 = _3292 * _2125;
            float _3294 = _3292 * _2126;
            float _3295 = _3292 * _2127;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3163 < ((_3161 >> 12u) & 15u))
            {
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3278;
                float _3427 = _3146;
                float _3428 = _3148;
                float _3429 = _3150;
                float _3430 = _3152;
                float _3431 = _3154;
                float _3432 = _3156;
                uint _3433 = _3163;
                uint _3442;
                bool _3443;
                for (;;)
                {
                    _3442 = texelFetch(g_lightClassification, int((((_3060 << 5u) + (_3046 << 9u)) + (_3433 << 2u)) >> 2u)).x;
                    _3443 = _3442 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3443)
                    {
                        frontier_phi_82_pred = _3432;
                        frontier_phi_82_pred_1 = _3431;
                        frontier_phi_82_pred_2 = _3430;
                        frontier_phi_82_pred_3 = _3429;
                        frontier_phi_82_pred_4 = _3428;
                        frontier_phi_82_pred_5 = _3427;
                    }
                    else
                    {
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3648 = _3427;
                        float _3649 = _3428;
                        float _3650 = _3429;
                        float _3651 = _3430;
                        float _3652 = _3431;
                        float _3653 = _3432;
                        uint _3654 = _3442;
                        uint _3655;
                        vec4 _3680;
                        float _3681;
                        vec4 _3696;
                        vec3 _3708;
                        vec4 _3723;
                        vec4 _3738;
                        float _3784;
                        bool _3785;
                        for (;;)
                        {
                            uint _3665 = ((_3433 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3654));
                            _3655 = (_3654 + 4294967295u) & _3654;
                            uint _3667 = _3665 * 40u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3681 = _3680.w;
                            uint _3683 = (_3665 * 40u) + 4u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3665 * 40u) + 8u;
                            _3708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x));
                            uint _3710 = (_3665 * 40u) + 16u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3665 * 40u) + 20u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3740 = (_3665 * 40u) + 24u;
                            vec4 _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3759 = (_3665 * 40u) + 28u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            _3784 = fma(_2127, _3772.z, fma(_2126, _3772.y, _3772.x * _2125)) + _3772.w;
                            _3785 = !((fma(_2127, _3753.z, fma(_2126, _3753.y, _3753.x * _2125)) + _3753.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3785)
                            {
                                float _3812 = _3680.x - _2125;
                                float _3813 = _3680.y - _2126;
                                float _3814 = _3680.z - _2127;
                                float _3815 = dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814));
                                float _3818 = inversesqrt(_3815);
                                float _3819 = _3818 * _3812;
                                float _3820 = _3818 * _3813;
                                float _3821 = _3818 * _3814;
                                float _3825 = 1.0 - (_3815 / (_3681 * _3681));
                                float _5020 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3830 = sqrt(_3815) * _3696.w;
                                float _3832 = 1.39999997615814208984375 / (_3830 + 1.39999997615814208984375);
                                float _3833 = _3832 * _3832;
                                float _3836 = ((1.0 - _3833) * dot(vec3(_3819, _3820, _3821), vec3(_964, _967, _970))) + _3833;
                                float _3839 = _3830 * _3830;
                                float _3843 = (fma(_2127, _3723.z, fma(_2126, _3723.y, _3723.x * _2125)) + _3723.w) / _3784;
                                float _3844 = (fma(_2127, _3738.z, fma(_2126, _3738.y, _3738.x * _2125)) + _3738.w) / _3784;
                                float _3848 = 1.0 - dot(vec2(_3843, _3844), vec2(_3843, _3844));
                                float _5036 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3849 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3850 = _3849 * (((isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0))) * _3826) / ((_3839 * 0.699999988079071044921875) + 1.0));
                                float _3862 = exp2(log2(1.0 / ((_3839 * 3.5) + 5.0)) * 0.25);
                                float _3863 = 1.0 - _1039;
                                float _3870 = sqrt(1.0 - ((1.0 - (_3863 * _3863)) * (1.0 - (_3862 * _3862))));
                                float _3871 = _3870 * _3870;
                                float _3872 = _3871 * _3871;
                                float _3873 = _3819 - _3293;
                                float _3874 = _3820 - _3294;
                                float _3875 = _3821 - _3295;
                                float _3879 = inversesqrt(dot(vec3(_3873, _3874, _3875), vec3(_3873, _3874, _3875)));
                                float _3883 = dot(vec3(_964, _967, _970), vec3((-0.0) - _3293, (-0.0) - _3294, (-0.0) - _3295));
                                float _5047 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3887 = dot(vec3(_964, _967, _970), vec3(_3879 * _3873, _3879 * _3874, _3879 * _3875));
                                float _5058 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3890 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3894 = ((_3890 * _3890) * (_3872 + (-1.0))) + 1.0;
                                float _3895 = _3832 * _3871;
                                float _3896 = _3895 * _3895;
                                float _3902 = ((1.0 - _3896) * dot(vec3(_964, _967, _970), vec3(_3819, _3820, _3821))) + _3896;
                                float _5069 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3903 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                                float _3904 = 1.0 - _3871;
                                float _3914 = (0.5 / (((_3903 * ((_3886 * _3904) + _3871)) + 9.9999999392252902907785028219223e-09) + (((_3903 * _3904) + _3871) * _3886))) * _3903;
                                float _5080 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3924 = (_3849 * _3826) * (((_3872 * 3.1415927410125732421875) * (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) / ((_3894 * _3894) * ((_3839 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3850 * _3696.z;
                                frontier_phi_88_pred_1 = _3850 * _3696.y;
                                frontier_phi_88_pred_2 = _3850 * _3696.x;
                                frontier_phi_88_pred_3 = _3924 * _3708.z;
                                frontier_phi_88_pred_4 = _3924 * _3708.y;
                                frontier_phi_88_pred_5 = _3924 * _3708.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3933 = frontier_phi_88_pred;
                            _3932 = frontier_phi_88_pred_1;
                            _3931 = frontier_phi_88_pred_2;
                            _3930 = frontier_phi_88_pred_3;
                            _3929 = frontier_phi_88_pred_4;
                            _3928 = frontier_phi_88_pred_5;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            _3637 = _3930 + _3650;
                            if (_3655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3655;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3640;
                        frontier_phi_82_pred_1 = _3639;
                        frontier_phi_82_pred_2 = _3638;
                        frontier_phi_82_pred_3 = _3637;
                        frontier_phi_82_pred_4 = _3636;
                        frontier_phi_82_pred_5 = _3635;
                    }
                    _3278 = frontier_phi_82_pred;
                    _3276 = frontier_phi_82_pred_1;
                    _3274 = frontier_phi_82_pred_2;
                    _3272 = frontier_phi_82_pred_3;
                    _3270 = frontier_phi_82_pred_4;
                    _3268 = frontier_phi_82_pred_5;
                    uint _3434 = _3433 + 1u;
                    if (_3434 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3427 = _3268;
                        _3428 = _3270;
                        _3429 = _3272;
                        _3430 = _3274;
                        _3431 = _3276;
                        _3432 = _3278;
                        _3433 = _3434;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3274;
                frontier_phi_63_64_ladder_1 = _3278;
                frontier_phi_63_64_ladder_2 = _3276;
                frontier_phi_63_64_ladder_3 = _3272;
                frontier_phi_63_64_ladder_4 = _3270;
                frontier_phi_63_64_ladder_5 = _3268;
            }
            else
            {
                frontier_phi_63_64_ladder = _3152;
                frontier_phi_63_64_ladder_1 = _3156;
                frontier_phi_63_64_ladder_2 = _3154;
                frontier_phi_63_64_ladder_3 = _3150;
                frontier_phi_63_64_ladder_4 = _3148;
                frontier_phi_63_64_ladder_5 = _3146;
            }
            _3267 = frontier_phi_63_64_ladder_5;
            _3269 = frontier_phi_63_64_ladder_4;
            _3271 = frontier_phi_63_64_ladder_3;
            _3273 = frontier_phi_63_64_ladder;
            _3275 = frontier_phi_63_64_ladder_2;
            _3277 = frontier_phi_63_64_ladder_1;
        }
        float _3282 = isnan(1.0) ? _1023 : (isnan(_1023) ? 1.0 : min(_1023, 1.0));
        _3079 = (_3282 * _3273) + _2591;
        _3081 = (_3282 * _3275) + _2593;
        _3083 = (_3282 * _3277) + _2595;
        _3085 = ((_3267 * _1008) * _3282) + _2929;
        _3087 = ((_3269 * _1010) * _3282) + _2931;
        _3089 = ((_3271 * _1011) * _3282) + _2933;
    }
    else
    {
        _3079 = _2591;
        _3081 = _2593;
        _3083 = _2595;
        _3085 = _2929;
        _3087 = _2931;
        _3089 = _2933;
    }
    float _5096 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5107 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5118 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _3106 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3079 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1023))) + ((_3085 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1858)) * cbPerFrame._m0[3u].x);
    float _3107 = ((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_3081 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1023))) + ((_3087 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1858)) * cbPerFrame._m0[3u].x);
    float _3108 = ((isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_3083 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1023))) + ((_3089 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1858)) * cbPerFrame._m0[3u].x);
    uint _3109 = _983 + 6u;
    float _3117 = _945 / cbSceneParam._m0[86u].x;
    float _3118 = _946 / cbSceneParam._m0[86u].y;
    vec4 _3132 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3117, _3118, (log2((isnan(cbSceneParam._m0[77u].w) ? _868 : (isnan(_868) ? cbSceneParam._m0[77u].w : min(_868, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3134 = _3132.x;
    float _3135 = _3132.y;
    float _3136 = _3132.z;
    float _3137 = _3132.w;
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    if (_868 > cbSceneParam._m0[78u].w)
    {
        float _3171 = isnan(_868) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _868 : min(cbSceneParam._m0[80u].w, _868));
        float _3172 = _3171 / _868;
        float _3183 = _3172 * _918;
        float _3184 = _919 * _3172;
        float _3185 = (-0.0) - _3184;
        float _3187 = _3172 * _920;
        float _3189 = (cbSceneParam._m0[77u].w * _3185) / _3171;
        float _3190 = _3189 + cbSceneParam._m0[79u].w;
        float _3191 = cbSceneParam._m0[79u].w - _3184;
        float _3197 = sqrt(((_3183 * _3183) + (_3184 * _3184)) + (_3187 * _3187));
        float _3200 = (1.0 - (cbSceneParam._m0[77u].w / _3171)) * _3197;
        float _3205 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3207 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3384;
        if (abs((_3185 - _3189) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3384 = ((((_3190 > 0.0) ? exp2(_3205 * _3190) : (2.0 - exp2(_3207 * _3190))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3200;
        }
        else
        {
            float _3328 = 1.0 / cbSceneParam._m0[80u].x;
            float _3329 = isnan(_3191) ? _3190 : (isnan(_3190) ? _3191 : max(_3190, _3191));
            float _3330 = isnan(_3191) ? _3190 : (isnan(_3190) ? _3191 : min(_3190, _3191));
            float _3339 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : min(_3329, 0.0));
            float _3340 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : min(_3330, 0.0));
            _3384 = ((abs(_3197 / _3185) * cbSceneParam._m0[80u].y) * ((((_3339 - _3340) * 2.0) - ((exp2(_3205 * (isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0)))) - exp2(_3205 * (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))))) * _3328)) - ((exp2(_3207 * _3339) - exp2(_3207 * _3340)) * _3328))) + (_3200 * cbSceneParam._m0[80u].z);
        }
        vec4 _3386 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3117, _3118, 1.0), 0.0);
        float _3395 = exp2((_3384 * (-1.44269502162933349609375)) * (1.0 - _3386.w));
        float _3396 = log2(_3395);
        float _3412 = log2(_3137);
        _3209 = (exp2(_3412 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3396 * cbSceneParam._m0[78u].x)) * _3386.x) / cbSceneParam._m0[78u].x)) + _3134;
        _3211 = (exp2(_3412 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3396 * cbSceneParam._m0[78u].y)) * _3386.y) / cbSceneParam._m0[78u].y)) + _3135;
        _3213 = (exp2(_3412 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3396 * cbSceneParam._m0[78u].z)) * _3386.z) / cbSceneParam._m0[78u].z)) + _3136;
        _3215 = _3395 * _3137;
    }
    else
    {
        _3209 = _3134;
        _3211 = _3135;
        _3213 = _3136;
        _3215 = _3137;
    }
    bool _3422;
    vec4 _3225;
    vec4 _3247;
    float _3249;
    float _3253;
    float _3254;
    float _3255;
    float _3256;
    bool _3266;
    for (;;)
    {
        _3225 = cbMatDynParam._m0[0u];
        float _3227 = roundEven(_3225.y);
        bool _3228 = _3227 == 3.0;
        float _3229 = log2(_3215);
        float _3236 = exp2(_3229 * cbSceneParam._m0[78u].x) * _3106;
        float _3237 = exp2(_3229 * cbSceneParam._m0[78u].y) * _3107;
        float _3238 = exp2(_3229 * cbSceneParam._m0[78u].z) * _3108;
        float _3245 = _934 + (-0.5);
        _3247 = cbMtdParam._m0[1u];
        _3249 = _3247.y * _3245;
        float _3252 = (_3227 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3253 = _3252 * (_3228 ? _3236 : (_3236 + (cbSceneParam._m0[72u].w * _3209)));
        _3254 = _3252 * (_3228 ? _3237 : (_3237 + (cbSceneParam._m0[72u].w * _3211)));
        _3255 = _3252 * (_3228 ? _3238 : (_3238 + (cbSceneParam._m0[72u].w * _3213)));
        _3256 = _3245 * 0.999000012874603271484375;
        _3266 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3266)
        {
            if ((cbInstanceData._m0[_983 + 7u].x + _3256) < 0.5)
            {
                _3422 = true;
                break;
            }
        }
        uint _3363 = _984 + uint(_3225.w);
        if ((cbInstanceData._m0[_3363].w < 1.0) && ((cbInstanceData._m0[_3363].w + _3256) < 0.5))
        {
            _3422 = true;
            break;
        }
        if ((_3249 + 1.0) < _3247.x)
        {
            _3422 = true;
            break;
        }
        _3422 = false;
        break;
    }
    float _3626;
    if (_3422)
    {
        discard_state = true;
        _3626 = 0.0;
    }
    else
    {
        _3626 = cbInstanceData._m0[_3109].w;
    }
    SV_Target.x = _3253;
    SV_Target.y = _3254;
    SV_Target.z = _3255;
    SV_Target.w = _3626;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3109].w;
    discard_exit();
}


