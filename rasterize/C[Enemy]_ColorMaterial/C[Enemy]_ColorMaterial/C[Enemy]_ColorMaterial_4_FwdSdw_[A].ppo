#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1502;
float _4162;
float _4163;
float _4164;
float _4165;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _290 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _307 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _325 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _337 = exp2(log2(_325.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _339 = isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0));
    float _348 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _350 = isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0));
    vec4 _362 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _365 = _362.y;
    float _368 = (_362.x + (-0.02500000037252902984619140625)) * 8.0;
    float _372 = roundEven(5.0 - _368);
    float _373 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _374 = isnan(4.0) ? _373 : (isnan(_373) ? 4.0 : min(_373, 4.0));
    float _387 = floor(_374);
    vec4 _390 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _387));
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[17u].x;
    _203[0u] = cbMtdParam._m0[17u].y;
    _204[0u] = cbMtdParam._m0[17u].z;
    _202[1u] = cbMtdParam._m0[15u].x;
    _203[1u] = cbMtdParam._m0[15u].y;
    _204[1u] = cbMtdParam._m0[15u].z;
    _202[2u] = cbMtdParam._m0[14u].x;
    _203[2u] = cbMtdParam._m0[14u].y;
    _204[2u] = cbMtdParam._m0[14u].z;
    _202[3u] = cbMtdParam._m0[13u].x;
    _203[3u] = cbMtdParam._m0[13u].y;
    _204[3u] = cbMtdParam._m0[13u].z;
    _202[4u] = cbMtdParam._m0[12u].x;
    _203[4u] = cbMtdParam._m0[12u].y;
    _204[4u] = cbMtdParam._m0[12u].z;
    _202[5u] = cbMtdParam._m0[18u].x;
    _203[5u] = cbMtdParam._m0[18u].y;
    _204[5u] = cbMtdParam._m0[18u].z;
    float _454 = roundEven(_368);
    float _455 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    uint _457 = uint(int(isnan(5.0) ? _455 : (isnan(_455) ? 5.0 : min(_455, 5.0))));
    vec4 _487 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _498 = cbMtdParam._m0[9u].x * _487.x;
    float _499 = cbMtdParam._m0[9u].y * _487.y;
    float _500 = cbMtdParam._m0[9u].z * _487.z;
    float _507 = ((((((_202[_457] - cbMtdParam._m0[10u].x) * _365) + cbMtdParam._m0[10u].x) * _390.x) - _498) * _350) + _498;
    float _508 = ((((((_203[_457] - cbMtdParam._m0[10u].y) * _365) + cbMtdParam._m0[10u].y) * _390.y) - _499) * _350) + _499;
    float _509 = ((((((_204[_457] - cbMtdParam._m0[10u].z) * _365) + cbMtdParam._m0[10u].z) * _390.z) - _500) * _350) + _500;
    float _515 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _528 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _547 = (((cbMtdParam._m0[16u].x * _528.x) - _507) * _515) + _507;
    float _548 = (((cbMtdParam._m0[16u].y * _528.y) - _508) * _515) + _508;
    float _549 = (((cbMtdParam._m0[16u].z * _528.z) - _509) * _515) + _509;
    vec4 _562 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _582 = (((cbMtdParam._m0[19u].x * _562.x) - _547) * _339) + _547;
    float _583 = (((cbMtdParam._m0[19u].y * _562.y) - _548) * _339) + _548;
    float _584 = (((cbMtdParam._m0[19u].z * _562.z) - _549) * _339) + _549;
    vec4 _596 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _621 = (_325.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _596.x) - _582) * _309) + _582);
    float _623 = (_325.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _596.y) - _583) * _309) + _583);
    float _625 = (_325.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _596.z) - _584) * _309) + _584);
    float _629 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _638 = (_629 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _629))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4224 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _646 = ((cbMtdParam._m0[21u].x - _621) * _639) + _621;
    float _647 = ((cbMtdParam._m0[21u].y - _623) * _639) + _623;
    float _648 = ((cbMtdParam._m0[21u].z - _625) * _639) + _625;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[28u].w;
    _198[0u] = cbMtdParam._m0[29u].x;
    _197[1u] = cbMtdParam._m0[30u].w;
    _198[1u] = cbMtdParam._m0[31u].x;
    _197[2u] = cbMtdParam._m0[30u].y;
    _198[2u] = cbMtdParam._m0[30u].z;
    _197[3u] = cbMtdParam._m0[29u].w;
    _198[3u] = cbMtdParam._m0[30u].x;
    _197[4u] = cbMtdParam._m0[29u].y;
    _198[4u] = cbMtdParam._m0[29u].z;
    float _688 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    uint _690 = uint(int(isnan(4.0) ? _688 : (isnan(_688) ? 4.0 : min(_688, 4.0))));
    float _697 = ((_198[_690] - cbMtdParam._m0[22u].z) * _350) + cbMtdParam._m0[22u].z;
    float _700 = ((cbMtdParam._m0[22u].w - _697) * _515) + _697;
    float _703 = ((cbMtdParam._m0[25u].x - _700) * _339) + _700;
    float _706 = ((cbMtdParam._m0[26u].x - _703) * _309) + _703;
    float _708 = _706 - (_706 * _629);
    vec4 _724 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _387));
    vec4 _741 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _743 = _741.x;
    float _744 = _741.y;
    float _749 = cbMtdParam._m0[22u].x + _741.z;
    float _752 = (((_724.z + _197[_690]) - _749) * _350) + _749;
    vec4 _764 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _775 = (((_764.z - _752) + cbMtdParam._m0[28u].y) * _515) + _752;
    float _781 = ((((_294 * 2.0) * _775) - _775) * cbMtdParam._m0[24u].w) + _775;
    vec4 _793 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _804 = (((cbMtdParam._m0[23u].z + _793.z) - _781) * _339) + _781;
    vec4 _817 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _828 = (((_817.z - _804) + cbMtdParam._m0[26u].y) * _309) + _804;
    vec4 _843 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _858 = ((cbMtdParam._m0[27u].y * _629) * ((_843.z * cbMtdParam._m0[27u].x) - _828)) + _828;
    float _870 = ((_724.x - _743) * _350) + _743;
    float _871 = ((_724.y - _744) * _350) + _744;
    float _876 = ((_764.x - _870) * _515) + _870;
    float _877 = ((_764.y - _871) * _515) + _871;
    float _882 = ((_793.x - _876) * _339) + _876;
    float _883 = ((_793.y - _877) * _339) + _877;
    float _892 = ((((_817.x - _882) * _309) + _882) * 2.0) + (-1.0);
    float _893 = ((((_817.y - _883) * _309) + _883) * 2.0) + (-1.0);
    float _894 = dot(vec2(_892, _893), vec2(_892, _893));
    float _4245 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _899 = sqrt(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))));
    float _909 = ((cbMtdParam._m0[25u].y * ((_290.x * 2.0) + (-1.0))) + _892) + ((((_843.x * 2.0) + (-1.0)) * _629) * cbMtdParam._m0[26u].w);
    float _910 = ((cbMtdParam._m0[25u].y * ((_290.y * 2.0) + (-1.0))) + _893) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_843.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _913 = fma(_899, _239 * NORMAL.x, fma(_910, _246 * TANGENT.x, (_232 * _224) * _909));
    float _916 = fma(_899, _239 * NORMAL.y, fma(_910, _246 * TANGENT.y, (_232 * _225) * _909));
    float _919 = fma(_899, _239 * NORMAL.z, fma(_910, _246 * TANGENT.z, (_232 * _226) * _909));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _4256 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _927 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4278 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4289 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4300 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _931 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _947 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _997 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _987);
    float _998 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _987);
    float _999 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _987);
    float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
    float _1004 = _997 * _1003;
    float _1005 = _998 * _1003;
    float _1006 = _999 * _1003;
    vec4 _1011 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1013 = _1011.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1183 = sqrt(((_997 * _997) + (_998 * _998)) + (_999 * _999));
        float _1189 = (cbMatDynParam._m0[5u].x * _1183) + cbMatDynParam._m0[5u].y;
        float _4311 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1194 = (cbMatDynParam._m0[5u].z * _1183) + cbMatDynParam._m0[5u].w;
        float _4322 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) - _1190)) + _1190) < ((_1013 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1024 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1025 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1043 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1046 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1049 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1062 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1063 = _1062 + 9u;
    uint _1064 = _1063 + uint(cbMatDynParam._m0[0u].w);
    float _1070 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbInstanceData._m0[_1064].x;
    float _1071 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * cbInstanceData._m0[_1064].y;
    float _1072 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * cbInstanceData._m0[_1064].z;
    float _4333 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _1076 = 1.0 - _931;
    float _1077 = _1073 * _1076;
    float _1078 = _1074 * _1076;
    float _1079 = _1075 * _1076;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _931;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _931;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _931;
    float _1087 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    vec4 _1099 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1024, cbSceneParam._m0[86u].y * _1025));
    float _1102 = _1099.x * TEXCOORD_3.w;
    float _1103 = dot(vec3(_924, _925, _926), vec3(_1004, _1005, _1006));
    float _1106 = _1103 * 2.0;
    float _1110 = (_1106 * _924) - _1004;
    float _1111 = (_1106 * _925) - _1005;
    float _1112 = (_1106 * _926) - _1006;
    float _1116 = abs(dot(vec3(_1004, _1005, _1006), vec3(_924, _925, _926)));
    float _4366 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1118 = sqrt(_927);
    float _1129 = exp2((_1118 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1118 * 3.0));
    float _1135 = (1.0 - _1129) * ((_1118 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1136 = _1129 * _1118;
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1501;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1226 = fma(_1172, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164));
        float _1230 = fma(_1172, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164));
        float _1234 = fma(_1172, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164));
        float _1259 = _1164 + _924;
        float _1260 = _1168 + _925;
        float _1261 = _1172 + _926;
        float _1271 = fma(_1261, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1259)) - _1226;
        float _1272 = fma(_1261, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1259)) - _1230;
        float _1273 = fma(_1261, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1259)) - _1234;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1226 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1230 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[34u].z) + ((((((_1234 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1329 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1295.x + (-0.5));
        float _1331 = _1329 * (_1295.y + (-0.5));
        float _1332 = _1329 * (_1295.z + (-0.5));
        float _1339 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1302.x + (-0.5));
        float _1341 = _1339 * (_1302.y + (-0.5));
        float _1342 = _1339 * (_1302.z + (-0.5));
        float _1349 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1309.x + (-0.5));
        float _1351 = _1349 * (_1309.y + (-0.5));
        float _1352 = _1349 * (_1309.z + (-0.5));
        float _1359 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1316.x + (-0.5));
        float _1361 = _1359 * (_1316.y + (-0.5));
        float _1362 = _1359 * (_1316.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1383 = (dot(vec3(_924, _925, _926), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1393 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4414 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1395 + 1.0))) + _1400) * _1363;
        float _1410 = _1331 * 0.5;
        float _1411 = _1341 * 0.5;
        float _1412 = _1351 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_924, _925, _926), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4425 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4436 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4447 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_1437 + 1.0))) + _1442) * _1364;
        float _1452 = _1332 * 0.5;
        float _1453 = _1342 * 0.5;
        float _1454 = _1352 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_924, _925, _926), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4480 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1479 + 1.0))) + _1484) * _1365;
        _1501 = _1332;
        _1503 = _1331;
        _1504 = _1330;
        _1505 = _1342;
        _1506 = _1341;
        _1507 = _1340;
        _1508 = _1352;
        _1509 = _1351;
        _1510 = _1350;
        _1511 = _1365;
        _1512 = _1364;
        _1513 = _1363;
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1502;
        _1503 = _1502;
        _1504 = _1502;
        _1505 = _1502;
        _1506 = _1502;
        _1507 = _1502;
        _1508 = _1502;
        _1509 = _1502;
        _1510 = _1502;
        _1511 = _1502;
        _1512 = _1502;
        _1513 = _1502;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1172, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164));
        float _1546 = fma(_1172, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164));
        float _1550 = fma(_1172, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164));
        float _1573 = _1164 + _924;
        float _1574 = _1168 + _925;
        float _1575 = _1172 + _926;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_924, _925, _926), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4521 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4532 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4543 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_924, _925, _926), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4554 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4565 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4576 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_924, _925, _926), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4587 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4598 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4609 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1502;
        _1812 = _1502;
        _1813 = _1502;
        _1814 = _1502;
        _1815 = _1502;
        _1816 = _1502;
        _1817 = _1502;
        _1818 = _1502;
        _1819 = _1502;
        _1820 = _1502;
        _1821 = _1502;
        _1822 = _1502;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1514)) + _1514;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1515)) + _1515;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1516)) + _1516;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1110 * 0.5;
    float _1880 = _1111 * 0.5;
    float _1881 = _1112 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1501, _1505, _1508, _1511));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1172, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1172, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1172, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1112, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110));
        float _2009 = fma(_1112, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110));
        float _2012 = fma(_1112, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2211;
        if (_2009 > 0.0)
        {
            _2211 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2211 = frontier_phi_26_22_ladder;
        }
        float _2506;
        if (_2012 > 0.0)
        {
            _2506 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2506 = frontier_phi_38_33_ladder;
        }
        float _2508 = isnan(_2211) ? _2040 : (isnan(_2040) ? _2211 : min(_2040, _2211));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _2006) + _1995;
        float _2514 = (_2509 * _2009) + _1999;
        float _2515 = (_2509 * _2012) + _2003;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2516;
        float _2520 = _2516 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 > _2520) || ((_2514 < _2518) || ((_2513 < _2518) || (_2513 > _2520))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2515, cbModelParam._m0[9u].z, fma(_2514, cbModelParam._m0[9u].y, _2513 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2515, cbModelParam._m0[10u].z, fma(_2514, cbModelParam._m0[10u].y, _2513 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2515, cbModelParam._m0[11u].z, fma(_2514, cbModelParam._m0[11u].y, _2513 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2660.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2660.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2660.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1110, _1111, _1112), _1948);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2090 = fma(_1172, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164)) + cbModelParam._m0[21u].w;
        float _2094 = fma(_1172, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164)) + cbModelParam._m0[22u].w;
        float _2098 = fma(_1172, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164)) + cbModelParam._m0[23u].w;
        float _2101 = fma(_1112, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110));
        float _2104 = fma(_1112, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110));
        float _2107 = fma(_1112, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110));
        float _2216;
        if (_2101 > 0.0)
        {
            _2216 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2216 = frontier_phi_28_24_ladder;
        }
        float _2533;
        if (_2104 > 0.0)
        {
            _2533 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2533 = frontier_phi_40_35_ladder;
        }
        float _2871;
        if (_2107 > 0.0)
        {
            _2871 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2871 = frontier_phi_50_47_ladder;
        }
        float _2873 = isnan(_2533) ? _2216 : (isnan(_2216) ? _2533 : min(_2216, _2533));
        float _2874 = isnan(_2871) ? _2873 : (isnan(_2873) ? _2871 : min(_2873, _2871));
        float _2878 = (_2874 * _2101) + _2090;
        float _2879 = (_2874 * _2104) + _2094;
        float _2880 = (_2874 * _2107) + _2098;
        float _2881 = _2874 * 9.9999997473787516355514526367188e-05;
        float _2882 = (-1.0) - _2881;
        float _2884 = _2881 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2880 > _2884) || ((_2880 < _2882) || ((_2879 > _2884) || ((_2879 < _2882) || ((_2878 < _2882) || (_2878 > _2884))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2880, cbModelParam._m0[17u].z, fma(_2879, cbModelParam._m0[17u].y, _2878 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2880, cbModelParam._m0[18u].z, fma(_2879, cbModelParam._m0[18u].y, _2878 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2880, cbModelParam._m0[19u].z, fma(_2879, cbModelParam._m0[19u].y, _2878 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_50_ladder = _3002.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3002.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3002.x * cbModelParam._m0[1u].z;
        }
        _2126 = frontier_phi_25_50_ladder_2;
        _2128 = frontier_phi_25_50_ladder_1;
        _2130 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1110, _1111, _1112), _2037);
        _2126 = _2110.x * cbModelParam._m0[1u].z;
        _2128 = _2110.y * cbModelParam._m0[1u].z;
        _2130 = _2110.z * cbModelParam._m0[1u].z;
    }
    float _2143 = (((_1135 * _1087) + _1136) * _1102) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2145 = (((_1135 * _1089) + _1136) * _1102) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1135 * _1090) + _1136) * _1102) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2145, cbSceneParam._m0[89u].y, _2143 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2145, cbSceneParam._m0[90u].y, _2143 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2145, cbSceneParam._m0[91u].y, _2143 * cbSceneParam._m0[91u].x));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2203 = _2190 / _2202;
    float _2204 = _2194 / _2202;
    float _2205 = _2198 / _2202;
    float _2352;
    float _2353;
    float _2354;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2232 = ((uint(_2205 > cbSceneParam._m0[59u].y) + uint(_2205 > cbSceneParam._m0[59u].x)) + uint(_2205 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2233 = _2232 + 43u;
        uint _2241 = _2232 + 44u;
        uint _2249 = _2232 + 45u;
        uint _2257 = _2232 + 46u;
        float _2268 = fma(_2202, cbSceneParam._m0[_2233].w, fma(_2198, cbSceneParam._m0[_2233].z, fma(_2194, cbSceneParam._m0[_2233].y, _2190 * cbSceneParam._m0[_2233].x)));
        float _2272 = fma(_2202, cbSceneParam._m0[_2241].w, fma(_2198, cbSceneParam._m0[_2241].z, fma(_2194, cbSceneParam._m0[_2241].y, _2190 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2202, cbSceneParam._m0[_2257].w, fma(_2198, cbSceneParam._m0[_2257].z, fma(_2194, cbSceneParam._m0[_2257].y, _2190 * cbSceneParam._m0[_2257].x)));
        float _2285 = cbSceneParam._m0[33u].z * _2280;
        float _2287 = cbSceneParam._m0[33u].w * _2280;
        float _2290 = fma(_2202, cbSceneParam._m0[_2249].w, fma(_2198, cbSceneParam._m0[_2249].z, fma(_2194, cbSceneParam._m0[_2249].y, _2190 * cbSceneParam._m0[_2249].x))) / _2280;
        float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
        float _4735 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2345 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 + _2268) / _2280, (_2287 + _2272) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 + _2268) / _2280, (_2272 - _2285) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2285) / _2280, (_2272 - _2287) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2287) / _2280, (_2285 + _2272) / _2280), _2290), 0.0)).x), vec4(0.25)));
        _2352 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
        _2353 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
        _2354 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2352 = 1.0;
        _2353 = 1.0;
        _2354 = 1.0;
    }
    float _2418;
    float _2420;
    float _2422;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2406 = fma(_2202, cbSceneParam._m0[63u].w, fma(_2198, cbSceneParam._m0[63u].z, fma(_2194, cbSceneParam._m0[63u].y, _2190 * cbSceneParam._m0[63u].x)));
        float _2407 = fma(_2202, cbSceneParam._m0[60u].w, fma(_2198, cbSceneParam._m0[60u].z, fma(_2194, cbSceneParam._m0[60u].y, _2190 * cbSceneParam._m0[60u].x))) / _2406;
        float _2408 = fma(_2202, cbSceneParam._m0[61u].w, fma(_2198, cbSceneParam._m0[61u].z, fma(_2194, cbSceneParam._m0[61u].y, _2190 * cbSceneParam._m0[61u].x))) / _2406;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2407 >= cbSceneParam._m0[64u].x) && (_2408 >= cbSceneParam._m0[64u].y)) && (_2407 <= cbSceneParam._m0[64u].z)) && (_2408 <= cbSceneParam._m0[64u].w))
        {
            float _2546 = fma(_2202, cbSceneParam._m0[62u].w, fma(_2198, cbSceneParam._m0[62u].z, fma(_2194, cbSceneParam._m0[62u].y, _2190 * cbSceneParam._m0[62u].x))) / _2406;
            float _2550 = isnan(cbSceneParam._m0[41u].w) ? _2546 : (isnan(_2546) ? cbSceneParam._m0[41u].w : max(_2546, cbSceneParam._m0[41u].w));
            float _2593 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
            float _4751 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
            float _2600 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2407, cbSceneParam._m0[33u].w + _2408), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2407, _2408 - cbSceneParam._m0[33u].z), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].z, _2408 - cbSceneParam._m0[33u].w), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2408), _2550), 0.0)).x), vec4(0.25)));
            float _2604 = 1.0 - (_2600 * cbSceneParam._m0[34u].x);
            float _2605 = 1.0 - (_2600 * cbSceneParam._m0[34u].y);
            float _2606 = 1.0 - (_2600 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
            frontier_phi_37_36_ladder_1 = isnan(_2605) ? _2353 : (isnan(_2353) ? _2605 : min(_2353, _2605));
            frontier_phi_37_36_ladder_2 = isnan(_2604) ? _2352 : (isnan(_2352) ? _2604 : min(_2352, _2604));
        }
        else
        {
            frontier_phi_37_36_ladder = _2354;
            frontier_phi_37_36_ladder_1 = _2353;
            frontier_phi_37_36_ladder_2 = _2352;
        }
        _2418 = frontier_phi_37_36_ladder_2;
        _2420 = frontier_phi_37_36_ladder_1;
        _2422 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2418 = _2352;
        _2420 = _2353;
        _2422 = _2354;
    }
    uvec4 _2427 = floatBitsToUint(cbInstanceData._m0[_1062 + 5u]);
    uint _2429 = _2427.x * 14u;
    uint _2430 = _2429 + 13u;
    float _2437 = _1102 + (-1.0);
    float _2442 = (cbLight._m0[_2430].x * _2437) + 1.0;
    float _2443 = (cbLight._m0[_2430].y * _2437) + 1.0;
    float _2444 = (cbLight._m0[_2430].z * _2437) + 1.0;
    float _2445 = (cbLight._m0[_2430].w * _2437) + 1.0;
    uint _2446 = _2429 + 5u;
    float _2452 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2456 = _2429 + 4u;
    float _2465 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
    uint _2469 = _2429 | 1u;
    float _2480 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_924, _925, _926));
    float _2483 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_924, _925, _926));
    float _4787 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _4798 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2488 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * 0.3183098733425140380859375;
    float _2490 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * 0.3183098733425140380859375;
    float _2497 = ((cbLight._m0[_2446].x * _2452) * _2490) + (((cbLight._m0[_2456].x * _2418) * _2465) * _2488);
    float _2498 = ((_2452 * cbLight._m0[_2446].y) * _2490) + (((cbLight._m0[_2456].y * _2420) * _2465) * _2488);
    float _2499 = ((_2452 * cbLight._m0[_2446].z) * _2490) + (((cbLight._m0[_2456].z * _2422) * _2465) * _2488);
    uvec4 _2503 = floatBitsToUint(cbLight._m0[_2429 + 12u]);
    bool _2505 = _2503.x == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2505)
    {
        _2607 = _2497;
        _2609 = _2498;
        _2611 = _2499;
    }
    else
    {
        uint _2615 = _2429 + 6u;
        float _2631 = (dot(vec3(cbLight._m0[_2429 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2632 = _2631 * _2631;
        float _4809 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2633 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2634 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2607 = (((cbLight._m0[_2615].x * 0.3183098733425140380859375) * _2633) * _2634) + _2497;
        _2609 = (((cbLight._m0[_2615].y * 0.3183098733425140380859375) * _2633) * _2634) + _2498;
        _2611 = (((cbLight._m0[_2615].z * 0.3183098733425140380859375) * _2633) * _2634) + _2499;
    }
    bool _2614 = _2503.y == 0u;
    float _2669;
    float _2671;
    float _2673;
    if (_2614)
    {
        _2669 = _2607;
        _2671 = _2609;
        _2673 = _2611;
    }
    else
    {
        uint _2842 = _2429 + 7u;
        float _2858 = (dot(vec3(cbLight._m0[_2429 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2859 = _2858 * _2858;
        float _4825 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2860 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2861 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2669 = (((cbLight._m0[_2842].x * 0.3183098733425140380859375) * _2860) * _2861) + _2607;
        _2671 = (((cbLight._m0[_2842].y * 0.3183098733425140380859375) * _2860) * _2861) + _2609;
        _2673 = (((cbLight._m0[_2842].z * 0.3183098733425140380859375) * _2860) * _2861) + _2611;
    }
    uint _2676 = _2429 + 8u;
    float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _927) * 0.949999988079071044921875);
    float _2690 = _2689 * _2689;
    float _2691 = cbLight._m0[_2429].x + _1004;
    float _2692 = cbLight._m0[_2429].y + _1005;
    float _2693 = cbLight._m0[_2429].z + _1006;
    float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
    float _2698 = _2697 * _2691;
    float _2699 = _2697 * _2692;
    float _2700 = _2697 * _2693;
    float _2701 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2429].xyz));
    float _4841 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
    float _4852 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2705 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
    float _2706 = dot(vec3(_924, _925, _926), vec3(_2698, _2699, _2700));
    float _4863 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2698, _2699, _2700));
    float _4874 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2690 * _2690;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
    float _2727 = 0.959999978542327880859375 - _1084;
    float _2729 = 0.959999978542327880859375 - _1085;
    float _2730 = 0.959999978542327880859375 - _1086;
    float _2737 = 1.0 - _2690;
    float _2748 = (0.5 / (((_2705 * ((_2704 * _2737) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2737) + _2690) * _2704))) * _2704;
    float _4885 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    uint _2764 = _2429 + 9u;
    float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _927) * 0.949999988079071044921875);
    float _2776 = _2775 * _2775;
    float _2777 = cbLight._m0[_2469].x + _1004;
    float _2778 = cbLight._m0[_2469].y + _1005;
    float _2779 = cbLight._m0[_2469].z + _1006;
    float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
    float _2784 = _2783 * _2777;
    float _2785 = _2783 * _2778;
    float _2786 = _2783 * _2779;
    float _2787 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2469].xyz));
    float _4896 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
    float _2791 = dot(vec3(_924, _925, _926), vec3(_2784, _2785, _2786));
    float _4907 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2794 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
    float _2795 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2784, _2785, _2786));
    float _4918 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2799 = _2776 * _2776;
    float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
    float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) * 5.0);
    float _2817 = 1.0 - _2776;
    float _2827 = (0.5 / (((_2705 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2817) + _2776) * _2790))) * _2790;
    float _4929 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2829 = (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
    float _2839 = (((((_2810 * _2727) + _1087) * cbLight._m0[_2764].x) * _2829) * _2452) + ((((cbLight._m0[_2676].x * _2418) * ((_2726 * _2727) + _1087)) * _2750) * _2465);
    float _2840 = (((((_2810 * _2729) + _1089) * cbLight._m0[_2764].y) * _2829) * _2452) + ((((cbLight._m0[_2676].y * _2420) * ((_2726 * _2729) + _1089)) * _2750) * _2465);
    float _2841 = (((((_2810 * _2730) + _1090) * cbLight._m0[_2764].z) * _2829) * _2452) + ((((cbLight._m0[_2676].z * _2422) * ((_2726 * _2730) + _1090)) * _2750) * _2465);
    float _2897;
    float _2899;
    float _2901;
    if (_2505)
    {
        _2897 = _2839;
        _2899 = _2840;
        _2901 = _2841;
    }
    else
    {
        uint _2903 = _2429 + 2u;
        uint _2907 = _2429 + 10u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _927) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _1004;
        float _2924 = cbLight._m0[_2903].y + _1005;
        float _2925 = cbLight._m0[_2903].z + _1006;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2903].xyz));
        float _4940 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
        float _2937 = dot(vec3(_924, _925, _926), vec3(_2930, _2931, _2932));
        float _4951 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4962 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2705 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2963) + _2922) * _2936))) * _2936;
        float _4973 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2897 = (((((_2956 * _2727) + _1087) * cbLight._m0[_2907].x) * _2975) * _2976) + _2839;
        _2899 = (((((_2956 * _2729) + _1089) * cbLight._m0[_2907].y) * _2975) * _2976) + _2840;
        _2901 = (((((_2956 * _2730) + _1090) * cbLight._m0[_2907].z) * _2975) * _2976) + _2841;
    }
    float _3007;
    float _3009;
    float _3011;
    if (_2614)
    {
        _3007 = _2897;
        _3009 = _2899;
        _3011 = _2901;
    }
    else
    {
        uint _3018 = _2429 + 3u;
        uint _3022 = _2429 + 11u;
        float _3036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3018].w)) * _927) * 0.949999988079071044921875);
        float _3037 = _3036 * _3036;
        float _3038 = cbLight._m0[_3018].x + _1004;
        float _3039 = cbLight._m0[_3018].y + _1005;
        float _3040 = cbLight._m0[_3018].z + _1006;
        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
        float _3045 = _3044 * _3038;
        float _3046 = _3044 * _3039;
        float _3047 = _3044 * _3040;
        float _3048 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_3018].xyz));
        float _4989 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3051 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _3052 = dot(vec3(_924, _925, _926), vec3(_3045, _3046, _3047));
        float _5000 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3055 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _3056 = dot(vec3(cbLight._m0[_3018].xyz), vec3(_3045, _3046, _3047));
        float _5011 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3060 = _3037 * _3037;
        float _3064 = ((_3055 * _3055) * (_3060 + (-1.0))) + 1.0;
        float _3071 = exp2(log2(1.0 - (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) * 5.0);
        float _3078 = 1.0 - _3037;
        float _3088 = (0.5 / (((_2705 * ((_3051 * _3078) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _3078) + _3037) * _3051))) * _3051;
        float _5022 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
        float _3090 = (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_3060 / ((_3064 * _3064) * 3.141590118408203125));
        float _3091 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _3007 = (((((_3071 * _2727) + _1087) * cbLight._m0[_3022].x) * _3090) * _3091) + _2897;
        _3009 = (((((_3071 * _2729) + _1089) * cbLight._m0[_3022].y) * _3090) * _3091) + _2899;
        _3011 = (((((_3071 * _2730) + _1090) * cbLight._m0[_3022].z) * _3090) * _3091) + _2901;
    }
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_2427.y == 0u)
    {
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.x;
        uint _3124 = uint((float(_3112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1025) / _3113))) + floor(float(uint(cbSceneParam._m0[85u].x * _1024) / _3113)));
        float _3134 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3135 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        uint _3138 = uint(isnan(14.0) ? _3135 : (isnan(_3135) ? 14.0 : min(_3135, 14.0)));
        uvec4 _3143 = texelFetch(g_lightClusterGridBuffer, int(((_3138 << 2u) + (_3124 << 6u)) >> 2u));
        uint _3144 = _3143.x;
        uint _3145 = _3112.z;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((((1u << ((_3145 >> 4u) & 15u)) + 4294967295u) & _3144) == 0u) || ((_3145 & 240u) == 0u))
        {
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
        }
        else
        {
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3377 = 0.0;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            uint _3383 = 0u;
            uint _3392;
            bool _3393;
            for (;;)
            {
                _3392 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                _3393 = _3392 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3393)
                {
                    frontier_phi_71_pred = _3382;
                    frontier_phi_71_pred_1 = _3381;
                    frontier_phi_71_pred_2 = _3380;
                    frontier_phi_71_pred_3 = _3379;
                    frontier_phi_71_pred_4 = _3378;
                    frontier_phi_71_pred_5 = _3377;
                }
                else
                {
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    uint _3528;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3379;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3392;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    for (;;)
                    {
                        uint _3532 = uint(findLSB(_3528)) + (_3383 << 5u);
                        uint _3529 = (_3528 + 4294967295u) & _3528;
                        uint _3534 = _3532 * 48u;
                        vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 3u)).x));
                        uint _3554 = (_3532 * 48u) + 4u;
                        vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3554)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 3u)).x));
                        uint _3573 = (_3532 * 48u) + 8u;
                        vec3 _3584 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x));
                        float _3588 = _3548.x - _2203;
                        float _3589 = _3548.y - _2204;
                        float _3590 = _3548.z - _2205;
                        float _3591 = dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590));
                        float _3594 = inversesqrt(_3591);
                        float _3595 = _3594 * _3588;
                        float _3596 = _3594 * _3589;
                        float _3597 = _3594 * _3590;
                        float _3598 = dot(vec3(_1043, _1046, _1049), vec3(_3595, _3596, _3597));
                        float _3603 = 1.0 - (_3591 * _3548.w);
                        float _5048 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3604 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3605 = sqrt(_3591) * _3567.w;
                        float _3608 = 1.39999997615814208984375 / (_3605 + 1.39999997615814208984375);
                        float _3609 = _3608 * _3608;
                        float _3612 = ((1.0 - _3609) * _3598) + _3609;
                        float _3615 = _3605 * _3605;
                        float _3619 = ((isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0))) * _3604) / ((_3615 * 0.699999988079071044921875) + 1.0);
                        float _3623 = (-0.0) - _2203;
                        float _3624 = (-0.0) - _2204;
                        float _3625 = (-0.0) - _2205;
                        float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                        float _3630 = _3629 * _3623;
                        float _3631 = _3629 * _3624;
                        float _3632 = _3629 * _3625;
                        float _3639 = exp2(log2(1.0 / ((_3615 * 3.5) + 5.0)) * 0.25);
                        float _3640 = 1.0 - _1118;
                        float _3647 = sqrt(1.0 - ((1.0 - (_3640 * _3640)) * (1.0 - (_3639 * _3639))));
                        float _3648 = _3647 * _3647;
                        float _3649 = _3648 * _3648;
                        float _3650 = _3630 + _3595;
                        float _3651 = _3631 + _3596;
                        float _3652 = _3632 + _3597;
                        float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                        float _3660 = dot(vec3(_1043, _1046, _1049), vec3(_3630, _3631, _3632));
                        float _5064 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3663 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3664 = dot(vec3(_1043, _1046, _1049), vec3(_3656 * _3650, _3656 * _3651, _3656 * _3652));
                        float _5075 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                        float _3667 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                        float _3671 = ((_3667 * _3667) * (_3649 + (-1.0))) + 1.0;
                        float _3672 = _3608 * _3648;
                        float _3673 = _3672 * _3672;
                        float _3676 = ((1.0 - _3673) * _3598) + _3673;
                        float _5086 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3677 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                        float _3678 = 1.0 - _3648;
                        float _3688 = (0.5 / (((_3677 * ((_3663 * _3678) + _3648)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3648) * _3663))) * _3677;
                        float _5097 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3699 = (((_3649 * 3.1415927410125732421875) * (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0)))) / ((_3671 * _3671) * ((_3615 * 2.1991131305694580078125) + 3.141590118408203125))) * _3604;
                        _3452 = (_3619 * _3567.x) + _3525;
                        _3453 = (_3619 * _3567.y) + _3526;
                        _3454 = (_3619 * _3567.z) + _3527;
                        _3449 = (_3699 * _3584.x) + _3522;
                        _3450 = (_3699 * _3584.y) + _3523;
                        _3451 = (_3699 * _3584.z) + _3524;
                        if (_3529 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3451;
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3529;
                        }
                    }
                    frontier_phi_71_pred = _3454;
                    frontier_phi_71_pred_1 = _3453;
                    frontier_phi_71_pred_2 = _3452;
                    frontier_phi_71_pred_3 = _3451;
                    frontier_phi_71_pred_4 = _3450;
                    frontier_phi_71_pred_5 = _3449;
                }
                _3235 = frontier_phi_71_pred;
                _3233 = frontier_phi_71_pred_1;
                _3231 = frontier_phi_71_pred_2;
                _3229 = frontier_phi_71_pred_3;
                _3227 = frontier_phi_71_pred_4;
                _3225 = frontier_phi_71_pred_5;
                uint _3384 = _3383 + 1u;
                if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3377 = _3225;
                    _3378 = _3227;
                    _3379 = _3229;
                    _3380 = _3231;
                    _3381 = _3233;
                    _3382 = _3235;
                    _3383 = _3384;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
        }
        uvec4 _3238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3239 = _3238.z;
        uint _3241 = (_3239 >> 8u) & 15u;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        if (((4294967295u << _3241) & _3144) == 0u)
        {
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
            _3353 = _3232;
            _3355 = _3234;
        }
        else
        {
            float _3370 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _3371 = _3370 * _2203;
            float _3372 = _3370 * _2204;
            float _3373 = _3370 * _2205;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3241 < ((_3239 >> 12u) & 15u))
            {
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3354;
                float _3356;
                float _3505 = _3224;
                float _3506 = _3226;
                float _3507 = _3228;
                float _3508 = _3230;
                float _3509 = _3232;
                float _3510 = _3234;
                uint _3511 = _3241;
                uint _3520;
                bool _3521;
                for (;;)
                {
                    _3520 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3511 << 2u)) >> 2u)).x;
                    _3521 = _3520 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3521)
                    {
                        frontier_phi_82_pred = _3510;
                        frontier_phi_82_pred_1 = _3509;
                        frontier_phi_82_pred_2 = _3508;
                        frontier_phi_82_pred_3 = _3507;
                        frontier_phi_82_pred_4 = _3506;
                        frontier_phi_82_pred_5 = _3505;
                    }
                    else
                    {
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _4006;
                        float _4007;
                        float _4008;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _3726 = _3505;
                        float _3727 = _3506;
                        float _3728 = _3507;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        uint _3732 = _3520;
                        uint _3733;
                        vec4 _3758;
                        float _3759;
                        vec4 _3774;
                        vec3 _3786;
                        vec4 _3801;
                        vec4 _3816;
                        float _3862;
                        bool _3863;
                        for (;;)
                        {
                            uint _3743 = ((_3511 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3732));
                            _3733 = (_3732 + 4294967295u) & _3732;
                            uint _3745 = _3743 * 40u;
                            _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3759 = _3758.w;
                            uint _3761 = (_3743 * 40u) + 4u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3776 = (_3743 * 40u) + 8u;
                            _3786 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x));
                            uint _3788 = (_3743 * 40u) + 16u;
                            _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            uint _3803 = (_3743 * 40u) + 20u;
                            _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            uint _3818 = (_3743 * 40u) + 24u;
                            vec4 _3831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 3u)).x));
                            uint _3837 = (_3743 * 40u) + 28u;
                            vec4 _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            _3862 = fma(_2205, _3850.z, fma(_2204, _3850.y, _3850.x * _2203)) + _3850.w;
                            _3863 = !((fma(_2205, _3831.z, fma(_2204, _3831.y, _3831.x * _2203)) + _3831.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3863)
                            {
                                float _3890 = _3758.x - _2203;
                                float _3891 = _3758.y - _2204;
                                float _3892 = _3758.z - _2205;
                                float _3893 = dot(vec3(_3890, _3891, _3892), vec3(_3890, _3891, _3892));
                                float _3896 = inversesqrt(_3893);
                                float _3897 = _3896 * _3890;
                                float _3898 = _3896 * _3891;
                                float _3899 = _3896 * _3892;
                                float _3903 = 1.0 - (_3893 / (_3759 * _3759));
                                float _5108 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3908 = sqrt(_3893) * _3774.w;
                                float _3910 = 1.39999997615814208984375 / (_3908 + 1.39999997615814208984375);
                                float _3911 = _3910 * _3910;
                                float _3914 = ((1.0 - _3911) * dot(vec3(_3897, _3898, _3899), vec3(_1043, _1046, _1049))) + _3911;
                                float _3917 = _3908 * _3908;
                                float _3921 = (fma(_2205, _3801.z, fma(_2204, _3801.y, _3801.x * _2203)) + _3801.w) / _3862;
                                float _3922 = (fma(_2205, _3816.z, fma(_2204, _3816.y, _3816.x * _2203)) + _3816.w) / _3862;
                                float _3926 = 1.0 - dot(vec2(_3921, _3922), vec2(_3921, _3922));
                                float _5124 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3927 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3928 = _3927 * (((isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0))) * _3904) / ((_3917 * 0.699999988079071044921875) + 1.0));
                                float _3940 = exp2(log2(1.0 / ((_3917 * 3.5) + 5.0)) * 0.25);
                                float _3941 = 1.0 - _1118;
                                float _3948 = sqrt(1.0 - ((1.0 - (_3941 * _3941)) * (1.0 - (_3940 * _3940))));
                                float _3949 = _3948 * _3948;
                                float _3950 = _3949 * _3949;
                                float _3951 = _3897 - _3371;
                                float _3952 = _3898 - _3372;
                                float _3953 = _3899 - _3373;
                                float _3957 = inversesqrt(dot(vec3(_3951, _3952, _3953), vec3(_3951, _3952, _3953)));
                                float _3961 = dot(vec3(_1043, _1046, _1049), vec3((-0.0) - _3371, (-0.0) - _3372, (-0.0) - _3373));
                                float _5135 = isnan(0.0) ? _3961 : (isnan(_3961) ? 0.0 : max(_3961, 0.0));
                                float _3964 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3965 = dot(vec3(_1043, _1046, _1049), vec3(_3957 * _3951, _3957 * _3952, _3957 * _3953));
                                float _5146 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3968 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                                float _3972 = ((_3968 * _3968) * (_3950 + (-1.0))) + 1.0;
                                float _3973 = _3910 * _3949;
                                float _3974 = _3973 * _3973;
                                float _3980 = ((1.0 - _3974) * dot(vec3(_1043, _1046, _1049), vec3(_3897, _3898, _3899))) + _3974;
                                float _5157 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3981 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
                                float _3982 = 1.0 - _3949;
                                float _3992 = (0.5 / (((_3981 * ((_3964 * _3982) + _3949)) + 9.9999999392252902907785028219223e-09) + (((_3981 * _3982) + _3949) * _3964))) * _3981;
                                float _5168 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _4002 = (_3927 * _3904) * (((_3950 * 3.1415927410125732421875) * (isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0)))) / ((_3972 * _3972) * ((_3917 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3928 * _3774.z;
                                frontier_phi_88_pred_1 = _3928 * _3774.y;
                                frontier_phi_88_pred_2 = _3928 * _3774.x;
                                frontier_phi_88_pred_3 = _4002 * _3786.z;
                                frontier_phi_88_pred_4 = _4002 * _3786.y;
                                frontier_phi_88_pred_5 = _4002 * _3786.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4011 = frontier_phi_88_pred;
                            _4010 = frontier_phi_88_pred_1;
                            _4009 = frontier_phi_88_pred_2;
                            _4008 = frontier_phi_88_pred_3;
                            _4007 = frontier_phi_88_pred_4;
                            _4006 = frontier_phi_88_pred_5;
                            _3716 = _4009 + _3729;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            _3713 = _4006 + _3726;
                            _3714 = _4007 + _3727;
                            _3715 = _4008 + _3728;
                            if (_3733 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3733;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3718;
                        frontier_phi_82_pred_1 = _3717;
                        frontier_phi_82_pred_2 = _3716;
                        frontier_phi_82_pred_3 = _3715;
                        frontier_phi_82_pred_4 = _3714;
                        frontier_phi_82_pred_5 = _3713;
                    }
                    _3356 = frontier_phi_82_pred;
                    _3354 = frontier_phi_82_pred_1;
                    _3352 = frontier_phi_82_pred_2;
                    _3350 = frontier_phi_82_pred_3;
                    _3348 = frontier_phi_82_pred_4;
                    _3346 = frontier_phi_82_pred_5;
                    uint _3512 = _3511 + 1u;
                    if (_3512 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3505 = _3346;
                        _3506 = _3348;
                        _3507 = _3350;
                        _3508 = _3352;
                        _3509 = _3354;
                        _3510 = _3356;
                        _3511 = _3512;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3352;
                frontier_phi_63_64_ladder_1 = _3356;
                frontier_phi_63_64_ladder_2 = _3354;
                frontier_phi_63_64_ladder_3 = _3350;
                frontier_phi_63_64_ladder_4 = _3348;
                frontier_phi_63_64_ladder_5 = _3346;
            }
            else
            {
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            _3345 = frontier_phi_63_64_ladder_5;
            _3347 = frontier_phi_63_64_ladder_4;
            _3349 = frontier_phi_63_64_ladder_3;
            _3351 = frontier_phi_63_64_ladder;
            _3353 = frontier_phi_63_64_ladder_2;
            _3355 = frontier_phi_63_64_ladder_1;
        }
        float _3360 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        _3157 = (_3360 * _3351) + _2669;
        _3159 = (_3360 * _3353) + _2671;
        _3161 = (_3360 * _3355) + _2673;
        _3163 = ((_3345 * _1087) * _3360) + _3007;
        _3165 = ((_3347 * _1089) * _3360) + _3009;
        _3167 = ((_3349 * _1090) * _3360) + _3011;
    }
    else
    {
        _3157 = _2669;
        _3159 = _2671;
        _3161 = _2673;
        _3163 = _3007;
        _3165 = _3009;
        _3167 = _3011;
    }
    float _5184 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _5195 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _5206 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _3184 = ((isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0))) * (_3157 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1102))) + ((_3163 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3185 = ((isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0))) * (_3159 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1102))) + ((_3165 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3186 = ((isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0))) * (_3161 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1102))) + ((_3167 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _3187 = _1062 + 6u;
    float _3195 = _1024 / cbSceneParam._m0[86u].x;
    float _3196 = _1025 / cbSceneParam._m0[86u].y;
    vec4 _3210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, (log2((isnan(cbSceneParam._m0[77u].w) ? _947 : (isnan(_947) ? cbSceneParam._m0[77u].w : min(_947, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3212 = _3210.x;
    float _3213 = _3210.y;
    float _3214 = _3210.z;
    float _3215 = _3210.w;
    float _3287;
    float _3289;
    float _3291;
    float _3293;
    if (_947 > cbSceneParam._m0[78u].w)
    {
        float _3249 = isnan(_947) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _947 : min(cbSceneParam._m0[80u].w, _947));
        float _3250 = _3249 / _947;
        float _3261 = _3250 * _997;
        float _3262 = _998 * _3250;
        float _3263 = (-0.0) - _3262;
        float _3265 = _3250 * _999;
        float _3267 = (cbSceneParam._m0[77u].w * _3263) / _3249;
        float _3268 = _3267 + cbSceneParam._m0[79u].w;
        float _3269 = cbSceneParam._m0[79u].w - _3262;
        float _3275 = sqrt(((_3261 * _3261) + (_3262 * _3262)) + (_3265 * _3265));
        float _3278 = (1.0 - (cbSceneParam._m0[77u].w / _3249)) * _3275;
        float _3283 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3285 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3462;
        if (abs((_3263 - _3267) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3462 = ((((_3268 > 0.0) ? exp2(_3283 * _3268) : (2.0 - exp2(_3285 * _3268))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3278;
        }
        else
        {
            float _3406 = 1.0 / cbSceneParam._m0[80u].x;
            float _3407 = isnan(_3269) ? _3268 : (isnan(_3268) ? _3269 : max(_3268, _3269));
            float _3408 = isnan(_3269) ? _3268 : (isnan(_3268) ? _3269 : min(_3268, _3269));
            float _3417 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : min(_3407, 0.0));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            _3462 = ((abs(_3275 / _3263) * cbSceneParam._m0[80u].y) * ((((_3417 - _3418) * 2.0) - ((exp2(_3283 * (isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0)))) - exp2(_3283 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))))) * _3406)) - ((exp2(_3285 * _3417) - exp2(_3285 * _3418)) * _3406))) + (_3278 * cbSceneParam._m0[80u].z);
        }
        vec4 _3464 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, 1.0), 0.0);
        float _3473 = exp2((_3462 * (-1.44269502162933349609375)) * (1.0 - _3464.w));
        float _3474 = log2(_3473);
        float _3490 = log2(_3215);
        _3287 = (exp2(_3490 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].x)) * _3464.x) / cbSceneParam._m0[78u].x)) + _3212;
        _3289 = (exp2(_3490 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].y)) * _3464.y) / cbSceneParam._m0[78u].y)) + _3213;
        _3291 = (exp2(_3490 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].z)) * _3464.z) / cbSceneParam._m0[78u].z)) + _3214;
        _3293 = _3473 * _3215;
    }
    else
    {
        _3287 = _3212;
        _3289 = _3213;
        _3291 = _3214;
        _3293 = _3215;
    }
    bool _3500;
    vec4 _3303;
    vec4 _3325;
    float _3327;
    float _3331;
    float _3332;
    float _3333;
    float _3334;
    bool _3344;
    for (;;)
    {
        _3303 = cbMatDynParam._m0[0u];
        float _3305 = roundEven(_3303.y);
        bool _3306 = _3305 == 3.0;
        float _3307 = log2(_3293);
        float _3314 = exp2(_3307 * cbSceneParam._m0[78u].x) * _3184;
        float _3315 = exp2(_3307 * cbSceneParam._m0[78u].y) * _3185;
        float _3316 = exp2(_3307 * cbSceneParam._m0[78u].z) * _3186;
        float _3323 = _1013 + (-0.5);
        _3325 = cbMtdParam._m0[1u];
        _3327 = _3325.y * _3323;
        float _3330 = (_3305 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3331 = _3330 * (_3306 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3287)));
        _3332 = _3330 * (_3306 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3289)));
        _3333 = _3330 * (_3306 ? _3316 : (_3316 + (cbSceneParam._m0[72u].w * _3291)));
        _3334 = _3323 * 0.999000012874603271484375;
        _3344 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3344)
        {
            if ((cbInstanceData._m0[_1062 + 7u].x + _3334) < 0.5)
            {
                _3500 = true;
                break;
            }
        }
        uint _3441 = _1063 + uint(_3303.w);
        if ((cbInstanceData._m0[_3441].w < 1.0) && ((cbInstanceData._m0[_3441].w + _3334) < 0.5))
        {
            _3500 = true;
            break;
        }
        if ((_3327 + 1.0) < _3325.x)
        {
            _3500 = true;
            break;
        }
        _3500 = false;
        break;
    }
    float _3704;
    if (_3500)
    {
        discard_state = true;
        _3704 = 0.0;
    }
    else
    {
        _3704 = cbInstanceData._m0[_3187].w;
    }
    SV_Target.x = _3331;
    SV_Target.y = _3332;
    SV_Target.z = _3333;
    SV_Target.w = _3704;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3187].w;
    discard_exit();
}


