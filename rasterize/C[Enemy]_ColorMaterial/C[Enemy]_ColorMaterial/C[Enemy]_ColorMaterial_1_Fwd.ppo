#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _280 = _276.z;
    float _293 = exp2(log2((1.0 - _280) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    vec4 _311 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _323 = exp2(log2(_311.w * cbMtdParam._m0[28u].z) * cbMtdParam._m0[23u].x);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    float _334 = exp2(log2(cbMtdParam._m0[23u].y * _280) * cbMtdParam._m0[22u].y);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    float _357 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(4.0) ? _358 : (isnan(_358) ? 4.0 : min(_358, 4.0));
    float _372 = floor(_359);
    vec4 _375 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _372));
    vec4 _399 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _410 = cbMtdParam._m0[9u].x * _399.x;
    float _411 = cbMtdParam._m0[9u].y * _399.y;
    float _412 = cbMtdParam._m0[9u].z * _399.z;
    float _419 = (((cbMtdParam._m0[10u].x * _375.x) - _410) * _336) + _410;
    float _420 = (((cbMtdParam._m0[10u].y * _375.y) - _411) * _336) + _411;
    float _421 = (((cbMtdParam._m0[10u].z * _375.z) - _412) * _336) + _412;
    float _427 = exp2(log2(_276.w) * cbMtdParam._m0[23u].w);
    vec4 _440 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _459 = (((cbMtdParam._m0[16u].x * _440.x) - _419) * _427) + _419;
    float _460 = (((cbMtdParam._m0[16u].y * _440.y) - _420) * _427) + _420;
    float _461 = (((cbMtdParam._m0[16u].z * _440.z) - _421) * _427) + _421;
    vec4 _474 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _494 = (((cbMtdParam._m0[19u].x * _474.x) - _459) * _325) + _459;
    float _495 = (((cbMtdParam._m0[19u].y * _474.y) - _460) * _325) + _460;
    float _496 = (((cbMtdParam._m0[19u].z * _474.z) - _461) * _325) + _461;
    vec4 _509 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _534 = (_311.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _509.x) - _494) * _295) + _494);
    float _536 = (_311.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _509.y) - _495) * _295) + _495);
    float _538 = (_311.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _509.z) - _496) * _295) + _496);
    float _542 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _551 = (_542 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _542))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3744 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _559 = ((cbMtdParam._m0[21u].x - _534) * _552) + _534;
    float _560 = ((cbMtdParam._m0[21u].y - _536) * _552) + _536;
    float _561 = ((cbMtdParam._m0[21u].z - _538) * _552) + _538;
    float _189[5];
    float _190[5];
    _189[0u] = cbMtdParam._m0[28u].w;
    _190[0u] = cbMtdParam._m0[29u].x;
    _189[1u] = cbMtdParam._m0[30u].w;
    _190[1u] = cbMtdParam._m0[31u].x;
    _189[2u] = cbMtdParam._m0[30u].y;
    _190[2u] = cbMtdParam._m0[30u].z;
    _189[3u] = cbMtdParam._m0[29u].w;
    _190[3u] = cbMtdParam._m0[30u].x;
    _189[4u] = cbMtdParam._m0[29u].y;
    _190[4u] = cbMtdParam._m0[29u].z;
    float _603 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    uint _605 = uint(int(isnan(4.0) ? _603 : (isnan(_603) ? 4.0 : min(_603, 4.0))));
    float _612 = ((_190[_605] - cbMtdParam._m0[22u].z) * _336) + cbMtdParam._m0[22u].z;
    float _615 = ((cbMtdParam._m0[22u].w - _612) * _427) + _612;
    float _618 = ((cbMtdParam._m0[25u].x - _615) * _325) + _615;
    float _621 = ((cbMtdParam._m0[26u].x - _618) * _295) + _618;
    float _623 = _621 - (_621 * _542);
    vec4 _639 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _372));
    vec4 _657 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _659 = _657.x;
    float _660 = _657.y;
    float _665 = cbMtdParam._m0[22u].x + _657.z;
    float _668 = (((_639.z + _189[_605]) - _665) * _336) + _665;
    vec4 _681 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _692 = (((_681.z - _668) + cbMtdParam._m0[28u].y) * _427) + _668;
    float _698 = ((((_280 * 2.0) * _692) - _692) * cbMtdParam._m0[24u].w) + _692;
    vec4 _711 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _722 = (((cbMtdParam._m0[23u].z + _711.z) - _698) * _325) + _698;
    vec4 _735 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _746 = (((_735.z - _722) + cbMtdParam._m0[26u].y) * _295) + _722;
    vec4 _761 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _776 = ((cbMtdParam._m0[27u].y * _542) * ((_761.z * cbMtdParam._m0[27u].x) - _746)) + _746;
    float _788 = ((_639.x - _659) * _336) + _659;
    float _789 = ((_639.y - _660) * _336) + _660;
    float _794 = ((_681.x - _788) * _427) + _788;
    float _795 = ((_681.y - _789) * _427) + _789;
    float _800 = ((_711.x - _794) * _325) + _794;
    float _801 = ((_711.y - _795) * _325) + _795;
    float _810 = ((((_735.x - _800) * _295) + _800) * 2.0) + (-1.0);
    float _811 = ((((_735.y - _801) * _295) + _801) * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _3765 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _817 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    float _827 = ((cbMtdParam._m0[25u].y * ((_276.x * 2.0) + (-1.0))) + _810) + ((((_761.x * 2.0) + (-1.0)) * _542) * cbMtdParam._m0[26u].w);
    float _828 = ((cbMtdParam._m0[25u].y * ((_276.y * 2.0) + (-1.0))) + _811) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_761.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _831 = fma(_817, _225 * NORMAL.x, fma(_828, _232 * TANGENT.x, (_218 * _210) * _827));
    float _834 = fma(_817, _225 * NORMAL.y, fma(_828, _232 * TANGENT.y, (_218 * _211) * _827));
    float _837 = fma(_817, _225 * NORMAL.z, fma(_828, _232 * TANGENT.z, (_218 * _212) * _827));
    float _841 = inversesqrt(dot(vec3(_831, _834, _837), vec3(_831, _834, _837)));
    float _842 = _841 * _831;
    float _843 = _841 * _834;
    float _844 = _841 * _837;
    float _3776 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _845 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3798 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3809 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3820 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _849 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_844, cbSceneParam._m0[5u].z, fma(_843, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _842));
    float _952 = fma(_844, cbSceneParam._m0[6u].z, fma(_843, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _842));
    float _955 = fma(_844, cbSceneParam._m0[7u].z, fma(_843, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _842));
    uint _968 = uint(roundEven(NORMAL.w)) * 13u;
    uint _970 = (_968 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_970].z;
    float _3831 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _982 = 1.0 - _849;
    float _983 = _979 * _982;
    float _984 = _980 * _982;
    float _985 = _981 * _982;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _849;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _849;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _849;
    float _993 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    float _996 = _992 + 0.039999999105930328369140625;
    vec4 _1005 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = _1005.x * TEXCOORD_3.w;
    float _1009 = dot(vec3(_842, _843, _844), vec3(_922, _923, _924));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _842) - _922;
    float _1017 = (_1012 * _843) - _923;
    float _1018 = (_1012 * _844) - _924;
    float _1022 = abs(dot(vec3(_922, _923, _924), vec3(_842, _843, _844)));
    float _3864 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_845);
    float _1035 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1024;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1108 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1112 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1137 = _1070 + _842;
        float _1138 = _1074 + _843;
        float _1139 = _1078 + _844;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_842, _843, _844), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3912 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_842, _843, _844), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3945 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_842, _843, _844), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3978 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1421 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1425 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1448 = _1070 + _842;
        float _1449 = _1074 + _843;
        float _1450 = _1078 + _844;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_842, _843, _844), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4041 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_842, _843, _844), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4074 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_842, _843, _844), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4107 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1380;
        _1687 = _1380;
        _1688 = _1380;
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1392)) + _1392;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1393)) + _1393;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1394)) + _1394;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _1016 * 0.5;
    float _1755 = _1017 * 0.5;
    float _1756 = _1018 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _845);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1884 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1887 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1915 = frontier_phi_14_12_ladder;
        }
        float _2118;
        if (_1884 > 0.0)
        {
            _2118 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2118 = frontier_phi_23_19_ladder;
        }
        float _2372;
        if (_1887 > 0.0)
        {
            _2372 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2372 = frontier_phi_35_30_ladder;
        }
        float _2374 = isnan(_2118) ? _1915 : (isnan(_1915) ? _2118 : min(_1915, _2118));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1881) + _1870;
        float _2380 = (_2375 * _1884) + _1874;
        float _2381 = (_2375 * _1887) + _1878;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2382;
        float _2386 = _2382 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 > _2386) || ((_2380 < _2384) || ((_2379 < _2384) || (_2379 > _2386))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2381, cbModelParam._m0[9u].z, fma(_2380, cbModelParam._m0[9u].y, _2379 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2381, cbModelParam._m0[10u].z, fma(_2380, cbModelParam._m0[10u].y, _2379 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2381, cbModelParam._m0[11u].z, fma(_2380, cbModelParam._m0[11u].y, _2379 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_13_35_ladder = _2509.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2509.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2509.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_13_35_ladder_2;
        _1905 = frontier_phi_13_35_ladder_1;
        _1907 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _845);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1966 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _1970 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _1974 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _1977 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _1980 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _1983 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2123;
        if (_1977 > 0.0)
        {
            _2123 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2123 = frontier_phi_25_21_ladder;
        }
        float _2399;
        if (_1980 > 0.0)
        {
            _2399 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2399 = frontier_phi_37_32_ladder;
        }
        float _2612;
        if (_1983 > 0.0)
        {
            _2612 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2612 = frontier_phi_46_43_ladder;
        }
        float _2614 = isnan(_2399) ? _2123 : (isnan(_2123) ? _2399 : min(_2123, _2399));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1977) + _1966;
        float _2620 = (_2615 * _1980) + _1970;
        float _2621 = (_2615 * _1983) + _1974;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_22_46_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _2002 = frontier_phi_22_46_ladder_2;
        _2004 = frontier_phi_22_46_ladder_1;
        _2006 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1912);
        _2002 = _1986.x * cbModelParam._m0[1u].z;
        _2004 = _1986.y * cbModelParam._m0[1u].z;
        _2006 = _1986.z * cbModelParam._m0[1u].z;
    }
    float _2019 = (((_1041 * _993) + _1042) * _1008) * ((cbModelParam._m0[1u].w * (_2002 - _1903)) + _1903);
    float _2021 = (((_1041 * _995) + _1042) * _1008) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2023 = (((_1041 * _996) + _1042) * _1008) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2026 = fma(_2023, cbSceneParam._m0[89u].z, fma(_2021, cbSceneParam._m0[89u].y, _2019 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2023, cbSceneParam._m0[90u].z, fma(_2021, cbSceneParam._m0[90u].y, _2019 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2023, cbSceneParam._m0[91u].z, fma(_2021, cbSceneParam._m0[91u].y, _2019 * cbSceneParam._m0[91u].x));
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_968 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _1008 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2077 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2081 = _2044 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_842, _843, _844));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_842, _843, _844));
    float _4243 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4254 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2061].x * _2067) * _2102) + ((cbLight._m0[_2071].x * _2077) * _2100);
    float _2110 = ((_2067 * cbLight._m0[_2061].y) * _2102) + ((_2077 * cbLight._m0[_2071].y) * _2100);
    float _2111 = ((_2067 * cbLight._m0[_2061].z) * _2102) + ((_2077 * cbLight._m0[_2071].z) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2117)
    {
        _2128 = _2109;
        _2130 = _2110;
        _2132 = _2111;
    }
    else
    {
        uint _2136 = _2044 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4265 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2155 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2109;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2110;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2111;
    }
    bool _2135 = _2115.y == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2135)
    {
        _2173 = _2128;
        _2175 = _2130;
        _2177 = _2132;
    }
    else
    {
        uint _2343 = _2044 + 7u;
        float _2359 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4281 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2362 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2173 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2128;
        _2175 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2130;
        _2177 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2132;
    }
    uint _2180 = _2044 + 8u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _845) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2044].x + _922;
    float _2196 = cbLight._m0[_2044].y + _923;
    float _2197 = cbLight._m0[_2044].z + _924;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2044].xyz));
    float _4297 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2209 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2210 = dot(vec3(_842, _843, _844), vec3(_2202, _2203, _2204));
    float _4319 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2202, _2203, _2204));
    float _4330 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2194 * _2194;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
    float _2231 = 0.959999978542327880859375 - _990;
    float _2233 = 0.959999978542327880859375 - _991;
    float _2234 = 0.959999978542327880859375 - _992;
    float _2241 = 1.0 - _2194;
    float _2252 = (0.5 / (((_2209 * ((_2208 * _2241) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2241) + _2194) * _2208))) * _2208;
    float _4341 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    uint _2265 = _2044 + 9u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _845) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2081].x + _922;
    float _2279 = cbLight._m0[_2081].y + _923;
    float _2280 = cbLight._m0[_2081].z + _924;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2081].xyz));
    float _4352 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2292 = dot(vec3(_842, _843, _844), vec3(_2285, _2286, _2287));
    float _4363 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2285, _2286, _2287));
    float _4374 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2277 * _2277;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
    float _2318 = 1.0 - _2277;
    float _2328 = (0.5 / (((_2209 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2318) + _2277) * _2291))) * _2291;
    float _4385 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    float _2340 = (((((_2311 * _2231) + _993) * cbLight._m0[_2265].x) * _2330) * _2067) + (((((_2230 * _2231) + _993) * cbLight._m0[_2180].x) * _2254) * _2077);
    float _2341 = (((((_2311 * _2233) + _995) * cbLight._m0[_2265].y) * _2330) * _2067) + (((((_2230 * _2233) + _995) * cbLight._m0[_2180].y) * _2254) * _2077);
    float _2342 = (((((_2311 * _2234) + _996) * cbLight._m0[_2265].z) * _2330) * _2067) + (((((_2230 * _2234) + _996) * cbLight._m0[_2180].z) * _2254) * _2077);
    float _2404;
    float _2406;
    float _2408;
    if (_2117)
    {
        _2404 = _2340;
        _2406 = _2341;
        _2408 = _2342;
    }
    else
    {
        uint _2410 = _2044 + 2u;
        uint _2414 = _2044 + 10u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _845) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _922;
        float _2431 = cbLight._m0[_2410].y + _923;
        float _2432 = cbLight._m0[_2410].z + _924;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2410].xyz));
        float _4396 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2444 = dot(vec3(_842, _843, _844), vec3(_2437, _2438, _2439));
        float _4407 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4418 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
        float _2470 = 1.0 - _2429;
        float _2480 = (0.5 / (((_2209 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2470) + _2429) * _2443))) * _2443;
        float _4429 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2482 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2483 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2404 = (((((_2463 * _2231) + _993) * cbLight._m0[_2414].x) * _2482) * _2483) + _2340;
        _2406 = (((((_2463 * _2233) + _995) * cbLight._m0[_2414].y) * _2482) * _2483) + _2341;
        _2408 = (((((_2463 * _2234) + _996) * cbLight._m0[_2414].z) * _2482) * _2483) + _2342;
    }
    float _2518;
    float _2520;
    float _2522;
    if (_2135)
    {
        _2518 = _2404;
        _2520 = _2406;
        _2522 = _2408;
    }
    else
    {
        uint _2529 = _2044 + 3u;
        uint _2533 = _2044 + 11u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _845) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _922;
        float _2550 = cbLight._m0[_2529].y + _923;
        float _2551 = cbLight._m0[_2529].z + _924;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2529].xyz));
        float _4445 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2563 = dot(vec3(_842, _843, _844), vec3(_2556, _2557, _2558));
        float _4456 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4467 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
        float _2589 = 1.0 - _2548;
        float _2599 = (0.5 / (((_2209 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2589) + _2548) * _2562))) * _2562;
        float _4478 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2518 = (((((_2582 * _2231) + _993) * cbLight._m0[_2533].x) * _2601) * _2602) + _2404;
        _2520 = (((((_2582 * _2233) + _995) * cbLight._m0[_2533].y) * _2601) * _2602) + _2406;
        _2522 = (((((_2582 * _2234) + _996) * cbLight._m0[_2533].z) * _2601) * _2602) + _2408;
    }
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_2042.y == 0u)
    {
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2677;
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2677;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2677;
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.x;
        uint _2704 = uint((float(_2692.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2693))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2693)));
        float _2714 = (log2(_2680 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2715 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        uint _2718 = uint(isnan(14.0) ? _2715 : (isnan(_2715) ? 14.0 : min(_2715, 14.0)));
        uvec4 _2723 = texelFetch(g_lightClusterGridBuffer, int(((_2718 << 2u) + (_2704 << 6u)) >> 2u));
        uint _2724 = _2723.x;
        uint _2725 = _2692.z;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((((1u << ((_2725 >> 4u) & 15u)) + 4294967295u) & _2724) == 0u) || ((_2725 & 240u) == 0u))
        {
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
        }
        else
        {
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            uint _2976 = 0u;
            uint _2985;
            bool _2986;
            for (;;)
            {
                _2985 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                _2986 = _2985 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2986)
                {
                    frontier_phi_61_pred = _2970;
                    frontier_phi_61_pred_1 = _2975;
                    frontier_phi_61_pred_2 = _2974;
                    frontier_phi_61_pred_3 = _2973;
                    frontier_phi_61_pred_4 = _2972;
                    frontier_phi_61_pred_5 = _2971;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2985;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2976 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _2678;
                        float _3161 = _3120.y - _2679;
                        float _3162 = _3120.z - _2680;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_949, _952, _955), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4504 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _2678;
                        float _3196 = (-0.0) - _2679;
                        float _3197 = (-0.0) - _2680;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3212 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3213 = 1.0 - _1024;
                        float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                        float _3221 = _3220 * _3220;
                        float _3222 = _3221 * _3221;
                        float _3223 = _3202 + _3167;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3233 = dot(vec3(_949, _952, _955), vec3(_3202, _3203, _3204));
                        float _4520 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3237 = dot(vec3(_949, _952, _955), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                        float _4531 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                        float _3245 = _3180 * _3221;
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3170) + _3246;
                        float _4542 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3251 = 1.0 - _3221;
                        float _3261 = (0.5 / (((_3250 * ((_3236 * _3251) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3221) * _3236))) * _3250;
                        float _4553 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3272 = (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3244 * _3244) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3029 = (_3191 * _3139.x) + _3097;
                        _3030 = (_3191 * _3139.y) + _3098;
                        _3031 = (_3191 * _3139.z) + _3099;
                        _3026 = (_3272 * _3156.x) + _3094;
                        _3027 = (_3272 * _3156.y) + _3095;
                        _3028 = (_3272 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_61_pred = _3026;
                    frontier_phi_61_pred_1 = _3031;
                    frontier_phi_61_pred_2 = _3030;
                    frontier_phi_61_pred_3 = _3029;
                    frontier_phi_61_pred_4 = _3028;
                    frontier_phi_61_pred_5 = _3027;
                }
                _2826 = frontier_phi_61_pred;
                _2836 = frontier_phi_61_pred_1;
                _2834 = frontier_phi_61_pred_2;
                _2832 = frontier_phi_61_pred_3;
                _2830 = frontier_phi_61_pred_4;
                _2828 = frontier_phi_61_pred_5;
                uint _2977 = _2976 + 1u;
                if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2970 = _2826;
                    _2971 = _2828;
                    _2972 = _2830;
                    _2973 = _2832;
                    _2974 = _2834;
                    _2975 = _2836;
                    _2976 = _2977;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
        }
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.z;
        uint _2842 = (_2840 >> 8u) & 15u;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((4294967295u << _2842) & _2724) == 0u)
        {
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
            _2946 = _2833;
            _2948 = _2835;
        }
        else
        {
            float _2963 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
            float _2964 = _2963 * _2678;
            float _2965 = _2963 * _2679;
            float _2966 = _2963 * _2680;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2842 < ((_2840 >> 12u) & 15u))
            {
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _3077 = _2825;
                float _3078 = _2827;
                float _3079 = _2829;
                float _3080 = _2831;
                float _3081 = _2833;
                float _3082 = _2835;
                uint _3083 = _2842;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3093)
                    {
                        frontier_phi_67_pred = _3080;
                        frontier_phi_67_pred_1 = _3081;
                        frontier_phi_67_pred_2 = _3082;
                        frontier_phi_67_pred_3 = _3079;
                        frontier_phi_67_pred_4 = _3078;
                        frontier_phi_67_pred_5 = _3077;
                    }
                    else
                    {
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3290 = _3077;
                        float _3291 = _3078;
                        float _3292 = _3079;
                        float _3293 = _3080;
                        float _3294 = _3081;
                        float _3295 = _3082;
                        uint _3296 = _3092;
                        uint _3297;
                        vec4 _3322;
                        float _3323;
                        vec4 _3338;
                        vec3 _3350;
                        vec4 _3365;
                        vec4 _3380;
                        float _3426;
                        bool _3427;
                        for (;;)
                        {
                            uint _3307 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3296));
                            _3297 = (_3296 + 4294967295u) & _3296;
                            uint _3309 = _3307 * 40u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3323 = _3322.w;
                            uint _3325 = (_3307 * 40u) + 4u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3307 * 40u) + 8u;
                            _3350 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x));
                            uint _3352 = (_3307 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3307 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3307 * 40u) + 24u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3401 = (_3307 * 40u) + 28u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3426 = fma(_2680, _3414.z, fma(_2679, _3414.y, _3414.x * _2678)) + _3414.w;
                            _3427 = !((fma(_2680, _3395.z, fma(_2679, _3395.y, _3395.x * _2678)) + _3395.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3427)
                            {
                                float _3454 = _3322.x - _2678;
                                float _3455 = _3322.y - _2679;
                                float _3456 = _3322.z - _2680;
                                float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                                float _3460 = inversesqrt(_3457);
                                float _3461 = _3460 * _3454;
                                float _3462 = _3460 * _3455;
                                float _3463 = _3460 * _3456;
                                float _3467 = 1.0 - (_3457 / (_3323 * _3323));
                                float _4564 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3472 = sqrt(_3457) * _3338.w;
                                float _3474 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                                float _3475 = _3474 * _3474;
                                float _3478 = ((1.0 - _3475) * dot(vec3(_3461, _3462, _3463), vec3(_949, _952, _955))) + _3475;
                                float _3481 = _3472 * _3472;
                                float _3485 = (fma(_2680, _3365.z, fma(_2679, _3365.y, _3365.x * _2678)) + _3365.w) / _3426;
                                float _3486 = (fma(_2680, _3380.z, fma(_2679, _3380.y, _3380.x * _2678)) + _3380.w) / _3426;
                                float _3490 = 1.0 - dot(vec2(_3485, _3486), vec2(_3485, _3486));
                                float _4580 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3492 = _3491 * (((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3468) / ((_3481 * 0.699999988079071044921875) + 1.0));
                                float _3504 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                                float _3505 = 1.0 - _1024;
                                float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                                float _3513 = _3512 * _3512;
                                float _3514 = _3513 * _3513;
                                float _3515 = _3461 - _2964;
                                float _3516 = _3462 - _2965;
                                float _3517 = _3463 - _2966;
                                float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                                float _3525 = dot(vec3(_949, _952, _955), vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966));
                                float _4591 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3529 = dot(vec3(_949, _952, _955), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                                float _4602 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                                float _3537 = _3474 * _3513;
                                float _3538 = _3537 * _3537;
                                float _3544 = ((1.0 - _3538) * dot(vec3(_949, _952, _955), vec3(_3461, _3462, _3463))) + _3538;
                                float _4613 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3546 = 1.0 - _3513;
                                float _3556 = (0.5 / (((_3545 * ((_3528 * _3546) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3513) * _3528))) * _3545;
                                float _4624 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3566 = (_3491 * _3468) * (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3536 * _3536) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3566 * _3350.x;
                                frontier_phi_73_pred_1 = _3566 * _3350.y;
                                frontier_phi_73_pred_2 = _3492 * _3338.z;
                                frontier_phi_73_pred_3 = _3492 * _3338.y;
                                frontier_phi_73_pred_4 = _3492 * _3338.x;
                                frontier_phi_73_pred_5 = _3566 * _3350.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3570 = frontier_phi_73_pred;
                            _3571 = frontier_phi_73_pred_1;
                            _3575 = frontier_phi_73_pred_2;
                            _3574 = frontier_phi_73_pred_3;
                            _3573 = frontier_phi_73_pred_4;
                            _3572 = frontier_phi_73_pred_5;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            if (_3297 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3297;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3280;
                        frontier_phi_67_pred_1 = _3281;
                        frontier_phi_67_pred_2 = _3282;
                        frontier_phi_67_pred_3 = _3279;
                        frontier_phi_67_pred_4 = _3278;
                        frontier_phi_67_pred_5 = _3277;
                    }
                    _2945 = frontier_phi_67_pred;
                    _2947 = frontier_phi_67_pred_1;
                    _2949 = frontier_phi_67_pred_2;
                    _2943 = frontier_phi_67_pred_3;
                    _2941 = frontier_phi_67_pred_4;
                    _2939 = frontier_phi_67_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2939;
                        _3078 = _2941;
                        _3079 = _2943;
                        _3080 = _2945;
                        _3081 = _2947;
                        _3082 = _2949;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2947;
                frontier_phi_55_56_ladder_1 = _2949;
                frontier_phi_55_56_ladder_2 = _2945;
                frontier_phi_55_56_ladder_3 = _2943;
                frontier_phi_55_56_ladder_4 = _2941;
                frontier_phi_55_56_ladder_5 = _2939;
            }
            else
            {
                frontier_phi_55_56_ladder = _2833;
                frontier_phi_55_56_ladder_1 = _2835;
                frontier_phi_55_56_ladder_2 = _2831;
                frontier_phi_55_56_ladder_3 = _2829;
                frontier_phi_55_56_ladder_4 = _2827;
                frontier_phi_55_56_ladder_5 = _2825;
            }
            _2938 = frontier_phi_55_56_ladder_5;
            _2940 = frontier_phi_55_56_ladder_4;
            _2942 = frontier_phi_55_56_ladder_3;
            _2944 = frontier_phi_55_56_ladder_2;
            _2946 = frontier_phi_55_56_ladder;
            _2948 = frontier_phi_55_56_ladder_1;
        }
        float _2953 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _2737 = (_2953 * _2944) + _2173;
        _2739 = (_2953 * _2946) + _2175;
        _2741 = (_2953 * _2948) + _2177;
        _2743 = ((_2938 * _993) * _2953) + _2518;
        _2745 = ((_2940 * _995) * _2953) + _2520;
        _2747 = ((_2942 * _996) * _2953) + _2522;
    }
    else
    {
        _2737 = _2173;
        _2739 = _2175;
        _2741 = _2177;
        _2743 = _2518;
        _2745 = _2520;
        _2747 = _2522;
    }
    float _4640 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4651 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4662 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    uint _2767 = _968 + 6u;
    float _2775 = _930 / cbSceneParam._m0[86u].x;
    float _2776 = _931 / cbSceneParam._m0[86u].y;
    vec4 _2790 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2792 = _2790.x;
    float _2793 = _2790.y;
    float _2794 = _2790.z;
    float _2795 = _2790.w;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _2850 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _2851 = _2850 / _865;
        float _2862 = _2851 * _915;
        float _2863 = _916 * _2851;
        float _2864 = (-0.0) - _2863;
        float _2866 = _2851 * _917;
        float _2868 = (cbSceneParam._m0[77u].w * _2864) / _2850;
        float _2869 = _2868 + cbSceneParam._m0[79u].w;
        float _2870 = cbSceneParam._m0[79u].w - _2863;
        float _2876 = sqrt(((_2862 * _2862) + (_2863 * _2863)) + (_2866 * _2866));
        float _2879 = (1.0 - (cbSceneParam._m0[77u].w / _2850)) * _2876;
        float _2884 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2886 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2864 - _2868) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2869 > 0.0) ? exp2(_2884 * _2869) : (2.0 - exp2(_2886 * _2869))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2879;
        }
        else
        {
            float _2999 = 1.0 / cbSceneParam._m0[80u].x;
            float _3000 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : max(_2869, _2870));
            float _3001 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : min(_2869, _2870));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            _3039 = ((abs(_2876 / _2864) * cbSceneParam._m0[80u].y) * ((((_3010 - _3011) * 2.0) - ((exp2(_2884 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)))) - exp2(_2884 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))))) * _2999)) - ((exp2(_2886 * _3010) - exp2(_2886 * _3011)) * _2999))) + (_2879 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2795);
        _2888 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2792;
        _2890 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2793;
        _2892 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2794;
        _2894 = _3050 * _2795;
    }
    else
    {
        _2888 = _2792;
        _2890 = _2793;
        _2892 = _2794;
        _2894 = _2795;
    }
    float _2906 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2907 = _2906 == 3.0;
    float _2908 = log2(_2894);
    float _2915 = exp2(_2908 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2737 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1008))) + ((_2743 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1812)) * cbPerFrame._m0[3u].x));
    float _2916 = exp2(_2908 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2739 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1008))) + ((_2745 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1812)) * cbPerFrame._m0[3u].x));
    float _2917 = exp2(_2908 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2741 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1008))) + ((_2747 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1812)) * cbPerFrame._m0[3u].x));
    float _2926 = (_2906 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2926 * (_2907 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.y = _2926 * (_2907 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.z = _2926 * (_2907 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2892)));
    SV_Target.w = cbInstanceData._m0[_2767].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2767].w;
}


