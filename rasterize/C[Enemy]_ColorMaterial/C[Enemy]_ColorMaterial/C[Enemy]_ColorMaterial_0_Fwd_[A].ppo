#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1419;
float _3797;
float _3798;
float _3799;
float _3800;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _284 = _280.z;
    float _297 = exp2(log2((1.0 - _284) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _312 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _320 = log2(0.0);
    float _322 = exp2(_320 * cbMtdParam._m0[23u].x);
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(1.0) ? _323 : (isnan(_323) ? 1.0 : min(_323, 1.0));
    float _333 = exp2(log2(cbMtdParam._m0[23u].y * _284) * cbMtdParam._m0[22u].y);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _356 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(4.0) ? _357 : (isnan(_357) ? 4.0 : min(_357, 4.0));
    float _371 = floor(_358);
    vec4 _374 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _371));
    vec4 _398 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _409 = cbMtdParam._m0[9u].x * _398.x;
    float _410 = cbMtdParam._m0[9u].y * _398.y;
    float _411 = cbMtdParam._m0[9u].z * _398.z;
    float _418 = (((cbMtdParam._m0[10u].x * _374.x) - _409) * _335) + _409;
    float _419 = (((cbMtdParam._m0[10u].y * _374.y) - _410) * _335) + _410;
    float _420 = (((cbMtdParam._m0[10u].z * _374.z) - _411) * _335) + _411;
    float _426 = exp2(log2(_280.w) * cbMtdParam._m0[23u].w);
    vec4 _439 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _458 = (((cbMtdParam._m0[16u].x * _439.x) - _418) * _426) + _418;
    float _459 = (((cbMtdParam._m0[16u].y * _439.y) - _419) * _426) + _419;
    float _460 = (((cbMtdParam._m0[16u].z * _439.z) - _420) * _426) + _420;
    vec4 _473 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _493 = (((cbMtdParam._m0[19u].x * _473.x) - _458) * _324) + _458;
    float _494 = (((cbMtdParam._m0[19u].y * _473.y) - _459) * _324) + _459;
    float _495 = (((cbMtdParam._m0[19u].z * _473.z) - _460) * _324) + _460;
    vec4 _508 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _533 = (_312.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _508.x) - _493) * _299) + _493);
    float _535 = (_312.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _508.y) - _494) * _299) + _494);
    float _537 = (_312.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _508.z) - _495) * _299) + _495);
    float _541 = cbMtdParam._m0[28u].x * TEXCOORD_6;
    float _550 = (_541 - (((texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _541))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3849 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _558 = ((cbMtdParam._m0[21u].x - _533) * _551) + _533;
    float _559 = ((cbMtdParam._m0[21u].y - _535) * _551) + _535;
    float _560 = ((cbMtdParam._m0[21u].z - _537) * _551) + _537;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[28u].w;
    _194[0u] = cbMtdParam._m0[29u].x;
    _193[1u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[31u].x;
    _193[2u] = cbMtdParam._m0[30u].y;
    _194[2u] = cbMtdParam._m0[30u].z;
    _193[3u] = cbMtdParam._m0[29u].w;
    _194[3u] = cbMtdParam._m0[30u].x;
    _193[4u] = cbMtdParam._m0[29u].y;
    _194[4u] = cbMtdParam._m0[29u].z;
    float _602 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    uint _604 = uint(int(isnan(4.0) ? _602 : (isnan(_602) ? 4.0 : min(_602, 4.0))));
    float _611 = ((_194[_604] - cbMtdParam._m0[22u].z) * _335) + cbMtdParam._m0[22u].z;
    float _614 = ((cbMtdParam._m0[22u].w - _611) * _426) + _611;
    float _617 = ((cbMtdParam._m0[25u].x - _614) * _324) + _614;
    float _620 = ((cbMtdParam._m0[26u].x - _617) * _299) + _617;
    float _622 = _620 - (_620 * _541);
    vec4 _638 = texture(sampler2DArray(C_Enemy_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _371));
    vec4 _656 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _664 = cbMtdParam._m0[22u].x + _656.z;
    float _667 = (((_638.z + _193[_604]) - _664) * _335) + _664;
    vec4 _680 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _691 = (((_680.z - _667) + cbMtdParam._m0[28u].y) * _426) + _667;
    float _697 = ((((_284 * 2.0) * _691) - _691) * cbMtdParam._m0[24u].w) + _691;
    vec4 _710 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _721 = (((cbMtdParam._m0[23u].z + _710.z) - _697) * _324) + _697;
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _745 = (((_734.z - _721) + cbMtdParam._m0[26u].y) * _299) + _721;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _775 = ((cbMtdParam._m0[27u].y * _541) * ((_760.z * cbMtdParam._m0[27u].x) - _745)) + _745;
    float _787 = ((_638.x - _658) * _335) + _658;
    float _788 = ((_638.y - _659) * _335) + _659;
    float _793 = ((_680.x - _787) * _426) + _787;
    float _794 = ((_680.y - _788) * _426) + _788;
    float _799 = ((_710.x - _793) * _324) + _793;
    float _800 = ((_710.y - _794) * _324) + _794;
    float _809 = ((((_734.x - _799) * _299) + _799) * 2.0) + (-1.0);
    float _810 = ((((_734.y - _800) * _299) + _800) * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3870 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _816 = sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    float _826 = ((cbMtdParam._m0[25u].y * ((_280.x * 2.0) + (-1.0))) + _809) + ((((_760.x * 2.0) + (-1.0)) * _541) * cbMtdParam._m0[26u].w);
    float _827 = ((cbMtdParam._m0[25u].y * ((_280.y * 2.0) + (-1.0))) + _810) + (((cbMtdParam._m0[28u].x * TEXCOORD_7) * ((_760.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _830 = fma(_816, _229 * NORMAL.x, fma(_827, _236 * TANGENT.x, (_222 * _214) * _826));
    float _833 = fma(_816, _229 * NORMAL.y, fma(_827, _236 * TANGENT.y, (_222 * _215) * _826));
    float _836 = fma(_816, _229 * NORMAL.z, fma(_827, _236 * TANGENT.z, (_222 * _216) * _826));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _3881 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _844 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3903 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3914 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3925 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _848 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _864 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _904);
    float _915 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _904);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _904);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    vec4 _928 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _930 = _928.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1100 = sqrt(((_914 * _914) + (_915 * _915)) + (_916 * _916));
        float _1106 = (cbMatDynParam._m0[5u].x * _1100) + cbMatDynParam._m0[5u].y;
        float _3936 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1111 = (cbMatDynParam._m0[5u].z * _1100) + cbMatDynParam._m0[5u].w;
        float _3947 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) - _1107)) + _1107) < ((_930 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _941 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _942 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _960 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _963 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _966 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _979 = uint(roundEven(NORMAL.w)) * 13u;
    uint _980 = _979 + 9u;
    uint _981 = _980 + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_981].z;
    float _3958 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _993 = 1.0 - _848;
    float _994 = _990 * _993;
    float _995 = _991 * _993;
    float _996 = _992 * _993;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _848;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _848;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _848;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _941, cbSceneParam._m0[86u].y * _942));
    float _1019 = _1016.x * TEXCOORD_3.w;
    float _1020 = dot(vec3(_841, _842, _843), vec3(_921, _922, _923));
    float _1023 = _1020 * 2.0;
    float _1027 = (_1023 * _841) - _921;
    float _1028 = (_1023 * _842) - _922;
    float _1029 = (_1023 * _843) - _923;
    float _1033 = abs(dot(vec3(_921, _922, _923), vec3(_841, _842, _843)));
    float _3991 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1035 = sqrt(_844);
    float _1046 = exp2((_1035 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1035 * 3.0));
    float _1052 = (1.0 - _1046) * ((_1035 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1053 = _1046 * _1035;
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1418;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1143 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1147 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1151 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1176 = _1081 + _841;
        float _1177 = _1085 + _842;
        float _1178 = _1089 + _843;
        float _1188 = fma(_1178, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176)) - _1143;
        float _1189 = fma(_1178, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176)) - _1147;
        float _1190 = fma(_1178, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176)) - _1151;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1143 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1147 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[34u].z) + ((((((_1151 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1246 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1212.x + (-0.5));
        float _1248 = _1246 * (_1212.y + (-0.5));
        float _1249 = _1246 * (_1212.z + (-0.5));
        float _1256 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1219.x + (-0.5));
        float _1258 = _1256 * (_1219.y + (-0.5));
        float _1259 = _1256 * (_1219.z + (-0.5));
        float _1266 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1226.x + (-0.5));
        float _1268 = _1266 * (_1226.y + (-0.5));
        float _1269 = _1266 * (_1226.z + (-0.5));
        float _1276 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1233.x + (-0.5));
        float _1278 = _1276 * (_1233.y + (-0.5));
        float _1279 = _1276 * (_1233.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1300 = (dot(vec3(_841, _842, _843), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1310 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4039 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1312 + 1.0))) + _1317) * _1280;
        float _1327 = _1248 * 0.5;
        float _1328 = _1258 * 0.5;
        float _1329 = _1268 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_841, _842, _843), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4072 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1354 + 1.0))) + _1359) * _1281;
        float _1369 = _1249 * 0.5;
        float _1370 = _1259 * 0.5;
        float _1371 = _1269 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_841, _842, _843), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4105 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1396 + 1.0))) + _1401) * _1282;
        _1418 = _1249;
        _1420 = _1248;
        _1421 = _1247;
        _1422 = _1259;
        _1423 = _1258;
        _1424 = _1257;
        _1425 = _1269;
        _1426 = _1268;
        _1427 = _1267;
        _1428 = _1282;
        _1429 = _1281;
        _1430 = _1280;
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1419;
        _1420 = _1419;
        _1421 = _1419;
        _1422 = _1419;
        _1423 = _1419;
        _1424 = _1419;
        _1425 = _1419;
        _1426 = _1419;
        _1427 = _1419;
        _1428 = _1419;
        _1429 = _1419;
        _1430 = _1419;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1459 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1463 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1467 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1490 = _1081 + _841;
        float _1491 = _1085 + _842;
        float _1492 = _1089 + _843;
        float _1502 = fma(_1492, cbModelParam._m0[30u].z, fma(_1491, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1490)) - _1459;
        float _1503 = fma(_1492, cbModelParam._m0[31u].z, fma(_1491, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1490)) - _1463;
        float _1504 = fma(_1492, cbModelParam._m0[32u].z, fma(_1491, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1490)) - _1467;
        float _1508 = inversesqrt(dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504)));
        float _1521 = ((_1508 * _1502) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1459 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1508 * _1503) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1463 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1508 * _1504) / cbModelParam._m0[35u].z) + ((((((_1467 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        float _1558 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1525.x + (-0.5));
        float _1560 = _1558 * (_1525.y + (-0.5));
        float _1561 = _1558 * (_1525.z + (-0.5));
        float _1568 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1532.x + (-0.5));
        float _1570 = _1568 * (_1532.y + (-0.5));
        float _1571 = _1568 * (_1532.z + (-0.5));
        float _1578 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1539.x + (-0.5));
        float _1580 = _1578 * (_1539.y + (-0.5));
        float _1581 = _1578 * (_1539.z + (-0.5));
        float _1588 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1546.x + (-0.5));
        float _1590 = _1588 * (_1546.y + (-0.5));
        float _1591 = _1588 * (_1546.z + (-0.5));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = _1559 * 0.5;
        float _1596 = _1569 * 0.5;
        float _1597 = _1579 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_841, _842, _843), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4168 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1622 + 1.0))) + _1627) * _1592;
        float _1637 = _1560 * 0.5;
        float _1638 = _1570 * 0.5;
        float _1639 = _1580 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_841, _842, _843), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4201 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1664 + 1.0))) + _1669) * _1593;
        float _1679 = _1561 * 0.5;
        float _1680 = _1571 * 0.5;
        float _1681 = _1581 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_841, _842, _843), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4234 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1706 + 1.0))) + _1711) * _1594;
        _1728 = _1561;
        _1729 = _1560;
        _1730 = _1559;
        _1731 = _1571;
        _1732 = _1570;
        _1733 = _1569;
        _1734 = _1581;
        _1735 = _1580;
        _1736 = _1579;
        _1737 = _1594;
        _1738 = _1593;
        _1739 = _1592;
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
    }
    else
    {
        _1728 = _1419;
        _1729 = _1419;
        _1730 = _1419;
        _1731 = _1419;
        _1732 = _1419;
        _1733 = _1419;
        _1734 = _1419;
        _1735 = _1419;
        _1736 = _1419;
        _1737 = _1419;
        _1738 = _1419;
        _1739 = _1419;
        _1740 = 0.0;
        _1741 = 0.0;
        _1742 = 0.0;
    }
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1431)) + _1431;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1432)) + _1432;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1433)) + _1433;
    float _1775 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1753, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1753, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1753, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1752));
    float _1796 = _1027 * 0.5;
    float _1797 = _1028 * 0.5;
    float _1798 = _1029 * 0.5;
    float _1799 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1802 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1805 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1839;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1812 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1418, _1422, _1425, _1428));
        float _1816 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1820 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1827 = dot(vec4(cbModelParam._m0[39u]), vec4(_1796, _1797, _1798, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1850;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1841 = dot(vec4(cbModelParam._m0[40u]), vec4(_1796, _1797, _1798, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1854 = (_1850 * cbModelParam._m0[1u].x) + (_1839 * (1.0 - cbModelParam._m0[1u].x));
    float _1864 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _844);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1864 : min(cbModelParam._m0[25u].z, _1864));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1029, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027));
        float _1926 = fma(_1029, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027));
        float _1929 = fma(_1029, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1957 = frontier_phi_17_15_ladder;
        }
        float _2160;
        if (_1926 > 0.0)
        {
            _2160 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2160 = frontier_phi_26_22_ladder;
        }
        float _2414;
        if (_1929 > 0.0)
        {
            _2414 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2414 = frontier_phi_38_33_ladder;
        }
        float _2416 = isnan(_2160) ? _1957 : (isnan(_1957) ? _2160 : min(_1957, _2160));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1923) + _1912;
        float _2422 = (_2417 * _1926) + _1916;
        float _2423 = (_2417 * _1929) + _1920;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1865);
            frontier_phi_16_38_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_16_38_ladder_2;
        _1947 = frontier_phi_16_38_ladder_1;
        _1949 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1027, _1028, _1029), _1865);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _844);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1029, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027));
        float _2022 = fma(_1029, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027));
        float _2025 = fma(_1029, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027));
        float _2165;
        if (_2019 > 0.0)
        {
            _2165 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2165 = frontier_phi_28_24_ladder;
        }
        float _2441;
        if (_2022 > 0.0)
        {
            _2441 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2441 = frontier_phi_40_35_ladder;
        }
        float _2654;
        if (_2025 > 0.0)
        {
            _2654 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2654 = frontier_phi_49_46_ladder;
        }
        float _2656 = isnan(_2441) ? _2165 : (isnan(_2165) ? _2441 : min(_2165, _2441));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _2019) + _2008;
        float _2662 = (_2657 * _2022) + _2012;
        float _2663 = (_2657 * _2025) + _2016;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_25_49_ladder = _2862.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2862.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2862.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_25_49_ladder_2;
        _2046 = frontier_phi_25_49_ladder_1;
        _2048 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1027, _1028, _1029), _1954);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1052 * _1004) + _1053) * _1019) * ((cbModelParam._m0[1u].w * (_2044 - _1945)) + _1945);
    float _2063 = (((_1052 * _1006) + _1053) * _1019) * ((cbModelParam._m0[1u].w * (_2046 - _1947)) + _1947);
    float _2065 = (((_1052 * _1007) + _1053) * _1019) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_979 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _1019 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2119 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2123 = _2086 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_841, _842, _843));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_841, _842, _843));
    float _4370 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4381 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2103].x * _2109) * _2144) + ((cbLight._m0[_2113].x * _2119) * _2142);
    float _2152 = ((_2109 * cbLight._m0[_2103].y) * _2144) + ((_2119 * cbLight._m0[_2113].y) * _2142);
    float _2153 = ((_2109 * cbLight._m0[_2103].z) * _2144) + ((_2119 * cbLight._m0[_2113].z) * _2142);
    uvec4 _2157 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2159 = _2157.x == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2159)
    {
        _2170 = _2151;
        _2172 = _2152;
        _2174 = _2153;
    }
    else
    {
        uint _2178 = _2086 + 6u;
        float _2194 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4392 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2197 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2170 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _2151;
        _2172 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _2152;
        _2174 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _2153;
    }
    bool _2177 = _2157.y == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2177)
    {
        _2215 = _2170;
        _2217 = _2172;
        _2219 = _2174;
    }
    else
    {
        uint _2385 = _2086 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4408 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2404 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2215 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2170;
        _2217 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2172;
        _2219 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2174;
    }
    uint _2222 = _2086 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _844) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2086].x + _921;
    float _2238 = cbLight._m0[_2086].y + _922;
    float _2239 = cbLight._m0[_2086].z + _923;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2086].xyz));
    float _4424 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _2251 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2252 = dot(vec3(_841, _842, _843), vec3(_2244, _2245, _2246));
    float _4446 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2244, _2245, _2246));
    float _4457 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2273 = 0.959999978542327880859375 - _1001;
    float _2275 = 0.959999978542327880859375 - _1002;
    float _2276 = 0.959999978542327880859375 - _1003;
    float _2283 = 1.0 - _2236;
    float _2294 = (0.5 / (((_2251 * ((_2250 * _2283) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2283) + _2236) * _2250))) * _2250;
    float _4468 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2307 = _2086 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _844) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2123].x + _921;
    float _2321 = cbLight._m0[_2123].y + _922;
    float _2322 = cbLight._m0[_2123].z + _923;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2123].xyz));
    float _4479 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2334 = dot(vec3(_841, _842, _843), vec3(_2327, _2328, _2329));
    float _4490 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2327, _2328, _2329));
    float _4501 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2360 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2251 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2360) + _2319) * _2333))) * _2333;
    float _4512 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2382 = (((((_2353 * _2273) + _1004) * cbLight._m0[_2307].x) * _2372) * _2109) + (((((_2272 * _2273) + _1004) * cbLight._m0[_2222].x) * _2296) * _2119);
    float _2383 = (((((_2353 * _2275) + _1006) * cbLight._m0[_2307].y) * _2372) * _2109) + (((((_2272 * _2275) + _1006) * cbLight._m0[_2222].y) * _2296) * _2119);
    float _2384 = (((((_2353 * _2276) + _1007) * cbLight._m0[_2307].z) * _2372) * _2109) + (((((_2272 * _2276) + _1007) * cbLight._m0[_2222].z) * _2296) * _2119);
    float _2446;
    float _2448;
    float _2450;
    if (_2159)
    {
        _2446 = _2382;
        _2448 = _2383;
        _2450 = _2384;
    }
    else
    {
        uint _2452 = _2086 + 2u;
        uint _2456 = _2086 + 10u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _844) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _921;
        float _2473 = cbLight._m0[_2452].y + _922;
        float _2474 = cbLight._m0[_2452].z + _923;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2452].xyz));
        float _4523 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2486 = dot(vec3(_841, _842, _843), vec3(_2479, _2480, _2481));
        float _4534 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4545 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2512 = 1.0 - _2471;
        float _2522 = (0.5 / (((_2251 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2512) + _2471) * _2485))) * _2485;
        float _4556 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2446 = (((((_2505 * _2273) + _1004) * cbLight._m0[_2456].x) * _2524) * _2525) + _2382;
        _2448 = (((((_2505 * _2275) + _1006) * cbLight._m0[_2456].y) * _2524) * _2525) + _2383;
        _2450 = (((((_2505 * _2276) + _1007) * cbLight._m0[_2456].z) * _2524) * _2525) + _2384;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2177)
    {
        _2560 = _2446;
        _2562 = _2448;
        _2564 = _2450;
    }
    else
    {
        uint _2571 = _2086 + 3u;
        uint _2575 = _2086 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _844) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _921;
        float _2592 = cbLight._m0[_2571].y + _922;
        float _2593 = cbLight._m0[_2571].z + _923;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2571].xyz));
        float _4572 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2605 = dot(vec3(_841, _842, _843), vec3(_2598, _2599, _2600));
        float _4583 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4594 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
        float _2631 = 1.0 - _2590;
        float _2641 = (0.5 / (((_2251 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2631) + _2590) * _2604))) * _2604;
        float _4605 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2643 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2644 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2560 = (((((_2624 * _2273) + _1004) * cbLight._m0[_2575].x) * _2643) * _2644) + _2446;
        _2562 = (((((_2624 * _2275) + _1006) * cbLight._m0[_2575].y) * _2643) * _2644) + _2448;
        _2564 = (((((_2624 * _2276) + _1007) * cbLight._m0[_2575].z) * _2643) * _2644) + _2450;
    }
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_2084.y == 0u)
    {
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2719;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2719;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2719;
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.x;
        uint _2746 = uint((float(_2734.y) * floor(float(uint(cbSceneParam._m0[85u].y * _942) / _2735))) + floor(float(uint(cbSceneParam._m0[85u].x * _941) / _2735)));
        float _2756 = (log2(_2722 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2757 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        uint _2760 = uint(isnan(14.0) ? _2757 : (isnan(_2757) ? 14.0 : min(_2757, 14.0)));
        uvec4 _2765 = texelFetch(g_lightClusterGridBuffer, int(((_2760 << 2u) + (_2746 << 6u)) >> 2u));
        uint _2766 = _2765.x;
        uint _2767 = _2734.z;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((((1u << ((_2767 >> 4u) & 15u)) + 4294967295u) & _2766) == 0u) || ((_2767 & 240u) == 0u))
        {
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
        }
        else
        {
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3036)
                {
                    frontier_phi_66_pred = _3020;
                    frontier_phi_66_pred_1 = _3025;
                    frontier_phi_66_pred_2 = _3024;
                    frontier_phi_66_pred_3 = _3023;
                    frontier_phi_66_pred_4 = _3022;
                    frontier_phi_66_pred_5 = _3021;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3035;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3026 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _2720;
                        float _3232 = _3191.y - _2721;
                        float _3233 = _3191.z - _2722;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_960, _963, _966), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4631 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _2720;
                        float _3267 = (-0.0) - _2721;
                        float _3268 = (-0.0) - _2722;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3283 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _1035;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3273 + _3238;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_960, _963, _966), vec3(_3273, _3274, _3275));
                        float _4647 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3308 = dot(vec3(_960, _963, _966), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4658 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3251 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3241) + _3317;
                        float _4669 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4680 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3315 * _3315) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3095 = (_3262 * _3210.x) + _3168;
                        _3096 = (_3262 * _3210.y) + _3169;
                        _3097 = (_3262 * _3210.z) + _3170;
                        _3092 = (_3343 * _3227.x) + _3165;
                        _3093 = (_3343 * _3227.y) + _3166;
                        _3094 = (_3343 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_66_pred = _3092;
                    frontier_phi_66_pred_1 = _3097;
                    frontier_phi_66_pred_2 = _3096;
                    frontier_phi_66_pred_3 = _3095;
                    frontier_phi_66_pred_4 = _3094;
                    frontier_phi_66_pred_5 = _3093;
                }
                _2868 = frontier_phi_66_pred;
                _2878 = frontier_phi_66_pred_1;
                _2876 = frontier_phi_66_pred_2;
                _2874 = frontier_phi_66_pred_3;
                _2872 = frontier_phi_66_pred_4;
                _2870 = frontier_phi_66_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2868;
                    _3021 = _2870;
                    _3022 = _2872;
                    _3023 = _2874;
                    _3024 = _2876;
                    _3025 = _2878;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
        }
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.z;
        uint _2884 = (_2882 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2884) & _2766) == 0u)
        {
            _2988 = _2867;
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
            float _3014 = _3013 * _2720;
            float _3015 = _3013 * _2721;
            float _3016 = _3013 * _2722;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2884 < ((_2882 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3148 = _2867;
                float _3149 = _2869;
                float _3150 = _2871;
                float _3151 = _2873;
                float _3152 = _2875;
                float _3153 = _2877;
                uint _3154 = _2884;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3164)
                    {
                        frontier_phi_77_pred = _3153;
                        frontier_phi_77_pred_1 = _3152;
                        frontier_phi_77_pred_2 = _3151;
                        frontier_phi_77_pred_3 = _3150;
                        frontier_phi_77_pred_4 = _3149;
                        frontier_phi_77_pred_5 = _3148;
                    }
                    else
                    {
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        uint _3376 = _3163;
                        uint _3377;
                        vec4 _3402;
                        float _3403;
                        vec4 _3418;
                        vec3 _3430;
                        vec4 _3445;
                        vec4 _3460;
                        float _3506;
                        bool _3507;
                        for (;;)
                        {
                            uint _3387 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3376));
                            _3377 = (_3376 + 4294967295u) & _3376;
                            uint _3389 = _3387 * 40u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3403 = _3402.w;
                            uint _3405 = (_3387 * 40u) + 4u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3387 * 40u) + 8u;
                            _3430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x));
                            uint _3432 = (_3387 * 40u) + 16u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3387 * 40u) + 20u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3387 * 40u) + 24u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3481 = (_3387 * 40u) + 28u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3506 = fma(_2722, _3494.z, fma(_2721, _3494.y, _3494.x * _2720)) + _3494.w;
                            _3507 = !((fma(_2722, _3475.z, fma(_2721, _3475.y, _3475.x * _2720)) + _3475.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3507)
                            {
                                float _3534 = _3402.x - _2720;
                                float _3535 = _3402.y - _2721;
                                float _3536 = _3402.z - _2722;
                                float _3537 = dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536));
                                float _3540 = inversesqrt(_3537);
                                float _3541 = _3540 * _3534;
                                float _3542 = _3540 * _3535;
                                float _3543 = _3540 * _3536;
                                float _3547 = 1.0 - (_3537 / (_3403 * _3403));
                                float _4691 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3552 = sqrt(_3537) * _3418.w;
                                float _3554 = 1.39999997615814208984375 / (_3552 + 1.39999997615814208984375);
                                float _3555 = _3554 * _3554;
                                float _3558 = ((1.0 - _3555) * dot(vec3(_3541, _3542, _3543), vec3(_960, _963, _966))) + _3555;
                                float _3561 = _3552 * _3552;
                                float _3565 = (fma(_2722, _3445.z, fma(_2721, _3445.y, _3445.x * _2720)) + _3445.w) / _3506;
                                float _3566 = (fma(_2722, _3460.z, fma(_2721, _3460.y, _3460.x * _2720)) + _3460.w) / _3506;
                                float _3570 = 1.0 - dot(vec2(_3565, _3566), vec2(_3565, _3566));
                                float _4707 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3572 = _3571 * (((isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))) * _3548) / ((_3561 * 0.699999988079071044921875) + 1.0));
                                float _3584 = exp2(log2(1.0 / ((_3561 * 3.5) + 5.0)) * 0.25);
                                float _3585 = 1.0 - _1035;
                                float _3592 = sqrt(1.0 - ((1.0 - (_3585 * _3585)) * (1.0 - (_3584 * _3584))));
                                float _3593 = _3592 * _3592;
                                float _3594 = _3593 * _3593;
                                float _3595 = _3541 - _3014;
                                float _3596 = _3542 - _3015;
                                float _3597 = _3543 - _3016;
                                float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                                float _3605 = dot(vec3(_960, _963, _966), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4718 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3609 = dot(vec3(_960, _963, _966), vec3(_3601 * _3595, _3601 * _3596, _3601 * _3597));
                                float _4729 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3616 = ((_3612 * _3612) * (_3594 + (-1.0))) + 1.0;
                                float _3617 = _3554 * _3593;
                                float _3618 = _3617 * _3617;
                                float _3624 = ((1.0 - _3618) * dot(vec3(_960, _963, _966), vec3(_3541, _3542, _3543))) + _3618;
                                float _4740 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3626 = 1.0 - _3593;
                                float _3636 = (0.5 / (((_3625 * ((_3608 * _3626) + _3593)) + 9.9999999392252902907785028219223e-09) + (((_3625 * _3626) + _3593) * _3608))) * _3625;
                                float _4751 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3646 = (_3571 * _3548) * (((_3594 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3616 * _3616) * ((_3561 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3572 * _3418.y;
                                frontier_phi_83_pred_1 = _3572 * _3418.x;
                                frontier_phi_83_pred_2 = _3646 * _3430.z;
                                frontier_phi_83_pred_3 = _3646 * _3430.y;
                                frontier_phi_83_pred_4 = _3646 * _3430.x;
                                frontier_phi_83_pred_5 = _3572 * _3418.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3654 = frontier_phi_83_pred;
                            _3653 = frontier_phi_83_pred_1;
                            _3652 = frontier_phi_83_pred_2;
                            _3651 = frontier_phi_83_pred_3;
                            _3650 = frontier_phi_83_pred_4;
                            _3655 = frontier_phi_83_pred_5;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            if (_3377 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3377;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3362;
                        frontier_phi_77_pred_1 = _3361;
                        frontier_phi_77_pred_2 = _3360;
                        frontier_phi_77_pred_3 = _3359;
                        frontier_phi_77_pred_4 = _3358;
                        frontier_phi_77_pred_5 = _3357;
                    }
                    _2999 = frontier_phi_77_pred;
                    _2997 = frontier_phi_77_pred_1;
                    _2995 = frontier_phi_77_pred_2;
                    _2993 = frontier_phi_77_pred_3;
                    _2991 = frontier_phi_77_pred_4;
                    _2989 = frontier_phi_77_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _2989;
                        _3149 = _2991;
                        _3150 = _2993;
                        _3151 = _2995;
                        _3152 = _2997;
                        _3153 = _2999;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2993;
                frontier_phi_58_59_ladder_1 = _2999;
                frontier_phi_58_59_ladder_2 = _2997;
                frontier_phi_58_59_ladder_3 = _2995;
                frontier_phi_58_59_ladder_4 = _2991;
                frontier_phi_58_59_ladder_5 = _2989;
            }
            else
            {
                frontier_phi_58_59_ladder = _2871;
                frontier_phi_58_59_ladder_1 = _2877;
                frontier_phi_58_59_ladder_2 = _2875;
                frontier_phi_58_59_ladder_3 = _2873;
                frontier_phi_58_59_ladder_4 = _2869;
                frontier_phi_58_59_ladder_5 = _2867;
            }
            _2988 = frontier_phi_58_59_ladder_5;
            _2990 = frontier_phi_58_59_ladder_4;
            _2992 = frontier_phi_58_59_ladder;
            _2994 = frontier_phi_58_59_ladder_3;
            _2996 = frontier_phi_58_59_ladder_2;
            _2998 = frontier_phi_58_59_ladder_1;
        }
        float _3003 = isnan(1.0) ? _1019 : (isnan(_1019) ? 1.0 : min(_1019, 1.0));
        _2779 = (_3003 * _2994) + _2215;
        _2781 = (_3003 * _2996) + _2217;
        _2783 = (_3003 * _2998) + _2219;
        _2785 = ((_2988 * _1004) * _3003) + _2560;
        _2787 = ((_2990 * _1006) * _3003) + _2562;
        _2789 = ((_2992 * _1007) * _3003) + _2564;
    }
    else
    {
        _2779 = _2215;
        _2781 = _2217;
        _2783 = _2219;
        _2785 = _2560;
        _2787 = _2562;
        _2789 = _2564;
    }
    float _4767 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4778 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4789 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2806 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2779 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1019))) + ((_2785 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1854)) * cbPerFrame._m0[3u].x);
    float _2807 = ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2781 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1019))) + ((_2787 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1854)) * cbPerFrame._m0[3u].x);
    float _2808 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2783 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1019))) + ((_2789 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1854)) * cbPerFrame._m0[3u].x);
    uint _2809 = _979 + 6u;
    float _2817 = _941 / cbSceneParam._m0[86u].x;
    float _2818 = _942 / cbSceneParam._m0[86u].y;
    vec4 _2832 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2817, _2818, (log2((isnan(cbSceneParam._m0[77u].w) ? _864 : (isnan(_864) ? cbSceneParam._m0[77u].w : min(_864, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2834 = _2832.x;
    float _2835 = _2832.y;
    float _2836 = _2832.z;
    float _2837 = _2832.w;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_864 > cbSceneParam._m0[78u].w)
    {
        float _2892 = isnan(_864) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _864 : min(cbSceneParam._m0[80u].w, _864));
        float _2893 = _2892 / _864;
        float _2904 = _2893 * _914;
        float _2905 = _915 * _2893;
        float _2906 = (-0.0) - _2905;
        float _2908 = _2893 * _916;
        float _2910 = (cbSceneParam._m0[77u].w * _2906) / _2892;
        float _2911 = _2910 + cbSceneParam._m0[79u].w;
        float _2912 = cbSceneParam._m0[79u].w - _2905;
        float _2918 = sqrt(((_2904 * _2904) + (_2905 * _2905)) + (_2908 * _2908));
        float _2921 = (1.0 - (cbSceneParam._m0[77u].w / _2892)) * _2918;
        float _2926 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2928 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3105;
        if (abs((_2906 - _2910) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3105 = ((((_2911 > 0.0) ? exp2(_2926 * _2911) : (2.0 - exp2(_2928 * _2911))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2921;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : max(_2911, _2912));
            float _3051 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : min(_2911, _2912));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3105 = ((abs(_2918 / _2906) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2926 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2926 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2928 * _3060) - exp2(_2928 * _3061)) * _3049))) + (_2921 * cbSceneParam._m0[80u].z);
        }
        vec4 _3107 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2817, _2818, 1.0), 0.0);
        float _3116 = exp2((_3105 * (-1.44269502162933349609375)) * (1.0 - _3107.w));
        float _3117 = log2(_3116);
        float _3133 = log2(_2837);
        _2930 = (exp2(_3133 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].x)) * _3107.x) / cbSceneParam._m0[78u].x)) + _2834;
        _2932 = (exp2(_3133 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].y)) * _3107.y) / cbSceneParam._m0[78u].y)) + _2835;
        _2934 = (exp2(_3133 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].z)) * _3107.z) / cbSceneParam._m0[78u].z)) + _2836;
        _2936 = _3116 * _2837;
    }
    else
    {
        _2930 = _2834;
        _2932 = _2835;
        _2934 = _2836;
        _2936 = _2837;
    }
    bool _3143;
    vec4 _2946;
    vec4 _2968;
    float _2970;
    float _2974;
    float _2975;
    float _2976;
    float _2977;
    bool _2987;
    for (;;)
    {
        _2946 = cbMatDynParam._m0[0u];
        float _2948 = roundEven(_2946.y);
        bool _2949 = _2948 == 3.0;
        float _2950 = log2(_2936);
        float _2957 = exp2(_2950 * cbSceneParam._m0[78u].x) * _2806;
        float _2958 = exp2(_2950 * cbSceneParam._m0[78u].y) * _2807;
        float _2959 = exp2(_2950 * cbSceneParam._m0[78u].z) * _2808;
        float _2966 = _930 + (-0.5);
        _2968 = cbMtdParam._m0[1u];
        _2970 = _2968.y * _2966;
        float _2973 = (_2948 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2974 = _2973 * (_2949 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2930)));
        _2975 = _2973 * (_2949 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2932)));
        _2976 = _2973 * (_2949 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2934)));
        _2977 = _2966 * 0.999000012874603271484375;
        _2987 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2987)
        {
            if ((cbInstanceData._m0[_979 + 7u].x + _2977) < 0.5)
            {
                _3143 = true;
                break;
            }
        }
        uint _3084 = _980 + uint(_2946.w);
        if ((cbInstanceData._m0[_3084].w < 1.0) && ((cbInstanceData._m0[_3084].w + _2977) < 0.5))
        {
            _3143 = true;
            break;
        }
        if ((_2970 + 1.0) < _2968.x)
        {
            _3143 = true;
            break;
        }
        _3143 = false;
        break;
    }
    float _3348;
    if (_3143)
    {
        discard_state = true;
        _3348 = 0.0;
    }
    else
    {
        _3348 = cbInstanceData._m0[_2809].w;
    }
    SV_Target.x = _2974;
    SV_Target.y = _2975;
    SV_Target.z = _2976;
    SV_Target.w = _3348;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2809].w;
    discard_exit();
}


