#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _983;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _251 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = ((_234.x * 4.55000019073486328125) * _251.x) * cbMtdParam._m0[9u].x;
    float _268 = ((_234.y * 4.55000019073486328125) * _251.y) * cbMtdParam._m0[9u].y;
    float _271 = ((_234.z * 4.55000019073486328125) * _251.z) * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _287 = _283.z;
    float _293 = exp2(log2(_287 * 22.0) * 260.0);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    vec4 _313 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _325 = ((((isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0))) * (_287 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[11u].x + _313.z);
    float _343 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3401 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _349 = (_344 * _344) * (3.0 - (_344 * 2.0));
    vec4 _361 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _369 = (_283.x * 2.0) + (-1.0);
    float _370 = (_283.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3412 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _376 = sqrt(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))));
    float _383 = (cbMtdParam._m0[11u].y * ((_313.x * 2.0) + (-1.0))) + _369;
    float _384 = (cbMtdParam._m0[11u].y * ((_313.y * 2.0) + (-1.0))) + _370;
    float _387 = fma(_376, _210 * NORMAL.x, fma(_384, _217 * TANGENT.x, (_203 * _195) * _383));
    float _390 = fma(_376, _210 * NORMAL.y, fma(_384, _217 * TANGENT.y, (_203 * _196) * _383));
    float _393 = fma(_376, _210 * NORMAL.z, fma(_384, _217 * TANGENT.z, (_203 * _197) * _383));
    float _397 = inversesqrt(dot(vec3(_387, _390, _393), vec3(_387, _390, _393)));
    float _398 = _397 * _387;
    float _399 = _397 * _390;
    float _400 = _397 * _393;
    float _3423 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _401 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3445 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3456 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _420 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _471 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _461);
    float _472 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _461);
    float _473 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _461);
    float _477 = inversesqrt(dot(vec3(_471, _472, _473), vec3(_471, _472, _473)));
    float _478 = _471 * _477;
    float _479 = _472 * _477;
    float _480 = _473 * _477;
    float _486 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _487 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _489 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _491 = _489.w;
    float _512 = fma(_400, cbSceneParam._m0[5u].z, fma(_399, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _398));
    float _515 = fma(_400, cbSceneParam._m0[6u].z, fma(_399, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _398));
    float _518 = fma(_400, cbSceneParam._m0[7u].z, fma(_399, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _398));
    vec4 _520 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _531 = (((_520.y - _401) + (_520.w * _401)) * cbMtdParam._m0[3u].x) + _401;
    uint _544 = uint(roundEven(NORMAL.w)) * 13u;
    uint _545 = _544 + 9u;
    uint _546 = _545 + uint(cbMatDynParam._m0[0u].w);
    float _552 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_546].x;
    float _553 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_546].y;
    float _554 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_546].z;
    float _3467 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    vec4 _558 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _563 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _569 = cbMtdParam._m0[3u].x * _563.x;
    float _582 = (cbMtdParam._m0[3u].x * (((_555 * _491) - _555) + _558.x)) + _555;
    float _583 = (cbMtdParam._m0[3u].x * (((_556 * _491) - _556) + _558.y)) + _556;
    float _584 = (cbMtdParam._m0[3u].x * (((_557 * _491) - _557) + _558.z)) + _557;
    float _585 = 1.0 - _569;
    float _586 = _582 * _585;
    float _587 = _583 * _585;
    float _588 = _584 * _585;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _569;
    float _594 = (_583 + (-0.039999999105930328369140625)) * _569;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _569;
    float _596 = _593 + 0.039999999105930328369140625;
    float _598 = _594 + 0.039999999105930328369140625;
    float _599 = _595 + 0.039999999105930328369140625;
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _486, cbSceneParam._m0[86u].y * _487));
    float _611 = _608.x * TEXCOORD_4;
    float _612 = dot(vec3(_398, _399, _400), vec3(_478, _479, _480));
    float _615 = _612 * 2.0;
    float _619 = (_615 * _398) - _478;
    float _620 = (_615 * _399) - _479;
    float _621 = (_615 * _400) - _480;
    float _625 = abs(dot(vec3(_478, _479, _480), vec3(_398, _399, _400)));
    float _3500 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _627 = sqrt(_531);
    float _639 = exp2((_627 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_627 * 3.0));
    float _645 = (1.0 - _639) * ((_627 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _646 = _639 * _627;
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _982;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = fma(_682, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674));
        float _713 = fma(_682, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674));
        float _717 = fma(_682, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674));
        float _740 = _674 + _398;
        float _741 = _678 + _399;
        float _742 = _682 + _400;
        float _752 = fma(_742, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) - _709;
        float _753 = fma(_742, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) - _713;
        float _754 = fma(_742, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) - _717;
        float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
        float _771 = ((_758 * _752) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_709 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_758 * _753) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_713 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_758 * _754) / cbModelParam._m0[34u].z) + ((((((_717 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _810 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_776.x + (-0.5));
        float _812 = _810 * (_776.y + (-0.5));
        float _813 = _810 * (_776.z + (-0.5));
        float _820 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_783.x + (-0.5));
        float _822 = _820 * (_783.y + (-0.5));
        float _823 = _820 * (_783.z + (-0.5));
        float _830 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_790.x + (-0.5));
        float _832 = _830 * (_790.y + (-0.5));
        float _833 = _830 * (_790.z + (-0.5));
        float _840 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_797.x + (-0.5));
        float _842 = _840 * (_797.y + (-0.5));
        float _843 = _840 * (_797.z + (-0.5));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = _811 * 0.5;
        float _848 = _821 * 0.5;
        float _849 = _831 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _864 = (dot(vec3(_398, _399, _400), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _874 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3548 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_876 + 1.0))) + _881) * _844;
        float _891 = _812 * 0.5;
        float _892 = _822 * 0.5;
        float _893 = _832 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_398, _399, _400), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3581 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_918 + 1.0))) + _923) * _845;
        float _933 = _813 * 0.5;
        float _934 = _823 * 0.5;
        float _935 = _833 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_398, _399, _400), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3614 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_960 + 1.0))) + _965) * _846;
        _982 = _813;
        _984 = _812;
        _985 = _811;
        _986 = _823;
        _987 = _822;
        _988 = _821;
        _989 = _833;
        _990 = _832;
        _991 = _831;
        _992 = _846;
        _993 = _845;
        _994 = _844;
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
    }
    else
    {
        _982 = _983;
        _984 = _983;
        _985 = _983;
        _986 = _983;
        _987 = _983;
        _988 = _983;
        _989 = _983;
        _990 = _983;
        _991 = _983;
        _992 = _983;
        _993 = _983;
        _994 = _983;
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
    }
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1023 = fma(_682, cbModelParam._m0[30u].z, fma(_678, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _674));
        float _1027 = fma(_682, cbModelParam._m0[31u].z, fma(_678, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _674));
        float _1031 = fma(_682, cbModelParam._m0[32u].z, fma(_678, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _674));
        float _1054 = _674 + _398;
        float _1055 = _678 + _399;
        float _1056 = _682 + _400;
        float _1066 = fma(_1056, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054)) - _1023;
        float _1067 = fma(_1056, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054)) - _1027;
        float _1068 = fma(_1056, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054)) - _1031;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1023 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1027 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[35u].z) + ((((((_1031 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1122 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1089.x + (-0.5));
        float _1124 = _1122 * (_1089.y + (-0.5));
        float _1125 = _1122 * (_1089.z + (-0.5));
        float _1132 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1096.x + (-0.5));
        float _1134 = _1132 * (_1096.y + (-0.5));
        float _1135 = _1132 * (_1096.z + (-0.5));
        float _1142 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1103.x + (-0.5));
        float _1144 = _1142 * (_1103.y + (-0.5));
        float _1145 = _1142 * (_1103.z + (-0.5));
        float _1152 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1110.x + (-0.5));
        float _1154 = _1152 * (_1110.y + (-0.5));
        float _1155 = _1152 * (_1110.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_398, _399, _400), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3677 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1186 + 1.0))) + _1191) * _1156;
        float _1201 = _1124 * 0.5;
        float _1202 = _1134 * 0.5;
        float _1203 = _1144 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_398, _399, _400), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3710 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1228 + 1.0))) + _1233) * _1157;
        float _1243 = _1125 * 0.5;
        float _1244 = _1135 * 0.5;
        float _1245 = _1145 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_398, _399, _400), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3743 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1270 + 1.0))) + _1275) * _1158;
        _1292 = _1125;
        _1293 = _1124;
        _1294 = _1123;
        _1295 = _1135;
        _1296 = _1134;
        _1297 = _1133;
        _1298 = _1145;
        _1299 = _1144;
        _1300 = _1143;
        _1301 = _1158;
        _1302 = _1157;
        _1303 = _1156;
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _983;
        _1293 = _983;
        _1294 = _983;
        _1295 = _983;
        _1296 = _983;
        _1297 = _983;
        _1298 = _983;
        _1299 = _983;
        _1300 = _983;
        _1301 = _983;
        _1302 = _983;
        _1303 = _983;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1339 = fma(_1318, cbSceneParam._m0[89u].z, fma(_1317, cbSceneParam._m0[89u].y, _1316 * cbSceneParam._m0[89u].x));
    float _1342 = fma(_1318, cbSceneParam._m0[90u].z, fma(_1317, cbSceneParam._m0[90u].y, _1316 * cbSceneParam._m0[90u].x));
    float _1345 = fma(_1318, cbSceneParam._m0[91u].z, fma(_1317, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1316));
    float _1360 = _619 * 0.5;
    float _1361 = _620 * 0.5;
    float _1362 = _621 * 0.5;
    float _1363 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1366 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1369 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1403;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1376 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_982, _986, _989, _992));
        float _1380 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_984, _987, _990, _993));
        float _1384 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_985, _988, _991, _994));
        float _1391 = dot(vec4(cbModelParam._m0[39u]), vec4(_1360, _1361, _1362, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1414;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1405 = dot(vec4(cbModelParam._m0[40u]), vec4(_1360, _1361, _1362, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1418 = (_1414 * cbModelParam._m0[1u].x) + (_1403 * (1.0 - cbModelParam._m0[1u].x));
    float _1428 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _531);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1428 : min(cbModelParam._m0[25u].z, _1428));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1478 = fma(_682, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674)) + cbModelParam._m0[13u].w;
        float _1482 = fma(_682, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674)) + cbModelParam._m0[14u].w;
        float _1486 = fma(_682, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674)) + cbModelParam._m0[15u].w;
        float _1489 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1492 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1495 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1523;
        if (_1489 > 0.0)
        {
            _1523 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1523 = frontier_phi_14_12_ladder;
        }
        float _1728;
        if (_1492 > 0.0)
        {
            _1728 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1728 = frontier_phi_23_19_ladder;
        }
        float _1982;
        if (_1495 > 0.0)
        {
            _1982 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1982 = frontier_phi_35_30_ladder;
        }
        float _1984 = isnan(_1728) ? _1523 : (isnan(_1523) ? _1728 : min(_1523, _1728));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1489) + _1478;
        float _1990 = (_1985 * _1492) + _1482;
        float _1991 = (_1985 * _1495) + _1486;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1429);
            frontier_phi_13_35_ladder = _2119.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2119.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2119.x * cbModelParam._m0[1u].y;
        }
        _1511 = frontier_phi_13_35_ladder_2;
        _1513 = frontier_phi_13_35_ladder_1;
        _1515 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1429);
        _1511 = _1499.x * cbModelParam._m0[1u].y;
        _1513 = _1499.y * cbModelParam._m0[1u].y;
        _1515 = _1499.z * cbModelParam._m0[1u].y;
    }
    float _1519 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _531);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1519 : min(cbModelParam._m0[25u].w, _1519));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1576 = fma(_682, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674)) + cbModelParam._m0[21u].w;
        float _1580 = fma(_682, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674)) + cbModelParam._m0[22u].w;
        float _1584 = fma(_682, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674)) + cbModelParam._m0[23u].w;
        float _1587 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1590 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1593 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1733;
        if (_1587 > 0.0)
        {
            _1733 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1733 = frontier_phi_25_21_ladder;
        }
        float _2009;
        if (_1590 > 0.0)
        {
            _2009 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2009 = frontier_phi_37_32_ladder;
        }
        float _2222;
        if (_1593 > 0.0)
        {
            _2222 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2222 = frontier_phi_46_43_ladder;
        }
        float _2224 = isnan(_2009) ? _1733 : (isnan(_1733) ? _2009 : min(_1733, _2009));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1587) + _1576;
        float _2230 = (_2225 * _1590) + _1580;
        float _2231 = (_2225 * _1593) + _1584;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2231, cbModelParam._m0[17u].z, fma(_2230, cbModelParam._m0[17u].y, _2229 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2231, cbModelParam._m0[18u].z, fma(_2230, cbModelParam._m0[18u].y, _2229 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2231, cbModelParam._m0[19u].z, fma(_2230, cbModelParam._m0[19u].y, _2229 * cbModelParam._m0[19u].x))), _1520);
            frontier_phi_22_46_ladder = _2495.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2495.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2495.x * cbModelParam._m0[1u].z;
        }
        _1612 = frontier_phi_22_46_ladder_2;
        _1614 = frontier_phi_22_46_ladder_1;
        _1616 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1520);
        _1612 = _1596.x * cbModelParam._m0[1u].z;
        _1614 = _1596.y * cbModelParam._m0[1u].z;
        _1616 = _1596.z * cbModelParam._m0[1u].z;
    }
    float _1629 = (((_645 * _596) + _646) * _611) * ((cbModelParam._m0[1u].w * (_1612 - _1511)) + _1511);
    float _1631 = (((_645 * _598) + _646) * _611) * ((cbModelParam._m0[1u].w * (_1614 - _1513)) + _1513);
    float _1633 = (((_645 * _599) + _646) * _611) * ((cbModelParam._m0[1u].w * (_1616 - _1515)) + _1515);
    float _1636 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1629 * cbSceneParam._m0[91u].x));
    uvec4 _1652 = floatBitsToUint(cbInstanceData._m0[_544 + 5u]);
    uint _1654 = _1652.x * 14u;
    uint _1655 = _1654 + 13u;
    float _1662 = _611 + (-1.0);
    float _1667 = (cbLight._m0[_1655].x * _1662) + 1.0;
    float _1668 = (cbLight._m0[_1655].y * _1662) + 1.0;
    float _1669 = (cbLight._m0[_1655].z * _1662) + 1.0;
    float _1670 = (cbLight._m0[_1655].w * _1662) + 1.0;
    uint _1671 = _1654 + 5u;
    float _1677 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
    uint _1681 = _1654 + 4u;
    float _1687 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
    uint _1691 = _1654 | 1u;
    float _1702 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_398, _399, _400));
    float _1705 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_398, _399, _400));
    float _3879 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _3890 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1710 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1712 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1719 = ((cbLight._m0[_1671].x * _1677) * _1712) + ((cbLight._m0[_1681].x * _1687) * _1710);
    float _1720 = ((_1677 * cbLight._m0[_1671].y) * _1712) + ((_1687 * cbLight._m0[_1681].y) * _1710);
    float _1721 = ((_1677 * cbLight._m0[_1671].z) * _1712) + ((_1687 * cbLight._m0[_1681].z) * _1710);
    uvec4 _1725 = floatBitsToUint(cbLight._m0[_1654 + 12u]);
    bool _1727 = _1725.x == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1727)
    {
        _1738 = _1719;
        _1740 = _1720;
        _1742 = _1721;
    }
    else
    {
        uint _1746 = _1654 + 6u;
        float _1762 = (dot(vec3(cbLight._m0[_1654 + 2u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1763 = _1762 * _1762;
        float _3901 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1765 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
        _1738 = (((cbLight._m0[_1746].x * 0.3183098733425140380859375) * _1764) * _1765) + _1719;
        _1740 = (((cbLight._m0[_1746].y * 0.3183098733425140380859375) * _1764) * _1765) + _1720;
        _1742 = (((cbLight._m0[_1746].z * 0.3183098733425140380859375) * _1764) * _1765) + _1721;
    }
    bool _1745 = _1725.y == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1745)
    {
        _1783 = _1738;
        _1785 = _1740;
        _1787 = _1742;
    }
    else
    {
        uint _1953 = _1654 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1654 + 3u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _3917 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1972 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _1783 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1738;
        _1785 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1740;
        _1787 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1742;
    }
    uint _1790 = _1654 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1654].w)) * _531) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1654].x + _478;
    float _1806 = cbLight._m0[_1654].y + _479;
    float _1807 = cbLight._m0[_1654].z + _480;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1654].xyz));
    float _3933 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1819 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1820 = dot(vec3(_398, _399, _400), vec3(_1812, _1813, _1814));
    float _3955 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_1812, _1813, _1814));
    float _3966 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1840 = exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0);
    float _1841 = 0.959999978542327880859375 - _593;
    float _1843 = 0.959999978542327880859375 - _594;
    float _1844 = 0.959999978542327880859375 - _595;
    float _1851 = 1.0 - _1804;
    float _1862 = (0.5 / (((_1819 * ((_1818 * _1851) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1851) + _1804) * _1818))) * _1818;
    float _3977 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1875 = _1654 + 9u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1691].w)) * _531) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1691].x + _478;
    float _1889 = cbLight._m0[_1691].y + _479;
    float _1890 = cbLight._m0[_1691].z + _480;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1691].xyz));
    float _3988 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1902 = dot(vec3(_398, _399, _400), vec3(_1895, _1896, _1897));
    float _3999 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_1895, _1896, _1897));
    float _4010 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1887 * _1887;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1921 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1928 = 1.0 - _1887;
    float _1938 = (0.5 / (((_1819 * ((_1901 * _1928) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1928) + _1887) * _1901))) * _1901;
    float _4021 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    float _1950 = (((((_1921 * _1841) + _596) * cbLight._m0[_1875].x) * _1940) * _1677) + (((((_1840 * _1841) + _596) * cbLight._m0[_1790].x) * _1864) * _1687);
    float _1951 = (((((_1921 * _1843) + _598) * cbLight._m0[_1875].y) * _1940) * _1677) + (((((_1840 * _1843) + _598) * cbLight._m0[_1790].y) * _1864) * _1687);
    float _1952 = (((((_1921 * _1844) + _599) * cbLight._m0[_1875].z) * _1940) * _1677) + (((((_1840 * _1844) + _599) * cbLight._m0[_1790].z) * _1864) * _1687);
    float _2014;
    float _2016;
    float _2018;
    if (_1727)
    {
        _2014 = _1950;
        _2016 = _1951;
        _2018 = _1952;
    }
    else
    {
        uint _2020 = _1654 + 2u;
        uint _2024 = _1654 + 10u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _531) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _478;
        float _2041 = cbLight._m0[_2020].y + _479;
        float _2042 = cbLight._m0[_2020].z + _480;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2020].xyz));
        float _4032 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2054 = dot(vec3(_398, _399, _400), vec3(_2047, _2048, _2049));
        float _4043 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _4054 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2073 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
        float _2080 = 1.0 - _2039;
        float _2090 = (0.5 / (((_1819 * ((_2053 * _2080) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2080) + _2039) * _2053))) * _2053;
        float _4065 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2092 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2093 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
        _2014 = (((((_2073 * _1841) + _596) * cbLight._m0[_2024].x) * _2092) * _2093) + _1950;
        _2016 = (((((_2073 * _1843) + _598) * cbLight._m0[_2024].y) * _2092) * _2093) + _1951;
        _2018 = (((((_2073 * _1844) + _599) * cbLight._m0[_2024].z) * _2092) * _2093) + _1952;
    }
    float _2128;
    float _2130;
    float _2132;
    if (_1745)
    {
        _2128 = _2014;
        _2130 = _2016;
        _2132 = _2018;
    }
    else
    {
        uint _2139 = _1654 + 3u;
        uint _2143 = _1654 + 11u;
        float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _531) * 0.949999988079071044921875);
        float _2158 = _2157 * _2157;
        float _2159 = cbLight._m0[_2139].x + _478;
        float _2160 = cbLight._m0[_2139].y + _479;
        float _2161 = cbLight._m0[_2139].z + _480;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2166 = _2165 * _2159;
        float _2167 = _2165 * _2160;
        float _2168 = _2165 * _2161;
        float _2169 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2139].xyz));
        float _4081 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2173 = dot(vec3(_398, _399, _400), vec3(_2166, _2167, _2168));
        float _4092 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2177 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2166, _2167, _2168));
        float _4103 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2181 = _2158 * _2158;
        float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
        float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
        float _2199 = 1.0 - _2158;
        float _2209 = (0.5 / (((_1819 * ((_2172 * _2199) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2199) + _2158) * _2172))) * _2172;
        float _4114 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _2128 = (((((_2192 * _1841) + _596) * cbLight._m0[_2143].x) * _2211) * _2212) + _2014;
        _2130 = (((((_2192 * _1843) + _598) * cbLight._m0[_2143].y) * _2211) * _2212) + _2016;
        _2132 = (((((_2192 * _1844) + _599) * cbLight._m0[_2143].z) * _2211) * _2212) + _2018;
    }
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_1652.y == 0u)
    {
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2287;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2287;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2287;
        uvec4 _2302 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2303 = _2302.x;
        uint _2314 = uint((float(_2302.y) * floor(float(uint(cbSceneParam._m0[85u].y * _487) / _2303))) + floor(float(uint(cbSceneParam._m0[85u].x * _486) / _2303)));
        float _2324 = (log2(_2290 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2325 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        uint _2328 = uint(isnan(14.0) ? _2325 : (isnan(_2325) ? 14.0 : min(_2325, 14.0)));
        uvec4 _2333 = texelFetch(g_lightClusterGridBuffer, int(((_2328 << 2u) + (_2314 << 6u)) >> 2u));
        uint _2334 = _2333.x;
        uint _2335 = _2302.z;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((((1u << ((_2335 >> 4u) & 15u)) + 4294967295u) & _2334) == 0u) || ((_2335 & 240u) == 0u))
        {
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
        }
        else
        {
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            uint _2660 = 0u;
            uint _2669;
            bool _2670;
            for (;;)
            {
                _2669 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                _2670 = _2669 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2670)
                {
                    frontier_phi_61_pred = _2654;
                    frontier_phi_61_pred_1 = _2659;
                    frontier_phi_61_pred_2 = _2658;
                    frontier_phi_61_pred_3 = _2657;
                    frontier_phi_61_pred_4 = _2656;
                    frontier_phi_61_pred_5 = _2655;
                }
                else
                {
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    uint _2784;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2669;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    for (;;)
                    {
                        uint _2788 = uint(findLSB(_2784)) + (_2660 << 5u);
                        uint _2785 = (_2784 + 4294967295u) & _2784;
                        uint _2790 = _2788 * 48u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2810 = (_2788 * 48u) + 4u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2829 = (_2788 * 48u) + 8u;
                        vec3 _2840 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x));
                        float _2844 = _2804.x - _2288;
                        float _2845 = _2804.y - _2289;
                        float _2846 = _2804.z - _2290;
                        float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                        float _2850 = inversesqrt(_2847);
                        float _2851 = _2850 * _2844;
                        float _2852 = _2850 * _2845;
                        float _2853 = _2850 * _2846;
                        float _2854 = dot(vec3(_512, _515, _518), vec3(_2851, _2852, _2853));
                        float _2859 = 1.0 - (_2847 * _2804.w);
                        float _4140 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2861 = sqrt(_2847) * _2823.w;
                        float _2864 = 1.39999997615814208984375 / (_2861 + 1.39999997615814208984375);
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2854) + _2865;
                        float _2871 = _2861 * _2861;
                        float _2875 = ((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2860) / ((_2871 * 0.699999988079071044921875) + 1.0);
                        float _2879 = (-0.0) - _2288;
                        float _2880 = (-0.0) - _2289;
                        float _2881 = (-0.0) - _2290;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2896 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                        float _2897 = 1.0 - _627;
                        float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                        float _2905 = _2904 * _2904;
                        float _2906 = _2905 * _2905;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2917 = dot(vec3(_512, _515, _518), vec3(_2886, _2887, _2888));
                        float _4156 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2921 = dot(vec3(_512, _515, _518), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                        float _4167 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                        float _2929 = _2864 * _2905;
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2854) + _2930;
                        float _4178 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2935 = 1.0 - _2905;
                        float _2945 = (0.5 / (((_2934 * ((_2920 * _2935) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2934 * _2935) + _2905) * _2920))) * _2934;
                        float _4189 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2956 = (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_2928 * _2928) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125))) * _2860;
                        _2713 = (_2875 * _2823.x) + _2781;
                        _2714 = (_2875 * _2823.y) + _2782;
                        _2715 = (_2875 * _2823.z) + _2783;
                        _2710 = (_2956 * _2840.x) + _2778;
                        _2711 = (_2956 * _2840.y) + _2779;
                        _2712 = (_2956 * _2840.z) + _2780;
                        if (_2785 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2785;
                        }
                    }
                    frontier_phi_61_pred = _2710;
                    frontier_phi_61_pred_1 = _2715;
                    frontier_phi_61_pred_2 = _2714;
                    frontier_phi_61_pred_3 = _2713;
                    frontier_phi_61_pred_4 = _2712;
                    frontier_phi_61_pred_5 = _2711;
                }
                _2501 = frontier_phi_61_pred;
                _2511 = frontier_phi_61_pred_1;
                _2509 = frontier_phi_61_pred_2;
                _2507 = frontier_phi_61_pred_3;
                _2505 = frontier_phi_61_pred_4;
                _2503 = frontier_phi_61_pred_5;
                uint _2661 = _2660 + 1u;
                if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2654 = _2501;
                    _2655 = _2503;
                    _2656 = _2505;
                    _2657 = _2507;
                    _2658 = _2509;
                    _2659 = _2511;
                    _2660 = _2661;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
        }
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.z;
        uint _2517 = (_2515 >> 8u) & 15u;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((4294967295u << _2517) & _2334) == 0u)
        {
            _2622 = _2500;
            _2624 = _2502;
            _2626 = _2504;
            _2628 = _2506;
            _2630 = _2508;
            _2632 = _2510;
        }
        else
        {
            float _2647 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
            float _2648 = _2647 * _2288;
            float _2649 = _2647 * _2289;
            float _2650 = _2647 * _2290;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2517 < ((_2515 >> 12u) & 15u))
            {
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2761 = _2500;
                float _2762 = _2502;
                float _2763 = _2504;
                float _2764 = _2506;
                float _2765 = _2508;
                float _2766 = _2510;
                uint _2767 = _2517;
                uint _2776;
                bool _2777;
                for (;;)
                {
                    _2776 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                    _2777 = _2776 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2777)
                    {
                        frontier_phi_67_pred = _2764;
                        frontier_phi_67_pred_1 = _2765;
                        frontier_phi_67_pred_2 = _2766;
                        frontier_phi_67_pred_3 = _2763;
                        frontier_phi_67_pred_4 = _2762;
                        frontier_phi_67_pred_5 = _2761;
                    }
                    else
                    {
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        uint _2980 = _2776;
                        uint _2981;
                        vec4 _3006;
                        float _3007;
                        vec4 _3022;
                        vec3 _3034;
                        vec4 _3050;
                        vec4 _3066;
                        float _3113;
                        bool _3114;
                        for (;;)
                        {
                            uint _2991 = ((_2767 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2980));
                            _2981 = (_2980 + 4294967295u) & _2980;
                            uint _2993 = _2991 * 40u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3007 = _3006.w;
                            uint _3009 = (_2991 * 40u) + 4u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2991 * 40u) + 8u;
                            _3034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x));
                            uint _3037 = (_2991 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2991 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_2991 * 40u) + 24u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3088 = (_2991 * 40u) + 28u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3113 = fma(_2290, _3101.z, fma(_2289, _3101.y, _3101.x * _2288)) + _3101.w;
                            _3114 = !((fma(_2290, _3082.z, fma(_2289, _3082.y, _3082.x * _2288)) + _3082.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3114)
                            {
                                float _3141 = _3006.x - _2288;
                                float _3142 = _3006.y - _2289;
                                float _3143 = _3006.z - _2290;
                                float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                                float _3147 = inversesqrt(_3144);
                                float _3148 = _3147 * _3141;
                                float _3149 = _3147 * _3142;
                                float _3150 = _3147 * _3143;
                                float _3154 = 1.0 - (_3144 / (_3007 * _3007));
                                float _4200 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3159 = sqrt(_3144) * _3022.w;
                                float _3161 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                                float _3162 = _3161 * _3161;
                                float _3165 = ((1.0 - _3162) * dot(vec3(_3148, _3149, _3150), vec3(_512, _515, _518))) + _3162;
                                float _3168 = _3159 * _3159;
                                float _3172 = (fma(_2290, _3050.z, fma(_2289, _3050.y, _3050.x * _2288)) + _3050.w) / _3113;
                                float _3173 = (fma(_2290, _3066.z, fma(_2289, _3066.y, _3066.x * _2288)) + _3066.w) / _3113;
                                float _3177 = 1.0 - dot(vec2(_3172, _3173), vec2(_3172, _3173));
                                float _4216 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3179 = _3178 * (((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3155) / ((_3168 * 0.699999988079071044921875) + 1.0));
                                float _3191 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                                float _3192 = 1.0 - _627;
                                float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                                float _3200 = _3199 * _3199;
                                float _3201 = _3200 * _3200;
                                float _3202 = _3148 - _2648;
                                float _3203 = _3149 - _2649;
                                float _3204 = _3150 - _2650;
                                float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                                float _3212 = dot(vec3(_512, _515, _518), vec3((-0.0) - _2648, (-0.0) - _2649, (-0.0) - _2650));
                                float _4227 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3216 = dot(vec3(_512, _515, _518), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                                float _4238 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                                float _3224 = _3161 * _3200;
                                float _3225 = _3224 * _3224;
                                float _3231 = ((1.0 - _3225) * dot(vec3(_512, _515, _518), vec3(_3148, _3149, _3150))) + _3225;
                                float _4249 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3233 = 1.0 - _3200;
                                float _3243 = (0.5 / (((_3232 * ((_3215 * _3233) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3200) * _3215))) * _3232;
                                float _4260 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3253 = (_3178 * _3155) * (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_3223 * _3223) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3253 * _3034.x;
                                frontier_phi_73_pred_1 = _3253 * _3034.y;
                                frontier_phi_73_pred_2 = _3179 * _3022.z;
                                frontier_phi_73_pred_3 = _3179 * _3022.y;
                                frontier_phi_73_pred_4 = _3179 * _3022.x;
                                frontier_phi_73_pred_5 = _3253 * _3034.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_73_pred;
                            _3258 = frontier_phi_73_pred_1;
                            _3262 = frontier_phi_73_pred_2;
                            _3261 = frontier_phi_73_pred_3;
                            _3260 = frontier_phi_73_pred_4;
                            _3259 = frontier_phi_73_pred_5;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            if (_2981 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2981;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2964;
                        frontier_phi_67_pred_1 = _2965;
                        frontier_phi_67_pred_2 = _2966;
                        frontier_phi_67_pred_3 = _2963;
                        frontier_phi_67_pred_4 = _2962;
                        frontier_phi_67_pred_5 = _2961;
                    }
                    _2629 = frontier_phi_67_pred;
                    _2631 = frontier_phi_67_pred_1;
                    _2633 = frontier_phi_67_pred_2;
                    _2627 = frontier_phi_67_pred_3;
                    _2625 = frontier_phi_67_pred_4;
                    _2623 = frontier_phi_67_pred_5;
                    uint _2768 = _2767 + 1u;
                    if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2761 = _2623;
                        _2762 = _2625;
                        _2763 = _2627;
                        _2764 = _2629;
                        _2765 = _2631;
                        _2766 = _2633;
                        _2767 = _2768;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2631;
                frontier_phi_55_56_ladder_1 = _2633;
                frontier_phi_55_56_ladder_2 = _2629;
                frontier_phi_55_56_ladder_3 = _2627;
                frontier_phi_55_56_ladder_4 = _2625;
                frontier_phi_55_56_ladder_5 = _2623;
            }
            else
            {
                frontier_phi_55_56_ladder = _2508;
                frontier_phi_55_56_ladder_1 = _2510;
                frontier_phi_55_56_ladder_2 = _2506;
                frontier_phi_55_56_ladder_3 = _2504;
                frontier_phi_55_56_ladder_4 = _2502;
                frontier_phi_55_56_ladder_5 = _2500;
            }
            _2622 = frontier_phi_55_56_ladder_5;
            _2624 = frontier_phi_55_56_ladder_4;
            _2626 = frontier_phi_55_56_ladder_3;
            _2628 = frontier_phi_55_56_ladder_2;
            _2630 = frontier_phi_55_56_ladder;
            _2632 = frontier_phi_55_56_ladder_1;
        }
        float _2637 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
        _2347 = (_2637 * _2628) + _1783;
        _2349 = (_2637 * _2630) + _1785;
        _2351 = (_2637 * _2632) + _1787;
        _2353 = ((_2622 * _596) * _2637) + _2128;
        _2355 = ((_2624 * _598) * _2637) + _2130;
        _2357 = ((_2626 * _599) * _2637) + _2132;
    }
    else
    {
        _2347 = _1783;
        _2349 = _1785;
        _2351 = _1787;
        _2353 = _2128;
        _2355 = _2130;
        _2357 = _2132;
    }
    uint _2363 = _545 + uint(cbMatDynParam._m0[0u].w);
    float _2373 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _349) * _361.x) * cbInstanceData._m0[_2363].x;
    float _2378 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _349) * _361.y) * cbInstanceData._m0[_2363].y;
    float _2383 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _349) * _361.z) * cbInstanceData._m0[_2363].z;
    vec4 _2391 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2405 = ((((_2373 * _491) - _2373) + _2391.x) * cbMtdParam._m0[3u].x) + _2373;
    float _2406 = ((((_2378 * _491) - _2378) + _2391.y) * cbMtdParam._m0[3u].x) + _2378;
    float _2407 = ((((_2383 * _491) - _2383) + _2391.z) * cbMtdParam._m0[3u].x) + _2383;
    float _4276 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4287 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4298 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2426 = (((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2347 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _611))) + ((_2353 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1418)) * cbPerFrame._m0[3u].x)) + _2405;
    float _2427 = (((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2349 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _611))) + ((_2355 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1418)) * cbPerFrame._m0[3u].x)) + _2406;
    float _2428 = (((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2351 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _611))) + ((_2357 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1418)) * cbPerFrame._m0[3u].x)) + _2407;
    float _4324 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2441 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    uint _2442 = _544 + 6u;
    float _2450 = _486 / cbSceneParam._m0[86u].x;
    float _2451 = _487 / cbSceneParam._m0[86u].y;
    vec4 _2465 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, (log2((isnan(cbSceneParam._m0[77u].w) ? _420 : (isnan(_420) ? cbSceneParam._m0[77u].w : min(_420, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2467 = _2465.x;
    float _2468 = _2465.y;
    float _2469 = _2465.z;
    float _2470 = _2465.w;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_420 > cbSceneParam._m0[78u].w)
    {
        float _2525 = isnan(_420) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _420 : min(cbSceneParam._m0[80u].w, _420));
        float _2526 = _2525 / _420;
        float _2537 = _2526 * _471;
        float _2538 = _472 * _2526;
        float _2539 = (-0.0) - _2538;
        float _2541 = _2526 * _473;
        float _2543 = (cbSceneParam._m0[77u].w * _2539) / _2525;
        float _2544 = _2543 + cbSceneParam._m0[79u].w;
        float _2545 = cbSceneParam._m0[79u].w - _2538;
        float _2551 = sqrt(((_2537 * _2537) + (_2538 * _2538)) + (_2541 * _2541));
        float _2554 = (1.0 - (cbSceneParam._m0[77u].w / _2525)) * _2551;
        float _2559 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2561 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2723;
        if (abs((_2539 - _2543) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2723 = ((((_2544 > 0.0) ? exp2(_2559 * _2544) : (2.0 - exp2(_2561 * _2544))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2554;
        }
        else
        {
            float _2683 = 1.0 / cbSceneParam._m0[80u].x;
            float _2684 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : max(_2544, _2545));
            float _2685 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : min(_2544, _2545));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            _2723 = ((abs(_2551 / _2539) * cbSceneParam._m0[80u].y) * ((((_2694 - _2695) * 2.0) - ((exp2(_2559 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)))) - exp2(_2559 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))))) * _2683)) - ((exp2(_2561 * _2694) - exp2(_2561 * _2695)) * _2683))) + (_2554 * cbSceneParam._m0[80u].z);
        }
        vec4 _2725 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, 1.0), 0.0);
        float _2734 = exp2((_2723 * (-1.44269502162933349609375)) * (1.0 - _2725.w));
        float _2735 = log2(_2734);
        float _2751 = log2(_2470);
        _2563 = (exp2(_2751 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].x)) * _2725.x) / cbSceneParam._m0[78u].x)) + _2467;
        _2565 = (exp2(_2751 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].y)) * _2725.y) / cbSceneParam._m0[78u].y)) + _2468;
        _2567 = (exp2(_2751 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].z)) * _2725.z) / cbSceneParam._m0[78u].z)) + _2469;
        _2569 = _2734 * _2470;
    }
    else
    {
        _2563 = _2467;
        _2565 = _2468;
        _2567 = _2469;
        _2569 = _2470;
    }
    float _2581 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2582 = _2581 == 3.0;
    float _2583 = log2(_2569);
    float _2587 = exp2(_2583 * cbSceneParam._m0[78u].x);
    float _2588 = exp2(_2583 * cbSceneParam._m0[78u].y);
    float _2589 = exp2(_2583 * cbSceneParam._m0[78u].z);
    float _2590 = _2587 * (isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0)));
    float _2591 = _2588 * (isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0)));
    float _2592 = _2589 * (isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0)));
    float _2601 = (_2581 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2601 * (_2582 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2563)));
    SV_Target.y = _2601 * (_2582 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.z = _2601 * (_2582 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.w = cbInstanceData._m0[_2442].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2405) * _2441) * _2587) * _2601;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2406) * _2441) * _2588) * _2601;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2407) * _2441) * _2589) * _2601;
    SV_Target_1.w = cbInstanceData._m0[_2442].w;
}


