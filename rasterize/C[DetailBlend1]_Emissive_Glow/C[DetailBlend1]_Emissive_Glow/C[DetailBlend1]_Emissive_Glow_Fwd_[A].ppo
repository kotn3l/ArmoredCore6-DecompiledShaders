#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1028;
float _3490;
float _3491;
float _3492;
float _3493;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _255 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = ((_238.x * 4.55000019073486328125) * _255.x) * cbMtdParam._m0[9u].x;
    float _272 = ((_238.y * 4.55000019073486328125) * _255.y) * cbMtdParam._m0[9u].y;
    float _275 = ((_238.z * 4.55000019073486328125) * _255.z) * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _291 = _287.z;
    float _297 = exp2(log2(_291 * 22.0) * 260.0);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    vec4 _317 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _329 = ((((isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0))) * (_291 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[11u].x + _317.z);
    float _347 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3512 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _353 = (_348 * _348) * (3.0 - (_348 * 2.0));
    vec4 _365 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _373 = (_287.x * 2.0) + (-1.0);
    float _374 = (_287.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3523 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    float _387 = (cbMtdParam._m0[11u].y * ((_317.x * 2.0) + (-1.0))) + _373;
    float _388 = (cbMtdParam._m0[11u].y * ((_317.y * 2.0) + (-1.0))) + _374;
    float _391 = fma(_380, _214 * NORMAL.x, fma(_388, _221 * TANGENT.x, (_207 * _199) * _387));
    float _394 = fma(_380, _214 * NORMAL.y, fma(_388, _221 * TANGENT.y, (_207 * _200) * _387));
    float _397 = fma(_380, _214 * NORMAL.z, fma(_388, _221 * TANGENT.z, (_207 * _201) * _387));
    float _401 = inversesqrt(dot(vec3(_391, _394, _397), vec3(_391, _394, _397)));
    float _402 = _401 * _391;
    float _403 = _401 * _394;
    float _404 = _401 * _397;
    float _3534 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _405 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3556 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3567 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _424 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _475 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _465);
    float _476 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _465);
    float _477 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _465);
    float _481 = inversesqrt(dot(vec3(_475, _476, _477), vec3(_475, _476, _477)));
    float _482 = _475 * _481;
    float _483 = _476 * _481;
    float _484 = _477 * _481;
    vec4 _489 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _491 = _489.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _709 = sqrt(((_475 * _475) + (_476 * _476)) + (_477 * _477));
        float _715 = (cbMatDynParam._m0[5u].x * _709) + cbMatDynParam._m0[5u].y;
        float _3578 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _720 = (cbMatDynParam._m0[5u].z * _709) + cbMatDynParam._m0[5u].w;
        float _3589 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) - _716)) + _716) < ((_491 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _503 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _504 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _506 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _508 = _506.w;
    float _528 = fma(_404, cbSceneParam._m0[5u].z, fma(_403, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _402));
    float _531 = fma(_404, cbSceneParam._m0[6u].z, fma(_403, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _402));
    float _534 = fma(_404, cbSceneParam._m0[7u].z, fma(_403, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _402));
    vec4 _536 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _547 = (((_536.y - _405) + (_536.w * _405)) * cbMtdParam._m0[3u].x) + _405;
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _561 = _560 + 9u;
    uint _562 = _561 + uint(cbMatDynParam._m0[0u].w);
    float _568 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_562].x;
    float _569 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_562].y;
    float _570 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_562].z;
    float _3600 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    vec4 _574 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _579 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _585 = cbMtdParam._m0[3u].x * _579.x;
    float _598 = (cbMtdParam._m0[3u].x * (((_571 * _508) - _571) + _574.x)) + _571;
    float _599 = (cbMtdParam._m0[3u].x * (((_572 * _508) - _572) + _574.y)) + _572;
    float _600 = (cbMtdParam._m0[3u].x * (((_573 * _508) - _573) + _574.z)) + _573;
    float _601 = 1.0 - _585;
    float _602 = _598 * _601;
    float _603 = _599 * _601;
    float _604 = _600 * _601;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _585;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _585;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _585;
    float _612 = _609 + 0.039999999105930328369140625;
    float _614 = _610 + 0.039999999105930328369140625;
    float _615 = _611 + 0.039999999105930328369140625;
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _503, cbSceneParam._m0[86u].y * _504));
    float _627 = _624.x * TEXCOORD_4;
    float _628 = dot(vec3(_402, _403, _404), vec3(_482, _483, _484));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _402) - _482;
    float _636 = (_631 * _403) - _483;
    float _637 = (_631 * _404) - _484;
    float _641 = abs(dot(vec3(_482, _483, _484), vec3(_402, _403, _404)));
    float _3633 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _643 = sqrt(_547);
    float _655 = exp2((_643 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _661 = (1.0 - _655) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _662 = _655 * _643;
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1027;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _758 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _762 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _785 = _690 + _402;
        float _786 = _694 + _403;
        float _787 = _698 + _404;
        float _797 = fma(_787, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) - _754;
        float _798 = fma(_787, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) - _758;
        float _799 = fma(_787, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) - _762;
        float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
        float _816 = ((_803 * _797) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_803 * _798) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_803 * _799) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _855 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_821.x + (-0.5));
        float _857 = _855 * (_821.y + (-0.5));
        float _858 = _855 * (_821.z + (-0.5));
        float _865 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_828.x + (-0.5));
        float _867 = _865 * (_828.y + (-0.5));
        float _868 = _865 * (_828.z + (-0.5));
        float _875 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_835.x + (-0.5));
        float _877 = _875 * (_835.y + (-0.5));
        float _878 = _875 * (_835.z + (-0.5));
        float _885 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_842.x + (-0.5));
        float _887 = _885 * (_842.y + (-0.5));
        float _888 = _885 * (_842.z + (-0.5));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = _856 * 0.5;
        float _893 = _866 * 0.5;
        float _894 = _876 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _909 = (dot(vec3(_402, _403, _404), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _919 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3681 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_921 + 1.0))) + _926) * _889;
        float _936 = _857 * 0.5;
        float _937 = _867 * 0.5;
        float _938 = _877 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_402, _403, _404), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3714 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_963 + 1.0))) + _968) * _890;
        float _978 = _858 * 0.5;
        float _979 = _868 * 0.5;
        float _980 = _878 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_402, _403, _404), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3747 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1005 + 1.0))) + _1010) * _891;
        _1027 = _858;
        _1029 = _857;
        _1030 = _856;
        _1031 = _868;
        _1032 = _867;
        _1033 = _866;
        _1034 = _878;
        _1035 = _877;
        _1036 = _876;
        _1037 = _891;
        _1038 = _890;
        _1039 = _889;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _1028;
        _1029 = _1028;
        _1030 = _1028;
        _1031 = _1028;
        _1032 = _1028;
        _1033 = _1028;
        _1034 = _1028;
        _1035 = _1028;
        _1036 = _1028;
        _1037 = _1028;
        _1038 = _1028;
        _1039 = _1028;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1071 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1075 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1079 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1102 = _690 + _402;
        float _1103 = _694 + _403;
        float _1104 = _698 + _404;
        float _1114 = fma(_1104, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102)) - _1071;
        float _1115 = fma(_1104, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102)) - _1075;
        float _1116 = fma(_1104, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102)) - _1079;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1071 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1075 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[35u].z) + ((((((_1079 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1170 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1137.x + (-0.5));
        float _1172 = _1170 * (_1137.y + (-0.5));
        float _1173 = _1170 * (_1137.z + (-0.5));
        float _1180 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1144.x + (-0.5));
        float _1182 = _1180 * (_1144.y + (-0.5));
        float _1183 = _1180 * (_1144.z + (-0.5));
        float _1190 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1151.x + (-0.5));
        float _1192 = _1190 * (_1151.y + (-0.5));
        float _1193 = _1190 * (_1151.z + (-0.5));
        float _1200 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1158.x + (-0.5));
        float _1202 = _1200 * (_1158.y + (-0.5));
        float _1203 = _1200 * (_1158.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_402, _403, _404), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3810 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1234 + 1.0))) + _1239) * _1204;
        float _1249 = _1172 * 0.5;
        float _1250 = _1182 * 0.5;
        float _1251 = _1192 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_402, _403, _404), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3843 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1276 + 1.0))) + _1281) * _1205;
        float _1291 = _1173 * 0.5;
        float _1292 = _1183 * 0.5;
        float _1293 = _1193 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_402, _403, _404), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3876 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1318 + 1.0))) + _1323) * _1206;
        _1340 = _1173;
        _1341 = _1172;
        _1342 = _1171;
        _1343 = _1183;
        _1344 = _1182;
        _1345 = _1181;
        _1346 = _1193;
        _1347 = _1192;
        _1348 = _1191;
        _1349 = _1206;
        _1350 = _1205;
        _1351 = _1204;
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1028;
        _1341 = _1028;
        _1342 = _1028;
        _1343 = _1028;
        _1344 = _1028;
        _1345 = _1028;
        _1346 = _1028;
        _1347 = _1028;
        _1348 = _1028;
        _1349 = _1028;
        _1350 = _1028;
        _1351 = _1028;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1387 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1364));
    float _1408 = _635 * 0.5;
    float _1409 = _636 * 0.5;
    float _1410 = _637 * 0.5;
    float _1411 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1414 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1417 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1451;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1424 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1027, _1031, _1034, _1037));
        float _1428 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1432 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1439 = dot(vec4(cbModelParam._m0[39u]), vec4(_1408, _1409, _1410, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1462;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1453 = dot(vec4(cbModelParam._m0[40u]), vec4(_1408, _1409, _1410, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1466 = (_1462 * cbModelParam._m0[1u].x) + (_1451 * (1.0 - cbModelParam._m0[1u].x));
    float _1476 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _547);
    float _1477 = isnan(_1476) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1476 : min(cbModelParam._m0[25u].z, _1476));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1526 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1530 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1534 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1537 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1540 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1543 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1571;
        if (_1537 > 0.0)
        {
            _1571 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1571 = frontier_phi_17_15_ladder;
        }
        float _1776;
        if (_1540 > 0.0)
        {
            _1776 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1776 = frontier_phi_26_22_ladder;
        }
        float _2030;
        if (_1543 > 0.0)
        {
            _2030 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2030 = frontier_phi_38_33_ladder;
        }
        float _2032 = isnan(_1776) ? _1571 : (isnan(_1571) ? _1776 : min(_1571, _1776));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1537) + _1526;
        float _2038 = (_2033 * _1540) + _1530;
        float _2039 = (_2033 * _1543) + _1534;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1477);
            frontier_phi_16_38_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1559 = frontier_phi_16_38_ladder_2;
        _1561 = frontier_phi_16_38_ladder_1;
        _1563 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1477);
        _1559 = _1547.x * cbModelParam._m0[1u].y;
        _1561 = _1547.y * cbModelParam._m0[1u].y;
        _1563 = _1547.z * cbModelParam._m0[1u].y;
    }
    float _1567 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _547);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1567 : min(cbModelParam._m0[25u].w, _1567));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1638 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1641 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1781;
        if (_1635 > 0.0)
        {
            _1781 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1781 = frontier_phi_28_24_ladder;
        }
        float _2057;
        if (_1638 > 0.0)
        {
            _2057 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2057 = frontier_phi_40_35_ladder;
        }
        float _2270;
        if (_1641 > 0.0)
        {
            _2270 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2270 = frontier_phi_49_46_ladder;
        }
        float _2272 = isnan(_2057) ? _1781 : (isnan(_1781) ? _2057 : min(_1781, _2057));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1635) + _1624;
        float _2278 = (_2273 * _1638) + _1628;
        float _2279 = (_2273 * _1641) + _1632;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1568);
            frontier_phi_25_49_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_25_49_ladder_2;
        _1662 = frontier_phi_25_49_ladder_1;
        _1664 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1568);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1677 = (((_661 * _612) + _662) * _627) * ((cbModelParam._m0[1u].w * (_1660 - _1559)) + _1559);
    float _1679 = (((_661 * _614) + _662) * _627) * ((cbModelParam._m0[1u].w * (_1662 - _1561)) + _1561);
    float _1681 = (((_661 * _615) + _662) * _627) * ((cbModelParam._m0[1u].w * (_1664 - _1563)) + _1563);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1710 = _627 + (-1.0);
    float _1715 = (cbLight._m0[_1703].x * _1710) + 1.0;
    float _1716 = (cbLight._m0[_1703].y * _1710) + 1.0;
    float _1717 = (cbLight._m0[_1703].z * _1710) + 1.0;
    float _1718 = (cbLight._m0[_1703].w * _1710) + 1.0;
    uint _1719 = _1702 + 5u;
    float _1725 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1729 = _1702 + 4u;
    float _1735 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1739 = _1702 | 1u;
    float _1750 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_402, _403, _404));
    float _1753 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_402, _403, _404));
    float _4012 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _4023 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1758 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.3183098733425140380859375;
    float _1760 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1767 = ((cbLight._m0[_1719].x * _1725) * _1760) + ((cbLight._m0[_1729].x * _1735) * _1758);
    float _1768 = ((_1725 * cbLight._m0[_1719].y) * _1760) + ((_1735 * cbLight._m0[_1729].y) * _1758);
    float _1769 = ((_1725 * cbLight._m0[_1719].z) * _1760) + ((_1735 * cbLight._m0[_1729].z) * _1758);
    uvec4 _1773 = floatBitsToUint(cbLight._m0[_1702 + 12u]);
    bool _1775 = _1773.x == 0u;
    float _1786;
    float _1788;
    float _1790;
    if (_1775)
    {
        _1786 = _1767;
        _1788 = _1768;
        _1790 = _1769;
    }
    else
    {
        uint _1794 = _1702 + 6u;
        float _1810 = (dot(vec3(cbLight._m0[_1702 + 2u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1811 = _1810 * _1810;
        float _4034 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1813 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1786 = (((cbLight._m0[_1794].x * 0.3183098733425140380859375) * _1812) * _1813) + _1767;
        _1788 = (((cbLight._m0[_1794].y * 0.3183098733425140380859375) * _1812) * _1813) + _1768;
        _1790 = (((cbLight._m0[_1794].z * 0.3183098733425140380859375) * _1812) * _1813) + _1769;
    }
    bool _1793 = _1773.y == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1793)
    {
        _1831 = _1786;
        _1833 = _1788;
        _1835 = _1790;
    }
    else
    {
        uint _2001 = _1702 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1702 + 3u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4050 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2020 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1831 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1786;
        _1833 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1788;
        _1835 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1790;
    }
    uint _1838 = _1702 + 8u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _547) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1702].x + _482;
    float _1854 = cbLight._m0[_1702].y + _483;
    float _1855 = cbLight._m0[_1702].z + _484;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1702].xyz));
    float _4066 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _1867 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1868 = dot(vec3(_402, _403, _404), vec3(_1860, _1861, _1862));
    float _4088 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1860, _1861, _1862));
    float _4099 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1852 * _1852;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
    float _1889 = 0.959999978542327880859375 - _609;
    float _1891 = 0.959999978542327880859375 - _610;
    float _1892 = 0.959999978542327880859375 - _611;
    float _1899 = 1.0 - _1852;
    float _1910 = (0.5 / (((_1867 * ((_1866 * _1899) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1899) + _1852) * _1866))) * _1866;
    float _4110 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    uint _1923 = _1702 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _547) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1739].x + _482;
    float _1937 = cbLight._m0[_1739].y + _483;
    float _1938 = cbLight._m0[_1739].z + _484;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1739].xyz));
    float _4121 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _1950 = dot(vec3(_402, _403, _404), vec3(_1943, _1944, _1945));
    float _4132 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1943, _1944, _1945));
    float _4143 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
    float _1976 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1867 * ((_1949 * _1976) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1976) + _1935) * _1949))) * _1949;
    float _4154 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1998 = (((((_1969 * _1889) + _612) * cbLight._m0[_1923].x) * _1988) * _1725) + (((((_1888 * _1889) + _612) * cbLight._m0[_1838].x) * _1912) * _1735);
    float _1999 = (((((_1969 * _1891) + _614) * cbLight._m0[_1923].y) * _1988) * _1725) + (((((_1888 * _1891) + _614) * cbLight._m0[_1838].y) * _1912) * _1735);
    float _2000 = (((((_1969 * _1892) + _615) * cbLight._m0[_1923].z) * _1988) * _1725) + (((((_1888 * _1892) + _615) * cbLight._m0[_1838].z) * _1912) * _1735);
    float _2062;
    float _2064;
    float _2066;
    if (_1775)
    {
        _2062 = _1998;
        _2064 = _1999;
        _2066 = _2000;
    }
    else
    {
        uint _2068 = _1702 + 2u;
        uint _2072 = _1702 + 10u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _547) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _482;
        float _2089 = cbLight._m0[_2068].y + _483;
        float _2090 = cbLight._m0[_2068].z + _484;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2068].xyz));
        float _4165 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2102 = dot(vec3(_402, _403, _404), vec3(_2095, _2096, _2097));
        float _4176 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4187 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
        float _2128 = 1.0 - _2087;
        float _2138 = (0.5 / (((_1867 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2128) + _2087) * _2101))) * _2101;
        float _4198 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2062 = (((((_2121 * _1889) + _612) * cbLight._m0[_2072].x) * _2140) * _2141) + _1998;
        _2064 = (((((_2121 * _1891) + _614) * cbLight._m0[_2072].y) * _2140) * _2141) + _1999;
        _2066 = (((((_2121 * _1892) + _615) * cbLight._m0[_2072].z) * _2140) * _2141) + _2000;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1793)
    {
        _2176 = _2062;
        _2178 = _2064;
        _2180 = _2066;
    }
    else
    {
        uint _2187 = _1702 + 3u;
        uint _2191 = _1702 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _547) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _482;
        float _2208 = cbLight._m0[_2187].y + _483;
        float _2209 = cbLight._m0[_2187].z + _484;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2187].xyz));
        float _4214 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2221 = dot(vec3(_402, _403, _404), vec3(_2214, _2215, _2216));
        float _4225 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4236 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
        float _2247 = 1.0 - _2206;
        float _2257 = (0.5 / (((_1867 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2247) + _2206) * _2220))) * _2220;
        float _4247 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2176 = (((((_2240 * _1889) + _612) * cbLight._m0[_2191].x) * _2259) * _2260) + _2062;
        _2178 = (((((_2240 * _1891) + _614) * cbLight._m0[_2191].y) * _2259) * _2260) + _2064;
        _2180 = (((((_2240 * _1892) + _615) * cbLight._m0[_2191].z) * _2259) * _2260) + _2066;
    }
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_1700.y == 0u)
    {
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2335;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2335;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2335;
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.x;
        uint _2362 = uint((float(_2350.y) * floor(float(uint(cbSceneParam._m0[85u].y * _504) / _2351))) + floor(float(uint(cbSceneParam._m0[85u].x * _503) / _2351)));
        float _2372 = (log2(_2338 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2373 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        uint _2376 = uint(isnan(14.0) ? _2373 : (isnan(_2373) ? 14.0 : min(_2373, 14.0)));
        uvec4 _2381 = texelFetch(g_lightClusterGridBuffer, int(((_2376 << 2u) + (_2362 << 6u)) >> 2u));
        uint _2382 = _2381.x;
        uint _2383 = _2350.z;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((((1u << ((_2383 >> 4u) & 15u)) + 4294967295u) & _2382) == 0u) || ((_2383 & 240u) == 0u))
        {
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
        }
        else
        {
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            uint _2716 = 0u;
            uint _2725;
            bool _2726;
            for (;;)
            {
                _2725 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                _2726 = _2725 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2726)
                {
                    frontier_phi_66_pred = _2710;
                    frontier_phi_66_pred_1 = _2715;
                    frontier_phi_66_pred_2 = _2714;
                    frontier_phi_66_pred_3 = _2713;
                    frontier_phi_66_pred_4 = _2712;
                    frontier_phi_66_pred_5 = _2711;
                }
                else
                {
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    uint _2861;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2725;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    for (;;)
                    {
                        uint _2865 = uint(findLSB(_2861)) + (_2716 << 5u);
                        uint _2862 = (_2861 + 4294967295u) & _2861;
                        uint _2867 = _2865 * 48u;
                        vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2887 = (_2865 * 48u) + 4u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2906 = (_2865 * 48u) + 8u;
                        vec3 _2917 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x));
                        float _2921 = _2881.x - _2336;
                        float _2922 = _2881.y - _2337;
                        float _2923 = _2881.z - _2338;
                        float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                        float _2927 = inversesqrt(_2924);
                        float _2928 = _2927 * _2921;
                        float _2929 = _2927 * _2922;
                        float _2930 = _2927 * _2923;
                        float _2931 = dot(vec3(_528, _531, _534), vec3(_2928, _2929, _2930));
                        float _2936 = 1.0 - (_2924 * _2881.w);
                        float _4273 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2938 = sqrt(_2924) * _2900.w;
                        float _2941 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                        float _2942 = _2941 * _2941;
                        float _2945 = ((1.0 - _2942) * _2931) + _2942;
                        float _2948 = _2938 * _2938;
                        float _2952 = ((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2937) / ((_2948 * 0.699999988079071044921875) + 1.0);
                        float _2956 = (-0.0) - _2336;
                        float _2957 = (-0.0) - _2337;
                        float _2958 = (-0.0) - _2338;
                        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2973 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                        float _2974 = 1.0 - _643;
                        float _2981 = sqrt(1.0 - ((1.0 - (_2974 * _2974)) * (1.0 - (_2973 * _2973))));
                        float _2982 = _2981 * _2981;
                        float _2983 = _2982 * _2982;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2986 = _2965 + _2930;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2994 = dot(vec3(_528, _531, _534), vec3(_2963, _2964, _2965));
                        float _4289 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2998 = dot(vec3(_528, _531, _534), vec3(_2990 * _2984, _2990 * _2985, _2990 * _2986));
                        float _4300 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3005 = ((_3001 * _3001) * (_2983 + (-1.0))) + 1.0;
                        float _3006 = _2941 * _2982;
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2931) + _3007;
                        float _4311 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3011 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3012 = 1.0 - _2982;
                        float _3022 = (0.5 / (((_3011 * ((_2997 * _3012) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2982) * _2997))) * _3011;
                        float _4322 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3033 = (((_2983 * 3.1415927410125732421875) * (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) / ((_3005 * _3005) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125))) * _2937;
                        _2785 = (_2952 * _2900.x) + _2858;
                        _2786 = (_2952 * _2900.y) + _2859;
                        _2787 = (_2952 * _2900.z) + _2860;
                        _2782 = (_3033 * _2917.x) + _2855;
                        _2783 = (_3033 * _2917.y) + _2856;
                        _2784 = (_3033 * _2917.z) + _2857;
                        if (_2862 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2862;
                        }
                    }
                    frontier_phi_66_pred = _2782;
                    frontier_phi_66_pred_1 = _2787;
                    frontier_phi_66_pred_2 = _2786;
                    frontier_phi_66_pred_3 = _2785;
                    frontier_phi_66_pred_4 = _2784;
                    frontier_phi_66_pred_5 = _2783;
                }
                _2549 = frontier_phi_66_pred;
                _2559 = frontier_phi_66_pred_1;
                _2557 = frontier_phi_66_pred_2;
                _2555 = frontier_phi_66_pred_3;
                _2553 = frontier_phi_66_pred_4;
                _2551 = frontier_phi_66_pred_5;
                uint _2717 = _2716 + 1u;
                if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2710 = _2549;
                    _2711 = _2551;
                    _2712 = _2553;
                    _2713 = _2555;
                    _2714 = _2557;
                    _2715 = _2559;
                    _2716 = _2717;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
        }
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.z;
        uint _2565 = (_2563 >> 8u) & 15u;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((4294967295u << _2565) & _2382) == 0u)
        {
            _2678 = _2548;
            _2680 = _2550;
            _2682 = _2552;
            _2684 = _2554;
            _2686 = _2556;
            _2688 = _2558;
        }
        else
        {
            float _2703 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
            float _2704 = _2703 * _2336;
            float _2705 = _2703 * _2337;
            float _2706 = _2703 * _2338;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2565 < ((_2563 >> 12u) & 15u))
            {
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2838 = _2548;
                float _2839 = _2550;
                float _2840 = _2552;
                float _2841 = _2554;
                float _2842 = _2556;
                float _2843 = _2558;
                uint _2844 = _2565;
                uint _2853;
                bool _2854;
                for (;;)
                {
                    _2853 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                    _2854 = _2853 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2854)
                    {
                        frontier_phi_77_pred = _2843;
                        frontier_phi_77_pred_1 = _2842;
                        frontier_phi_77_pred_2 = _2841;
                        frontier_phi_77_pred_3 = _2840;
                        frontier_phi_77_pred_4 = _2839;
                        frontier_phi_77_pred_5 = _2838;
                    }
                    else
                    {
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        uint _3066 = _2853;
                        uint _3067;
                        vec4 _3092;
                        float _3093;
                        vec4 _3108;
                        vec3 _3120;
                        vec4 _3136;
                        vec4 _3152;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3077 = ((_2844 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3066));
                            _3067 = (_3066 + 4294967295u) & _3066;
                            uint _3079 = _3077 * 40u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3093 = _3092.w;
                            uint _3095 = (_3077 * 40u) + 4u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3077 * 40u) + 8u;
                            _3120 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x));
                            uint _3123 = (_3077 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3077 * 40u) + 20u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3077 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3077 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_2338, _3187.z, fma(_2337, _3187.y, _3187.x * _2336)) + _3187.w;
                            _3200 = !((fma(_2338, _3168.z, fma(_2337, _3168.y, _3168.x * _2336)) + _3168.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3092.x - _2336;
                                float _3228 = _3092.y - _2337;
                                float _3229 = _3092.z - _2338;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3093 * _3093));
                                float _4333 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3245 = sqrt(_3230) * _3108.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_528, _531, _534))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_2338, _3136.z, fma(_2337, _3136.y, _3136.x * _2336)) + _3136.w) / _3199;
                                float _3259 = (fma(_2338, _3152.z, fma(_2337, _3152.y, _3152.x * _2336)) + _3152.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4349 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _643;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2704;
                                float _3289 = _3235 - _2705;
                                float _3290 = _3236 - _2706;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_528, _531, _534), vec3((-0.0) - _2704, (-0.0) - _2705, (-0.0) - _2706));
                                float _4360 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3302 = dot(vec3(_528, _531, _534), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4371 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_528, _531, _534), vec3(_3234, _3235, _3236))) + _3311;
                                float _4382 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4393 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3265 * _3108.y;
                                frontier_phi_83_pred_1 = _3265 * _3108.x;
                                frontier_phi_83_pred_2 = _3339 * _3120.z;
                                frontier_phi_83_pred_3 = _3339 * _3120.y;
                                frontier_phi_83_pred_4 = _3339 * _3120.x;
                                frontier_phi_83_pred_5 = _3265 * _3108.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_83_pred;
                            _3346 = frontier_phi_83_pred_1;
                            _3345 = frontier_phi_83_pred_2;
                            _3344 = frontier_phi_83_pred_3;
                            _3343 = frontier_phi_83_pred_4;
                            _3348 = frontier_phi_83_pred_5;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3047 = _3343 + _3060;
                            _3048 = _3344 + _3061;
                            _3049 = _3345 + _3062;
                            if (_3067 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3067;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3052;
                        frontier_phi_77_pred_1 = _3051;
                        frontier_phi_77_pred_2 = _3050;
                        frontier_phi_77_pred_3 = _3049;
                        frontier_phi_77_pred_4 = _3048;
                        frontier_phi_77_pred_5 = _3047;
                    }
                    _2689 = frontier_phi_77_pred;
                    _2687 = frontier_phi_77_pred_1;
                    _2685 = frontier_phi_77_pred_2;
                    _2683 = frontier_phi_77_pred_3;
                    _2681 = frontier_phi_77_pred_4;
                    _2679 = frontier_phi_77_pred_5;
                    uint _2845 = _2844 + 1u;
                    if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2838 = _2679;
                        _2839 = _2681;
                        _2840 = _2683;
                        _2841 = _2685;
                        _2842 = _2687;
                        _2843 = _2689;
                        _2844 = _2845;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2683;
                frontier_phi_58_59_ladder_1 = _2689;
                frontier_phi_58_59_ladder_2 = _2687;
                frontier_phi_58_59_ladder_3 = _2685;
                frontier_phi_58_59_ladder_4 = _2681;
                frontier_phi_58_59_ladder_5 = _2679;
            }
            else
            {
                frontier_phi_58_59_ladder = _2552;
                frontier_phi_58_59_ladder_1 = _2558;
                frontier_phi_58_59_ladder_2 = _2556;
                frontier_phi_58_59_ladder_3 = _2554;
                frontier_phi_58_59_ladder_4 = _2550;
                frontier_phi_58_59_ladder_5 = _2548;
            }
            _2678 = frontier_phi_58_59_ladder_5;
            _2680 = frontier_phi_58_59_ladder_4;
            _2682 = frontier_phi_58_59_ladder;
            _2684 = frontier_phi_58_59_ladder_3;
            _2686 = frontier_phi_58_59_ladder_2;
            _2688 = frontier_phi_58_59_ladder_1;
        }
        float _2693 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _2395 = (_2693 * _2684) + _1831;
        _2397 = (_2693 * _2686) + _1833;
        _2399 = (_2693 * _2688) + _1835;
        _2401 = ((_2678 * _612) * _2693) + _2176;
        _2403 = ((_2680 * _614) * _2693) + _2178;
        _2405 = ((_2682 * _615) * _2693) + _2180;
    }
    else
    {
        _2395 = _1831;
        _2397 = _1833;
        _2399 = _1835;
        _2401 = _2176;
        _2403 = _2178;
        _2405 = _2180;
    }
    uint _2411 = _561 + uint(cbMatDynParam._m0[0u].w);
    float _2421 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _353) * _365.x) * cbInstanceData._m0[_2411].x;
    float _2426 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _353) * _365.y) * cbInstanceData._m0[_2411].y;
    float _2431 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _353) * _365.z) * cbInstanceData._m0[_2411].z;
    vec4 _2439 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2453 = ((((_2421 * _508) - _2421) + _2439.x) * cbMtdParam._m0[3u].x) + _2421;
    float _2454 = ((((_2426 * _508) - _2426) + _2439.y) * cbMtdParam._m0[3u].x) + _2426;
    float _2455 = ((((_2431 * _508) - _2431) + _2439.z) * cbMtdParam._m0[3u].x) + _2431;
    float _4409 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4420 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4431 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _2474 = (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2395 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _627))) + ((_2401 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + _2453;
    float _2475 = (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2397 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _627))) + ((_2403 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + _2454;
    float _2476 = (((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2399 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _627))) + ((_2405 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + _2455;
    float _2477 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2485 = cbMtdParam._m0[2u].x * _2453;
    float _2486 = cbMtdParam._m0[2u].y * _2454;
    float _2487 = cbMtdParam._m0[2u].z * _2455;
    float _4457 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2489 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    uint _2490 = _560 + 6u;
    float _2498 = _503 / cbSceneParam._m0[86u].x;
    float _2499 = _504 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _424 : (isnan(_424) ? cbSceneParam._m0[77u].w : min(_424, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_424 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_424) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _424 : min(cbSceneParam._m0[80u].w, _424));
        float _2574 = _2573 / _424;
        float _2585 = _2574 * _475;
        float _2586 = _476 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2589 = _2574 * _477;
        float _2591 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2592 = _2591 + cbSceneParam._m0[79u].w;
        float _2593 = cbSceneParam._m0[79u].w - _2586;
        float _2599 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2589 * _2589));
        float _2602 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2599;
        float _2607 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2609 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2795;
        if (abs((_2587 - _2591) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2795 = ((((_2592 > 0.0) ? exp2(_2607 * _2592) : (2.0 - exp2(_2609 * _2592))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2602;
        }
        else
        {
            float _2739 = 1.0 / cbSceneParam._m0[80u].x;
            float _2740 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : max(_2592, _2593));
            float _2741 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : min(_2592, _2593));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            _2795 = ((abs(_2599 / _2587) * cbSceneParam._m0[80u].y) * ((((_2750 - _2751) * 2.0) - ((exp2(_2607 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0)))) - exp2(_2607 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))))) * _2739)) - ((exp2(_2609 * _2750) - exp2(_2609 * _2751)) * _2739))) + (_2602 * cbSceneParam._m0[80u].z);
        }
        vec4 _2797 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2806 = exp2((_2795 * (-1.44269502162933349609375)) * (1.0 - _2797.w));
        float _2807 = log2(_2806);
        float _2823 = log2(_2518);
        _2611 = (exp2(_2823 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].x)) * _2797.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2613 = (exp2(_2823 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].y)) * _2797.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2615 = (exp2(_2823 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].z)) * _2797.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2617 = _2806 * _2518;
    }
    else
    {
        _2611 = _2515;
        _2613 = _2516;
        _2615 = _2517;
        _2617 = _2518;
    }
    bool _2833;
    vec4 _2627;
    vec4 _2649;
    float _2651;
    float _2655;
    float _2656;
    float _2657;
    float _2660;
    float _2663;
    float _2666;
    float _2667;
    bool _2677;
    for (;;)
    {
        _2627 = cbMatDynParam._m0[0u];
        float _2629 = roundEven(_2627.y);
        bool _2630 = _2629 == 3.0;
        float _2631 = log2(_2617);
        float _2635 = exp2(_2631 * cbSceneParam._m0[78u].x);
        float _2636 = exp2(_2631 * cbSceneParam._m0[78u].y);
        float _2637 = exp2(_2631 * cbSceneParam._m0[78u].z);
        float _2638 = _2635 * _2477;
        float _2639 = _2636 * _2478;
        float _2640 = _2637 * _2479;
        float _2647 = _491 + (-0.5);
        _2649 = cbMtdParam._m0[1u];
        _2651 = _2649.y * _2647;
        float _2654 = (_2629 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2655 = _2654 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2611)));
        _2656 = _2654 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2613)));
        _2657 = _2654 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2615)));
        _2660 = ((_2485 * _2489) * _2635) * _2654;
        _2663 = ((_2486 * _2489) * _2636) * _2654;
        _2666 = ((_2487 * _2489) * _2637) * _2654;
        _2667 = _2647 * 0.999000012874603271484375;
        _2677 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2677)
        {
            if ((cbInstanceData._m0[_560 + 7u].x + _2667) < 0.5)
            {
                _2833 = true;
                break;
            }
        }
        uint _2774 = _561 + uint(_2627.w);
        if ((cbInstanceData._m0[_2774].w < 1.0) && ((cbInstanceData._m0[_2774].w + _2667) < 0.5))
        {
            _2833 = true;
            break;
        }
        if ((_2651 + 1.0) < _2649.x)
        {
            _2833 = true;
            break;
        }
        _2833 = false;
        break;
    }
    float _3038;
    if (_2833)
    {
        discard_state = true;
        _3038 = 0.0;
    }
    else
    {
        _3038 = cbInstanceData._m0[_2490].w;
    }
    SV_Target.x = _2655;
    SV_Target.y = _2656;
    SV_Target.z = _2657;
    SV_Target.w = _3038;
    SV_Target_1.x = _2660;
    SV_Target_1.y = _2663;
    SV_Target_1.z = _2666;
    SV_Target_1.w = cbInstanceData._m0[_2490].w;
    discard_exit();
}


