#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1032;
float _3777;
float _3778;
float _3779;
float _3780;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _259 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = ((_242.x * 4.55000019073486328125) * _259.x) * cbMtdParam._m0[9u].x;
    float _276 = ((_242.y * 4.55000019073486328125) * _259.y) * cbMtdParam._m0[9u].y;
    float _279 = ((_242.z * 4.55000019073486328125) * _259.z) * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _291.z;
    float _301 = exp2(log2(_295 * 22.0) * 260.0);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    vec4 _321 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _333 = ((((isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0))) * (_295 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[11u].x + _321.z);
    float _351 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3799 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _357 = (_352 * _352) * (3.0 - (_352 * 2.0));
    vec4 _369 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _377 = (_291.x * 2.0) + (-1.0);
    float _378 = (_291.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3810 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    float _391 = (cbMtdParam._m0[11u].y * ((_321.x * 2.0) + (-1.0))) + _377;
    float _392 = (cbMtdParam._m0[11u].y * ((_321.y * 2.0) + (-1.0))) + _378;
    float _395 = fma(_384, _218 * NORMAL.x, fma(_392, _225 * TANGENT.x, (_211 * _203) * _391));
    float _398 = fma(_384, _218 * NORMAL.y, fma(_392, _225 * TANGENT.y, (_211 * _204) * _391));
    float _401 = fma(_384, _218 * NORMAL.z, fma(_392, _225 * TANGENT.z, (_211 * _205) * _391));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3821 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _409 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3843 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3854 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _428 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _469 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _479 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _469);
    float _480 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _469);
    float _481 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _469);
    float _485 = inversesqrt(dot(vec3(_479, _480, _481), vec3(_479, _480, _481)));
    float _486 = _479 * _485;
    float _487 = _480 * _485;
    float _488 = _481 * _485;
    vec4 _493 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _495 = _493.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _713 = sqrt(((_479 * _479) + (_480 * _480)) + (_481 * _481));
        float _719 = (cbMatDynParam._m0[5u].x * _713) + cbMatDynParam._m0[5u].y;
        float _3865 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _724 = (cbMatDynParam._m0[5u].z * _713) + cbMatDynParam._m0[5u].w;
        float _3876 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) - _720)) + _720) < ((_495 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _507 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _508 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _510 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _512 = _510.w;
    float _532 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _535 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _538 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    vec4 _540 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _551 = (((_540.y - _409) + (_540.w * _409)) * cbMtdParam._m0[3u].x) + _409;
    uint _564 = uint(roundEven(NORMAL.w)) * 13u;
    uint _565 = _564 + 9u;
    uint _566 = _565 + uint(cbMatDynParam._m0[0u].w);
    float _572 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_566].x;
    float _573 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_566].y;
    float _574 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_566].z;
    float _3887 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    vec4 _578 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _583 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _589 = cbMtdParam._m0[3u].x * _583.x;
    float _602 = (cbMtdParam._m0[3u].x * (((_575 * _512) - _575) + _578.x)) + _575;
    float _603 = (cbMtdParam._m0[3u].x * (((_576 * _512) - _576) + _578.y)) + _576;
    float _604 = (cbMtdParam._m0[3u].x * (((_577 * _512) - _577) + _578.z)) + _577;
    float _605 = 1.0 - _589;
    float _606 = _602 * _605;
    float _607 = _603 * _605;
    float _608 = _604 * _605;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _589;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _589;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _589;
    float _616 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    float _619 = _615 + 0.039999999105930328369140625;
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _507, cbSceneParam._m0[86u].y * _508));
    float _631 = _628.x * TEXCOORD_4;
    float _632 = dot(vec3(_406, _407, _408), vec3(_486, _487, _488));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _406) - _486;
    float _640 = (_635 * _407) - _487;
    float _641 = (_635 * _408) - _488;
    float _645 = abs(dot(vec3(_486, _487, _488), vec3(_406, _407, _408)));
    float _3920 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_551);
    float _659 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _665 = (1.0 - _659) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _666 = _659 * _647;
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1031;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _762 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _766 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _789 = _694 + _406;
        float _790 = _698 + _407;
        float _791 = _702 + _408;
        float _801 = fma(_791, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789)) - _758;
        float _802 = fma(_791, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789)) - _762;
        float _803 = fma(_791, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789)) - _766;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _859 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_825.x + (-0.5));
        float _861 = _859 * (_825.y + (-0.5));
        float _862 = _859 * (_825.z + (-0.5));
        float _869 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_832.x + (-0.5));
        float _871 = _869 * (_832.y + (-0.5));
        float _872 = _869 * (_832.z + (-0.5));
        float _879 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_839.x + (-0.5));
        float _881 = _879 * (_839.y + (-0.5));
        float _882 = _879 * (_839.z + (-0.5));
        float _889 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_846.x + (-0.5));
        float _891 = _889 * (_846.y + (-0.5));
        float _892 = _889 * (_846.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _913 = (dot(vec3(_406, _407, _408), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _923 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3968 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_925 + 1.0))) + _930) * _893;
        float _940 = _861 * 0.5;
        float _941 = _871 * 0.5;
        float _942 = _881 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_406, _407, _408), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _4001 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_967 + 1.0))) + _972) * _894;
        float _982 = _862 * 0.5;
        float _983 = _872 * 0.5;
        float _984 = _882 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_406, _407, _408), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _4034 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1009 + 1.0))) + _1014) * _895;
        _1031 = _862;
        _1033 = _861;
        _1034 = _860;
        _1035 = _872;
        _1036 = _871;
        _1037 = _870;
        _1038 = _882;
        _1039 = _881;
        _1040 = _880;
        _1041 = _895;
        _1042 = _894;
        _1043 = _893;
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _1032;
        _1033 = _1032;
        _1034 = _1032;
        _1035 = _1032;
        _1036 = _1032;
        _1037 = _1032;
        _1038 = _1032;
        _1039 = _1032;
        _1040 = _1032;
        _1041 = _1032;
        _1042 = _1032;
        _1043 = _1032;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1075 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1079 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1083 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1106 = _694 + _406;
        float _1107 = _698 + _407;
        float _1108 = _702 + _408;
        float _1118 = fma(_1108, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106)) - _1075;
        float _1119 = fma(_1108, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106)) - _1079;
        float _1120 = fma(_1108, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106)) - _1083;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1075 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1079 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[35u].z) + ((((((_1083 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1174 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1141.x + (-0.5));
        float _1176 = _1174 * (_1141.y + (-0.5));
        float _1177 = _1174 * (_1141.z + (-0.5));
        float _1184 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1148.x + (-0.5));
        float _1186 = _1184 * (_1148.y + (-0.5));
        float _1187 = _1184 * (_1148.z + (-0.5));
        float _1194 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1155.x + (-0.5));
        float _1196 = _1194 * (_1155.y + (-0.5));
        float _1197 = _1194 * (_1155.z + (-0.5));
        float _1204 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1162.x + (-0.5));
        float _1206 = _1204 * (_1162.y + (-0.5));
        float _1207 = _1204 * (_1162.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_406, _407, _408), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4097 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1238 + 1.0))) + _1243) * _1208;
        float _1253 = _1176 * 0.5;
        float _1254 = _1186 * 0.5;
        float _1255 = _1196 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_406, _407, _408), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4130 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1280 + 1.0))) + _1285) * _1209;
        float _1295 = _1177 * 0.5;
        float _1296 = _1187 * 0.5;
        float _1297 = _1197 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_406, _407, _408), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4163 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1322 + 1.0))) + _1327) * _1210;
        _1344 = _1177;
        _1345 = _1176;
        _1346 = _1175;
        _1347 = _1187;
        _1348 = _1186;
        _1349 = _1185;
        _1350 = _1197;
        _1351 = _1196;
        _1352 = _1195;
        _1353 = _1210;
        _1354 = _1209;
        _1355 = _1208;
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1032;
        _1345 = _1032;
        _1346 = _1032;
        _1347 = _1032;
        _1348 = _1032;
        _1349 = _1032;
        _1350 = _1032;
        _1351 = _1032;
        _1352 = _1032;
        _1353 = _1032;
        _1354 = _1032;
        _1355 = _1032;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1391 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1368));
    float _1412 = _639 * 0.5;
    float _1413 = _640 * 0.5;
    float _1414 = _641 * 0.5;
    float _1415 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1418 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1421 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1455;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1428 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1031, _1035, _1038, _1041));
        float _1432 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1436 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1443 = dot(vec4(cbModelParam._m0[39u]), vec4(_1412, _1413, _1414, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1466;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1457 = dot(vec4(cbModelParam._m0[40u]), vec4(_1412, _1413, _1414, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1470 = (_1466 * cbModelParam._m0[1u].x) + (_1455 * (1.0 - cbModelParam._m0[1u].x));
    float _1480 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1481 = isnan(_1480) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1480 : min(cbModelParam._m0[25u].z, _1480));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1530 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1534 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1538 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1541 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1544 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1547 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1575;
        if (_1541 > 0.0)
        {
            _1575 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1575 = frontier_phi_17_15_ladder;
        }
        float _1749;
        if (_1544 > 0.0)
        {
            _1749 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1749 = frontier_phi_26_22_ladder;
        }
        float _2044;
        if (_1547 > 0.0)
        {
            _2044 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2044 = frontier_phi_38_33_ladder;
        }
        float _2046 = isnan(_1749) ? _1575 : (isnan(_1575) ? _1749 : min(_1575, _1749));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1541) + _1530;
        float _2052 = (_2047 * _1544) + _1534;
        float _2053 = (_2047 * _1547) + _1538;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1481);
            frontier_phi_16_38_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1563 = frontier_phi_16_38_ladder_2;
        _1565 = frontier_phi_16_38_ladder_1;
        _1567 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1481);
        _1563 = _1551.x * cbModelParam._m0[1u].y;
        _1565 = _1551.y * cbModelParam._m0[1u].y;
        _1567 = _1551.z * cbModelParam._m0[1u].y;
    }
    float _1571 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1571 : min(cbModelParam._m0[25u].w, _1571));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1642 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1645 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1754;
        if (_1639 > 0.0)
        {
            _1754 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1754 = frontier_phi_28_24_ladder;
        }
        float _2071;
        if (_1642 > 0.0)
        {
            _2071 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2071 = frontier_phi_40_35_ladder;
        }
        float _2409;
        if (_1645 > 0.0)
        {
            _2409 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2409 = frontier_phi_50_47_ladder;
        }
        float _2411 = isnan(_2071) ? _1754 : (isnan(_1754) ? _2071 : min(_1754, _2071));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1639) + _1628;
        float _2417 = (_2412 * _1642) + _1632;
        float _2418 = (_2412 * _1645) + _1636;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1572);
            frontier_phi_25_50_ladder = _2540.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2540.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2540.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_25_50_ladder_2;
        _1666 = frontier_phi_25_50_ladder_1;
        _1668 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1572);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_665 * _616) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1664 - _1563)) + _1563);
    float _1683 = (((_665 * _618) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1666 - _1565)) + _1565);
    float _1685 = (((_665 * _619) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1668 - _1567)) + _1567);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1741 = _1728 / _1740;
    float _1742 = _1732 / _1740;
    float _1743 = _1736 / _1740;
    float _1890;
    float _1891;
    float _1892;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1770 = ((uint(_1743 > cbSceneParam._m0[59u].y) + uint(_1743 > cbSceneParam._m0[59u].x)) + uint(_1743 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1771 = _1770 + 43u;
        uint _1779 = _1770 + 44u;
        uint _1787 = _1770 + 45u;
        uint _1795 = _1770 + 46u;
        float _1806 = fma(_1740, cbSceneParam._m0[_1771].w, fma(_1736, cbSceneParam._m0[_1771].z, fma(_1732, cbSceneParam._m0[_1771].y, _1728 * cbSceneParam._m0[_1771].x)));
        float _1810 = fma(_1740, cbSceneParam._m0[_1779].w, fma(_1736, cbSceneParam._m0[_1779].z, fma(_1732, cbSceneParam._m0[_1779].y, _1728 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1740, cbSceneParam._m0[_1795].w, fma(_1736, cbSceneParam._m0[_1795].z, fma(_1732, cbSceneParam._m0[_1795].y, _1728 * cbSceneParam._m0[_1795].x)));
        float _1823 = cbSceneParam._m0[33u].z * _1818;
        float _1825 = cbSceneParam._m0[33u].w * _1818;
        float _1828 = fma(_1740, cbSceneParam._m0[_1787].w, fma(_1736, cbSceneParam._m0[_1787].z, fma(_1732, cbSceneParam._m0[_1787].y, _1728 * cbSceneParam._m0[_1787].x))) / _1818;
        float _1876 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
        float _4289 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1883 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1823 + _1806) / _1818, (_1825 + _1810) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1806) / _1818, (_1810 - _1823) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1823) / _1818, (_1810 - _1825) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1825) / _1818, (_1823 + _1810) / _1818), _1828), 0.0)).x), vec4(0.25)));
        _1890 = 1.0 - (_1883 * cbSceneParam._m0[34u].x);
        _1891 = 1.0 - (_1883 * cbSceneParam._m0[34u].y);
        _1892 = 1.0 - (_1883 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1890 = 1.0;
        _1891 = 1.0;
        _1892 = 1.0;
    }
    float _1956;
    float _1958;
    float _1960;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1944 = fma(_1740, cbSceneParam._m0[63u].w, fma(_1736, cbSceneParam._m0[63u].z, fma(_1732, cbSceneParam._m0[63u].y, _1728 * cbSceneParam._m0[63u].x)));
        float _1945 = fma(_1740, cbSceneParam._m0[60u].w, fma(_1736, cbSceneParam._m0[60u].z, fma(_1732, cbSceneParam._m0[60u].y, _1728 * cbSceneParam._m0[60u].x))) / _1944;
        float _1946 = fma(_1740, cbSceneParam._m0[61u].w, fma(_1736, cbSceneParam._m0[61u].z, fma(_1732, cbSceneParam._m0[61u].y, _1728 * cbSceneParam._m0[61u].x))) / _1944;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1945 >= cbSceneParam._m0[64u].x) && (_1946 >= cbSceneParam._m0[64u].y)) && (_1945 <= cbSceneParam._m0[64u].z)) && (_1946 <= cbSceneParam._m0[64u].w))
        {
            float _2084 = fma(_1740, cbSceneParam._m0[62u].w, fma(_1736, cbSceneParam._m0[62u].z, fma(_1732, cbSceneParam._m0[62u].y, _1728 * cbSceneParam._m0[62u].x))) / _1944;
            float _2088 = isnan(cbSceneParam._m0[41u].w) ? _2084 : (isnan(_2084) ? cbSceneParam._m0[41u].w : max(_2084, cbSceneParam._m0[41u].w));
            float _2131 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
            float _4305 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
            float _2138 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1945, cbSceneParam._m0[33u].w + _1946), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1945, _1946 - cbSceneParam._m0[33u].z), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].z, _1946 - cbSceneParam._m0[33u].w), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1946), _2088), 0.0)).x), vec4(0.25)));
            float _2142 = 1.0 - (_2138 * cbSceneParam._m0[34u].x);
            float _2143 = 1.0 - (_2138 * cbSceneParam._m0[34u].y);
            float _2144 = 1.0 - (_2138 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2144) ? _1892 : (isnan(_1892) ? _2144 : min(_1892, _2144));
            frontier_phi_37_36_ladder_1 = isnan(_2143) ? _1891 : (isnan(_1891) ? _2143 : min(_1891, _2143));
            frontier_phi_37_36_ladder_2 = isnan(_2142) ? _1890 : (isnan(_1890) ? _2142 : min(_1890, _2142));
        }
        else
        {
            frontier_phi_37_36_ladder = _1892;
            frontier_phi_37_36_ladder_1 = _1891;
            frontier_phi_37_36_ladder_2 = _1890;
        }
        _1956 = frontier_phi_37_36_ladder_2;
        _1958 = frontier_phi_37_36_ladder_1;
        _1960 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1956 = _1890;
        _1958 = _1891;
        _1960 = _1892;
    }
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_564 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1975 = _631 + (-1.0);
    float _1980 = (cbLight._m0[_1968].x * _1975) + 1.0;
    float _1981 = (cbLight._m0[_1968].y * _1975) + 1.0;
    float _1982 = (cbLight._m0[_1968].z * _1975) + 1.0;
    float _1983 = (cbLight._m0[_1968].w * _1975) + 1.0;
    uint _1984 = _1967 + 5u;
    float _1990 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _1994 = _1967 + 4u;
    float _2003 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _2007 = _1967 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_406, _407, _408));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_406, _407, _408));
    float _4341 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4352 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1984].x * _1990) * _2028) + (((cbLight._m0[_1994].x * _1956) * _2003) * _2026);
    float _2036 = ((_1990 * cbLight._m0[_1984].y) * _2028) + (((cbLight._m0[_1994].y * _1958) * _2003) * _2026);
    float _2037 = ((_1990 * cbLight._m0[_1984].z) * _2028) + (((cbLight._m0[_1994].z * _1960) * _2003) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1967 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2043)
    {
        _2145 = _2035;
        _2147 = _2036;
        _2149 = _2037;
    }
    else
    {
        uint _2153 = _1967 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_1967 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4363 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2172 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2035;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2036;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2037;
    }
    bool _2152 = _2041.y == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2152)
    {
        _2207 = _2145;
        _2209 = _2147;
        _2211 = _2149;
    }
    else
    {
        uint _2380 = _1967 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_1967 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4379 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2399 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2207 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2145;
        _2209 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2147;
        _2211 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2149;
    }
    uint _2214 = _1967 + 8u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _551) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_1967].x + _486;
    float _2230 = cbLight._m0[_1967].y + _487;
    float _2231 = cbLight._m0[_1967].z + _488;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1967].xyz));
    float _4395 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2243 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2244 = dot(vec3(_406, _407, _408), vec3(_2236, _2237, _2238));
    float _4417 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2236, _2237, _2238));
    float _4428 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2228 * _2228;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
    float _2265 = 0.959999978542327880859375 - _613;
    float _2267 = 0.959999978542327880859375 - _614;
    float _2268 = 0.959999978542327880859375 - _615;
    float _2275 = 1.0 - _2228;
    float _2286 = (0.5 / (((_2243 * ((_2242 * _2275) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2275) + _2228) * _2242))) * _2242;
    float _4439 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    uint _2302 = _1967 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _551) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2007].x + _486;
    float _2316 = cbLight._m0[_2007].y + _487;
    float _2317 = cbLight._m0[_2007].z + _488;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2007].xyz));
    float _4450 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2329 = dot(vec3(_406, _407, _408), vec3(_2322, _2323, _2324));
    float _4461 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2322, _2323, _2324));
    float _4472 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
    float _2355 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2243 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2355) + _2314) * _2328))) * _2328;
    float _4483 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2377 = (((((_2348 * _2265) + _616) * cbLight._m0[_2302].x) * _2367) * _1990) + ((((cbLight._m0[_2214].x * _1956) * ((_2264 * _2265) + _616)) * _2288) * _2003);
    float _2378 = (((((_2348 * _2267) + _618) * cbLight._m0[_2302].y) * _2367) * _1990) + ((((cbLight._m0[_2214].y * _1958) * ((_2264 * _2267) + _618)) * _2288) * _2003);
    float _2379 = (((((_2348 * _2268) + _619) * cbLight._m0[_2302].z) * _2367) * _1990) + ((((cbLight._m0[_2214].z * _1960) * ((_2264 * _2268) + _619)) * _2288) * _2003);
    float _2435;
    float _2437;
    float _2439;
    if (_2043)
    {
        _2435 = _2377;
        _2437 = _2378;
        _2439 = _2379;
    }
    else
    {
        uint _2441 = _1967 + 2u;
        uint _2445 = _1967 + 10u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _551) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _486;
        float _2462 = cbLight._m0[_2441].y + _487;
        float _2463 = cbLight._m0[_2441].z + _488;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2441].xyz));
        float _4494 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2475 = dot(vec3(_406, _407, _408), vec3(_2468, _2469, _2470));
        float _4505 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4516 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2243 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2501) + _2460) * _2474))) * _2474;
        float _4527 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2435 = (((((_2494 * _2265) + _616) * cbLight._m0[_2445].x) * _2513) * _2514) + _2377;
        _2437 = (((((_2494 * _2267) + _618) * cbLight._m0[_2445].y) * _2513) * _2514) + _2378;
        _2439 = (((((_2494 * _2268) + _619) * cbLight._m0[_2445].z) * _2513) * _2514) + _2379;
    }
    float _2545;
    float _2547;
    float _2549;
    if (_2152)
    {
        _2545 = _2435;
        _2547 = _2437;
        _2549 = _2439;
    }
    else
    {
        uint _2556 = _1967 + 3u;
        uint _2560 = _1967 + 11u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _551) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _486;
        float _2577 = cbLight._m0[_2556].y + _487;
        float _2578 = cbLight._m0[_2556].z + _488;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2556].xyz));
        float _4543 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2590 = dot(vec3(_406, _407, _408), vec3(_2583, _2584, _2585));
        float _4554 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4565 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2616 = 1.0 - _2575;
        float _2626 = (0.5 / (((_2243 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2616) + _2575) * _2589))) * _2589;
        float _4576 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2545 = (((((_2609 * _2265) + _616) * cbLight._m0[_2560].x) * _2628) * _2629) + _2435;
        _2547 = (((((_2609 * _2267) + _618) * cbLight._m0[_2560].y) * _2628) * _2629) + _2437;
        _2549 = (((((_2609 * _2268) + _619) * cbLight._m0[_2560].z) * _2628) * _2629) + _2439;
    }
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_1965.y == 0u)
    {
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.x;
        uint _2662 = uint((float(_2650.y) * floor(float(uint(cbSceneParam._m0[85u].y * _508) / _2651))) + floor(float(uint(cbSceneParam._m0[85u].x * _507) / _2651)));
        float _2672 = (log2(_1743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2673 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        uint _2676 = uint(isnan(14.0) ? _2673 : (isnan(_2673) ? 14.0 : min(_2673, 14.0)));
        uvec4 _2681 = texelFetch(g_lightClusterGridBuffer, int(((_2676 << 2u) + (_2662 << 6u)) >> 2u));
        uint _2682 = _2681.x;
        uint _2683 = _2650.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2683 >> 4u) & 15u)) + 4294967295u) & _2682) == 0u) || ((_2683 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            uint _2995 = 0u;
            uint _3004;
            bool _3005;
            for (;;)
            {
                _3004 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_2995 << 2u)) >> 2u)).x;
                _3005 = _3004 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3005)
                {
                    frontier_phi_71_pred = _2994;
                    frontier_phi_71_pred_1 = _2993;
                    frontier_phi_71_pred_2 = _2992;
                    frontier_phi_71_pred_3 = _2991;
                    frontier_phi_71_pred_4 = _2990;
                    frontier_phi_71_pred_5 = _2989;
                }
                else
                {
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    uint _3140;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _3004;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    for (;;)
                    {
                        uint _3144 = uint(findLSB(_3140)) + (_2995 << 5u);
                        uint _3141 = (_3140 + 4294967295u) & _3140;
                        uint _3146 = _3144 * 48u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3166 = (_3144 * 48u) + 4u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3185 = (_3144 * 48u) + 8u;
                        vec3 _3196 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x));
                        float _3200 = _3160.x - _1741;
                        float _3201 = _3160.y - _1742;
                        float _3202 = _3160.z - _1743;
                        float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                        float _3206 = inversesqrt(_3203);
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3210 = dot(vec3(_532, _535, _538), vec3(_3207, _3208, _3209));
                        float _3215 = 1.0 - (_3203 * _3160.w);
                        float _4602 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3217 = sqrt(_3203) * _3179.w;
                        float _3220 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3210) + _3221;
                        float _3227 = _3217 * _3217;
                        float _3231 = ((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3216) / ((_3227 * 0.699999988079071044921875) + 1.0);
                        float _3235 = (-0.0) - _1741;
                        float _3236 = (-0.0) - _1742;
                        float _3237 = (-0.0) - _1743;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3251 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _647;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3242 + _3207;
                        float _3263 = _3243 + _3208;
                        float _3264 = _3244 + _3209;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_532, _535, _538), vec3(_3242, _3243, _3244));
                        float _4618 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3276 = dot(vec3(_532, _535, _538), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4629 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3220 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3210) + _3285;
                        float _4640 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4651 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3283 * _3283) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125))) * _3216;
                        _3064 = (_3231 * _3179.x) + _3137;
                        _3065 = (_3231 * _3179.y) + _3138;
                        _3066 = (_3231 * _3179.z) + _3139;
                        _3061 = (_3311 * _3196.x) + _3134;
                        _3062 = (_3311 * _3196.y) + _3135;
                        _3063 = (_3311 * _3196.z) + _3136;
                        if (_3141 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3141;
                        }
                    }
                    frontier_phi_71_pred = _3066;
                    frontier_phi_71_pred_1 = _3065;
                    frontier_phi_71_pred_2 = _3064;
                    frontier_phi_71_pred_3 = _3063;
                    frontier_phi_71_pred_4 = _3062;
                    frontier_phi_71_pred_5 = _3061;
                }
                _2838 = frontier_phi_71_pred;
                _2836 = frontier_phi_71_pred_1;
                _2834 = frontier_phi_71_pred_2;
                _2832 = frontier_phi_71_pred_3;
                _2830 = frontier_phi_71_pred_4;
                _2828 = frontier_phi_71_pred_5;
                uint _2996 = _2995 + 1u;
                if (_2996 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2989 = _2828;
                    _2990 = _2830;
                    _2991 = _2832;
                    _2992 = _2834;
                    _2993 = _2836;
                    _2994 = _2838;
                    _2995 = _2996;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        if (((4294967295u << _2844) & _2682) == 0u)
        {
            _2957 = _2827;
            _2959 = _2829;
            _2961 = _2831;
            _2963 = _2833;
            _2965 = _2835;
            _2967 = _2837;
        }
        else
        {
            float _2982 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
            float _2983 = _2982 * _1741;
            float _2984 = _2982 * _1742;
            float _2985 = _2982 * _1743;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _3117 = _2827;
                float _3118 = _2829;
                float _3119 = _2831;
                float _3120 = _2833;
                float _3121 = _2835;
                float _3122 = _2837;
                uint _3123 = _2844;
                uint _3132;
                bool _3133;
                for (;;)
                {
                    _3132 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                    _3133 = _3132 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3133)
                    {
                        frontier_phi_82_pred = _3122;
                        frontier_phi_82_pred_1 = _3121;
                        frontier_phi_82_pred_2 = _3120;
                        frontier_phi_82_pred_3 = _3119;
                        frontier_phi_82_pred_4 = _3118;
                        frontier_phi_82_pred_5 = _3117;
                    }
                    else
                    {
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        uint _3344 = _3132;
                        uint _3345;
                        vec4 _3370;
                        float _3371;
                        vec4 _3386;
                        vec3 _3398;
                        vec4 _3414;
                        vec4 _3430;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3355 = ((_3123 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3344));
                            _3345 = (_3344 + 4294967295u) & _3344;
                            uint _3357 = _3355 * 40u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3371 = _3370.w;
                            uint _3373 = (_3355 * 40u) + 4u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3355 * 40u) + 8u;
                            _3398 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x));
                            uint _3401 = (_3355 * 40u) + 16u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3417 = (_3355 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3433 = (_3355 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3355 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_1743, _3465.z, fma(_1742, _3465.y, _3465.x * _1741)) + _3465.w;
                            _3478 = !((fma(_1743, _3446.z, fma(_1742, _3446.y, _3446.x * _1741)) + _3446.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3370.x - _1741;
                                float _3506 = _3370.y - _1742;
                                float _3507 = _3370.z - _1743;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3371 * _3371));
                                float _4662 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3523 = sqrt(_3508) * _3386.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_532, _535, _538))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_1743, _3414.z, fma(_1742, _3414.y, _3414.x * _1741)) + _3414.w) / _3477;
                                float _3537 = (fma(_1743, _3430.z, fma(_1742, _3430.y, _3430.x * _1741)) + _3430.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4678 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _647;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2983;
                                float _3567 = _3513 - _2984;
                                float _3568 = _3514 - _2985;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2983, (-0.0) - _2984, (-0.0) - _2985));
                                float _4689 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3580 = dot(vec3(_532, _535, _538), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4700 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_532, _535, _538), vec3(_3512, _3513, _3514))) + _3589;
                                float _4711 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4722 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3543 * _3386.z;
                                frontier_phi_88_pred_1 = _3543 * _3386.y;
                                frontier_phi_88_pred_2 = _3543 * _3386.x;
                                frontier_phi_88_pred_3 = _3617 * _3398.z;
                                frontier_phi_88_pred_4 = _3617 * _3398.y;
                                frontier_phi_88_pred_5 = _3617 * _3398.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_88_pred;
                            _3625 = frontier_phi_88_pred_1;
                            _3624 = frontier_phi_88_pred_2;
                            _3623 = frontier_phi_88_pred_3;
                            _3622 = frontier_phi_88_pred_4;
                            _3621 = frontier_phi_88_pred_5;
                            _3328 = _3624 + _3341;
                            _3329 = _3625 + _3342;
                            _3330 = _3626 + _3343;
                            _3325 = _3621 + _3338;
                            _3326 = _3622 + _3339;
                            _3327 = _3623 + _3340;
                            if (_3345 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3345;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3330;
                        frontier_phi_82_pred_1 = _3329;
                        frontier_phi_82_pred_2 = _3328;
                        frontier_phi_82_pred_3 = _3327;
                        frontier_phi_82_pred_4 = _3326;
                        frontier_phi_82_pred_5 = _3325;
                    }
                    _2968 = frontier_phi_82_pred;
                    _2966 = frontier_phi_82_pred_1;
                    _2964 = frontier_phi_82_pred_2;
                    _2962 = frontier_phi_82_pred_3;
                    _2960 = frontier_phi_82_pred_4;
                    _2958 = frontier_phi_82_pred_5;
                    uint _3124 = _3123 + 1u;
                    if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3117 = _2958;
                        _3118 = _2960;
                        _3119 = _2962;
                        _3120 = _2964;
                        _3121 = _2966;
                        _3122 = _2968;
                        _3123 = _3124;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2964;
                frontier_phi_63_64_ladder_1 = _2968;
                frontier_phi_63_64_ladder_2 = _2966;
                frontier_phi_63_64_ladder_3 = _2962;
                frontier_phi_63_64_ladder_4 = _2960;
                frontier_phi_63_64_ladder_5 = _2958;
            }
            else
            {
                frontier_phi_63_64_ladder = _2833;
                frontier_phi_63_64_ladder_1 = _2837;
                frontier_phi_63_64_ladder_2 = _2835;
                frontier_phi_63_64_ladder_3 = _2831;
                frontier_phi_63_64_ladder_4 = _2829;
                frontier_phi_63_64_ladder_5 = _2827;
            }
            _2957 = frontier_phi_63_64_ladder_5;
            _2959 = frontier_phi_63_64_ladder_4;
            _2961 = frontier_phi_63_64_ladder_3;
            _2963 = frontier_phi_63_64_ladder;
            _2965 = frontier_phi_63_64_ladder_2;
            _2967 = frontier_phi_63_64_ladder_1;
        }
        float _2972 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _2695 = (_2972 * _2963) + _2207;
        _2697 = (_2972 * _2965) + _2209;
        _2699 = (_2972 * _2967) + _2211;
        _2701 = ((_2957 * _616) * _2972) + _2545;
        _2703 = ((_2959 * _618) * _2972) + _2547;
        _2705 = ((_2961 * _619) * _2972) + _2549;
    }
    else
    {
        _2695 = _2207;
        _2697 = _2209;
        _2699 = _2211;
        _2701 = _2545;
        _2703 = _2547;
        _2705 = _2549;
    }
    uint _2711 = _565 + uint(cbMatDynParam._m0[0u].w);
    float _2721 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _357) * _369.x) * cbInstanceData._m0[_2711].x;
    float _2726 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _357) * _369.y) * cbInstanceData._m0[_2711].y;
    float _2731 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _357) * _369.z) * cbInstanceData._m0[_2711].z;
    vec4 _2739 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2753 = ((((_2721 * _512) - _2721) + _2739.x) * cbMtdParam._m0[3u].x) + _2721;
    float _2754 = ((((_2726 * _512) - _2726) + _2739.y) * cbMtdParam._m0[3u].x) + _2726;
    float _2755 = ((((_2731 * _512) - _2731) + _2739.z) * cbMtdParam._m0[3u].x) + _2731;
    float _4738 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4749 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4760 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2774 = (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2695 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _631))) + ((_2701 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + _2753;
    float _2775 = (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2697 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _631))) + ((_2703 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + _2754;
    float _2776 = (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2699 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _631))) + ((_2705 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + _2755;
    float _2777 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2778 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2779 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2785 = cbMtdParam._m0[2u].x * _2753;
    float _2786 = cbMtdParam._m0[2u].y * _2754;
    float _2787 = cbMtdParam._m0[2u].z * _2755;
    float _4786 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2789 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    uint _2790 = _564 + 6u;
    float _2798 = _507 / cbSceneParam._m0[86u].x;
    float _2799 = _508 / cbSceneParam._m0[86u].y;
    vec4 _2813 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, (log2((isnan(cbSceneParam._m0[77u].w) ? _428 : (isnan(_428) ? cbSceneParam._m0[77u].w : min(_428, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2815 = _2813.x;
    float _2816 = _2813.y;
    float _2817 = _2813.z;
    float _2818 = _2813.w;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_428 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_428) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _428 : min(cbSceneParam._m0[80u].w, _428));
        float _2853 = _2852 / _428;
        float _2864 = _2853 * _479;
        float _2865 = _480 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2868 = _2853 * _481;
        float _2870 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2871 = _2870 + cbSceneParam._m0[79u].w;
        float _2872 = cbSceneParam._m0[79u].w - _2865;
        float _2878 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2868 * _2868));
        float _2881 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2878;
        float _2886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3074;
        if (abs((_2866 - _2870) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3074 = ((((_2871 > 0.0) ? exp2(_2886 * _2871) : (2.0 - exp2(_2888 * _2871))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2881;
        }
        else
        {
            float _3018 = 1.0 / cbSceneParam._m0[80u].x;
            float _3019 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : max(_2871, _2872));
            float _3020 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : min(_2871, _2872));
            float _3029 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : min(_3019, 0.0));
            float _3030 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : min(_3020, 0.0));
            _3074 = ((abs(_2878 / _2866) * cbSceneParam._m0[80u].y) * ((((_3029 - _3030) * 2.0) - ((exp2(_2886 * (isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0)))) - exp2(_2886 * (isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))))) * _3018)) - ((exp2(_2888 * _3029) - exp2(_2888 * _3030)) * _3018))) + (_2881 * cbSceneParam._m0[80u].z);
        }
        vec4 _3076 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, 1.0), 0.0);
        float _3085 = exp2((_3074 * (-1.44269502162933349609375)) * (1.0 - _3076.w));
        float _3086 = log2(_3085);
        float _3102 = log2(_2818);
        _2890 = (exp2(_3102 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].x)) * _3076.x) / cbSceneParam._m0[78u].x)) + _2815;
        _2892 = (exp2(_3102 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].y)) * _3076.y) / cbSceneParam._m0[78u].y)) + _2816;
        _2894 = (exp2(_3102 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].z)) * _3076.z) / cbSceneParam._m0[78u].z)) + _2817;
        _2896 = _3085 * _2818;
    }
    else
    {
        _2890 = _2815;
        _2892 = _2816;
        _2894 = _2817;
        _2896 = _2818;
    }
    bool _3112;
    vec4 _2906;
    vec4 _2928;
    float _2930;
    float _2934;
    float _2935;
    float _2936;
    float _2939;
    float _2942;
    float _2945;
    float _2946;
    bool _2956;
    for (;;)
    {
        _2906 = cbMatDynParam._m0[0u];
        float _2908 = roundEven(_2906.y);
        bool _2909 = _2908 == 3.0;
        float _2910 = log2(_2896);
        float _2914 = exp2(_2910 * cbSceneParam._m0[78u].x);
        float _2915 = exp2(_2910 * cbSceneParam._m0[78u].y);
        float _2916 = exp2(_2910 * cbSceneParam._m0[78u].z);
        float _2917 = _2914 * _2777;
        float _2918 = _2915 * _2778;
        float _2919 = _2916 * _2779;
        float _2926 = _495 + (-0.5);
        _2928 = cbMtdParam._m0[1u];
        _2930 = _2928.y * _2926;
        float _2933 = (_2908 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2934 = _2933 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2890)));
        _2935 = _2933 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2892)));
        _2936 = _2933 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2894)));
        _2939 = ((_2785 * _2789) * _2914) * _2933;
        _2942 = ((_2786 * _2789) * _2915) * _2933;
        _2945 = ((_2787 * _2789) * _2916) * _2933;
        _2946 = _2926 * 0.999000012874603271484375;
        _2956 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2956)
        {
            if ((cbInstanceData._m0[_564 + 7u].x + _2946) < 0.5)
            {
                _3112 = true;
                break;
            }
        }
        uint _3053 = _565 + uint(_2906.w);
        if ((cbInstanceData._m0[_3053].w < 1.0) && ((cbInstanceData._m0[_3053].w + _2946) < 0.5))
        {
            _3112 = true;
            break;
        }
        if ((_2930 + 1.0) < _2928.x)
        {
            _3112 = true;
            break;
        }
        _3112 = false;
        break;
    }
    float _3316;
    if (_3112)
    {
        discard_state = true;
        _3316 = 0.0;
    }
    else
    {
        _3316 = cbInstanceData._m0[_2790].w;
    }
    SV_Target.x = _2934;
    SV_Target.y = _2935;
    SV_Target.z = _2936;
    SV_Target.w = _3316;
    SV_Target_1.x = _2939;
    SV_Target_1.y = _2942;
    SV_Target_1.z = _2945;
    SV_Target_1.w = cbInstanceData._m0[_2790].w;
    discard_exit();
}


