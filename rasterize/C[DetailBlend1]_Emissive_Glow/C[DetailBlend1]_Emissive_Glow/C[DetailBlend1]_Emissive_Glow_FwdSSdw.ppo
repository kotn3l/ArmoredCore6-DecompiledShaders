#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _985;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _253 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = ((_236.x * 4.55000019073486328125) * _253.x) * cbMtdParam._m0[9u].x;
    float _270 = ((_236.y * 4.55000019073486328125) * _253.y) * cbMtdParam._m0[9u].y;
    float _273 = ((_236.z * 4.55000019073486328125) * _253.z) * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _289 = _285.z;
    float _295 = exp2(log2(_289 * 22.0) * 260.0);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    vec4 _315 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _327 = ((((isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0))) * (_289 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[11u].x + _315.z);
    float _345 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3427 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _351 = (_346 * _346) * (3.0 - (_346 * 2.0));
    vec4 _363 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _371 = (_285.x * 2.0) + (-1.0);
    float _372 = (_285.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_371, _372), vec2(_371, _372));
    float _3438 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _378 = sqrt(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))));
    float _385 = (cbMtdParam._m0[11u].y * ((_315.x * 2.0) + (-1.0))) + _371;
    float _386 = (cbMtdParam._m0[11u].y * ((_315.y * 2.0) + (-1.0))) + _372;
    float _389 = fma(_378, _212 * NORMAL.x, fma(_386, _219 * TANGENT.x, (_205 * _197) * _385));
    float _392 = fma(_378, _212 * NORMAL.y, fma(_386, _219 * TANGENT.y, (_205 * _198) * _385));
    float _395 = fma(_378, _212 * NORMAL.z, fma(_386, _219 * TANGENT.z, (_205 * _199) * _385));
    float _399 = inversesqrt(dot(vec3(_389, _392, _395), vec3(_389, _392, _395)));
    float _400 = _399 * _389;
    float _401 = _399 * _392;
    float _402 = _399 * _395;
    float _3449 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _403 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3471 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3482 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _422 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _473 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _463);
    float _474 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _463);
    float _475 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _463);
    float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
    float _480 = _473 * _479;
    float _481 = _474 * _479;
    float _482 = _475 * _479;
    float _488 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _489 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _491 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _493 = _491.w;
    float _514 = fma(_402, cbSceneParam._m0[5u].z, fma(_401, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _400));
    float _517 = fma(_402, cbSceneParam._m0[6u].z, fma(_401, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _400));
    float _520 = fma(_402, cbSceneParam._m0[7u].z, fma(_401, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _400));
    vec4 _522 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _533 = (((_522.y - _403) + (_522.w * _403)) * cbMtdParam._m0[3u].x) + _403;
    uint _546 = uint(roundEven(NORMAL.w)) * 13u;
    uint _547 = _546 + 9u;
    uint _548 = _547 + uint(cbMatDynParam._m0[0u].w);
    float _554 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_548].x;
    float _555 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_548].y;
    float _556 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_548].z;
    float _3493 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    vec4 _560 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _565 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _571 = cbMtdParam._m0[3u].x * _565.x;
    float _584 = (cbMtdParam._m0[3u].x * (((_557 * _493) - _557) + _560.x)) + _557;
    float _585 = (cbMtdParam._m0[3u].x * (((_558 * _493) - _558) + _560.y)) + _558;
    float _586 = (cbMtdParam._m0[3u].x * (((_559 * _493) - _559) + _560.z)) + _559;
    float _587 = 1.0 - _571;
    float _588 = _584 * _587;
    float _589 = _585 * _587;
    float _590 = _586 * _587;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _571;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _571;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _571;
    float _598 = _595 + 0.039999999105930328369140625;
    float _600 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _488, cbSceneParam._m0[86u].y * _489));
    float _613 = _610.x * TEXCOORD_4;
    float _614 = dot(vec3(_400, _401, _402), vec3(_480, _481, _482));
    float _617 = _614 * 2.0;
    float _621 = (_617 * _400) - _480;
    float _622 = (_617 * _401) - _481;
    float _623 = (_617 * _402) - _482;
    float _627 = abs(dot(vec3(_480, _481, _482), vec3(_400, _401, _402)));
    float _3526 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _629 = sqrt(_533);
    float _641 = exp2((_629 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_629 * 3.0));
    float _647 = (1.0 - _641) * ((_629 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _648 = _641 * _629;
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _984;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _711 = fma(_684, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676));
        float _715 = fma(_684, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676));
        float _719 = fma(_684, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676));
        float _742 = _676 + _400;
        float _743 = _680 + _401;
        float _744 = _684 + _402;
        float _754 = fma(_744, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742)) - _711;
        float _755 = fma(_744, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742)) - _715;
        float _756 = fma(_744, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742)) - _719;
        float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
        float _773 = ((_760 * _754) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_711 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_760 * _755) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_715 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_760 * _756) / cbModelParam._m0[34u].z) + ((((((_719 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        float _812 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_778.x + (-0.5));
        float _814 = _812 * (_778.y + (-0.5));
        float _815 = _812 * (_778.z + (-0.5));
        float _822 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_785.x + (-0.5));
        float _824 = _822 * (_785.y + (-0.5));
        float _825 = _822 * (_785.z + (-0.5));
        float _832 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_792.x + (-0.5));
        float _834 = _832 * (_792.y + (-0.5));
        float _835 = _832 * (_792.z + (-0.5));
        float _842 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_799.x + (-0.5));
        float _844 = _842 * (_799.y + (-0.5));
        float _845 = _842 * (_799.z + (-0.5));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = _813 * 0.5;
        float _850 = _823 * 0.5;
        float _851 = _833 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _866 = (dot(vec3(_400, _401, _402), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _876 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3574 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_878 + 1.0))) + _883) * _846;
        float _893 = _814 * 0.5;
        float _894 = _824 * 0.5;
        float _895 = _834 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(_400, _401, _402), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3607 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_920 + 1.0))) + _925) * _847;
        float _935 = _815 * 0.5;
        float _936 = _825 * 0.5;
        float _937 = _835 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_400, _401, _402), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3640 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_962 + 1.0))) + _967) * _848;
        _984 = _815;
        _986 = _814;
        _987 = _813;
        _988 = _825;
        _989 = _824;
        _990 = _823;
        _991 = _835;
        _992 = _834;
        _993 = _833;
        _994 = _848;
        _995 = _847;
        _996 = _846;
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
    }
    else
    {
        _984 = _985;
        _986 = _985;
        _987 = _985;
        _988 = _985;
        _989 = _985;
        _990 = _985;
        _991 = _985;
        _992 = _985;
        _993 = _985;
        _994 = _985;
        _995 = _985;
        _996 = _985;
        _997 = 0.0;
        _998 = 0.0;
        _999 = 0.0;
    }
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1025 = fma(_684, cbModelParam._m0[30u].z, fma(_680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _676));
        float _1029 = fma(_684, cbModelParam._m0[31u].z, fma(_680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _676));
        float _1033 = fma(_684, cbModelParam._m0[32u].z, fma(_680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _676));
        float _1056 = _676 + _400;
        float _1057 = _680 + _401;
        float _1058 = _684 + _402;
        float _1068 = fma(_1058, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056)) - _1025;
        float _1069 = fma(_1058, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056)) - _1029;
        float _1070 = fma(_1058, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056)) - _1033;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1025 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1029 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[35u].z) + ((((((_1033 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1124 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1091.x + (-0.5));
        float _1126 = _1124 * (_1091.y + (-0.5));
        float _1127 = _1124 * (_1091.z + (-0.5));
        float _1134 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1098.x + (-0.5));
        float _1136 = _1134 * (_1098.y + (-0.5));
        float _1137 = _1134 * (_1098.z + (-0.5));
        float _1144 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1105.x + (-0.5));
        float _1146 = _1144 * (_1105.y + (-0.5));
        float _1147 = _1144 * (_1105.z + (-0.5));
        float _1154 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1112.x + (-0.5));
        float _1156 = _1154 * (_1112.y + (-0.5));
        float _1157 = _1154 * (_1112.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_400, _401, _402), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3703 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1188 + 1.0))) + _1193) * _1158;
        float _1203 = _1126 * 0.5;
        float _1204 = _1136 * 0.5;
        float _1205 = _1146 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_400, _401, _402), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3736 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1230 + 1.0))) + _1235) * _1159;
        float _1245 = _1127 * 0.5;
        float _1246 = _1137 * 0.5;
        float _1247 = _1147 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_400, _401, _402), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3769 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1272 + 1.0))) + _1277) * _1160;
        _1294 = _1127;
        _1295 = _1126;
        _1296 = _1125;
        _1297 = _1137;
        _1298 = _1136;
        _1299 = _1135;
        _1300 = _1147;
        _1301 = _1146;
        _1302 = _1145;
        _1303 = _1160;
        _1304 = _1159;
        _1305 = _1158;
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _985;
        _1295 = _985;
        _1296 = _985;
        _1297 = _985;
        _1298 = _985;
        _1299 = _985;
        _1300 = _985;
        _1301 = _985;
        _1302 = _985;
        _1303 = _985;
        _1304 = _985;
        _1305 = _985;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1341 = fma(_1320, cbSceneParam._m0[89u].z, fma(_1319, cbSceneParam._m0[89u].y, _1318 * cbSceneParam._m0[89u].x));
    float _1344 = fma(_1320, cbSceneParam._m0[90u].z, fma(_1319, cbSceneParam._m0[90u].y, _1318 * cbSceneParam._m0[90u].x));
    float _1347 = fma(_1320, cbSceneParam._m0[91u].z, fma(_1319, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1318));
    float _1362 = _621 * 0.5;
    float _1363 = _622 * 0.5;
    float _1364 = _623 * 0.5;
    float _1365 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1368 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1371 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1405;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1378 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_984, _988, _991, _994));
        float _1382 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_986, _989, _992, _995));
        float _1386 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_987, _990, _993, _996));
        float _1393 = dot(vec4(cbModelParam._m0[39u]), vec4(_1362, _1363, _1364, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1416;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1407 = dot(vec4(cbModelParam._m0[40u]), vec4(_1362, _1363, _1364, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1420 = (_1416 * cbModelParam._m0[1u].x) + (_1405 * (1.0 - cbModelParam._m0[1u].x));
    float _1430 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1430 : min(cbModelParam._m0[25u].z, _1430));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1480 = fma(_684, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676)) + cbModelParam._m0[13u].w;
        float _1484 = fma(_684, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676)) + cbModelParam._m0[14u].w;
        float _1488 = fma(_684, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676)) + cbModelParam._m0[15u].w;
        float _1491 = fma(_623, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621));
        float _1494 = fma(_623, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621));
        float _1497 = fma(_623, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621));
        float _1525;
        if (_1491 > 0.0)
        {
            _1525 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1525 = frontier_phi_14_12_ladder;
        }
        float _1751;
        if (_1494 > 0.0)
        {
            _1751 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1751 = frontier_phi_23_19_ladder;
        }
        float _2008;
        if (_1497 > 0.0)
        {
            _2008 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2008 = frontier_phi_35_30_ladder;
        }
        float _2010 = isnan(_1751) ? _1525 : (isnan(_1525) ? _1751 : min(_1525, _1751));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1491) + _1480;
        float _2016 = (_2011 * _1494) + _1484;
        float _2017 = (_2011 * _1497) + _1488;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2020 = (-1.0) - _2018;
        float _2022 = _2018 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2017 > _2022) || ((_2017 < _2020) || ((_2016 > _2022) || ((_2016 < _2020) || ((_2015 < _2020) || (_2015 > _2022))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1431);
            frontier_phi_13_35_ladder = _2145.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2145.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2145.x * cbModelParam._m0[1u].y;
        }
        _1513 = frontier_phi_13_35_ladder_2;
        _1515 = frontier_phi_13_35_ladder_1;
        _1517 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_621, _622, _623), _1431);
        _1513 = _1501.x * cbModelParam._m0[1u].y;
        _1515 = _1501.y * cbModelParam._m0[1u].y;
        _1517 = _1501.z * cbModelParam._m0[1u].y;
    }
    float _1521 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1521 : min(cbModelParam._m0[25u].w, _1521));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1578 = fma(_684, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676)) + cbModelParam._m0[21u].w;
        float _1582 = fma(_684, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676)) + cbModelParam._m0[22u].w;
        float _1586 = fma(_684, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676)) + cbModelParam._m0[23u].w;
        float _1589 = fma(_623, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621));
        float _1592 = fma(_623, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621));
        float _1595 = fma(_623, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621));
        float _1756;
        if (_1589 > 0.0)
        {
            _1756 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1756 = frontier_phi_25_21_ladder;
        }
        float _2035;
        if (_1592 > 0.0)
        {
            _2035 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2035 = frontier_phi_37_32_ladder;
        }
        float _2248;
        if (_1595 > 0.0)
        {
            _2248 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2248 = frontier_phi_46_43_ladder;
        }
        float _2250 = isnan(_2035) ? _1756 : (isnan(_1756) ? _2035 : min(_1756, _2035));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1589) + _1578;
        float _2256 = (_2251 * _1592) + _1582;
        float _2257 = (_2251 * _1595) + _1586;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2257, cbModelParam._m0[17u].z, fma(_2256, cbModelParam._m0[17u].y, _2255 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2257, cbModelParam._m0[18u].z, fma(_2256, cbModelParam._m0[18u].y, _2255 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2257, cbModelParam._m0[19u].z, fma(_2256, cbModelParam._m0[19u].y, _2255 * cbModelParam._m0[19u].x))), _1522);
            frontier_phi_22_46_ladder = _2521.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2521.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2521.x * cbModelParam._m0[1u].z;
        }
        _1614 = frontier_phi_22_46_ladder_2;
        _1616 = frontier_phi_22_46_ladder_1;
        _1618 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_621, _622, _623), _1522);
        _1614 = _1598.x * cbModelParam._m0[1u].z;
        _1616 = _1598.y * cbModelParam._m0[1u].z;
        _1618 = _1598.z * cbModelParam._m0[1u].z;
    }
    float _1631 = (((_647 * _598) + _648) * _613) * ((cbModelParam._m0[1u].w * (_1614 - _1513)) + _1513);
    float _1633 = (((_647 * _600) + _648) * _613) * ((cbModelParam._m0[1u].w * (_1616 - _1515)) + _1515);
    float _1635 = (((_647 * _601) + _648) * _613) * ((cbModelParam._m0[1u].w * (_1618 - _1517)) + _1517);
    float _1638 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1631 * cbSceneParam._m0[91u].x));
    vec4 _1652 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_488, _489));
    float _1654 = _1652.w;
    float _1666 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1654);
    float _1667 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1654);
    float _1668 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1654);
    uvec4 _1672 = floatBitsToUint(cbInstanceData._m0[_546 + 5u]);
    uint _1674 = _1672.x * 14u;
    uint _1675 = _1674 + 13u;
    float _1682 = _613 + (-1.0);
    float _1687 = (cbLight._m0[_1675].x * _1682) + 1.0;
    float _1688 = (cbLight._m0[_1675].y * _1682) + 1.0;
    float _1689 = (cbLight._m0[_1675].z * _1682) + 1.0;
    float _1690 = (cbLight._m0[_1675].w * _1682) + 1.0;
    uint _1691 = _1674 + 5u;
    float _1697 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1701 = _1674 + 4u;
    float _1710 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1714 = _1674 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_400, _401, _402));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_400, _401, _402));
    float _3905 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3916 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1691].x * _1697) * _1735) + (((cbLight._m0[_1701].x * _1666) * _1710) * _1733);
    float _1743 = ((_1697 * cbLight._m0[_1691].y) * _1735) + (((cbLight._m0[_1701].y * _1667) * _1710) * _1733);
    float _1744 = ((_1697 * cbLight._m0[_1691].z) * _1735) + (((cbLight._m0[_1701].z * _1668) * _1710) * _1733);
    uvec4 _1748 = floatBitsToUint(cbLight._m0[_1674 + 12u]);
    bool _1750 = _1748.x == 0u;
    float _1761;
    float _1763;
    float _1765;
    if (_1750)
    {
        _1761 = _1742;
        _1763 = _1743;
        _1765 = _1744;
    }
    else
    {
        uint _1769 = _1674 + 6u;
        float _1785 = (dot(vec3(cbLight._m0[_1674 + 2u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _1786 = _1785 * _1785;
        float _3927 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1788 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1761 = (((cbLight._m0[_1769].x * 0.3183098733425140380859375) * _1787) * _1788) + _1742;
        _1763 = (((cbLight._m0[_1769].y * 0.3183098733425140380859375) * _1787) * _1788) + _1743;
        _1765 = (((cbLight._m0[_1769].z * 0.3183098733425140380859375) * _1787) * _1788) + _1744;
    }
    bool _1768 = _1748.y == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1768)
    {
        _1806 = _1761;
        _1808 = _1763;
        _1810 = _1765;
    }
    else
    {
        uint _1979 = _1674 + 7u;
        float _1995 = (dot(vec3(cbLight._m0[_1674 + 3u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _3943 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1998 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _1806 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1761;
        _1808 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1763;
        _1810 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1765;
    }
    uint _1813 = _1674 + 8u;
    float _1826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _533) * 0.949999988079071044921875);
    float _1827 = _1826 * _1826;
    float _1828 = cbLight._m0[_1674].x + _480;
    float _1829 = cbLight._m0[_1674].y + _481;
    float _1830 = cbLight._m0[_1674].z + _482;
    float _1834 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
    float _1835 = _1834 * _1828;
    float _1836 = _1834 * _1829;
    float _1837 = _1834 * _1830;
    float _1838 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1674].xyz));
    float _3959 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1842 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1843 = dot(vec3(_400, _401, _402), vec3(_1835, _1836, _1837));
    float _3981 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1847 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1835, _1836, _1837));
    float _3992 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1851 = _1827 * _1827;
    float _1855 = ((_1846 * _1846) * (_1851 + (-1.0))) + 1.0;
    float _1863 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
    float _1864 = 0.959999978542327880859375 - _595;
    float _1866 = 0.959999978542327880859375 - _596;
    float _1867 = 0.959999978542327880859375 - _597;
    float _1874 = 1.0 - _1827;
    float _1885 = (0.5 / (((_1842 * ((_1841 * _1874) + _1827)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _1874) + _1827) * _1841))) * _1841;
    float _4003 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1851 / ((_1855 * _1855) * 3.141590118408203125));
    uint _1901 = _1674 + 9u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _533) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1714].x + _480;
    float _1915 = cbLight._m0[_1714].y + _481;
    float _1916 = cbLight._m0[_1714].z + _482;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1714].xyz));
    float _4014 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1928 = dot(vec3(_400, _401, _402), vec3(_1921, _1922, _1923));
    float _4025 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1921, _1922, _1923));
    float _4036 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1913 * _1913;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
    float _1954 = 1.0 - _1913;
    float _1964 = (0.5 / (((_1842 * ((_1927 * _1954) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _1954) + _1913) * _1927))) * _1927;
    float _4047 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    float _1976 = (((((_1947 * _1864) + _598) * cbLight._m0[_1901].x) * _1966) * _1697) + ((((cbLight._m0[_1813].x * _1666) * ((_1863 * _1864) + _598)) * _1887) * _1710);
    float _1977 = (((((_1947 * _1866) + _600) * cbLight._m0[_1901].y) * _1966) * _1697) + ((((cbLight._m0[_1813].y * _1667) * ((_1863 * _1866) + _600)) * _1887) * _1710);
    float _1978 = (((((_1947 * _1867) + _601) * cbLight._m0[_1901].z) * _1966) * _1697) + ((((cbLight._m0[_1813].z * _1668) * ((_1863 * _1867) + _601)) * _1887) * _1710);
    float _2040;
    float _2042;
    float _2044;
    if (_1750)
    {
        _2040 = _1976;
        _2042 = _1977;
        _2044 = _1978;
    }
    else
    {
        uint _2046 = _1674 + 2u;
        uint _2050 = _1674 + 10u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _533) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _480;
        float _2067 = cbLight._m0[_2046].y + _481;
        float _2068 = cbLight._m0[_2046].z + _482;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2046].xyz));
        float _4058 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2080 = dot(vec3(_400, _401, _402), vec3(_2073, _2074, _2075));
        float _4069 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _4080 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
        float _2106 = 1.0 - _2065;
        float _2116 = (0.5 / (((_1842 * ((_2079 * _2106) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _2106) + _2065) * _2079))) * _2079;
        float _4091 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2040 = (((((_2099 * _1864) + _598) * cbLight._m0[_2050].x) * _2118) * _2119) + _1976;
        _2042 = (((((_2099 * _1866) + _600) * cbLight._m0[_2050].y) * _2118) * _2119) + _1977;
        _2044 = (((((_2099 * _1867) + _601) * cbLight._m0[_2050].z) * _2118) * _2119) + _1978;
    }
    float _2154;
    float _2156;
    float _2158;
    if (_1768)
    {
        _2154 = _2040;
        _2156 = _2042;
        _2158 = _2044;
    }
    else
    {
        uint _2165 = _1674 + 3u;
        uint _2169 = _1674 + 11u;
        float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _533) * 0.949999988079071044921875);
        float _2184 = _2183 * _2183;
        float _2185 = cbLight._m0[_2165].x + _480;
        float _2186 = cbLight._m0[_2165].y + _481;
        float _2187 = cbLight._m0[_2165].z + _482;
        float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
        float _2192 = _2191 * _2185;
        float _2193 = _2191 * _2186;
        float _2194 = _2191 * _2187;
        float _2195 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2165].xyz));
        float _4107 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2199 = dot(vec3(_400, _401, _402), vec3(_2192, _2193, _2194));
        float _4118 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2203 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2192, _2193, _2194));
        float _4129 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2207 = _2184 * _2184;
        float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
        float _2218 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
        float _2225 = 1.0 - _2184;
        float _2235 = (0.5 / (((_1842 * ((_2198 * _2225) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _2225) + _2184) * _2198))) * _2198;
        float _4140 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _2154 = (((((_2218 * _1864) + _598) * cbLight._m0[_2169].x) * _2237) * _2238) + _2040;
        _2156 = (((((_2218 * _1866) + _600) * cbLight._m0[_2169].y) * _2237) * _2238) + _2042;
        _2158 = (((((_2218 * _1867) + _601) * cbLight._m0[_2169].z) * _2237) * _2238) + _2044;
    }
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_1672.y == 0u)
    {
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2313;
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2313;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2313;
        uvec4 _2328 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2329 = _2328.x;
        uint _2340 = uint((float(_2328.y) * floor(float(uint(cbSceneParam._m0[85u].y * _489) / _2329))) + floor(float(uint(cbSceneParam._m0[85u].x * _488) / _2329)));
        float _2350 = (log2(_2316 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2351 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        uint _2354 = uint(isnan(14.0) ? _2351 : (isnan(_2351) ? 14.0 : min(_2351, 14.0)));
        uvec4 _2359 = texelFetch(g_lightClusterGridBuffer, int(((_2354 << 2u) + (_2340 << 6u)) >> 2u));
        uint _2360 = _2359.x;
        uint _2361 = _2328.z;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((((1u << ((_2361 >> 4u) & 15u)) + 4294967295u) & _2360) == 0u) || ((_2361 & 240u) == 0u))
        {
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
        }
        else
        {
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            uint _2686 = 0u;
            uint _2695;
            bool _2696;
            for (;;)
            {
                _2695 = texelFetch(g_lightClassification, int((((_2354 << 5u) + (_2340 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                _2696 = _2695 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2696)
                {
                    frontier_phi_61_pred = _2680;
                    frontier_phi_61_pred_1 = _2685;
                    frontier_phi_61_pred_2 = _2684;
                    frontier_phi_61_pred_3 = _2683;
                    frontier_phi_61_pred_4 = _2682;
                    frontier_phi_61_pred_5 = _2681;
                }
                else
                {
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    uint _2810;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2695;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    for (;;)
                    {
                        uint _2814 = uint(findLSB(_2810)) + (_2686 << 5u);
                        uint _2811 = (_2810 + 4294967295u) & _2810;
                        uint _2816 = _2814 * 48u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2836 = (_2814 * 48u) + 4u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2855 = (_2814 * 48u) + 8u;
                        vec3 _2866 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x));
                        float _2870 = _2830.x - _2314;
                        float _2871 = _2830.y - _2315;
                        float _2872 = _2830.z - _2316;
                        float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                        float _2876 = inversesqrt(_2873);
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2880 = dot(vec3(_514, _517, _520), vec3(_2877, _2878, _2879));
                        float _2885 = 1.0 - (_2873 * _2830.w);
                        float _4166 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2887 = sqrt(_2873) * _2849.w;
                        float _2890 = 1.39999997615814208984375 / (_2887 + 1.39999997615814208984375);
                        float _2891 = _2890 * _2890;
                        float _2894 = ((1.0 - _2891) * _2880) + _2891;
                        float _2897 = _2887 * _2887;
                        float _2901 = ((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2886) / ((_2897 * 0.699999988079071044921875) + 1.0);
                        float _2905 = (-0.0) - _2314;
                        float _2906 = (-0.0) - _2315;
                        float _2907 = (-0.0) - _2316;
                        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2922 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                        float _2923 = 1.0 - _629;
                        float _2930 = sqrt(1.0 - ((1.0 - (_2923 * _2923)) * (1.0 - (_2922 * _2922))));
                        float _2931 = _2930 * _2930;
                        float _2932 = _2931 * _2931;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2943 = dot(vec3(_514, _517, _520), vec3(_2912, _2913, _2914));
                        float _4182 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2947 = dot(vec3(_514, _517, _520), vec3(_2939 * _2933, _2939 * _2934, _2939 * _2935));
                        float _4193 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2954 = ((_2950 * _2950) * (_2932 + (-1.0))) + 1.0;
                        float _2955 = _2890 * _2931;
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2880) + _2956;
                        float _4204 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2961 = 1.0 - _2931;
                        float _2971 = (0.5 / (((_2960 * ((_2946 * _2961) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2960 * _2961) + _2931) * _2946))) * _2960;
                        float _4215 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2982 = (((_2932 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_2954 * _2954) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125))) * _2886;
                        _2739 = (_2901 * _2849.x) + _2807;
                        _2740 = (_2901 * _2849.y) + _2808;
                        _2741 = (_2901 * _2849.z) + _2809;
                        _2736 = (_2982 * _2866.x) + _2804;
                        _2737 = (_2982 * _2866.y) + _2805;
                        _2738 = (_2982 * _2866.z) + _2806;
                        if (_2811 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2811;
                        }
                    }
                    frontier_phi_61_pred = _2736;
                    frontier_phi_61_pred_1 = _2741;
                    frontier_phi_61_pred_2 = _2740;
                    frontier_phi_61_pred_3 = _2739;
                    frontier_phi_61_pred_4 = _2738;
                    frontier_phi_61_pred_5 = _2737;
                }
                _2527 = frontier_phi_61_pred;
                _2537 = frontier_phi_61_pred_1;
                _2535 = frontier_phi_61_pred_2;
                _2533 = frontier_phi_61_pred_3;
                _2531 = frontier_phi_61_pred_4;
                _2529 = frontier_phi_61_pred_5;
                uint _2687 = _2686 + 1u;
                if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2680 = _2527;
                    _2681 = _2529;
                    _2682 = _2531;
                    _2683 = _2533;
                    _2684 = _2535;
                    _2685 = _2537;
                    _2686 = _2687;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
        }
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.z;
        uint _2543 = (_2541 >> 8u) & 15u;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        if (((4294967295u << _2543) & _2360) == 0u)
        {
            _2648 = _2526;
            _2650 = _2528;
            _2652 = _2530;
            _2654 = _2532;
            _2656 = _2534;
            _2658 = _2536;
        }
        else
        {
            float _2673 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
            float _2674 = _2673 * _2314;
            float _2675 = _2673 * _2315;
            float _2676 = _2673 * _2316;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2543 < ((_2541 >> 12u) & 15u))
            {
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2787 = _2526;
                float _2788 = _2528;
                float _2789 = _2530;
                float _2790 = _2532;
                float _2791 = _2534;
                float _2792 = _2536;
                uint _2793 = _2543;
                uint _2802;
                bool _2803;
                for (;;)
                {
                    _2802 = texelFetch(g_lightClassification, int((((_2354 << 5u) + (_2340 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                    _2803 = _2802 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2803)
                    {
                        frontier_phi_67_pred = _2790;
                        frontier_phi_67_pred_1 = _2791;
                        frontier_phi_67_pred_2 = _2792;
                        frontier_phi_67_pred_3 = _2789;
                        frontier_phi_67_pred_4 = _2788;
                        frontier_phi_67_pred_5 = _2787;
                    }
                    else
                    {
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        uint _3006 = _2802;
                        uint _3007;
                        vec4 _3032;
                        float _3033;
                        vec4 _3048;
                        vec3 _3060;
                        vec4 _3076;
                        vec4 _3092;
                        float _3139;
                        bool _3140;
                        for (;;)
                        {
                            uint _3017 = ((_2793 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3006));
                            _3007 = (_3006 + 4294967295u) & _3006;
                            uint _3019 = _3017 * 40u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3033 = _3032.w;
                            uint _3035 = (_3017 * 40u) + 4u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_3017 * 40u) + 8u;
                            _3060 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x));
                            uint _3063 = (_3017 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3017 * 40u) + 20u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3095 = (_3017 * 40u) + 24u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3114 = (_3017 * 40u) + 28u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3139 = fma(_2316, _3127.z, fma(_2315, _3127.y, _3127.x * _2314)) + _3127.w;
                            _3140 = !((fma(_2316, _3108.z, fma(_2315, _3108.y, _3108.x * _2314)) + _3108.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3140)
                            {
                                float _3167 = _3032.x - _2314;
                                float _3168 = _3032.y - _2315;
                                float _3169 = _3032.z - _2316;
                                float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                                float _3173 = inversesqrt(_3170);
                                float _3174 = _3173 * _3167;
                                float _3175 = _3173 * _3168;
                                float _3176 = _3173 * _3169;
                                float _3180 = 1.0 - (_3170 / (_3033 * _3033));
                                float _4226 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3185 = sqrt(_3170) * _3048.w;
                                float _3187 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                                float _3188 = _3187 * _3187;
                                float _3191 = ((1.0 - _3188) * dot(vec3(_3174, _3175, _3176), vec3(_514, _517, _520))) + _3188;
                                float _3194 = _3185 * _3185;
                                float _3198 = (fma(_2316, _3076.z, fma(_2315, _3076.y, _3076.x * _2314)) + _3076.w) / _3139;
                                float _3199 = (fma(_2316, _3092.z, fma(_2315, _3092.y, _3092.x * _2314)) + _3092.w) / _3139;
                                float _3203 = 1.0 - dot(vec2(_3198, _3199), vec2(_3198, _3199));
                                float _4242 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3205 = _3204 * (((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3181) / ((_3194 * 0.699999988079071044921875) + 1.0));
                                float _3217 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                                float _3218 = 1.0 - _629;
                                float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                                float _3226 = _3225 * _3225;
                                float _3227 = _3226 * _3226;
                                float _3228 = _3174 - _2674;
                                float _3229 = _3175 - _2675;
                                float _3230 = _3176 - _2676;
                                float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                                float _3238 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2674, (-0.0) - _2675, (-0.0) - _2676));
                                float _4253 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3242 = dot(vec3(_514, _517, _520), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                                float _4264 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                                float _3250 = _3187 * _3226;
                                float _3251 = _3250 * _3250;
                                float _3257 = ((1.0 - _3251) * dot(vec3(_514, _517, _520), vec3(_3174, _3175, _3176))) + _3251;
                                float _4275 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3259 = 1.0 - _3226;
                                float _3269 = (0.5 / (((_3258 * ((_3241 * _3259) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3226) * _3241))) * _3258;
                                float _4286 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3279 = (_3204 * _3181) * (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_3249 * _3249) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3279 * _3060.x;
                                frontier_phi_73_pred_1 = _3279 * _3060.y;
                                frontier_phi_73_pred_2 = _3205 * _3048.z;
                                frontier_phi_73_pred_3 = _3205 * _3048.y;
                                frontier_phi_73_pred_4 = _3205 * _3048.x;
                                frontier_phi_73_pred_5 = _3279 * _3060.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_73_pred;
                            _3284 = frontier_phi_73_pred_1;
                            _3288 = frontier_phi_73_pred_2;
                            _3287 = frontier_phi_73_pred_3;
                            _3286 = frontier_phi_73_pred_4;
                            _3285 = frontier_phi_73_pred_5;
                            _2990 = _3286 + _3003;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            _2987 = _3283 + _3000;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            if (_3007 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _3007;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2990;
                        frontier_phi_67_pred_1 = _2991;
                        frontier_phi_67_pred_2 = _2992;
                        frontier_phi_67_pred_3 = _2989;
                        frontier_phi_67_pred_4 = _2988;
                        frontier_phi_67_pred_5 = _2987;
                    }
                    _2655 = frontier_phi_67_pred;
                    _2657 = frontier_phi_67_pred_1;
                    _2659 = frontier_phi_67_pred_2;
                    _2653 = frontier_phi_67_pred_3;
                    _2651 = frontier_phi_67_pred_4;
                    _2649 = frontier_phi_67_pred_5;
                    uint _2794 = _2793 + 1u;
                    if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2787 = _2649;
                        _2788 = _2651;
                        _2789 = _2653;
                        _2790 = _2655;
                        _2791 = _2657;
                        _2792 = _2659;
                        _2793 = _2794;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2657;
                frontier_phi_55_56_ladder_1 = _2659;
                frontier_phi_55_56_ladder_2 = _2655;
                frontier_phi_55_56_ladder_3 = _2653;
                frontier_phi_55_56_ladder_4 = _2651;
                frontier_phi_55_56_ladder_5 = _2649;
            }
            else
            {
                frontier_phi_55_56_ladder = _2534;
                frontier_phi_55_56_ladder_1 = _2536;
                frontier_phi_55_56_ladder_2 = _2532;
                frontier_phi_55_56_ladder_3 = _2530;
                frontier_phi_55_56_ladder_4 = _2528;
                frontier_phi_55_56_ladder_5 = _2526;
            }
            _2648 = frontier_phi_55_56_ladder_5;
            _2650 = frontier_phi_55_56_ladder_4;
            _2652 = frontier_phi_55_56_ladder_3;
            _2654 = frontier_phi_55_56_ladder_2;
            _2656 = frontier_phi_55_56_ladder;
            _2658 = frontier_phi_55_56_ladder_1;
        }
        float _2663 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
        _2373 = (_2663 * _2654) + _1806;
        _2375 = (_2663 * _2656) + _1808;
        _2377 = (_2663 * _2658) + _1810;
        _2379 = ((_2648 * _598) * _2663) + _2154;
        _2381 = ((_2650 * _600) * _2663) + _2156;
        _2383 = ((_2652 * _601) * _2663) + _2158;
    }
    else
    {
        _2373 = _1806;
        _2375 = _1808;
        _2377 = _1810;
        _2379 = _2154;
        _2381 = _2156;
        _2383 = _2158;
    }
    uint _2389 = _547 + uint(cbMatDynParam._m0[0u].w);
    float _2399 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _351) * _363.x) * cbInstanceData._m0[_2389].x;
    float _2404 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _351) * _363.y) * cbInstanceData._m0[_2389].y;
    float _2409 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _351) * _363.z) * cbInstanceData._m0[_2389].z;
    vec4 _2417 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2431 = ((((_2399 * _493) - _2399) + _2417.x) * cbMtdParam._m0[3u].x) + _2399;
    float _2432 = ((((_2404 * _493) - _2404) + _2417.y) * cbMtdParam._m0[3u].x) + _2404;
    float _2433 = ((((_2409 * _493) - _2409) + _2417.z) * cbMtdParam._m0[3u].x) + _2409;
    float _4302 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4313 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4324 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2452 = (((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2373 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _613))) + ((_2379 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1420)) * cbPerFrame._m0[3u].x)) + _2431;
    float _2453 = (((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2375 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _613))) + ((_2381 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1420)) * cbPerFrame._m0[3u].x)) + _2432;
    float _2454 = (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2377 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _613))) + ((_2383 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1420)) * cbPerFrame._m0[3u].x)) + _2433;
    float _4350 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2467 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    uint _2468 = _546 + 6u;
    float _2476 = _488 / cbSceneParam._m0[86u].x;
    float _2477 = _489 / cbSceneParam._m0[86u].y;
    vec4 _2491 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, (log2((isnan(cbSceneParam._m0[77u].w) ? _422 : (isnan(_422) ? cbSceneParam._m0[77u].w : min(_422, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2493 = _2491.x;
    float _2494 = _2491.y;
    float _2495 = _2491.z;
    float _2496 = _2491.w;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_422 > cbSceneParam._m0[78u].w)
    {
        float _2551 = isnan(_422) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _422 : min(cbSceneParam._m0[80u].w, _422));
        float _2552 = _2551 / _422;
        float _2563 = _2552 * _473;
        float _2564 = _474 * _2552;
        float _2565 = (-0.0) - _2564;
        float _2567 = _2552 * _475;
        float _2569 = (cbSceneParam._m0[77u].w * _2565) / _2551;
        float _2570 = _2569 + cbSceneParam._m0[79u].w;
        float _2571 = cbSceneParam._m0[79u].w - _2564;
        float _2577 = sqrt(((_2563 * _2563) + (_2564 * _2564)) + (_2567 * _2567));
        float _2580 = (1.0 - (cbSceneParam._m0[77u].w / _2551)) * _2577;
        float _2585 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2587 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2749;
        if (abs((_2565 - _2569) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2749 = ((((_2570 > 0.0) ? exp2(_2585 * _2570) : (2.0 - exp2(_2587 * _2570))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2580;
        }
        else
        {
            float _2709 = 1.0 / cbSceneParam._m0[80u].x;
            float _2710 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : max(_2570, _2571));
            float _2711 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : min(_2570, _2571));
            float _2720 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : min(_2710, 0.0));
            float _2721 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : min(_2711, 0.0));
            _2749 = ((abs(_2577 / _2565) * cbSceneParam._m0[80u].y) * ((((_2720 - _2721) * 2.0) - ((exp2(_2585 * (isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0)))) - exp2(_2585 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0))))) * _2709)) - ((exp2(_2587 * _2720) - exp2(_2587 * _2721)) * _2709))) + (_2580 * cbSceneParam._m0[80u].z);
        }
        vec4 _2751 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, 1.0), 0.0);
        float _2760 = exp2((_2749 * (-1.44269502162933349609375)) * (1.0 - _2751.w));
        float _2761 = log2(_2760);
        float _2777 = log2(_2496);
        _2589 = (exp2(_2777 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].x)) * _2751.x) / cbSceneParam._m0[78u].x)) + _2493;
        _2591 = (exp2(_2777 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].y)) * _2751.y) / cbSceneParam._m0[78u].y)) + _2494;
        _2593 = (exp2(_2777 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].z)) * _2751.z) / cbSceneParam._m0[78u].z)) + _2495;
        _2595 = _2760 * _2496;
    }
    else
    {
        _2589 = _2493;
        _2591 = _2494;
        _2593 = _2495;
        _2595 = _2496;
    }
    float _2607 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2608 = _2607 == 3.0;
    float _2609 = log2(_2595);
    float _2613 = exp2(_2609 * cbSceneParam._m0[78u].x);
    float _2614 = exp2(_2609 * cbSceneParam._m0[78u].y);
    float _2615 = exp2(_2609 * cbSceneParam._m0[78u].z);
    float _2616 = _2613 * (isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0)));
    float _2617 = _2614 * (isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0)));
    float _2618 = _2615 * (isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0)));
    float _2627 = (_2607 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2627 * (_2608 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.y = _2627 * (_2608 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.z = _2627 * (_2608 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.w = cbInstanceData._m0[_2468].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2431) * _2467) * _2613) * _2627;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2432) * _2467) * _2614) * _2627;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2433) * _2467) * _2615) * _2627;
    SV_Target_1.w = cbInstanceData._m0[_2468].w;
}


