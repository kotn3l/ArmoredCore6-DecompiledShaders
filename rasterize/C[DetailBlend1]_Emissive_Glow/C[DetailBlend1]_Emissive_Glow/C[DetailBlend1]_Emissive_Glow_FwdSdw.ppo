#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _987;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _255 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = ((_238.x * 4.55000019073486328125) * _255.x) * cbMtdParam._m0[9u].x;
    float _272 = ((_238.y * 4.55000019073486328125) * _255.y) * cbMtdParam._m0[9u].y;
    float _275 = ((_238.z * 4.55000019073486328125) * _255.z) * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _291 = _287.z;
    float _297 = exp2(log2(_291 * 22.0) * 260.0);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    vec4 _317 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _329 = ((((isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0))) * (_291 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[11u].x + _317.z);
    float _347 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3688 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _353 = (_348 * _348) * (3.0 - (_348 * 2.0));
    vec4 _365 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _373 = (_287.x * 2.0) + (-1.0);
    float _374 = (_287.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3699 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    float _387 = (cbMtdParam._m0[11u].y * ((_317.x * 2.0) + (-1.0))) + _373;
    float _388 = (cbMtdParam._m0[11u].y * ((_317.y * 2.0) + (-1.0))) + _374;
    float _391 = fma(_380, _214 * NORMAL.x, fma(_388, _221 * TANGENT.x, (_207 * _199) * _387));
    float _394 = fma(_380, _214 * NORMAL.y, fma(_388, _221 * TANGENT.y, (_207 * _200) * _387));
    float _397 = fma(_380, _214 * NORMAL.z, fma(_388, _221 * TANGENT.z, (_207 * _201) * _387));
    float _401 = inversesqrt(dot(vec3(_391, _394, _397), vec3(_391, _394, _397)));
    float _402 = _401 * _391;
    float _403 = _401 * _394;
    float _404 = _401 * _397;
    float _3710 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _405 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3732 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3743 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _424 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _475 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _465);
    float _476 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _465);
    float _477 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _465);
    float _481 = inversesqrt(dot(vec3(_475, _476, _477), vec3(_475, _476, _477)));
    float _482 = _475 * _481;
    float _483 = _476 * _481;
    float _484 = _477 * _481;
    float _490 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _491 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _493 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _495 = _493.w;
    float _516 = fma(_404, cbSceneParam._m0[5u].z, fma(_403, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _402));
    float _519 = fma(_404, cbSceneParam._m0[6u].z, fma(_403, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _402));
    float _522 = fma(_404, cbSceneParam._m0[7u].z, fma(_403, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _402));
    vec4 _524 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _535 = (((_524.y - _405) + (_524.w * _405)) * cbMtdParam._m0[3u].x) + _405;
    uint _548 = uint(roundEven(NORMAL.w)) * 13u;
    uint _549 = _548 + 9u;
    uint _550 = _549 + uint(cbMatDynParam._m0[0u].w);
    float _556 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_550].x;
    float _557 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_550].y;
    float _558 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_550].z;
    float _3754 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    vec4 _562 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _567 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _573 = cbMtdParam._m0[3u].x * _567.x;
    float _586 = (cbMtdParam._m0[3u].x * (((_559 * _495) - _559) + _562.x)) + _559;
    float _587 = (cbMtdParam._m0[3u].x * (((_560 * _495) - _560) + _562.y)) + _560;
    float _588 = (cbMtdParam._m0[3u].x * (((_561 * _495) - _561) + _562.z)) + _561;
    float _589 = 1.0 - _573;
    float _590 = _586 * _589;
    float _591 = _587 * _589;
    float _592 = _588 * _589;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _573;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _573;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _573;
    float _600 = _597 + 0.039999999105930328369140625;
    float _602 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _490, cbSceneParam._m0[86u].y * _491));
    float _615 = _612.x * TEXCOORD_4;
    float _616 = dot(vec3(_402, _403, _404), vec3(_482, _483, _484));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _402) - _482;
    float _624 = (_619 * _403) - _483;
    float _625 = (_619 * _404) - _484;
    float _629 = abs(dot(vec3(_482, _483, _484), vec3(_402, _403, _404)));
    float _3787 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_535);
    float _643 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _649 = (1.0 - _643) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _650 = _643 * _631;
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _986;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _713 = fma(_686, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678));
        float _717 = fma(_686, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678));
        float _721 = fma(_686, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678));
        float _744 = _678 + _402;
        float _745 = _682 + _403;
        float _746 = _686 + _404;
        float _756 = fma(_746, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744)) - _713;
        float _757 = fma(_746, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744)) - _717;
        float _758 = fma(_746, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744)) - _721;
        float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
        float _775 = ((_762 * _756) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_713 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_762 * _757) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_717 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_762 * _758) / cbModelParam._m0[34u].z) + ((((((_721 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        float _814 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_780.x + (-0.5));
        float _816 = _814 * (_780.y + (-0.5));
        float _817 = _814 * (_780.z + (-0.5));
        float _824 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_787.x + (-0.5));
        float _826 = _824 * (_787.y + (-0.5));
        float _827 = _824 * (_787.z + (-0.5));
        float _834 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_794.x + (-0.5));
        float _836 = _834 * (_794.y + (-0.5));
        float _837 = _834 * (_794.z + (-0.5));
        float _844 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_801.x + (-0.5));
        float _846 = _844 * (_801.y + (-0.5));
        float _847 = _844 * (_801.z + (-0.5));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = _815 * 0.5;
        float _852 = _825 * 0.5;
        float _853 = _835 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _868 = (dot(vec3(_402, _403, _404), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _878 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3835 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_880 + 1.0))) + _885) * _848;
        float _895 = _816 * 0.5;
        float _896 = _826 * 0.5;
        float _897 = _836 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(_402, _403, _404), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3868 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_922 + 1.0))) + _927) * _849;
        float _937 = _817 * 0.5;
        float _938 = _827 * 0.5;
        float _939 = _837 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_402, _403, _404), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3901 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_964 + 1.0))) + _969) * _850;
        _986 = _817;
        _988 = _816;
        _989 = _815;
        _990 = _827;
        _991 = _826;
        _992 = _825;
        _993 = _837;
        _994 = _836;
        _995 = _835;
        _996 = _850;
        _997 = _849;
        _998 = _848;
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
    }
    else
    {
        _986 = _987;
        _988 = _987;
        _989 = _987;
        _990 = _987;
        _991 = _987;
        _992 = _987;
        _993 = _987;
        _994 = _987;
        _995 = _987;
        _996 = _987;
        _997 = _987;
        _998 = _987;
        _999 = 0.0;
        _1000 = 0.0;
        _1001 = 0.0;
    }
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1027 = fma(_686, cbModelParam._m0[30u].z, fma(_682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _678));
        float _1031 = fma(_686, cbModelParam._m0[31u].z, fma(_682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _678));
        float _1035 = fma(_686, cbModelParam._m0[32u].z, fma(_682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _678));
        float _1058 = _678 + _402;
        float _1059 = _682 + _403;
        float _1060 = _686 + _404;
        float _1070 = fma(_1060, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058)) - _1027;
        float _1071 = fma(_1060, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058)) - _1031;
        float _1072 = fma(_1060, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058)) - _1035;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1027 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1031 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[35u].z) + ((((((_1035 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1126 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1093.x + (-0.5));
        float _1128 = _1126 * (_1093.y + (-0.5));
        float _1129 = _1126 * (_1093.z + (-0.5));
        float _1136 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1100.x + (-0.5));
        float _1138 = _1136 * (_1100.y + (-0.5));
        float _1139 = _1136 * (_1100.z + (-0.5));
        float _1146 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1107.x + (-0.5));
        float _1148 = _1146 * (_1107.y + (-0.5));
        float _1149 = _1146 * (_1107.z + (-0.5));
        float _1156 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1114.x + (-0.5));
        float _1158 = _1156 * (_1114.y + (-0.5));
        float _1159 = _1156 * (_1114.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_402, _403, _404), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3964 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1190 + 1.0))) + _1195) * _1160;
        float _1205 = _1128 * 0.5;
        float _1206 = _1138 * 0.5;
        float _1207 = _1148 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_402, _403, _404), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3997 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1232 + 1.0))) + _1237) * _1161;
        float _1247 = _1129 * 0.5;
        float _1248 = _1139 * 0.5;
        float _1249 = _1149 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_402, _403, _404), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4030 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1274 + 1.0))) + _1279) * _1162;
        _1296 = _1129;
        _1297 = _1128;
        _1298 = _1127;
        _1299 = _1139;
        _1300 = _1138;
        _1301 = _1137;
        _1302 = _1149;
        _1303 = _1148;
        _1304 = _1147;
        _1305 = _1162;
        _1306 = _1161;
        _1307 = _1160;
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _987;
        _1297 = _987;
        _1298 = _987;
        _1299 = _987;
        _1300 = _987;
        _1301 = _987;
        _1302 = _987;
        _1303 = _987;
        _1304 = _987;
        _1305 = _987;
        _1306 = _987;
        _1307 = _987;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1343 = fma(_1322, cbSceneParam._m0[89u].z, fma(_1321, cbSceneParam._m0[89u].y, _1320 * cbSceneParam._m0[89u].x));
    float _1346 = fma(_1322, cbSceneParam._m0[90u].z, fma(_1321, cbSceneParam._m0[90u].y, _1320 * cbSceneParam._m0[90u].x));
    float _1349 = fma(_1322, cbSceneParam._m0[91u].z, fma(_1321, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1320));
    float _1364 = _623 * 0.5;
    float _1365 = _624 * 0.5;
    float _1366 = _625 * 0.5;
    float _1367 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1370 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1373 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1407;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1380 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_986, _990, _993, _996));
        float _1384 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_988, _991, _994, _997));
        float _1388 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_989, _992, _995, _998));
        float _1395 = dot(vec4(cbModelParam._m0[39u]), vec4(_1364, _1365, _1366, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1418;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1409 = dot(vec4(cbModelParam._m0[40u]), vec4(_1364, _1365, _1366, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1422 = (_1418 * cbModelParam._m0[1u].x) + (_1407 * (1.0 - cbModelParam._m0[1u].x));
    float _1432 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _535);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1432 : min(cbModelParam._m0[25u].z, _1432));
    float _1515;
    float _1517;
    float _1519;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1482 = fma(_686, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678)) + cbModelParam._m0[13u].w;
        float _1486 = fma(_686, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678)) + cbModelParam._m0[14u].w;
        float _1490 = fma(_686, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678)) + cbModelParam._m0[15u].w;
        float _1493 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1496 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1499 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1527;
        if (_1493 > 0.0)
        {
            _1527 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1527 = frontier_phi_14_12_ladder;
        }
        float _1701;
        if (_1496 > 0.0)
        {
            _1701 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1701 = frontier_phi_23_19_ladder;
        }
        float _1996;
        if (_1499 > 0.0)
        {
            _1996 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1996 = frontier_phi_35_30_ladder;
        }
        float _1998 = isnan(_1701) ? _1527 : (isnan(_1527) ? _1701 : min(_1527, _1701));
        float _1999 = isnan(_1996) ? _1998 : (isnan(_1998) ? _1996 : min(_1998, _1996));
        float _2003 = (_1999 * _1493) + _1482;
        float _2004 = (_1999 * _1496) + _1486;
        float _2005 = (_1999 * _1499) + _1490;
        float _2006 = _1999 * 9.9999997473787516355514526367188e-05;
        float _2008 = (-1.0) - _2006;
        float _2010 = _2006 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2005 > _2010) || ((_2005 < _2008) || ((_2004 > _2010) || ((_2004 < _2008) || ((_2003 < _2008) || (_2003 > _2010))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2150 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2005, cbModelParam._m0[9u].z, fma(_2004, cbModelParam._m0[9u].y, _2003 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2005, cbModelParam._m0[10u].z, fma(_2004, cbModelParam._m0[10u].y, _2003 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2005, cbModelParam._m0[11u].z, fma(_2004, cbModelParam._m0[11u].y, _2003 * cbModelParam._m0[11u].x))), _1433);
            frontier_phi_13_35_ladder = _2150.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2150.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2150.x * cbModelParam._m0[1u].y;
        }
        _1515 = frontier_phi_13_35_ladder_2;
        _1517 = frontier_phi_13_35_ladder_1;
        _1519 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1433);
        _1515 = _1503.x * cbModelParam._m0[1u].y;
        _1517 = _1503.y * cbModelParam._m0[1u].y;
        _1519 = _1503.z * cbModelParam._m0[1u].y;
    }
    float _1523 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _535);
    float _1524 = isnan(_1523) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1523 : min(cbModelParam._m0[25u].w, _1523));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_686, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_686, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_686, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1594 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1597 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1706;
        if (_1591 > 0.0)
        {
            _1706 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1706 = frontier_phi_25_21_ladder;
        }
        float _2023;
        if (_1594 > 0.0)
        {
            _2023 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2023 = frontier_phi_37_32_ladder;
        }
        float _2361;
        if (_1597 > 0.0)
        {
            _2361 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2361 = frontier_phi_47_44_ladder;
        }
        float _2363 = isnan(_2023) ? _1706 : (isnan(_1706) ? _2023 : min(_1706, _2023));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1591) + _1580;
        float _2369 = (_2364 * _1594) + _1584;
        float _2370 = (_2364 * _1597) + _1588;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1524);
            frontier_phi_22_47_ladder = _2492.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2492.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2492.x * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_22_47_ladder_2;
        _1618 = frontier_phi_22_47_ladder_1;
        _1620 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1524);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1633 = (((_649 * _600) + _650) * _615) * ((cbModelParam._m0[1u].w * (_1616 - _1515)) + _1515);
    float _1635 = (((_649 * _602) + _650) * _615) * ((cbModelParam._m0[1u].w * (_1618 - _1517)) + _1517);
    float _1637 = (((_649 * _603) + _650) * _615) * ((cbModelParam._m0[1u].w * (_1620 - _1519)) + _1519);
    float _1640 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1693 = _1680 / _1692;
    float _1694 = _1684 / _1692;
    float _1695 = _1688 / _1692;
    float _1842;
    float _1843;
    float _1844;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1722 = ((uint(_1695 > cbSceneParam._m0[59u].y) + uint(_1695 > cbSceneParam._m0[59u].x)) + uint(_1695 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1723 = _1722 + 43u;
        uint _1731 = _1722 + 44u;
        uint _1739 = _1722 + 45u;
        uint _1747 = _1722 + 46u;
        float _1758 = fma(_1692, cbSceneParam._m0[_1723].w, fma(_1688, cbSceneParam._m0[_1723].z, fma(_1684, cbSceneParam._m0[_1723].y, _1680 * cbSceneParam._m0[_1723].x)));
        float _1762 = fma(_1692, cbSceneParam._m0[_1731].w, fma(_1688, cbSceneParam._m0[_1731].z, fma(_1684, cbSceneParam._m0[_1731].y, _1680 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1692, cbSceneParam._m0[_1747].w, fma(_1688, cbSceneParam._m0[_1747].z, fma(_1684, cbSceneParam._m0[_1747].y, _1680 * cbSceneParam._m0[_1747].x)));
        float _1775 = cbSceneParam._m0[33u].z * _1770;
        float _1777 = cbSceneParam._m0[33u].w * _1770;
        float _1780 = fma(_1692, cbSceneParam._m0[_1739].w, fma(_1688, cbSceneParam._m0[_1739].z, fma(_1684, cbSceneParam._m0[_1739].y, _1680 * cbSceneParam._m0[_1739].x))) / _1770;
        float _1828 = (cbSceneParam._m0[33u].x - sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695))) * cbSceneParam._m0[33u].y;
        float _4156 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1835 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 + _1758) / _1770, (_1777 + _1762) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 + _1758) / _1770, (_1762 - _1775) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 - _1775) / _1770, (_1762 - _1777) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 - _1777) / _1770, (_1775 + _1762) / _1770), _1780), 0.0)).x), vec4(0.25)));
        _1842 = 1.0 - (_1835 * cbSceneParam._m0[34u].x);
        _1843 = 1.0 - (_1835 * cbSceneParam._m0[34u].y);
        _1844 = 1.0 - (_1835 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1842 = 1.0;
        _1843 = 1.0;
        _1844 = 1.0;
    }
    float _1908;
    float _1910;
    float _1912;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1896 = fma(_1692, cbSceneParam._m0[63u].w, fma(_1688, cbSceneParam._m0[63u].z, fma(_1684, cbSceneParam._m0[63u].y, _1680 * cbSceneParam._m0[63u].x)));
        float _1897 = fma(_1692, cbSceneParam._m0[60u].w, fma(_1688, cbSceneParam._m0[60u].z, fma(_1684, cbSceneParam._m0[60u].y, _1680 * cbSceneParam._m0[60u].x))) / _1896;
        float _1898 = fma(_1692, cbSceneParam._m0[61u].w, fma(_1688, cbSceneParam._m0[61u].z, fma(_1684, cbSceneParam._m0[61u].y, _1680 * cbSceneParam._m0[61u].x))) / _1896;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1897 >= cbSceneParam._m0[64u].x) && (_1898 >= cbSceneParam._m0[64u].y)) && (_1897 <= cbSceneParam._m0[64u].z)) && (_1898 <= cbSceneParam._m0[64u].w))
        {
            float _2036 = fma(_1692, cbSceneParam._m0[62u].w, fma(_1688, cbSceneParam._m0[62u].z, fma(_1684, cbSceneParam._m0[62u].y, _1680 * cbSceneParam._m0[62u].x))) / _1896;
            float _2040 = isnan(cbSceneParam._m0[41u].w) ? _2036 : (isnan(_2036) ? cbSceneParam._m0[41u].w : max(_2036, cbSceneParam._m0[41u].w));
            float _2083 = (cbSceneParam._m0[33u].x - sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695))) * cbSceneParam._m0[33u].y;
            float _4172 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
            float _2090 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1897, cbSceneParam._m0[33u].w + _1898), _2040), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1897, _1898 - cbSceneParam._m0[33u].z), _2040), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1897 - cbSceneParam._m0[33u].z, _1898 - cbSceneParam._m0[33u].w), _2040), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1897 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1898), _2040), 0.0)).x), vec4(0.25)));
            float _2094 = 1.0 - (_2090 * cbSceneParam._m0[34u].x);
            float _2095 = 1.0 - (_2090 * cbSceneParam._m0[34u].y);
            float _2096 = 1.0 - (_2090 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2096) ? _1844 : (isnan(_1844) ? _2096 : min(_1844, _2096));
            frontier_phi_34_33_ladder_1 = isnan(_2095) ? _1843 : (isnan(_1843) ? _2095 : min(_1843, _2095));
            frontier_phi_34_33_ladder_2 = isnan(_2094) ? _1842 : (isnan(_1842) ? _2094 : min(_1842, _2094));
        }
        else
        {
            frontier_phi_34_33_ladder = _1844;
            frontier_phi_34_33_ladder_1 = _1843;
            frontier_phi_34_33_ladder_2 = _1842;
        }
        _1908 = frontier_phi_34_33_ladder_2;
        _1910 = frontier_phi_34_33_ladder_1;
        _1912 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1908 = _1842;
        _1910 = _1843;
        _1912 = _1844;
    }
    uvec4 _1917 = floatBitsToUint(cbInstanceData._m0[_548 + 5u]);
    uint _1919 = _1917.x * 14u;
    uint _1920 = _1919 + 13u;
    float _1927 = _615 + (-1.0);
    float _1932 = (cbLight._m0[_1920].x * _1927) + 1.0;
    float _1933 = (cbLight._m0[_1920].y * _1927) + 1.0;
    float _1934 = (cbLight._m0[_1920].z * _1927) + 1.0;
    float _1935 = (cbLight._m0[_1920].w * _1927) + 1.0;
    uint _1936 = _1919 + 5u;
    float _1942 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1946 = _1919 + 4u;
    float _1955 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1959 = _1919 | 1u;
    float _1970 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_402, _403, _404));
    float _1973 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_402, _403, _404));
    float _4208 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _4219 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1978 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1980 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _1987 = ((cbLight._m0[_1936].x * _1942) * _1980) + (((cbLight._m0[_1946].x * _1908) * _1955) * _1978);
    float _1988 = ((_1942 * cbLight._m0[_1936].y) * _1980) + (((cbLight._m0[_1946].y * _1910) * _1955) * _1978);
    float _1989 = ((_1942 * cbLight._m0[_1936].z) * _1980) + (((cbLight._m0[_1946].z * _1912) * _1955) * _1978);
    uvec4 _1993 = floatBitsToUint(cbLight._m0[_1919 + 12u]);
    bool _1995 = _1993.x == 0u;
    float _2097;
    float _2099;
    float _2101;
    if (_1995)
    {
        _2097 = _1987;
        _2099 = _1988;
        _2101 = _1989;
    }
    else
    {
        uint _2105 = _1919 + 6u;
        float _2121 = (dot(vec3(cbLight._m0[_1919 + 2u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4230 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2124 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2097 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _1987;
        _2099 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _1988;
        _2101 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _1989;
    }
    bool _2104 = _1993.y == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2104)
    {
        _2159 = _2097;
        _2161 = _2099;
        _2163 = _2101;
    }
    else
    {
        uint _2332 = _1919 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_1919 + 3u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4246 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2351 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2159 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2097;
        _2161 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2099;
        _2163 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2101;
    }
    uint _2166 = _1919 + 8u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _535) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_1919].x + _482;
    float _2182 = cbLight._m0[_1919].y + _483;
    float _2183 = cbLight._m0[_1919].z + _484;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1919].xyz));
    float _4262 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2195 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2196 = dot(vec3(_402, _403, _404), vec3(_2188, _2189, _2190));
    float _4284 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2188, _2189, _2190));
    float _4295 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2180 * _2180;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
    float _2217 = 0.959999978542327880859375 - _597;
    float _2219 = 0.959999978542327880859375 - _598;
    float _2220 = 0.959999978542327880859375 - _599;
    float _2227 = 1.0 - _2180;
    float _2238 = (0.5 / (((_2195 * ((_2194 * _2227) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2227) + _2180) * _2194))) * _2194;
    float _4306 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    uint _2254 = _1919 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _535) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_1959].x + _482;
    float _2268 = cbLight._m0[_1959].y + _483;
    float _2269 = cbLight._m0[_1959].z + _484;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1959].xyz));
    float _4317 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2281 = dot(vec3(_402, _403, _404), vec3(_2274, _2275, _2276));
    float _4328 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2274, _2275, _2276));
    float _4339 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
    float _2307 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2195 * ((_2280 * _2307) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2307) + _2266) * _2280))) * _2280;
    float _4350 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2329 = (((((_2300 * _2217) + _600) * cbLight._m0[_2254].x) * _2319) * _1942) + ((((cbLight._m0[_2166].x * _1908) * ((_2216 * _2217) + _600)) * _2240) * _1955);
    float _2330 = (((((_2300 * _2219) + _602) * cbLight._m0[_2254].y) * _2319) * _1942) + ((((cbLight._m0[_2166].y * _1910) * ((_2216 * _2219) + _602)) * _2240) * _1955);
    float _2331 = (((((_2300 * _2220) + _603) * cbLight._m0[_2254].z) * _2319) * _1942) + ((((cbLight._m0[_2166].z * _1912) * ((_2216 * _2220) + _603)) * _2240) * _1955);
    float _2387;
    float _2389;
    float _2391;
    if (_1995)
    {
        _2387 = _2329;
        _2389 = _2330;
        _2391 = _2331;
    }
    else
    {
        uint _2393 = _1919 + 2u;
        uint _2397 = _1919 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _535) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _482;
        float _2414 = cbLight._m0[_2393].y + _483;
        float _2415 = cbLight._m0[_2393].z + _484;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2393].xyz));
        float _4361 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2427 = dot(vec3(_402, _403, _404), vec3(_2420, _2421, _2422));
        float _4372 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4383 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2195 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2453) + _2412) * _2426))) * _2426;
        float _4394 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2387 = (((((_2446 * _2217) + _600) * cbLight._m0[_2397].x) * _2465) * _2466) + _2329;
        _2389 = (((((_2446 * _2219) + _602) * cbLight._m0[_2397].y) * _2465) * _2466) + _2330;
        _2391 = (((((_2446 * _2220) + _603) * cbLight._m0[_2397].z) * _2465) * _2466) + _2331;
    }
    float _2497;
    float _2499;
    float _2501;
    if (_2104)
    {
        _2497 = _2387;
        _2499 = _2389;
        _2501 = _2391;
    }
    else
    {
        uint _2508 = _1919 + 3u;
        uint _2512 = _1919 + 11u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _535) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _482;
        float _2529 = cbLight._m0[_2508].y + _483;
        float _2530 = cbLight._m0[_2508].z + _484;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2508].xyz));
        float _4410 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2542 = dot(vec3(_402, _403, _404), vec3(_2535, _2536, _2537));
        float _4421 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4432 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2568 = 1.0 - _2527;
        float _2578 = (0.5 / (((_2195 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2568) + _2527) * _2541))) * _2541;
        float _4443 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2497 = (((((_2561 * _2217) + _600) * cbLight._m0[_2512].x) * _2580) * _2581) + _2387;
        _2499 = (((((_2561 * _2219) + _602) * cbLight._m0[_2512].y) * _2580) * _2581) + _2389;
        _2501 = (((((_2561 * _2220) + _603) * cbLight._m0[_2512].z) * _2580) * _2581) + _2391;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1917.y == 0u)
    {
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.x;
        uint _2614 = uint((float(_2602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _491) / _2603))) + floor(float(uint(cbSceneParam._m0[85u].x * _490) / _2603)));
        float _2624 = (log2(_1695 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        uint _2628 = uint(isnan(14.0) ? _2625 : (isnan(_2625) ? 14.0 : min(_2625, 14.0)));
        uvec4 _2633 = texelFetch(g_lightClusterGridBuffer, int(((_2628 << 2u) + (_2614 << 6u)) >> 2u));
        uint _2634 = _2633.x;
        uint _2635 = _2602.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2635 >> 4u) & 15u)) + 4294967295u) & _2634) == 0u) || ((_2635 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            uint _2939 = 0u;
            uint _2948;
            bool _2949;
            for (;;)
            {
                _2948 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                _2949 = _2948 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2949)
                {
                    frontier_phi_66_pred = _2938;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                else
                {
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    uint _3063;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2948;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    for (;;)
                    {
                        uint _3067 = uint(findLSB(_3063)) + (_2939 << 5u);
                        uint _3064 = (_3063 + 4294967295u) & _3063;
                        uint _3069 = _3067 * 48u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 3u)).x));
                        uint _3089 = (_3067 * 48u) + 4u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3108 = (_3067 * 48u) + 8u;
                        vec3 _3119 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x));
                        float _3123 = _3083.x - _1693;
                        float _3124 = _3083.y - _1694;
                        float _3125 = _3083.z - _1695;
                        float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                        float _3129 = inversesqrt(_3126);
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3133 = dot(vec3(_516, _519, _522), vec3(_3130, _3131, _3132));
                        float _3138 = 1.0 - (_3126 * _3083.w);
                        float _4469 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3140 = sqrt(_3126) * _3102.w;
                        float _3143 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3133) + _3144;
                        float _3150 = _3140 * _3140;
                        float _3154 = ((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3139) / ((_3150 * 0.699999988079071044921875) + 1.0);
                        float _3158 = (-0.0) - _1693;
                        float _3159 = (-0.0) - _1694;
                        float _3160 = (-0.0) - _1695;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3174 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                        float _3175 = 1.0 - _631;
                        float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                        float _3183 = _3182 * _3182;
                        float _3184 = _3183 * _3183;
                        float _3185 = _3165 + _3130;
                        float _3186 = _3166 + _3131;
                        float _3187 = _3167 + _3132;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3195 = dot(vec3(_516, _519, _522), vec3(_3165, _3166, _3167));
                        float _4485 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3199 = dot(vec3(_516, _519, _522), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                        float _4496 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                        float _3207 = _3143 * _3183;
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3133) + _3208;
                        float _4507 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3213 = 1.0 - _3183;
                        float _3223 = (0.5 / (((_3212 * ((_3198 * _3213) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3183) * _3198))) * _3212;
                        float _4518 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3234 = (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3206 * _3206) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125))) * _3139;
                        _2992 = (_3154 * _3102.x) + _3060;
                        _2993 = (_3154 * _3102.y) + _3061;
                        _2994 = (_3154 * _3102.z) + _3062;
                        _2989 = (_3234 * _3119.x) + _3057;
                        _2990 = (_3234 * _3119.y) + _3058;
                        _2991 = (_3234 * _3119.z) + _3059;
                        if (_3064 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _3064;
                        }
                    }
                    frontier_phi_66_pred = _2994;
                    frontier_phi_66_pred_1 = _2993;
                    frontier_phi_66_pred_2 = _2992;
                    frontier_phi_66_pred_3 = _2991;
                    frontier_phi_66_pred_4 = _2990;
                    frontier_phi_66_pred_5 = _2989;
                }
                _2790 = frontier_phi_66_pred;
                _2788 = frontier_phi_66_pred_1;
                _2786 = frontier_phi_66_pred_2;
                _2784 = frontier_phi_66_pred_3;
                _2782 = frontier_phi_66_pred_4;
                _2780 = frontier_phi_66_pred_5;
                uint _2940 = _2939 + 1u;
                if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2933 = _2780;
                    _2934 = _2782;
                    _2935 = _2784;
                    _2936 = _2786;
                    _2937 = _2788;
                    _2938 = _2790;
                    _2939 = _2940;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((4294967295u << _2796) & _2634) == 0u)
        {
            _2901 = _2779;
            _2903 = _2781;
            _2905 = _2783;
            _2907 = _2785;
            _2909 = _2787;
            _2911 = _2789;
        }
        else
        {
            float _2926 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
            float _2927 = _2926 * _1693;
            float _2928 = _2926 * _1694;
            float _2929 = _2926 * _1695;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _3040 = _2779;
                float _3041 = _2781;
                float _3042 = _2783;
                float _3043 = _2785;
                float _3044 = _2787;
                float _3045 = _2789;
                uint _3046 = _2796;
                uint _3055;
                bool _3056;
                for (;;)
                {
                    _3055 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                    _3056 = _3055 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3056)
                    {
                        frontier_phi_72_pred = _3045;
                        frontier_phi_72_pred_1 = _3044;
                        frontier_phi_72_pred_2 = _3043;
                        frontier_phi_72_pred_3 = _3042;
                        frontier_phi_72_pred_4 = _3041;
                        frontier_phi_72_pred_5 = _3040;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        uint _3258 = _3055;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3328;
                        vec4 _3344;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3269 = ((_3046 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3315 = (_3269 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3331 = (_3269 * 40u) + 20u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3347 = (_3269 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3269 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_1695, _3379.z, fma(_1694, _3379.y, _3379.x * _1693)) + _3379.w;
                            _3392 = !((fma(_1695, _3360.z, fma(_1694, _3360.y, _3360.x * _1693)) + _3360.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3284.x - _1693;
                                float _3420 = _3284.y - _1694;
                                float _3421 = _3284.z - _1695;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3285 * _3285));
                                float _4529 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3437 = sqrt(_3422) * _3300.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_516, _519, _522))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_1695, _3328.z, fma(_1694, _3328.y, _3328.x * _1693)) + _3328.w) / _3391;
                                float _3451 = (fma(_1695, _3344.z, fma(_1694, _3344.y, _3344.x * _1693)) + _3344.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4545 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _631;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2927;
                                float _3481 = _3427 - _2928;
                                float _3482 = _3428 - _2929;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_516, _519, _522), vec3((-0.0) - _2927, (-0.0) - _2928, (-0.0) - _2929));
                                float _4556 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3494 = dot(vec3(_516, _519, _522), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4567 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_516, _519, _522), vec3(_3426, _3427, _3428))) + _3503;
                                float _4578 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4589 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3457 * _3300.y;
                                frontier_phi_78_pred_1 = _3457 * _3300.x;
                                frontier_phi_78_pred_2 = _3531 * _3312.z;
                                frontier_phi_78_pred_3 = _3531 * _3312.y;
                                frontier_phi_78_pred_4 = _3531 * _3312.x;
                                frontier_phi_78_pred_5 = _3457 * _3300.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_78_pred;
                            _3538 = frontier_phi_78_pred_1;
                            _3537 = frontier_phi_78_pred_2;
                            _3536 = frontier_phi_78_pred_3;
                            _3535 = frontier_phi_78_pred_4;
                            _3540 = frontier_phi_78_pred_5;
                            _3242 = _3538 + _3255;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3239 = _3535 + _3252;
                            _3240 = _3536 + _3253;
                            _3241 = _3537 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3244;
                        frontier_phi_72_pred_1 = _3243;
                        frontier_phi_72_pred_2 = _3242;
                        frontier_phi_72_pred_3 = _3241;
                        frontier_phi_72_pred_4 = _3240;
                        frontier_phi_72_pred_5 = _3239;
                    }
                    _2912 = frontier_phi_72_pred;
                    _2910 = frontier_phi_72_pred_1;
                    _2908 = frontier_phi_72_pred_2;
                    _2906 = frontier_phi_72_pred_3;
                    _2904 = frontier_phi_72_pred_4;
                    _2902 = frontier_phi_72_pred_5;
                    uint _3047 = _3046 + 1u;
                    if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3040 = _2902;
                        _3041 = _2904;
                        _3042 = _2906;
                        _3043 = _2908;
                        _3044 = _2910;
                        _3045 = _2912;
                        _3046 = _3047;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2912;
                frontier_phi_60_61_ladder_1 = _2910;
                frontier_phi_60_61_ladder_2 = _2906;
                frontier_phi_60_61_ladder_3 = _2904;
                frontier_phi_60_61_ladder_4 = _2902;
                frontier_phi_60_61_ladder_5 = _2908;
            }
            else
            {
                frontier_phi_60_61_ladder = _2789;
                frontier_phi_60_61_ladder_1 = _2787;
                frontier_phi_60_61_ladder_2 = _2783;
                frontier_phi_60_61_ladder_3 = _2781;
                frontier_phi_60_61_ladder_4 = _2779;
                frontier_phi_60_61_ladder_5 = _2785;
            }
            _2901 = frontier_phi_60_61_ladder_4;
            _2903 = frontier_phi_60_61_ladder_3;
            _2905 = frontier_phi_60_61_ladder_2;
            _2907 = frontier_phi_60_61_ladder_5;
            _2909 = frontier_phi_60_61_ladder_1;
            _2911 = frontier_phi_60_61_ladder;
        }
        float _2916 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2647 = (_2916 * _2907) + _2159;
        _2649 = (_2916 * _2909) + _2161;
        _2651 = (_2916 * _2911) + _2163;
        _2653 = ((_2901 * _600) * _2916) + _2497;
        _2655 = ((_2903 * _602) * _2916) + _2499;
        _2657 = ((_2905 * _603) * _2916) + _2501;
    }
    else
    {
        _2647 = _2159;
        _2649 = _2161;
        _2651 = _2163;
        _2653 = _2497;
        _2655 = _2499;
        _2657 = _2501;
    }
    uint _2663 = _549 + uint(cbMatDynParam._m0[0u].w);
    float _2673 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _353) * _365.x) * cbInstanceData._m0[_2663].x;
    float _2678 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _353) * _365.y) * cbInstanceData._m0[_2663].y;
    float _2683 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _353) * _365.z) * cbInstanceData._m0[_2663].z;
    vec4 _2691 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2705 = ((((_2673 * _495) - _2673) + _2691.x) * cbMtdParam._m0[3u].x) + _2673;
    float _2706 = ((((_2678 * _495) - _2678) + _2691.y) * cbMtdParam._m0[3u].x) + _2678;
    float _2707 = ((((_2683 * _495) - _2683) + _2691.z) * cbMtdParam._m0[3u].x) + _2683;
    float _4605 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4616 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4627 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2726 = (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2647 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _615))) + ((_2653 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1422)) * cbPerFrame._m0[3u].x)) + _2705;
    float _2727 = (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2649 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _615))) + ((_2655 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1422)) * cbPerFrame._m0[3u].x)) + _2706;
    float _2728 = (((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2651 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _615))) + ((_2657 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1422)) * cbPerFrame._m0[3u].x)) + _2707;
    float _4653 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2741 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    uint _2742 = _548 + 6u;
    float _2750 = _490 / cbSceneParam._m0[86u].x;
    float _2751 = _491 / cbSceneParam._m0[86u].y;
    vec4 _2765 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, (log2((isnan(cbSceneParam._m0[77u].w) ? _424 : (isnan(_424) ? cbSceneParam._m0[77u].w : min(_424, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2767 = _2765.x;
    float _2768 = _2765.y;
    float _2769 = _2765.z;
    float _2770 = _2765.w;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_424 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_424) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _424 : min(cbSceneParam._m0[80u].w, _424));
        float _2805 = _2804 / _424;
        float _2816 = _2805 * _475;
        float _2817 = _476 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2820 = _2805 * _477;
        float _2822 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2823 = _2822 + cbSceneParam._m0[79u].w;
        float _2824 = cbSceneParam._m0[79u].w - _2817;
        float _2830 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2820 * _2820));
        float _2833 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2830;
        float _2838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3002;
        if (abs((_2818 - _2822) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3002 = ((((_2823 > 0.0) ? exp2(_2838 * _2823) : (2.0 - exp2(_2840 * _2823))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2833;
        }
        else
        {
            float _2962 = 1.0 / cbSceneParam._m0[80u].x;
            float _2963 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : max(_2823, _2824));
            float _2964 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : min(_2823, _2824));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            _3002 = ((abs(_2830 / _2818) * cbSceneParam._m0[80u].y) * ((((_2973 - _2974) * 2.0) - ((exp2(_2838 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0)))) - exp2(_2838 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))))) * _2962)) - ((exp2(_2840 * _2973) - exp2(_2840 * _2974)) * _2962))) + (_2833 * cbSceneParam._m0[80u].z);
        }
        vec4 _3004 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, 1.0), 0.0);
        float _3013 = exp2((_3002 * (-1.44269502162933349609375)) * (1.0 - _3004.w));
        float _3014 = log2(_3013);
        float _3030 = log2(_2770);
        _2842 = (exp2(_3030 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].x)) * _3004.x) / cbSceneParam._m0[78u].x)) + _2767;
        _2844 = (exp2(_3030 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].y)) * _3004.y) / cbSceneParam._m0[78u].y)) + _2768;
        _2846 = (exp2(_3030 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].z)) * _3004.z) / cbSceneParam._m0[78u].z)) + _2769;
        _2848 = _3013 * _2770;
    }
    else
    {
        _2842 = _2767;
        _2844 = _2768;
        _2846 = _2769;
        _2848 = _2770;
    }
    float _2860 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2861 = _2860 == 3.0;
    float _2862 = log2(_2848);
    float _2866 = exp2(_2862 * cbSceneParam._m0[78u].x);
    float _2867 = exp2(_2862 * cbSceneParam._m0[78u].y);
    float _2868 = exp2(_2862 * cbSceneParam._m0[78u].z);
    float _2869 = _2866 * (isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0)));
    float _2870 = _2867 * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0)));
    float _2871 = _2868 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)));
    float _2880 = (_2860 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2880 * (_2861 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.y = _2880 * (_2861 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.z = _2880 * (_2861 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.w = cbInstanceData._m0[_2742].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2705) * _2741) * _2866) * _2880;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2706) * _2741) * _2867) * _2880;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2707) * _2741) * _2868) * _2880;
    SV_Target_1.w = cbInstanceData._m0[_2742].w;
}


