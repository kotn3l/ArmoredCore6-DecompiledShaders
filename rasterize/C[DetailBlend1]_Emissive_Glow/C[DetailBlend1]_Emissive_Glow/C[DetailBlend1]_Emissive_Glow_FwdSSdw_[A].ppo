#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1030;
float _3516;
float _3517;
float _3518;
float _3519;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _257 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = ((_240.x * 4.55000019073486328125) * _257.x) * cbMtdParam._m0[9u].x;
    float _274 = ((_240.y * 4.55000019073486328125) * _257.y) * cbMtdParam._m0[9u].y;
    float _277 = ((_240.z * 4.55000019073486328125) * _257.z) * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _289.z;
    float _299 = exp2(log2(_293 * 22.0) * 260.0);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    vec4 _319 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _331 = ((((isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0))) * (_293 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[11u].x + _319.z);
    float _349 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3538 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _355 = (_350 * _350) * (3.0 - (_350 * 2.0));
    vec4 _367 = texture(sampler2D(C_DetailBlend1_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _375 = (_289.x * 2.0) + (-1.0);
    float _376 = (_289.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3549 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _382 = sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))));
    float _389 = (cbMtdParam._m0[11u].y * ((_319.x * 2.0) + (-1.0))) + _375;
    float _390 = (cbMtdParam._m0[11u].y * ((_319.y * 2.0) + (-1.0))) + _376;
    float _393 = fma(_382, _216 * NORMAL.x, fma(_390, _223 * TANGENT.x, (_209 * _201) * _389));
    float _396 = fma(_382, _216 * NORMAL.y, fma(_390, _223 * TANGENT.y, (_209 * _202) * _389));
    float _399 = fma(_382, _216 * NORMAL.z, fma(_390, _223 * TANGENT.z, (_209 * _203) * _389));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _3560 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _407 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3582 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3593 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _426 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _467 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _477 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _467);
    float _478 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _467);
    float _479 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _467);
    float _483 = inversesqrt(dot(vec3(_477, _478, _479), vec3(_477, _478, _479)));
    float _484 = _477 * _483;
    float _485 = _478 * _483;
    float _486 = _479 * _483;
    vec4 _491 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _493 = _491.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _711 = sqrt(((_477 * _477) + (_478 * _478)) + (_479 * _479));
        float _717 = (cbMatDynParam._m0[5u].x * _711) + cbMatDynParam._m0[5u].y;
        float _3604 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _722 = (cbMatDynParam._m0[5u].z * _711) + cbMatDynParam._m0[5u].w;
        float _3615 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) - _718)) + _718) < ((_493 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _505 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _506 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _508 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _510 = _508.w;
    float _530 = fma(_406, cbSceneParam._m0[5u].z, fma(_405, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _404));
    float _533 = fma(_406, cbSceneParam._m0[6u].z, fma(_405, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _404));
    float _536 = fma(_406, cbSceneParam._m0[7u].z, fma(_405, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _404));
    vec4 _538 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _549 = (((_538.y - _407) + (_538.w * _407)) * cbMtdParam._m0[3u].x) + _407;
    uint _562 = uint(roundEven(NORMAL.w)) * 13u;
    uint _563 = _562 + 9u;
    uint _564 = _563 + uint(cbMatDynParam._m0[0u].w);
    float _570 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_564].x;
    float _571 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_564].y;
    float _572 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_564].z;
    float _3626 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    vec4 _576 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _581 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _587 = cbMtdParam._m0[3u].x * _581.x;
    float _600 = (cbMtdParam._m0[3u].x * (((_573 * _510) - _573) + _576.x)) + _573;
    float _601 = (cbMtdParam._m0[3u].x * (((_574 * _510) - _574) + _576.y)) + _574;
    float _602 = (cbMtdParam._m0[3u].x * (((_575 * _510) - _575) + _576.z)) + _575;
    float _603 = 1.0 - _587;
    float _604 = _600 * _603;
    float _605 = _601 * _603;
    float _606 = _602 * _603;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _587;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _587;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _587;
    float _614 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _505, cbSceneParam._m0[86u].y * _506));
    float _629 = _626.x * TEXCOORD_4;
    float _630 = dot(vec3(_404, _405, _406), vec3(_484, _485, _486));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _404) - _484;
    float _638 = (_633 * _405) - _485;
    float _639 = (_633 * _406) - _486;
    float _643 = abs(dot(vec3(_484, _485, _486), vec3(_404, _405, _406)));
    float _3659 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_549);
    float _657 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _663 = (1.0 - _657) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _664 = _657 * _645;
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1029;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _756 = fma(_700, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692));
        float _760 = fma(_700, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692));
        float _764 = fma(_700, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692));
        float _787 = _692 + _404;
        float _788 = _696 + _405;
        float _789 = _700 + _406;
        float _799 = fma(_789, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787)) - _756;
        float _800 = fma(_789, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787)) - _760;
        float _801 = fma(_789, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787)) - _764;
        float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
        float _818 = ((_805 * _799) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_756 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_805 * _800) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_760 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_805 * _801) / cbModelParam._m0[34u].z) + ((((((_764 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _857 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_823.x + (-0.5));
        float _859 = _857 * (_823.y + (-0.5));
        float _860 = _857 * (_823.z + (-0.5));
        float _867 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_830.x + (-0.5));
        float _869 = _867 * (_830.y + (-0.5));
        float _870 = _867 * (_830.z + (-0.5));
        float _877 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_837.x + (-0.5));
        float _879 = _877 * (_837.y + (-0.5));
        float _880 = _877 * (_837.z + (-0.5));
        float _887 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_844.x + (-0.5));
        float _889 = _887 * (_844.y + (-0.5));
        float _890 = _887 * (_844.z + (-0.5));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = _858 * 0.5;
        float _895 = _868 * 0.5;
        float _896 = _878 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _911 = (dot(vec3(_404, _405, _406), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _921 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3707 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_923 + 1.0))) + _928) * _891;
        float _938 = _859 * 0.5;
        float _939 = _869 * 0.5;
        float _940 = _879 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_404, _405, _406), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3740 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_965 + 1.0))) + _970) * _892;
        float _980 = _860 * 0.5;
        float _981 = _870 * 0.5;
        float _982 = _880 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_404, _405, _406), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3773 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1007 + 1.0))) + _1012) * _893;
        _1029 = _860;
        _1031 = _859;
        _1032 = _858;
        _1033 = _870;
        _1034 = _869;
        _1035 = _868;
        _1036 = _880;
        _1037 = _879;
        _1038 = _878;
        _1039 = _893;
        _1040 = _892;
        _1041 = _891;
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _1030;
        _1031 = _1030;
        _1032 = _1030;
        _1033 = _1030;
        _1034 = _1030;
        _1035 = _1030;
        _1036 = _1030;
        _1037 = _1030;
        _1038 = _1030;
        _1039 = _1030;
        _1040 = _1030;
        _1041 = _1030;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1073 = fma(_700, cbModelParam._m0[30u].z, fma(_696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _692));
        float _1077 = fma(_700, cbModelParam._m0[31u].z, fma(_696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _692));
        float _1081 = fma(_700, cbModelParam._m0[32u].z, fma(_696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _692));
        float _1104 = _692 + _404;
        float _1105 = _696 + _405;
        float _1106 = _700 + _406;
        float _1116 = fma(_1106, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104)) - _1073;
        float _1117 = fma(_1106, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104)) - _1077;
        float _1118 = fma(_1106, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104)) - _1081;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1073 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1077 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[35u].z) + ((((((_1081 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1172 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1139.x + (-0.5));
        float _1174 = _1172 * (_1139.y + (-0.5));
        float _1175 = _1172 * (_1139.z + (-0.5));
        float _1182 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1146.x + (-0.5));
        float _1184 = _1182 * (_1146.y + (-0.5));
        float _1185 = _1182 * (_1146.z + (-0.5));
        float _1192 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1153.x + (-0.5));
        float _1194 = _1192 * (_1153.y + (-0.5));
        float _1195 = _1192 * (_1153.z + (-0.5));
        float _1202 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1160.x + (-0.5));
        float _1204 = _1202 * (_1160.y + (-0.5));
        float _1205 = _1202 * (_1160.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_404, _405, _406), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3836 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1236 + 1.0))) + _1241) * _1206;
        float _1251 = _1174 * 0.5;
        float _1252 = _1184 * 0.5;
        float _1253 = _1194 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_404, _405, _406), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3869 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1278 + 1.0))) + _1283) * _1207;
        float _1293 = _1175 * 0.5;
        float _1294 = _1185 * 0.5;
        float _1295 = _1195 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_404, _405, _406), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3902 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1320 + 1.0))) + _1325) * _1208;
        _1342 = _1175;
        _1343 = _1174;
        _1344 = _1173;
        _1345 = _1185;
        _1346 = _1184;
        _1347 = _1183;
        _1348 = _1195;
        _1349 = _1194;
        _1350 = _1193;
        _1351 = _1208;
        _1352 = _1207;
        _1353 = _1206;
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1030;
        _1343 = _1030;
        _1344 = _1030;
        _1345 = _1030;
        _1346 = _1030;
        _1347 = _1030;
        _1348 = _1030;
        _1349 = _1030;
        _1350 = _1030;
        _1351 = _1030;
        _1352 = _1030;
        _1353 = _1030;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1389 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1392 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1395 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1366));
    float _1410 = _637 * 0.5;
    float _1411 = _638 * 0.5;
    float _1412 = _639 * 0.5;
    float _1413 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1416 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1419 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1453;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1426 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1029, _1033, _1036, _1039));
        float _1430 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1434 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1441 = dot(vec4(cbModelParam._m0[39u]), vec4(_1410, _1411, _1412, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1464;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1455 = dot(vec4(cbModelParam._m0[40u]), vec4(_1410, _1411, _1412, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1468 = (_1464 * cbModelParam._m0[1u].x) + (_1453 * (1.0 - cbModelParam._m0[1u].x));
    float _1478 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _549);
    float _1479 = isnan(_1478) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1478 : min(cbModelParam._m0[25u].z, _1478));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1528 = fma(_700, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692)) + cbModelParam._m0[13u].w;
        float _1532 = fma(_700, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692)) + cbModelParam._m0[14u].w;
        float _1536 = fma(_700, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692)) + cbModelParam._m0[15u].w;
        float _1539 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1542 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1545 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1573;
        if (_1539 > 0.0)
        {
            _1573 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1573 = frontier_phi_17_15_ladder;
        }
        float _1799;
        if (_1542 > 0.0)
        {
            _1799 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1799 = frontier_phi_26_22_ladder;
        }
        float _2056;
        if (_1545 > 0.0)
        {
            _2056 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2056 = frontier_phi_38_33_ladder;
        }
        float _2058 = isnan(_1799) ? _1573 : (isnan(_1573) ? _1799 : min(_1573, _1799));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1539) + _1528;
        float _2064 = (_2059 * _1542) + _1532;
        float _2065 = (_2059 * _1545) + _1536;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2193 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1479);
            frontier_phi_16_38_ladder = _2193.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2193.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2193.x * cbModelParam._m0[1u].y;
        }
        _1561 = frontier_phi_16_38_ladder_2;
        _1563 = frontier_phi_16_38_ladder_1;
        _1565 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1479);
        _1561 = _1549.x * cbModelParam._m0[1u].y;
        _1563 = _1549.y * cbModelParam._m0[1u].y;
        _1565 = _1549.z * cbModelParam._m0[1u].y;
    }
    float _1569 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _549);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1569 : min(cbModelParam._m0[25u].w, _1569));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_700, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_700, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_700, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1640 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1643 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1804;
        if (_1637 > 0.0)
        {
            _1804 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1804 = frontier_phi_28_24_ladder;
        }
        float _2083;
        if (_1640 > 0.0)
        {
            _2083 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2083 = frontier_phi_40_35_ladder;
        }
        float _2296;
        if (_1643 > 0.0)
        {
            _2296 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2296 = frontier_phi_49_46_ladder;
        }
        float _2298 = isnan(_2083) ? _1804 : (isnan(_1804) ? _2083 : min(_1804, _2083));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1637) + _1626;
        float _2304 = (_2299 * _1640) + _1630;
        float _2305 = (_2299 * _1643) + _1634;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2305, cbModelParam._m0[17u].z, fma(_2304, cbModelParam._m0[17u].y, _2303 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2305, cbModelParam._m0[18u].z, fma(_2304, cbModelParam._m0[18u].y, _2303 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2305, cbModelParam._m0[19u].z, fma(_2304, cbModelParam._m0[19u].y, _2303 * cbModelParam._m0[19u].x))), _1570);
            frontier_phi_25_49_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_25_49_ladder_2;
        _1664 = frontier_phi_25_49_ladder_1;
        _1666 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1570);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1679 = (((_663 * _614) + _664) * _629) * ((cbModelParam._m0[1u].w * (_1662 - _1561)) + _1561);
    float _1681 = (((_663 * _616) + _664) * _629) * ((cbModelParam._m0[1u].w * (_1664 - _1563)) + _1563);
    float _1683 = (((_663 * _617) + _664) * _629) * ((cbModelParam._m0[1u].w * (_1666 - _1565)) + _1565);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    vec4 _1700 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_505, _506));
    float _1702 = _1700.w;
    float _1714 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1702);
    float _1715 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1702);
    float _1716 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1702);
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_562 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1730 = _629 + (-1.0);
    float _1735 = (cbLight._m0[_1723].x * _1730) + 1.0;
    float _1736 = (cbLight._m0[_1723].y * _1730) + 1.0;
    float _1737 = (cbLight._m0[_1723].z * _1730) + 1.0;
    float _1738 = (cbLight._m0[_1723].w * _1730) + 1.0;
    uint _1739 = _1722 + 5u;
    float _1745 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1749 = _1722 + 4u;
    float _1758 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1762 = _1722 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_404, _405, _406));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_404, _405, _406));
    float _4038 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _4049 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1739].x * _1745) * _1783) + (((cbLight._m0[_1749].x * _1714) * _1758) * _1781);
    float _1791 = ((_1745 * cbLight._m0[_1739].y) * _1783) + (((cbLight._m0[_1749].y * _1715) * _1758) * _1781);
    float _1792 = ((_1745 * cbLight._m0[_1739].z) * _1783) + (((cbLight._m0[_1749].z * _1716) * _1758) * _1781);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1722 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1790;
        _1811 = _1791;
        _1813 = _1792;
    }
    else
    {
        uint _1817 = _1722 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1722 + 2u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _4060 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1836 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1792;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2027 = _1722 + 7u;
        float _2043 = (dot(vec3(cbLight._m0[_1722 + 3u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _4076 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2046 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1854 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1809;
        _1856 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1811;
        _1858 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1813;
    }
    uint _1861 = _1722 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _549) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1722].x + _484;
    float _1877 = cbLight._m0[_1722].y + _485;
    float _1878 = cbLight._m0[_1722].z + _486;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1722].xyz));
    float _4092 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _1890 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _1891 = dot(vec3(_404, _405, _406), vec3(_1883, _1884, _1885));
    float _4114 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1883, _1884, _1885));
    float _4125 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
    float _1912 = 0.959999978542327880859375 - _611;
    float _1914 = 0.959999978542327880859375 - _612;
    float _1915 = 0.959999978542327880859375 - _613;
    float _1922 = 1.0 - _1875;
    float _1933 = (0.5 / (((_1890 * ((_1889 * _1922) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1922) + _1875) * _1889))) * _1889;
    float _4136 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1949 = _1722 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _549) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1762].x + _484;
    float _1963 = cbLight._m0[_1762].y + _485;
    float _1964 = cbLight._m0[_1762].z + _486;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1762].xyz));
    float _4147 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _1976 = dot(vec3(_404, _405, _406), vec3(_1969, _1970, _1971));
    float _4158 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1969, _1970, _1971));
    float _4169 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0);
    float _2002 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1890 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2002) + _1961) * _1975))) * _1975;
    float _4180 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2024 = (((((_1995 * _1912) + _614) * cbLight._m0[_1949].x) * _2014) * _1745) + ((((cbLight._m0[_1861].x * _1714) * ((_1911 * _1912) + _614)) * _1935) * _1758);
    float _2025 = (((((_1995 * _1914) + _616) * cbLight._m0[_1949].y) * _2014) * _1745) + ((((cbLight._m0[_1861].y * _1715) * ((_1911 * _1914) + _616)) * _1935) * _1758);
    float _2026 = (((((_1995 * _1915) + _617) * cbLight._m0[_1949].z) * _2014) * _1745) + ((((cbLight._m0[_1861].z * _1716) * ((_1911 * _1915) + _617)) * _1935) * _1758);
    float _2088;
    float _2090;
    float _2092;
    if (_1798)
    {
        _2088 = _2024;
        _2090 = _2025;
        _2092 = _2026;
    }
    else
    {
        uint _2094 = _1722 + 2u;
        uint _2098 = _1722 + 10u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _549) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _484;
        float _2115 = cbLight._m0[_2094].y + _485;
        float _2116 = cbLight._m0[_2094].z + _486;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2094].xyz));
        float _4191 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2128 = dot(vec3(_404, _405, _406), vec3(_2121, _2122, _2123));
        float _4202 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4213 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
        float _2154 = 1.0 - _2113;
        float _2164 = (0.5 / (((_1890 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2154) + _2113) * _2127))) * _2127;
        float _4224 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2088 = (((((_2147 * _1912) + _614) * cbLight._m0[_2098].x) * _2166) * _2167) + _2024;
        _2090 = (((((_2147 * _1914) + _616) * cbLight._m0[_2098].y) * _2166) * _2167) + _2025;
        _2092 = (((((_2147 * _1915) + _617) * cbLight._m0[_2098].z) * _2166) * _2167) + _2026;
    }
    float _2202;
    float _2204;
    float _2206;
    if (_1816)
    {
        _2202 = _2088;
        _2204 = _2090;
        _2206 = _2092;
    }
    else
    {
        uint _2213 = _1722 + 3u;
        uint _2217 = _1722 + 11u;
        float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _549) * 0.949999988079071044921875);
        float _2232 = _2231 * _2231;
        float _2233 = cbLight._m0[_2213].x + _484;
        float _2234 = cbLight._m0[_2213].y + _485;
        float _2235 = cbLight._m0[_2213].z + _486;
        float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
        float _2240 = _2239 * _2233;
        float _2241 = _2239 * _2234;
        float _2242 = _2239 * _2235;
        float _2243 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2213].xyz));
        float _4240 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2247 = dot(vec3(_404, _405, _406), vec3(_2240, _2241, _2242));
        float _4251 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2251 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2240, _2241, _2242));
        float _4262 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2255 = _2232 * _2232;
        float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
        float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
        float _2273 = 1.0 - _2232;
        float _2283 = (0.5 / (((_1890 * ((_2246 * _2273) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2273) + _2232) * _2246))) * _2246;
        float _4273 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2285 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
        float _2286 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2202 = (((((_2266 * _1912) + _614) * cbLight._m0[_2217].x) * _2285) * _2286) + _2088;
        _2204 = (((((_2266 * _1914) + _616) * cbLight._m0[_2217].y) * _2285) * _2286) + _2090;
        _2206 = (((((_2266 * _1915) + _617) * cbLight._m0[_2217].z) * _2285) * _2286) + _2092;
    }
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_1720.y == 0u)
    {
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2361;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2361;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2361;
        uvec4 _2376 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2377 = _2376.x;
        uint _2388 = uint((float(_2376.y) * floor(float(uint(cbSceneParam._m0[85u].y * _506) / _2377))) + floor(float(uint(cbSceneParam._m0[85u].x * _505) / _2377)));
        float _2398 = (log2(_2364 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        uint _2402 = uint(isnan(14.0) ? _2399 : (isnan(_2399) ? 14.0 : min(_2399, 14.0)));
        uvec4 _2407 = texelFetch(g_lightClusterGridBuffer, int(((_2402 << 2u) + (_2388 << 6u)) >> 2u));
        uint _2408 = _2407.x;
        uint _2409 = _2376.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2409 >> 4u) & 15u)) + 4294967295u) & _2408) == 0u) || ((_2409 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            uint _2742 = 0u;
            uint _2751;
            bool _2752;
            for (;;)
            {
                _2751 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2742 << 2u)) >> 2u)).x;
                _2752 = _2751 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2752)
                {
                    frontier_phi_66_pred = _2736;
                    frontier_phi_66_pred_1 = _2741;
                    frontier_phi_66_pred_2 = _2740;
                    frontier_phi_66_pred_3 = _2739;
                    frontier_phi_66_pred_4 = _2738;
                    frontier_phi_66_pred_5 = _2737;
                }
                else
                {
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    uint _2887;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2751;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    for (;;)
                    {
                        uint _2891 = uint(findLSB(_2887)) + (_2742 << 5u);
                        uint _2888 = (_2887 + 4294967295u) & _2887;
                        uint _2893 = _2891 * 48u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2913 = (_2891 * 48u) + 4u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2932 = (_2891 * 48u) + 8u;
                        vec3 _2943 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x));
                        float _2947 = _2907.x - _2362;
                        float _2948 = _2907.y - _2363;
                        float _2949 = _2907.z - _2364;
                        float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                        float _2953 = inversesqrt(_2950);
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2957 = dot(vec3(_530, _533, _536), vec3(_2954, _2955, _2956));
                        float _2962 = 1.0 - (_2950 * _2907.w);
                        float _4299 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2964 = sqrt(_2950) * _2926.w;
                        float _2967 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2957) + _2968;
                        float _2974 = _2964 * _2964;
                        float _2978 = ((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2963) / ((_2974 * 0.699999988079071044921875) + 1.0);
                        float _2982 = (-0.0) - _2362;
                        float _2983 = (-0.0) - _2363;
                        float _2984 = (-0.0) - _2364;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2999 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                        float _3000 = 1.0 - _645;
                        float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                        float _3008 = _3007 * _3007;
                        float _3009 = _3008 * _3008;
                        float _3010 = _2989 + _2954;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3020 = dot(vec3(_530, _533, _536), vec3(_2989, _2990, _2991));
                        float _4315 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3024 = dot(vec3(_530, _533, _536), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                        float _4326 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                        float _3032 = _2967 * _3008;
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _2957) + _3033;
                        float _4337 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3038 = 1.0 - _3008;
                        float _3048 = (0.5 / (((_3037 * ((_3023 * _3038) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3008) * _3023))) * _3037;
                        float _4348 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3059 = (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) / ((_3031 * _3031) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125))) * _2963;
                        _2811 = (_2978 * _2926.x) + _2884;
                        _2812 = (_2978 * _2926.y) + _2885;
                        _2813 = (_2978 * _2926.z) + _2886;
                        _2808 = (_3059 * _2943.x) + _2881;
                        _2809 = (_3059 * _2943.y) + _2882;
                        _2810 = (_3059 * _2943.z) + _2883;
                        if (_2888 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2888;
                        }
                    }
                    frontier_phi_66_pred = _2808;
                    frontier_phi_66_pred_1 = _2813;
                    frontier_phi_66_pred_2 = _2812;
                    frontier_phi_66_pred_3 = _2811;
                    frontier_phi_66_pred_4 = _2810;
                    frontier_phi_66_pred_5 = _2809;
                }
                _2575 = frontier_phi_66_pred;
                _2585 = frontier_phi_66_pred_1;
                _2583 = frontier_phi_66_pred_2;
                _2581 = frontier_phi_66_pred_3;
                _2579 = frontier_phi_66_pred_4;
                _2577 = frontier_phi_66_pred_5;
                uint _2743 = _2742 + 1u;
                if (_2743 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2736 = _2575;
                    _2737 = _2577;
                    _2738 = _2579;
                    _2739 = _2581;
                    _2740 = _2583;
                    _2741 = _2585;
                    _2742 = _2743;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((4294967295u << _2591) & _2408) == 0u)
        {
            _2704 = _2574;
            _2706 = _2576;
            _2708 = _2578;
            _2710 = _2580;
            _2712 = _2582;
            _2714 = _2584;
        }
        else
        {
            float _2729 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
            float _2730 = _2729 * _2362;
            float _2731 = _2729 * _2363;
            float _2732 = _2729 * _2364;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2864 = _2574;
                float _2865 = _2576;
                float _2866 = _2578;
                float _2867 = _2580;
                float _2868 = _2582;
                float _2869 = _2584;
                uint _2870 = _2591;
                uint _2879;
                bool _2880;
                for (;;)
                {
                    _2879 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                    _2880 = _2879 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2880)
                    {
                        frontier_phi_77_pred = _2869;
                        frontier_phi_77_pred_1 = _2868;
                        frontier_phi_77_pred_2 = _2867;
                        frontier_phi_77_pred_3 = _2866;
                        frontier_phi_77_pred_4 = _2865;
                        frontier_phi_77_pred_5 = _2864;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        uint _3092 = _2879;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3162;
                        vec4 _3178;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3103 = ((_2870 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3149 = (_3103 * 40u) + 16u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3103 * 40u) + 20u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3181 = (_3103 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3103 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_2364, _3213.z, fma(_2363, _3213.y, _3213.x * _2362)) + _3213.w;
                            _3226 = !((fma(_2364, _3194.z, fma(_2363, _3194.y, _3194.x * _2362)) + _3194.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3118.x - _2362;
                                float _3254 = _3118.y - _2363;
                                float _3255 = _3118.z - _2364;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3119 * _3119));
                                float _4359 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3271 = sqrt(_3256) * _3134.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_530, _533, _536))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_2364, _3162.z, fma(_2363, _3162.y, _3162.x * _2362)) + _3162.w) / _3225;
                                float _3285 = (fma(_2364, _3178.z, fma(_2363, _3178.y, _3178.x * _2362)) + _3178.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4375 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _645;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2730;
                                float _3315 = _3261 - _2731;
                                float _3316 = _3262 - _2732;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2730, (-0.0) - _2731, (-0.0) - _2732));
                                float _4386 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3328 = dot(vec3(_530, _533, _536), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4397 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_530, _533, _536), vec3(_3260, _3261, _3262))) + _3337;
                                float _4408 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4419 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3291 * _3134.y;
                                frontier_phi_83_pred_1 = _3291 * _3134.x;
                                frontier_phi_83_pred_2 = _3365 * _3146.z;
                                frontier_phi_83_pred_3 = _3365 * _3146.y;
                                frontier_phi_83_pred_4 = _3365 * _3146.x;
                                frontier_phi_83_pred_5 = _3291 * _3134.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_83_pred;
                            _3372 = frontier_phi_83_pred_1;
                            _3371 = frontier_phi_83_pred_2;
                            _3370 = frontier_phi_83_pred_3;
                            _3369 = frontier_phi_83_pred_4;
                            _3374 = frontier_phi_83_pred_5;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            _3073 = _3369 + _3086;
                            _3074 = _3370 + _3087;
                            _3075 = _3371 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3078;
                        frontier_phi_77_pred_1 = _3077;
                        frontier_phi_77_pred_2 = _3076;
                        frontier_phi_77_pred_3 = _3075;
                        frontier_phi_77_pred_4 = _3074;
                        frontier_phi_77_pred_5 = _3073;
                    }
                    _2715 = frontier_phi_77_pred;
                    _2713 = frontier_phi_77_pred_1;
                    _2711 = frontier_phi_77_pred_2;
                    _2709 = frontier_phi_77_pred_3;
                    _2707 = frontier_phi_77_pred_4;
                    _2705 = frontier_phi_77_pred_5;
                    uint _2871 = _2870 + 1u;
                    if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2864 = _2705;
                        _2865 = _2707;
                        _2866 = _2709;
                        _2867 = _2711;
                        _2868 = _2713;
                        _2869 = _2715;
                        _2870 = _2871;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2709;
                frontier_phi_58_59_ladder_1 = _2715;
                frontier_phi_58_59_ladder_2 = _2713;
                frontier_phi_58_59_ladder_3 = _2711;
                frontier_phi_58_59_ladder_4 = _2707;
                frontier_phi_58_59_ladder_5 = _2705;
            }
            else
            {
                frontier_phi_58_59_ladder = _2578;
                frontier_phi_58_59_ladder_1 = _2584;
                frontier_phi_58_59_ladder_2 = _2582;
                frontier_phi_58_59_ladder_3 = _2580;
                frontier_phi_58_59_ladder_4 = _2576;
                frontier_phi_58_59_ladder_5 = _2574;
            }
            _2704 = frontier_phi_58_59_ladder_5;
            _2706 = frontier_phi_58_59_ladder_4;
            _2708 = frontier_phi_58_59_ladder;
            _2710 = frontier_phi_58_59_ladder_3;
            _2712 = frontier_phi_58_59_ladder_2;
            _2714 = frontier_phi_58_59_ladder_1;
        }
        float _2719 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2421 = (_2719 * _2710) + _1854;
        _2423 = (_2719 * _2712) + _1856;
        _2425 = (_2719 * _2714) + _1858;
        _2427 = ((_2704 * _614) * _2719) + _2202;
        _2429 = ((_2706 * _616) * _2719) + _2204;
        _2431 = ((_2708 * _617) * _2719) + _2206;
    }
    else
    {
        _2421 = _1854;
        _2423 = _1856;
        _2425 = _1858;
        _2427 = _2202;
        _2429 = _2204;
        _2431 = _2206;
    }
    uint _2437 = _563 + uint(cbMatDynParam._m0[0u].w);
    float _2447 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _355) * _367.x) * cbInstanceData._m0[_2437].x;
    float _2452 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _355) * _367.y) * cbInstanceData._m0[_2437].y;
    float _2457 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].w) * _355) * _367.z) * cbInstanceData._m0[_2437].z;
    vec4 _2465 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2479 = ((((_2447 * _510) - _2447) + _2465.x) * cbMtdParam._m0[3u].x) + _2447;
    float _2480 = ((((_2452 * _510) - _2452) + _2465.y) * cbMtdParam._m0[3u].x) + _2452;
    float _2481 = ((((_2457 * _510) - _2457) + _2465.z) * cbMtdParam._m0[3u].x) + _2457;
    float _4435 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4446 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4457 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2500 = (((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2421 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _629))) + ((_2427 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1468)) * cbPerFrame._m0[3u].x)) + _2479;
    float _2501 = (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2423 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _629))) + ((_2429 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1468)) * cbPerFrame._m0[3u].x)) + _2480;
    float _2502 = (((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2425 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _629))) + ((_2431 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1468)) * cbPerFrame._m0[3u].x)) + _2481;
    float _2503 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2511 = cbMtdParam._m0[2u].x * _2479;
    float _2512 = cbMtdParam._m0[2u].y * _2480;
    float _2513 = cbMtdParam._m0[2u].z * _2481;
    float _4483 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2515 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    uint _2516 = _562 + 6u;
    float _2524 = _505 / cbSceneParam._m0[86u].x;
    float _2525 = _506 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _426 : (isnan(_426) ? cbSceneParam._m0[77u].w : min(_426, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    if (_426 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_426) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _426 : min(cbSceneParam._m0[80u].w, _426));
        float _2600 = _2599 / _426;
        float _2611 = _2600 * _477;
        float _2612 = _478 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2615 = _2600 * _479;
        float _2617 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2618 = _2617 + cbSceneParam._m0[79u].w;
        float _2619 = cbSceneParam._m0[79u].w - _2612;
        float _2625 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2615 * _2615));
        float _2628 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2625;
        float _2633 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2635 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2821;
        if (abs((_2613 - _2617) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2821 = ((((_2618 > 0.0) ? exp2(_2633 * _2618) : (2.0 - exp2(_2635 * _2618))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2628;
        }
        else
        {
            float _2765 = 1.0 / cbSceneParam._m0[80u].x;
            float _2766 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : max(_2618, _2619));
            float _2767 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : min(_2618, _2619));
            float _2776 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : min(_2766, 0.0));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            _2821 = ((abs(_2625 / _2613) * cbSceneParam._m0[80u].y) * ((((_2776 - _2777) * 2.0) - ((exp2(_2633 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0)))) - exp2(_2633 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))))) * _2765)) - ((exp2(_2635 * _2776) - exp2(_2635 * _2777)) * _2765))) + (_2628 * cbSceneParam._m0[80u].z);
        }
        vec4 _2823 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2832 = exp2((_2821 * (-1.44269502162933349609375)) * (1.0 - _2823.w));
        float _2833 = log2(_2832);
        float _2849 = log2(_2544);
        _2637 = (exp2(_2849 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].x)) * _2823.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2639 = (exp2(_2849 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].y)) * _2823.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2641 = (exp2(_2849 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].z)) * _2823.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2643 = _2832 * _2544;
    }
    else
    {
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
        _2643 = _2544;
    }
    bool _2859;
    vec4 _2653;
    vec4 _2675;
    float _2677;
    float _2681;
    float _2682;
    float _2683;
    float _2686;
    float _2689;
    float _2692;
    float _2693;
    bool _2703;
    for (;;)
    {
        _2653 = cbMatDynParam._m0[0u];
        float _2655 = roundEven(_2653.y);
        bool _2656 = _2655 == 3.0;
        float _2657 = log2(_2643);
        float _2661 = exp2(_2657 * cbSceneParam._m0[78u].x);
        float _2662 = exp2(_2657 * cbSceneParam._m0[78u].y);
        float _2663 = exp2(_2657 * cbSceneParam._m0[78u].z);
        float _2664 = _2661 * _2503;
        float _2665 = _2662 * _2504;
        float _2666 = _2663 * _2505;
        float _2673 = _493 + (-0.5);
        _2675 = cbMtdParam._m0[1u];
        _2677 = _2675.y * _2673;
        float _2680 = (_2655 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2681 = _2680 * (_2656 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2637)));
        _2682 = _2680 * (_2656 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2639)));
        _2683 = _2680 * (_2656 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2641)));
        _2686 = ((_2511 * _2515) * _2661) * _2680;
        _2689 = ((_2512 * _2515) * _2662) * _2680;
        _2692 = ((_2513 * _2515) * _2663) * _2680;
        _2693 = _2673 * 0.999000012874603271484375;
        _2703 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2703)
        {
            if ((cbInstanceData._m0[_562 + 7u].x + _2693) < 0.5)
            {
                _2859 = true;
                break;
            }
        }
        uint _2800 = _563 + uint(_2653.w);
        if ((cbInstanceData._m0[_2800].w < 1.0) && ((cbInstanceData._m0[_2800].w + _2693) < 0.5))
        {
            _2859 = true;
            break;
        }
        if ((_2677 + 1.0) < _2675.x)
        {
            _2859 = true;
            break;
        }
        _2859 = false;
        break;
    }
    float _3064;
    if (_2859)
    {
        discard_state = true;
        _3064 = 0.0;
    }
    else
    {
        _3064 = cbInstanceData._m0[_2516].w;
    }
    SV_Target.x = _2681;
    SV_Target.y = _2682;
    SV_Target.z = _2683;
    SV_Target.w = _3064;
    SV_Target_1.x = _2686;
    SV_Target_1.y = _2689;
    SV_Target_1.z = _2692;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
    discard_exit();
}


