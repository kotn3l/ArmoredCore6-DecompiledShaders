#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1218;
float _3764;
float _3765;
float _3766;
float _3767;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _214 = _213 * _206;
    float _215 = _213 * _207;
    float _216 = _213 * _208;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = exp2(log2(abs(_221)) * 2.2000000476837158203125);
    float _242 = exp2(log2(abs(_222)) * 2.2000000476837158203125);
    float _243 = exp2(log2(abs(_223)) * 2.2000000476837158203125);
    float _3776 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _245 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3798 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _247 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _261 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _262 = _261 * cbMtdParam._m0[16u].x;
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _300 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _301 = _292 / cbMtdParam._m0[13u].z;
    float _302 = _296 / cbMtdParam._m0[13u].z;
    float _303 = _300 / cbMtdParam._m0[13u].z;
    float _317 = (((_302 + (_261 * cbMtdParam._m0[16u].y)) * cbMtdParam._m0[17u].y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    vec4 _320 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_303 + _262) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _317));
    vec4 _335 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_301 + _262) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _317));
    float _385 = exp2(log2(texture(sampler2D(M_Waterfall_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[15u].x * _261) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[15u].y * _261) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x) * cbMtdParam._m0[12u].y);
    float _393 = (cbMtdParam._m0[17u].z * _261) + TEXCOORD_1.x;
    float _394 = (cbMtdParam._m0[17u].w * _261) + TEXCOORD_1.y;
    vec4 _407 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_393 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_394 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _413 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].y * cbMtdParam._m0[11u].w);
    float _420 = ((_407.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _422 = (-0.0) - (cbMtdParam._m0[13u].x * ((_407.x * 0.5) + (-0.25)));
    float _424 = fract(_413);
    float _426 = fract(_413 + 0.5);
    float _438 = abs((_424 * 2.0) + (-1.0));
    vec4 _447 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_424 * _422) + _393) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_420 * _424) + _394) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    vec4 _452 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_426 * _422) + _393) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_420 * _426) + _394) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _477 = (((_335.x * _247) + (_320.x * _245)) + cbMtdParam._m0[9u].x) + (((cbMtdParam._m0[10u].x * TEXCOORD_4.x) * _385) * (((_452.x - _449) * _438) + _449));
    float _480 = (((_335.y * _247) + (_320.y * _245)) + cbMtdParam._m0[9u].y) + (((cbMtdParam._m0[10u].y * TEXCOORD_4.x) * _385) * (((_452.y - _450) * _438) + _450));
    float _483 = (((_335.z * _247) + (_320.z * _245)) + cbMtdParam._m0[9u].z) + (((cbMtdParam._m0[10u].z * TEXCOORD_4.x) * _385) * (((_452.z - _451) * _438) + _451));
    float _487 = (TEXCOORD_4.w - (cbMtdParam._m0[12u].z * ((_335.w * _247) + (_320.w * _245)))) + TEXCOORD_4.w;
    vec4 _511 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].z * _261) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].w * _261) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _536 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _261) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].y * _261) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _542 = (_536.x * 2.0) + (-1.0);
    float _543 = (_536.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3809 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    float _556 = (cbMtdParam._m0[15u].z * _261) + TEXCOORD_1.x;
    float _557 = (cbMtdParam._m0[15u].w * _261) + TEXCOORD_1.y;
    vec4 _562 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_556 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_557 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _570 = ((_562.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _572 = (-0.0) - (cbMtdParam._m0[13u].x * ((_562.x * 0.5) + (-0.25)));
    vec4 _589 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_424 * _572) + _556) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_570 * _424) + _557) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    vec4 _593 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_426 * _572) + _556) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_570 * _426) + _557) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _611 = cbMtdParam._m0[16u].z * _261;
    float _625 = (((cbMtdParam._m0[16u].w * _261) + _302) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w;
    vec4 _627 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2(((_611 + _301) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, _625));
    vec4 _636 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * (_611 + _303)) + cbTextureTilingScale._m0[5u].z, _625));
    float _642 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.502016007900238037109375;
    float _655 = ((((((_511.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _542) + ((((((_593.x - _591) * _438) + _591) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_627.x * _247) + _642) + (_636.x * _245)) * 5.19999980926513671875);
    float _659 = ((((((_511.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _543) + ((((((_593.y - _592) * _438) + _592) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_627.y * _247) + _642) + (_636.y * _245)) * 5.19999980926513671875);
    float _665 = fma(_549, _221, fma(_659, _227 * TANGENT.x, _655 * _214));
    float _668 = fma(_549, _222, fma(_659, _227 * TANGENT.y, _655 * _215));
    float _671 = fma(_549, _223, fma(_659, _227 * TANGENT.z, _655 * _216));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3820 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3831 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _680 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3853 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3864 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (_292 / _709);
    float _720 = cbSceneParam._m0[71u].y - (_296 / _709);
    float _721 = cbSceneParam._m0[71u].z - (_300 / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _898 = sqrt(((_719 * _719) + (_720 * _720)) + (_721 * _721));
        float _904 = (cbMatDynParam._m0[5u].x * _898) + cbMatDynParam._m0[5u].y;
        float _3875 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _909 = (cbMatDynParam._m0[5u].z * _898) + cbMatDynParam._m0[5u].w;
        float _3886 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) - _905)) + _905) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _747 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _748 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _767 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _770 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _773 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _786 = uint(roundEven(NORMAL.w)) * 13u;
    uint _787 = _786 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_788].z;
    float _3897 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _747, cbSceneParam._m0[86u].y * _748));
    float _811 = _808.x * TEXCOORD_1.z;
    float _812 = dot(vec3(_676, _677, _678), vec3(_726, _727, _728));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _676) - _726;
    float _820 = (_815 * _677) - _727;
    float _821 = (_815 * _678) - _728;
    float _825 = abs(dot(vec3(_726, _727, _728), vec3(_676, _677, _678)));
    float _3930 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _834 = 10.0 / (_699 + 10.0);
    float _835 = sqrt(_680);
    float _847 = exp2((_835 * 5.0) * log2(1.0 - (_826 * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _947 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _951 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _975 = _879 + _676;
        float _976 = _883 + _677;
        float _977 = _887 + _678;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _943;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _947;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _951;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_676, _677, _678), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3978 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_676, _677, _678), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4011 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_676, _677, _678), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4044 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1261 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1265 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1269 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1292 = _879 + _676;
        float _1293 = _883 + _677;
        float _1294 = _887 + _678;
        float _1304 = fma(_1294, cbModelParam._m0[30u].z, fma(_1293, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1292)) - _1261;
        float _1305 = fma(_1294, cbModelParam._m0[31u].z, fma(_1293, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1292)) - _1265;
        float _1306 = fma(_1294, cbModelParam._m0[32u].z, fma(_1293, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1292)) - _1269;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1323 = ((_1310 * _1304) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1261 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1305) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1265 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1310 * _1306) / cbModelParam._m0[35u].z) + ((((((_1269 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        float _1360 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1327.x + (-0.5));
        float _1362 = _1360 * (_1327.y + (-0.5));
        float _1363 = _1360 * (_1327.z + (-0.5));
        float _1370 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1334.x + (-0.5));
        float _1372 = _1370 * (_1334.y + (-0.5));
        float _1373 = _1370 * (_1334.z + (-0.5));
        float _1380 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1341.x + (-0.5));
        float _1382 = _1380 * (_1341.y + (-0.5));
        float _1383 = _1380 * (_1341.z + (-0.5));
        float _1390 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1348.x + (-0.5));
        float _1392 = _1390 * (_1348.y + (-0.5));
        float _1393 = _1390 * (_1348.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_676, _677, _678), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4107 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1424 + 1.0))) + _1429) * _1394;
        float _1439 = _1362 * 0.5;
        float _1440 = _1372 * 0.5;
        float _1441 = _1382 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_676, _677, _678), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4140 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1466 + 1.0))) + _1471) * _1395;
        float _1481 = _1363 * 0.5;
        float _1482 = _1373 * 0.5;
        float _1483 = _1383 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_676, _677, _678), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4173 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1508 + 1.0))) + _1513) * _1396;
        _1530 = _1363;
        _1531 = _1362;
        _1532 = _1361;
        _1533 = _1373;
        _1534 = _1372;
        _1535 = _1371;
        _1536 = _1383;
        _1537 = _1382;
        _1538 = _1381;
        _1539 = _1396;
        _1540 = _1395;
        _1541 = _1394;
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = _1218;
        _1539 = _1218;
        _1540 = _1218;
        _1541 = _1218;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1232)) + _1232;
    float _1577 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1554));
    float _1598 = _819 * 0.5;
    float _1599 = _820 * 0.5;
    float _1600 = _821 * 0.5;
    float _1601 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1604 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1607 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1641;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1614 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1618 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1622 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1629 = dot(vec4(cbModelParam._m0[39u]), vec4(_1598, _1599, _1600, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1652;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1643 = dot(vec4(cbModelParam._m0[40u]), vec4(_1598, _1599, _1600, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1656 = (_1652 * cbModelParam._m0[1u].x) + (_1641 * (1.0 - cbModelParam._m0[1u].x));
    float _1666 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1666 : min(cbModelParam._m0[25u].z, _1666));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1714 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1718 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1722 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1725 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1728 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1731 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1759;
        if (_1725 > 0.0)
        {
            _1759 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1759 = frontier_phi_17_15_ladder;
        }
        float _2034;
        if (_1728 > 0.0)
        {
            _2034 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2034 = frontier_phi_26_22_ladder;
        }
        float _2280;
        if (_1731 > 0.0)
        {
            _2280 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2280 = frontier_phi_38_33_ladder;
        }
        float _2282 = isnan(_2034) ? _1759 : (isnan(_1759) ? _2034 : min(_1759, _2034));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1725) + _1714;
        float _2288 = (_2283 * _1728) + _1718;
        float _2289 = (_2283 * _1731) + _1722;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2290;
        float _2294 = _2290 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 > _2294) || ((_2288 < _2292) || ((_2287 < _2292) || (_2287 > _2294))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1667);
            frontier_phi_16_38_ladder = _2413.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2413.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2413.x * cbModelParam._m0[1u].y;
        }
        _1747 = frontier_phi_16_38_ladder_2;
        _1749 = frontier_phi_16_38_ladder_1;
        _1751 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1667);
        _1747 = _1735.x * cbModelParam._m0[1u].y;
        _1749 = _1735.y * cbModelParam._m0[1u].y;
        _1751 = _1735.z * cbModelParam._m0[1u].y;
    }
    float _1755 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1755 : min(cbModelParam._m0[25u].w, _1755));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1811 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1815 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1819 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1822 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1825 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1828 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _2039;
        if (_1822 > 0.0)
        {
            _2039 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2039 = frontier_phi_28_24_ladder;
        }
        float _2307;
        if (_1825 > 0.0)
        {
            _2307 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2307 = frontier_phi_40_35_ladder;
        }
        float _2512;
        if (_1828 > 0.0)
        {
            _2512 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2512 = frontier_phi_49_46_ladder;
        }
        float _2514 = isnan(_2307) ? _2039 : (isnan(_2039) ? _2307 : min(_2039, _2307));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1822) + _1811;
        float _2520 = (_2515 * _1825) + _1815;
        float _2521 = (_2515 * _1828) + _1819;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1756);
            frontier_phi_25_49_ladder = _2796.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2796.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2796.x * cbModelParam._m0[1u].z;
        }
        _1847 = frontier_phi_25_49_ladder_2;
        _1849 = frontier_phi_25_49_ladder_1;
        _1851 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1756);
        _1847 = _1831.x * cbModelParam._m0[1u].z;
        _1849 = _1831.y * cbModelParam._m0[1u].z;
        _1851 = _1831.z * cbModelParam._m0[1u].z;
    }
    float _1863 = ((((1.0 - _847) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_847 * _835)) * _811;
    float _1864 = _1863 * ((cbModelParam._m0[1u].w * (_1847 - _1747)) + _1747);
    float _1865 = _1863 * ((cbModelParam._m0[1u].w * (_1849 - _1749)) + _1749);
    float _1866 = _1863 * ((cbModelParam._m0[1u].w * (_1851 - _1751)) + _1751);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, _1864 * cbSceneParam._m0[91u].x));
    float _1886 = _747 / cbSceneParam._m0[86u].x;
    float _1894 = (cbSceneParam._m0[88u].y * (1.0 - _680)) + cbSceneParam._m0[88u].z;
    float _4299 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 5.0;
    float _1901 = (_834 * cbMtdParam._m0[12u].x) * dot(vec3(_676, _677, _678), vec3(1.0, 0.0, 0.0));
    vec4 _1911 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1901 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1901 + _1886) * cbSceneParam._m0[86u].x, _748), _1896).w) + _1886) * cbSceneParam._m0[86u].x, _748), _1896);
    float _1927 = 1.0 - _1911.w;
    vec4 _1935 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_747, _748));
    float _1937 = _1935.w;
    float _1949 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1937);
    float _1950 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1937);
    float _1951 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1937);
    uvec4 _1955 = floatBitsToUint(cbInstanceData._m0[_786 + 5u]);
    uint _1957 = _1955.x * 14u;
    uint _1958 = _1957 + 13u;
    float _1965 = _811 + (-1.0);
    float _1970 = (cbLight._m0[_1958].x * _1965) + 1.0;
    float _1971 = (cbLight._m0[_1958].y * _1965) + 1.0;
    float _1972 = (cbLight._m0[_1958].z * _1965) + 1.0;
    float _1973 = (cbLight._m0[_1958].w * _1965) + 1.0;
    uint _1974 = _1957 + 5u;
    float _1980 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1984 = _1957 + 4u;
    float _1993 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1997 = _1957 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_676, _677, _678));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_676, _677, _678));
    float _4320 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _4331 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1974].x * _1980) * _2018) + (((cbLight._m0[_1984].x * _1949) * _1993) * _2016);
    float _2026 = ((_1980 * cbLight._m0[_1974].y) * _2018) + (((cbLight._m0[_1984].y * _1950) * _1993) * _2016);
    float _2027 = ((_1980 * cbLight._m0[_1974].z) * _2018) + (((cbLight._m0[_1984].z * _1951) * _1993) * _2016);
    uvec4 _2031 = floatBitsToUint(cbLight._m0[_1957 + 12u]);
    bool _2033 = _2031.x == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2033)
    {
        _2044 = _2025;
        _2046 = _2026;
        _2048 = _2027;
    }
    else
    {
        uint _2052 = _1957 + 6u;
        float _2068 = (dot(vec3(cbLight._m0[_1957 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4342 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2071 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2044 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _2025;
        _2046 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _2026;
        _2048 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _2027;
    }
    bool _2051 = _2031.y == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2051)
    {
        _2089 = _2044;
        _2091 = _2046;
        _2093 = _2048;
    }
    else
    {
        uint _2251 = _1957 + 7u;
        float _2267 = (dot(vec3(cbLight._m0[_1957 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4358 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2270 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2089 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2044;
        _2091 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2046;
        _2093 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2048;
    }
    uint _2096 = _1957 + 8u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _680) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1957].x + _726;
    float _2112 = cbLight._m0[_1957].y + _727;
    float _2113 = cbLight._m0[_1957].z + _728;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1957].xyz));
    float _4374 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2125 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2126 = dot(vec3(_676, _677, _678), vec3(_2118, _2119, _2120));
    float _4396 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2130 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_2118, _2119, _2120));
    float _4407 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2134 = _2110 * _2110;
    float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
    float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2150 = 1.0 - _2110;
    float _2161 = (0.5 / (((_2125 * ((_2124 * _2150) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2150) + _2110) * _2124))) * _2124;
    float _4418 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
    uint _2177 = _1957 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _680) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1997].x + _726;
    float _2191 = cbLight._m0[_1997].y + _727;
    float _2192 = cbLight._m0[_1997].z + _728;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1997].xyz));
    float _4429 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2204 = dot(vec3(_676, _677, _678), vec3(_2197, _2198, _2199));
    float _4440 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2197, _2198, _2199));
    float _4451 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2226 = 1.0 - _2189;
    float _2236 = (0.5 / (((_2125 * ((_2203 * _2226) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2226) + _2189) * _2203))) * _2203;
    float _4462 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2248 = (((_2225 * cbLight._m0[_2177].x) * _2238) * _1980) + ((((cbLight._m0[_2096].x * _1949) * _2149) * _2163) * _1993);
    float _2249 = (((_2225 * cbLight._m0[_2177].y) * _2238) * _1980) + ((((cbLight._m0[_2096].y * _1950) * _2149) * _2163) * _1993);
    float _2250 = (((_2225 * cbLight._m0[_2177].z) * _2238) * _1980) + ((((cbLight._m0[_2096].z * _1951) * _2149) * _2163) * _1993);
    float _2312;
    float _2314;
    float _2316;
    if (_2033)
    {
        _2312 = _2248;
        _2314 = _2249;
        _2316 = _2250;
    }
    else
    {
        uint _2318 = _1957 + 2u;
        uint _2322 = _1957 + 10u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _680) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _726;
        float _2339 = cbLight._m0[_2318].y + _727;
        float _2340 = cbLight._m0[_2318].z + _728;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2318].xyz));
        float _4473 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2352 = dot(vec3(_676, _677, _678), vec3(_2345, _2346, _2347));
        float _4484 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4495 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2374 = 1.0 - _2337;
        float _2384 = (0.5 / (((_2125 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2374) + _2337) * _2351))) * _2351;
        float _4506 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2312 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2387) + _2248;
        _2314 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2387) + _2249;
        _2316 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2387) + _2250;
    }
    float _2422;
    float _2424;
    float _2426;
    if (_2051)
    {
        _2422 = _2312;
        _2424 = _2314;
        _2426 = _2316;
    }
    else
    {
        uint _2433 = _1957 + 3u;
        uint _2437 = _1957 + 11u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _680) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _726;
        float _2454 = cbLight._m0[_2433].y + _727;
        float _2455 = cbLight._m0[_2433].z + _728;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2433].xyz));
        float _4522 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2467 = dot(vec3(_676, _677, _678), vec3(_2460, _2461, _2462));
        float _4533 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4544 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2488 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2489 = 1.0 - _2452;
        float _2499 = (0.5 / (((_2125 * ((_2466 * _2489) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2489) + _2452) * _2466))) * _2466;
        float _4555 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2422 = (((_2488 * cbLight._m0[_2437].x) * _2501) * _2502) + _2312;
        _2424 = (((_2488 * cbLight._m0[_2437].y) * _2501) * _2502) + _2314;
        _2426 = (((_2488 * cbLight._m0[_2437].z) * _2501) * _2502) + _2316;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1955.y == 0u)
    {
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2577;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2577;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2577;
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _748) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _747) / _2593)));
        float _2614 = (log2(_2580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
        }
        else
        {
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3001)
                {
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                else
                {
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    uint _3136;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _3000;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3140 = uint(findLSB(_3136)) + (_2991 << 5u);
                        uint _3137 = (_3136 + 4294967295u) & _3136;
                        uint _3142 = _3140 * 48u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3162 = (_3140 * 48u) + 4u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3181 = (_3140 * 48u) + 8u;
                        vec3 _3192 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x));
                        float _3196 = _3156.x - _2578;
                        float _3197 = _3156.y - _2579;
                        float _3198 = _3156.z - _2580;
                        float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                        float _3202 = inversesqrt(_3199);
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3206 = dot(vec3(_767, _770, _773), vec3(_3203, _3204, _3205));
                        float _3211 = 1.0 - (_3199 * _3156.w);
                        float _4581 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3213 = sqrt(_3199) * _3175.w;
                        float _3216 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3206) + _3217;
                        float _3223 = _3213 * _3213;
                        float _3227 = ((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3212) / ((_3223 * 0.699999988079071044921875) + 1.0);
                        float _3231 = (-0.0) - _2578;
                        float _3232 = (-0.0) - _2579;
                        float _3233 = (-0.0) - _2580;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3248 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _835;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3261 = _3240 + _3205;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_767, _770, _773), vec3(_3238, _3239, _3240));
                        float _4597 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3273 = dot(vec3(_767, _770, _773), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4608 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3216 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3206) + _3282;
                        float _4619 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4630 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3280 * _3280) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125))) * _3212;
                        _3060 = (_3227 * _3175.x) + _3133;
                        _3061 = (_3227 * _3175.y) + _3134;
                        _3062 = (_3227 * _3175.z) + _3135;
                        _3057 = (_3308 * _3192.x) + _3130;
                        _3058 = (_3308 * _3192.y) + _3131;
                        _3059 = (_3308 * _3192.z) + _3132;
                        if (_3137 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3137;
                        }
                    }
                    frontier_phi_66_pred = _3057;
                    frontier_phi_66_pred_1 = _3062;
                    frontier_phi_66_pred_2 = _3061;
                    frontier_phi_66_pred_3 = _3060;
                    frontier_phi_66_pred_4 = _3059;
                    frontier_phi_66_pred_5 = _3058;
                }
                _2802 = frontier_phi_66_pred;
                _2812 = frontier_phi_66_pred_1;
                _2810 = frontier_phi_66_pred_2;
                _2808 = frontier_phi_66_pred_3;
                _2806 = frontier_phi_66_pred_4;
                _2804 = frontier_phi_66_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2802;
                    _2986 = _2804;
                    _2987 = _2806;
                    _2988 = _2808;
                    _2989 = _2810;
                    _2990 = _2812;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
        }
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.z;
        uint _2818 = (_2816 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2818) & _2624) == 0u)
        {
            _2953 = _2801;
            _2955 = _2803;
            _2957 = _2805;
            _2959 = _2807;
            _2961 = _2809;
            _2963 = _2811;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
            float _2979 = _2978 * _2578;
            float _2980 = _2978 * _2579;
            float _2981 = _2978 * _2580;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2818 < ((_2816 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3113 = _2801;
                float _3114 = _2803;
                float _3115 = _2805;
                float _3116 = _2807;
                float _3117 = _2809;
                float _3118 = _2811;
                uint _3119 = _2818;
                uint _3128;
                bool _3129;
                for (;;)
                {
                    _3128 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                    _3129 = _3128 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3129)
                    {
                        frontier_phi_77_pred = _3118;
                        frontier_phi_77_pred_1 = _3117;
                        frontier_phi_77_pred_2 = _3116;
                        frontier_phi_77_pred_3 = _3115;
                        frontier_phi_77_pred_4 = _3114;
                        frontier_phi_77_pred_5 = _3113;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        uint _3341 = _3128;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3410;
                        vec4 _3426;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3352 = ((_3119 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3397 = (_3352 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3413 = (_3352 * 40u) + 20u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3429 = (_3352 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3352 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_2580, _3461.z, fma(_2579, _3461.y, _3461.x * _2578)) + _3461.w;
                            _3474 = !((fma(_2580, _3442.z, fma(_2579, _3442.y, _3442.x * _2578)) + _3442.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3367.x - _2578;
                                float _3502 = _3367.y - _2579;
                                float _3503 = _3367.z - _2580;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3368 * _3368));
                                float _4641 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3519 = sqrt(_3504) * _3383.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_767, _770, _773))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_2580, _3410.z, fma(_2579, _3410.y, _3410.x * _2578)) + _3410.w) / _3473;
                                float _3533 = (fma(_2580, _3426.z, fma(_2579, _3426.y, _3426.x * _2578)) + _3426.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4657 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _835;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _2979;
                                float _3563 = _3509 - _2980;
                                float _3564 = _3510 - _2981;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_767, _770, _773), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4668 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3576 = dot(vec3(_767, _770, _773), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4679 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_767, _770, _773), vec3(_3508, _3509, _3510))) + _3585;
                                float _4690 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4701 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3539 * _3383.y;
                                frontier_phi_83_pred_1 = _3539 * _3383.x;
                                frontier_phi_83_pred_2 = _3613 * _3395.z;
                                frontier_phi_83_pred_3 = _3613 * _3395.y;
                                frontier_phi_83_pred_4 = _3613 * _3395.x;
                                frontier_phi_83_pred_5 = _3539 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_83_pred;
                            _3620 = frontier_phi_83_pred_1;
                            _3619 = frontier_phi_83_pred_2;
                            _3618 = frontier_phi_83_pred_3;
                            _3617 = frontier_phi_83_pred_4;
                            _3622 = frontier_phi_83_pred_5;
                            _3325 = _3620 + _3338;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3322 = _3617 + _3335;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3327;
                        frontier_phi_77_pred_1 = _3326;
                        frontier_phi_77_pred_2 = _3325;
                        frontier_phi_77_pred_3 = _3324;
                        frontier_phi_77_pred_4 = _3323;
                        frontier_phi_77_pred_5 = _3322;
                    }
                    _2964 = frontier_phi_77_pred;
                    _2962 = frontier_phi_77_pred_1;
                    _2960 = frontier_phi_77_pred_2;
                    _2958 = frontier_phi_77_pred_3;
                    _2956 = frontier_phi_77_pred_4;
                    _2954 = frontier_phi_77_pred_5;
                    uint _3120 = _3119 + 1u;
                    if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3113 = _2954;
                        _3114 = _2956;
                        _3115 = _2958;
                        _3116 = _2960;
                        _3117 = _2962;
                        _3118 = _2964;
                        _3119 = _3120;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2958;
                frontier_phi_58_59_ladder_1 = _2964;
                frontier_phi_58_59_ladder_2 = _2962;
                frontier_phi_58_59_ladder_3 = _2960;
                frontier_phi_58_59_ladder_4 = _2956;
                frontier_phi_58_59_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_58_59_ladder = _2805;
                frontier_phi_58_59_ladder_1 = _2811;
                frontier_phi_58_59_ladder_2 = _2809;
                frontier_phi_58_59_ladder_3 = _2807;
                frontier_phi_58_59_ladder_4 = _2803;
                frontier_phi_58_59_ladder_5 = _2801;
            }
            _2953 = frontier_phi_58_59_ladder_5;
            _2955 = frontier_phi_58_59_ladder_4;
            _2957 = frontier_phi_58_59_ladder;
            _2959 = frontier_phi_58_59_ladder_3;
            _2961 = frontier_phi_58_59_ladder_2;
            _2963 = frontier_phi_58_59_ladder_1;
        }
        float _2968 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2637 = (_2968 * _2959) + _2089;
        _2639 = (_2968 * _2961) + _2091;
        _2641 = (_2968 * _2963) + _2093;
        _2643 = ((_2953 * 0.039999999105930328369140625) * _2968) + _2422;
        _2645 = ((_2955 * 0.039999999105930328369140625) * _2968) + _2424;
        _2647 = ((_2957 * 0.039999999105930328369140625) * _2968) + _2426;
    }
    else
    {
        _2637 = _2089;
        _2639 = _2091;
        _2641 = _2093;
        _2643 = _2422;
        _2645 = _2424;
        _2647 = _2426;
    }
    float _2667 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2668 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2669 = cbSceneParam._m0[86u].x * ((_747 / cbSceneParam._m0[86u].x) + ((_834 * cbMtdParam._m0[11u].y) * dot(vec3(_676, _677, _678), vec3(_214, _215, _216))));
    float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
    float _2671 = isnan(_2668) ? _748 : (isnan(_748) ? _2668 : min(_748, _2668));
    vec4 _2673 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2670, _2671), 0.0);
    float _2675 = _2673.x;
    bool _2695 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2675)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2675))) > _699;
    vec4 _2699 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2695 ? _2670 : _747, _2695 ? _2671 : _748));
    float _4727 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4738 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4749 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2723 = 0.959999978542327880859375 - (exp2(log2(1.0 - _826) * 5.0) * 0.959999978542327880859375);
    float _2725 = (_2699.x * _2723) * cbSceneParam._m0[72u].w;
    float _2727 = (_2699.y * _2723) * cbSceneParam._m0[72u].w;
    float _2729 = (_2699.z * _2723) * cbSceneParam._m0[72u].w;
    float _2737 = (_2725 + (((((_1863 * _1911.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1656) * _1927)) + _2643) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2637 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _811))) - _2725) * 0.5);
    float _2739 = (_2727 + (((((_1863 * _1911.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1656) * _1927)) + _2645) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2639 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _811))) - _2727) * 0.5);
    float _2741 = (_2729 + (((((_1863 * _1911.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1656) * _1927)) + _2647) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2641 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _811))) - _2729) * 0.5);
    float _2746 = cbInstanceData._m0[_786 + 6u].w * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)));
    float _2751 = _747 / cbSceneParam._m0[86u].x;
    float _2752 = _748 / cbSceneParam._m0[86u].y;
    vec4 _2766 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2768 = _2766.x;
    float _2769 = _2766.y;
    float _2770 = _2766.z;
    float _2771 = _2766.w;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2826 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2827 = _2826 / _699;
        float _2838 = _2827 * _719;
        float _2839 = _720 * _2827;
        float _2840 = (-0.0) - _2839;
        float _2841 = _2827 * _721;
        float _2843 = (cbSceneParam._m0[77u].w * _2840) / _2826;
        float _2844 = _2843 + cbSceneParam._m0[79u].w;
        float _2845 = cbSceneParam._m0[79u].w - _2839;
        float _2851 = sqrt(((_2838 * _2838) + (_2839 * _2839)) + (_2841 * _2841));
        float _2854 = (1.0 - (cbSceneParam._m0[77u].w / _2826)) * _2851;
        float _2859 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2861 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2840 - _2843) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2844 > 0.0) ? exp2(_2859 * _2844) : (2.0 - exp2(_2861 * _2844))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2854;
        }
        else
        {
            float _3014 = 1.0 / cbSceneParam._m0[80u].x;
            float _3015 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : max(_2844, _2845));
            float _3016 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : min(_2844, _2845));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            _3070 = ((abs(_2851 / _2840) * cbSceneParam._m0[80u].y) * ((((_3025 - _3026) * 2.0) - ((exp2(_2859 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0)))) - exp2(_2859 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))))) * _3014)) - ((exp2(_2861 * _3025) - exp2(_2861 * _3026)) * _3014))) + (_2854 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2771);
        _2863 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2768;
        _2865 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2769;
        _2867 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2770;
        _2869 = _3081 * _2771;
    }
    else
    {
        _2863 = _2768;
        _2865 = _2769;
        _2867 = _2770;
        _2869 = _2771;
    }
    bool _3108;
    float _2924;
    vec4 _2927;
    float _2929;
    vec4 _2931;
    float _2939;
    float _2940;
    float _2941;
    float _2942;
    bool _2952;
    for (;;)
    {
        bool _2881 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2882 = log2(_2869);
        float _2889 = exp2(_2882 * cbSceneParam._m0[78u].x) * _2737;
        float _2890 = exp2(_2882 * cbSceneParam._m0[78u].y) * _2739;
        float _2891 = exp2(_2882 * cbSceneParam._m0[78u].z) * _2741;
        vec4 _2899 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_747, _748));
        float _2901 = _2899.x;
        float _2922 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2901)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2901))) - _699) * cbMtdParam._m0[12u].w;
        float _4800 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        _2924 = _2746 * (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)));
        float _2925 = _735 + (-0.5);
        _2927 = cbMtdParam._m0[1u];
        _2929 = _2927.y * _2925;
        _2931 = cbMatDynParam._m0[0u];
        float _2938 = (roundEven(_2931.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2939 = _2938 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
        _2940 = _2938 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
        _2941 = _2938 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2867)));
        _2942 = _2925 * 0.999000012874603271484375;
        _2952 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2952)
        {
            if ((cbInstanceData._m0[_786 + 7u].x + _2942) < 0.5)
            {
                _3108 = true;
                break;
            }
        }
        uint _3049 = _787 + uint(_2931.w);
        if ((cbInstanceData._m0[_3049].w < 1.0) && ((cbInstanceData._m0[_3049].w + _2942) < 0.5))
        {
            _3108 = true;
            break;
        }
        if ((_2929 + _487) < _2927.x)
        {
            _3108 = true;
            break;
        }
        _3108 = false;
        break;
    }
    float _3313;
    if (_3108)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = _2924;
    }
    SV_Target.x = _2939;
    SV_Target.y = _2940;
    SV_Target.z = _2941;
    SV_Target.w = _3313;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2924;
    discard_exit();
}


