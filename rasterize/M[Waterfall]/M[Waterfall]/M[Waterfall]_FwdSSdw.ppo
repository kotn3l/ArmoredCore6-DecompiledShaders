#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1173;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _210 = _209 * _202;
    float _211 = _209 * _203;
    float _212 = _209 * _204;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = exp2(log2(abs(_217)) * 2.2000000476837158203125);
    float _238 = exp2(log2(abs(_218)) * 2.2000000476837158203125);
    float _239 = exp2(log2(abs(_219)) * 2.2000000476837158203125);
    float _3665 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _241 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3687 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _243 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _257 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _258 = _257 * cbMtdParam._m0[16u].x;
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _297 = _288 / cbMtdParam._m0[13u].z;
    float _298 = _292 / cbMtdParam._m0[13u].z;
    float _299 = _296 / cbMtdParam._m0[13u].z;
    float _313 = (((_298 + (_257 * cbMtdParam._m0[16u].y)) * cbMtdParam._m0[17u].y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    vec4 _316 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_299 + _258) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _313));
    vec4 _331 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_297 + _258) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _313));
    float _381 = exp2(log2(texture(sampler2D(M_Waterfall_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[15u].x * _257) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[15u].y * _257) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x) * cbMtdParam._m0[12u].y);
    float _389 = (cbMtdParam._m0[17u].z * _257) + TEXCOORD_1.x;
    float _390 = (cbMtdParam._m0[17u].w * _257) + TEXCOORD_1.y;
    vec4 _403 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_389 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_390 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _409 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].y * cbMtdParam._m0[11u].w);
    float _416 = ((_403.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _418 = (-0.0) - (cbMtdParam._m0[13u].x * ((_403.x * 0.5) + (-0.25)));
    float _420 = fract(_409);
    float _422 = fract(_409 + 0.5);
    float _434 = abs((_420 * 2.0) + (-1.0));
    vec4 _443 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_420 * _418) + _389) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_416 * _420) + _390) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    vec4 _448 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_422 * _418) + _389) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_416 * _422) + _390) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _473 = (((_331.x * _243) + (_316.x * _241)) + cbMtdParam._m0[9u].x) + (((cbMtdParam._m0[10u].x * TEXCOORD_4.x) * _381) * (((_448.x - _445) * _434) + _445));
    float _476 = (((_331.y * _243) + (_316.y * _241)) + cbMtdParam._m0[9u].y) + (((cbMtdParam._m0[10u].y * TEXCOORD_4.x) * _381) * (((_448.y - _446) * _434) + _446));
    float _479 = (((_331.z * _243) + (_316.z * _241)) + cbMtdParam._m0[9u].z) + (((cbMtdParam._m0[10u].z * TEXCOORD_4.x) * _381) * (((_448.z - _447) * _434) + _447));
    float _483 = (TEXCOORD_4.w * 2.0) - (cbMtdParam._m0[12u].z * ((_331.w * _243) + (_316.w * _241)));
    vec4 _507 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].z * _257) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].w * _257) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _532 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _257) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].y * _257) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _538 = (_532.x * 2.0) + (-1.0);
    float _539 = (_532.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3698 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))));
    float _552 = (cbMtdParam._m0[15u].z * _257) + TEXCOORD_1.x;
    float _553 = (cbMtdParam._m0[15u].w * _257) + TEXCOORD_1.y;
    vec4 _558 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_552 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_553 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _566 = ((_558.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _568 = (-0.0) - (cbMtdParam._m0[13u].x * ((_558.x * 0.5) + (-0.25)));
    vec4 _585 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_420 * _568) + _552) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_566 * _420) + _553) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _587 = _585.x;
    float _588 = _585.y;
    vec4 _589 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_422 * _568) + _552) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_566 * _422) + _553) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _607 = cbMtdParam._m0[16u].z * _257;
    float _621 = (((cbMtdParam._m0[16u].w * _257) + _298) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w;
    vec4 _623 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2(((_607 + _297) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, _621));
    vec4 _632 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * (_607 + _299)) + cbTextureTilingScale._m0[5u].z, _621));
    float _638 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.502016007900238037109375;
    float _651 = ((((((_507.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _538) + ((((((_589.x - _587) * _434) + _587) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_623.x * _243) + _638) + (_632.x * _241)) * 5.19999980926513671875);
    float _655 = ((((((_507.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _539) + ((((((_589.y - _588) * _434) + _588) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_623.y * _243) + _638) + (_632.y * _241)) * 5.19999980926513671875);
    float _661 = fma(_545, _217, fma(_655, _223 * TANGENT.x, _651 * _210));
    float _664 = fma(_545, _218, fma(_655, _223 * TANGENT.y, _651 * _211));
    float _667 = fma(_545, _219, fma(_655, _223 * TANGENT.z, _651 * _212));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3709 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3720 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _676 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3742 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3753 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (_288 / _705);
    float _716 = cbSceneParam._m0[71u].y - (_292 / _705);
    float _717 = cbSceneParam._m0[71u].z - (_296 / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _751 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _754 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _757 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _770 = uint(roundEven(NORMAL.w)) * 13u;
    uint _772 = (_770 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3764 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _795 = _792.x * TEXCOORD_1.z;
    float _796 = dot(vec3(_672, _673, _674), vec3(_722, _723, _724));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _672) - _722;
    float _804 = (_799 * _673) - _723;
    float _805 = (_799 * _674) - _724;
    float _809 = abs(dot(vec3(_722, _723, _724), vec3(_672, _673, _674)));
    float _3797 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _818 = 10.0 / (_695 + 10.0);
    float _819 = sqrt(_676);
    float _831 = exp2((_819 * 5.0) * log2(1.0 - (_810 * 0.999000012874603271484375))) / (4.0 - (_819 * 3.0));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _902 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _906 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _930 = _863 + _672;
        float _931 = _867 + _673;
        float _932 = _871 + _674;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _898;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _902;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _906;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_672, _673, _674), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3845 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_672, _673, _674), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3878 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_672, _673, _674), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3911 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1217 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1221 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1244 = _863 + _672;
        float _1245 = _867 + _673;
        float _1246 = _871 + _674;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_672, _673, _674), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3974 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_672, _673, _674), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4007 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_672, _673, _674), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4040 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1173;
        _1483 = _1173;
        _1484 = _1173;
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = _1173;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1185)) + _1185;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _803 * 0.5;
    float _1551 = _804 * 0.5;
    float _1552 = _805 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1680 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1683 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1711 = frontier_phi_14_12_ladder;
        }
        float _1986;
        if (_1680 > 0.0)
        {
            _1986 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1986 = frontier_phi_23_19_ladder;
        }
        float _2232;
        if (_1683 > 0.0)
        {
            _2232 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2232 = frontier_phi_35_30_ladder;
        }
        float _2234 = isnan(_1986) ? _1711 : (isnan(_1711) ? _1986 : min(_1711, _1986));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1677) + _1666;
        float _2240 = (_2235 * _1680) + _1670;
        float _2241 = (_2235 * _1683) + _1674;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_13_35_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_13_35_ladder_2;
        _1701 = frontier_phi_13_35_ladder_1;
        _1703 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1619);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1777 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1780 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1991;
        if (_1774 > 0.0)
        {
            _1991 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1991 = frontier_phi_25_21_ladder;
        }
        float _2259;
        if (_1777 > 0.0)
        {
            _2259 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2259 = frontier_phi_37_32_ladder;
        }
        float _2464;
        if (_1780 > 0.0)
        {
            _2464 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2464 = frontier_phi_46_43_ladder;
        }
        float _2466 = isnan(_2259) ? _1991 : (isnan(_1991) ? _2259 : min(_1991, _2259));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1774) + _1763;
        float _2472 = (_2467 * _1777) + _1767;
        float _2473 = (_2467 * _1780) + _1771;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2474;
        float _2477 = _2474 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2473 > _2477) || ((_2473 < _2475) || ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 < _2475) || (_2471 > _2477))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2473, cbModelParam._m0[17u].z, fma(_2472, cbModelParam._m0[17u].y, _2471 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2473, cbModelParam._m0[18u].z, fma(_2472, cbModelParam._m0[18u].y, _2471 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2473, cbModelParam._m0[19u].z, fma(_2472, cbModelParam._m0[19u].y, _2471 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_22_46_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_22_46_ladder_2;
        _1801 = frontier_phi_22_46_ladder_1;
        _1803 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1708);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1815 = ((((1.0 - _831) * ((_819 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_831 * _819)) * _795;
    float _1816 = _1815 * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1817 = _1815 * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1818 = _1815 * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    float _1838 = _730 / cbSceneParam._m0[86u].x;
    float _1846 = (cbSceneParam._m0[88u].y * (1.0 - _676)) + cbSceneParam._m0[88u].z;
    float _4166 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 5.0;
    float _1853 = (_818 * cbMtdParam._m0[12u].x) * dot(vec3(_672, _673, _674), vec3(1.0, 0.0, 0.0));
    vec4 _1863 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1853 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1853 + _1838) * cbSceneParam._m0[86u].x, _731), _1848).w) + _1838) * cbSceneParam._m0[86u].x, _731), _1848);
    float _1879 = 1.0 - _1863.w;
    vec4 _1887 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_730, _731));
    float _1889 = _1887.w;
    float _1901 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1889);
    float _1902 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1889);
    float _1903 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1889);
    uvec4 _1907 = floatBitsToUint(cbInstanceData._m0[_770 + 5u]);
    uint _1909 = _1907.x * 14u;
    uint _1910 = _1909 + 13u;
    float _1917 = _795 + (-1.0);
    float _1922 = (cbLight._m0[_1910].x * _1917) + 1.0;
    float _1923 = (cbLight._m0[_1910].y * _1917) + 1.0;
    float _1924 = (cbLight._m0[_1910].z * _1917) + 1.0;
    float _1925 = (cbLight._m0[_1910].w * _1917) + 1.0;
    uint _1926 = _1909 + 5u;
    float _1932 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1936 = _1909 + 4u;
    float _1945 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1949 = _1909 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_672, _673, _674));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_672, _673, _674));
    float _4187 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4198 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1926].x * _1932) * _1970) + (((cbLight._m0[_1936].x * _1901) * _1945) * _1968);
    float _1978 = ((_1932 * cbLight._m0[_1926].y) * _1970) + (((cbLight._m0[_1936].y * _1902) * _1945) * _1968);
    float _1979 = ((_1932 * cbLight._m0[_1926].z) * _1970) + (((cbLight._m0[_1936].z * _1903) * _1945) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1909 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1985)
    {
        _1996 = _1977;
        _1998 = _1978;
        _2000 = _1979;
    }
    else
    {
        uint _2004 = _1909 + 6u;
        float _2020 = (dot(vec3(cbLight._m0[_1909 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _4209 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2023 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _1996 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1977;
        _1998 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1978;
        _2000 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1979;
    }
    bool _2003 = _1983.y == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2003)
    {
        _2041 = _1996;
        _2043 = _1998;
        _2045 = _2000;
    }
    else
    {
        uint _2203 = _1909 + 7u;
        float _2219 = (dot(vec3(cbLight._m0[_1909 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4225 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2222 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2041 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _1996;
        _2043 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _1998;
        _2045 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _2000;
    }
    uint _2048 = _1909 + 8u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _676) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1909].x + _722;
    float _2064 = cbLight._m0[_1909].y + _723;
    float _2065 = cbLight._m0[_1909].z + _724;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1909].xyz));
    float _4241 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2077 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2078 = dot(vec3(_672, _673, _674), vec3(_2070, _2071, _2072));
    float _4263 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2070, _2071, _2072));
    float _4274 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2062 * _2062;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2102 = 1.0 - _2062;
    float _2113 = (0.5 / (((_2077 * ((_2076 * _2102) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2102) + _2062) * _2076))) * _2076;
    float _4285 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    uint _2129 = _1909 + 9u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _676) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1949].x + _722;
    float _2143 = cbLight._m0[_1949].y + _723;
    float _2144 = cbLight._m0[_1949].z + _724;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1949].xyz));
    float _4296 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2156 = dot(vec3(_672, _673, _674), vec3(_2149, _2150, _2151));
    float _4307 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2160 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2149, _2150, _2151));
    float _4318 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = _2141 * _2141;
    float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
    float _2177 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2178 = 1.0 - _2141;
    float _2188 = (0.5 / (((_2077 * ((_2155 * _2178) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2178) + _2141) * _2155))) * _2155;
    float _4329 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
    float _2200 = (((_2177 * cbLight._m0[_2129].x) * _2190) * _1932) + ((((cbLight._m0[_2048].x * _1901) * _2101) * _2115) * _1945);
    float _2201 = (((_2177 * cbLight._m0[_2129].y) * _2190) * _1932) + ((((cbLight._m0[_2048].y * _1902) * _2101) * _2115) * _1945);
    float _2202 = (((_2177 * cbLight._m0[_2129].z) * _2190) * _1932) + ((((cbLight._m0[_2048].z * _1903) * _2101) * _2115) * _1945);
    float _2264;
    float _2266;
    float _2268;
    if (_1985)
    {
        _2264 = _2200;
        _2266 = _2201;
        _2268 = _2202;
    }
    else
    {
        uint _2270 = _1909 + 2u;
        uint _2274 = _1909 + 10u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _676) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _722;
        float _2291 = cbLight._m0[_2270].y + _723;
        float _2292 = cbLight._m0[_2270].z + _724;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2270].xyz));
        float _4340 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2304 = dot(vec3(_672, _673, _674), vec3(_2297, _2298, _2299));
        float _4351 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4362 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2326 = 1.0 - _2289;
        float _2336 = (0.5 / (((_2077 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2326) + _2289) * _2303))) * _2303;
        float _4373 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2264 = (((_2325 * cbLight._m0[_2274].x) * _2338) * _2339) + _2200;
        _2266 = (((_2325 * cbLight._m0[_2274].y) * _2338) * _2339) + _2201;
        _2268 = (((_2325 * cbLight._m0[_2274].z) * _2338) * _2339) + _2202;
    }
    float _2374;
    float _2376;
    float _2378;
    if (_2003)
    {
        _2374 = _2264;
        _2376 = _2266;
        _2378 = _2268;
    }
    else
    {
        uint _2385 = _1909 + 3u;
        uint _2389 = _1909 + 11u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _676) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _722;
        float _2406 = cbLight._m0[_2385].y + _723;
        float _2407 = cbLight._m0[_2385].z + _724;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2385].xyz));
        float _4389 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2419 = dot(vec3(_672, _673, _674), vec3(_2412, _2413, _2414));
        float _4400 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4411 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2440 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2441 = 1.0 - _2404;
        float _2451 = (0.5 / (((_2077 * ((_2418 * _2441) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2441) + _2404) * _2418))) * _2418;
        float _4422 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2374 = (((_2440 * cbLight._m0[_2389].x) * _2453) * _2454) + _2264;
        _2376 = (((_2440 * cbLight._m0[_2389].y) * _2453) * _2454) + _2266;
        _2378 = (((_2440 * cbLight._m0[_2389].z) * _2453) * _2454) + _2268;
    }
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_1907.y == 0u)
    {
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2529;
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2529;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2529;
        uvec4 _2544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2545 = _2544.x;
        uint _2556 = uint((float(_2544.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2545))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2545)));
        float _2566 = (log2(_2532 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2567 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        uint _2570 = uint(isnan(14.0) ? _2567 : (isnan(_2567) ? 14.0 : min(_2567, 14.0)));
        uvec4 _2575 = texelFetch(g_lightClusterGridBuffer, int(((_2570 << 2u) + (_2556 << 6u)) >> 2u));
        uint _2576 = _2575.x;
        uint _2577 = _2544.z;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((((1u << ((_2577 >> 4u) & 15u)) + 4294967295u) & _2576) == 0u) || ((_2577 & 240u) == 0u))
        {
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
        }
        else
        {
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2945)
                {
                    frontier_phi_61_pred = _2929;
                    frontier_phi_61_pred_1 = _2934;
                    frontier_phi_61_pred_2 = _2933;
                    frontier_phi_61_pred_3 = _2932;
                    frontier_phi_61_pred_4 = _2931;
                    frontier_phi_61_pred_5 = _2930;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2944;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2935 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _2530;
                        float _3120 = _3079.y - _2531;
                        float _3121 = _3079.z - _2532;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_751, _754, _757), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4448 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _2530;
                        float _3155 = (-0.0) - _2531;
                        float _3156 = (-0.0) - _2532;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3171 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _819;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3184 = _3163 + _3128;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_751, _754, _757), vec3(_3161, _3162, _3163));
                        float _4464 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3196 = dot(vec3(_751, _754, _757), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4475 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3139 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3129) + _3205;
                        float _4486 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4497 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3203 * _3203) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2988 = (_3150 * _3098.x) + _3056;
                        _2989 = (_3150 * _3098.y) + _3057;
                        _2990 = (_3150 * _3098.z) + _3058;
                        _2985 = (_3231 * _3115.x) + _3053;
                        _2986 = (_3231 * _3115.y) + _3054;
                        _2987 = (_3231 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_61_pred = _2985;
                    frontier_phi_61_pred_1 = _2990;
                    frontier_phi_61_pred_2 = _2989;
                    frontier_phi_61_pred_3 = _2988;
                    frontier_phi_61_pred_4 = _2987;
                    frontier_phi_61_pred_5 = _2986;
                }
                _2754 = frontier_phi_61_pred;
                _2764 = frontier_phi_61_pred_1;
                _2762 = frontier_phi_61_pred_2;
                _2760 = frontier_phi_61_pred_3;
                _2758 = frontier_phi_61_pred_4;
                _2756 = frontier_phi_61_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2754;
                    _2930 = _2756;
                    _2931 = _2758;
                    _2932 = _2760;
                    _2933 = _2762;
                    _2934 = _2764;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
        }
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.z;
        uint _2770 = (_2768 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2770) & _2576) == 0u)
        {
            _2897 = _2753;
            _2899 = _2755;
            _2901 = _2757;
            _2903 = _2759;
            _2905 = _2761;
            _2907 = _2763;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
            float _2923 = _2922 * _2530;
            float _2924 = _2922 * _2531;
            float _2925 = _2922 * _2532;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2770 < ((_2768 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3036 = _2753;
                float _3037 = _2755;
                float _3038 = _2757;
                float _3039 = _2759;
                float _3040 = _2761;
                float _3041 = _2763;
                uint _3042 = _2770;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3052)
                    {
                        frontier_phi_67_pred = _3039;
                        frontier_phi_67_pred_1 = _3040;
                        frontier_phi_67_pred_2 = _3041;
                        frontier_phi_67_pred_3 = _3038;
                        frontier_phi_67_pred_4 = _3037;
                        frontier_phi_67_pred_5 = _3036;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        uint _3255 = _3051;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3324;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3266 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3311 = (_3266 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3266 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3266 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3266 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_2532, _3375.z, fma(_2531, _3375.y, _3375.x * _2530)) + _3375.w;
                            _3388 = !((fma(_2532, _3356.z, fma(_2531, _3356.y, _3356.x * _2530)) + _3356.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3281.x - _2530;
                                float _3416 = _3281.y - _2531;
                                float _3417 = _3281.z - _2532;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3282 * _3282));
                                float _4508 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3433 = sqrt(_3418) * _3297.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_751, _754, _757))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_2532, _3324.z, fma(_2531, _3324.y, _3324.x * _2530)) + _3324.w) / _3387;
                                float _3447 = (fma(_2532, _3340.z, fma(_2531, _3340.y, _3340.x * _2530)) + _3340.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4524 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _819;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2923;
                                float _3477 = _3423 - _2924;
                                float _3478 = _3424 - _2925;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_751, _754, _757), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4535 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3490 = dot(vec3(_751, _754, _757), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4546 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_751, _754, _757), vec3(_3422, _3423, _3424))) + _3499;
                                float _4557 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4568 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3527 * _3309.x;
                                frontier_phi_73_pred_1 = _3527 * _3309.y;
                                frontier_phi_73_pred_2 = _3453 * _3297.z;
                                frontier_phi_73_pred_3 = _3453 * _3297.y;
                                frontier_phi_73_pred_4 = _3453 * _3297.x;
                                frontier_phi_73_pred_5 = _3527 * _3309.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_73_pred;
                            _3532 = frontier_phi_73_pred_1;
                            _3536 = frontier_phi_73_pred_2;
                            _3535 = frontier_phi_73_pred_3;
                            _3534 = frontier_phi_73_pred_4;
                            _3533 = frontier_phi_73_pred_5;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3239;
                        frontier_phi_67_pred_1 = _3240;
                        frontier_phi_67_pred_2 = _3241;
                        frontier_phi_67_pred_3 = _3238;
                        frontier_phi_67_pred_4 = _3237;
                        frontier_phi_67_pred_5 = _3236;
                    }
                    _2904 = frontier_phi_67_pred;
                    _2906 = frontier_phi_67_pred_1;
                    _2908 = frontier_phi_67_pred_2;
                    _2902 = frontier_phi_67_pred_3;
                    _2900 = frontier_phi_67_pred_4;
                    _2898 = frontier_phi_67_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2898;
                        _3037 = _2900;
                        _3038 = _2902;
                        _3039 = _2904;
                        _3040 = _2906;
                        _3041 = _2908;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2906;
                frontier_phi_55_56_ladder_1 = _2908;
                frontier_phi_55_56_ladder_2 = _2904;
                frontier_phi_55_56_ladder_3 = _2902;
                frontier_phi_55_56_ladder_4 = _2900;
                frontier_phi_55_56_ladder_5 = _2898;
            }
            else
            {
                frontier_phi_55_56_ladder = _2761;
                frontier_phi_55_56_ladder_1 = _2763;
                frontier_phi_55_56_ladder_2 = _2759;
                frontier_phi_55_56_ladder_3 = _2757;
                frontier_phi_55_56_ladder_4 = _2755;
                frontier_phi_55_56_ladder_5 = _2753;
            }
            _2897 = frontier_phi_55_56_ladder_5;
            _2899 = frontier_phi_55_56_ladder_4;
            _2901 = frontier_phi_55_56_ladder_3;
            _2903 = frontier_phi_55_56_ladder_2;
            _2905 = frontier_phi_55_56_ladder;
            _2907 = frontier_phi_55_56_ladder_1;
        }
        float _2912 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2589 = (_2912 * _2903) + _2041;
        _2591 = (_2912 * _2905) + _2043;
        _2593 = (_2912 * _2907) + _2045;
        _2595 = ((_2897 * 0.039999999105930328369140625) * _2912) + _2374;
        _2597 = ((_2899 * 0.039999999105930328369140625) * _2912) + _2376;
        _2599 = ((_2901 * 0.039999999105930328369140625) * _2912) + _2378;
    }
    else
    {
        _2589 = _2041;
        _2591 = _2043;
        _2593 = _2045;
        _2595 = _2374;
        _2597 = _2376;
        _2599 = _2378;
    }
    float _2619 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2620 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2621 = cbSceneParam._m0[86u].x * ((_730 / cbSceneParam._m0[86u].x) + ((_818 * cbMtdParam._m0[11u].y) * dot(vec3(_672, _673, _674), vec3(_210, _211, _212))));
    float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
    float _2623 = isnan(_2620) ? _731 : (isnan(_731) ? _2620 : min(_731, _2620));
    vec4 _2625 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2622, _2623), 0.0);
    float _2627 = _2625.x;
    bool _2647 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2627)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2627))) > _695;
    vec4 _2651 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2647 ? _2622 : _730, _2647 ? _2623 : _731));
    float _4594 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4605 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4616 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2675 = 0.959999978542327880859375 - (exp2(log2(1.0 - _810) * 5.0) * 0.959999978542327880859375);
    float _2677 = (_2651.x * _2675) * cbSceneParam._m0[72u].w;
    float _2679 = (_2651.y * _2675) * cbSceneParam._m0[72u].w;
    float _2681 = (_2651.z * _2675) * cbSceneParam._m0[72u].w;
    float _2703 = _730 / cbSceneParam._m0[86u].x;
    float _2704 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2720 = _2718.x;
    float _2721 = _2718.y;
    float _2722 = _2718.z;
    float _2723 = _2718.w;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2778 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2779 = _2778 / _695;
        float _2790 = _2779 * _715;
        float _2791 = _716 * _2779;
        float _2792 = (-0.0) - _2791;
        float _2793 = _2779 * _717;
        float _2795 = (cbSceneParam._m0[77u].w * _2792) / _2778;
        float _2796 = _2795 + cbSceneParam._m0[79u].w;
        float _2797 = cbSceneParam._m0[79u].w - _2791;
        float _2803 = sqrt(((_2790 * _2790) + (_2791 * _2791)) + (_2793 * _2793));
        float _2806 = (1.0 - (cbSceneParam._m0[77u].w / _2778)) * _2803;
        float _2811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2813 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2792 - _2795) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2796 > 0.0) ? exp2(_2811 * _2796) : (2.0 - exp2(_2813 * _2796))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2806;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : max(_2796, _2797));
            float _2960 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : min(_2796, _2797));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _2998 = ((abs(_2803 / _2792) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2811 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2811 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2813 * _2969) - exp2(_2813 * _2970)) * _2958))) + (_2806 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2723);
        _2815 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2720;
        _2817 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2721;
        _2819 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2722;
        _2821 = _3009 * _2723;
    }
    else
    {
        _2815 = _2720;
        _2817 = _2721;
        _2819 = _2722;
        _2821 = _2723;
    }
    bool _2833 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2834 = log2(_2821);
    float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * ((_2677 + (((((_1815 * _1863.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1608) * _1879)) + _2595) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2589 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _795))) - _2677) * 0.5));
    float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * ((_2679 + (((((_1815 * _1863.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1608) * _1879)) + _2597) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2591 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _795))) - _2679) * 0.5));
    float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * ((_2681 + (((((_1815 * _1863.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1608) * _1879)) + _2599) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2593 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _795))) - _2681) * 0.5));
    vec4 _2851 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_730, _731));
    float _2853 = _2851.x;
    float _2874 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2853)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2853))) - _695) * cbMtdParam._m0[12u].w;
    float _4667 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
    float _2876 = (cbInstanceData._m0[_770 + 6u].w * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)));
    float _2885 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2885 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
    SV_Target.y = _2885 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
    SV_Target.z = _2885 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.w = _2876;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2876;
}


