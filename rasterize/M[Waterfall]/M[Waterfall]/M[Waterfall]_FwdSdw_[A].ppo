#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1220;
float _4019;
float _4020;
float _4021;
float _4022;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _216 = _215 * _208;
    float _217 = _215 * _209;
    float _218 = _215 * _210;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = exp2(log2(abs(_223)) * 2.2000000476837158203125);
    float _244 = exp2(log2(abs(_224)) * 2.2000000476837158203125);
    float _245 = exp2(log2(abs(_225)) * 2.2000000476837158203125);
    float _4031 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _247 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _4053 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _249 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _263 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _264 = _263 * cbMtdParam._m0[16u].x;
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _298 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _302 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _303 = _294 / cbMtdParam._m0[13u].z;
    float _304 = _298 / cbMtdParam._m0[13u].z;
    float _305 = _302 / cbMtdParam._m0[13u].z;
    float _319 = (((_304 + (_263 * cbMtdParam._m0[16u].y)) * cbMtdParam._m0[17u].y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    vec4 _322 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_305 + _264) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _319));
    vec4 _337 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_303 + _264) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _319));
    float _387 = exp2(log2(texture(sampler2D(M_Waterfall_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[15u].x * _263) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[15u].y * _263) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x) * cbMtdParam._m0[12u].y);
    float _395 = (cbMtdParam._m0[17u].z * _263) + TEXCOORD_1.x;
    float _396 = (cbMtdParam._m0[17u].w * _263) + TEXCOORD_1.y;
    vec4 _409 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_395 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_396 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _415 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].y * cbMtdParam._m0[11u].w);
    float _422 = ((_409.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _424 = (-0.0) - (cbMtdParam._m0[13u].x * ((_409.x * 0.5) + (-0.25)));
    float _426 = fract(_415);
    float _428 = fract(_415 + 0.5);
    float _440 = abs((_426 * 2.0) + (-1.0));
    vec4 _449 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_426 * _424) + _395) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_422 * _426) + _396) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    vec4 _454 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_428 * _424) + _395) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_422 * _428) + _396) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _479 = (((_337.x * _249) + (_322.x * _247)) + cbMtdParam._m0[9u].x) + (((cbMtdParam._m0[10u].x * TEXCOORD_4.x) * _387) * (((_454.x - _451) * _440) + _451));
    float _482 = (((_337.y * _249) + (_322.y * _247)) + cbMtdParam._m0[9u].y) + (((cbMtdParam._m0[10u].y * TEXCOORD_4.x) * _387) * (((_454.y - _452) * _440) + _452));
    float _485 = (((_337.z * _249) + (_322.z * _247)) + cbMtdParam._m0[9u].z) + (((cbMtdParam._m0[10u].z * TEXCOORD_4.x) * _387) * (((_454.z - _453) * _440) + _453));
    float _489 = (TEXCOORD_4.w - (cbMtdParam._m0[12u].z * ((_337.w * _249) + (_322.w * _247)))) + TEXCOORD_4.w;
    vec4 _513 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].z * _263) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].w * _263) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _538 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _263) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].y * _263) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _544 = (_538.x * 2.0) + (-1.0);
    float _545 = (_538.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _4064 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))));
    float _558 = (cbMtdParam._m0[15u].z * _263) + TEXCOORD_1.x;
    float _559 = (cbMtdParam._m0[15u].w * _263) + TEXCOORD_1.y;
    vec4 _564 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_558 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_559 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _572 = ((_564.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _574 = (-0.0) - (cbMtdParam._m0[13u].x * ((_564.x * 0.5) + (-0.25)));
    vec4 _591 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_426 * _574) + _558) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_572 * _426) + _559) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    vec4 _595 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_428 * _574) + _558) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_572 * _428) + _559) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _613 = cbMtdParam._m0[16u].z * _263;
    float _627 = (((cbMtdParam._m0[16u].w * _263) + _304) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w;
    vec4 _629 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2(((_613 + _303) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, _627));
    vec4 _638 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * (_613 + _305)) + cbTextureTilingScale._m0[5u].z, _627));
    float _644 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.502016007900238037109375;
    float _657 = ((((((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _544) + ((((((_595.x - _593) * _440) + _593) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_629.x * _249) + _644) + (_638.x * _247)) * 5.19999980926513671875);
    float _661 = ((((((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _545) + ((((((_595.y - _594) * _440) + _594) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_629.y * _249) + _644) + (_638.y * _247)) * 5.19999980926513671875);
    float _667 = fma(_551, _223, fma(_661, _229 * TANGENT.x, _657 * _216));
    float _670 = fma(_551, _224, fma(_661, _229 * TANGENT.y, _657 * _217));
    float _673 = fma(_551, _225, fma(_661, _229 * TANGENT.z, _657 * _218));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _4075 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4086 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _682 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4108 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4119 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (_294 / _711);
    float _722 = cbSceneParam._m0[71u].y - (_298 / _711);
    float _723 = cbSceneParam._m0[71u].z - (_302 / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    vec4 _735 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _737 = _735.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _900 = sqrt(((_721 * _721) + (_722 * _722)) + (_723 * _723));
        float _906 = (cbMatDynParam._m0[5u].x * _900) + cbMatDynParam._m0[5u].y;
        float _4130 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _911 = (cbMatDynParam._m0[5u].z * _900) + cbMatDynParam._m0[5u].w;
        float _4141 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) - _907)) + _907) < ((_737 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _749 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _750 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _769 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _772 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _775 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _788 = uint(roundEven(NORMAL.w)) * 13u;
    uint _789 = _788 + 9u;
    uint _790 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _796 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_790].x;
    float _797 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_790].y;
    float _798 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_790].z;
    float _4152 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    vec4 _810 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _749, cbSceneParam._m0[86u].y * _750));
    float _813 = _810.x * TEXCOORD_1.z;
    float _814 = dot(vec3(_678, _679, _680), vec3(_728, _729, _730));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _678) - _728;
    float _822 = (_817 * _679) - _729;
    float _823 = (_817 * _680) - _730;
    float _827 = abs(dot(vec3(_728, _729, _730), vec3(_678, _679, _680)));
    float _4185 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _828 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _836 = 10.0 / (_701 + 10.0);
    float _837 = sqrt(_682);
    float _849 = exp2((_837 * 5.0) * log2(1.0 - (_828 * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1219;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _949 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _953 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _977 = _881 + _678;
        float _978 = _885 + _679;
        float _979 = _889 + _680;
        float _989 = fma(_979, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977)) - _945;
        float _990 = fma(_979, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977)) - _949;
        float _991 = fma(_979, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977)) - _953;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1047 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1013.x + (-0.5));
        float _1049 = _1047 * (_1013.y + (-0.5));
        float _1050 = _1047 * (_1013.z + (-0.5));
        float _1057 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1020.x + (-0.5));
        float _1059 = _1057 * (_1020.y + (-0.5));
        float _1060 = _1057 * (_1020.z + (-0.5));
        float _1067 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1027.x + (-0.5));
        float _1069 = _1067 * (_1027.y + (-0.5));
        float _1070 = _1067 * (_1027.z + (-0.5));
        float _1077 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1034.x + (-0.5));
        float _1079 = _1077 * (_1034.y + (-0.5));
        float _1080 = _1077 * (_1034.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1101 = (dot(vec3(_678, _679, _680), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1111 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _4233 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1113 + 1.0))) + _1118) * _1081;
        float _1128 = _1049 * 0.5;
        float _1129 = _1059 * 0.5;
        float _1130 = _1069 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_678, _679, _680), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4266 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1155 + 1.0))) + _1160) * _1082;
        float _1170 = _1050 * 0.5;
        float _1171 = _1060 * 0.5;
        float _1172 = _1070 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_678, _679, _680), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4299 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1197 + 1.0))) + _1202) * _1083;
        _1219 = _1050;
        _1221 = _1049;
        _1222 = _1048;
        _1223 = _1060;
        _1224 = _1059;
        _1225 = _1058;
        _1226 = _1070;
        _1227 = _1069;
        _1228 = _1068;
        _1229 = _1083;
        _1230 = _1082;
        _1231 = _1081;
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _1220;
        _1221 = _1220;
        _1222 = _1220;
        _1223 = _1220;
        _1224 = _1220;
        _1225 = _1220;
        _1226 = _1220;
        _1227 = _1220;
        _1228 = _1220;
        _1229 = _1220;
        _1230 = _1220;
        _1231 = _1220;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1267 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1271 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1294 = _881 + _678;
        float _1295 = _885 + _679;
        float _1296 = _889 + _680;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_678, _679, _680), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4362 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_678, _679, _680), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4395 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_678, _679, _680), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4428 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1220;
        _1533 = _1220;
        _1534 = _1220;
        _1535 = _1220;
        _1536 = _1220;
        _1537 = _1220;
        _1538 = _1220;
        _1539 = _1220;
        _1540 = _1220;
        _1541 = _1220;
        _1542 = _1220;
        _1543 = _1220;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1232)) + _1232;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1233)) + _1233;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1234)) + _1234;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _821 * 0.5;
    float _1601 = _822 * 0.5;
    float _1602 = _823 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1219, _1223, _1226, _1229));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1716 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1720 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1724 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1727 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1730 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1733 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1761;
        if (_1727 > 0.0)
        {
            _1761 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1761 = frontier_phi_17_15_ladder;
        }
        float _1984;
        if (_1730 > 0.0)
        {
            _1984 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1984 = frontier_phi_26_22_ladder;
        }
        float _2279;
        if (_1733 > 0.0)
        {
            _2279 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2279 = frontier_phi_38_33_ladder;
        }
        float _2281 = isnan(_1984) ? _1761 : (isnan(_1761) ? _1984 : min(_1761, _1984));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1727) + _1716;
        float _2287 = (_2282 * _1730) + _1720;
        float _2288 = (_2282 * _1733) + _1724;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_16_38_ladder = _2433.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2433.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2433.x * cbModelParam._m0[1u].y;
        }
        _1749 = frontier_phi_16_38_ladder_2;
        _1751 = frontier_phi_16_38_ladder_1;
        _1753 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1669);
        _1749 = _1737.x * cbModelParam._m0[1u].y;
        _1751 = _1737.y * cbModelParam._m0[1u].y;
        _1753 = _1737.z * cbModelParam._m0[1u].y;
    }
    float _1757 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1757 : min(cbModelParam._m0[25u].w, _1757));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1827 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1830 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1989;
        if (_1824 > 0.0)
        {
            _1989 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1989 = frontier_phi_28_24_ladder;
        }
        float _2306;
        if (_1827 > 0.0)
        {
            _2306 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2306 = frontier_phi_40_35_ladder;
        }
        float _2633;
        if (_1830 > 0.0)
        {
            _2633 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2633 = frontier_phi_50_47_ladder;
        }
        float _2635 = isnan(_2306) ? _1989 : (isnan(_1989) ? _2306 : min(_1989, _2306));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _1824) + _1813;
        float _2641 = (_2636 * _1827) + _1817;
        float _2642 = (_2636 * _1830) + _1821;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2643;
        float _2646 = _2643 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2642 > _2646) || ((_2642 < _2644) || ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 < _2644) || (_2640 > _2646))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2642, cbModelParam._m0[17u].z, fma(_2641, cbModelParam._m0[17u].y, _2640 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2642, cbModelParam._m0[18u].z, fma(_2641, cbModelParam._m0[18u].y, _2640 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2642, cbModelParam._m0[19u].z, fma(_2641, cbModelParam._m0[19u].y, _2640 * cbModelParam._m0[19u].x))), _1758);
            frontier_phi_25_50_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_25_50_ladder_2;
        _1851 = frontier_phi_25_50_ladder_1;
        _1853 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1758);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1865 = ((((1.0 - _849) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_849 * _837)) * _813;
    float _1866 = _1865 * ((cbModelParam._m0[1u].w * (_1849 - _1749)) + _1749);
    float _1867 = _1865 * ((cbModelParam._m0[1u].w * (_1851 - _1751)) + _1751);
    float _1868 = _1865 * ((cbModelParam._m0[1u].w * (_1853 - _1753)) + _1753);
    float _1871 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    float _1888 = _749 / cbSceneParam._m0[86u].x;
    float _1896 = (cbSceneParam._m0[88u].y * (1.0 - _682)) + cbSceneParam._m0[88u].z;
    float _4554 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1898 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * 5.0;
    float _1903 = (_836 * cbMtdParam._m0[12u].x) * dot(vec3(_678, _679, _680), vec3(1.0, 0.0, 0.0));
    vec4 _1913 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1903 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1903 + _1888) * cbSceneParam._m0[86u].x, _750), _1898).w) + _1888) * cbSceneParam._m0[86u].x, _750), _1898);
    float _1929 = 1.0 - _1913.w;
    float _1963 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1967 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1976 = _1963 / _1975;
    float _1977 = _1967 / _1975;
    float _1978 = _1971 / _1975;
    float _2125;
    float _2126;
    float _2127;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2005 = ((uint(_1978 > cbSceneParam._m0[59u].y) + uint(_1978 > cbSceneParam._m0[59u].x)) + uint(_1978 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2006 = _2005 + 43u;
        uint _2014 = _2005 + 44u;
        uint _2022 = _2005 + 45u;
        uint _2030 = _2005 + 46u;
        float _2041 = fma(_1975, cbSceneParam._m0[_2006].w, fma(_1971, cbSceneParam._m0[_2006].z, fma(_1967, cbSceneParam._m0[_2006].y, _1963 * cbSceneParam._m0[_2006].x)));
        float _2045 = fma(_1975, cbSceneParam._m0[_2014].w, fma(_1971, cbSceneParam._m0[_2014].z, fma(_1967, cbSceneParam._m0[_2014].y, _1963 * cbSceneParam._m0[_2014].x)));
        float _2053 = fma(_1975, cbSceneParam._m0[_2030].w, fma(_1971, cbSceneParam._m0[_2030].z, fma(_1967, cbSceneParam._m0[_2030].y, _1963 * cbSceneParam._m0[_2030].x)));
        float _2058 = cbSceneParam._m0[33u].z * _2053;
        float _2060 = cbSceneParam._m0[33u].w * _2053;
        float _2063 = fma(_1975, cbSceneParam._m0[_2022].w, fma(_1971, cbSceneParam._m0[_2022].z, fma(_1967, cbSceneParam._m0[_2022].y, _1963 * cbSceneParam._m0[_2022].x))) / _2053;
        float _2111 = (cbSceneParam._m0[33u].x - sqrt(((_1977 * _1977) + (_1976 * _1976)) + (_1978 * _1978))) * cbSceneParam._m0[33u].y;
        float _4565 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2118 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 + _2041) / _2053, (_2060 + _2045) / _2053), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 + _2041) / _2053, (_2045 - _2058) / _2053), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 - _2058) / _2053, (_2045 - _2060) / _2053), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 - _2060) / _2053, (_2058 + _2045) / _2053), _2063), 0.0)).x), vec4(0.25)));
        _2125 = 1.0 - (_2118 * cbSceneParam._m0[34u].x);
        _2126 = 1.0 - (_2118 * cbSceneParam._m0[34u].y);
        _2127 = 1.0 - (_2118 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2125 = 1.0;
        _2126 = 1.0;
        _2127 = 1.0;
    }
    float _2191;
    float _2193;
    float _2195;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2179 = fma(_1975, cbSceneParam._m0[63u].w, fma(_1971, cbSceneParam._m0[63u].z, fma(_1967, cbSceneParam._m0[63u].y, _1963 * cbSceneParam._m0[63u].x)));
        float _2180 = fma(_1975, cbSceneParam._m0[60u].w, fma(_1971, cbSceneParam._m0[60u].z, fma(_1967, cbSceneParam._m0[60u].y, _1963 * cbSceneParam._m0[60u].x))) / _2179;
        float _2181 = fma(_1975, cbSceneParam._m0[61u].w, fma(_1971, cbSceneParam._m0[61u].z, fma(_1967, cbSceneParam._m0[61u].y, _1963 * cbSceneParam._m0[61u].x))) / _2179;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2180 >= cbSceneParam._m0[64u].x) && (_2181 >= cbSceneParam._m0[64u].y)) && (_2180 <= cbSceneParam._m0[64u].z)) && (_2181 <= cbSceneParam._m0[64u].w))
        {
            float _2319 = fma(_1975, cbSceneParam._m0[62u].w, fma(_1971, cbSceneParam._m0[62u].z, fma(_1967, cbSceneParam._m0[62u].y, _1963 * cbSceneParam._m0[62u].x))) / _2179;
            float _2323 = isnan(cbSceneParam._m0[41u].w) ? _2319 : (isnan(_2319) ? cbSceneParam._m0[41u].w : max(_2319, cbSceneParam._m0[41u].w));
            float _2366 = (cbSceneParam._m0[33u].x - sqrt(((_1977 * _1977) + (_1976 * _1976)) + (_1978 * _1978))) * cbSceneParam._m0[33u].y;
            float _4581 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
            float _2373 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2180, cbSceneParam._m0[33u].w + _2181), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2180, _2181 - cbSceneParam._m0[33u].z), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2180 - cbSceneParam._m0[33u].z, _2181 - cbSceneParam._m0[33u].w), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2180 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2181), _2323), 0.0)).x), vec4(0.25)));
            float _2377 = 1.0 - (_2373 * cbSceneParam._m0[34u].x);
            float _2378 = 1.0 - (_2373 * cbSceneParam._m0[34u].y);
            float _2379 = 1.0 - (_2373 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2379) ? _2127 : (isnan(_2127) ? _2379 : min(_2127, _2379));
            frontier_phi_37_36_ladder_1 = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
            frontier_phi_37_36_ladder_2 = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
        }
        else
        {
            frontier_phi_37_36_ladder = _2127;
            frontier_phi_37_36_ladder_1 = _2126;
            frontier_phi_37_36_ladder_2 = _2125;
        }
        _2191 = frontier_phi_37_36_ladder_2;
        _2193 = frontier_phi_37_36_ladder_1;
        _2195 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2191 = _2125;
        _2193 = _2126;
        _2195 = _2127;
    }
    uvec4 _2200 = floatBitsToUint(cbInstanceData._m0[_788 + 5u]);
    uint _2202 = _2200.x * 14u;
    uint _2203 = _2202 + 13u;
    float _2210 = _813 + (-1.0);
    float _2215 = (cbLight._m0[_2203].x * _2210) + 1.0;
    float _2216 = (cbLight._m0[_2203].y * _2210) + 1.0;
    float _2217 = (cbLight._m0[_2203].z * _2210) + 1.0;
    float _2218 = (cbLight._m0[_2203].w * _2210) + 1.0;
    uint _2219 = _2202 + 5u;
    float _2225 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2229 = _2202 + 4u;
    float _2238 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2242 = _2202 | 1u;
    float _2253 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_678, _679, _680));
    float _2256 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_678, _679, _680));
    float _4617 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _4628 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2261 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2263 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2270 = ((cbLight._m0[_2219].x * _2225) * _2263) + (((cbLight._m0[_2229].x * _2191) * _2238) * _2261);
    float _2271 = ((_2225 * cbLight._m0[_2219].y) * _2263) + (((cbLight._m0[_2229].y * _2193) * _2238) * _2261);
    float _2272 = ((_2225 * cbLight._m0[_2219].z) * _2263) + (((cbLight._m0[_2229].z * _2195) * _2238) * _2261);
    uvec4 _2276 = floatBitsToUint(cbLight._m0[_2202 + 12u]);
    bool _2278 = _2276.x == 0u;
    float _2380;
    float _2382;
    float _2384;
    if (_2278)
    {
        _2380 = _2270;
        _2382 = _2271;
        _2384 = _2272;
    }
    else
    {
        uint _2388 = _2202 + 6u;
        float _2404 = (dot(vec3(cbLight._m0[_2202 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2405 = _2404 * _2404;
        float _4639 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2406 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2407 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2380 = (((cbLight._m0[_2388].x * 0.3183098733425140380859375) * _2406) * _2407) + _2270;
        _2382 = (((cbLight._m0[_2388].y * 0.3183098733425140380859375) * _2406) * _2407) + _2271;
        _2384 = (((cbLight._m0[_2388].z * 0.3183098733425140380859375) * _2406) * _2407) + _2272;
    }
    bool _2387 = _2276.y == 0u;
    float _2442;
    float _2444;
    float _2446;
    if (_2387)
    {
        _2442 = _2380;
        _2444 = _2382;
        _2446 = _2384;
    }
    else
    {
        uint _2604 = _2202 + 7u;
        float _2620 = (dot(vec3(cbLight._m0[_2202 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2621 = _2620 * _2620;
        float _4655 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2622 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2623 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2442 = (((cbLight._m0[_2604].x * 0.3183098733425140380859375) * _2622) * _2623) + _2380;
        _2444 = (((cbLight._m0[_2604].y * 0.3183098733425140380859375) * _2622) * _2623) + _2382;
        _2446 = (((cbLight._m0[_2604].z * 0.3183098733425140380859375) * _2622) * _2623) + _2384;
    }
    uint _2449 = _2202 + 8u;
    float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _682) * 0.949999988079071044921875);
    float _2463 = _2462 * _2462;
    float _2464 = cbLight._m0[_2202].x + _728;
    float _2465 = cbLight._m0[_2202].y + _729;
    float _2466 = cbLight._m0[_2202].z + _730;
    float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
    float _2471 = _2470 * _2464;
    float _2472 = _2470 * _2465;
    float _2473 = _2470 * _2466;
    float _2474 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2202].xyz));
    float _4671 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2477 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _4682 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2478 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2479 = dot(vec3(_678, _679, _680), vec3(_2471, _2472, _2473));
    float _4693 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2483 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2471, _2472, _2473));
    float _4704 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2487 = _2463 * _2463;
    float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2463;
    float _2514 = (0.5 / (((_2478 * ((_2477 * _2503) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2503) + _2463) * _2477))) * _2477;
    float _4715 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2516 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
    uint _2530 = _2202 + 9u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _682) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2242].x + _728;
    float _2544 = cbLight._m0[_2242].y + _729;
    float _2545 = cbLight._m0[_2242].z + _730;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2242].xyz));
    float _4726 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2557 = dot(vec3(_678, _679, _680), vec3(_2550, _2551, _2552));
    float _4737 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2550, _2551, _2552));
    float _4748 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2542 * _2542;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2578 = (exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2579 = 1.0 - _2542;
    float _2589 = (0.5 / (((_2478 * ((_2556 * _2579) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2579) + _2542) * _2556))) * _2556;
    float _4759 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2591 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    float _2601 = (((_2578 * cbLight._m0[_2530].x) * _2591) * _2225) + ((((cbLight._m0[_2449].x * _2191) * _2502) * _2516) * _2238);
    float _2602 = (((_2578 * cbLight._m0[_2530].y) * _2591) * _2225) + ((((cbLight._m0[_2449].y * _2193) * _2502) * _2516) * _2238);
    float _2603 = (((_2578 * cbLight._m0[_2530].z) * _2591) * _2225) + ((((cbLight._m0[_2449].z * _2195) * _2502) * _2516) * _2238);
    float _2659;
    float _2661;
    float _2663;
    if (_2278)
    {
        _2659 = _2601;
        _2661 = _2602;
        _2663 = _2603;
    }
    else
    {
        uint _2665 = _2202 + 2u;
        uint _2669 = _2202 + 10u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _682) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _728;
        float _2686 = cbLight._m0[_2665].y + _729;
        float _2687 = cbLight._m0[_2665].z + _730;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2665].xyz));
        float _4770 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2699 = dot(vec3(_678, _679, _680), vec3(_2692, _2693, _2694));
        float _4781 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4792 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2720 = (exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2721 = 1.0 - _2684;
        float _2731 = (0.5 / (((_2478 * ((_2698 * _2721) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2721) + _2684) * _2698))) * _2698;
        float _4803 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2659 = (((_2720 * cbLight._m0[_2669].x) * _2733) * _2734) + _2601;
        _2661 = (((_2720 * cbLight._m0[_2669].y) * _2733) * _2734) + _2602;
        _2663 = (((_2720 * cbLight._m0[_2669].z) * _2733) * _2734) + _2603;
    }
    float _2765;
    float _2767;
    float _2769;
    if (_2387)
    {
        _2765 = _2659;
        _2767 = _2661;
        _2769 = _2663;
    }
    else
    {
        uint _2776 = _2202 + 3u;
        uint _2780 = _2202 + 11u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _682) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _728;
        float _2797 = cbLight._m0[_2776].y + _729;
        float _2798 = cbLight._m0[_2776].z + _730;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2776].xyz));
        float _4819 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2810 = dot(vec3(_678, _679, _680), vec3(_2803, _2804, _2805));
        float _4830 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4841 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2831 = (exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2832 = 1.0 - _2795;
        float _2842 = (0.5 / (((_2478 * ((_2809 * _2832) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2832) + _2795) * _2809))) * _2809;
        float _4852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2765 = (((_2831 * cbLight._m0[_2780].x) * _2844) * _2845) + _2659;
        _2767 = (((_2831 * cbLight._m0[_2780].y) * _2844) * _2845) + _2661;
        _2769 = (((_2831 * cbLight._m0[_2780].z) * _2844) * _2845) + _2663;
    }
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_2200.y == 0u)
    {
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.x;
        uint _2878 = uint((float(_2866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _750) / _2867))) + floor(float(uint(cbSceneParam._m0[85u].x * _749) / _2867)));
        float _2888 = (log2(_1978 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2889 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        uint _2892 = uint(isnan(14.0) ? _2889 : (isnan(_2889) ? 14.0 : min(_2889, 14.0)));
        uvec4 _2897 = texelFetch(g_lightClusterGridBuffer, int(((_2892 << 2u) + (_2878 << 6u)) >> 2u));
        uint _2898 = _2897.x;
        uint _2899 = _2866.z;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((((1u << ((_2899 >> 4u) & 15u)) + 4294967295u) & _2898) == 0u) || ((_2899 & 240u) == 0u))
        {
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
        }
        else
        {
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            uint _3238 = 0u;
            uint _3247;
            bool _3248;
            for (;;)
            {
                _3247 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                _3248 = _3247 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3248)
                {
                    frontier_phi_71_pred = _3237;
                    frontier_phi_71_pred_1 = _3236;
                    frontier_phi_71_pred_2 = _3235;
                    frontier_phi_71_pred_3 = _3234;
                    frontier_phi_71_pred_4 = _3233;
                    frontier_phi_71_pred_5 = _3232;
                }
                else
                {
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    uint _3383;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3247;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    for (;;)
                    {
                        uint _3387 = uint(findLSB(_3383)) + (_3238 << 5u);
                        uint _3384 = (_3383 + 4294967295u) & _3383;
                        uint _3389 = _3387 * 48u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3409 = (_3387 * 48u) + 4u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3428 = (_3387 * 48u) + 8u;
                        vec3 _3439 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x));
                        float _3443 = _3403.x - _1976;
                        float _3444 = _3403.y - _1977;
                        float _3445 = _3403.z - _1978;
                        float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                        float _3449 = inversesqrt(_3446);
                        float _3450 = _3449 * _3443;
                        float _3451 = _3449 * _3444;
                        float _3452 = _3449 * _3445;
                        float _3453 = dot(vec3(_769, _772, _775), vec3(_3450, _3451, _3452));
                        float _3458 = 1.0 - (_3446 * _3403.w);
                        float _4878 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3460 = sqrt(_3446) * _3422.w;
                        float _3463 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                        float _3464 = _3463 * _3463;
                        float _3467 = ((1.0 - _3464) * _3453) + _3464;
                        float _3470 = _3460 * _3460;
                        float _3474 = ((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3459) / ((_3470 * 0.699999988079071044921875) + 1.0);
                        float _3478 = (-0.0) - _1976;
                        float _3479 = (-0.0) - _1977;
                        float _3480 = (-0.0) - _1978;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3494 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                        float _3495 = 1.0 - _837;
                        float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                        float _3503 = _3502 * _3502;
                        float _3504 = _3503 * _3503;
                        float _3505 = _3485 + _3450;
                        float _3506 = _3486 + _3451;
                        float _3507 = _3487 + _3452;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3515 = dot(vec3(_769, _772, _775), vec3(_3485, _3486, _3487));
                        float _4894 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3519 = dot(vec3(_769, _772, _775), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                        float _4905 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                        float _3527 = _3463 * _3503;
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3453) + _3528;
                        float _4916 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3532 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3533 = 1.0 - _3503;
                        float _3543 = (0.5 / (((_3532 * ((_3518 * _3533) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3503) * _3518))) * _3532;
                        float _4927 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3554 = (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3526 * _3526) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125))) * _3459;
                        _3307 = (_3474 * _3422.x) + _3380;
                        _3308 = (_3474 * _3422.y) + _3381;
                        _3309 = (_3474 * _3422.z) + _3382;
                        _3304 = (_3554 * _3439.x) + _3377;
                        _3305 = (_3554 * _3439.y) + _3378;
                        _3306 = (_3554 * _3439.z) + _3379;
                        if (_3384 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3384;
                        }
                    }
                    frontier_phi_71_pred = _3309;
                    frontier_phi_71_pred_1 = _3308;
                    frontier_phi_71_pred_2 = _3307;
                    frontier_phi_71_pred_3 = _3306;
                    frontier_phi_71_pred_4 = _3305;
                    frontier_phi_71_pred_5 = _3304;
                }
                _3059 = frontier_phi_71_pred;
                _3057 = frontier_phi_71_pred_1;
                _3055 = frontier_phi_71_pred_2;
                _3053 = frontier_phi_71_pred_3;
                _3051 = frontier_phi_71_pred_4;
                _3049 = frontier_phi_71_pred_5;
                uint _3239 = _3238 + 1u;
                if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3232 = _3049;
                    _3233 = _3051;
                    _3234 = _3053;
                    _3235 = _3055;
                    _3236 = _3057;
                    _3237 = _3059;
                    _3238 = _3239;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
        }
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.z;
        uint _3065 = (_3063 >> 8u) & 15u;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        if (((4294967295u << _3065) & _2898) == 0u)
        {
            _3200 = _3048;
            _3202 = _3050;
            _3204 = _3052;
            _3206 = _3054;
            _3208 = _3056;
            _3210 = _3058;
        }
        else
        {
            float _3225 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
            float _3226 = _3225 * _1976;
            float _3227 = _3225 * _1977;
            float _3228 = _3225 * _1978;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3065 < ((_3063 >> 12u) & 15u))
            {
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3360 = _3048;
                float _3361 = _3050;
                float _3362 = _3052;
                float _3363 = _3054;
                float _3364 = _3056;
                float _3365 = _3058;
                uint _3366 = _3065;
                uint _3375;
                bool _3376;
                for (;;)
                {
                    _3375 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3366 << 2u)) >> 2u)).x;
                    _3376 = _3375 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3376)
                    {
                        frontier_phi_82_pred = _3365;
                        frontier_phi_82_pred_1 = _3364;
                        frontier_phi_82_pred_2 = _3363;
                        frontier_phi_82_pred_3 = _3362;
                        frontier_phi_82_pred_4 = _3361;
                        frontier_phi_82_pred_5 = _3360;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        uint _3587 = _3375;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3672;
                        float _3719;
                        bool _3720;
                        for (;;)
                        {
                            uint _3598 = ((_3366 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3659 = (_3598 * 40u) + 20u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3675 = (_3598 * 40u) + 24u;
                            vec4 _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3694 = (_3598 * 40u) + 28u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            _3719 = fma(_1978, _3707.z, fma(_1977, _3707.y, _3707.x * _1976)) + _3707.w;
                            _3720 = !((fma(_1978, _3688.z, fma(_1977, _3688.y, _3688.x * _1976)) + _3688.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3720)
                            {
                                float _3747 = _3613.x - _1976;
                                float _3748 = _3613.y - _1977;
                                float _3749 = _3613.z - _1978;
                                float _3750 = dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749));
                                float _3753 = inversesqrt(_3750);
                                float _3754 = _3753 * _3747;
                                float _3755 = _3753 * _3748;
                                float _3756 = _3753 * _3749;
                                float _3760 = 1.0 - (_3750 / (_3614 * _3614));
                                float _4938 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3765 = sqrt(_3750) * _3629.w;
                                float _3767 = 1.39999997615814208984375 / (_3765 + 1.39999997615814208984375);
                                float _3768 = _3767 * _3767;
                                float _3771 = ((1.0 - _3768) * dot(vec3(_3754, _3755, _3756), vec3(_769, _772, _775))) + _3768;
                                float _3774 = _3765 * _3765;
                                float _3778 = (fma(_1978, _3656.z, fma(_1977, _3656.y, _3656.x * _1976)) + _3656.w) / _3719;
                                float _3779 = (fma(_1978, _3672.z, fma(_1977, _3672.y, _3672.x * _1976)) + _3672.w) / _3719;
                                float _3783 = 1.0 - dot(vec2(_3778, _3779), vec2(_3778, _3779));
                                float _4954 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3784 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3785 = _3784 * (((isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0))) * _3761) / ((_3774 * 0.699999988079071044921875) + 1.0));
                                float _3797 = exp2(log2(1.0 / ((_3774 * 3.5) + 5.0)) * 0.25);
                                float _3798 = 1.0 - _837;
                                float _3805 = sqrt(1.0 - ((1.0 - (_3798 * _3798)) * (1.0 - (_3797 * _3797))));
                                float _3806 = _3805 * _3805;
                                float _3807 = _3806 * _3806;
                                float _3808 = _3754 - _3226;
                                float _3809 = _3755 - _3227;
                                float _3810 = _3756 - _3228;
                                float _3814 = inversesqrt(dot(vec3(_3808, _3809, _3810), vec3(_3808, _3809, _3810)));
                                float _3818 = dot(vec3(_769, _772, _775), vec3((-0.0) - _3226, (-0.0) - _3227, (-0.0) - _3228));
                                float _4965 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3821 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3822 = dot(vec3(_769, _772, _775), vec3(_3814 * _3808, _3814 * _3809, _3814 * _3810));
                                float _4976 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3825 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3829 = ((_3825 * _3825) * (_3807 + (-1.0))) + 1.0;
                                float _3830 = _3767 * _3806;
                                float _3831 = _3830 * _3830;
                                float _3837 = ((1.0 - _3831) * dot(vec3(_769, _772, _775), vec3(_3754, _3755, _3756))) + _3831;
                                float _4987 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3838 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3839 = 1.0 - _3806;
                                float _3849 = (0.5 / (((_3838 * ((_3821 * _3839) + _3806)) + 9.9999999392252902907785028219223e-09) + (((_3838 * _3839) + _3806) * _3821))) * _3838;
                                float _4998 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3859 = (_3784 * _3761) * (((_3807 * 3.1415927410125732421875) * (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) / ((_3829 * _3829) * ((_3774 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3785 * _3629.z;
                                frontier_phi_88_pred_1 = _3785 * _3629.y;
                                frontier_phi_88_pred_2 = _3785 * _3629.x;
                                frontier_phi_88_pred_3 = _3859 * _3641.z;
                                frontier_phi_88_pred_4 = _3859 * _3641.y;
                                frontier_phi_88_pred_5 = _3859 * _3641.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3868 = frontier_phi_88_pred;
                            _3867 = frontier_phi_88_pred_1;
                            _3866 = frontier_phi_88_pred_2;
                            _3865 = frontier_phi_88_pred_3;
                            _3864 = frontier_phi_88_pred_4;
                            _3863 = frontier_phi_88_pred_5;
                            _3571 = _3866 + _3584;
                            _3572 = _3867 + _3585;
                            _3573 = _3868 + _3586;
                            _3568 = _3863 + _3581;
                            _3569 = _3864 + _3582;
                            _3570 = _3865 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3573;
                        frontier_phi_82_pred_1 = _3572;
                        frontier_phi_82_pred_2 = _3571;
                        frontier_phi_82_pred_3 = _3570;
                        frontier_phi_82_pred_4 = _3569;
                        frontier_phi_82_pred_5 = _3568;
                    }
                    _3211 = frontier_phi_82_pred;
                    _3209 = frontier_phi_82_pred_1;
                    _3207 = frontier_phi_82_pred_2;
                    _3205 = frontier_phi_82_pred_3;
                    _3203 = frontier_phi_82_pred_4;
                    _3201 = frontier_phi_82_pred_5;
                    uint _3367 = _3366 + 1u;
                    if (_3367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3360 = _3201;
                        _3361 = _3203;
                        _3362 = _3205;
                        _3363 = _3207;
                        _3364 = _3209;
                        _3365 = _3211;
                        _3366 = _3367;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3207;
                frontier_phi_63_64_ladder_1 = _3211;
                frontier_phi_63_64_ladder_2 = _3209;
                frontier_phi_63_64_ladder_3 = _3205;
                frontier_phi_63_64_ladder_4 = _3203;
                frontier_phi_63_64_ladder_5 = _3201;
            }
            else
            {
                frontier_phi_63_64_ladder = _3054;
                frontier_phi_63_64_ladder_1 = _3058;
                frontier_phi_63_64_ladder_2 = _3056;
                frontier_phi_63_64_ladder_3 = _3052;
                frontier_phi_63_64_ladder_4 = _3050;
                frontier_phi_63_64_ladder_5 = _3048;
            }
            _3200 = frontier_phi_63_64_ladder_5;
            _3202 = frontier_phi_63_64_ladder_4;
            _3204 = frontier_phi_63_64_ladder_3;
            _3206 = frontier_phi_63_64_ladder;
            _3208 = frontier_phi_63_64_ladder_2;
            _3210 = frontier_phi_63_64_ladder_1;
        }
        float _3215 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2911 = (_3215 * _3206) + _2442;
        _2913 = (_3215 * _3208) + _2444;
        _2915 = (_3215 * _3210) + _2446;
        _2917 = ((_3200 * 0.039999999105930328369140625) * _3215) + _2765;
        _2919 = ((_3202 * 0.039999999105930328369140625) * _3215) + _2767;
        _2921 = ((_3204 * 0.039999999105930328369140625) * _3215) + _2769;
    }
    else
    {
        _2911 = _2442;
        _2913 = _2444;
        _2915 = _2446;
        _2917 = _2765;
        _2919 = _2767;
        _2921 = _2769;
    }
    float _2935 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2936 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2937 = cbSceneParam._m0[86u].x * (_1888 + ((_836 * cbMtdParam._m0[11u].y) * dot(vec3(_678, _679, _680), vec3(_216, _217, _218))));
    float _2938 = isnan(_2935) ? _2937 : (isnan(_2937) ? _2935 : min(_2937, _2935));
    float _2939 = isnan(_2936) ? _750 : (isnan(_750) ? _2936 : min(_750, _2936));
    vec4 _2941 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2938, _2939), 0.0);
    float _2943 = _2941.x;
    bool _2963 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2943)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2943))) > _701;
    vec4 _2967 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2963 ? _2938 : _749, _2963 ? _2939 : _750));
    float _5024 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _5035 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _5046 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2991 = 0.959999978542327880859375 - (exp2(log2(1.0 - _828) * 5.0) * 0.959999978542327880859375);
    float _2993 = (_2967.x * _2991) * cbSceneParam._m0[72u].w;
    float _2995 = (_2967.y * _2991) * cbSceneParam._m0[72u].w;
    float _2997 = (_2967.z * _2991) * cbSceneParam._m0[72u].w;
    float _3005 = (_2993 + (((((_1865 * _1913.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1658) * _1929)) + _2917) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2911 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _813))) - _2993) * 0.5);
    float _3007 = (_2995 + (((((_1865 * _1913.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1658) * _1929)) + _2919) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_2913 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _813))) - _2995) * 0.5);
    float _3009 = (_2997 + (((((_1865 * _1913.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1658) * _1929)) + _2921) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_2915 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _813))) - _2997) * 0.5);
    float _3014 = cbInstanceData._m0[_788 + 6u].w * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)));
    float _3019 = _749 / cbSceneParam._m0[86u].x;
    float _3020 = _750 / cbSceneParam._m0[86u].y;
    vec4 _3034 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3036 = _3034.x;
    float _3037 = _3034.y;
    float _3038 = _3034.z;
    float _3039 = _3034.w;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _3073 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _3074 = _3073 / _701;
        float _3085 = _3074 * _721;
        float _3086 = _722 * _3074;
        float _3087 = (-0.0) - _3086;
        float _3088 = _3074 * _723;
        float _3090 = (cbSceneParam._m0[77u].w * _3087) / _3073;
        float _3091 = _3090 + cbSceneParam._m0[79u].w;
        float _3092 = cbSceneParam._m0[79u].w - _3086;
        float _3098 = sqrt(((_3085 * _3085) + (_3086 * _3086)) + (_3088 * _3088));
        float _3101 = (1.0 - (cbSceneParam._m0[77u].w / _3073)) * _3098;
        float _3106 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3108 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3317;
        if (abs((_3087 - _3090) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3317 = ((((_3091 > 0.0) ? exp2(_3106 * _3091) : (2.0 - exp2(_3108 * _3091))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3101;
        }
        else
        {
            float _3261 = 1.0 / cbSceneParam._m0[80u].x;
            float _3262 = isnan(_3092) ? _3091 : (isnan(_3091) ? _3092 : max(_3091, _3092));
            float _3263 = isnan(_3092) ? _3091 : (isnan(_3091) ? _3092 : min(_3091, _3092));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            _3317 = ((abs(_3098 / _3087) * cbSceneParam._m0[80u].y) * ((((_3272 - _3273) * 2.0) - ((exp2(_3106 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0)))) - exp2(_3106 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))))) * _3261)) - ((exp2(_3108 * _3272) - exp2(_3108 * _3273)) * _3261))) + (_3101 * cbSceneParam._m0[80u].z);
        }
        vec4 _3319 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, 1.0), 0.0);
        float _3328 = exp2((_3317 * (-1.44269502162933349609375)) * (1.0 - _3319.w));
        float _3329 = log2(_3328);
        float _3345 = log2(_3039);
        _3110 = (exp2(_3345 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].x)) * _3319.x) / cbSceneParam._m0[78u].x)) + _3036;
        _3112 = (exp2(_3345 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].y)) * _3319.y) / cbSceneParam._m0[78u].y)) + _3037;
        _3114 = (exp2(_3345 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].z)) * _3319.z) / cbSceneParam._m0[78u].z)) + _3038;
        _3116 = _3328 * _3039;
    }
    else
    {
        _3110 = _3036;
        _3112 = _3037;
        _3114 = _3038;
        _3116 = _3039;
    }
    bool _3355;
    float _3171;
    vec4 _3174;
    float _3176;
    vec4 _3178;
    float _3186;
    float _3187;
    float _3188;
    float _3189;
    bool _3199;
    for (;;)
    {
        bool _3128 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3129 = log2(_3116);
        float _3136 = exp2(_3129 * cbSceneParam._m0[78u].x) * _3005;
        float _3137 = exp2(_3129 * cbSceneParam._m0[78u].y) * _3007;
        float _3138 = exp2(_3129 * cbSceneParam._m0[78u].z) * _3009;
        vec4 _3146 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_749, _750));
        float _3148 = _3146.x;
        float _3169 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3148)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3148))) - _701) * cbMtdParam._m0[12u].w;
        float _5097 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        _3171 = _3014 * (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0)));
        float _3172 = _737 + (-0.5);
        _3174 = cbMtdParam._m0[1u];
        _3176 = _3174.y * _3172;
        _3178 = cbMatDynParam._m0[0u];
        float _3185 = (roundEven(_3178.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3186 = _3185 * (_3128 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
        _3187 = _3185 * (_3128 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
        _3188 = _3185 * (_3128 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3114)));
        _3189 = _3172 * 0.999000012874603271484375;
        _3199 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3199)
        {
            if ((cbInstanceData._m0[_788 + 7u].x + _3189) < 0.5)
            {
                _3355 = true;
                break;
            }
        }
        uint _3296 = _789 + uint(_3178.w);
        if ((cbInstanceData._m0[_3296].w < 1.0) && ((cbInstanceData._m0[_3296].w + _3189) < 0.5))
        {
            _3355 = true;
            break;
        }
        if ((_3176 + _489) < _3174.x)
        {
            _3355 = true;
            break;
        }
        _3355 = false;
        break;
    }
    float _3559;
    if (_3355)
    {
        discard_state = true;
        _3559 = 0.0;
    }
    else
    {
        _3559 = _3171;
    }
    SV_Target.x = _3186;
    SV_Target.y = _3187;
    SV_Target.z = _3188;
    SV_Target.w = _3559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3171;
    discard_exit();
}


