#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _212 = _211 * _204;
    float _213 = _211 * _205;
    float _214 = _211 * _206;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = exp2(log2(abs(_219)) * 2.2000000476837158203125);
    float _240 = exp2(log2(abs(_220)) * 2.2000000476837158203125);
    float _241 = exp2(log2(abs(_221)) * 2.2000000476837158203125);
    float _3920 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _243 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3942 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _245 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _259 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _260 = _259 * cbMtdParam._m0[16u].x;
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _298 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _299 = _290 / cbMtdParam._m0[13u].z;
    float _300 = _294 / cbMtdParam._m0[13u].z;
    float _301 = _298 / cbMtdParam._m0[13u].z;
    float _315 = (((_300 + (_259 * cbMtdParam._m0[16u].y)) * cbMtdParam._m0[17u].y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    vec4 _318 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_301 + _260) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _315));
    vec4 _333 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_299 + _260) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _315));
    float _383 = exp2(log2(texture(sampler2D(M_Waterfall_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[15u].x * _259) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[15u].y * _259) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x) * cbMtdParam._m0[12u].y);
    float _391 = (cbMtdParam._m0[17u].z * _259) + TEXCOORD_1.x;
    float _392 = (cbMtdParam._m0[17u].w * _259) + TEXCOORD_1.y;
    vec4 _405 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_391 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_392 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _411 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].y * cbMtdParam._m0[11u].w);
    float _418 = ((_405.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _420 = (-0.0) - (cbMtdParam._m0[13u].x * ((_405.x * 0.5) + (-0.25)));
    float _422 = fract(_411);
    float _424 = fract(_411 + 0.5);
    float _436 = abs((_422 * 2.0) + (-1.0));
    vec4 _445 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_422 * _420) + _391) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_418 * _422) + _392) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    vec4 _450 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_424 * _420) + _391) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_418 * _424) + _392) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _475 = (((_333.x * _245) + (_318.x * _243)) + cbMtdParam._m0[9u].x) + (((cbMtdParam._m0[10u].x * TEXCOORD_4.x) * _383) * (((_450.x - _447) * _436) + _447));
    float _478 = (((_333.y * _245) + (_318.y * _243)) + cbMtdParam._m0[9u].y) + (((cbMtdParam._m0[10u].y * TEXCOORD_4.x) * _383) * (((_450.y - _448) * _436) + _448));
    float _481 = (((_333.z * _245) + (_318.z * _243)) + cbMtdParam._m0[9u].z) + (((cbMtdParam._m0[10u].z * TEXCOORD_4.x) * _383) * (((_450.z - _449) * _436) + _449));
    float _485 = (TEXCOORD_4.w * 2.0) - (cbMtdParam._m0[12u].z * ((_333.w * _245) + (_318.w * _243)));
    vec4 _509 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].z * _259) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].w * _259) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _534 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _259) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].y * _259) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _540 = (_534.x * 2.0) + (-1.0);
    float _541 = (_534.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3953 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _554 = (cbMtdParam._m0[15u].z * _259) + TEXCOORD_1.x;
    float _555 = (cbMtdParam._m0[15u].w * _259) + TEXCOORD_1.y;
    vec4 _560 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_554 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_555 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _568 = ((_560.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _570 = (-0.0) - (cbMtdParam._m0[13u].x * ((_560.x * 0.5) + (-0.25)));
    vec4 _587 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_422 * _570) + _554) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_568 * _422) + _555) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _589 = _587.x;
    float _590 = _587.y;
    vec4 _591 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_424 * _570) + _554) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_568 * _424) + _555) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _609 = cbMtdParam._m0[16u].z * _259;
    float _623 = (((cbMtdParam._m0[16u].w * _259) + _300) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w;
    vec4 _625 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2(((_609 + _299) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, _623));
    vec4 _634 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * (_609 + _301)) + cbTextureTilingScale._m0[5u].z, _623));
    float _640 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.502016007900238037109375;
    float _653 = ((((((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _540) + ((((((_591.x - _589) * _436) + _589) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_625.x * _245) + _640) + (_634.x * _243)) * 5.19999980926513671875);
    float _657 = ((((((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _541) + ((((((_591.y - _590) * _436) + _590) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_625.y * _245) + _640) + (_634.y * _243)) * 5.19999980926513671875);
    float _663 = fma(_547, _219, fma(_657, _225 * TANGENT.x, _653 * _212));
    float _666 = fma(_547, _220, fma(_657, _225 * TANGENT.y, _653 * _213));
    float _669 = fma(_547, _221, fma(_657, _225 * TANGENT.z, _653 * _214));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3964 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3975 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _678 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3997 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4008 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _717 = cbSceneParam._m0[71u].x - (_290 / _707);
    float _718 = cbSceneParam._m0[71u].y - (_294 / _707);
    float _719 = cbSceneParam._m0[71u].z - (_298 / _707);
    float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
    float _724 = _717 * _723;
    float _725 = _718 * _723;
    float _726 = _719 * _723;
    float _732 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _733 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _756 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _759 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _772 = uint(roundEven(NORMAL.w)) * 13u;
    uint _774 = (_772 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_774].z;
    float _4019 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _732, cbSceneParam._m0[86u].y * _733));
    float _797 = _794.x * TEXCOORD_1.z;
    float _798 = dot(vec3(_674, _675, _676), vec3(_724, _725, _726));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _674) - _724;
    float _806 = (_801 * _675) - _725;
    float _807 = (_801 * _676) - _726;
    float _811 = abs(dot(vec3(_724, _725, _726), vec3(_674, _675, _676)));
    float _4052 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _820 = 10.0 / (_697 + 10.0);
    float _821 = sqrt(_678);
    float _833 = exp2((_821 * 5.0) * log2(1.0 - (_812 * 0.999000012874603271484375))) / (4.0 - (_821 * 3.0));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _904 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _908 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _932 = _865 + _674;
        float _933 = _869 + _675;
        float _934 = _873 + _676;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _900;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _904;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _908;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_674, _675, _676), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _4100 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_674, _675, _676), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4133 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_674, _675, _676), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4166 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1215 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1219 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1223 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1246 = _865 + _674;
        float _1247 = _869 + _675;
        float _1248 = _873 + _676;
        float _1258 = fma(_1248, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246)) - _1215;
        float _1259 = fma(_1248, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246)) - _1219;
        float _1260 = fma(_1248, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246)) - _1223;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1215 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1219 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[35u].z) + ((((((_1223 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1314 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1281.x + (-0.5));
        float _1316 = _1314 * (_1281.y + (-0.5));
        float _1317 = _1314 * (_1281.z + (-0.5));
        float _1324 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1288.x + (-0.5));
        float _1326 = _1324 * (_1288.y + (-0.5));
        float _1327 = _1324 * (_1288.z + (-0.5));
        float _1334 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1295.x + (-0.5));
        float _1336 = _1334 * (_1295.y + (-0.5));
        float _1337 = _1334 * (_1295.z + (-0.5));
        float _1344 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1302.x + (-0.5));
        float _1346 = _1344 * (_1302.y + (-0.5));
        float _1347 = _1344 * (_1302.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_674, _675, _676), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4229 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1378 + 1.0))) + _1383) * _1348;
        float _1393 = _1316 * 0.5;
        float _1394 = _1326 * 0.5;
        float _1395 = _1336 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_674, _675, _676), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4262 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1420 + 1.0))) + _1425) * _1349;
        float _1435 = _1317 * 0.5;
        float _1436 = _1327 * 0.5;
        float _1437 = _1337 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_674, _675, _676), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4295 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1462 + 1.0))) + _1467) * _1350;
        _1484 = _1317;
        _1485 = _1316;
        _1486 = _1315;
        _1487 = _1327;
        _1488 = _1326;
        _1489 = _1325;
        _1490 = _1337;
        _1491 = _1336;
        _1492 = _1335;
        _1493 = _1350;
        _1494 = _1349;
        _1495 = _1348;
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1531 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1508));
    float _1552 = _805 * 0.5;
    float _1553 = _806 * 0.5;
    float _1554 = _807 * 0.5;
    float _1555 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1558 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1561 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1595;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1568 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1572 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1576 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1583 = dot(vec4(cbModelParam._m0[39u]), vec4(_1552, _1553, _1554, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1606;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1597 = dot(vec4(cbModelParam._m0[40u]), vec4(_1552, _1553, _1554, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1610 = (_1606 * cbModelParam._m0[1u].x) + (_1595 * (1.0 - cbModelParam._m0[1u].x));
    float _1620 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1620 : min(cbModelParam._m0[25u].z, _1620));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1682 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1685 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1713 = frontier_phi_14_12_ladder;
        }
        float _1936;
        if (_1682 > 0.0)
        {
            _1936 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1936 = frontier_phi_23_19_ladder;
        }
        float _2231;
        if (_1685 > 0.0)
        {
            _2231 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2231 = frontier_phi_35_30_ladder;
        }
        float _2233 = isnan(_1936) ? _1713 : (isnan(_1713) ? _1936 : min(_1713, _1936));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1679) + _1668;
        float _2239 = (_2234 * _1682) + _1672;
        float _2240 = (_2234 * _1685) + _1676;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1621);
            frontier_phi_13_35_ladder = _2385.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2385.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2385.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_13_35_ladder_2;
        _1703 = frontier_phi_13_35_ladder_1;
        _1705 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1621);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1779 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1782 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1941;
        if (_1776 > 0.0)
        {
            _1941 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1941 = frontier_phi_25_21_ladder;
        }
        float _2258;
        if (_1779 > 0.0)
        {
            _2258 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2258 = frontier_phi_37_32_ladder;
        }
        float _2585;
        if (_1782 > 0.0)
        {
            _2585 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2585 = frontier_phi_47_44_ladder;
        }
        float _2587 = isnan(_2258) ? _1941 : (isnan(_1941) ? _2258 : min(_1941, _2258));
        float _2588 = isnan(_2585) ? _2587 : (isnan(_2587) ? _2585 : min(_2587, _2585));
        float _2592 = (_2588 * _1776) + _1765;
        float _2593 = (_2588 * _1779) + _1769;
        float _2594 = (_2588 * _1782) + _1773;
        float _2595 = _2588 * 9.9999997473787516355514526367188e-05;
        float _2596 = (-1.0) - _2595;
        float _2598 = _2595 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2594 > _2598) || ((_2594 < _2596) || ((_2593 > _2598) || ((_2593 < _2596) || ((_2592 < _2596) || (_2592 > _2598))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2594, cbModelParam._m0[17u].z, fma(_2593, cbModelParam._m0[17u].y, _2592 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2594, cbModelParam._m0[18u].z, fma(_2593, cbModelParam._m0[18u].y, _2592 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2594, cbModelParam._m0[19u].z, fma(_2593, cbModelParam._m0[19u].y, _2592 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_22_47_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_22_47_ladder_2;
        _1803 = frontier_phi_22_47_ladder_1;
        _1805 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1710);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1817 = ((((1.0 - _833) * ((_821 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_833 * _821)) * _797;
    float _1818 = _1817 * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1819 = _1817 * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1820 = _1817 * ((cbModelParam._m0[1u].w * (_1805 - _1705)) + _1705);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    float _1840 = _732 / cbSceneParam._m0[86u].x;
    float _1848 = (cbSceneParam._m0[88u].y * (1.0 - _678)) + cbSceneParam._m0[88u].z;
    float _4421 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 5.0;
    float _1855 = (_820 * cbMtdParam._m0[12u].x) * dot(vec3(_674, _675, _676), vec3(1.0, 0.0, 0.0));
    vec4 _1865 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1855 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1855 + _1840) * cbSceneParam._m0[86u].x, _733), _1850).w) + _1840) * cbSceneParam._m0[86u].x, _733), _1850);
    float _1881 = 1.0 - _1865.w;
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1928 = _1915 / _1927;
    float _1929 = _1919 / _1927;
    float _1930 = _1923 / _1927;
    float _2077;
    float _2078;
    float _2079;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1957 = ((uint(_1930 > cbSceneParam._m0[59u].y) + uint(_1930 > cbSceneParam._m0[59u].x)) + uint(_1930 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1958 = _1957 + 43u;
        uint _1966 = _1957 + 44u;
        uint _1974 = _1957 + 45u;
        uint _1982 = _1957 + 46u;
        float _1993 = fma(_1927, cbSceneParam._m0[_1958].w, fma(_1923, cbSceneParam._m0[_1958].z, fma(_1919, cbSceneParam._m0[_1958].y, _1915 * cbSceneParam._m0[_1958].x)));
        float _1997 = fma(_1927, cbSceneParam._m0[_1966].w, fma(_1923, cbSceneParam._m0[_1966].z, fma(_1919, cbSceneParam._m0[_1966].y, _1915 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1927, cbSceneParam._m0[_1982].w, fma(_1923, cbSceneParam._m0[_1982].z, fma(_1919, cbSceneParam._m0[_1982].y, _1915 * cbSceneParam._m0[_1982].x)));
        float _2010 = cbSceneParam._m0[33u].z * _2005;
        float _2012 = cbSceneParam._m0[33u].w * _2005;
        float _2015 = fma(_1927, cbSceneParam._m0[_1974].w, fma(_1923, cbSceneParam._m0[_1974].z, fma(_1919, cbSceneParam._m0[_1974].y, _1915 * cbSceneParam._m0[_1974].x))) / _2005;
        float _2063 = (cbSceneParam._m0[33u].x - sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930))) * cbSceneParam._m0[33u].y;
        float _4432 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2070 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1993) / _2005, (_2012 + _1997) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 + _1993) / _2005, (_1997 - _2010) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 - _2010) / _2005, (_1997 - _2012) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 - _2012) / _2005, (_2010 + _1997) / _2005), _2015), 0.0)).x), vec4(0.25)));
        _2077 = 1.0 - (_2070 * cbSceneParam._m0[34u].x);
        _2078 = 1.0 - (_2070 * cbSceneParam._m0[34u].y);
        _2079 = 1.0 - (_2070 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2077 = 1.0;
        _2078 = 1.0;
        _2079 = 1.0;
    }
    float _2143;
    float _2145;
    float _2147;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2131 = fma(_1927, cbSceneParam._m0[63u].w, fma(_1923, cbSceneParam._m0[63u].z, fma(_1919, cbSceneParam._m0[63u].y, _1915 * cbSceneParam._m0[63u].x)));
        float _2132 = fma(_1927, cbSceneParam._m0[60u].w, fma(_1923, cbSceneParam._m0[60u].z, fma(_1919, cbSceneParam._m0[60u].y, _1915 * cbSceneParam._m0[60u].x))) / _2131;
        float _2133 = fma(_1927, cbSceneParam._m0[61u].w, fma(_1923, cbSceneParam._m0[61u].z, fma(_1919, cbSceneParam._m0[61u].y, _1915 * cbSceneParam._m0[61u].x))) / _2131;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2132 >= cbSceneParam._m0[64u].x) && (_2133 >= cbSceneParam._m0[64u].y)) && (_2132 <= cbSceneParam._m0[64u].z)) && (_2133 <= cbSceneParam._m0[64u].w))
        {
            float _2271 = fma(_1927, cbSceneParam._m0[62u].w, fma(_1923, cbSceneParam._m0[62u].z, fma(_1919, cbSceneParam._m0[62u].y, _1915 * cbSceneParam._m0[62u].x))) / _2131;
            float _2275 = isnan(cbSceneParam._m0[41u].w) ? _2271 : (isnan(_2271) ? cbSceneParam._m0[41u].w : max(_2271, cbSceneParam._m0[41u].w));
            float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930))) * cbSceneParam._m0[33u].y;
            float _4448 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
            float _2325 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2132, cbSceneParam._m0[33u].w + _2133), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2132, _2133 - cbSceneParam._m0[33u].z), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2132 - cbSceneParam._m0[33u].z, _2133 - cbSceneParam._m0[33u].w), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2132 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2133), _2275), 0.0)).x), vec4(0.25)));
            float _2329 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
            float _2330 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
            float _2331 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2331) ? _2079 : (isnan(_2079) ? _2331 : min(_2079, _2331));
            frontier_phi_34_33_ladder_1 = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
            frontier_phi_34_33_ladder_2 = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
        }
        else
        {
            frontier_phi_34_33_ladder = _2079;
            frontier_phi_34_33_ladder_1 = _2078;
            frontier_phi_34_33_ladder_2 = _2077;
        }
        _2143 = frontier_phi_34_33_ladder_2;
        _2145 = frontier_phi_34_33_ladder_1;
        _2147 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2143 = _2077;
        _2145 = _2078;
        _2147 = _2079;
    }
    uvec4 _2152 = floatBitsToUint(cbInstanceData._m0[_772 + 5u]);
    uint _2154 = _2152.x * 14u;
    uint _2155 = _2154 + 13u;
    float _2162 = _797 + (-1.0);
    float _2167 = (cbLight._m0[_2155].x * _2162) + 1.0;
    float _2168 = (cbLight._m0[_2155].y * _2162) + 1.0;
    float _2169 = (cbLight._m0[_2155].z * _2162) + 1.0;
    float _2170 = (cbLight._m0[_2155].w * _2162) + 1.0;
    uint _2171 = _2154 + 5u;
    float _2177 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2181 = _2154 + 4u;
    float _2190 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2194 = _2154 | 1u;
    float _2205 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_674, _675, _676));
    float _2208 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_674, _675, _676));
    float _4484 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _4495 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2213 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2215 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2222 = ((cbLight._m0[_2171].x * _2177) * _2215) + (((cbLight._m0[_2181].x * _2143) * _2190) * _2213);
    float _2223 = ((_2177 * cbLight._m0[_2171].y) * _2215) + (((cbLight._m0[_2181].y * _2145) * _2190) * _2213);
    float _2224 = ((_2177 * cbLight._m0[_2171].z) * _2215) + (((cbLight._m0[_2181].z * _2147) * _2190) * _2213);
    uvec4 _2228 = floatBitsToUint(cbLight._m0[_2154 + 12u]);
    bool _2230 = _2228.x == 0u;
    float _2332;
    float _2334;
    float _2336;
    if (_2230)
    {
        _2332 = _2222;
        _2334 = _2223;
        _2336 = _2224;
    }
    else
    {
        uint _2340 = _2154 + 6u;
        float _2356 = (dot(vec3(cbLight._m0[_2154 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4506 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2359 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2332 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2222;
        _2334 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2223;
        _2336 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2224;
    }
    bool _2339 = _2228.y == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2339)
    {
        _2394 = _2332;
        _2396 = _2334;
        _2398 = _2336;
    }
    else
    {
        uint _2556 = _2154 + 7u;
        float _2572 = (dot(vec3(cbLight._m0[_2154 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4522 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2575 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2394 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2332;
        _2396 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2334;
        _2398 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2336;
    }
    uint _2401 = _2154 + 8u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _678) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2154].x + _724;
    float _2417 = cbLight._m0[_2154].y + _725;
    float _2418 = cbLight._m0[_2154].z + _726;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2154].xyz));
    float _4538 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _4549 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2430 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2431 = dot(vec3(_674, _675, _676), vec3(_2423, _2424, _2425));
    float _4560 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2435 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2423, _2424, _2425));
    float _4571 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2439 = _2415 * _2415;
    float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
    float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2455 = 1.0 - _2415;
    float _2466 = (0.5 / (((_2430 * ((_2429 * _2455) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2455) + _2415) * _2429))) * _2429;
    float _4582 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
    uint _2482 = _2154 + 9u;
    float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _678) * 0.949999988079071044921875);
    float _2494 = _2493 * _2493;
    float _2495 = cbLight._m0[_2194].x + _724;
    float _2496 = cbLight._m0[_2194].y + _725;
    float _2497 = cbLight._m0[_2194].z + _726;
    float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
    float _2502 = _2501 * _2495;
    float _2503 = _2501 * _2496;
    float _2504 = _2501 * _2497;
    float _2505 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2194].xyz));
    float _4593 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2509 = dot(vec3(_674, _675, _676), vec3(_2502, _2503, _2504));
    float _4604 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2513 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2502, _2503, _2504));
    float _4615 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2517 = _2494 * _2494;
    float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
    float _2530 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2531 = 1.0 - _2494;
    float _2541 = (0.5 / (((_2430 * ((_2508 * _2531) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2531) + _2494) * _2508))) * _2508;
    float _4626 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
    float _2553 = (((_2530 * cbLight._m0[_2482].x) * _2543) * _2177) + ((((cbLight._m0[_2401].x * _2143) * _2454) * _2468) * _2190);
    float _2554 = (((_2530 * cbLight._m0[_2482].y) * _2543) * _2177) + ((((cbLight._m0[_2401].y * _2145) * _2454) * _2468) * _2190);
    float _2555 = (((_2530 * cbLight._m0[_2482].z) * _2543) * _2177) + ((((cbLight._m0[_2401].z * _2147) * _2454) * _2468) * _2190);
    float _2611;
    float _2613;
    float _2615;
    if (_2230)
    {
        _2611 = _2553;
        _2613 = _2554;
        _2615 = _2555;
    }
    else
    {
        uint _2617 = _2154 + 2u;
        uint _2621 = _2154 + 10u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _678) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _724;
        float _2638 = cbLight._m0[_2617].y + _725;
        float _2639 = cbLight._m0[_2617].z + _726;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2617].xyz));
        float _4637 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2651 = dot(vec3(_674, _675, _676), vec3(_2644, _2645, _2646));
        float _4648 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4659 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2672 = (exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2673 = 1.0 - _2636;
        float _2683 = (0.5 / (((_2430 * ((_2650 * _2673) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2673) + _2636) * _2650))) * _2650;
        float _4670 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2611 = (((_2672 * cbLight._m0[_2621].x) * _2685) * _2686) + _2553;
        _2613 = (((_2672 * cbLight._m0[_2621].y) * _2685) * _2686) + _2554;
        _2615 = (((_2672 * cbLight._m0[_2621].z) * _2685) * _2686) + _2555;
    }
    float _2717;
    float _2719;
    float _2721;
    if (_2339)
    {
        _2717 = _2611;
        _2719 = _2613;
        _2721 = _2615;
    }
    else
    {
        uint _2728 = _2154 + 3u;
        uint _2732 = _2154 + 11u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _678) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _724;
        float _2749 = cbLight._m0[_2728].y + _725;
        float _2750 = cbLight._m0[_2728].z + _726;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2728].xyz));
        float _4686 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2762 = dot(vec3(_674, _675, _676), vec3(_2755, _2756, _2757));
        float _4697 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4708 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2783 = (exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2784 = 1.0 - _2747;
        float _2794 = (0.5 / (((_2430 * ((_2761 * _2784) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2784) + _2747) * _2761))) * _2761;
        float _4719 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2717 = (((_2783 * cbLight._m0[_2732].x) * _2796) * _2797) + _2611;
        _2719 = (((_2783 * cbLight._m0[_2732].y) * _2796) * _2797) + _2613;
        _2721 = (((_2783 * cbLight._m0[_2732].z) * _2796) * _2797) + _2615;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2152.y == 0u)
    {
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _733) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _732) / _2819)));
        float _2840 = (log2(_1930 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
        }
        else
        {
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            uint _3182 = 0u;
            uint _3191;
            bool _3192;
            for (;;)
            {
                _3191 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                _3192 = _3191 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3192)
                {
                    frontier_phi_66_pred = _3181;
                    frontier_phi_66_pred_1 = _3180;
                    frontier_phi_66_pred_2 = _3179;
                    frontier_phi_66_pred_3 = _3178;
                    frontier_phi_66_pred_4 = _3177;
                    frontier_phi_66_pred_5 = _3176;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3191;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3182 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _1928;
                        float _3367 = _3326.y - _1929;
                        float _3368 = _3326.z - _1930;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_753, _756, _759), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4745 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _1928;
                        float _3402 = (-0.0) - _1929;
                        float _3403 = (-0.0) - _1930;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3417 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3418 = 1.0 - _821;
                        float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                        float _3426 = _3425 * _3425;
                        float _3427 = _3426 * _3426;
                        float _3428 = _3408 + _3373;
                        float _3429 = _3409 + _3374;
                        float _3430 = _3410 + _3375;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3438 = dot(vec3(_753, _756, _759), vec3(_3408, _3409, _3410));
                        float _4761 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3442 = dot(vec3(_753, _756, _759), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                        float _4772 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                        float _3450 = _3386 * _3426;
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3376) + _3451;
                        float _4783 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3456 = 1.0 - _3426;
                        float _3466 = (0.5 / (((_3455 * ((_3441 * _3456) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3426) * _3441))) * _3455;
                        float _4794 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3477 = (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3449 * _3449) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3235 = (_3397 * _3345.x) + _3303;
                        _3236 = (_3397 * _3345.y) + _3304;
                        _3237 = (_3397 * _3345.z) + _3305;
                        _3232 = (_3477 * _3362.x) + _3300;
                        _3233 = (_3477 * _3362.y) + _3301;
                        _3234 = (_3477 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_66_pred = _3237;
                    frontier_phi_66_pred_1 = _3236;
                    frontier_phi_66_pred_2 = _3235;
                    frontier_phi_66_pred_3 = _3234;
                    frontier_phi_66_pred_4 = _3233;
                    frontier_phi_66_pred_5 = _3232;
                }
                _3011 = frontier_phi_66_pred;
                _3009 = frontier_phi_66_pred_1;
                _3007 = frontier_phi_66_pred_2;
                _3005 = frontier_phi_66_pred_3;
                _3003 = frontier_phi_66_pred_4;
                _3001 = frontier_phi_66_pred_5;
                uint _3183 = _3182 + 1u;
                if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3176 = _3001;
                    _3177 = _3003;
                    _3178 = _3005;
                    _3179 = _3007;
                    _3180 = _3009;
                    _3181 = _3011;
                    _3182 = _3183;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
        }
        uvec4 _3014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3015 = _3014.z;
        uint _3017 = (_3015 >> 8u) & 15u;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        if (((4294967295u << _3017) & _2850) == 0u)
        {
            _3144 = _3000;
            _3146 = _3002;
            _3148 = _3004;
            _3150 = _3006;
            _3152 = _3008;
            _3154 = _3010;
        }
        else
        {
            float _3169 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
            float _3170 = _3169 * _1928;
            float _3171 = _3169 * _1929;
            float _3172 = _3169 * _1930;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3017 < ((_3015 >> 12u) & 15u))
            {
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3283 = _3000;
                float _3284 = _3002;
                float _3285 = _3004;
                float _3286 = _3006;
                float _3287 = _3008;
                float _3288 = _3010;
                uint _3289 = _3017;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3299)
                    {
                        frontier_phi_72_pred = _3288;
                        frontier_phi_72_pred_1 = _3287;
                        frontier_phi_72_pred_2 = _3286;
                        frontier_phi_72_pred_3 = _3285;
                        frontier_phi_72_pred_4 = _3284;
                        frontier_phi_72_pred_5 = _3283;
                    }
                    else
                    {
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3495 = _3283;
                        float _3496 = _3284;
                        float _3497 = _3285;
                        float _3498 = _3286;
                        float _3499 = _3287;
                        float _3500 = _3288;
                        uint _3501 = _3298;
                        uint _3502;
                        vec4 _3527;
                        float _3528;
                        vec4 _3543;
                        vec3 _3555;
                        vec4 _3570;
                        vec4 _3586;
                        float _3633;
                        bool _3634;
                        for (;;)
                        {
                            uint _3512 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3501));
                            _3502 = (_3501 + 4294967295u) & _3501;
                            uint _3514 = _3512 * 40u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            _3528 = _3527.w;
                            uint _3530 = (_3512 * 40u) + 4u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3512 * 40u) + 8u;
                            _3555 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x));
                            uint _3557 = (_3512 * 40u) + 16u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3573 = (_3512 * 40u) + 20u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3589 = (_3512 * 40u) + 24u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3608 = (_3512 * 40u) + 28u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3633 = fma(_1930, _3621.z, fma(_1929, _3621.y, _3621.x * _1928)) + _3621.w;
                            _3634 = !((fma(_1930, _3602.z, fma(_1929, _3602.y, _3602.x * _1928)) + _3602.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3634)
                            {
                                float _3661 = _3527.x - _1928;
                                float _3662 = _3527.y - _1929;
                                float _3663 = _3527.z - _1930;
                                float _3664 = dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663));
                                float _3667 = inversesqrt(_3664);
                                float _3668 = _3667 * _3661;
                                float _3669 = _3667 * _3662;
                                float _3670 = _3667 * _3663;
                                float _3674 = 1.0 - (_3664 / (_3528 * _3528));
                                float _4805 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3679 = sqrt(_3664) * _3543.w;
                                float _3681 = 1.39999997615814208984375 / (_3679 + 1.39999997615814208984375);
                                float _3682 = _3681 * _3681;
                                float _3685 = ((1.0 - _3682) * dot(vec3(_3668, _3669, _3670), vec3(_753, _756, _759))) + _3682;
                                float _3688 = _3679 * _3679;
                                float _3692 = (fma(_1930, _3570.z, fma(_1929, _3570.y, _3570.x * _1928)) + _3570.w) / _3633;
                                float _3693 = (fma(_1930, _3586.z, fma(_1929, _3586.y, _3586.x * _1928)) + _3586.w) / _3633;
                                float _3697 = 1.0 - dot(vec2(_3692, _3693), vec2(_3692, _3693));
                                float _4821 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3699 = _3698 * (((isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0))) * _3675) / ((_3688 * 0.699999988079071044921875) + 1.0));
                                float _3711 = exp2(log2(1.0 / ((_3688 * 3.5) + 5.0)) * 0.25);
                                float _3712 = 1.0 - _821;
                                float _3719 = sqrt(1.0 - ((1.0 - (_3712 * _3712)) * (1.0 - (_3711 * _3711))));
                                float _3720 = _3719 * _3719;
                                float _3721 = _3720 * _3720;
                                float _3722 = _3668 - _3170;
                                float _3723 = _3669 - _3171;
                                float _3724 = _3670 - _3172;
                                float _3728 = inversesqrt(dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724)));
                                float _3732 = dot(vec3(_753, _756, _759), vec3((-0.0) - _3170, (-0.0) - _3171, (-0.0) - _3172));
                                float _4832 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3736 = dot(vec3(_753, _756, _759), vec3(_3728 * _3722, _3728 * _3723, _3728 * _3724));
                                float _4843 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3743 = ((_3739 * _3739) * (_3721 + (-1.0))) + 1.0;
                                float _3744 = _3681 * _3720;
                                float _3745 = _3744 * _3744;
                                float _3751 = ((1.0 - _3745) * dot(vec3(_753, _756, _759), vec3(_3668, _3669, _3670))) + _3745;
                                float _4854 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3753 = 1.0 - _3720;
                                float _3763 = (0.5 / (((_3752 * ((_3735 * _3753) + _3720)) + 9.9999999392252902907785028219223e-09) + (((_3752 * _3753) + _3720) * _3735))) * _3752;
                                float _4865 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3773 = (_3698 * _3675) * (((_3721 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3743 * _3743) * ((_3688 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3699 * _3543.y;
                                frontier_phi_78_pred_1 = _3699 * _3543.x;
                                frontier_phi_78_pred_2 = _3773 * _3555.z;
                                frontier_phi_78_pred_3 = _3773 * _3555.y;
                                frontier_phi_78_pred_4 = _3773 * _3555.x;
                                frontier_phi_78_pred_5 = _3699 * _3543.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3781 = frontier_phi_78_pred;
                            _3780 = frontier_phi_78_pred_1;
                            _3779 = frontier_phi_78_pred_2;
                            _3778 = frontier_phi_78_pred_3;
                            _3777 = frontier_phi_78_pred_4;
                            _3782 = frontier_phi_78_pred_5;
                            _3485 = _3780 + _3498;
                            _3486 = _3781 + _3499;
                            _3487 = _3782 + _3500;
                            _3482 = _3777 + _3495;
                            _3483 = _3778 + _3496;
                            _3484 = _3779 + _3497;
                            if (_3502 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3502;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3487;
                        frontier_phi_72_pred_1 = _3486;
                        frontier_phi_72_pred_2 = _3485;
                        frontier_phi_72_pred_3 = _3484;
                        frontier_phi_72_pred_4 = _3483;
                        frontier_phi_72_pred_5 = _3482;
                    }
                    _3155 = frontier_phi_72_pred;
                    _3153 = frontier_phi_72_pred_1;
                    _3151 = frontier_phi_72_pred_2;
                    _3149 = frontier_phi_72_pred_3;
                    _3147 = frontier_phi_72_pred_4;
                    _3145 = frontier_phi_72_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3145;
                        _3284 = _3147;
                        _3285 = _3149;
                        _3286 = _3151;
                        _3287 = _3153;
                        _3288 = _3155;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3155;
                frontier_phi_60_61_ladder_1 = _3153;
                frontier_phi_60_61_ladder_2 = _3149;
                frontier_phi_60_61_ladder_3 = _3147;
                frontier_phi_60_61_ladder_4 = _3145;
                frontier_phi_60_61_ladder_5 = _3151;
            }
            else
            {
                frontier_phi_60_61_ladder = _3010;
                frontier_phi_60_61_ladder_1 = _3008;
                frontier_phi_60_61_ladder_2 = _3004;
                frontier_phi_60_61_ladder_3 = _3002;
                frontier_phi_60_61_ladder_4 = _3000;
                frontier_phi_60_61_ladder_5 = _3006;
            }
            _3144 = frontier_phi_60_61_ladder_4;
            _3146 = frontier_phi_60_61_ladder_3;
            _3148 = frontier_phi_60_61_ladder_2;
            _3150 = frontier_phi_60_61_ladder_5;
            _3152 = frontier_phi_60_61_ladder_1;
            _3154 = frontier_phi_60_61_ladder;
        }
        float _3159 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2863 = (_3159 * _3150) + _2394;
        _2865 = (_3159 * _3152) + _2396;
        _2867 = (_3159 * _3154) + _2398;
        _2869 = ((_3144 * 0.039999999105930328369140625) * _3159) + _2717;
        _2871 = ((_3146 * 0.039999999105930328369140625) * _3159) + _2719;
        _2873 = ((_3148 * 0.039999999105930328369140625) * _3159) + _2721;
    }
    else
    {
        _2863 = _2394;
        _2865 = _2396;
        _2867 = _2398;
        _2869 = _2717;
        _2871 = _2719;
        _2873 = _2721;
    }
    float _2887 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2888 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2889 = cbSceneParam._m0[86u].x * (_1840 + ((_820 * cbMtdParam._m0[11u].y) * dot(vec3(_674, _675, _676), vec3(_212, _213, _214))));
    float _2890 = isnan(_2887) ? _2889 : (isnan(_2889) ? _2887 : min(_2889, _2887));
    float _2891 = isnan(_2888) ? _733 : (isnan(_733) ? _2888 : min(_733, _2888));
    vec4 _2893 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2890, _2891), 0.0);
    float _2895 = _2893.x;
    bool _2915 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2895)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2895))) > _697;
    vec4 _2919 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2915 ? _2890 : _732, _2915 ? _2891 : _733));
    float _4891 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4902 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4913 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2943 = 0.959999978542327880859375 - (exp2(log2(1.0 - _812) * 5.0) * 0.959999978542327880859375);
    float _2945 = (_2919.x * _2943) * cbSceneParam._m0[72u].w;
    float _2947 = (_2919.y * _2943) * cbSceneParam._m0[72u].w;
    float _2949 = (_2919.z * _2943) * cbSceneParam._m0[72u].w;
    float _2971 = _732 / cbSceneParam._m0[86u].x;
    float _2972 = _733 / cbSceneParam._m0[86u].y;
    vec4 _2986 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2971, _2972, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2988 = _2986.x;
    float _2989 = _2986.y;
    float _2990 = _2986.z;
    float _2991 = _2986.w;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _3025 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _3026 = _3025 / _697;
        float _3037 = _3026 * _717;
        float _3038 = _718 * _3026;
        float _3039 = (-0.0) - _3038;
        float _3040 = _3026 * _719;
        float _3042 = (cbSceneParam._m0[77u].w * _3039) / _3025;
        float _3043 = _3042 + cbSceneParam._m0[79u].w;
        float _3044 = cbSceneParam._m0[79u].w - _3038;
        float _3050 = sqrt(((_3037 * _3037) + (_3038 * _3038)) + (_3040 * _3040));
        float _3053 = (1.0 - (cbSceneParam._m0[77u].w / _3025)) * _3050;
        float _3058 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3060 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_3039 - _3042) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_3043 > 0.0) ? exp2(_3058 * _3043) : (2.0 - exp2(_3060 * _3043))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3053;
        }
        else
        {
            float _3205 = 1.0 / cbSceneParam._m0[80u].x;
            float _3206 = isnan(_3044) ? _3043 : (isnan(_3043) ? _3044 : max(_3043, _3044));
            float _3207 = isnan(_3044) ? _3043 : (isnan(_3043) ? _3044 : min(_3043, _3044));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            _3245 = ((abs(_3050 / _3039) * cbSceneParam._m0[80u].y) * ((((_3216 - _3217) * 2.0) - ((exp2(_3058 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0)))) - exp2(_3058 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))))) * _3205)) - ((exp2(_3060 * _3216) - exp2(_3060 * _3217)) * _3205))) + (_3053 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2971, _2972, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_2991);
        _3062 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2988;
        _3064 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2989;
        _3066 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _2990;
        _3068 = _3256 * _2991;
    }
    else
    {
        _3062 = _2988;
        _3064 = _2989;
        _3066 = _2990;
        _3068 = _2991;
    }
    bool _3080 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3081 = log2(_3068);
    float _3088 = exp2(_3081 * cbSceneParam._m0[78u].x) * ((_2945 + (((((_1817 * _1865.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1610) * _1881)) + _2869) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2863 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _797))) - _2945) * 0.5));
    float _3089 = exp2(_3081 * cbSceneParam._m0[78u].y) * ((_2947 + (((((_1817 * _1865.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1610) * _1881)) + _2871) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2865 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _797))) - _2947) * 0.5));
    float _3090 = exp2(_3081 * cbSceneParam._m0[78u].z) * ((_2949 + (((((_1817 * _1865.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1610) * _1881)) + _2873) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2867 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _797))) - _2949) * 0.5));
    vec4 _3098 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_732, _733));
    float _3100 = _3098.x;
    float _3121 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3100)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3100))) - _697) * cbMtdParam._m0[12u].w;
    float _4964 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
    float _3123 = (cbInstanceData._m0[_772 + 6u].w * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)));
    float _3132 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3132 * (_3080 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3062)));
    SV_Target.y = _3132 * (_3080 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3064)));
    SV_Target.z = _3132 * (_3080 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3066)));
    SV_Target.w = _3123;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3123;
}


