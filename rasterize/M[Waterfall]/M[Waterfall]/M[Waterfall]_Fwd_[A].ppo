#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1216;
float _3732;
float _3733;
float _3734;
float _3735;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _212 = _211 * _204;
    float _213 = _211 * _205;
    float _214 = _211 * _206;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = exp2(log2(abs(_219)) * 2.2000000476837158203125);
    float _240 = exp2(log2(abs(_220)) * 2.2000000476837158203125);
    float _241 = exp2(log2(abs(_221)) * 2.2000000476837158203125);
    float _3744 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _243 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3766 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _245 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _259 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _260 = _259 * cbMtdParam._m0[16u].x;
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _298 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _299 = _290 / cbMtdParam._m0[13u].z;
    float _300 = _294 / cbMtdParam._m0[13u].z;
    float _301 = _298 / cbMtdParam._m0[13u].z;
    float _315 = (((_300 + (_259 * cbMtdParam._m0[16u].y)) * cbMtdParam._m0[17u].y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    vec4 _318 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_301 + _260) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _315));
    vec4 _333 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_299 + _260) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _315));
    float _383 = exp2(log2(texture(sampler2D(M_Waterfall_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[15u].x * _259) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[15u].y * _259) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x) * cbMtdParam._m0[12u].y);
    float _391 = (cbMtdParam._m0[17u].z * _259) + TEXCOORD_1.x;
    float _392 = (cbMtdParam._m0[17u].w * _259) + TEXCOORD_1.y;
    vec4 _405 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_391 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_392 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _411 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].y * cbMtdParam._m0[11u].w);
    float _418 = ((_405.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _420 = (-0.0) - (cbMtdParam._m0[13u].x * ((_405.x * 0.5) + (-0.25)));
    float _422 = fract(_411);
    float _424 = fract(_411 + 0.5);
    float _436 = abs((_422 * 2.0) + (-1.0));
    vec4 _445 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_422 * _420) + _391) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_418 * _422) + _392) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    vec4 _450 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_424 * _420) + _391) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_418 * _424) + _392) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _475 = (((_333.x * _245) + (_318.x * _243)) + cbMtdParam._m0[9u].x) + (((cbMtdParam._m0[10u].x * TEXCOORD_4.x) * _383) * (((_450.x - _447) * _436) + _447));
    float _478 = (((_333.y * _245) + (_318.y * _243)) + cbMtdParam._m0[9u].y) + (((cbMtdParam._m0[10u].y * TEXCOORD_4.x) * _383) * (((_450.y - _448) * _436) + _448));
    float _481 = (((_333.z * _245) + (_318.z * _243)) + cbMtdParam._m0[9u].z) + (((cbMtdParam._m0[10u].z * TEXCOORD_4.x) * _383) * (((_450.z - _449) * _436) + _449));
    float _485 = (TEXCOORD_4.w - (cbMtdParam._m0[12u].z * ((_333.w * _245) + (_318.w * _243)))) + TEXCOORD_4.w;
    vec4 _509 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].z * _259) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].w * _259) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _534 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _259) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].y * _259) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _540 = (_534.x * 2.0) + (-1.0);
    float _541 = (_534.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3777 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))));
    float _554 = (cbMtdParam._m0[15u].z * _259) + TEXCOORD_1.x;
    float _555 = (cbMtdParam._m0[15u].w * _259) + TEXCOORD_1.y;
    vec4 _560 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_554 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_555 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _568 = ((_560.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _570 = (-0.0) - (cbMtdParam._m0[13u].x * ((_560.x * 0.5) + (-0.25)));
    vec4 _587 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_422 * _570) + _554) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_568 * _422) + _555) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _589 = _587.x;
    float _590 = _587.y;
    vec4 _591 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_424 * _570) + _554) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_568 * _424) + _555) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _609 = cbMtdParam._m0[16u].z * _259;
    float _623 = (((cbMtdParam._m0[16u].w * _259) + _300) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w;
    vec4 _625 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2(((_609 + _299) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, _623));
    vec4 _634 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * (_609 + _301)) + cbTextureTilingScale._m0[5u].z, _623));
    float _640 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.502016007900238037109375;
    float _653 = ((((((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _540) + ((((((_591.x - _589) * _436) + _589) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_625.x * _245) + _640) + (_634.x * _243)) * 5.19999980926513671875);
    float _657 = ((((((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _541) + ((((((_591.y - _590) * _436) + _590) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_625.y * _245) + _640) + (_634.y * _243)) * 5.19999980926513671875);
    float _663 = fma(_547, _219, fma(_657, _225 * TANGENT.x, _653 * _212));
    float _666 = fma(_547, _220, fma(_657, _225 * TANGENT.y, _653 * _213));
    float _669 = fma(_547, _221, fma(_657, _225 * TANGENT.z, _653 * _214));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3788 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3799 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _678 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3821 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3832 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _717 = cbSceneParam._m0[71u].x - (_290 / _707);
    float _718 = cbSceneParam._m0[71u].y - (_294 / _707);
    float _719 = cbSceneParam._m0[71u].z - (_298 / _707);
    float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
    float _724 = _717 * _723;
    float _725 = _718 * _723;
    float _726 = _719 * _723;
    vec4 _731 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _733 = _731.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _896 = sqrt(((_717 * _717) + (_718 * _718)) + (_719 * _719));
        float _902 = (cbMatDynParam._m0[5u].x * _896) + cbMatDynParam._m0[5u].y;
        float _3843 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _907 = (cbMatDynParam._m0[5u].z * _896) + cbMatDynParam._m0[5u].w;
        float _3854 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) - _903)) + _903) < ((_733 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _745 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _746 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _768 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _771 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _784 = uint(roundEven(NORMAL.w)) * 13u;
    uint _785 = _784 + 9u;
    uint _786 = _785 + uint(cbMatDynParam._m0[0u].w);
    float _792 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_786].x;
    float _793 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_786].y;
    float _794 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_786].z;
    float _3865 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    vec4 _806 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _745, cbSceneParam._m0[86u].y * _746));
    float _809 = _806.x * TEXCOORD_1.z;
    float _810 = dot(vec3(_674, _675, _676), vec3(_724, _725, _726));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _674) - _724;
    float _818 = (_813 * _675) - _725;
    float _819 = (_813 * _676) - _726;
    float _823 = abs(dot(vec3(_724, _725, _726), vec3(_674, _675, _676)));
    float _3898 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _832 = 10.0 / (_697 + 10.0);
    float _833 = sqrt(_678);
    float _845 = exp2((_833 * 5.0) * log2(1.0 - (_824 * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1215;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_885, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877));
        float _945 = fma(_885, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877));
        float _949 = fma(_885, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877));
        float _973 = _877 + _674;
        float _974 = _881 + _675;
        float _975 = _885 + _676;
        float _985 = fma(_975, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973)) - _941;
        float _986 = fma(_975, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973)) - _945;
        float _987 = fma(_975, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973)) - _949;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1043 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1009.x + (-0.5));
        float _1045 = _1043 * (_1009.y + (-0.5));
        float _1046 = _1043 * (_1009.z + (-0.5));
        float _1053 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1016.x + (-0.5));
        float _1055 = _1053 * (_1016.y + (-0.5));
        float _1056 = _1053 * (_1016.z + (-0.5));
        float _1063 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1023.x + (-0.5));
        float _1065 = _1063 * (_1023.y + (-0.5));
        float _1066 = _1063 * (_1023.z + (-0.5));
        float _1073 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1030.x + (-0.5));
        float _1075 = _1073 * (_1030.y + (-0.5));
        float _1076 = _1073 * (_1030.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1097 = (dot(vec3(_674, _675, _676), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1107 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3946 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1109 + 1.0))) + _1114) * _1077;
        float _1124 = _1045 * 0.5;
        float _1125 = _1055 * 0.5;
        float _1126 = _1065 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_674, _675, _676), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3979 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1151 + 1.0))) + _1156) * _1078;
        float _1166 = _1046 * 0.5;
        float _1167 = _1056 * 0.5;
        float _1168 = _1066 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_674, _675, _676), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4012 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1193 + 1.0))) + _1198) * _1079;
        _1215 = _1046;
        _1217 = _1045;
        _1218 = _1044;
        _1219 = _1056;
        _1220 = _1055;
        _1221 = _1054;
        _1222 = _1066;
        _1223 = _1065;
        _1224 = _1064;
        _1225 = _1079;
        _1226 = _1078;
        _1227 = _1077;
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _1216;
        _1217 = _1216;
        _1218 = _1216;
        _1219 = _1216;
        _1220 = _1216;
        _1221 = _1216;
        _1222 = _1216;
        _1223 = _1216;
        _1224 = _1216;
        _1225 = _1216;
        _1226 = _1216;
        _1227 = _1216;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_885, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877));
        float _1263 = fma(_885, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877));
        float _1267 = fma(_885, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877));
        float _1290 = _877 + _674;
        float _1291 = _881 + _675;
        float _1292 = _885 + _676;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_674, _675, _676), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4075 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_674, _675, _676), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4108 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_674, _675, _676), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4141 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1216;
        _1529 = _1216;
        _1530 = _1216;
        _1531 = _1216;
        _1532 = _1216;
        _1533 = _1216;
        _1534 = _1216;
        _1535 = _1216;
        _1536 = _1216;
        _1537 = _1216;
        _1538 = _1216;
        _1539 = _1216;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1228)) + _1228;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _817 * 0.5;
    float _1597 = _818 * 0.5;
    float _1598 = _819 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1215, _1219, _1222, _1225));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_885, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_885, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_885, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1726 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1729 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1757 = frontier_phi_17_15_ladder;
        }
        float _2011;
        if (_1726 > 0.0)
        {
            _2011 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2011 = frontier_phi_26_22_ladder;
        }
        float _2254;
        if (_1729 > 0.0)
        {
            _2254 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2254 = frontier_phi_38_33_ladder;
        }
        float _2256 = isnan(_2011) ? _1757 : (isnan(_1757) ? _2011 : min(_1757, _2011));
        float _2257 = isnan(_2254) ? _2256 : (isnan(_2256) ? _2254 : min(_2256, _2254));
        float _2261 = (_2257 * _1723) + _1712;
        float _2262 = (_2257 * _1726) + _1716;
        float _2263 = (_2257 * _1729) + _1720;
        float _2264 = _2257 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2264;
        float _2268 = _2264 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 > _2268) || ((_2262 < _2266) || ((_2261 < _2266) || (_2261 > _2268))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2263, cbModelParam._m0[9u].z, fma(_2262, cbModelParam._m0[9u].y, _2261 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2263, cbModelParam._m0[10u].z, fma(_2262, cbModelParam._m0[10u].y, _2261 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2263, cbModelParam._m0[11u].z, fma(_2262, cbModelParam._m0[11u].y, _2261 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_16_38_ladder = _2387.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2387.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2387.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_16_38_ladder_2;
        _1747 = frontier_phi_16_38_ladder_1;
        _1749 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1665);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_885, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_885, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_885, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1823 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1826 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _2016;
        if (_1820 > 0.0)
        {
            _2016 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2016 = frontier_phi_28_24_ladder;
        }
        float _2281;
        if (_1823 > 0.0)
        {
            _2281 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2281 = frontier_phi_40_35_ladder;
        }
        float _2486;
        if (_1826 > 0.0)
        {
            _2486 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2486 = frontier_phi_49_46_ladder;
        }
        float _2488 = isnan(_2281) ? _2016 : (isnan(_2016) ? _2281 : min(_2016, _2281));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1820) + _1809;
        float _2494 = (_2489 * _1823) + _1813;
        float _2495 = (_2489 * _1826) + _1817;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_25_49_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_25_49_ladder_2;
        _1847 = frontier_phi_25_49_ladder_1;
        _1849 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1754);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1861 = ((((1.0 - _845) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_845 * _833)) * _809;
    float _1862 = _1861 * ((cbModelParam._m0[1u].w * (_1845 - _1745)) + _1745);
    float _1863 = _1861 * ((cbModelParam._m0[1u].w * (_1847 - _1747)) + _1747);
    float _1864 = _1861 * ((cbModelParam._m0[1u].w * (_1849 - _1749)) + _1749);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    float _1884 = _745 / cbSceneParam._m0[86u].x;
    float _1892 = (cbSceneParam._m0[88u].y * (1.0 - _678)) + cbSceneParam._m0[88u].z;
    float _4267 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 5.0;
    float _1899 = (_832 * cbMtdParam._m0[12u].x) * dot(vec3(_674, _675, _676), vec3(1.0, 0.0, 0.0));
    vec4 _1909 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1899 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1899 + _1884) * cbSceneParam._m0[86u].x, _746), _1894).w) + _1884) * cbSceneParam._m0[86u].x, _746), _1894);
    float _1925 = 1.0 - _1909.w;
    uvec4 _1935 = floatBitsToUint(cbInstanceData._m0[_784 + 5u]);
    uint _1937 = _1935.x * 14u;
    uint _1938 = _1937 + 13u;
    float _1945 = _809 + (-1.0);
    float _1950 = (cbLight._m0[_1938].x * _1945) + 1.0;
    float _1951 = (cbLight._m0[_1938].y * _1945) + 1.0;
    float _1952 = (cbLight._m0[_1938].z * _1945) + 1.0;
    float _1953 = (cbLight._m0[_1938].w * _1945) + 1.0;
    uint _1954 = _1937 + 5u;
    float _1960 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1964 = _1937 + 4u;
    float _1970 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1974 = _1937 | 1u;
    float _1985 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_674, _675, _676));
    float _1988 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_674, _675, _676));
    float _4288 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _4299 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1993 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _1995 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2002 = ((cbLight._m0[_1954].x * _1960) * _1995) + ((cbLight._m0[_1964].x * _1970) * _1993);
    float _2003 = ((_1960 * cbLight._m0[_1954].y) * _1995) + ((_1970 * cbLight._m0[_1964].y) * _1993);
    float _2004 = ((_1960 * cbLight._m0[_1954].z) * _1995) + ((_1970 * cbLight._m0[_1964].z) * _1993);
    uvec4 _2008 = floatBitsToUint(cbLight._m0[_1937 + 12u]);
    bool _2010 = _2008.x == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_2010)
    {
        _2021 = _2002;
        _2023 = _2003;
        _2025 = _2004;
    }
    else
    {
        uint _2029 = _1937 + 6u;
        float _2045 = (dot(vec3(cbLight._m0[_1937 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _4310 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2048 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2021 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _2002;
        _2023 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _2003;
        _2025 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _2004;
    }
    bool _2028 = _2008.y == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2028)
    {
        _2066 = _2021;
        _2068 = _2023;
        _2070 = _2025;
    }
    else
    {
        uint _2225 = _1937 + 7u;
        float _2241 = (dot(vec3(cbLight._m0[_1937 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2242 = _2241 * _2241;
        float _4326 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2243 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2244 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2066 = (((cbLight._m0[_2225].x * 0.3183098733425140380859375) * _2243) * _2244) + _2021;
        _2068 = (((cbLight._m0[_2225].y * 0.3183098733425140380859375) * _2243) * _2244) + _2023;
        _2070 = (((cbLight._m0[_2225].z * 0.3183098733425140380859375) * _2243) * _2244) + _2025;
    }
    uint _2073 = _1937 + 8u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _678) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1937].x + _724;
    float _2089 = cbLight._m0[_1937].y + _725;
    float _2090 = cbLight._m0[_1937].z + _726;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1937].xyz));
    float _4342 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2102 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2103 = dot(vec3(_674, _675, _676), vec3(_2095, _2096, _2097));
    float _4364 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2095, _2096, _2097));
    float _4375 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2087 * _2087;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2126 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2127 = 1.0 - _2087;
    float _2138 = (0.5 / (((_2102 * ((_2101 * _2127) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2127) + _2087) * _2101))) * _2101;
    float _4386 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    uint _2151 = _1937 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _678) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1974].x + _724;
    float _2165 = cbLight._m0[_1974].y + _725;
    float _2166 = cbLight._m0[_1974].z + _726;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1974].xyz));
    float _4397 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2178 = dot(vec3(_674, _675, _676), vec3(_2171, _2172, _2173));
    float _4408 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2171, _2172, _2173));
    float _4419 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2199 = (exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2200 = 1.0 - _2163;
    float _2210 = (0.5 / (((_2102 * ((_2177 * _2200) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2200) + _2163) * _2177))) * _2177;
    float _4430 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2222 = (((_2199 * cbLight._m0[_2151].x) * _2212) * _1960) + (((_2126 * cbLight._m0[_2073].x) * _2140) * _1970);
    float _2223 = (((_2199 * cbLight._m0[_2151].y) * _2212) * _1960) + (((_2126 * cbLight._m0[_2073].y) * _2140) * _1970);
    float _2224 = (((_2199 * cbLight._m0[_2151].z) * _2212) * _1960) + (((_2126 * cbLight._m0[_2073].z) * _2140) * _1970);
    float _2286;
    float _2288;
    float _2290;
    if (_2010)
    {
        _2286 = _2222;
        _2288 = _2223;
        _2290 = _2224;
    }
    else
    {
        uint _2292 = _1937 + 2u;
        uint _2296 = _1937 + 10u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _678) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _724;
        float _2313 = cbLight._m0[_2292].y + _725;
        float _2314 = cbLight._m0[_2292].z + _726;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2292].xyz));
        float _4441 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2326 = dot(vec3(_674, _675, _676), vec3(_2319, _2320, _2321));
        float _4452 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4463 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2348 = 1.0 - _2311;
        float _2358 = (0.5 / (((_2102 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2348) + _2311) * _2325))) * _2325;
        float _4474 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2286 = (((_2347 * cbLight._m0[_2296].x) * _2360) * _2361) + _2222;
        _2288 = (((_2347 * cbLight._m0[_2296].y) * _2360) * _2361) + _2223;
        _2290 = (((_2347 * cbLight._m0[_2296].z) * _2360) * _2361) + _2224;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2028)
    {
        _2396 = _2286;
        _2398 = _2288;
        _2400 = _2290;
    }
    else
    {
        uint _2407 = _1937 + 3u;
        uint _2411 = _1937 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _678) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _724;
        float _2428 = cbLight._m0[_2407].y + _725;
        float _2429 = cbLight._m0[_2407].z + _726;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2407].xyz));
        float _4490 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2441 = dot(vec3(_674, _675, _676), vec3(_2434, _2435, _2436));
        float _4501 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4512 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2462 = (exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2463 = 1.0 - _2426;
        float _2473 = (0.5 / (((_2102 * ((_2440 * _2463) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2463) + _2426) * _2440))) * _2440;
        float _4523 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2396 = (((_2462 * cbLight._m0[_2411].x) * _2475) * _2476) + _2286;
        _2398 = (((_2462 * cbLight._m0[_2411].y) * _2475) * _2476) + _2288;
        _2400 = (((_2462 * cbLight._m0[_2411].z) * _2475) * _2476) + _2290;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1935.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _746) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _745) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            uint _2959 = 0u;
            uint _2968;
            bool _2969;
            for (;;)
            {
                _2968 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                _2969 = _2968 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2969)
                {
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                else
                {
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    uint _3104;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2968;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    for (;;)
                    {
                        uint _3108 = uint(findLSB(_3104)) + (_2959 << 5u);
                        uint _3105 = (_3104 + 4294967295u) & _3104;
                        uint _3110 = _3108 * 48u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3130 = (_3108 * 48u) + 4u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3149 = (_3108 * 48u) + 8u;
                        vec3 _3160 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x));
                        float _3164 = _3124.x - _2552;
                        float _3165 = _3124.y - _2553;
                        float _3166 = _3124.z - _2554;
                        float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                        float _3170 = inversesqrt(_3167);
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3174 = dot(vec3(_765, _768, _771), vec3(_3171, _3172, _3173));
                        float _3179 = 1.0 - (_3167 * _3124.w);
                        float _4549 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3181 = sqrt(_3167) * _3143.w;
                        float _3184 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3174) + _3185;
                        float _3191 = _3181 * _3181;
                        float _3195 = ((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3180) / ((_3191 * 0.699999988079071044921875) + 1.0);
                        float _3199 = (-0.0) - _2552;
                        float _3200 = (-0.0) - _2553;
                        float _3201 = (-0.0) - _2554;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3216 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                        float _3217 = 1.0 - _833;
                        float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                        float _3225 = _3224 * _3224;
                        float _3226 = _3225 * _3225;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3229 = _3208 + _3173;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3237 = dot(vec3(_765, _768, _771), vec3(_3206, _3207, _3208));
                        float _4565 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3241 = dot(vec3(_765, _768, _771), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                        float _4576 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                        float _3249 = _3184 * _3225;
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3174) + _3250;
                        float _4587 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3255 = 1.0 - _3225;
                        float _3265 = (0.5 / (((_3254 * ((_3240 * _3255) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3225) * _3240))) * _3254;
                        float _4598 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3276 = (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3248 * _3248) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125))) * _3180;
                        _3028 = (_3195 * _3143.x) + _3101;
                        _3029 = (_3195 * _3143.y) + _3102;
                        _3030 = (_3195 * _3143.z) + _3103;
                        _3025 = (_3276 * _3160.x) + _3098;
                        _3026 = (_3276 * _3160.y) + _3099;
                        _3027 = (_3276 * _3160.z) + _3100;
                        if (_3105 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3105;
                        }
                    }
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                _2770 = frontier_phi_66_pred;
                _2780 = frontier_phi_66_pred_1;
                _2778 = frontier_phi_66_pred_2;
                _2776 = frontier_phi_66_pred_3;
                _2774 = frontier_phi_66_pred_4;
                _2772 = frontier_phi_66_pred_5;
                uint _2960 = _2959 + 1u;
                if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2953 = _2770;
                    _2954 = _2772;
                    _2955 = _2774;
                    _2956 = _2776;
                    _2957 = _2778;
                    _2958 = _2780;
                    _2959 = _2960;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((4294967295u << _2786) & _2598) == 0u)
        {
            _2921 = _2769;
            _2923 = _2771;
            _2925 = _2773;
            _2927 = _2775;
            _2929 = _2777;
            _2931 = _2779;
        }
        else
        {
            float _2946 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2947 = _2946 * _2552;
            float _2948 = _2946 * _2553;
            float _2949 = _2946 * _2554;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _3081 = _2769;
                float _3082 = _2771;
                float _3083 = _2773;
                float _3084 = _2775;
                float _3085 = _2777;
                float _3086 = _2779;
                uint _3087 = _2786;
                uint _3096;
                bool _3097;
                for (;;)
                {
                    _3096 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                    _3097 = _3096 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3097)
                    {
                        frontier_phi_77_pred = _3086;
                        frontier_phi_77_pred_1 = _3085;
                        frontier_phi_77_pred_2 = _3084;
                        frontier_phi_77_pred_3 = _3083;
                        frontier_phi_77_pred_4 = _3082;
                        frontier_phi_77_pred_5 = _3081;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        uint _3309 = _3096;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3394;
                        float _3441;
                        bool _3442;
                        for (;;)
                        {
                            uint _3320 = ((_3087 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3381 = (_3320 * 40u) + 20u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3397 = (_3320 * 40u) + 24u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3416 = (_3320 * 40u) + 28u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3441 = fma(_2554, _3429.z, fma(_2553, _3429.y, _3429.x * _2552)) + _3429.w;
                            _3442 = !((fma(_2554, _3410.z, fma(_2553, _3410.y, _3410.x * _2552)) + _3410.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3442)
                            {
                                float _3469 = _3335.x - _2552;
                                float _3470 = _3335.y - _2553;
                                float _3471 = _3335.z - _2554;
                                float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                                float _3475 = inversesqrt(_3472);
                                float _3476 = _3475 * _3469;
                                float _3477 = _3475 * _3470;
                                float _3478 = _3475 * _3471;
                                float _3482 = 1.0 - (_3472 / (_3336 * _3336));
                                float _4609 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3487 = sqrt(_3472) * _3351.w;
                                float _3489 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                                float _3490 = _3489 * _3489;
                                float _3493 = ((1.0 - _3490) * dot(vec3(_3476, _3477, _3478), vec3(_765, _768, _771))) + _3490;
                                float _3496 = _3487 * _3487;
                                float _3500 = (fma(_2554, _3378.z, fma(_2553, _3378.y, _3378.x * _2552)) + _3378.w) / _3441;
                                float _3501 = (fma(_2554, _3394.z, fma(_2553, _3394.y, _3394.x * _2552)) + _3394.w) / _3441;
                                float _3505 = 1.0 - dot(vec2(_3500, _3501), vec2(_3500, _3501));
                                float _4625 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3507 = _3506 * (((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3483) / ((_3496 * 0.699999988079071044921875) + 1.0));
                                float _3519 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                                float _3520 = 1.0 - _833;
                                float _3527 = sqrt(1.0 - ((1.0 - (_3520 * _3520)) * (1.0 - (_3519 * _3519))));
                                float _3528 = _3527 * _3527;
                                float _3529 = _3528 * _3528;
                                float _3530 = _3476 - _2947;
                                float _3531 = _3477 - _2948;
                                float _3532 = _3478 - _2949;
                                float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                                float _3540 = dot(vec3(_765, _768, _771), vec3((-0.0) - _2947, (-0.0) - _2948, (-0.0) - _2949));
                                float _4636 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3544 = dot(vec3(_765, _768, _771), vec3(_3536 * _3530, _3536 * _3531, _3536 * _3532));
                                float _4647 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3551 = ((_3547 * _3547) * (_3529 + (-1.0))) + 1.0;
                                float _3552 = _3489 * _3528;
                                float _3553 = _3552 * _3552;
                                float _3559 = ((1.0 - _3553) * dot(vec3(_765, _768, _771), vec3(_3476, _3477, _3478))) + _3553;
                                float _4658 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3561 = 1.0 - _3528;
                                float _3571 = (0.5 / (((_3560 * ((_3543 * _3561) + _3528)) + 9.9999999392252902907785028219223e-09) + (((_3560 * _3561) + _3528) * _3543))) * _3560;
                                float _4669 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3581 = (_3506 * _3483) * (((_3529 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3551 * _3551) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3507 * _3351.y;
                                frontier_phi_83_pred_1 = _3507 * _3351.x;
                                frontier_phi_83_pred_2 = _3581 * _3363.z;
                                frontier_phi_83_pred_3 = _3581 * _3363.y;
                                frontier_phi_83_pred_4 = _3581 * _3363.x;
                                frontier_phi_83_pred_5 = _3507 * _3351.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3589 = frontier_phi_83_pred;
                            _3588 = frontier_phi_83_pred_1;
                            _3587 = frontier_phi_83_pred_2;
                            _3586 = frontier_phi_83_pred_3;
                            _3585 = frontier_phi_83_pred_4;
                            _3590 = frontier_phi_83_pred_5;
                            _3293 = _3588 + _3306;
                            _3294 = _3589 + _3307;
                            _3295 = _3590 + _3308;
                            _3290 = _3585 + _3303;
                            _3291 = _3586 + _3304;
                            _3292 = _3587 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3295;
                        frontier_phi_77_pred_1 = _3294;
                        frontier_phi_77_pred_2 = _3293;
                        frontier_phi_77_pred_3 = _3292;
                        frontier_phi_77_pred_4 = _3291;
                        frontier_phi_77_pred_5 = _3290;
                    }
                    _2932 = frontier_phi_77_pred;
                    _2930 = frontier_phi_77_pred_1;
                    _2928 = frontier_phi_77_pred_2;
                    _2926 = frontier_phi_77_pred_3;
                    _2924 = frontier_phi_77_pred_4;
                    _2922 = frontier_phi_77_pred_5;
                    uint _3088 = _3087 + 1u;
                    if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3081 = _2922;
                        _3082 = _2924;
                        _3083 = _2926;
                        _3084 = _2928;
                        _3085 = _2930;
                        _3086 = _2932;
                        _3087 = _3088;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2926;
                frontier_phi_58_59_ladder_1 = _2932;
                frontier_phi_58_59_ladder_2 = _2930;
                frontier_phi_58_59_ladder_3 = _2928;
                frontier_phi_58_59_ladder_4 = _2924;
                frontier_phi_58_59_ladder_5 = _2922;
            }
            else
            {
                frontier_phi_58_59_ladder = _2773;
                frontier_phi_58_59_ladder_1 = _2779;
                frontier_phi_58_59_ladder_2 = _2777;
                frontier_phi_58_59_ladder_3 = _2775;
                frontier_phi_58_59_ladder_4 = _2771;
                frontier_phi_58_59_ladder_5 = _2769;
            }
            _2921 = frontier_phi_58_59_ladder_5;
            _2923 = frontier_phi_58_59_ladder_4;
            _2925 = frontier_phi_58_59_ladder;
            _2927 = frontier_phi_58_59_ladder_3;
            _2929 = frontier_phi_58_59_ladder_2;
            _2931 = frontier_phi_58_59_ladder_1;
        }
        float _2936 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2611 = (_2936 * _2927) + _2066;
        _2613 = (_2936 * _2929) + _2068;
        _2615 = (_2936 * _2931) + _2070;
        _2617 = ((_2921 * 0.039999999105930328369140625) * _2936) + _2396;
        _2619 = ((_2923 * 0.039999999105930328369140625) * _2936) + _2398;
        _2621 = ((_2925 * 0.039999999105930328369140625) * _2936) + _2400;
    }
    else
    {
        _2611 = _2066;
        _2613 = _2068;
        _2615 = _2070;
        _2617 = _2396;
        _2619 = _2398;
        _2621 = _2400;
    }
    float _2635 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2636 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2637 = cbSceneParam._m0[86u].x * (_1884 + ((_832 * cbMtdParam._m0[11u].y) * dot(vec3(_674, _675, _676), vec3(_212, _213, _214))));
    float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
    float _2639 = isnan(_2636) ? _746 : (isnan(_746) ? _2636 : min(_746, _2636));
    vec4 _2641 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2638, _2639), 0.0);
    float _2643 = _2641.x;
    bool _2663 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2643)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2643))) > _697;
    vec4 _2667 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2663 ? _2638 : _745, _2663 ? _2639 : _746));
    float _4695 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4706 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4717 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2691 = 0.959999978542327880859375 - (exp2(log2(1.0 - _824) * 5.0) * 0.959999978542327880859375);
    float _2693 = (_2667.x * _2691) * cbSceneParam._m0[72u].w;
    float _2695 = (_2667.y * _2691) * cbSceneParam._m0[72u].w;
    float _2697 = (_2667.z * _2691) * cbSceneParam._m0[72u].w;
    float _2705 = (_2693 + (((((_1861 * _1909.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1654) * _1925)) + _2617) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2611 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _809))) - _2693) * 0.5);
    float _2707 = (_2695 + (((((_1861 * _1909.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1654) * _1925)) + _2619) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2613 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _809))) - _2695) * 0.5);
    float _2709 = (_2697 + (((((_1861 * _1909.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1654) * _1925)) + _2621) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2615 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _809))) - _2697) * 0.5);
    float _2714 = cbInstanceData._m0[_784 + 6u].w * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)));
    float _2719 = _745 / cbSceneParam._m0[86u].x;
    float _2720 = _746 / cbSceneParam._m0[86u].y;
    vec4 _2734 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2736 = _2734.x;
    float _2737 = _2734.y;
    float _2738 = _2734.z;
    float _2739 = _2734.w;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2795 = _2794 / _697;
        float _2806 = _2795 * _717;
        float _2807 = _718 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2809 = _2795 * _719;
        float _2811 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2812 = _2811 + cbSceneParam._m0[79u].w;
        float _2813 = cbSceneParam._m0[79u].w - _2807;
        float _2819 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2809 * _2809));
        float _2822 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2819;
        float _2827 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2829 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3038;
        if (abs((_2808 - _2811) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3038 = ((((_2812 > 0.0) ? exp2(_2827 * _2812) : (2.0 - exp2(_2829 * _2812))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2822;
        }
        else
        {
            float _2982 = 1.0 / cbSceneParam._m0[80u].x;
            float _2983 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : max(_2812, _2813));
            float _2984 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : min(_2812, _2813));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            _3038 = ((abs(_2819 / _2808) * cbSceneParam._m0[80u].y) * ((((_2993 - _2994) * 2.0) - ((exp2(_2827 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)))) - exp2(_2827 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))))) * _2982)) - ((exp2(_2829 * _2993) - exp2(_2829 * _2994)) * _2982))) + (_2822 * cbSceneParam._m0[80u].z);
        }
        vec4 _3040 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, 1.0), 0.0);
        float _3049 = exp2((_3038 * (-1.44269502162933349609375)) * (1.0 - _3040.w));
        float _3050 = log2(_3049);
        float _3066 = log2(_2739);
        _2831 = (exp2(_3066 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].x)) * _3040.x) / cbSceneParam._m0[78u].x)) + _2736;
        _2833 = (exp2(_3066 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].y)) * _3040.y) / cbSceneParam._m0[78u].y)) + _2737;
        _2835 = (exp2(_3066 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].z)) * _3040.z) / cbSceneParam._m0[78u].z)) + _2738;
        _2837 = _3049 * _2739;
    }
    else
    {
        _2831 = _2736;
        _2833 = _2737;
        _2835 = _2738;
        _2837 = _2739;
    }
    bool _3076;
    float _2892;
    vec4 _2895;
    float _2897;
    vec4 _2899;
    float _2907;
    float _2908;
    float _2909;
    float _2910;
    bool _2920;
    for (;;)
    {
        bool _2849 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2850 = log2(_2837);
        float _2857 = exp2(_2850 * cbSceneParam._m0[78u].x) * _2705;
        float _2858 = exp2(_2850 * cbSceneParam._m0[78u].y) * _2707;
        float _2859 = exp2(_2850 * cbSceneParam._m0[78u].z) * _2709;
        vec4 _2867 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_745, _746));
        float _2869 = _2867.x;
        float _2890 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2869)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2869))) - _697) * cbMtdParam._m0[12u].w;
        float _4768 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        _2892 = _2714 * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)));
        float _2893 = _733 + (-0.5);
        _2895 = cbMtdParam._m0[1u];
        _2897 = _2895.y * _2893;
        _2899 = cbMatDynParam._m0[0u];
        float _2906 = (roundEven(_2899.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2907 = _2906 * (_2849 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
        _2908 = _2906 * (_2849 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
        _2909 = _2906 * (_2849 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2835)));
        _2910 = _2893 * 0.999000012874603271484375;
        _2920 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2920)
        {
            if ((cbInstanceData._m0[_784 + 7u].x + _2910) < 0.5)
            {
                _3076 = true;
                break;
            }
        }
        uint _3017 = _785 + uint(_2899.w);
        if ((cbInstanceData._m0[_3017].w < 1.0) && ((cbInstanceData._m0[_3017].w + _2910) < 0.5))
        {
            _3076 = true;
            break;
        }
        if ((_2897 + _485) < _2895.x)
        {
            _3076 = true;
            break;
        }
        _3076 = false;
        break;
    }
    float _3281;
    if (_3076)
    {
        discard_state = true;
        _3281 = 0.0;
    }
    else
    {
        _3281 = _2892;
    }
    SV_Target.x = _2907;
    SV_Target.y = _2908;
    SV_Target.z = _2909;
    SV_Target.w = _3281;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2892;
    discard_exit();
}


