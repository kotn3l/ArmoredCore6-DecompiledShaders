#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _91 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _92 = _91 * NORMAL.x;
    float _93 = _91 * NORMAL.y;
    float _94 = _91 * NORMAL.z;
    float _765 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _101 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
    float _115 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _158 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _168 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _158);
    float _169 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _158);
    float _170 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _158);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _203 = sqrt(((_168 * _168) + (_169 * _169)) + (_170 * _170));
        float _210 = (cbMatDynParam._m0[5u].x * _203) + cbMatDynParam._m0[5u].y;
        float _776 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
        float _211 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        float _215 = (cbMatDynParam._m0[5u].z * _203) + cbMatDynParam._m0[5u].w;
        float _787 = isnan(0.0) ? _215 : (isnan(_215) ? 0.0 : max(_215, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0))) - _211)) + _211) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _180 = POSITION_1.x / POSITION_1.w;
    float _181 = POSITION_1.y / POSITION_1.w;
    float _185 = (_180 * 0.5) + 0.5;
    float _186 = 0.5 - (_181 * 0.5);
    float _228;
    float _230;
    float _232;
    float _234;
    if (_101 < cbPerScene._m0[22u].z)
    {
        _228 = 0.0;
        _230 = 0.0;
        _232 = 0.0;
        _234 = 0.0;
    }
    else
    {
        float _240 = 1.0 / _115;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _240))
        {
            float _266 = fma(_94, cbPerScene._m0[8u].z, fma(_93, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _92));
            float _269 = fma(_94, cbPerScene._m0[9u].z, fma(_93, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _92));
            float _272 = fma(_94, cbPerScene._m0[10u].z, fma(_93, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _92));
            float _279 = (_180 * _115) * cbPerScene._m0[28u].x;
            float _281 = (_181 * _115) * cbPerScene._m0[28u].y;
            float _285 = inversesqrt(dot(vec3(_279, _281, _115), vec3(_279, _281, _115)));
            float _286 = _279 * _285;
            float _287 = _281 * _285;
            float _288 = _285 * _115;
            float _292 = dot(vec3(_286, _287, _288), vec3(_266, _269, _272)) * 2.0;
            float _297 = _286 - (_292 * _266);
            float _298 = _287 - (_292 * _269);
            float _299 = _288 - (_292 * _272);
            float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
            float _306 = _299 * _303;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_306 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _319 = abs(dot(vec3((-0.0) - _286, (-0.0) - _287, (-0.0) - _288), vec3(_266, _269, _272)));
                float _798 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
                float _330 = (((_101 * _101) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _339 = (cbPerScene._m0[29u].x * (1.0 - _101)) + cbPerScene._m0[29u].y;
                float _809 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
                float _348 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_330 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _351 = _306 - cbPerScene._m0[16u].x;
                    float _820 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
                    float _352 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
                    float _353 = _352 * _352;
                    float _355 = (_330 - cbPerScene._m0[22u].x) * 10.0;
                    float _831 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
                    float _357 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
                    float _358 = isnan(_357) ? _353 : (isnan(_353) ? _357 : min(_353, _357));
                    float _362 = (cbPerScene._m0[21u].x - _115) * cbPerScene._m0[21u].z;
                    float _847 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
                    float _363 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
                    float _364 = isnan(_363) ? _358 : (isnan(_358) ? _363 : min(_358, _363));
                    float _365 = (_297 * _303) + _279;
                    float _366 = (_298 * _303) + _281;
                    float _367 = _306 + _115;
                    float _399 = fma(_367, cbPerScene._m0[7u].z, fma(_366, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _365)) + cbPerScene._m0[7u].w;
                    float _403 = ((fma(_367, cbPerScene._m0[4u].z, fma(_366, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _365)) + cbPerScene._m0[4u].w) / _399) - _185;
                    float _404 = ((fma(_367, cbPerScene._m0[5u].z, fma(_366, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _365)) + cbPerScene._m0[5u].w) / _399) - _186;
                    float _411 = cbPerScene._m0[18u].x * _403;
                    float _412 = cbPerScene._m0[18u].y * _404;
                    float _417 = sqrt((_411 * _411) + (_412 * _412)) + 9.9999997473787516355514526367188e-06;
                    float _422 = (_403 / _417) * _348;
                    float _423 = (_404 / _417) * _348;
                    float _424 = (((1.0 / _367) - _240) / _417) * _348;
                    float _452 = abs(float(_422 > 0.0) - _185) / (abs(_422) + 1.0000000116860974230803549289703e-07);
                    float _453 = abs(float(_423 > 0.0) - _186) / (abs(_423) + 1.0000000116860974230803549289703e-07);
                    float _455 = (abs(((_424 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _240) / (abs(_424) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _456 = isnan(_453) ? _452 : (isnan(_452) ? _453 : min(_452, _453));
                    float _457 = isnan(_455) ? _456 : (isnan(_456) ? _455 : min(_456, _455));
                    uint _460 = uint(int(isnan(cbPerScene._m0[23u].y) ? _457 : (isnan(_457) ? cbPerScene._m0[23u].y : min(_457, cbPerScene._m0[23u].y))));
                    float _235;
                    float _465;
                    float _467;
                    float _469;
                    if (int(_460) > int(0u))
                    {
                        float _462 = _424 + _240;
                        float _463 = _423 + _186;
                        float _464 = _422 + _185;
                        float _466;
                        float _468;
                        float _470;
                        float _471;
                        uint _482;
                        float _484;
                        float _486;
                        float _488;
                        float _490;
                        float _492;
                        float _494;
                        float _496;
                        uint _498;
                        float _500;
                        float _502;
                        float _504;
                        float _477 = 0.0;
                        float _478 = 0.0;
                        float _479 = 0.0;
                        float _480 = 0.0;
                        uint _481 = 0u;
                        float _483 = _240;
                        float _485 = _464;
                        float _487 = _463;
                        float _489 = _462;
                        float _491 = _185;
                        float _493 = _186;
                        float _495 = _240;
                        uint _497 = 1u;
                        float _499 = 0.0;
                        float _501 = 0.0;
                        float _503 = 0.0;
                        float _515;
                        float _522;
                        float _523;
                        float _524;
                        float _525;
                        float _526;
                        float _527;
                        uint _528;
                        float _529;
                        bool _536;
                        for (;;)
                        {
                            _515 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _485, cbSceneParam._m0[86u].y * _487), 0.0).x;
                            bool _521 = _481 == (_460 + 4294967295u);
                            _522 = _521 ? _499 : _485;
                            _523 = _521 ? _501 : _487;
                            _524 = _521 ? _503 : _489;
                            _525 = _521 ? _499 : _491;
                            _526 = _521 ? _501 : _493;
                            _527 = _521 ? _503 : _495;
                            _528 = _521 ? 1u : _497;
                            _529 = _521 ? (-1.0) : (_489 - _515);
                            _536 = (_528 != 0u) && ((_529 <= 0.0) && ((_521 ? (-1.0) : (_515 - (_483 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_536)
                            {
                                uint _546 = uint(int(log2(_348) + 0.999000012874603271484375));
                                float _557;
                                float _559;
                                float _561;
                                float _563;
                                float _565;
                                float _567;
                                float _569;
                                if (int(_546) > int(0u))
                                {
                                    uint _668;
                                    float _670;
                                    float _671;
                                    float _672;
                                    float _673;
                                    float _674;
                                    float _675;
                                    float _676;
                                    _668 = 0u;
                                    _670 = _522;
                                    _671 = _523;
                                    _672 = _524;
                                    _673 = _525;
                                    _674 = _526;
                                    _675 = _527;
                                    _676 = _515;
                                    float _558;
                                    float _560;
                                    float _562;
                                    float _564;
                                    float _566;
                                    float _568;
                                    float _570;
                                    for (;;)
                                    {
                                        float _680 = (_673 + _670) * 0.5;
                                        float _681 = (_674 + _671) * 0.5;
                                        float _682 = (_675 + _672) * 0.5;
                                        vec4 _690 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681), 0.0);
                                        float _692 = _690.x;
                                        bool _694 = (_682 - _692) < 0.0;
                                        _558 = _694 ? _680 : _670;
                                        _560 = _694 ? _681 : _671;
                                        _562 = _694 ? _682 : _672;
                                        _564 = _694 ? _673 : _680;
                                        _566 = _694 ? _674 : _681;
                                        _568 = _694 ? _675 : _682;
                                        _570 = _694 ? _692 : _676;
                                        uint _669 = _668 + 1u;
                                        if (_669 == _546)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _668 = _669;
                                            _670 = _558;
                                            _671 = _560;
                                            _672 = _562;
                                            _673 = _564;
                                            _674 = _566;
                                            _675 = _568;
                                            _676 = _570;
                                        }
                                    }
                                    _557 = _558;
                                    _559 = _560;
                                    _561 = _562;
                                    _563 = _564;
                                    _565 = _566;
                                    _567 = _568;
                                    _569 = _570;
                                }
                                else
                                {
                                    _557 = _522;
                                    _559 = _523;
                                    _561 = _524;
                                    _563 = _525;
                                    _565 = _526;
                                    _567 = _527;
                                    _569 = _515;
                                }
                                float _579 = cbPerScene._m0[28u].x * ((_557 * 2.0) + (-1.0));
                                float _580 = cbPerScene._m0[28u].y * (1.0 - (_559 * 2.0));
                                float _613 = fma(_569, cbPerScene._m0[27u].w, fma(_580, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _579) + cbPerScene._m0[27u].z);
                                float _614 = fma(_569, cbPerScene._m0[24u].w, fma(_580, cbPerScene._m0[24u].y, _579 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _613;
                                float _615 = fma(_569, cbPerScene._m0[25u].w, fma(_580, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _579) + cbPerScene._m0[25u].z) / _613;
                                vec4 _624 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _614, cbSceneParam._m0[87u].w * _615), 0.0);
                                float _629 = isnan(_364) ? 1.0 : (isnan(1.0) ? _364 : min(1.0, _364));
                                float _630 = 0.5 - _614;
                                float _631 = 0.5 - _615;
                                float _632 = _630 * 2.0;
                                float _633 = _631 * 2.0;
                                float _634 = _632 * _632;
                                float _635 = _633 * _633;
                                float _883 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
                                float _894 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
                                float _644 = inversesqrt(dot(vec2(_422, _423), vec2(_422, _423)));
                                float _650 = inversesqrt(dot(vec2(_632, _633), vec2(_632, _633)));
                                float _656 = dot(vec2((_630 * (-2.0)) * _650, (_631 * (-2.0)) * _650), vec2(_644 * _422, _644 * _423));
                                float _905 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
                                float _663 = ((1.0 - (isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0)))) * (1.0 - (isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0))))) * (4.0 - ((isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0))) * 2.0));
                                float _916 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
                                float _664 = isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0));
                                float _665 = _664 * _664;
                                frontier_phi_17_pred = _503;
                                frontier_phi_17_pred_1 = _501;
                                frontier_phi_17_pred_2 = _499;
                                frontier_phi_17_pred_3 = _528;
                                frontier_phi_17_pred_4 = _567;
                                frontier_phi_17_pred_5 = _565;
                                frontier_phi_17_pred_6 = _563;
                                frontier_phi_17_pred_7 = _561;
                                frontier_phi_17_pred_8 = _559;
                                frontier_phi_17_pred_9 = _557;
                                frontier_phi_17_pred_10 = _483;
                                frontier_phi_17_pred_11 = isnan(_665) ? _629 : (isnan(_629) ? _665 : min(_629, _665));
                                frontier_phi_17_pred_12 = _624.z;
                                frontier_phi_17_pred_13 = _624.y;
                                frontier_phi_17_pred_14 = _624.x;
                                frontier_phi_17_pred_15 = _460;
                            }
                            else
                            {
                                bool _548 = _529 > 0.0;
                                frontier_phi_17_pred = _548 ? _524 : _503;
                                frontier_phi_17_pred_1 = _548 ? _523 : _501;
                                frontier_phi_17_pred_2 = _548 ? _522 : _499;
                                frontier_phi_17_pred_3 = uint(_548);
                                frontier_phi_17_pred_4 = _524;
                                frontier_phi_17_pred_5 = _523;
                                frontier_phi_17_pred_6 = _522;
                                frontier_phi_17_pred_7 = _524 + _424;
                                frontier_phi_17_pred_8 = _523 + _423;
                                frontier_phi_17_pred_9 = _522 + _422;
                                frontier_phi_17_pred_10 = _515;
                                frontier_phi_17_pred_11 = _480;
                                frontier_phi_17_pred_12 = _479;
                                frontier_phi_17_pred_13 = _478;
                                frontier_phi_17_pred_14 = _477;
                                frontier_phi_17_pred_15 = _481 + 1u;
                            }
                            _504 = frontier_phi_17_pred;
                            _502 = frontier_phi_17_pred_1;
                            _500 = frontier_phi_17_pred_2;
                            _498 = frontier_phi_17_pred_3;
                            _496 = frontier_phi_17_pred_4;
                            _494 = frontier_phi_17_pred_5;
                            _492 = frontier_phi_17_pred_6;
                            _490 = frontier_phi_17_pred_7;
                            _488 = frontier_phi_17_pred_8;
                            _486 = frontier_phi_17_pred_9;
                            _484 = frontier_phi_17_pred_10;
                            _471 = frontier_phi_17_pred_11;
                            _470 = frontier_phi_17_pred_12;
                            _468 = frontier_phi_17_pred_13;
                            _466 = frontier_phi_17_pred_14;
                            _482 = frontier_phi_17_pred_15;
                            if (int(_482) < int(_460))
                            {
                                _477 = _466;
                                _478 = _468;
                                _479 = _470;
                                _480 = _471;
                                _481 = _482;
                                _483 = _484;
                                _485 = _486;
                                _487 = _488;
                                _489 = _490;
                                _491 = _492;
                                _493 = _494;
                                _495 = _496;
                                _497 = _498;
                                _499 = _500;
                                _501 = _502;
                                _503 = _504;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _465 = _466;
                        _467 = _468;
                        _469 = _470;
                        _235 = _471;
                    }
                    else
                    {
                        _465 = 0.0;
                        _467 = 0.0;
                        _469 = 0.0;
                        _235 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_465) || isnan(_467)) || isnan(_469))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_235 * _465) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _235;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_235 * _469) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_235 * _467) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _228 = frontier_phi_3_4_ladder;
        _230 = frontier_phi_3_4_ladder_3;
        _232 = frontier_phi_3_4_ladder_2;
        _234 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _228;
    SV_Target.y = _230;
    SV_Target.z = _232;
    SV_Target.w = _234;
    discard_exit();
}


