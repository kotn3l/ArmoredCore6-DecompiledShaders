#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1171;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _208 = _207 * _200;
    float _209 = _207 * _201;
    float _210 = _207 * _202;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = exp2(log2(abs(_215)) * 2.2000000476837158203125);
    float _236 = exp2(log2(abs(_216)) * 2.2000000476837158203125);
    float _237 = exp2(log2(abs(_217)) * 2.2000000476837158203125);
    float _3633 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _239 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3655 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _241 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _255 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _256 = _255 * cbMtdParam._m0[16u].x;
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _295 = _286 / cbMtdParam._m0[13u].z;
    float _296 = _290 / cbMtdParam._m0[13u].z;
    float _297 = _294 / cbMtdParam._m0[13u].z;
    float _311 = (((_296 + (_255 * cbMtdParam._m0[16u].y)) * cbMtdParam._m0[17u].y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    vec4 _314 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_297 + _256) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _311));
    vec4 _329 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_295 + _256) * cbMtdParam._m0[17u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _311));
    float _379 = exp2(log2(texture(sampler2D(M_Waterfall_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[15u].x * _255) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[15u].y * _255) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x) * cbMtdParam._m0[12u].y);
    float _387 = (cbMtdParam._m0[17u].z * _255) + TEXCOORD_1.x;
    float _388 = (cbMtdParam._m0[17u].w * _255) + TEXCOORD_1.y;
    vec4 _401 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_387 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_388 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _407 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].y * cbMtdParam._m0[11u].w);
    float _414 = ((_401.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _416 = (-0.0) - (cbMtdParam._m0[13u].x * ((_401.x * 0.5) + (-0.25)));
    float _418 = fract(_407);
    float _420 = fract(_407 + 0.5);
    float _432 = abs((_418 * 2.0) + (-1.0));
    vec4 _441 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_418 * _416) + _387) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_414 * _418) + _388) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    vec4 _446 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_420 * _416) + _387) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_414 * _420) + _388) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _471 = (((_329.x * _241) + (_314.x * _239)) + cbMtdParam._m0[9u].x) + (((cbMtdParam._m0[10u].x * TEXCOORD_4.x) * _379) * (((_446.x - _443) * _432) + _443));
    float _474 = (((_329.y * _241) + (_314.y * _239)) + cbMtdParam._m0[9u].y) + (((cbMtdParam._m0[10u].y * TEXCOORD_4.x) * _379) * (((_446.y - _444) * _432) + _444));
    float _477 = (((_329.z * _241) + (_314.z * _239)) + cbMtdParam._m0[9u].z) + (((cbMtdParam._m0[10u].z * TEXCOORD_4.x) * _379) * (((_446.z - _445) * _432) + _445));
    float _481 = (TEXCOORD_4.w * 2.0) - (cbMtdParam._m0[12u].z * ((_329.w * _241) + (_314.w * _239)));
    vec4 _505 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].z * _255) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].w * _255) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _530 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _255) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].y * _255) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _536 = (_530.x * 2.0) + (-1.0);
    float _537 = (_530.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3666 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))));
    float _550 = (cbMtdParam._m0[15u].z * _255) + TEXCOORD_1.x;
    float _551 = (cbMtdParam._m0[15u].w * _255) + TEXCOORD_1.y;
    vec4 _556 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_3, SS_WrapLinear), vec2((_550 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_551 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _564 = ((_556.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].x;
    float _566 = (-0.0) - (cbMtdParam._m0[13u].x * ((_556.x * 0.5) + (-0.25)));
    vec4 _583 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_418 * _566) + _550) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_564 * _418) + _551) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _585 = _583.x;
    float _586 = _583.y;
    vec4 _587 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_0, SS_BumpMap), vec2((((_420 * _566) + _550) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_564 * _420) + _551) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _605 = cbMtdParam._m0[16u].z * _255;
    float _619 = (((cbMtdParam._m0[16u].w * _255) + _296) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w;
    vec4 _621 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2(((_605 + _295) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, _619));
    vec4 _630 = texture(sampler2D(M_Waterfall_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * (_605 + _297)) + cbTextureTilingScale._m0[5u].z, _619));
    float _636 = (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.502016007900238037109375;
    float _649 = ((((((_505.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _536) + ((((((_587.x - _585) * _432) + _585) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_621.x * _241) + _636) + (_630.x * _239)) * 5.19999980926513671875);
    float _653 = ((((((_505.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z) + (-2.599999904632568359375)) + _537) + ((((((_587.y - _586) * _432) + _586) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w)) + ((((_621.y * _241) + _636) + (_630.y * _239)) * 5.19999980926513671875);
    float _659 = fma(_543, _215, fma(_653, _221 * TANGENT.x, _649 * _208));
    float _662 = fma(_543, _216, fma(_653, _221 * TANGENT.y, _649 * _209));
    float _665 = fma(_543, _217, fma(_653, _221 * TANGENT.z, _649 * _210));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3677 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3688 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _674 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3710 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3721 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _713 = cbSceneParam._m0[71u].x - (_286 / _703);
    float _714 = cbSceneParam._m0[71u].y - (_290 / _703);
    float _715 = cbSceneParam._m0[71u].z - (_294 / _703);
    float _719 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
    float _720 = _713 * _719;
    float _721 = _714 * _719;
    float _722 = _715 * _719;
    float _728 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _729 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _752 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _755 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _768 = uint(roundEven(NORMAL.w)) * 13u;
    uint _770 = (_768 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _776 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * cbInstanceData._m0[_770].x;
    float _777 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_770].y;
    float _778 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_770].z;
    float _3732 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _728, cbSceneParam._m0[86u].y * _729));
    float _793 = _790.x * TEXCOORD_1.z;
    float _794 = dot(vec3(_670, _671, _672), vec3(_720, _721, _722));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _670) - _720;
    float _802 = (_797 * _671) - _721;
    float _803 = (_797 * _672) - _722;
    float _807 = abs(dot(vec3(_720, _721, _722), vec3(_670, _671, _672)));
    float _3765 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _816 = 10.0 / (_693 + 10.0);
    float _817 = sqrt(_674);
    float _829 = exp2((_817 * 5.0) * log2(1.0 - (_808 * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _900 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _904 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _928 = _861 + _670;
        float _929 = _865 + _671;
        float _930 = _869 + _672;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _896;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _900;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _904;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_670, _671, _672), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3813 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_670, _671, _672), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3846 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_670, _671, _672), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3879 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1211 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1215 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1219 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1242 = _861 + _670;
        float _1243 = _865 + _671;
        float _1244 = _869 + _672;
        float _1254 = fma(_1244, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242)) - _1211;
        float _1255 = fma(_1244, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242)) - _1215;
        float _1256 = fma(_1244, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242)) - _1219;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1211 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1215 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[35u].z) + ((((((_1219 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1310 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1277.x + (-0.5));
        float _1312 = _1310 * (_1277.y + (-0.5));
        float _1313 = _1310 * (_1277.z + (-0.5));
        float _1320 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1284.x + (-0.5));
        float _1322 = _1320 * (_1284.y + (-0.5));
        float _1323 = _1320 * (_1284.z + (-0.5));
        float _1330 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1291.x + (-0.5));
        float _1332 = _1330 * (_1291.y + (-0.5));
        float _1333 = _1330 * (_1291.z + (-0.5));
        float _1340 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1298.x + (-0.5));
        float _1342 = _1340 * (_1298.y + (-0.5));
        float _1343 = _1340 * (_1298.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_670, _671, _672), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3942 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1374 + 1.0))) + _1379) * _1344;
        float _1389 = _1312 * 0.5;
        float _1390 = _1322 * 0.5;
        float _1391 = _1332 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_670, _671, _672), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3975 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1416 + 1.0))) + _1421) * _1345;
        float _1431 = _1313 * 0.5;
        float _1432 = _1323 * 0.5;
        float _1433 = _1333 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_670, _671, _672), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4008 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1458 + 1.0))) + _1463) * _1346;
        _1480 = _1313;
        _1481 = _1312;
        _1482 = _1311;
        _1483 = _1323;
        _1484 = _1322;
        _1485 = _1321;
        _1486 = _1333;
        _1487 = _1332;
        _1488 = _1331;
        _1489 = _1346;
        _1490 = _1345;
        _1491 = _1344;
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1171;
        _1481 = _1171;
        _1482 = _1171;
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1183)) + _1183;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1184)) + _1184;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1185)) + _1185;
    float _1527 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1504));
    float _1548 = _801 * 0.5;
    float _1549 = _802 * 0.5;
    float _1550 = _803 * 0.5;
    float _1551 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1554 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1557 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1564 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1568 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1572 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1579 = dot(vec4(cbModelParam._m0[39u]), vec4(_1548, _1549, _1550, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1548, _1549, _1550, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1678 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1681 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1709 = frontier_phi_14_12_ladder;
        }
        float _1963;
        if (_1678 > 0.0)
        {
            _1963 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1963 = frontier_phi_23_19_ladder;
        }
        float _2206;
        if (_1681 > 0.0)
        {
            _2206 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2206 = frontier_phi_35_30_ladder;
        }
        float _2208 = isnan(_1963) ? _1709 : (isnan(_1709) ? _1963 : min(_1709, _1963));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1675) + _1664;
        float _2214 = (_2209 * _1678) + _1668;
        float _2215 = (_2209 * _1681) + _1672;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_13_35_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_13_35_ladder_2;
        _1699 = frontier_phi_13_35_ladder_1;
        _1701 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1617);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1775 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1778 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1968;
        if (_1772 > 0.0)
        {
            _1968 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1968 = frontier_phi_25_21_ladder;
        }
        float _2233;
        if (_1775 > 0.0)
        {
            _2233 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2233 = frontier_phi_37_32_ladder;
        }
        float _2438;
        if (_1778 > 0.0)
        {
            _2438 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2438 = frontier_phi_46_43_ladder;
        }
        float _2440 = isnan(_2233) ? _1968 : (isnan(_1968) ? _2233 : min(_1968, _2233));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1772) + _1761;
        float _2446 = (_2441 * _1775) + _1765;
        float _2447 = (_2441 * _1778) + _1769;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_22_46_ladder = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2716.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2716.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_22_46_ladder_2;
        _1799 = frontier_phi_22_46_ladder_1;
        _1801 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1706);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1813 = ((((1.0 - _829) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _817)) * _793;
    float _1814 = _1813 * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1815 = _1813 * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1816 = _1813 * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    float _1836 = _728 / cbSceneParam._m0[86u].x;
    float _1844 = (cbSceneParam._m0[88u].y * (1.0 - _674)) + cbSceneParam._m0[88u].z;
    float _4134 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 5.0;
    float _1851 = (_816 * cbMtdParam._m0[12u].x) * dot(vec3(_670, _671, _672), vec3(1.0, 0.0, 0.0));
    vec4 _1861 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1851 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1851 + _1836) * cbSceneParam._m0[86u].x, _729), _1846).w) + _1836) * cbSceneParam._m0[86u].x, _729), _1846);
    float _1877 = 1.0 - _1861.w;
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_768 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _793 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1922 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1926 = _1889 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_670, _671, _672));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_670, _671, _672));
    float _4155 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4166 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1906].x * _1912) * _1947) + ((cbLight._m0[_1916].x * _1922) * _1945);
    float _1955 = ((_1912 * cbLight._m0[_1906].y) * _1947) + ((_1922 * cbLight._m0[_1916].y) * _1945);
    float _1956 = ((_1912 * cbLight._m0[_1906].z) * _1947) + ((_1922 * cbLight._m0[_1916].z) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1889 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4177 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2000 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2177 = _1889 + 7u;
        float _2193 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2194 = _2193 * _2193;
        float _4193 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2196 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2018 = (((cbLight._m0[_2177].x * 0.3183098733425140380859375) * _2195) * _2196) + _1973;
        _2020 = (((cbLight._m0[_2177].y * 0.3183098733425140380859375) * _2195) * _2196) + _1975;
        _2022 = (((cbLight._m0[_2177].z * 0.3183098733425140380859375) * _2195) * _2196) + _1977;
    }
    uint _2025 = _1889 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _674) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1889].x + _720;
    float _2041 = cbLight._m0[_1889].y + _721;
    float _2042 = cbLight._m0[_1889].z + _722;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1889].xyz));
    float _4209 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2054 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2055 = dot(vec3(_670, _671, _672), vec3(_2047, _2048, _2049));
    float _4231 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2047, _2048, _2049));
    float _4242 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4253 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2103 = _1889 + 9u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _674) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1926].x + _720;
    float _2117 = cbLight._m0[_1926].y + _721;
    float _2118 = cbLight._m0[_1926].z + _722;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1926].xyz));
    float _4264 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2130 = dot(vec3(_670, _671, _672), vec3(_2123, _2124, _2125));
    float _4275 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2123, _2124, _2125));
    float _4286 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2115 * _2115;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2152 = 1.0 - _2115;
    float _2162 = (0.5 / (((_2054 * ((_2129 * _2152) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2152) + _2115) * _2129))) * _2129;
    float _4297 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    float _2174 = (((_2151 * cbLight._m0[_2103].x) * _2164) * _1912) + (((_2078 * cbLight._m0[_2025].x) * _2092) * _1922);
    float _2175 = (((_2151 * cbLight._m0[_2103].y) * _2164) * _1912) + (((_2078 * cbLight._m0[_2025].y) * _2092) * _1922);
    float _2176 = (((_2151 * cbLight._m0[_2103].z) * _2164) * _1912) + (((_2078 * cbLight._m0[_2025].z) * _2092) * _1922);
    float _2238;
    float _2240;
    float _2242;
    if (_1962)
    {
        _2238 = _2174;
        _2240 = _2175;
        _2242 = _2176;
    }
    else
    {
        uint _2244 = _1889 + 2u;
        uint _2248 = _1889 + 10u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _674) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _720;
        float _2265 = cbLight._m0[_2244].y + _721;
        float _2266 = cbLight._m0[_2244].z + _722;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2244].xyz));
        float _4308 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2278 = dot(vec3(_670, _671, _672), vec3(_2271, _2272, _2273));
        float _4319 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4330 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_2054 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2300) + _2263) * _2277))) * _2277;
        float _4341 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2238 = (((_2299 * cbLight._m0[_2248].x) * _2312) * _2313) + _2174;
        _2240 = (((_2299 * cbLight._m0[_2248].y) * _2312) * _2313) + _2175;
        _2242 = (((_2299 * cbLight._m0[_2248].z) * _2312) * _2313) + _2176;
    }
    float _2348;
    float _2350;
    float _2352;
    if (_1980)
    {
        _2348 = _2238;
        _2350 = _2240;
        _2352 = _2242;
    }
    else
    {
        uint _2359 = _1889 + 3u;
        uint _2363 = _1889 + 11u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _674) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _720;
        float _2380 = cbLight._m0[_2359].y + _721;
        float _2381 = cbLight._m0[_2359].z + _722;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2359].xyz));
        float _4357 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2393 = dot(vec3(_670, _671, _672), vec3(_2386, _2387, _2388));
        float _4368 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4379 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2415 = 1.0 - _2378;
        float _2425 = (0.5 / (((_2054 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2415) + _2378) * _2392))) * _2392;
        float _4390 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2348 = (((_2414 * cbLight._m0[_2363].x) * _2427) * _2428) + _2238;
        _2350 = (((_2414 * cbLight._m0[_2363].y) * _2427) * _2428) + _2240;
        _2352 = (((_2414 * cbLight._m0[_2363].z) * _2427) * _2428) + _2242;
    }
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_1887.y == 0u)
    {
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2503;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2503;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2503;
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _729) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _728) / _2519)));
        float _2540 = (log2(_2506 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
        }
        else
        {
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            uint _2903 = 0u;
            uint _2912;
            bool _2913;
            for (;;)
            {
                _2912 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                _2913 = _2912 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2913)
                {
                    frontier_phi_61_pred = _2897;
                    frontier_phi_61_pred_1 = _2902;
                    frontier_phi_61_pred_2 = _2901;
                    frontier_phi_61_pred_3 = _2900;
                    frontier_phi_61_pred_4 = _2899;
                    frontier_phi_61_pred_5 = _2898;
                }
                else
                {
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    uint _3027;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2912;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3031 = uint(findLSB(_3027)) + (_2903 << 5u);
                        uint _3028 = (_3027 + 4294967295u) & _3027;
                        uint _3033 = _3031 * 48u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3053 = (_3031 * 48u) + 4u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3072 = (_3031 * 48u) + 8u;
                        vec3 _3083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x));
                        float _3087 = _3047.x - _2504;
                        float _3088 = _3047.y - _2505;
                        float _3089 = _3047.z - _2506;
                        float _3090 = dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089));
                        float _3093 = inversesqrt(_3090);
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3097 = dot(vec3(_749, _752, _755), vec3(_3094, _3095, _3096));
                        float _3102 = 1.0 - (_3090 * _3047.w);
                        float _4416 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3104 = sqrt(_3090) * _3066.w;
                        float _3107 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3097) + _3108;
                        float _3114 = _3104 * _3104;
                        float _3118 = ((isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))) * _3103) / ((_3114 * 0.699999988079071044921875) + 1.0);
                        float _3122 = (-0.0) - _2504;
                        float _3123 = (-0.0) - _2505;
                        float _3124 = (-0.0) - _2506;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3139 = exp2(log2(1.0 / ((_3114 * 3.5) + 5.0)) * 0.25);
                        float _3140 = 1.0 - _817;
                        float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                        float _3148 = _3147 * _3147;
                        float _3149 = _3148 * _3148;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3160 = dot(vec3(_749, _752, _755), vec3(_3129, _3130, _3131));
                        float _4432 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3164 = dot(vec3(_749, _752, _755), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                        float _4443 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                        float _3172 = _3107 * _3148;
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3097) + _3173;
                        float _4454 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3178 = 1.0 - _3148;
                        float _3188 = (0.5 / (((_3177 * ((_3163 * _3178) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3148) * _3163))) * _3177;
                        float _4465 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3199 = (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3171 * _3171) * ((_3114 * 2.1991131305694580078125) + 3.141590118408203125))) * _3103;
                        _2956 = (_3118 * _3066.x) + _3024;
                        _2957 = (_3118 * _3066.y) + _3025;
                        _2958 = (_3118 * _3066.z) + _3026;
                        _2953 = (_3199 * _3083.x) + _3021;
                        _2954 = (_3199 * _3083.y) + _3022;
                        _2955 = (_3199 * _3083.z) + _3023;
                        if (_3028 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _3028;
                        }
                    }
                    frontier_phi_61_pred = _2953;
                    frontier_phi_61_pred_1 = _2958;
                    frontier_phi_61_pred_2 = _2957;
                    frontier_phi_61_pred_3 = _2956;
                    frontier_phi_61_pred_4 = _2955;
                    frontier_phi_61_pred_5 = _2954;
                }
                _2722 = frontier_phi_61_pred;
                _2732 = frontier_phi_61_pred_1;
                _2730 = frontier_phi_61_pred_2;
                _2728 = frontier_phi_61_pred_3;
                _2726 = frontier_phi_61_pred_4;
                _2724 = frontier_phi_61_pred_5;
                uint _2904 = _2903 + 1u;
                if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2897 = _2722;
                    _2898 = _2724;
                    _2899 = _2726;
                    _2900 = _2728;
                    _2901 = _2730;
                    _2902 = _2732;
                    _2903 = _2904;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
        }
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.z;
        uint _2738 = (_2736 >> 8u) & 15u;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        if (((4294967295u << _2738) & _2550) == 0u)
        {
            _2865 = _2721;
            _2867 = _2723;
            _2869 = _2725;
            _2871 = _2727;
            _2873 = _2729;
            _2875 = _2731;
        }
        else
        {
            float _2890 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
            float _2891 = _2890 * _2504;
            float _2892 = _2890 * _2505;
            float _2893 = _2890 * _2506;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2738 < ((_2736 >> 12u) & 15u))
            {
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _3004 = _2721;
                float _3005 = _2723;
                float _3006 = _2725;
                float _3007 = _2727;
                float _3008 = _2729;
                float _3009 = _2731;
                uint _3010 = _2738;
                uint _3019;
                bool _3020;
                for (;;)
                {
                    _3019 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                    _3020 = _3019 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3020)
                    {
                        frontier_phi_67_pred = _3007;
                        frontier_phi_67_pred_1 = _3008;
                        frontier_phi_67_pred_2 = _3009;
                        frontier_phi_67_pred_3 = _3006;
                        frontier_phi_67_pred_4 = _3005;
                        frontier_phi_67_pred_5 = _3004;
                    }
                    else
                    {
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        uint _3223 = _3019;
                        uint _3224;
                        vec4 _3249;
                        float _3250;
                        vec4 _3265;
                        vec3 _3277;
                        vec4 _3292;
                        vec4 _3308;
                        float _3355;
                        bool _3356;
                        for (;;)
                        {
                            uint _3234 = ((_3010 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3223));
                            _3224 = (_3223 + 4294967295u) & _3223;
                            uint _3236 = _3234 * 40u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3250 = _3249.w;
                            uint _3252 = (_3234 * 40u) + 4u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3234 * 40u) + 8u;
                            _3277 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x));
                            uint _3279 = (_3234 * 40u) + 16u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3295 = (_3234 * 40u) + 20u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3311 = (_3234 * 40u) + 24u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3330 = (_3234 * 40u) + 28u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3355 = fma(_2506, _3343.z, fma(_2505, _3343.y, _3343.x * _2504)) + _3343.w;
                            _3356 = !((fma(_2506, _3324.z, fma(_2505, _3324.y, _3324.x * _2504)) + _3324.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3356)
                            {
                                float _3383 = _3249.x - _2504;
                                float _3384 = _3249.y - _2505;
                                float _3385 = _3249.z - _2506;
                                float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                                float _3389 = inversesqrt(_3386);
                                float _3390 = _3389 * _3383;
                                float _3391 = _3389 * _3384;
                                float _3392 = _3389 * _3385;
                                float _3396 = 1.0 - (_3386 / (_3250 * _3250));
                                float _4476 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3401 = sqrt(_3386) * _3265.w;
                                float _3403 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                                float _3404 = _3403 * _3403;
                                float _3407 = ((1.0 - _3404) * dot(vec3(_3390, _3391, _3392), vec3(_749, _752, _755))) + _3404;
                                float _3410 = _3401 * _3401;
                                float _3414 = (fma(_2506, _3292.z, fma(_2505, _3292.y, _3292.x * _2504)) + _3292.w) / _3355;
                                float _3415 = (fma(_2506, _3308.z, fma(_2505, _3308.y, _3308.x * _2504)) + _3308.w) / _3355;
                                float _3419 = 1.0 - dot(vec2(_3414, _3415), vec2(_3414, _3415));
                                float _4492 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3421 = _3420 * (((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3397) / ((_3410 * 0.699999988079071044921875) + 1.0));
                                float _3433 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                                float _3434 = 1.0 - _817;
                                float _3441 = sqrt(1.0 - ((1.0 - (_3434 * _3434)) * (1.0 - (_3433 * _3433))));
                                float _3442 = _3441 * _3441;
                                float _3443 = _3442 * _3442;
                                float _3444 = _3390 - _2891;
                                float _3445 = _3391 - _2892;
                                float _3446 = _3392 - _2893;
                                float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                                float _3454 = dot(vec3(_749, _752, _755), vec3((-0.0) - _2891, (-0.0) - _2892, (-0.0) - _2893));
                                float _4503 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3458 = dot(vec3(_749, _752, _755), vec3(_3450 * _3444, _3450 * _3445, _3450 * _3446));
                                float _4514 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3465 = ((_3461 * _3461) * (_3443 + (-1.0))) + 1.0;
                                float _3466 = _3403 * _3442;
                                float _3467 = _3466 * _3466;
                                float _3473 = ((1.0 - _3467) * dot(vec3(_749, _752, _755), vec3(_3390, _3391, _3392))) + _3467;
                                float _4525 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3475 = 1.0 - _3442;
                                float _3485 = (0.5 / (((_3474 * ((_3457 * _3475) + _3442)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3442) * _3457))) * _3474;
                                float _4536 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3495 = (_3420 * _3397) * (((_3443 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3465 * _3465) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3495 * _3277.x;
                                frontier_phi_73_pred_1 = _3495 * _3277.y;
                                frontier_phi_73_pred_2 = _3421 * _3265.z;
                                frontier_phi_73_pred_3 = _3421 * _3265.y;
                                frontier_phi_73_pred_4 = _3421 * _3265.x;
                                frontier_phi_73_pred_5 = _3495 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_73_pred;
                            _3500 = frontier_phi_73_pred_1;
                            _3504 = frontier_phi_73_pred_2;
                            _3503 = frontier_phi_73_pred_3;
                            _3502 = frontier_phi_73_pred_4;
                            _3501 = frontier_phi_73_pred_5;
                            _3207 = _3502 + _3220;
                            _3208 = _3503 + _3221;
                            _3209 = _3504 + _3222;
                            _3204 = _3499 + _3217;
                            _3205 = _3500 + _3218;
                            _3206 = _3501 + _3219;
                            if (_3224 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3224;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3207;
                        frontier_phi_67_pred_1 = _3208;
                        frontier_phi_67_pred_2 = _3209;
                        frontier_phi_67_pred_3 = _3206;
                        frontier_phi_67_pred_4 = _3205;
                        frontier_phi_67_pred_5 = _3204;
                    }
                    _2872 = frontier_phi_67_pred;
                    _2874 = frontier_phi_67_pred_1;
                    _2876 = frontier_phi_67_pred_2;
                    _2870 = frontier_phi_67_pred_3;
                    _2868 = frontier_phi_67_pred_4;
                    _2866 = frontier_phi_67_pred_5;
                    uint _3011 = _3010 + 1u;
                    if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3004 = _2866;
                        _3005 = _2868;
                        _3006 = _2870;
                        _3007 = _2872;
                        _3008 = _2874;
                        _3009 = _2876;
                        _3010 = _3011;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2874;
                frontier_phi_55_56_ladder_1 = _2876;
                frontier_phi_55_56_ladder_2 = _2872;
                frontier_phi_55_56_ladder_3 = _2870;
                frontier_phi_55_56_ladder_4 = _2868;
                frontier_phi_55_56_ladder_5 = _2866;
            }
            else
            {
                frontier_phi_55_56_ladder = _2729;
                frontier_phi_55_56_ladder_1 = _2731;
                frontier_phi_55_56_ladder_2 = _2727;
                frontier_phi_55_56_ladder_3 = _2725;
                frontier_phi_55_56_ladder_4 = _2723;
                frontier_phi_55_56_ladder_5 = _2721;
            }
            _2865 = frontier_phi_55_56_ladder_5;
            _2867 = frontier_phi_55_56_ladder_4;
            _2869 = frontier_phi_55_56_ladder_3;
            _2871 = frontier_phi_55_56_ladder_2;
            _2873 = frontier_phi_55_56_ladder;
            _2875 = frontier_phi_55_56_ladder_1;
        }
        float _2880 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2563 = (_2880 * _2871) + _2018;
        _2565 = (_2880 * _2873) + _2020;
        _2567 = (_2880 * _2875) + _2022;
        _2569 = ((_2865 * 0.039999999105930328369140625) * _2880) + _2348;
        _2571 = ((_2867 * 0.039999999105930328369140625) * _2880) + _2350;
        _2573 = ((_2869 * 0.039999999105930328369140625) * _2880) + _2352;
    }
    else
    {
        _2563 = _2018;
        _2565 = _2020;
        _2567 = _2022;
        _2569 = _2348;
        _2571 = _2350;
        _2573 = _2352;
    }
    float _2587 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2588 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2589 = cbSceneParam._m0[86u].x * (_1836 + ((_816 * cbMtdParam._m0[11u].y) * dot(vec3(_670, _671, _672), vec3(_208, _209, _210))));
    float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
    float _2591 = isnan(_2588) ? _729 : (isnan(_729) ? _2588 : min(_729, _2588));
    vec4 _2593 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2590, _2591), 0.0);
    float _2595 = _2593.x;
    bool _2615 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2595)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2595))) > _693;
    vec4 _2619 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2615 ? _2590 : _728, _2615 ? _2591 : _729));
    float _4562 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4573 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4584 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2643 = 0.959999978542327880859375 - (exp2(log2(1.0 - _808) * 5.0) * 0.959999978542327880859375);
    float _2645 = (_2619.x * _2643) * cbSceneParam._m0[72u].w;
    float _2647 = (_2619.y * _2643) * cbSceneParam._m0[72u].w;
    float _2649 = (_2619.z * _2643) * cbSceneParam._m0[72u].w;
    float _2671 = _728 / cbSceneParam._m0[86u].x;
    float _2672 = _729 / cbSceneParam._m0[86u].y;
    vec4 _2686 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2671, _2672, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2688 = _2686.x;
    float _2689 = _2686.y;
    float _2690 = _2686.z;
    float _2691 = _2686.w;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2746 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2747 = _2746 / _693;
        float _2758 = _2747 * _713;
        float _2759 = _714 * _2747;
        float _2760 = (-0.0) - _2759;
        float _2761 = _2747 * _715;
        float _2763 = (cbSceneParam._m0[77u].w * _2760) / _2746;
        float _2764 = _2763 + cbSceneParam._m0[79u].w;
        float _2765 = cbSceneParam._m0[79u].w - _2759;
        float _2771 = sqrt(((_2758 * _2758) + (_2759 * _2759)) + (_2761 * _2761));
        float _2774 = (1.0 - (cbSceneParam._m0[77u].w / _2746)) * _2771;
        float _2779 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2781 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2760 - _2763) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2764 > 0.0) ? exp2(_2779 * _2764) : (2.0 - exp2(_2781 * _2764))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2774;
        }
        else
        {
            float _2926 = 1.0 / cbSceneParam._m0[80u].x;
            float _2927 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : max(_2764, _2765));
            float _2928 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : min(_2764, _2765));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            _2966 = ((abs(_2771 / _2760) * cbSceneParam._m0[80u].y) * ((((_2937 - _2938) * 2.0) - ((exp2(_2779 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0)))) - exp2(_2779 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))))) * _2926)) - ((exp2(_2781 * _2937) - exp2(_2781 * _2938)) * _2926))) + (_2774 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2671, _2672, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2691);
        _2783 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2688;
        _2785 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2689;
        _2787 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2690;
        _2789 = _2977 * _2691;
    }
    else
    {
        _2783 = _2688;
        _2785 = _2689;
        _2787 = _2690;
        _2789 = _2691;
    }
    bool _2801 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2802 = log2(_2789);
    float _2809 = exp2(_2802 * cbSceneParam._m0[78u].x) * ((_2645 + (((((_1813 * _1861.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1606) * _1877)) + _2569) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2563 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _793))) - _2645) * 0.5));
    float _2810 = exp2(_2802 * cbSceneParam._m0[78u].y) * ((_2647 + (((((_1813 * _1861.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1606) * _1877)) + _2571) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2565 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _793))) - _2647) * 0.5));
    float _2811 = exp2(_2802 * cbSceneParam._m0[78u].z) * ((_2649 + (((((_1813 * _1861.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1606) * _1877)) + _2573) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2567 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _793))) - _2649) * 0.5));
    vec4 _2819 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_728, _729));
    float _2821 = _2819.x;
    float _2842 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2821)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2821))) - _693) * cbMtdParam._m0[12u].w;
    float _4635 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2844 = (cbInstanceData._m0[_768 + 6u].w * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)));
    float _2853 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2853 * (_2801 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.y = _2853 * (_2801 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2785)));
    SV_Target.z = _2853 * (_2801 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.w = _2844;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2844;
}


