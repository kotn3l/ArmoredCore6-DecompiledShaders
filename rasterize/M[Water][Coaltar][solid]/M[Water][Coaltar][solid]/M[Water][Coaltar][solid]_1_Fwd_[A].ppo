#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1067;
float _3517;
float _3518;
float _3519;
float _3520;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _285 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _286 = _285 * _274;
    float _287 = _285 * _275;
    float _288 = _285 * _276;
    float _296 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _297 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _311 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_296 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_297 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _319 = (_311.x * 2.0) + (-1.0);
    float _321 = (_311.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3529 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))));
    float _331 = fma(_328, _211, fma(_321, _218, _319 * _204));
    float _334 = fma(_328, _212, fma(_321, _219, _319 * _205));
    float _337 = fma(_328, _213, fma(_321, _220, _319 * _206));
    float _341 = inversesqrt(dot(vec3(_331, _334, _337), vec3(_331, _334, _337)));
    float _350 = (dot(vec4(_286, _287, _288, 0.0), vec4(_341 * _331, _341 * _334, _341 * _337, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _363 = dot(vec3(_274, _275, _276), vec3(_204, _205, _206));
    float _366 = dot(vec3(_274, _275, _276), vec3(_218, _219, _220));
    float _369 = dot(vec3(_274, _275, _276), vec3(_211, _212, _213));
    float _375 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _396 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _416 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_363 * cbMtdParam._m0[12u].x) * _375) * _396) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_366 * cbMtdParam._m0[12u].x) * _375) * _396) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _439 = dot(vec4(_286, _287, _288, 0.0), vec4(_211, _212, _213, 0.0)) - cbMtdParam._m0[12u].w;
    float _3540 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _446 = exp2(log2(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _461 = (((((sin(_350) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _416.x) * cbMtdParam._m0[9u].x) * ((_446 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _470 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _416.y) * cbMtdParam._m0[9u].y) * ((_446 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_350 * 0.85000002384185791015625) + 1.0);
    float _479 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _416.z) * cbMtdParam._m0[9u].z) * ((_446 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_350 * 0.699999988079071044921875) + 1.0);
    vec4 _492 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    float _499 = (_492.x * 2.0) + (-1.0);
    float _500 = (_492.y * 2.0) + (-1.0);
    float _501 = dot(vec2(_499, _500), vec2(_499, _500));
    float _3556 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _506 = sqrt(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))));
    float _508 = cbMtdParam._m0[14u].w + _492.z;
    vec4 _520 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _296) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _297) + cbTextureTilingScale._m0[0u].w));
    float _524 = cbMtdParam._m0[13u].w * _520.x;
    float _542 = fma(_506, _211, fma(_500, _218, _499 * _204));
    float _545 = fma(_506, _212, fma(_500, _219, _499 * _205));
    float _548 = fma(_506, _213, fma(_500, _220, _499 * _206));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3567 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _556 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _557 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3583 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3594 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3605 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _581 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _583 = _581.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _746 = sqrt(((_274 * _274) + (_275 * _275)) + (_276 * _276));
        float _752 = (cbMatDynParam._m0[5u].x * _746) + cbMatDynParam._m0[5u].y;
        float _3616 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _757 = (cbMatDynParam._m0[5u].z * _746) + cbMatDynParam._m0[5u].w;
        float _3627 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) - _753)) + _753) < ((_583 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _615 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _618 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _621 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _635 = _634 + 9u;
    uint _636 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _642 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_636].x;
    float _643 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_636].y;
    float _644 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_636].z;
    float _3638 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    vec4 _656 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _659 = _656.x * TEXCOORD_1.w;
    float _660 = dot(vec3(_553, _554, _555), vec3(_286, _287, _288));
    float _663 = _660 * 2.0;
    float _667 = (_663 * _553) - _286;
    float _668 = (_663 * _554) - _287;
    float _669 = (_663 * _555) - _288;
    float _673 = abs(dot(vec3(_286, _287, _288), vec3(_553, _554, _555)));
    float _3671 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _682 = 10.0 / (_576 + 10.0);
    float _683 = sqrt(_556);
    float _695 = exp2((_683 * 5.0) * log2(1.0 - (_674 * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _795 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _799 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _824 = _727 + _553;
        float _825 = _731 + _554;
        float _826 = _735 + _555;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_553, _554, _555), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3719 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_553, _554, _555), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3752 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_553, _554, _555), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3785 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1114 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1118 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1141 = _727 + _553;
        float _1142 = _731 + _554;
        float _1143 = _735 + _555;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_553, _554, _555), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3848 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_553, _554, _555), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3881 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_553, _554, _555), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3914 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = _1067;
        _1389 = _1067;
        _1390 = _1067;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1080)) + _1080;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _667 * 0.5;
    float _1448 = _668 * 0.5;
    float _1449 = _669 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1563 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1567 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1571 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1574 = fma(_669, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667));
        float _1577 = fma(_669, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667));
        float _1580 = fma(_669, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667));
        float _1608;
        if (_1574 > 0.0)
        {
            _1608 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1608 = frontier_phi_17_15_ladder;
        }
        float _1831;
        if (_1577 > 0.0)
        {
            _1831 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1831 = frontier_phi_26_22_ladder;
        }
        float _2066;
        if (_1580 > 0.0)
        {
            _2066 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2066 = frontier_phi_37_33_ladder;
        }
        float _2068 = isnan(_1831) ? _1608 : (isnan(_1608) ? _1831 : min(_1608, _1831));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1574) + _1563;
        float _2074 = (_2069 * _1577) + _1567;
        float _2075 = (_2069 * _1580) + _1571;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_16_37_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1596 = frontier_phi_16_37_ladder_2;
        _1598 = frontier_phi_16_37_ladder_1;
        _1600 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_667, _668, _669), _1516);
        _1596 = _1584.x * cbModelParam._m0[1u].y;
        _1598 = _1584.y * cbModelParam._m0[1u].y;
        _1600 = _1584.z * cbModelParam._m0[1u].y;
    }
    float _1604 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1604 : min(cbModelParam._m0[25u].w, _1604));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1660 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1664 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1668 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1671 = fma(_669, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667));
        float _1674 = fma(_669, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667));
        float _1677 = fma(_669, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667));
        float _1836;
        if (_1671 > 0.0)
        {
            _1836 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1836 = frontier_phi_28_24_ladder;
        }
        float _2093;
        if (_1674 > 0.0)
        {
            _2093 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2093 = frontier_phi_39_35_ladder;
        }
        float _2557;
        if (_1677 > 0.0)
        {
            _2557 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2557 = frontier_phi_50_45_ladder;
        }
        float _2559 = isnan(_2093) ? _1836 : (isnan(_1836) ? _2093 : min(_1836, _2093));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1671) + _1660;
        float _2565 = (_2560 * _1674) + _1664;
        float _2566 = (_2560 * _1677) + _1668;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1605);
            frontier_phi_25_50_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1696 = frontier_phi_25_50_ladder_2;
        _1698 = frontier_phi_25_50_ladder_1;
        _1700 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_667, _668, _669), _1605);
        _1696 = _1680.x * cbModelParam._m0[1u].z;
        _1698 = _1680.y * cbModelParam._m0[1u].z;
        _1700 = _1680.z * cbModelParam._m0[1u].z;
    }
    float _1712 = ((((1.0 - _695) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_695 * _683)) * _659;
    float _1713 = _1712 * ((cbModelParam._m0[1u].w * (_1696 - _1596)) + _1596);
    float _1714 = _1712 * ((cbModelParam._m0[1u].w * (_1698 - _1598)) + _1598);
    float _1715 = _1712 * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, _1713 * cbSceneParam._m0[91u].x));
    float _1735 = _595 / cbSceneParam._m0[86u].x;
    float _1743 = (cbSceneParam._m0[88u].y * (1.0 - _556)) + cbSceneParam._m0[88u].z;
    float _4040 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 5.0;
    float _1750 = (_682 * cbMtdParam._m0[13u].z) * dot(vec3(_553, _554, _555), vec3(1.0, 0.0, 0.0));
    vec4 _1760 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1750 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1750 + _1735) * cbSceneParam._m0[86u].x, _596), _1745).w) + _1735) * cbSceneParam._m0[86u].x, _596), _1745);
    float _1776 = 1.0 - _1760.w;
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1794 = _659 + (-1.0);
    float _1797 = (cbLight._m0[_1789].x * _1794) + 1.0;
    float _1798 = (cbLight._m0[_1789].y * _1794) + 1.0;
    uint _1800 = _1788 + 4u;
    float _1811 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_553, _554, _555));
    float _1814 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1815 = _1788 + 5u;
    uint _1821 = _1788 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_553, _554, _555));
    float _1830 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    float _1895;
    float _1896;
    float _1897;
    if (_557 == 0.0)
    {
        float _4061 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _4072 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1849 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
        float _1851 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
        _1895 = ((cbLight._m0[_1815].x * _1830) * _1851) + ((cbLight._m0[_1800].x * _1814) * _1849);
        _1896 = ((_1830 * cbLight._m0[_1815].y) * _1851) + ((_1814 * cbLight._m0[_1800].y) * _1849);
        _1897 = ((_1830 * cbLight._m0[_1815].z) * _1851) + ((_1814 * cbLight._m0[_1800].z) * _1849);
    }
    else
    {
        float _1861 = _1811 + _557;
        float _1864 = (_557 * 2.0) + 1.0;
        float _1865 = (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) / _1864;
        float _1872 = _1827 + _557;
        float _1874 = (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) / _1864;
        _1895 = (((_1874 * cbLight._m0[_1815].x) * _1830) + ((_1865 * cbLight._m0[_1800].x) * _1814)) * 0.3183098733425140380859375;
        _1896 = (((_1874 * cbLight._m0[_1815].y) * _1830) + ((_1865 * cbLight._m0[_1800].y) * _1814)) * 0.3183098733425140380859375;
        _1897 = (((_1874 * cbLight._m0[_1815].z) * _1830) + ((_1865 * cbLight._m0[_1800].z) * _1814)) * 0.3183098733425140380859375;
    }
    uint _1901 = _1788 + 8u;
    float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _556) * 0.949999988079071044921875);
    float _1918 = _1917 * _1917;
    float _1919 = cbLight._m0[_1788].x + _286;
    float _1920 = cbLight._m0[_1788].y + _287;
    float _1921 = cbLight._m0[_1788].z + _288;
    float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
    float _1926 = _1925 * _1919;
    float _1927 = _1925 * _1920;
    float _1928 = _1925 * _1921;
    float _1929 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1788].xyz));
    float _4093 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _1933 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1934 = dot(vec3(_553, _554, _555), vec3(_1926, _1927, _1928));
    float _4115 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1938 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1926, _1927, _1928));
    float _4126 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1942 = _1918 * _1918;
    float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
    float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1958 = 1.0 - _1918;
    float _1969 = (0.5 / (((_1933 * ((_1932 * _1958) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1933 * _1958) + _1918) * _1932))) * _1932;
    float _4137 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
    uint _1984 = _1788 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _556) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1821].x + _286;
    float _2001 = cbLight._m0[_1821].y + _287;
    float _2002 = cbLight._m0[_1821].z + _288;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1821].xyz));
    float _4148 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2014 = dot(vec3(_553, _554, _555), vec3(_2007, _2008, _2009));
    float _4159 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_2007, _2008, _2009));
    float _4170 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1999;
    float _2046 = (0.5 / (((_1933 * ((_2013 * _2036) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1933 * _2036) + _1999) * _2013))) * _2013;
    float _4181 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2058 = (((_2035 * cbLight._m0[_1984].x) * _2048) * _1830) + (((_1957 * cbLight._m0[_1901].x) * _1971) * _1814);
    float _2059 = (((_2035 * cbLight._m0[_1984].y) * _2048) * _1830) + (((_1957 * cbLight._m0[_1901].y) * _1971) * _1814);
    float _2060 = (((_2035 * cbLight._m0[_1984].z) * _2048) * _1830) + (((_1957 * cbLight._m0[_1901].z) * _1971) * _1814);
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    if (_1786.y == 0u)
    {
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2137;
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2137;
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2137;
        uvec4 _2152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2153 = _2152.x;
        uint _2164 = uint((float(_2152.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2153))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2153)));
        float _2174 = (log2(_2140 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2175 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        uint _2178 = uint(isnan(14.0) ? _2175 : (isnan(_2175) ? 14.0 : min(_2175, 14.0)));
        uvec4 _2183 = texelFetch(g_lightClusterGridBuffer, int(((_2178 << 2u) + (_2164 << 6u)) >> 2u));
        uint _2184 = _2183.x;
        uint _2185 = _2152.z;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        if (((((1u << ((_2185 >> 4u) & 15u)) + 4294967295u) & _2184) == 0u) || ((_2185 & 240u) == 0u))
        {
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
        }
        else
        {
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2178 << 5u) + (_2164 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2631)
                {
                    frontier_phi_61_pred = _2616;
                    frontier_phi_61_pred_1 = _2620;
                    frontier_phi_61_pred_2 = _2619;
                    frontier_phi_61_pred_3 = _2618;
                    frontier_phi_61_pred_4 = _2617;
                    frontier_phi_61_pred_5 = _2615;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2615;
                    _2782 = _2616;
                    _2783 = _2617;
                    _2784 = _2618;
                    _2785 = _2619;
                    _2786 = _2620;
                    _2787 = _2630;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2621 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        float _2827 = _2826.x;
                        float _2828 = _2826.y;
                        float _2829 = _2826.z;
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        uint _2848 = (_2791 * 48u) + 12u;
                        vec2 _2856 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x));
                        float _2862 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
                        float _2863 = _2862 * _2138;
                        float _2864 = _2862 * _2139;
                        float _2865 = _2862 * _2140;
                        float _2866 = _2807.x - _2138;
                        float _2867 = _2807.y - _2139;
                        float _2868 = _2807.z - _2140;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_615, _618, _621), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2807.w);
                        float _4202 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2883 = sqrt(_2869) * _2826.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2888 = 1.0 - _2887;
                        float _2890 = (_2888 * _2888) * _557;
                        float _2893 = ((_2888 * _2876) + _2887) + _2890;
                        float _2898 = _2883 * _2883;
                        float _2902 = ((isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))) * _2882) / (((_2890 * 2.0) + 1.0) * ((_2898 * 0.699999988079071044921875) + 1.0));
                        float _2906 = dot(vec3(_2873, _2874, _2875), vec3(_2863, _2864, _2865));
                        float _4218 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2913 = dot(vec3((-0.0) - _2863, (-0.0) - _2864, (-0.0) - _2865), vec3(_615, _618, _621)) + 1.0;
                        float _2915 = (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * 0.5;
                        float _2923 = ((_2915 * _2915) * _2856.x) * exp2((_2856.y * 32.0) * log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))));
                        float _2925 = _557 / (_557 + 1.0);
                        float _2941 = (-0.0) - _2138;
                        float _2942 = (-0.0) - _2139;
                        float _2943 = (-0.0) - _2140;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2958 = exp2(log2(1.0 / ((_2898 * 3.5) + 5.0)) * 0.25);
                        float _2959 = 1.0 - _683;
                        float _2966 = sqrt(1.0 - ((1.0 - (_2959 * _2959)) * (1.0 - (_2958 * _2958))));
                        float _2967 = _2966 * _2966;
                        float _2968 = _2967 * _2967;
                        float _2969 = _2948 + _2873;
                        float _2970 = _2949 + _2874;
                        float _2971 = _2950 + _2875;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2979 = dot(vec3(_615, _618, _621), vec3(_2948, _2949, _2950));
                        float _4234 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2983 = dot(vec3(_615, _618, _621), vec3(_2975 * _2969, _2975 * _2970, _2975 * _2971));
                        float _4245 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2990 = ((_2986 * _2986) * (_2968 + (-1.0))) + 1.0;
                        float _2991 = _2886 * _2967;
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2876) + _2992;
                        float _4256 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2997 = 1.0 - _2967;
                        float _3007 = (0.5 / (((_2996 * ((_2982 * _2997) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2996 * _2997) + _2967) * _2982))) * _2996;
                        float _4267 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3018 = (((_2968 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_2990 * _2990) * ((_2898 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2711 = (((((_2827 * 0.3183098733425140380859375) * _2925) * _2923) + _2827) * _2902) + _2784;
                        _2712 = (((((_2828 * 0.3183098733425140380859375) * _2925) * _2923) + _2828) * _2902) + _2785;
                        _2713 = (((((_2829 * 0.3183098733425140380859375) * _2925) * _2923) + _2829) * _2902) + _2786;
                        _2708 = (_3018 * _2843.x) + _2781;
                        _2709 = (_3018 * _2843.y) + _2782;
                        _2710 = (_3018 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2713;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_61_pred = _2709;
                    frontier_phi_61_pred_1 = _2713;
                    frontier_phi_61_pred_2 = _2712;
                    frontier_phi_61_pred_3 = _2711;
                    frontier_phi_61_pred_4 = _2710;
                    frontier_phi_61_pred_5 = _2708;
                }
                _2409 = frontier_phi_61_pred;
                _2417 = frontier_phi_61_pred_1;
                _2415 = frontier_phi_61_pred_2;
                _2413 = frontier_phi_61_pred_3;
                _2411 = frontier_phi_61_pred_4;
                _2407 = frontier_phi_61_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2407;
                    _2616 = _2409;
                    _2617 = _2411;
                    _2618 = _2413;
                    _2619 = _2415;
                    _2620 = _2417;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
        }
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.z;
        uint _2423 = (_2421 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2423) & _2184) == 0u)
        {
            _2583 = _2406;
            _2585 = _2408;
            _2587 = _2410;
            _2589 = _2412;
            _2591 = _2414;
            _2593 = _2416;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
            float _2609 = _2608 * _2138;
            float _2610 = _2608 * _2139;
            float _2611 = _2608 * _2140;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2423 < ((_2421 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2764 = _2406;
                float _2765 = _2408;
                float _2766 = _2410;
                float _2767 = _2412;
                float _2768 = _2414;
                float _2769 = _2416;
                uint _2770 = _2423;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2178 << 5u) + (_2164 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2780)
                    {
                        frontier_phi_72_pred = _2769;
                        frontier_phi_72_pred_1 = _2768;
                        frontier_phi_72_pred_2 = _2767;
                        frontier_phi_72_pred_3 = _2766;
                        frontier_phi_72_pred_4 = _2765;
                        frontier_phi_72_pred_5 = _2764;
                    }
                    else
                    {
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3045 = _2764;
                        float _3046 = _2765;
                        float _3047 = _2766;
                        float _3048 = _2767;
                        float _3049 = _2768;
                        float _3050 = _2769;
                        uint _3051 = _2779;
                        uint _3052;
                        vec4 _3077;
                        float _3078;
                        vec4 _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        vec3 _3108;
                        vec2 _3117;
                        vec4 _3132;
                        vec4 _3148;
                        float _3195;
                        bool _3196;
                        for (;;)
                        {
                            uint _3062 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3051));
                            _3052 = (_3051 + 4294967295u) & _3051;
                            uint _3064 = _3062 * 40u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3078 = _3077.w;
                            uint _3080 = (_3062 * 40u) + 4u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.x;
                            _3095 = _3093.y;
                            _3096 = _3093.z;
                            uint _3098 = (_3062 * 40u) + 8u;
                            _3108 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x));
                            uint _3110 = (_3062 * 40u) + 12u;
                            _3117 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x));
                            uint _3119 = (_3062 * 40u) + 16u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3135 = (_3062 * 40u) + 20u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3151 = (_3062 * 40u) + 24u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3170 = (_3062 * 40u) + 28u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3195 = fma(_2140, _3183.z, fma(_2139, _3183.y, _3183.x * _2138)) + _3183.w;
                            _3196 = !((fma(_2140, _3164.z, fma(_2139, _3164.y, _3164.x * _2138)) + _3164.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3196)
                            {
                                float _3222 = _3077.x - _2138;
                                float _3223 = _3077.y - _2139;
                                float _3224 = _3077.z - _2140;
                                float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                                float _3228 = inversesqrt(_3225);
                                float _3229 = _3228 * _3222;
                                float _3230 = _3228 * _3223;
                                float _3231 = _3228 * _3224;
                                float _3235 = 1.0 - (_3225 / (_3078 * _3078));
                                float _4278 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3240 = sqrt(_3225) * _3093.w;
                                float _3242 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                                float _3243 = _3242 * _3242;
                                float _3244 = 1.0 - _3243;
                                float _3246 = (_3244 * _3244) * _557;
                                float _3249 = ((_3244 * dot(vec3(_3229, _3230, _3231), vec3(_615, _618, _621))) + _3243) + _3246;
                                float _3254 = _3240 * _3240;
                                float _3259 = (fma(_2140, _3132.z, fma(_2139, _3132.y, _3132.x * _2138)) + _3132.w) / _3195;
                                float _3260 = (fma(_2140, _3148.z, fma(_2139, _3148.y, _3148.x * _2138)) + _3148.w) / _3195;
                                float _3264 = 1.0 - dot(vec2(_3259, _3260), vec2(_3259, _3260));
                                float _4294 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3266 = _3265 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3236) / (((_3246 * 2.0) + 1.0) * ((_3254 * 0.699999988079071044921875) + 1.0)));
                                float _3267 = (-0.0) - _2609;
                                float _3268 = (-0.0) - _2610;
                                float _3269 = (-0.0) - _2611;
                                float _3270 = dot(vec3(_3229, _3230, _3231), vec3(_2609, _2610, _2611));
                                float _4305 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3277 = dot(vec3(_3267, _3268, _3269), vec3(_615, _618, _621)) + 1.0;
                                float _3279 = (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * 0.5;
                                float _3286 = ((_3279 * _3279) * _3117.x) * exp2((_3117.y * 32.0) * log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))));
                                float _3288 = _557 / (_557 + 1.0);
                                float _3309 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3310 = 1.0 - _683;
                                float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                                float _3318 = _3317 * _3317;
                                float _3319 = _3318 * _3318;
                                float _3320 = _3229 - _2609;
                                float _3321 = _3230 - _2610;
                                float _3322 = _3231 - _2611;
                                float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                                float _3330 = dot(vec3(_615, _618, _621), vec3(_3267, _3268, _3269));
                                float _4321 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3334 = dot(vec3(_615, _618, _621), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                                float _4332 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                                float _3342 = _3242 * _3318;
                                float _3343 = _3342 * _3342;
                                float _3349 = ((1.0 - _3343) * dot(vec3(_615, _618, _621), vec3(_3229, _3230, _3231))) + _3343;
                                float _4343 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3351 = 1.0 - _3318;
                                float _3361 = (0.5 / (((_3350 * ((_3333 * _3351) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3318) * _3333))) * _3350;
                                float _4354 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3371 = (_3265 * _3236) * (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3341 * _3341) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3094 * 0.3183098733425140380859375) * _3288) * _3286) + _3094) * _3266;
                                frontier_phi_78_pred_1 = ((((_3096 * 0.3183098733425140380859375) * _3288) * _3286) + _3096) * _3266;
                                frontier_phi_78_pred_2 = ((((_3095 * 0.3183098733425140380859375) * _3288) * _3286) + _3095) * _3266;
                                frontier_phi_78_pred_3 = _3371 * _3108.z;
                                frontier_phi_78_pred_4 = _3371 * _3108.y;
                                frontier_phi_78_pred_5 = _3371 * _3108.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_78_pred;
                            _3380 = frontier_phi_78_pred_1;
                            _3379 = frontier_phi_78_pred_2;
                            _3377 = frontier_phi_78_pred_3;
                            _3376 = frontier_phi_78_pred_4;
                            _3375 = frontier_phi_78_pred_5;
                            _3035 = _3378 + _3048;
                            _3036 = _3379 + _3049;
                            _3037 = _3380 + _3050;
                            _3032 = _3375 + _3045;
                            _3033 = _3376 + _3046;
                            _3034 = _3377 + _3047;
                            if (_3052 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3052;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3037;
                        frontier_phi_72_pred_1 = _3036;
                        frontier_phi_72_pred_2 = _3035;
                        frontier_phi_72_pred_3 = _3034;
                        frontier_phi_72_pred_4 = _3033;
                        frontier_phi_72_pred_5 = _3032;
                    }
                    _2594 = frontier_phi_72_pred;
                    _2592 = frontier_phi_72_pred_1;
                    _2590 = frontier_phi_72_pred_2;
                    _2588 = frontier_phi_72_pred_3;
                    _2586 = frontier_phi_72_pred_4;
                    _2584 = frontier_phi_72_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2584;
                        _2765 = _2586;
                        _2766 = _2588;
                        _2767 = _2590;
                        _2768 = _2592;
                        _2769 = _2594;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2594;
                frontier_phi_52_53_ladder_1 = _2586;
                frontier_phi_52_53_ladder_2 = _2592;
                frontier_phi_52_53_ladder_3 = _2590;
                frontier_phi_52_53_ladder_4 = _2588;
                frontier_phi_52_53_ladder_5 = _2584;
            }
            else
            {
                frontier_phi_52_53_ladder = _2416;
                frontier_phi_52_53_ladder_1 = _2408;
                frontier_phi_52_53_ladder_2 = _2414;
                frontier_phi_52_53_ladder_3 = _2412;
                frontier_phi_52_53_ladder_4 = _2410;
                frontier_phi_52_53_ladder_5 = _2406;
            }
            _2583 = frontier_phi_52_53_ladder_5;
            _2585 = frontier_phi_52_53_ladder_1;
            _2587 = frontier_phi_52_53_ladder_4;
            _2589 = frontier_phi_52_53_ladder_3;
            _2591 = frontier_phi_52_53_ladder_2;
            _2593 = frontier_phi_52_53_ladder;
        }
        float _2598 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
        _2197 = (_2598 * _2589) + _1895;
        _2199 = (_2598 * _2591) + _1896;
        _2201 = (_2598 * _2593) + _1897;
        _2203 = ((_2583 * 0.039999999105930328369140625) * _2598) + _2058;
        _2205 = ((_2585 * 0.039999999105930328369140625) * _2598) + _2059;
        _2207 = ((_2587 * 0.039999999105930328369140625) * _2598) + _2060;
    }
    else
    {
        _2197 = _1895;
        _2199 = _1896;
        _2201 = _1897;
        _2203 = _2058;
        _2205 = _2059;
        _2207 = _2060;
    }
    float _2221 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2222 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2223 = cbSceneParam._m0[86u].x * (_1735 + ((_682 * cbMtdParam._m0[13u].y) * dot(vec3(_553, _554, _555), vec3(_204, _205, _206))));
    float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
    float _2225 = isnan(_2222) ? _596 : (isnan(_596) ? _2222 : min(_596, _2222));
    vec4 _2227 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2224, _2225), 0.0);
    float _2229 = _2227.x;
    bool _2250 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2229)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2229))) > _576;
    float _2251 = _2250 ? _2224 : _595;
    float _2252 = _2250 ? _2225 : _596;
    vec4 _2254 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2251, _2252));
    vec4 _2259 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2251, _2252));
    float _2261 = _2259.x;
    float _2281 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2261)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2261))) - _576;
    bool _2291 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2295 = (isnan(_2281) ? 0.0 : (isnan(0.0) ? _2281 : max(0.0, _2281))) * (-1.44269502162933349609375);
    float _4385 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4396 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4407 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2322 = 0.959999978542327880859375 - (exp2(log2(1.0 - _674) * 5.0) * 0.959999978542327880859375);
    float _2325 = ((_2254.x * _2322) * exp2(_2295 * (_2291 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2328 = ((_2254.y * _2322) * exp2(_2295 * (_2291 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2331 = ((_2254.z * _2322) * exp2(_2295 * (_2291 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2339 = (_2325 + (((((_1712 * _1760.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1505) * _1776)) + _2203) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2197 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _659))) - _2325) * cbMtdParam._m0[15u].x);
    float _2341 = (_2328 + (((((_1712 * _1760.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1505) * _1776)) + _2205) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2199 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _659))) - _2328) * cbMtdParam._m0[15u].x);
    float _2343 = (_2331 + (((((_1712 * _1760.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1505) * _1776)) + _2207) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2201 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _659))) - _2331) * cbMtdParam._m0[15u].x);
    uint _2344 = _634 + 6u;
    float _2352 = _595 / cbSceneParam._m0[86u].x;
    float _2353 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2367 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2352, _2353, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2369 = _2367.x;
    float _2370 = _2367.y;
    float _2371 = _2367.z;
    float _2372 = _2367.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2431 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2432 = _2431 / _576;
        float _2443 = _2432 * _274;
        float _2444 = _275 * _2432;
        float _2445 = (-0.0) - _2444;
        float _2446 = _2432 * _276;
        float _2448 = (cbSceneParam._m0[77u].w * _2445) / _2431;
        float _2449 = _2448 + cbSceneParam._m0[79u].w;
        float _2450 = cbSceneParam._m0[79u].w - _2444;
        float _2456 = sqrt(((_2443 * _2443) + (_2444 * _2444)) + (_2446 * _2446));
        float _2459 = (1.0 - (cbSceneParam._m0[77u].w / _2431)) * _2456;
        float _2464 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2721;
        if (abs((_2445 - _2448) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2721 = ((((_2449 > 0.0) ? exp2(_2464 * _2449) : (2.0 - exp2(_2465 * _2449))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2459;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : max(_2449, _2450));
            float _2646 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : min(_2449, _2450));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2721 = ((abs(_2456 / _2445) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2464 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2464 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2465 * _2655) - exp2(_2465 * _2656)) * _2644))) + (_2459 * cbSceneParam._m0[80u].z);
        }
        vec4 _2723 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2352, _2353, 1.0), 0.0);
        float _2732 = exp2((_2721 * (-1.44269502162933349609375)) * (1.0 - _2723.w));
        float _2733 = log2(_2732);
        float _2749 = log2(_2372);
        _2467 = (exp2(_2749 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].x)) * _2723.x) / cbSceneParam._m0[78u].x)) + _2369;
        _2469 = (exp2(_2749 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].y)) * _2723.y) / cbSceneParam._m0[78u].y)) + _2370;
        _2471 = (exp2(_2749 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].z)) * _2723.z) / cbSceneParam._m0[78u].z)) + _2371;
        _2473 = _2732 * _2372;
    }
    else
    {
        _2467 = _2369;
        _2469 = _2370;
        _2471 = _2371;
        _2473 = _2372;
    }
    bool _2759;
    float _2528;
    vec4 _2531;
    float _2533;
    vec4 _2535;
    float _2543;
    float _2544;
    float _2545;
    float _2546;
    bool _2556;
    for (;;)
    {
        bool _2485 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2486 = log2(_2473);
        float _2493 = exp2(_2486 * cbSceneParam._m0[78u].x) * _2339;
        float _2494 = exp2(_2486 * cbSceneParam._m0[78u].y) * _2341;
        float _2495 = exp2(_2486 * cbSceneParam._m0[78u].z) * _2343;
        vec4 _2503 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_595, _596));
        float _2505 = _2503.x;
        float _2526 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2505)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2505))) - _576) * cbMtdParam._m0[14u].z;
        float _4458 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        _2528 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * cbInstanceData._m0[_2344].w;
        float _2529 = _583 + (-0.5);
        _2531 = cbMtdParam._m0[1u];
        _2533 = _2531.y * _2529;
        _2535 = cbMatDynParam._m0[0u];
        float _2542 = (roundEven(_2535.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2543 = _2542 * (_2485 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2467)));
        _2544 = _2542 * (_2485 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2469)));
        _2545 = _2542 * (_2485 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2471)));
        _2546 = _2529 * 0.999000012874603271484375;
        _2556 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2556)
        {
            if ((cbInstanceData._m0[_634 + 7u].x + _2546) < 0.5)
            {
                _2759 = true;
                break;
            }
        }
        uint _2679 = _635 + uint(_2535.w);
        if ((cbInstanceData._m0[_2679].w < 1.0) && ((cbInstanceData._m0[_2679].w + _2546) < 0.5))
        {
            _2759 = true;
            break;
        }
        if ((_2533 + 1.0) < _2531.x)
        {
            _2759 = true;
            break;
        }
        _2759 = false;
        break;
    }
    float _3023;
    if (_2759)
    {
        discard_state = true;
        _3023 = 0.0;
    }
    else
    {
        _3023 = _2528;
    }
    SV_Target.x = _2543;
    SV_Target.y = _2544;
    SV_Target.z = _2545;
    SV_Target.w = _3023;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2528;
    discard_exit();
}


