#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1030;
float _3765;
float _3766;
float _3767;
float _3768;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _290 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _291 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _302 = dot(vec3(_280, _281, _282), vec3(_210, _211, _212));
    float _305 = dot(vec3(_280, _281, _282), vec3(_224, _225, _226));
    float _308 = dot(vec3(_280, _281, _282), vec3(_217, _218, _219));
    float _314 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _338 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _358 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_302 * cbMtdParam._m0[12u].x) * _314) * _338) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_305 * cbMtdParam._m0[12u].x) * _314) * _338) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _381 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _382 = _381 * _280;
    float _383 = _381 * _281;
    float _384 = _381 * _282;
    float _388 = dot(vec4(_382, _383, _384, 0.0), vec4(_217, _218, _219, 0.0)) - cbMtdParam._m0[12u].w;
    float _3777 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _395 = exp2(log2(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _410 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _358.x) * cbMtdParam._m0[9u].x) * ((_395 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _414 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _358.y) * cbMtdParam._m0[9u].y) * ((_395 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _418 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _358.z) * cbMtdParam._m0[9u].z) * ((_395 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _430 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    float _436 = ((cbMtdParam._m0[12u].z * _430.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _449 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    float _457 = (_449.x * 2.0) + (-1.0);
    float _458 = (_449.y * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3793 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _464 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    float _469 = cbMtdParam._m0[14u].w + _449.z;
    vec4 _481 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _290) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _291) + cbTextureTilingScale._m0[0u].w));
    float _485 = cbMtdParam._m0[13u].w * _481.x;
    float _503 = fma(_464, _217, fma(_458, _224, _457 * _210));
    float _506 = fma(_464, _218, fma(_458, _225, _457 * _211));
    float _509 = fma(_464, _219, fma(_458, _226, _457 * _212));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3804 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3815 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _518 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _519 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3831 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3842 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3853 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _543 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _545 = _543.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _709 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _715 = (cbMatDynParam._m0[5u].x * _709) + cbMatDynParam._m0[5u].y;
        float _3864 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _720 = (cbMatDynParam._m0[5u].z * _709) + cbMatDynParam._m0[5u].w;
        float _3875 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _716)) + _716) < ((_545 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _581 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _584 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _598 = _597 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3886 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    vec4 _619 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _622 = _619.x * TEXCOORD_1.w;
    float _623 = dot(vec3(_514, _515, _516), vec3(_382, _383, _384));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _514) - _382;
    float _631 = (_626 * _515) - _383;
    float _632 = (_626 * _516) - _384;
    float _636 = abs(dot(vec3(_382, _383, _384), vec3(_514, _515, _516)));
    float _3919 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _645 = 10.0 / (_538 + 10.0);
    float _646 = sqrt(_518);
    float _658 = exp2((_646 * 5.0) * log2(1.0 - (_637 * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1029;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _758 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _762 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _787 = _690 + _514;
        float _788 = _694 + _515;
        float _789 = _698 + _516;
        float _799 = fma(_789, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787)) - _754;
        float _800 = fma(_789, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787)) - _758;
        float _801 = fma(_789, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787)) - _762;
        float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
        float _818 = ((_805 * _799) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_805 * _800) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_805 * _801) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _857 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_823.x + (-0.5));
        float _859 = _857 * (_823.y + (-0.5));
        float _860 = _857 * (_823.z + (-0.5));
        float _867 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_830.x + (-0.5));
        float _869 = _867 * (_830.y + (-0.5));
        float _870 = _867 * (_830.z + (-0.5));
        float _877 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_837.x + (-0.5));
        float _879 = _877 * (_837.y + (-0.5));
        float _880 = _877 * (_837.z + (-0.5));
        float _887 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_844.x + (-0.5));
        float _889 = _887 * (_844.y + (-0.5));
        float _890 = _887 * (_844.z + (-0.5));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = _858 * 0.5;
        float _895 = _868 * 0.5;
        float _896 = _878 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _911 = (dot(vec3(_514, _515, _516), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _921 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3967 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_923 + 1.0))) + _928) * _891;
        float _938 = _859 * 0.5;
        float _939 = _869 * 0.5;
        float _940 = _879 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_514, _515, _516), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _4000 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_965 + 1.0))) + _970) * _892;
        float _980 = _860 * 0.5;
        float _981 = _870 * 0.5;
        float _982 = _880 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_514, _515, _516), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _4033 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1007 + 1.0))) + _1012) * _893;
        _1029 = _860;
        _1031 = _859;
        _1032 = _858;
        _1033 = _870;
        _1034 = _869;
        _1035 = _868;
        _1036 = _880;
        _1037 = _879;
        _1038 = _878;
        _1039 = _893;
        _1040 = _892;
        _1041 = _891;
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _1030;
        _1031 = _1030;
        _1032 = _1030;
        _1033 = _1030;
        _1034 = _1030;
        _1035 = _1030;
        _1036 = _1030;
        _1037 = _1030;
        _1038 = _1030;
        _1039 = _1030;
        _1040 = _1030;
        _1041 = _1030;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1073 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1077 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1081 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1104 = _690 + _514;
        float _1105 = _694 + _515;
        float _1106 = _698 + _516;
        float _1116 = fma(_1106, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104)) - _1073;
        float _1117 = fma(_1106, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104)) - _1077;
        float _1118 = fma(_1106, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104)) - _1081;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1073 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1077 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[35u].z) + ((((((_1081 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1172 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1139.x + (-0.5));
        float _1174 = _1172 * (_1139.y + (-0.5));
        float _1175 = _1172 * (_1139.z + (-0.5));
        float _1182 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1146.x + (-0.5));
        float _1184 = _1182 * (_1146.y + (-0.5));
        float _1185 = _1182 * (_1146.z + (-0.5));
        float _1192 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1153.x + (-0.5));
        float _1194 = _1192 * (_1153.y + (-0.5));
        float _1195 = _1192 * (_1153.z + (-0.5));
        float _1202 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1160.x + (-0.5));
        float _1204 = _1202 * (_1160.y + (-0.5));
        float _1205 = _1202 * (_1160.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_514, _515, _516), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _4096 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1236 + 1.0))) + _1241) * _1206;
        float _1251 = _1174 * 0.5;
        float _1252 = _1184 * 0.5;
        float _1253 = _1194 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_514, _515, _516), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4129 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1278 + 1.0))) + _1283) * _1207;
        float _1293 = _1175 * 0.5;
        float _1294 = _1185 * 0.5;
        float _1295 = _1195 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_514, _515, _516), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4162 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1320 + 1.0))) + _1325) * _1208;
        _1342 = _1175;
        _1343 = _1174;
        _1344 = _1173;
        _1345 = _1185;
        _1346 = _1184;
        _1347 = _1183;
        _1348 = _1195;
        _1349 = _1194;
        _1350 = _1193;
        _1351 = _1208;
        _1352 = _1207;
        _1353 = _1206;
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1030;
        _1343 = _1030;
        _1344 = _1030;
        _1345 = _1030;
        _1346 = _1030;
        _1347 = _1030;
        _1348 = _1030;
        _1349 = _1030;
        _1350 = _1030;
        _1351 = _1030;
        _1352 = _1030;
        _1353 = _1030;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1389 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1392 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1395 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1366));
    float _1410 = _630 * 0.5;
    float _1411 = _631 * 0.5;
    float _1412 = _632 * 0.5;
    float _1413 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1416 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1419 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1453;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1426 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1029, _1033, _1036, _1039));
        float _1430 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1434 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1441 = dot(vec4(cbModelParam._m0[39u]), vec4(_1410, _1411, _1412, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1464;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1455 = dot(vec4(cbModelParam._m0[40u]), vec4(_1410, _1411, _1412, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1468 = (_1464 * cbModelParam._m0[1u].x) + (_1453 * (1.0 - cbModelParam._m0[1u].x));
    float _1478 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1479 = isnan(_1478) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1478 : min(cbModelParam._m0[25u].z, _1478));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1526 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1530 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1534 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1537 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1540 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1543 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1571;
        if (_1537 > 0.0)
        {
            _1571 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1571 = frontier_phi_17_15_ladder;
        }
        float _1794;
        if (_1540 > 0.0)
        {
            _1794 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1794 = frontier_phi_26_22_ladder;
        }
        float _2058;
        if (_1543 > 0.0)
        {
            _2058 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2058 = frontier_phi_38_33_ladder;
        }
        float _2060 = isnan(_1794) ? _1571 : (isnan(_1571) ? _1794 : min(_1571, _1794));
        float _2061 = isnan(_2058) ? _2060 : (isnan(_2060) ? _2058 : min(_2060, _2058));
        float _2065 = (_2061 * _1537) + _1526;
        float _2066 = (_2061 * _1540) + _1530;
        float _2067 = (_2061 * _1543) + _1534;
        float _2068 = _2061 * 9.9999997473787516355514526367188e-05;
        float _2070 = (-1.0) - _2068;
        float _2072 = _2068 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2067 > _2072) || ((_2067 < _2070) || ((_2066 > _2072) || ((_2066 < _2070) || ((_2065 < _2070) || (_2065 > _2072))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2067, cbModelParam._m0[9u].z, fma(_2066, cbModelParam._m0[9u].y, _2065 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2067, cbModelParam._m0[10u].z, fma(_2066, cbModelParam._m0[10u].y, _2065 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2067, cbModelParam._m0[11u].z, fma(_2066, cbModelParam._m0[11u].y, _2065 * cbModelParam._m0[11u].x))), _1479);
            frontier_phi_16_38_ladder = _2221.x * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2221.y * cbModelParam._m0[1u].y;
        }
        _1559 = frontier_phi_16_38_ladder;
        _1561 = frontier_phi_16_38_ladder_2;
        _1563 = frontier_phi_16_38_ladder_1;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1479);
        _1559 = _1547.x * cbModelParam._m0[1u].y;
        _1561 = _1547.y * cbModelParam._m0[1u].y;
        _1563 = _1547.z * cbModelParam._m0[1u].y;
    }
    float _1567 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1567 : min(cbModelParam._m0[25u].w, _1567));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1623 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1627 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1631 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1634 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1637 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1640 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1799;
        if (_1634 > 0.0)
        {
            _1799 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1799 = frontier_phi_28_24_ladder;
        }
        float _2085;
        if (_1637 > 0.0)
        {
            _2085 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2085 = frontier_phi_40_35_ladder;
        }
        float _2404;
        if (_1640 > 0.0)
        {
            _2404 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2404 = frontier_phi_49_47_ladder;
        }
        float _2406 = isnan(_2085) ? _1799 : (isnan(_1799) ? _2085 : min(_1799, _2085));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1634) + _1623;
        float _2412 = (_2407 * _1637) + _1627;
        float _2413 = (_2407 * _1640) + _1631;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2413, cbModelParam._m0[17u].z, fma(_2412, cbModelParam._m0[17u].y, _2411 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2413, cbModelParam._m0[18u].z, fma(_2412, cbModelParam._m0[18u].y, _2411 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2413, cbModelParam._m0[19u].z, fma(_2412, cbModelParam._m0[19u].y, _2411 * cbModelParam._m0[19u].x))), _1568);
            frontier_phi_25_49_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1659 = frontier_phi_25_49_ladder_2;
        _1661 = frontier_phi_25_49_ladder_1;
        _1663 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1568);
        _1659 = _1643.x * cbModelParam._m0[1u].z;
        _1661 = _1643.y * cbModelParam._m0[1u].z;
        _1663 = _1643.z * cbModelParam._m0[1u].z;
    }
    float _1675 = ((((1.0 - _658) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_658 * _646)) * _622;
    float _1676 = _1675 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1677 = _1675 * ((cbModelParam._m0[1u].w * (_1661 - _1561)) + _1561);
    float _1678 = _1675 * ((cbModelParam._m0[1u].w * (_1663 - _1563)) + _1563);
    float _1681 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, _1676 * cbSceneParam._m0[91u].x));
    float _1698 = _557 / cbSceneParam._m0[86u].x;
    float _1706 = (cbSceneParam._m0[88u].y * (1.0 - _518)) + cbSceneParam._m0[88u].z;
    float _4288 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1708 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 5.0;
    float _1713 = (_645 * cbMtdParam._m0[13u].z) * dot(vec3(_514, _515, _516), vec3(1.0, 0.0, 0.0));
    vec4 _1723 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1713 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1713 + _1698) * cbSceneParam._m0[86u].x, _558), _1708).w) + _1698) * cbSceneParam._m0[86u].x, _558), _1708);
    float _1739 = 1.0 - _1723.w;
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1786 = _1773 / _1785;
    float _1787 = _1777 / _1785;
    float _1788 = _1781 / _1785;
    float _1935;
    float _1936;
    float _1937;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1815 = ((uint(_1788 > cbSceneParam._m0[59u].y) + uint(_1788 > cbSceneParam._m0[59u].x)) + uint(_1788 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1816 = _1815 + 43u;
        uint _1824 = _1815 + 44u;
        uint _1832 = _1815 + 45u;
        uint _1840 = _1815 + 46u;
        float _1851 = fma(_1785, cbSceneParam._m0[_1816].w, fma(_1781, cbSceneParam._m0[_1816].z, fma(_1777, cbSceneParam._m0[_1816].y, _1773 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1785, cbSceneParam._m0[_1824].w, fma(_1781, cbSceneParam._m0[_1824].z, fma(_1777, cbSceneParam._m0[_1824].y, _1773 * cbSceneParam._m0[_1824].x)));
        float _1863 = fma(_1785, cbSceneParam._m0[_1840].w, fma(_1781, cbSceneParam._m0[_1840].z, fma(_1777, cbSceneParam._m0[_1840].y, _1773 * cbSceneParam._m0[_1840].x)));
        float _1868 = cbSceneParam._m0[33u].z * _1863;
        float _1870 = cbSceneParam._m0[33u].w * _1863;
        float _1873 = fma(_1785, cbSceneParam._m0[_1832].w, fma(_1781, cbSceneParam._m0[_1832].z, fma(_1777, cbSceneParam._m0[_1832].y, _1773 * cbSceneParam._m0[_1832].x))) / _1863;
        float _1921 = (cbSceneParam._m0[33u].x - sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788))) * cbSceneParam._m0[33u].y;
        float _4299 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1928 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 + _1851) / _1863, (_1870 + _1855) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 + _1851) / _1863, (_1855 - _1868) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 - _1868) / _1863, (_1855 - _1870) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 - _1870) / _1863, (_1868 + _1855) / _1863), _1873), 0.0)).x), vec4(0.25)));
        _1935 = 1.0 - (_1928 * cbSceneParam._m0[34u].x);
        _1936 = 1.0 - (_1928 * cbSceneParam._m0[34u].y);
        _1937 = 1.0 - (_1928 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1935 = 1.0;
        _1936 = 1.0;
        _1937 = 1.0;
    }
    float _2001;
    float _2003;
    float _2005;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1989 = fma(_1785, cbSceneParam._m0[63u].w, fma(_1781, cbSceneParam._m0[63u].z, fma(_1777, cbSceneParam._m0[63u].y, _1773 * cbSceneParam._m0[63u].x)));
        float _1990 = fma(_1785, cbSceneParam._m0[60u].w, fma(_1781, cbSceneParam._m0[60u].z, fma(_1777, cbSceneParam._m0[60u].y, _1773 * cbSceneParam._m0[60u].x))) / _1989;
        float _1991 = fma(_1785, cbSceneParam._m0[61u].w, fma(_1781, cbSceneParam._m0[61u].z, fma(_1777, cbSceneParam._m0[61u].y, _1773 * cbSceneParam._m0[61u].x))) / _1989;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1990 >= cbSceneParam._m0[64u].x) && (_1991 >= cbSceneParam._m0[64u].y)) && (_1990 <= cbSceneParam._m0[64u].z)) && (_1991 <= cbSceneParam._m0[64u].w))
        {
            float _2098 = fma(_1785, cbSceneParam._m0[62u].w, fma(_1781, cbSceneParam._m0[62u].z, fma(_1777, cbSceneParam._m0[62u].y, _1773 * cbSceneParam._m0[62u].x))) / _1989;
            float _2102 = isnan(cbSceneParam._m0[41u].w) ? _2098 : (isnan(_2098) ? cbSceneParam._m0[41u].w : max(_2098, cbSceneParam._m0[41u].w));
            float _2145 = (cbSceneParam._m0[33u].x - sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788))) * cbSceneParam._m0[33u].y;
            float _4315 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
            float _2152 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1990, cbSceneParam._m0[33u].w + _1991), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1990, _1991 - cbSceneParam._m0[33u].z), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1990 - cbSceneParam._m0[33u].z, _1991 - cbSceneParam._m0[33u].w), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1990 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1991), _2102), 0.0)).x), vec4(0.25)));
            float _2156 = 1.0 - (_2152 * cbSceneParam._m0[34u].x);
            float _2157 = 1.0 - (_2152 * cbSceneParam._m0[34u].y);
            float _2158 = 1.0 - (_2152 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2158) ? _1937 : (isnan(_1937) ? _2158 : min(_1937, _2158));
            frontier_phi_37_36_ladder_1 = isnan(_2157) ? _1936 : (isnan(_1936) ? _2157 : min(_1936, _2157));
            frontier_phi_37_36_ladder_2 = isnan(_2156) ? _1935 : (isnan(_1935) ? _2156 : min(_1935, _2156));
        }
        else
        {
            frontier_phi_37_36_ladder = _1937;
            frontier_phi_37_36_ladder_1 = _1936;
            frontier_phi_37_36_ladder_2 = _1935;
        }
        _2001 = frontier_phi_37_36_ladder_2;
        _2003 = frontier_phi_37_36_ladder_1;
        _2005 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2001 = _1935;
        _2003 = _1936;
        _2005 = _1937;
    }
    uvec4 _2010 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _2012 = _2010.x * 14u;
    uint _2013 = _2012 + 13u;
    float _2018 = _622 + (-1.0);
    float _2021 = (cbLight._m0[_2013].x * _2018) + 1.0;
    float _2022 = (cbLight._m0[_2013].y * _2018) + 1.0;
    uint _2024 = _2012 + 4u;
    float _2035 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_514, _515, _516));
    float _2038 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    float _2039 = cbLight._m0[_2024].x * _2001;
    float _2040 = cbLight._m0[_2024].y * _2003;
    float _2041 = cbLight._m0[_2024].z * _2005;
    uint _2042 = _2012 + 5u;
    uint _2048 = _2012 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_514, _515, _516));
    float _2057 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    float _2230;
    float _2231;
    float _2232;
    if (_519 == 0.0)
    {
        float _4351 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _4362 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2167 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
        float _2169 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
        _2230 = ((cbLight._m0[_2042].x * _2057) * _2169) + ((_2039 * _2038) * _2167);
        _2231 = ((_2057 * cbLight._m0[_2042].y) * _2169) + ((_2040 * _2038) * _2167);
        _2232 = ((_2057 * cbLight._m0[_2042].z) * _2169) + ((_2041 * _2038) * _2167);
    }
    else
    {
        float _2179 = _2035 + _519;
        float _2182 = (_519 * 2.0) + 1.0;
        float _2183 = (isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) / _2182;
        float _2190 = _2054 + _519;
        float _2192 = (isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))) / _2182;
        _2230 = (((_2192 * cbLight._m0[_2042].x) * _2057) + ((_2039 * _2183) * _2038)) * 0.3183098733425140380859375;
        _2231 = (((_2192 * cbLight._m0[_2042].y) * _2057) + ((_2040 * _2183) * _2038)) * 0.3183098733425140380859375;
        _2232 = (((_2192 * cbLight._m0[_2042].z) * _2057) + ((_2041 * _2183) * _2038)) * 0.3183098733425140380859375;
    }
    uint _2236 = _2012 + 8u;
    float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _518) * 0.949999988079071044921875);
    float _2253 = _2252 * _2252;
    float _2254 = cbLight._m0[_2012].x + _382;
    float _2255 = cbLight._m0[_2012].y + _383;
    float _2256 = cbLight._m0[_2012].z + _384;
    float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
    float _2261 = _2260 * _2254;
    float _2262 = _2260 * _2255;
    float _2263 = _2260 * _2256;
    float _2264 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2012].xyz));
    float _4383 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2268 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2269 = dot(vec3(_514, _515, _516), vec3(_2261, _2262, _2263));
    float _4405 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2261, _2262, _2263));
    float _4416 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2253 * _2253;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2293 = 1.0 - _2253;
    float _2304 = (0.5 / (((_2268 * ((_2267 * _2293) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2293) + _2253) * _2267))) * _2267;
    float _4427 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    uint _2322 = _2012 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _518) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2048].x + _382;
    float _2339 = cbLight._m0[_2048].y + _383;
    float _2340 = cbLight._m0[_2048].z + _384;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2048].xyz));
    float _4438 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2352 = dot(vec3(_514, _515, _516), vec3(_2345, _2346, _2347));
    float _4449 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2345, _2346, _2347));
    float _4460 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2374 = 1.0 - _2337;
    float _2384 = (0.5 / (((_2268 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2374) + _2337) * _2351))) * _2351;
    float _4471 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2396 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2057) + ((((cbLight._m0[_2236].x * _2001) * _2292) * _2306) * _2038);
    float _2397 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2057) + ((((cbLight._m0[_2236].y * _2003) * _2292) * _2306) * _2038);
    float _2398 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2057) + ((((cbLight._m0[_2236].z * _2005) * _2292) * _2306) * _2038);
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_2010.y == 0u)
    {
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2442)));
        float _2463 = (log2(_1788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            uint _2881 = 0u;
            uint _2890;
            bool _2891;
            for (;;)
            {
                _2890 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                _2891 = _2890 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2891)
                {
                    frontier_phi_66_pred = _2877;
                    frontier_phi_66_pred_1 = _2876;
                    frontier_phi_66_pred_2 = _2875;
                    frontier_phi_66_pred_3 = _2878;
                    frontier_phi_66_pred_4 = _2880;
                    frontier_phi_66_pred_5 = _2879;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2890;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2881 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        float _3066 = _3065.x;
                        float _3067 = _3065.y;
                        float _3068 = _3065.z;
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        uint _3087 = (_3030 * 48u) + 12u;
                        vec2 _3095 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x));
                        float _3101 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
                        float _3102 = _3101 * _1786;
                        float _3103 = _3101 * _1787;
                        float _3104 = _3101 * _1788;
                        float _3105 = _3046.x - _1786;
                        float _3106 = _3046.y - _1787;
                        float _3107 = _3046.z - _1788;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_578, _581, _584), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3046.w);
                        float _4492 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3122 = sqrt(_3108) * _3065.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3127 = 1.0 - _3126;
                        float _3129 = (_3127 * _3127) * _519;
                        float _3132 = ((_3127 * _3115) + _3126) + _3129;
                        float _3137 = _3122 * _3122;
                        float _3142 = ((isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))) * _3121) / (((_3129 * 2.0) + 1.0) * ((_3137 * 0.699999988079071044921875) + 1.0));
                        float _3146 = dot(vec3(_3112, _3113, _3114), vec3(_3102, _3103, _3104));
                        float _4508 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3153 = dot(vec3((-0.0) - _3102, (-0.0) - _3103, (-0.0) - _3104), vec3(_578, _581, _584)) + 1.0;
                        float _3155 = (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * 0.5;
                        float _3163 = ((_3155 * _3155) * _3095.x) * exp2((_3095.y * 32.0) * log2(isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))));
                        float _3165 = _519 / (_519 + 1.0);
                        float _3181 = (-0.0) - _1786;
                        float _3182 = (-0.0) - _1787;
                        float _3183 = (-0.0) - _1788;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3197 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                        float _3198 = 1.0 - _646;
                        float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                        float _3206 = _3205 * _3205;
                        float _3207 = _3206 * _3206;
                        float _3208 = _3188 + _3112;
                        float _3209 = _3189 + _3113;
                        float _3210 = _3190 + _3114;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3218 = dot(vec3(_578, _581, _584), vec3(_3188, _3189, _3190));
                        float _4524 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3222 = dot(vec3(_578, _581, _584), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                        float _4535 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                        float _3230 = _3125 * _3206;
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3115) + _3231;
                        float _4546 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3236 = 1.0 - _3206;
                        float _3246 = (0.5 / (((_3235 * ((_3221 * _3236) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3206) * _3221))) * _3235;
                        float _4557 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3257 = (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3229 * _3229) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2950 = (((((_3066 * 0.3183098733425140380859375) * _3165) * _3163) + _3066) * _3142) + _3023;
                        _2951 = (((((_3067 * 0.3183098733425140380859375) * _3165) * _3163) + _3067) * _3142) + _3024;
                        _2952 = (((((_3068 * 0.3183098733425140380859375) * _3165) * _3163) + _3068) * _3142) + _3025;
                        _2947 = (_3257 * _3082.x) + _3020;
                        _2948 = (_3257 * _3082.y) + _3021;
                        _2949 = (_3257 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_66_pred = _2949;
                    frontier_phi_66_pred_1 = _2948;
                    frontier_phi_66_pred_2 = _2947;
                    frontier_phi_66_pred_3 = _2950;
                    frontier_phi_66_pred_4 = _2952;
                    frontier_phi_66_pred_5 = _2951;
                }
                _2697 = frontier_phi_66_pred;
                _2695 = frontier_phi_66_pred_1;
                _2693 = frontier_phi_66_pred_2;
                _2699 = frontier_phi_66_pred_3;
                _2703 = frontier_phi_66_pred_4;
                _2701 = frontier_phi_66_pred_5;
                uint _2882 = _2881 + 1u;
                if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2875 = _2693;
                    _2876 = _2695;
                    _2877 = _2697;
                    _2878 = _2699;
                    _2879 = _2701;
                    _2880 = _2703;
                    _2881 = _2882;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((4294967295u << _2709) & _2473) == 0u)
        {
            _2843 = _2692;
            _2845 = _2694;
            _2847 = _2696;
            _2849 = _2698;
            _2851 = _2700;
            _2853 = _2702;
        }
        else
        {
            float _2868 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
            float _2869 = _2868 * _1786;
            float _2870 = _2868 * _1787;
            float _2871 = _2868 * _1788;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _3003 = _2692;
                float _3004 = _2694;
                float _3005 = _2696;
                float _3006 = _2698;
                float _3007 = _2700;
                float _3008 = _2702;
                uint _3009 = _2709;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3019)
                    {
                        frontier_phi_77_pred = _3005;
                        frontier_phi_77_pred_1 = _3004;
                        frontier_phi_77_pred_2 = _3003;
                        frontier_phi_77_pred_3 = _3008;
                        frontier_phi_77_pred_4 = _3007;
                        frontier_phi_77_pred_5 = _3006;
                    }
                    else
                    {
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3284 = _3003;
                        float _3285 = _3004;
                        float _3286 = _3005;
                        float _3287 = _3006;
                        float _3288 = _3007;
                        float _3289 = _3008;
                        uint _3290 = _3018;
                        uint _3291;
                        vec4 _3316;
                        float _3317;
                        vec4 _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        vec3 _3347;
                        vec2 _3356;
                        vec4 _3371;
                        vec4 _3387;
                        float _3434;
                        bool _3435;
                        for (;;)
                        {
                            uint _3301 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3290));
                            _3291 = (_3290 + 4294967295u) & _3290;
                            uint _3303 = _3301 * 40u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            _3317 = _3316.w;
                            uint _3319 = (_3301 * 40u) + 4u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.x;
                            _3334 = _3332.y;
                            _3335 = _3332.z;
                            uint _3337 = (_3301 * 40u) + 8u;
                            _3347 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x));
                            uint _3349 = (_3301 * 40u) + 12u;
                            _3356 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x));
                            uint _3358 = (_3301 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3374 = (_3301 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3390 = (_3301 * 40u) + 24u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3409 = (_3301 * 40u) + 28u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3434 = fma(_1788, _3422.z, fma(_1787, _3422.y, _3422.x * _1786)) + _3422.w;
                            _3435 = !((fma(_1788, _3403.z, fma(_1787, _3403.y, _3403.x * _1786)) + _3403.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3435)
                            {
                                float _3461 = _3316.x - _1786;
                                float _3462 = _3316.y - _1787;
                                float _3463 = _3316.z - _1788;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3317 * _3317));
                                float _4568 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3479 = sqrt(_3464) * _3332.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3483 = 1.0 - _3482;
                                float _3485 = (_3483 * _3483) * _519;
                                float _3488 = ((_3483 * dot(vec3(_3468, _3469, _3470), vec3(_578, _581, _584))) + _3482) + _3485;
                                float _3493 = _3479 * _3479;
                                float _3498 = (fma(_1788, _3371.z, fma(_1787, _3371.y, _3371.x * _1786)) + _3371.w) / _3434;
                                float _3499 = (fma(_1788, _3387.z, fma(_1787, _3387.y, _3387.x * _1786)) + _3387.w) / _3434;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4584 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3475) / (((_3485 * 2.0) + 1.0) * ((_3493 * 0.699999988079071044921875) + 1.0)));
                                float _3506 = (-0.0) - _2869;
                                float _3507 = (-0.0) - _2870;
                                float _3508 = (-0.0) - _2871;
                                float _3509 = dot(vec3(_3468, _3469, _3470), vec3(_2869, _2870, _2871));
                                float _4595 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3516 = dot(vec3(_3506, _3507, _3508), vec3(_578, _581, _584)) + 1.0;
                                float _3518 = (isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0))) * 0.5;
                                float _3525 = ((_3518 * _3518) * _3356.x) * exp2((_3356.y * 32.0) * log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))));
                                float _3527 = _519 / (_519 + 1.0);
                                float _3548 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                                float _3549 = 1.0 - _646;
                                float _3556 = sqrt(1.0 - ((1.0 - (_3549 * _3549)) * (1.0 - (_3548 * _3548))));
                                float _3557 = _3556 * _3556;
                                float _3558 = _3557 * _3557;
                                float _3559 = _3468 - _2869;
                                float _3560 = _3469 - _2870;
                                float _3561 = _3470 - _2871;
                                float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                                float _3569 = dot(vec3(_578, _581, _584), vec3(_3506, _3507, _3508));
                                float _4611 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3573 = dot(vec3(_578, _581, _584), vec3(_3565 * _3559, _3565 * _3560, _3565 * _3561));
                                float _4622 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3580 = ((_3576 * _3576) * (_3558 + (-1.0))) + 1.0;
                                float _3581 = _3481 * _3557;
                                float _3582 = _3581 * _3581;
                                float _3588 = ((1.0 - _3582) * dot(vec3(_578, _581, _584), vec3(_3468, _3469, _3470))) + _3582;
                                float _4633 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3590 = 1.0 - _3557;
                                float _3600 = (0.5 / (((_3589 * ((_3572 * _3590) + _3557)) + 9.9999999392252902907785028219223e-09) + (((_3589 * _3590) + _3557) * _3572))) * _3589;
                                float _4644 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3610 = (_3504 * _3475) * (((_3558 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3580 * _3580) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3610 * _3347.z;
                                frontier_phi_83_pred_1 = _3610 * _3347.y;
                                frontier_phi_83_pred_2 = _3610 * _3347.x;
                                frontier_phi_83_pred_3 = ((((_3335 * 0.3183098733425140380859375) * _3527) * _3525) + _3335) * _3505;
                                frontier_phi_83_pred_4 = ((((_3334 * 0.3183098733425140380859375) * _3527) * _3525) + _3334) * _3505;
                                frontier_phi_83_pred_5 = ((((_3333 * 0.3183098733425140380859375) * _3527) * _3525) + _3333) * _3505;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_83_pred;
                            _3615 = frontier_phi_83_pred_1;
                            _3614 = frontier_phi_83_pred_2;
                            _3619 = frontier_phi_83_pred_3;
                            _3618 = frontier_phi_83_pred_4;
                            _3617 = frontier_phi_83_pred_5;
                            _3274 = _3617 + _3287;
                            _3275 = _3618 + _3288;
                            _3276 = _3619 + _3289;
                            _3271 = _3614 + _3284;
                            _3272 = _3615 + _3285;
                            _3273 = _3616 + _3286;
                            if (_3291 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3291;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3273;
                        frontier_phi_77_pred_1 = _3272;
                        frontier_phi_77_pred_2 = _3271;
                        frontier_phi_77_pred_3 = _3276;
                        frontier_phi_77_pred_4 = _3275;
                        frontier_phi_77_pred_5 = _3274;
                    }
                    _2848 = frontier_phi_77_pred;
                    _2846 = frontier_phi_77_pred_1;
                    _2844 = frontier_phi_77_pred_2;
                    _2854 = frontier_phi_77_pred_3;
                    _2852 = frontier_phi_77_pred_4;
                    _2850 = frontier_phi_77_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2844;
                        _3004 = _2846;
                        _3005 = _2848;
                        _3006 = _2850;
                        _3007 = _2852;
                        _3008 = _2854;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2854;
                frontier_phi_58_59_ladder_1 = _2852;
                frontier_phi_58_59_ladder_2 = _2850;
                frontier_phi_58_59_ladder_3 = _2846;
                frontier_phi_58_59_ladder_4 = _2844;
                frontier_phi_58_59_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_58_59_ladder = _2702;
                frontier_phi_58_59_ladder_1 = _2700;
                frontier_phi_58_59_ladder_2 = _2698;
                frontier_phi_58_59_ladder_3 = _2694;
                frontier_phi_58_59_ladder_4 = _2692;
                frontier_phi_58_59_ladder_5 = _2696;
            }
            _2843 = frontier_phi_58_59_ladder_4;
            _2845 = frontier_phi_58_59_ladder_3;
            _2847 = frontier_phi_58_59_ladder_5;
            _2849 = frontier_phi_58_59_ladder_2;
            _2851 = frontier_phi_58_59_ladder_1;
            _2853 = frontier_phi_58_59_ladder;
        }
        float _2858 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2486 = (_2858 * _2849) + _2230;
        _2488 = (_2858 * _2851) + _2231;
        _2490 = (_2858 * _2853) + _2232;
        _2492 = ((_2843 * 0.039999999105930328369140625) * _2858) + _2396;
        _2494 = ((_2845 * 0.039999999105930328369140625) * _2858) + _2397;
        _2496 = ((_2847 * 0.039999999105930328369140625) * _2858) + _2398;
    }
    else
    {
        _2486 = _2230;
        _2488 = _2231;
        _2490 = _2232;
        _2492 = _2396;
        _2494 = _2397;
        _2496 = _2398;
    }
    float _2510 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2511 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2512 = cbSceneParam._m0[86u].x * (_1698 + ((_645 * cbMtdParam._m0[13u].y) * dot(vec3(_514, _515, _516), vec3(_210, _211, _212))));
    float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
    float _2514 = isnan(_2511) ? _558 : (isnan(_558) ? _2511 : min(_558, _2511));
    vec4 _2516 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2513, _2514), 0.0);
    float _2518 = _2516.x;
    bool _2539 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2518)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2518))) > _538;
    float _2540 = _2539 ? _2513 : _557;
    float _2541 = _2539 ? _2514 : _558;
    vec4 _2543 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2540, _2541));
    vec4 _2548 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2540, _2541));
    float _2550 = _2548.x;
    float _2570 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2550)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2550))) - _538;
    bool _2580 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2584 = (isnan(_2570) ? 0.0 : (isnan(0.0) ? _2570 : max(0.0, _2570))) * (-1.44269502162933349609375);
    float _4675 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4686 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4697 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2611 = 0.959999978542327880859375 - (exp2(log2(1.0 - _637) * 5.0) * 0.959999978542327880859375);
    float _2614 = ((_2543.x * _2611) * exp2(_2584 * (_2580 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2617 = ((_2543.y * _2611) * exp2(_2584 * (_2580 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2620 = ((_2543.z * _2611) * exp2(_2584 * (_2580 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2628 = (_2614 + (((((_1675 * _1723.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1468) * _1739)) + _2492) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2486 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _622))) - _2614) * cbMtdParam._m0[15u].x);
    float _2630 = (_2617 + (((((_1675 * _1723.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1468) * _1739)) + _2494) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2488 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _622))) - _2617) * cbMtdParam._m0[15u].x);
    float _2632 = (_2620 + (((((_1675 * _1723.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1468) * _1739)) + _2496) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2490 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _622))) - _2620) * cbMtdParam._m0[15u].x);
    float _2637 = cbInstanceData._m0[_597 + 6u].w * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)));
    float _2642 = _557 / cbSceneParam._m0[86u].x;
    float _2643 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2657 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2659 = _2657.x;
    float _2660 = _2657.y;
    float _2661 = _2657.z;
    float _2662 = _2657.w;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2718 = _2717 / _538;
        float _2729 = _2718 * _280;
        float _2730 = _281 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2732 = _2718 * _282;
        float _2734 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2735 = _2734 + cbSceneParam._m0[79u].w;
        float _2736 = cbSceneParam._m0[79u].w - _2730;
        float _2742 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2732 * _2732));
        float _2745 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2742;
        float _2750 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2751 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2960;
        if (abs((_2731 - _2734) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2960 = ((((_2735 > 0.0) ? exp2(_2750 * _2735) : (2.0 - exp2(_2751 * _2735))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2745;
        }
        else
        {
            float _2904 = 1.0 / cbSceneParam._m0[80u].x;
            float _2905 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : max(_2735, _2736));
            float _2906 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : min(_2735, _2736));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            _2960 = ((abs(_2742 / _2731) * cbSceneParam._m0[80u].y) * ((((_2915 - _2916) * 2.0) - ((exp2(_2750 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0)))) - exp2(_2750 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))))) * _2904)) - ((exp2(_2751 * _2915) - exp2(_2751 * _2916)) * _2904))) + (_2745 * cbSceneParam._m0[80u].z);
        }
        vec4 _2962 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, 1.0), 0.0);
        float _2971 = exp2((_2960 * (-1.44269502162933349609375)) * (1.0 - _2962.w));
        float _2972 = log2(_2971);
        float _2988 = log2(_2662);
        _2753 = (exp2(_2988 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].x)) * _2962.x) / cbSceneParam._m0[78u].x)) + _2659;
        _2755 = (exp2(_2988 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].y)) * _2962.y) / cbSceneParam._m0[78u].y)) + _2660;
        _2757 = (exp2(_2988 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].z)) * _2962.z) / cbSceneParam._m0[78u].z)) + _2661;
        _2759 = _2971 * _2662;
    }
    else
    {
        _2753 = _2659;
        _2755 = _2660;
        _2757 = _2661;
        _2759 = _2662;
    }
    bool _2998;
    float _2814;
    vec4 _2817;
    float _2819;
    vec4 _2821;
    float _2829;
    float _2830;
    float _2831;
    float _2832;
    bool _2842;
    for (;;)
    {
        bool _2771 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2772 = log2(_2759);
        float _2779 = exp2(_2772 * cbSceneParam._m0[78u].x) * _2628;
        float _2780 = exp2(_2772 * cbSceneParam._m0[78u].y) * _2630;
        float _2781 = exp2(_2772 * cbSceneParam._m0[78u].z) * _2632;
        vec4 _2789 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_557, _558));
        float _2791 = _2789.x;
        float _2812 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2791)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2791))) - _538) * cbMtdParam._m0[14u].z;
        float _4748 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        _2814 = _2637 * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)));
        float _2815 = _545 + (-0.5);
        _2817 = cbMtdParam._m0[1u];
        _2819 = _2817.y * _2815;
        _2821 = cbMatDynParam._m0[0u];
        float _2828 = (roundEven(_2821.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2829 = _2828 * (_2771 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
        _2830 = _2828 * (_2771 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
        _2831 = _2828 * (_2771 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2757)));
        _2832 = _2815 * 0.999000012874603271484375;
        _2842 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2842)
        {
            if ((cbInstanceData._m0[_597 + 7u].x + _2832) < 0.5)
            {
                _2998 = true;
                break;
            }
        }
        uint _2939 = _598 + uint(_2821.w);
        if ((cbInstanceData._m0[_2939].w < 1.0) && ((cbInstanceData._m0[_2939].w + _2832) < 0.5))
        {
            _2998 = true;
            break;
        }
        if ((_2819 + 1.0) < _2817.x)
        {
            _2998 = true;
            break;
        }
        _2998 = false;
        break;
    }
    float _3262;
    if (_2998)
    {
        discard_state = true;
        _3262 = 0.0;
    }
    else
    {
        _3262 = _2814;
    }
    SV_Target.x = _2829;
    SV_Target.y = _2830;
    SV_Target.z = _2831;
    SV_Target.w = _3262;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2814;
    discard_exit();
}


