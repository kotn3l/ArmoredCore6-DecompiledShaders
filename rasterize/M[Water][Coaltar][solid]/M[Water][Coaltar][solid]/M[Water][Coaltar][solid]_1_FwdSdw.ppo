#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _285 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _286 = _285 * _274;
    float _287 = _285 * _275;
    float _288 = _285 * _276;
    float _296 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _297 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _311 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_296 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_297 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _319 = (_311.x * 2.0) + (-1.0);
    float _321 = (_311.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3705 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    float _331 = fma(_328, _211, fma(_321, _218, _319 * _204));
    float _334 = fma(_328, _212, fma(_321, _219, _319 * _205));
    float _337 = fma(_328, _213, fma(_321, _220, _319 * _206));
    float _341 = inversesqrt(dot(vec3(_331, _334, _337), vec3(_331, _334, _337)));
    float _350 = (dot(vec4(_286, _287, _288, 0.0), vec4(_341 * _331, _341 * _334, _341 * _337, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _363 = dot(vec3(_274, _275, _276), vec3(_204, _205, _206));
    float _366 = dot(vec3(_274, _275, _276), vec3(_218, _219, _220));
    float _369 = dot(vec3(_274, _275, _276), vec3(_211, _212, _213));
    float _375 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _396 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _416 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_363 * cbMtdParam._m0[12u].x) * _375) * _396) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_366 * cbMtdParam._m0[12u].x) * _375) * _396) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _439 = dot(vec4(_286, _287, _288, 0.0), vec4(_211, _212, _213, 0.0)) - cbMtdParam._m0[12u].w;
    float _3716 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _446 = exp2(log2(1.0 - (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _461 = (((((sin(_350) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _416.x) * cbMtdParam._m0[9u].x) * ((_446 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _470 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _416.y) * cbMtdParam._m0[9u].y) * ((_446 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_350 * 0.85000002384185791015625) + 1.0);
    float _479 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _416.z) * cbMtdParam._m0[9u].z) * ((_446 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_350 * 0.699999988079071044921875) + 1.0);
    vec4 _492 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    float _499 = (_492.x * 2.0) + (-1.0);
    float _500 = (_492.y * 2.0) + (-1.0);
    float _501 = dot(vec2(_499, _500), vec2(_499, _500));
    float _3732 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _506 = sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))));
    float _508 = cbMtdParam._m0[14u].w + _492.z;
    vec4 _520 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _296) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _297) + cbTextureTilingScale._m0[0u].w));
    float _524 = cbMtdParam._m0[13u].w * _520.x;
    float _542 = fma(_506, _211, fma(_500, _218, _499 * _204));
    float _545 = fma(_506, _212, fma(_500, _219, _499 * _205));
    float _548 = fma(_506, _213, fma(_500, _220, _499 * _206));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3743 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _556 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _557 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3759 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3770 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3781 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _606 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _609 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _622 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = (_622 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _630 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_624].x;
    float _631 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_624].y;
    float _632 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_624].z;
    float _3792 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _647 = _644.x * TEXCOORD_1.w;
    float _648 = dot(vec3(_553, _554, _555), vec3(_286, _287, _288));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _553) - _286;
    float _656 = (_651 * _554) - _287;
    float _657 = (_651 * _555) - _288;
    float _661 = abs(dot(vec3(_286, _287, _288), vec3(_553, _554, _555)));
    float _3825 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _670 = 10.0 / (_576 + 10.0);
    float _671 = sqrt(_556);
    float _683 = exp2((_671 * 5.0) * log2(1.0 - (_662 * 0.999000012874603271484375))) / (4.0 - (_671 * 3.0));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _754 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _758 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _783 = _715 + _553;
        float _784 = _719 + _554;
        float _785 = _723 + _555;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_553, _554, _555), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3873 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_553, _554, _555), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3906 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_553, _554, _555), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3939 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1070 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1074 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1097 = _715 + _553;
        float _1098 = _719 + _554;
        float _1099 = _723 + _555;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_553, _554, _555), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4002 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_553, _554, _555), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4035 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_553, _554, _555), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4068 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1026;
        _1336 = _1026;
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1039)) + _1039;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _655 * 0.5;
    float _1404 = _656 * 0.5;
    float _1405 = _657 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1519 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1523 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1527 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1530 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1533 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1536 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1564;
        if (_1530 > 0.0)
        {
            _1564 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1564 = frontier_phi_14_12_ladder;
        }
        float _1787;
        if (_1533 > 0.0)
        {
            _1787 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1787 = frontier_phi_23_19_ladder;
        }
        float _2051;
        if (_1536 > 0.0)
        {
            _2051 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2051 = frontier_phi_35_30_ladder;
        }
        float _2053 = isnan(_1787) ? _1564 : (isnan(_1564) ? _1787 : min(_1564, _1787));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1530) + _1519;
        float _2059 = (_2054 * _1533) + _1523;
        float _2060 = (_2054 * _1536) + _1527;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2061;
        float _2065 = _2061 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 > _2065) || ((_2059 < _2063) || ((_2058 < _2063) || (_2058 > _2065))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_13_35_ladder = _2214.x * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2214.y * cbModelParam._m0[1u].y;
        }
        _1552 = frontier_phi_13_35_ladder;
        _1554 = frontier_phi_13_35_ladder_2;
        _1556 = frontier_phi_13_35_ladder_1;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1472);
        _1552 = _1540.x * cbModelParam._m0[1u].y;
        _1554 = _1540.y * cbModelParam._m0[1u].y;
        _1556 = _1540.z * cbModelParam._m0[1u].y;
    }
    float _1560 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1560 : min(cbModelParam._m0[25u].w, _1560));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1630 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1633 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1792;
        if (_1627 > 0.0)
        {
            _1792 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1792 = frontier_phi_25_21_ladder;
        }
        float _2078;
        if (_1630 > 0.0)
        {
            _2078 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2078 = frontier_phi_37_32_ladder;
        }
        float _2397;
        if (_1633 > 0.0)
        {
            _2397 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2397 = frontier_phi_46_44_ladder;
        }
        float _2399 = isnan(_2078) ? _1792 : (isnan(_1792) ? _2078 : min(_1792, _2078));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1627) + _1616;
        float _2405 = (_2400 * _1630) + _1620;
        float _2406 = (_2400 * _1633) + _1624;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2407;
        float _2410 = _2407 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2406 > _2410) || ((_2406 < _2408) || ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 < _2408) || (_2404 > _2410))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2406, cbModelParam._m0[17u].z, fma(_2405, cbModelParam._m0[17u].y, _2404 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2406, cbModelParam._m0[18u].z, fma(_2405, cbModelParam._m0[18u].y, _2404 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2406, cbModelParam._m0[19u].z, fma(_2405, cbModelParam._m0[19u].y, _2404 * cbModelParam._m0[19u].x))), _1561);
            frontier_phi_22_46_ladder = _2679.x * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2679.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2679.y * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_22_46_ladder;
        _1654 = frontier_phi_22_46_ladder_2;
        _1656 = frontier_phi_22_46_ladder_1;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1561);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1668 = ((((1.0 - _683) * ((_671 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_683 * _671)) * _647;
    float _1669 = _1668 * ((cbModelParam._m0[1u].w * (_1652 - _1552)) + _1552);
    float _1670 = _1668 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1671 = _1668 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    float _1691 = _582 / cbSceneParam._m0[86u].x;
    float _1699 = (cbSceneParam._m0[88u].y * (1.0 - _556)) + cbSceneParam._m0[88u].z;
    float _4194 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1701 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 5.0;
    float _1706 = (_670 * cbMtdParam._m0[13u].z) * dot(vec3(_553, _554, _555), vec3(1.0, 0.0, 0.0));
    vec4 _1716 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1706 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1706 + _1691) * cbSceneParam._m0[86u].x, _583), _1701).w) + _1691) * cbSceneParam._m0[86u].x, _583), _1701);
    float _1732 = 1.0 - _1716.w;
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1779 = _1766 / _1778;
    float _1780 = _1770 / _1778;
    float _1781 = _1774 / _1778;
    float _1928;
    float _1929;
    float _1930;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1808 = ((uint(_1781 > cbSceneParam._m0[59u].y) + uint(_1781 > cbSceneParam._m0[59u].x)) + uint(_1781 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1809 = _1808 + 43u;
        uint _1817 = _1808 + 44u;
        uint _1825 = _1808 + 45u;
        uint _1833 = _1808 + 46u;
        float _1844 = fma(_1778, cbSceneParam._m0[_1809].w, fma(_1774, cbSceneParam._m0[_1809].z, fma(_1770, cbSceneParam._m0[_1809].y, _1766 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1778, cbSceneParam._m0[_1817].w, fma(_1774, cbSceneParam._m0[_1817].z, fma(_1770, cbSceneParam._m0[_1817].y, _1766 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1778, cbSceneParam._m0[_1833].w, fma(_1774, cbSceneParam._m0[_1833].z, fma(_1770, cbSceneParam._m0[_1833].y, _1766 * cbSceneParam._m0[_1833].x)));
        float _1861 = cbSceneParam._m0[33u].z * _1856;
        float _1863 = cbSceneParam._m0[33u].w * _1856;
        float _1866 = fma(_1778, cbSceneParam._m0[_1825].w, fma(_1774, cbSceneParam._m0[_1825].z, fma(_1770, cbSceneParam._m0[_1825].y, _1766 * cbSceneParam._m0[_1825].x))) / _1856;
        float _1914 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
        float _4205 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1921 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1861 + _1844) / _1856, (_1863 + _1848) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 + _1844) / _1856, (_1848 - _1861) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1861) / _1856, (_1848 - _1863) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1863) / _1856, (_1861 + _1848) / _1856), _1866), 0.0)).x), vec4(0.25)));
        _1928 = 1.0 - (_1921 * cbSceneParam._m0[34u].x);
        _1929 = 1.0 - (_1921 * cbSceneParam._m0[34u].y);
        _1930 = 1.0 - (_1921 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1928 = 1.0;
        _1929 = 1.0;
        _1930 = 1.0;
    }
    float _1994;
    float _1996;
    float _1998;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1982 = fma(_1778, cbSceneParam._m0[63u].w, fma(_1774, cbSceneParam._m0[63u].z, fma(_1770, cbSceneParam._m0[63u].y, _1766 * cbSceneParam._m0[63u].x)));
        float _1983 = fma(_1778, cbSceneParam._m0[60u].w, fma(_1774, cbSceneParam._m0[60u].z, fma(_1770, cbSceneParam._m0[60u].y, _1766 * cbSceneParam._m0[60u].x))) / _1982;
        float _1984 = fma(_1778, cbSceneParam._m0[61u].w, fma(_1774, cbSceneParam._m0[61u].z, fma(_1770, cbSceneParam._m0[61u].y, _1766 * cbSceneParam._m0[61u].x))) / _1982;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1983 >= cbSceneParam._m0[64u].x) && (_1984 >= cbSceneParam._m0[64u].y)) && (_1983 <= cbSceneParam._m0[64u].z)) && (_1984 <= cbSceneParam._m0[64u].w))
        {
            float _2091 = fma(_1778, cbSceneParam._m0[62u].w, fma(_1774, cbSceneParam._m0[62u].z, fma(_1770, cbSceneParam._m0[62u].y, _1766 * cbSceneParam._m0[62u].x))) / _1982;
            float _2095 = isnan(cbSceneParam._m0[41u].w) ? _2091 : (isnan(_2091) ? cbSceneParam._m0[41u].w : max(_2091, cbSceneParam._m0[41u].w));
            float _2138 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
            float _4221 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
            float _2145 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1983, cbSceneParam._m0[33u].w + _1984), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1983, _1984 - cbSceneParam._m0[33u].z), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].z, _1984 - cbSceneParam._m0[33u].w), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1984), _2095), 0.0)).x), vec4(0.25)));
            float _2149 = 1.0 - (_2145 * cbSceneParam._m0[34u].x);
            float _2150 = 1.0 - (_2145 * cbSceneParam._m0[34u].y);
            float _2151 = 1.0 - (_2145 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2151) ? _1930 : (isnan(_1930) ? _2151 : min(_1930, _2151));
            frontier_phi_34_33_ladder_1 = isnan(_2150) ? _1929 : (isnan(_1929) ? _2150 : min(_1929, _2150));
            frontier_phi_34_33_ladder_2 = isnan(_2149) ? _1928 : (isnan(_1928) ? _2149 : min(_1928, _2149));
        }
        else
        {
            frontier_phi_34_33_ladder = _1930;
            frontier_phi_34_33_ladder_1 = _1929;
            frontier_phi_34_33_ladder_2 = _1928;
        }
        _1994 = frontier_phi_34_33_ladder_2;
        _1996 = frontier_phi_34_33_ladder_1;
        _1998 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1994 = _1928;
        _1996 = _1929;
        _1998 = _1930;
    }
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_622 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2011 = _647 + (-1.0);
    float _2014 = (cbLight._m0[_2006].x * _2011) + 1.0;
    float _2015 = (cbLight._m0[_2006].y * _2011) + 1.0;
    uint _2017 = _2005 + 4u;
    float _2028 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_553, _554, _555));
    float _2031 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    float _2032 = cbLight._m0[_2017].x * _1994;
    float _2033 = cbLight._m0[_2017].y * _1996;
    float _2034 = cbLight._m0[_2017].z * _1998;
    uint _2035 = _2005 + 5u;
    uint _2041 = _2005 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_553, _554, _555));
    float _2050 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    float _2223;
    float _2224;
    float _2225;
    if (_557 == 0.0)
    {
        float _4257 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _4268 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2160 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
        float _2162 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
        _2223 = ((cbLight._m0[_2035].x * _2050) * _2162) + ((_2032 * _2031) * _2160);
        _2224 = ((_2050 * cbLight._m0[_2035].y) * _2162) + ((_2033 * _2031) * _2160);
        _2225 = ((_2050 * cbLight._m0[_2035].z) * _2162) + ((_2034 * _2031) * _2160);
    }
    else
    {
        float _2172 = _2028 + _557;
        float _2175 = (_557 * 2.0) + 1.0;
        float _2176 = (isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) / _2175;
        float _2183 = _2047 + _557;
        float _2185 = (isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) / _2175;
        _2223 = (((_2185 * cbLight._m0[_2035].x) * _2050) + ((_2032 * _2176) * _2031)) * 0.3183098733425140380859375;
        _2224 = (((_2185 * cbLight._m0[_2035].y) * _2050) + ((_2033 * _2176) * _2031)) * 0.3183098733425140380859375;
        _2225 = (((_2185 * cbLight._m0[_2035].z) * _2050) + ((_2034 * _2176) * _2031)) * 0.3183098733425140380859375;
    }
    uint _2229 = _2005 + 8u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _556) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_2005].x + _286;
    float _2248 = cbLight._m0[_2005].y + _287;
    float _2249 = cbLight._m0[_2005].z + _288;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2005].xyz));
    float _4289 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2261 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2262 = dot(vec3(_553, _554, _555), vec3(_2254, _2255, _2256));
    float _4311 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2254, _2255, _2256));
    float _4322 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2246 * _2246;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2286 = 1.0 - _2246;
    float _2297 = (0.5 / (((_2261 * ((_2260 * _2286) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2286) + _2246) * _2260))) * _2260;
    float _4333 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    uint _2315 = _2005 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _556) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2041].x + _286;
    float _2332 = cbLight._m0[_2041].y + _287;
    float _2333 = cbLight._m0[_2041].z + _288;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2041].xyz));
    float _4344 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2345 = dot(vec3(_553, _554, _555), vec3(_2338, _2339, _2340));
    float _4355 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2338, _2339, _2340));
    float _4366 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2330;
    float _2377 = (0.5 / (((_2261 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2367) + _2330) * _2344))) * _2344;
    float _4377 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2389 = (((_2366 * cbLight._m0[_2315].x) * _2379) * _2050) + ((((cbLight._m0[_2229].x * _1994) * _2285) * _2299) * _2031);
    float _2390 = (((_2366 * cbLight._m0[_2315].y) * _2379) * _2050) + ((((cbLight._m0[_2229].y * _1996) * _2285) * _2299) * _2031);
    float _2391 = (((_2366 * cbLight._m0[_2315].z) * _2379) * _2050) + ((((cbLight._m0[_2229].z * _1998) * _2285) * _2299) * _2031);
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    if (_2003.y == 0u)
    {
        uvec4 _2434 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2435 = _2434.x;
        uint _2446 = uint((float(_2434.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2435))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2435)));
        float _2456 = (log2(_1781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2457 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        uint _2460 = uint(isnan(14.0) ? _2457 : (isnan(_2457) ? 14.0 : min(_2457, 14.0)));
        uvec4 _2465 = texelFetch(g_lightClusterGridBuffer, int(((_2460 << 2u) + (_2446 << 6u)) >> 2u));
        uint _2466 = _2465.x;
        uint _2467 = _2434.z;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((((1u << ((_2467 >> 4u) & 15u)) + 4294967295u) & _2466) == 0u) || ((_2467 & 240u) == 0u))
        {
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
        }
        else
        {
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2460 << 5u) + (_2446 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2875)
                {
                    frontier_phi_61_pred = _2859;
                    frontier_phi_61_pred_1 = _2860;
                    frontier_phi_61_pred_2 = _2864;
                    frontier_phi_61_pred_3 = _2863;
                    frontier_phi_61_pred_4 = _2862;
                    frontier_phi_61_pred_5 = _2861;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2874;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2865 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        float _3029 = _3028.x;
                        float _3030 = _3028.y;
                        float _3031 = _3028.z;
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        uint _3050 = (_2993 * 48u) + 12u;
                        vec2 _3058 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x));
                        float _3064 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
                        float _3065 = _3064 * _1779;
                        float _3066 = _3064 * _1780;
                        float _3067 = _3064 * _1781;
                        float _3068 = _3009.x - _1779;
                        float _3069 = _3009.y - _1780;
                        float _3070 = _3009.z - _1781;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_603, _606, _609), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3009.w);
                        float _4398 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3085 = sqrt(_3071) * _3028.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3090 = 1.0 - _3089;
                        float _3092 = (_3090 * _3090) * _557;
                        float _3095 = ((_3090 * _3078) + _3089) + _3092;
                        float _3100 = _3085 * _3085;
                        float _3104 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3084) / (((_3092 * 2.0) + 1.0) * ((_3100 * 0.699999988079071044921875) + 1.0));
                        float _3108 = dot(vec3(_3075, _3076, _3077), vec3(_3065, _3066, _3067));
                        float _4414 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3115 = dot(vec3((-0.0) - _3065, (-0.0) - _3066, (-0.0) - _3067), vec3(_603, _606, _609)) + 1.0;
                        float _3117 = (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * 0.5;
                        float _3125 = ((_3117 * _3117) * _3058.x) * exp2((_3058.y * 32.0) * log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))));
                        float _3127 = _557 / (_557 + 1.0);
                        float _3143 = (-0.0) - _1779;
                        float _3144 = (-0.0) - _1780;
                        float _3145 = (-0.0) - _1781;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3159 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                        float _3160 = 1.0 - _671;
                        float _3167 = sqrt(1.0 - ((1.0 - (_3160 * _3160)) * (1.0 - (_3159 * _3159))));
                        float _3168 = _3167 * _3167;
                        float _3169 = _3168 * _3168;
                        float _3170 = _3150 + _3075;
                        float _3171 = _3151 + _3076;
                        float _3172 = _3152 + _3077;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3180 = dot(vec3(_603, _606, _609), vec3(_3150, _3151, _3152));
                        float _4430 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3183 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3184 = dot(vec3(_603, _606, _609), vec3(_3176 * _3170, _3176 * _3171, _3176 * _3172));
                        float _4441 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3191 = ((_3187 * _3187) * (_3169 + (-1.0))) + 1.0;
                        float _3192 = _3088 * _3168;
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3078) + _3193;
                        float _4452 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3197 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3198 = 1.0 - _3168;
                        float _3208 = (0.5 / (((_3197 * ((_3183 * _3198) + _3168)) + 9.9999999392252902907785028219223e-09) + (((_3197 * _3198) + _3168) * _3183))) * _3197;
                        float _4463 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3219 = (((_3169 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3191 * _3191) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2918 = (((((_3029 * 0.3183098733425140380859375) * _3127) * _3125) + _3029) * _3104) + _2986;
                        _2919 = (((((_3030 * 0.3183098733425140380859375) * _3127) * _3125) + _3030) * _3104) + _2987;
                        _2920 = (((((_3031 * 0.3183098733425140380859375) * _3127) * _3125) + _3031) * _3104) + _2988;
                        _2915 = (_3219 * _3045.x) + _2983;
                        _2916 = (_3219 * _3045.y) + _2984;
                        _2917 = (_3219 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_61_pred = _2915;
                    frontier_phi_61_pred_1 = _2916;
                    frontier_phi_61_pred_2 = _2920;
                    frontier_phi_61_pred_3 = _2919;
                    frontier_phi_61_pred_4 = _2918;
                    frontier_phi_61_pred_5 = _2917;
                }
                _2685 = frontier_phi_61_pred;
                _2687 = frontier_phi_61_pred_1;
                _2695 = frontier_phi_61_pred_2;
                _2693 = frontier_phi_61_pred_3;
                _2691 = frontier_phi_61_pred_4;
                _2689 = frontier_phi_61_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2685;
                    _2860 = _2687;
                    _2861 = _2689;
                    _2862 = _2691;
                    _2863 = _2693;
                    _2864 = _2695;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
        }
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.z;
        uint _2701 = (_2699 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2701) & _2466) == 0u)
        {
            _2827 = _2684;
            _2829 = _2686;
            _2831 = _2688;
            _2833 = _2690;
            _2835 = _2692;
            _2837 = _2694;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
            float _2853 = _2852 * _1779;
            float _2854 = _2852 * _1780;
            float _2855 = _2852 * _1781;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2701 < ((_2699 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2966 = _2684;
                float _2967 = _2686;
                float _2968 = _2688;
                float _2969 = _2690;
                float _2970 = _2692;
                float _2971 = _2694;
                uint _2972 = _2701;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2460 << 5u) + (_2446 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2982)
                    {
                        frontier_phi_67_pred = _2966;
                        frontier_phi_67_pred_1 = _2971;
                        frontier_phi_67_pred_2 = _2970;
                        frontier_phi_67_pred_3 = _2969;
                        frontier_phi_67_pred_4 = _2968;
                        frontier_phi_67_pred_5 = _2967;
                    }
                    else
                    {
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3237 = _2966;
                        float _3238 = _2967;
                        float _3239 = _2968;
                        float _3240 = _2969;
                        float _3241 = _2970;
                        float _3242 = _2971;
                        uint _3243 = _2981;
                        uint _3244;
                        vec4 _3269;
                        float _3270;
                        vec4 _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        vec3 _3300;
                        vec2 _3309;
                        vec4 _3324;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3254 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3243));
                            _3244 = (_3243 + 4294967295u) & _3243;
                            uint _3256 = _3254 * 40u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3270 = _3269.w;
                            uint _3272 = (_3254 * 40u) + 4u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.x;
                            _3287 = _3285.y;
                            _3288 = _3285.z;
                            uint _3290 = (_3254 * 40u) + 8u;
                            _3300 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x));
                            uint _3302 = (_3254 * 40u) + 12u;
                            _3309 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x));
                            uint _3311 = (_3254 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3254 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3254 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3254 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_1781, _3375.z, fma(_1780, _3375.y, _3375.x * _1779)) + _3375.w;
                            _3388 = !((fma(_1781, _3356.z, fma(_1780, _3356.y, _3356.x * _1779)) + _3356.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3388)
                            {
                                float _3414 = _3269.x - _1779;
                                float _3415 = _3269.y - _1780;
                                float _3416 = _3269.z - _1781;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3270 * _3270));
                                float _4474 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3432 = sqrt(_3417) * _3285.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3436 = 1.0 - _3435;
                                float _3438 = (_3436 * _3436) * _557;
                                float _3441 = ((_3436 * dot(vec3(_3421, _3422, _3423), vec3(_603, _606, _609))) + _3435) + _3438;
                                float _3446 = _3432 * _3432;
                                float _3451 = (fma(_1781, _3324.z, fma(_1780, _3324.y, _3324.x * _1779)) + _3324.w) / _3387;
                                float _3452 = (fma(_1781, _3340.z, fma(_1780, _3340.y, _3340.x * _1779)) + _3340.w) / _3387;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4490 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3428) / (((_3438 * 2.0) + 1.0) * ((_3446 * 0.699999988079071044921875) + 1.0)));
                                float _3459 = (-0.0) - _2853;
                                float _3460 = (-0.0) - _2854;
                                float _3461 = (-0.0) - _2855;
                                float _3462 = dot(vec3(_3421, _3422, _3423), vec3(_2853, _2854, _2855));
                                float _4501 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3469 = dot(vec3(_3459, _3460, _3461), vec3(_603, _606, _609)) + 1.0;
                                float _3471 = (isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * 0.5;
                                float _3478 = ((_3471 * _3471) * _3309.x) * exp2((_3309.y * 32.0) * log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))));
                                float _3480 = _557 / (_557 + 1.0);
                                float _3501 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3502 = 1.0 - _671;
                                float _3509 = sqrt(1.0 - ((1.0 - (_3502 * _3502)) * (1.0 - (_3501 * _3501))));
                                float _3510 = _3509 * _3509;
                                float _3511 = _3510 * _3510;
                                float _3512 = _3421 - _2853;
                                float _3513 = _3422 - _2854;
                                float _3514 = _3423 - _2855;
                                float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                                float _3522 = dot(vec3(_603, _606, _609), vec3(_3459, _3460, _3461));
                                float _4517 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3525 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3526 = dot(vec3(_603, _606, _609), vec3(_3518 * _3512, _3518 * _3513, _3518 * _3514));
                                float _4528 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3533 = ((_3529 * _3529) * (_3511 + (-1.0))) + 1.0;
                                float _3534 = _3434 * _3510;
                                float _3535 = _3534 * _3534;
                                float _3541 = ((1.0 - _3535) * dot(vec3(_603, _606, _609), vec3(_3421, _3422, _3423))) + _3535;
                                float _4539 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3543 = 1.0 - _3510;
                                float _3553 = (0.5 / (((_3542 * ((_3525 * _3543) + _3510)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3510) * _3525))) * _3542;
                                float _4550 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3563 = (_3457 * _3428) * (((_3511 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3533 * _3533) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = ((((_3288 * 0.3183098733425140380859375) * _3480) * _3478) + _3288) * _3458;
                                frontier_phi_73_pred_1 = ((((_3287 * 0.3183098733425140380859375) * _3480) * _3478) + _3287) * _3458;
                                frontier_phi_73_pred_2 = ((((_3286 * 0.3183098733425140380859375) * _3480) * _3478) + _3286) * _3458;
                                frontier_phi_73_pred_3 = _3563 * _3300.z;
                                frontier_phi_73_pred_4 = _3563 * _3300.y;
                                frontier_phi_73_pred_5 = _3563 * _3300.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3572 = frontier_phi_73_pred;
                            _3571 = frontier_phi_73_pred_1;
                            _3570 = frontier_phi_73_pred_2;
                            _3569 = frontier_phi_73_pred_3;
                            _3568 = frontier_phi_73_pred_4;
                            _3567 = frontier_phi_73_pred_5;
                            _3227 = _3570 + _3240;
                            _3228 = _3571 + _3241;
                            _3229 = _3572 + _3242;
                            _3224 = _3567 + _3237;
                            _3225 = _3568 + _3238;
                            _3226 = _3569 + _3239;
                            if (_3244 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3244;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3224;
                        frontier_phi_67_pred_1 = _3229;
                        frontier_phi_67_pred_2 = _3228;
                        frontier_phi_67_pred_3 = _3227;
                        frontier_phi_67_pred_4 = _3226;
                        frontier_phi_67_pred_5 = _3225;
                    }
                    _2828 = frontier_phi_67_pred;
                    _2838 = frontier_phi_67_pred_1;
                    _2836 = frontier_phi_67_pred_2;
                    _2834 = frontier_phi_67_pred_3;
                    _2832 = frontier_phi_67_pred_4;
                    _2830 = frontier_phi_67_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2828;
                        _2967 = _2830;
                        _2968 = _2832;
                        _2969 = _2834;
                        _2970 = _2836;
                        _2971 = _2838;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2836;
                frontier_phi_55_56_ladder_1 = _2838;
                frontier_phi_55_56_ladder_2 = _2834;
                frontier_phi_55_56_ladder_3 = _2832;
                frontier_phi_55_56_ladder_4 = _2830;
                frontier_phi_55_56_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_55_56_ladder = _2692;
                frontier_phi_55_56_ladder_1 = _2694;
                frontier_phi_55_56_ladder_2 = _2690;
                frontier_phi_55_56_ladder_3 = _2688;
                frontier_phi_55_56_ladder_4 = _2686;
                frontier_phi_55_56_ladder_5 = _2684;
            }
            _2827 = frontier_phi_55_56_ladder_5;
            _2829 = frontier_phi_55_56_ladder_4;
            _2831 = frontier_phi_55_56_ladder_3;
            _2833 = frontier_phi_55_56_ladder_2;
            _2835 = frontier_phi_55_56_ladder;
            _2837 = frontier_phi_55_56_ladder_1;
        }
        float _2842 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2479 = (_2842 * _2833) + _2223;
        _2481 = (_2842 * _2835) + _2224;
        _2483 = (_2842 * _2837) + _2225;
        _2485 = ((_2827 * 0.039999999105930328369140625) * _2842) + _2389;
        _2487 = ((_2829 * 0.039999999105930328369140625) * _2842) + _2390;
        _2489 = ((_2831 * 0.039999999105930328369140625) * _2842) + _2391;
    }
    else
    {
        _2479 = _2223;
        _2481 = _2224;
        _2483 = _2225;
        _2485 = _2389;
        _2487 = _2390;
        _2489 = _2391;
    }
    float _2503 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2504 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2505 = cbSceneParam._m0[86u].x * (_1691 + ((_670 * cbMtdParam._m0[13u].y) * dot(vec3(_553, _554, _555), vec3(_204, _205, _206))));
    float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
    float _2507 = isnan(_2504) ? _583 : (isnan(_583) ? _2504 : min(_583, _2504));
    vec4 _2509 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2506, _2507), 0.0);
    float _2511 = _2509.x;
    bool _2532 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2511)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2511))) > _576;
    float _2533 = _2532 ? _2506 : _582;
    float _2534 = _2532 ? _2507 : _583;
    vec4 _2536 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2533, _2534));
    vec4 _2541 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2533, _2534));
    float _2543 = _2541.x;
    float _2563 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2543)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2543))) - _576;
    bool _2573 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2577 = (isnan(_2563) ? 0.0 : (isnan(0.0) ? _2563 : max(0.0, _2563))) * (-1.44269502162933349609375);
    float _4581 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4592 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4603 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _2604 = 0.959999978542327880859375 - (exp2(log2(1.0 - _662) * 5.0) * 0.959999978542327880859375);
    float _2607 = ((_2536.x * _2604) * exp2(_2577 * (_2573 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2610 = ((_2536.y * _2604) * exp2(_2577 * (_2573 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2613 = ((_2536.z * _2604) * exp2(_2577 * (_2573 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2634 = _582 / cbSceneParam._m0[86u].x;
    float _2635 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2649 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2634, _2635, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2651 = _2649.x;
    float _2652 = _2649.y;
    float _2653 = _2649.z;
    float _2654 = _2649.w;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2709 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2710 = _2709 / _576;
        float _2721 = _2710 * _274;
        float _2722 = _275 * _2710;
        float _2723 = (-0.0) - _2722;
        float _2724 = _2710 * _276;
        float _2726 = (cbSceneParam._m0[77u].w * _2723) / _2709;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2722;
        float _2734 = sqrt(((_2721 * _2721) + (_2722 * _2722)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2709)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2743 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2723 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2743 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2890 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2928 = ((abs(_2734 / _2723) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2743 * _2899) - exp2(_2743 * _2900)) * _2888))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2634, _2635, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2654);
        _2745 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2651;
        _2747 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2652;
        _2749 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2653;
        _2751 = _2939 * _2654;
    }
    else
    {
        _2745 = _2651;
        _2747 = _2652;
        _2749 = _2653;
        _2751 = _2654;
    }
    bool _2763 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2764 = log2(_2751);
    float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * ((_2607 + (((((_1668 * _1716.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1461) * _1732)) + _2485) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2479 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _647))) - _2607) * cbMtdParam._m0[15u].x));
    float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * ((_2610 + (((((_1668 * _1716.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1461) * _1732)) + _2487) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2481 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _647))) - _2610) * cbMtdParam._m0[15u].x));
    float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * ((_2613 + (((((_1668 * _1716.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1461) * _1732)) + _2489) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2483 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _647))) - _2613) * cbMtdParam._m0[15u].x));
    vec4 _2781 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_582, _583));
    float _2783 = _2781.x;
    float _2804 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2783)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2783))) - _576) * cbMtdParam._m0[14u].z;
    float _4654 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2806 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * cbInstanceData._m0[_622 + 6u].w;
    float _2815 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2815 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.y = _2815 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2747)));
    SV_Target.z = _2815 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.w = _2806;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2806;
}


