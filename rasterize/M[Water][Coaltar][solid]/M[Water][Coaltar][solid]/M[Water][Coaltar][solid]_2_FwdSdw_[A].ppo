#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3828;
float _3829;
float _3830;
float _3831;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _293 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _294 = _293 * _282;
    float _295 = _293 * _283;
    float _296 = _293 * _284;
    float _304 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _305 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _319 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_304 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_305 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _327 = (_319.x * 2.0) + (-1.0);
    float _329 = (_319.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3840 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))));
    float _339 = fma(_336, _219, fma(_329, _226, _327 * _212));
    float _342 = fma(_336, _220, fma(_329, _227, _327 * _213));
    float _345 = fma(_336, _221, fma(_329, _228, _327 * _214));
    float _349 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    float _358 = (dot(vec4(_294, _295, _296, 0.0), vec4(_349 * _339, _349 * _342, _349 * _345, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _371 = dot(vec3(_282, _283, _284), vec3(_212, _213, _214));
    float _374 = dot(vec3(_282, _283, _284), vec3(_226, _227, _228));
    float _377 = dot(vec3(_282, _283, _284), vec3(_219, _220, _221));
    float _383 = inversesqrt(dot(vec3(_371, _374, _377), vec3(_371, _374, _377)));
    float _404 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _424 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_371 * cbMtdParam._m0[12u].x) * _383) * _404) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_374 * cbMtdParam._m0[12u].x) * _383) * _404) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _447 = dot(vec4(_294, _295, _296, 0.0), vec4(_219, _220, _221, 0.0)) - cbMtdParam._m0[12u].w;
    float _3851 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _454 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _469 = (((((sin(_358) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _424.x) * cbMtdParam._m0[9u].x) * ((_454 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _478 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _424.y) * cbMtdParam._m0[9u].y) * ((_454 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_358 * 0.85000002384185791015625) + 1.0);
    float _487 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _424.z) * cbMtdParam._m0[9u].z) * ((_454 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_358 * 0.699999988079071044921875) + 1.0);
    vec4 _499 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    float _505 = ((cbMtdParam._m0[12u].z * _499.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _518 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3867 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    float _534 = cbMtdParam._m0[14u].w + _518.z;
    vec4 _546 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _304) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _305) + cbTextureTilingScale._m0[0u].w));
    float _550 = cbMtdParam._m0[13u].w * _546.x;
    float _568 = fma(_532, _219, fma(_526, _226, _525 * _212));
    float _571 = fma(_532, _220, fma(_526, _227, _525 * _213));
    float _574 = fma(_532, _221, fma(_526, _228, _525 * _214));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3878 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3889 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _583 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _584 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3905 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3916 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3927 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _608 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _610 = _608.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _779 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _3938 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _784 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _3949 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) - _780)) + _780) < ((_610 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _622 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _623 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _642 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _645 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _648 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _661 = uint(roundEven(NORMAL.w)) * 13u;
    uint _662 = _661 + 9u;
    uint _663 = _662 + uint(cbMatDynParam._m0[0u].w);
    float _669 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_663].x;
    float _670 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_663].y;
    float _671 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_663].z;
    float _3960 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _622, cbSceneParam._m0[86u].y * _623));
    float _686 = _683.x * TEXCOORD_1.w;
    float _687 = dot(vec3(_579, _580, _581), vec3(_294, _295, _296));
    float _690 = _687 * 2.0;
    float _694 = (_690 * _579) - _294;
    float _695 = (_690 * _580) - _295;
    float _696 = (_690 * _581) - _296;
    float _700 = abs(dot(vec3(_294, _295, _296), vec3(_579, _580, _581)));
    float _3993 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _709 = 10.0 / (_603 + 10.0);
    float _710 = sqrt(_583);
    float _722 = exp2((_710 * 5.0) * log2(1.0 - (_701 * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _822 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _826 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _851 = _754 + _579;
        float _852 = _758 + _580;
        float _853 = _762 + _581;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_579, _580, _581), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _4041 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_579, _580, _581), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _4074 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_579, _580, _581), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _4107 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1137 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1141 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1145 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1168 = _754 + _579;
        float _1169 = _758 + _580;
        float _1170 = _762 + _581;
        float _1180 = fma(_1170, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168)) - _1137;
        float _1181 = fma(_1170, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168)) - _1141;
        float _1182 = fma(_1170, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168)) - _1145;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1137 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1141 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[35u].z) + ((((((_1145 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1236 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1203.x + (-0.5));
        float _1238 = _1236 * (_1203.y + (-0.5));
        float _1239 = _1236 * (_1203.z + (-0.5));
        float _1246 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1210.x + (-0.5));
        float _1248 = _1246 * (_1210.y + (-0.5));
        float _1249 = _1246 * (_1210.z + (-0.5));
        float _1256 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1217.x + (-0.5));
        float _1258 = _1256 * (_1217.y + (-0.5));
        float _1259 = _1256 * (_1217.z + (-0.5));
        float _1266 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1224.x + (-0.5));
        float _1268 = _1266 * (_1224.y + (-0.5));
        float _1269 = _1266 * (_1224.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_579, _580, _581), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4170 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1300 + 1.0))) + _1305) * _1270;
        float _1315 = _1238 * 0.5;
        float _1316 = _1248 * 0.5;
        float _1317 = _1258 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_579, _580, _581), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4203 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1342 + 1.0))) + _1347) * _1271;
        float _1357 = _1239 * 0.5;
        float _1358 = _1249 * 0.5;
        float _1359 = _1259 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_579, _580, _581), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4236 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1384 + 1.0))) + _1389) * _1272;
        _1406 = _1239;
        _1407 = _1238;
        _1408 = _1237;
        _1409 = _1249;
        _1410 = _1248;
        _1411 = _1247;
        _1412 = _1259;
        _1413 = _1258;
        _1414 = _1257;
        _1415 = _1272;
        _1416 = _1271;
        _1417 = _1270;
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = _1094;
        _1415 = _1094;
        _1416 = _1094;
        _1417 = _1094;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1453 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1430));
    float _1474 = _694 * 0.5;
    float _1475 = _695 * 0.5;
    float _1476 = _696 * 0.5;
    float _1477 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1480 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1483 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1490 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1494 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1498 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1505 = dot(vec4(cbModelParam._m0[39u]), vec4(_1474, _1475, _1476, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1474, _1475, _1476, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_696, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694));
        float _1604 = fma(_696, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694));
        float _1607 = fma(_696, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1635 = frontier_phi_17_15_ladder;
        }
        float _1858;
        if (_1604 > 0.0)
        {
            _1858 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1858 = frontier_phi_26_22_ladder;
        }
        float _2122;
        if (_1607 > 0.0)
        {
            _2122 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2122 = frontier_phi_38_33_ladder;
        }
        float _2124 = isnan(_1858) ? _1635 : (isnan(_1635) ? _1858 : min(_1635, _1858));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1601) + _1590;
        float _2130 = (_2125 * _1604) + _1594;
        float _2131 = (_2125 * _1607) + _1598;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2132;
        float _2136 = _2132 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 > _2136) || ((_2130 < _2134) || ((_2129 < _2134) || (_2129 > _2136))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2131, cbModelParam._m0[9u].z, fma(_2130, cbModelParam._m0[9u].y, _2129 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2131, cbModelParam._m0[10u].z, fma(_2130, cbModelParam._m0[10u].y, _2129 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2131, cbModelParam._m0[11u].z, fma(_2130, cbModelParam._m0[11u].y, _2129 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_16_38_ladder = _2285.x * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2285.y * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_16_38_ladder;
        _1625 = frontier_phi_16_38_ladder_2;
        _1627 = frontier_phi_16_38_ladder_1;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_694, _695, _696), _1543);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_696, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694));
        float _1701 = fma(_696, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694));
        float _1704 = fma(_696, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694));
        float _1863;
        if (_1698 > 0.0)
        {
            _1863 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1863 = frontier_phi_28_24_ladder;
        }
        float _2149;
        if (_1701 > 0.0)
        {
            _2149 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2149 = frontier_phi_40_35_ladder;
        }
        float _2468;
        if (_1704 > 0.0)
        {
            _2468 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2468 = frontier_phi_49_47_ladder;
        }
        float _2470 = isnan(_2149) ? _1863 : (isnan(_1863) ? _2149 : min(_1863, _2149));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1698) + _1687;
        float _2476 = (_2471 * _1701) + _1691;
        float _2477 = (_2471 * _1704) + _1695;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_25_49_ladder = _2751.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2751.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2751.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_25_49_ladder_2;
        _1725 = frontier_phi_25_49_ladder_1;
        _1727 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_694, _695, _696), _1632);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1739 = ((((1.0 - _722) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_722 * _710)) * _686;
    float _1740 = _1739 * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1741 = _1739 * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1742 = _1739 * ((cbModelParam._m0[1u].w * (_1727 - _1627)) + _1627);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    float _1762 = _622 / cbSceneParam._m0[86u].x;
    float _1770 = (cbSceneParam._m0[88u].y * (1.0 - _583)) + cbSceneParam._m0[88u].z;
    float _4362 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 5.0;
    float _1777 = (_709 * cbMtdParam._m0[13u].z) * dot(vec3(_579, _580, _581), vec3(1.0, 0.0, 0.0));
    vec4 _1787 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1777 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1777 + _1762) * cbSceneParam._m0[86u].x, _623), _1772).w) + _1762) * cbSceneParam._m0[86u].x, _623), _1772);
    float _1803 = 1.0 - _1787.w;
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1850 = _1837 / _1849;
    float _1851 = _1841 / _1849;
    float _1852 = _1845 / _1849;
    float _1999;
    float _2000;
    float _2001;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1879 = ((uint(_1852 > cbSceneParam._m0[59u].y) + uint(_1852 > cbSceneParam._m0[59u].x)) + uint(_1852 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1880 = _1879 + 43u;
        uint _1888 = _1879 + 44u;
        uint _1896 = _1879 + 45u;
        uint _1904 = _1879 + 46u;
        float _1915 = fma(_1849, cbSceneParam._m0[_1880].w, fma(_1845, cbSceneParam._m0[_1880].z, fma(_1841, cbSceneParam._m0[_1880].y, _1837 * cbSceneParam._m0[_1880].x)));
        float _1919 = fma(_1849, cbSceneParam._m0[_1888].w, fma(_1845, cbSceneParam._m0[_1888].z, fma(_1841, cbSceneParam._m0[_1888].y, _1837 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1849, cbSceneParam._m0[_1904].w, fma(_1845, cbSceneParam._m0[_1904].z, fma(_1841, cbSceneParam._m0[_1904].y, _1837 * cbSceneParam._m0[_1904].x)));
        float _1932 = cbSceneParam._m0[33u].z * _1927;
        float _1934 = cbSceneParam._m0[33u].w * _1927;
        float _1937 = fma(_1849, cbSceneParam._m0[_1896].w, fma(_1845, cbSceneParam._m0[_1896].z, fma(_1841, cbSceneParam._m0[_1896].y, _1837 * cbSceneParam._m0[_1896].x))) / _1927;
        float _1985 = (cbSceneParam._m0[33u].x - sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852))) * cbSceneParam._m0[33u].y;
        float _4373 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1992 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1932 + _1915) / _1927, (_1934 + _1919) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1934 + _1915) / _1927, (_1919 - _1932) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 - _1932) / _1927, (_1919 - _1934) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 - _1934) / _1927, (_1932 + _1919) / _1927), _1937), 0.0)).x), vec4(0.25)));
        _1999 = 1.0 - (_1992 * cbSceneParam._m0[34u].x);
        _2000 = 1.0 - (_1992 * cbSceneParam._m0[34u].y);
        _2001 = 1.0 - (_1992 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1999 = 1.0;
        _2000 = 1.0;
        _2001 = 1.0;
    }
    float _2065;
    float _2067;
    float _2069;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2053 = fma(_1849, cbSceneParam._m0[63u].w, fma(_1845, cbSceneParam._m0[63u].z, fma(_1841, cbSceneParam._m0[63u].y, _1837 * cbSceneParam._m0[63u].x)));
        float _2054 = fma(_1849, cbSceneParam._m0[60u].w, fma(_1845, cbSceneParam._m0[60u].z, fma(_1841, cbSceneParam._m0[60u].y, _1837 * cbSceneParam._m0[60u].x))) / _2053;
        float _2055 = fma(_1849, cbSceneParam._m0[61u].w, fma(_1845, cbSceneParam._m0[61u].z, fma(_1841, cbSceneParam._m0[61u].y, _1837 * cbSceneParam._m0[61u].x))) / _2053;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2054 >= cbSceneParam._m0[64u].x) && (_2055 >= cbSceneParam._m0[64u].y)) && (_2054 <= cbSceneParam._m0[64u].z)) && (_2055 <= cbSceneParam._m0[64u].w))
        {
            float _2162 = fma(_1849, cbSceneParam._m0[62u].w, fma(_1845, cbSceneParam._m0[62u].z, fma(_1841, cbSceneParam._m0[62u].y, _1837 * cbSceneParam._m0[62u].x))) / _2053;
            float _2166 = isnan(cbSceneParam._m0[41u].w) ? _2162 : (isnan(_2162) ? cbSceneParam._m0[41u].w : max(_2162, cbSceneParam._m0[41u].w));
            float _2209 = (cbSceneParam._m0[33u].x - sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852))) * cbSceneParam._m0[33u].y;
            float _4389 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
            float _2216 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2054, cbSceneParam._m0[33u].w + _2055), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2054, _2055 - cbSceneParam._m0[33u].z), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2054 - cbSceneParam._m0[33u].z, _2055 - cbSceneParam._m0[33u].w), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2054 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2055), _2166), 0.0)).x), vec4(0.25)));
            float _2220 = 1.0 - (_2216 * cbSceneParam._m0[34u].x);
            float _2221 = 1.0 - (_2216 * cbSceneParam._m0[34u].y);
            float _2222 = 1.0 - (_2216 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2222) ? _2001 : (isnan(_2001) ? _2222 : min(_2001, _2222));
            frontier_phi_37_36_ladder_1 = isnan(_2221) ? _2000 : (isnan(_2000) ? _2221 : min(_2000, _2221));
            frontier_phi_37_36_ladder_2 = isnan(_2220) ? _1999 : (isnan(_1999) ? _2220 : min(_1999, _2220));
        }
        else
        {
            frontier_phi_37_36_ladder = _2001;
            frontier_phi_37_36_ladder_1 = _2000;
            frontier_phi_37_36_ladder_2 = _1999;
        }
        _2065 = frontier_phi_37_36_ladder_2;
        _2067 = frontier_phi_37_36_ladder_1;
        _2069 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2065 = _1999;
        _2067 = _2000;
        _2069 = _2001;
    }
    uvec4 _2074 = floatBitsToUint(cbInstanceData._m0[_661 + 5u]);
    uint _2076 = _2074.x * 14u;
    uint _2077 = _2076 + 13u;
    float _2082 = _686 + (-1.0);
    float _2085 = (cbLight._m0[_2077].x * _2082) + 1.0;
    float _2086 = (cbLight._m0[_2077].y * _2082) + 1.0;
    uint _2088 = _2076 + 4u;
    float _2099 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_579, _580, _581));
    float _2102 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    float _2103 = cbLight._m0[_2088].x * _2065;
    float _2104 = cbLight._m0[_2088].y * _2067;
    float _2105 = cbLight._m0[_2088].z * _2069;
    uint _2106 = _2076 + 5u;
    uint _2112 = _2076 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_579, _580, _581));
    float _2121 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    float _2294;
    float _2295;
    float _2296;
    if (_584 == 0.0)
    {
        float _4425 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _4436 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2231 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
        float _2233 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.3183098733425140380859375;
        _2294 = ((cbLight._m0[_2106].x * _2121) * _2233) + ((_2103 * _2102) * _2231);
        _2295 = ((_2121 * cbLight._m0[_2106].y) * _2233) + ((_2104 * _2102) * _2231);
        _2296 = ((_2121 * cbLight._m0[_2106].z) * _2233) + ((_2105 * _2102) * _2231);
    }
    else
    {
        float _2243 = _2099 + _584;
        float _2246 = (_584 * 2.0) + 1.0;
        float _2247 = (isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) / _2246;
        float _2254 = _2118 + _584;
        float _2256 = (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))) / _2246;
        _2294 = (((_2256 * cbLight._m0[_2106].x) * _2121) + ((_2103 * _2247) * _2102)) * 0.3183098733425140380859375;
        _2295 = (((_2256 * cbLight._m0[_2106].y) * _2121) + ((_2104 * _2247) * _2102)) * 0.3183098733425140380859375;
        _2296 = (((_2256 * cbLight._m0[_2106].z) * _2121) + ((_2105 * _2247) * _2102)) * 0.3183098733425140380859375;
    }
    uint _2300 = _2076 + 8u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _583) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2076].x + _294;
    float _2319 = cbLight._m0[_2076].y + _295;
    float _2320 = cbLight._m0[_2076].z + _296;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2076].xyz));
    float _4457 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _4468 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _2332 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2333 = dot(vec3(_579, _580, _581), vec3(_2325, _2326, _2327));
    float _4479 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2325, _2326, _2327));
    float _4490 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2317 * _2317;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2356 = (exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2357 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2332 * ((_2331 * _2357) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2357) + _2317) * _2331))) * _2331;
    float _4501 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    uint _2386 = _2076 + 9u;
    float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _583) * 0.949999988079071044921875);
    float _2401 = _2400 * _2400;
    float _2402 = cbLight._m0[_2112].x + _294;
    float _2403 = cbLight._m0[_2112].y + _295;
    float _2404 = cbLight._m0[_2112].z + _296;
    float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
    float _2409 = _2408 * _2402;
    float _2410 = _2408 * _2403;
    float _2411 = _2408 * _2404;
    float _2412 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2112].xyz));
    float _4512 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2416 = dot(vec3(_579, _580, _581), vec3(_2409, _2410, _2411));
    float _4523 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2409, _2410, _2411));
    float _4534 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2401 * _2401;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2438 = 1.0 - _2401;
    float _2448 = (0.5 / (((_2332 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2438) + _2401) * _2415))) * _2415;
    float _4545 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    float _2460 = (((_2437 * cbLight._m0[_2386].x) * _2450) * _2121) + ((((cbLight._m0[_2300].x * _2065) * _2356) * _2370) * _2102);
    float _2461 = (((_2437 * cbLight._m0[_2386].y) * _2450) * _2121) + ((((cbLight._m0[_2300].y * _2067) * _2356) * _2370) * _2102);
    float _2462 = (((_2437 * cbLight._m0[_2386].z) * _2450) * _2121) + ((((cbLight._m0[_2300].z * _2069) * _2356) * _2370) * _2102);
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    if (_2074.y == 0u)
    {
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.x;
        uint _2517 = uint((float(_2505.y) * floor(float(uint(cbSceneParam._m0[85u].y * _623) / _2506))) + floor(float(uint(cbSceneParam._m0[85u].x * _622) / _2506)));
        float _2527 = (log2(_1852 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2528 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        uint _2531 = uint(isnan(14.0) ? _2528 : (isnan(_2528) ? 14.0 : min(_2528, 14.0)));
        uvec4 _2536 = texelFetch(g_lightClusterGridBuffer, int(((_2531 << 2u) + (_2517 << 6u)) >> 2u));
        uint _2537 = _2536.x;
        uint _2538 = _2505.z;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((((1u << ((_2538 >> 4u) & 15u)) + 4294967295u) & _2537) == 0u) || ((_2538 & 240u) == 0u))
        {
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
        }
        else
        {
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            uint _2945 = 0u;
            uint _2954;
            bool _2955;
            for (;;)
            {
                _2954 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                _2955 = _2954 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2955)
                {
                    frontier_phi_66_pred = _2941;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2942;
                    frontier_phi_66_pred_4 = _2944;
                    frontier_phi_66_pred_5 = _2943;
                }
                else
                {
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    uint _3090;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2954;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    for (;;)
                    {
                        uint _3094 = uint(findLSB(_3090)) + (_2945 << 5u);
                        uint _3091 = (_3090 + 4294967295u) & _3090;
                        uint _3096 = _3094 * 48u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3116 = (_3094 * 48u) + 4u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        float _3130 = _3129.x;
                        float _3131 = _3129.y;
                        float _3132 = _3129.z;
                        uint _3135 = (_3094 * 48u) + 8u;
                        vec3 _3146 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x));
                        uint _3151 = (_3094 * 48u) + 12u;
                        vec2 _3159 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x));
                        float _3165 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
                        float _3166 = _3165 * _1850;
                        float _3167 = _3165 * _1851;
                        float _3168 = _3165 * _1852;
                        float _3169 = _3110.x - _1850;
                        float _3170 = _3110.y - _1851;
                        float _3171 = _3110.z - _1852;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_642, _645, _648), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3110.w);
                        float _4566 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3186 = sqrt(_3172) * _3129.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3191 = 1.0 - _3190;
                        float _3193 = (_3191 * _3191) * _584;
                        float _3196 = ((_3191 * _3179) + _3190) + _3193;
                        float _3201 = _3186 * _3186;
                        float _3205 = ((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3185) / (((_3193 * 2.0) + 1.0) * ((_3201 * 0.699999988079071044921875) + 1.0));
                        float _3209 = dot(vec3(_3176, _3177, _3178), vec3(_3166, _3167, _3168));
                        float _4582 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3216 = dot(vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168), vec3(_642, _645, _648)) + 1.0;
                        float _3218 = (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * 0.5;
                        float _3226 = ((_3218 * _3218) * _3159.x) * exp2((_3159.y * 32.0) * log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))));
                        float _3228 = _584 / (_584 + 1.0);
                        float _3244 = (-0.0) - _1850;
                        float _3245 = (-0.0) - _1851;
                        float _3246 = (-0.0) - _1852;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3260 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                        float _3261 = 1.0 - _710;
                        float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                        float _3269 = _3268 * _3268;
                        float _3270 = _3269 * _3269;
                        float _3271 = _3251 + _3176;
                        float _3272 = _3252 + _3177;
                        float _3273 = _3253 + _3178;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3281 = dot(vec3(_642, _645, _648), vec3(_3251, _3252, _3253));
                        float _4598 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3285 = dot(vec3(_642, _645, _648), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                        float _4609 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                        float _3293 = _3189 * _3269;
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3179) + _3294;
                        float _4620 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3299 = 1.0 - _3269;
                        float _3309 = (0.5 / (((_3298 * ((_3284 * _3299) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3269) * _3284))) * _3298;
                        float _4631 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3320 = (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3292 * _3292) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3014 = (((((_3130 * 0.3183098733425140380859375) * _3228) * _3226) + _3130) * _3205) + _3087;
                        _3015 = (((((_3131 * 0.3183098733425140380859375) * _3228) * _3226) + _3131) * _3205) + _3088;
                        _3016 = (((((_3132 * 0.3183098733425140380859375) * _3228) * _3226) + _3132) * _3205) + _3089;
                        _3011 = (_3320 * _3146.x) + _3084;
                        _3012 = (_3320 * _3146.y) + _3085;
                        _3013 = (_3320 * _3146.z) + _3086;
                        if (_3091 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3091;
                        }
                    }
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3014;
                    frontier_phi_66_pred_4 = _3016;
                    frontier_phi_66_pred_5 = _3015;
                }
                _2761 = frontier_phi_66_pred;
                _2759 = frontier_phi_66_pred_1;
                _2757 = frontier_phi_66_pred_2;
                _2763 = frontier_phi_66_pred_3;
                _2767 = frontier_phi_66_pred_4;
                _2765 = frontier_phi_66_pred_5;
                uint _2946 = _2945 + 1u;
                if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2939 = _2757;
                    _2940 = _2759;
                    _2941 = _2761;
                    _2942 = _2763;
                    _2943 = _2765;
                    _2944 = _2767;
                    _2945 = _2946;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
        }
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.z;
        uint _2773 = (_2771 >> 8u) & 15u;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((4294967295u << _2773) & _2537) == 0u)
        {
            _2907 = _2756;
            _2909 = _2758;
            _2911 = _2760;
            _2913 = _2762;
            _2915 = _2764;
            _2917 = _2766;
        }
        else
        {
            float _2932 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
            float _2933 = _2932 * _1850;
            float _2934 = _2932 * _1851;
            float _2935 = _2932 * _1852;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2773 < ((_2771 >> 12u) & 15u))
            {
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _3067 = _2756;
                float _3068 = _2758;
                float _3069 = _2760;
                float _3070 = _2762;
                float _3071 = _2764;
                float _3072 = _2766;
                uint _3073 = _2773;
                uint _3082;
                bool _3083;
                for (;;)
                {
                    _3082 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                    _3083 = _3082 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3083)
                    {
                        frontier_phi_77_pred = _3069;
                        frontier_phi_77_pred_1 = _3068;
                        frontier_phi_77_pred_2 = _3067;
                        frontier_phi_77_pred_3 = _3072;
                        frontier_phi_77_pred_4 = _3071;
                        frontier_phi_77_pred_5 = _3070;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3347 = _3067;
                        float _3348 = _3068;
                        float _3349 = _3069;
                        float _3350 = _3070;
                        float _3351 = _3071;
                        float _3352 = _3072;
                        uint _3353 = _3082;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        vec3 _3410;
                        vec2 _3419;
                        vec4 _3434;
                        vec4 _3450;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3364 = ((_3073 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.x;
                            _3397 = _3395.y;
                            _3398 = _3395.z;
                            uint _3400 = (_3364 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3364 * 40u) + 12u;
                            _3419 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x));
                            uint _3421 = (_3364 * 40u) + 16u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3437 = (_3364 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3453 = (_3364 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3364 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_1852, _3485.z, fma(_1851, _3485.y, _3485.x * _1850)) + _3485.w;
                            _3498 = !((fma(_1852, _3466.z, fma(_1851, _3466.y, _3466.x * _1850)) + _3466.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3498)
                            {
                                float _3524 = _3379.x - _1850;
                                float _3525 = _3379.y - _1851;
                                float _3526 = _3379.z - _1852;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3380 * _3380));
                                float _4642 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3542 = sqrt(_3527) * _3395.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3546 = 1.0 - _3545;
                                float _3548 = (_3546 * _3546) * _584;
                                float _3551 = ((_3546 * dot(vec3(_3531, _3532, _3533), vec3(_642, _645, _648))) + _3545) + _3548;
                                float _3556 = _3542 * _3542;
                                float _3561 = (fma(_1852, _3434.z, fma(_1851, _3434.y, _3434.x * _1850)) + _3434.w) / _3497;
                                float _3562 = (fma(_1852, _3450.z, fma(_1851, _3450.y, _3450.x * _1850)) + _3450.w) / _3497;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4658 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3538) / (((_3548 * 2.0) + 1.0) * ((_3556 * 0.699999988079071044921875) + 1.0)));
                                float _3569 = (-0.0) - _2933;
                                float _3570 = (-0.0) - _2934;
                                float _3571 = (-0.0) - _2935;
                                float _3572 = dot(vec3(_3531, _3532, _3533), vec3(_2933, _2934, _2935));
                                float _4669 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3579 = dot(vec3(_3569, _3570, _3571), vec3(_642, _645, _648)) + 1.0;
                                float _3581 = (isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * 0.5;
                                float _3588 = ((_3581 * _3581) * _3419.x) * exp2((_3419.y * 32.0) * log2(isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))));
                                float _3590 = _584 / (_584 + 1.0);
                                float _3611 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                                float _3612 = 1.0 - _710;
                                float _3619 = sqrt(1.0 - ((1.0 - (_3612 * _3612)) * (1.0 - (_3611 * _3611))));
                                float _3620 = _3619 * _3619;
                                float _3621 = _3620 * _3620;
                                float _3622 = _3531 - _2933;
                                float _3623 = _3532 - _2934;
                                float _3624 = _3533 - _2935;
                                float _3628 = inversesqrt(dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624)));
                                float _3632 = dot(vec3(_642, _645, _648), vec3(_3569, _3570, _3571));
                                float _4685 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3635 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3636 = dot(vec3(_642, _645, _648), vec3(_3628 * _3622, _3628 * _3623, _3628 * _3624));
                                float _4696 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3643 = ((_3639 * _3639) * (_3621 + (-1.0))) + 1.0;
                                float _3644 = _3544 * _3620;
                                float _3645 = _3644 * _3644;
                                float _3651 = ((1.0 - _3645) * dot(vec3(_642, _645, _648), vec3(_3531, _3532, _3533))) + _3645;
                                float _4707 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3653 = 1.0 - _3620;
                                float _3663 = (0.5 / (((_3652 * ((_3635 * _3653) + _3620)) + 9.9999999392252902907785028219223e-09) + (((_3652 * _3653) + _3620) * _3635))) * _3652;
                                float _4718 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3673 = (_3567 * _3538) * (((_3621 * 3.1415927410125732421875) * (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) / ((_3643 * _3643) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3673 * _3410.z;
                                frontier_phi_83_pred_1 = _3673 * _3410.y;
                                frontier_phi_83_pred_2 = _3673 * _3410.x;
                                frontier_phi_83_pred_3 = ((((_3398 * 0.3183098733425140380859375) * _3590) * _3588) + _3398) * _3568;
                                frontier_phi_83_pred_4 = ((((_3397 * 0.3183098733425140380859375) * _3590) * _3588) + _3397) * _3568;
                                frontier_phi_83_pred_5 = ((((_3396 * 0.3183098733425140380859375) * _3590) * _3588) + _3396) * _3568;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3679 = frontier_phi_83_pred;
                            _3678 = frontier_phi_83_pred_1;
                            _3677 = frontier_phi_83_pred_2;
                            _3682 = frontier_phi_83_pred_3;
                            _3681 = frontier_phi_83_pred_4;
                            _3680 = frontier_phi_83_pred_5;
                            _3337 = _3680 + _3350;
                            _3338 = _3681 + _3351;
                            _3339 = _3682 + _3352;
                            _3334 = _3677 + _3347;
                            _3335 = _3678 + _3348;
                            _3336 = _3679 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3336;
                        frontier_phi_77_pred_1 = _3335;
                        frontier_phi_77_pred_2 = _3334;
                        frontier_phi_77_pred_3 = _3339;
                        frontier_phi_77_pred_4 = _3338;
                        frontier_phi_77_pred_5 = _3337;
                    }
                    _2912 = frontier_phi_77_pred;
                    _2910 = frontier_phi_77_pred_1;
                    _2908 = frontier_phi_77_pred_2;
                    _2918 = frontier_phi_77_pred_3;
                    _2916 = frontier_phi_77_pred_4;
                    _2914 = frontier_phi_77_pred_5;
                    uint _3074 = _3073 + 1u;
                    if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3067 = _2908;
                        _3068 = _2910;
                        _3069 = _2912;
                        _3070 = _2914;
                        _3071 = _2916;
                        _3072 = _2918;
                        _3073 = _3074;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2918;
                frontier_phi_58_59_ladder_1 = _2916;
                frontier_phi_58_59_ladder_2 = _2914;
                frontier_phi_58_59_ladder_3 = _2910;
                frontier_phi_58_59_ladder_4 = _2908;
                frontier_phi_58_59_ladder_5 = _2912;
            }
            else
            {
                frontier_phi_58_59_ladder = _2766;
                frontier_phi_58_59_ladder_1 = _2764;
                frontier_phi_58_59_ladder_2 = _2762;
                frontier_phi_58_59_ladder_3 = _2758;
                frontier_phi_58_59_ladder_4 = _2756;
                frontier_phi_58_59_ladder_5 = _2760;
            }
            _2907 = frontier_phi_58_59_ladder_4;
            _2909 = frontier_phi_58_59_ladder_3;
            _2911 = frontier_phi_58_59_ladder_5;
            _2913 = frontier_phi_58_59_ladder_2;
            _2915 = frontier_phi_58_59_ladder_1;
            _2917 = frontier_phi_58_59_ladder;
        }
        float _2922 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _2550 = (_2922 * _2913) + _2294;
        _2552 = (_2922 * _2915) + _2295;
        _2554 = (_2922 * _2917) + _2296;
        _2556 = ((_2907 * 0.039999999105930328369140625) * _2922) + _2460;
        _2558 = ((_2909 * 0.039999999105930328369140625) * _2922) + _2461;
        _2560 = ((_2911 * 0.039999999105930328369140625) * _2922) + _2462;
    }
    else
    {
        _2550 = _2294;
        _2552 = _2295;
        _2554 = _2296;
        _2556 = _2460;
        _2558 = _2461;
        _2560 = _2462;
    }
    float _2574 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2575 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2576 = cbSceneParam._m0[86u].x * (_1762 + ((_709 * cbMtdParam._m0[13u].y) * dot(vec3(_579, _580, _581), vec3(_212, _213, _214))));
    float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
    float _2578 = isnan(_2575) ? _623 : (isnan(_623) ? _2575 : min(_623, _2575));
    vec4 _2580 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2577, _2578), 0.0);
    float _2582 = _2580.x;
    bool _2603 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2582)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2582))) > _603;
    float _2604 = _2603 ? _2577 : _622;
    float _2605 = _2603 ? _2578 : _623;
    vec4 _2607 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2604, _2605));
    vec4 _2612 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2604, _2605));
    float _2614 = _2612.x;
    float _2634 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2614)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2614))) - _603;
    bool _2644 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2648 = (isnan(_2634) ? 0.0 : (isnan(0.0) ? _2634 : max(0.0, _2634))) * (-1.44269502162933349609375);
    float _4749 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4760 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4771 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _2675 = 0.959999978542327880859375 - (exp2(log2(1.0 - _701) * 5.0) * 0.959999978542327880859375);
    float _2678 = ((_2607.x * _2675) * exp2(_2648 * (_2644 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2681 = ((_2607.y * _2675) * exp2(_2648 * (_2644 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2684 = ((_2607.z * _2675) * exp2(_2648 * (_2644 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2692 = (_2678 + (((((_1739 * _1787.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1532) * _1803)) + _2556) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2550 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _686))) - _2678) * cbMtdParam._m0[15u].x);
    float _2694 = (_2681 + (((((_1739 * _1787.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1532) * _1803)) + _2558) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2552 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _686))) - _2681) * cbMtdParam._m0[15u].x);
    float _2696 = (_2684 + (((((_1739 * _1787.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1532) * _1803)) + _2560) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2554 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _686))) - _2684) * cbMtdParam._m0[15u].x);
    float _2701 = cbInstanceData._m0[_661 + 6u].w * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)));
    float _2706 = _622 / cbSceneParam._m0[86u].x;
    float _2707 = _623 / cbSceneParam._m0[86u].y;
    vec4 _2721 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2723 = _2721.x;
    float _2724 = _2721.y;
    float _2725 = _2721.z;
    float _2726 = _2721.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2781 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2782 = _2781 / _603;
        float _2793 = _2782 * _282;
        float _2794 = _283 * _2782;
        float _2795 = (-0.0) - _2794;
        float _2796 = _2782 * _284;
        float _2798 = (cbSceneParam._m0[77u].w * _2795) / _2781;
        float _2799 = _2798 + cbSceneParam._m0[79u].w;
        float _2800 = cbSceneParam._m0[79u].w - _2794;
        float _2806 = sqrt(((_2793 * _2793) + (_2794 * _2794)) + (_2796 * _2796));
        float _2809 = (1.0 - (cbSceneParam._m0[77u].w / _2781)) * _2806;
        float _2814 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3024;
        if (abs((_2795 - _2798) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3024 = ((((_2799 > 0.0) ? exp2(_2814 * _2799) : (2.0 - exp2(_2815 * _2799))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2809;
        }
        else
        {
            float _2968 = 1.0 / cbSceneParam._m0[80u].x;
            float _2969 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : max(_2799, _2800));
            float _2970 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : min(_2799, _2800));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            _3024 = ((abs(_2806 / _2795) * cbSceneParam._m0[80u].y) * ((((_2979 - _2980) * 2.0) - ((exp2(_2814 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)))) - exp2(_2814 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))))) * _2968)) - ((exp2(_2815 * _2979) - exp2(_2815 * _2980)) * _2968))) + (_2809 * cbSceneParam._m0[80u].z);
        }
        vec4 _3026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, 1.0), 0.0);
        float _3035 = exp2((_3024 * (-1.44269502162933349609375)) * (1.0 - _3026.w));
        float _3036 = log2(_3035);
        float _3052 = log2(_2726);
        _2817 = (exp2(_3052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].x)) * _3026.x) / cbSceneParam._m0[78u].x)) + _2723;
        _2819 = (exp2(_3052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].y)) * _3026.y) / cbSceneParam._m0[78u].y)) + _2724;
        _2821 = (exp2(_3052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].z)) * _3026.z) / cbSceneParam._m0[78u].z)) + _2725;
        _2823 = _3035 * _2726;
    }
    else
    {
        _2817 = _2723;
        _2819 = _2724;
        _2821 = _2725;
        _2823 = _2726;
    }
    bool _3062;
    float _2878;
    vec4 _2881;
    float _2883;
    vec4 _2885;
    float _2893;
    float _2894;
    float _2895;
    float _2896;
    bool _2906;
    for (;;)
    {
        bool _2835 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2836 = log2(_2823);
        float _2843 = exp2(_2836 * cbSceneParam._m0[78u].x) * _2692;
        float _2844 = exp2(_2836 * cbSceneParam._m0[78u].y) * _2694;
        float _2845 = exp2(_2836 * cbSceneParam._m0[78u].z) * _2696;
        vec4 _2853 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_622, _623));
        float _2855 = _2853.x;
        float _2876 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2855)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2855))) - _603) * cbMtdParam._m0[14u].z;
        float _4822 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        _2878 = _2701 * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)));
        float _2879 = _610 + (-0.5);
        _2881 = cbMtdParam._m0[1u];
        _2883 = _2881.y * _2879;
        _2885 = cbMatDynParam._m0[0u];
        float _2892 = (roundEven(_2885.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2893 = _2892 * (_2835 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2817)));
        _2894 = _2892 * (_2835 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2819)));
        _2895 = _2892 * (_2835 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2821)));
        _2896 = _2879 * 0.999000012874603271484375;
        _2906 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2906)
        {
            if ((cbInstanceData._m0[_661 + 7u].x + _2896) < 0.5)
            {
                _3062 = true;
                break;
            }
        }
        uint _3003 = _662 + uint(_2885.w);
        if ((cbInstanceData._m0[_3003].w < 1.0) && ((cbInstanceData._m0[_3003].w + _2896) < 0.5))
        {
            _3062 = true;
            break;
        }
        if ((_2883 + 1.0) < _2881.x)
        {
            _3062 = true;
            break;
        }
        _3062 = false;
        break;
    }
    float _3325;
    if (_3062)
    {
        discard_state = true;
        _3325 = 0.0;
    }
    else
    {
        _3325 = _2878;
    }
    SV_Target.x = _2893;
    SV_Target.y = _2894;
    SV_Target.z = _2895;
    SV_Target.w = _3325;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2878;
    discard_exit();
}


