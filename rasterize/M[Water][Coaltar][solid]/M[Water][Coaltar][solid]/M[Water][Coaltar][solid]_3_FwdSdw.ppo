#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _985;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _286 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _287 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _298 = dot(vec3(_276, _277, _278), vec3(_206, _207, _208));
    float _301 = dot(vec3(_276, _277, _278), vec3(_220, _221, _222));
    float _304 = dot(vec3(_276, _277, _278), vec3(_213, _214, _215));
    float _310 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _334 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _354 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_298 * cbMtdParam._m0[12u].x) * _310) * _334) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_301 * cbMtdParam._m0[12u].x) * _310) * _334) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _377 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _378 = _377 * _276;
    float _379 = _377 * _277;
    float _380 = _377 * _278;
    float _384 = dot(vec4(_378, _379, _380, 0.0), vec4(_213, _214, _215, 0.0)) - cbMtdParam._m0[12u].w;
    float _3666 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _391 = exp2(log2(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _406 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _354.x) * cbMtdParam._m0[9u].x) * ((_391 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _410 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _354.y) * cbMtdParam._m0[9u].y) * ((_391 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _414 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _354.z) * cbMtdParam._m0[9u].z) * ((_391 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _426 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    float _432 = ((cbMtdParam._m0[12u].z * _426.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _445 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    float _453 = (_445.x * 2.0) + (-1.0);
    float _454 = (_445.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3682 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))));
    float _465 = cbMtdParam._m0[14u].w + _445.z;
    vec4 _477 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _286) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _287) + cbTextureTilingScale._m0[0u].w));
    float _481 = cbMtdParam._m0[13u].w * _477.x;
    float _499 = fma(_460, _213, fma(_454, _220, _453 * _206));
    float _502 = fma(_460, _214, fma(_454, _221, _453 * _207));
    float _505 = fma(_460, _215, fma(_454, _222, _453 * _208));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3693 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3704 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _514 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _515 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3720 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3731 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3742 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _534 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _541 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _562 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _565 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _568 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _581 = uint(roundEven(NORMAL.w)) * 13u;
    uint _583 = (_581 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _589 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_583].x;
    float _590 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_583].y;
    float _591 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_583].z;
    float _3753 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    vec4 _603 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _540, cbSceneParam._m0[86u].y * _541));
    float _606 = _603.x * TEXCOORD_1.w;
    float _607 = dot(vec3(_510, _511, _512), vec3(_378, _379, _380));
    float _610 = _607 * 2.0;
    float _614 = (_610 * _510) - _378;
    float _615 = (_610 * _511) - _379;
    float _616 = (_610 * _512) - _380;
    float _620 = abs(dot(vec3(_378, _379, _380), vec3(_510, _511, _512)));
    float _3786 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _629 = 10.0 / (_534 + 10.0);
    float _630 = sqrt(_514);
    float _642 = exp2((_630 * 5.0) * log2(1.0 - (_621 * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _984;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = fma(_682, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674));
        float _713 = fma(_682, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674));
        float _717 = fma(_682, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674));
        float _742 = _674 + _510;
        float _743 = _678 + _511;
        float _744 = _682 + _512;
        float _754 = fma(_744, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742)) - _709;
        float _755 = fma(_744, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742)) - _713;
        float _756 = fma(_744, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742)) - _717;
        float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
        float _773 = ((_760 * _754) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_709 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_760 * _755) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_713 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_760 * _756) / cbModelParam._m0[34u].z) + ((((((_717 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        float _812 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_778.x + (-0.5));
        float _814 = _812 * (_778.y + (-0.5));
        float _815 = _812 * (_778.z + (-0.5));
        float _822 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_785.x + (-0.5));
        float _824 = _822 * (_785.y + (-0.5));
        float _825 = _822 * (_785.z + (-0.5));
        float _832 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_792.x + (-0.5));
        float _834 = _832 * (_792.y + (-0.5));
        float _835 = _832 * (_792.z + (-0.5));
        float _842 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_799.x + (-0.5));
        float _844 = _842 * (_799.y + (-0.5));
        float _845 = _842 * (_799.z + (-0.5));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = _813 * 0.5;
        float _850 = _823 * 0.5;
        float _851 = _833 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _866 = (dot(vec3(_510, _511, _512), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _876 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3834 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_878 + 1.0))) + _883) * _846;
        float _893 = _814 * 0.5;
        float _894 = _824 * 0.5;
        float _895 = _834 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(_510, _511, _512), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3867 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_920 + 1.0))) + _925) * _847;
        float _935 = _815 * 0.5;
        float _936 = _825 * 0.5;
        float _937 = _835 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_510, _511, _512), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3900 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_962 + 1.0))) + _967) * _848;
        _984 = _815;
        _986 = _814;
        _987 = _813;
        _988 = _825;
        _989 = _824;
        _990 = _823;
        _991 = _835;
        _992 = _834;
        _993 = _833;
        _994 = _848;
        _995 = _847;
        _996 = _846;
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
    }
    else
    {
        _984 = _985;
        _986 = _985;
        _987 = _985;
        _988 = _985;
        _989 = _985;
        _990 = _985;
        _991 = _985;
        _992 = _985;
        _993 = _985;
        _994 = _985;
        _995 = _985;
        _996 = _985;
        _997 = 0.0;
        _998 = 0.0;
        _999 = 0.0;
    }
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1025 = fma(_682, cbModelParam._m0[30u].z, fma(_678, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _674));
        float _1029 = fma(_682, cbModelParam._m0[31u].z, fma(_678, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _674));
        float _1033 = fma(_682, cbModelParam._m0[32u].z, fma(_678, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _674));
        float _1056 = _674 + _510;
        float _1057 = _678 + _511;
        float _1058 = _682 + _512;
        float _1068 = fma(_1058, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056)) - _1025;
        float _1069 = fma(_1058, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056)) - _1029;
        float _1070 = fma(_1058, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056)) - _1033;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1025 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1029 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[35u].z) + ((((((_1033 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1124 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1091.x + (-0.5));
        float _1126 = _1124 * (_1091.y + (-0.5));
        float _1127 = _1124 * (_1091.z + (-0.5));
        float _1134 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1098.x + (-0.5));
        float _1136 = _1134 * (_1098.y + (-0.5));
        float _1137 = _1134 * (_1098.z + (-0.5));
        float _1144 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1105.x + (-0.5));
        float _1146 = _1144 * (_1105.y + (-0.5));
        float _1147 = _1144 * (_1105.z + (-0.5));
        float _1154 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1112.x + (-0.5));
        float _1156 = _1154 * (_1112.y + (-0.5));
        float _1157 = _1154 * (_1112.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_510, _511, _512), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3963 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1188 + 1.0))) + _1193) * _1158;
        float _1203 = _1126 * 0.5;
        float _1204 = _1136 * 0.5;
        float _1205 = _1146 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_510, _511, _512), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3996 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1230 + 1.0))) + _1235) * _1159;
        float _1245 = _1127 * 0.5;
        float _1246 = _1137 * 0.5;
        float _1247 = _1147 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_510, _511, _512), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4029 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1272 + 1.0))) + _1277) * _1160;
        _1294 = _1127;
        _1295 = _1126;
        _1296 = _1125;
        _1297 = _1137;
        _1298 = _1136;
        _1299 = _1135;
        _1300 = _1147;
        _1301 = _1146;
        _1302 = _1145;
        _1303 = _1160;
        _1304 = _1159;
        _1305 = _1158;
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _985;
        _1295 = _985;
        _1296 = _985;
        _1297 = _985;
        _1298 = _985;
        _1299 = _985;
        _1300 = _985;
        _1301 = _985;
        _1302 = _985;
        _1303 = _985;
        _1304 = _985;
        _1305 = _985;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1341 = fma(_1320, cbSceneParam._m0[89u].z, fma(_1319, cbSceneParam._m0[89u].y, _1318 * cbSceneParam._m0[89u].x));
    float _1344 = fma(_1320, cbSceneParam._m0[90u].z, fma(_1319, cbSceneParam._m0[90u].y, _1318 * cbSceneParam._m0[90u].x));
    float _1347 = fma(_1320, cbSceneParam._m0[91u].z, fma(_1319, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1318));
    float _1362 = _614 * 0.5;
    float _1363 = _615 * 0.5;
    float _1364 = _616 * 0.5;
    float _1365 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1368 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1371 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1405;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1378 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_984, _988, _991, _994));
        float _1382 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_986, _989, _992, _995));
        float _1386 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_987, _990, _993, _996));
        float _1393 = dot(vec4(cbModelParam._m0[39u]), vec4(_1362, _1363, _1364, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1416;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1407 = dot(vec4(cbModelParam._m0[40u]), vec4(_1362, _1363, _1364, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1420 = (_1416 * cbModelParam._m0[1u].x) + (_1405 * (1.0 - cbModelParam._m0[1u].x));
    float _1430 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _514);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1430 : min(cbModelParam._m0[25u].z, _1430));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1478 = fma(_682, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674)) + cbModelParam._m0[13u].w;
        float _1482 = fma(_682, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674)) + cbModelParam._m0[14u].w;
        float _1486 = fma(_682, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674)) + cbModelParam._m0[15u].w;
        float _1489 = fma(_616, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614));
        float _1492 = fma(_616, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614));
        float _1495 = fma(_616, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614));
        float _1523;
        if (_1489 > 0.0)
        {
            _1523 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1523 = frontier_phi_14_12_ladder;
        }
        float _1746;
        if (_1492 > 0.0)
        {
            _1746 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1746 = frontier_phi_23_19_ladder;
        }
        float _2010;
        if (_1495 > 0.0)
        {
            _2010 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2010 = frontier_phi_35_30_ladder;
        }
        float _2012 = isnan(_1746) ? _1523 : (isnan(_1523) ? _1746 : min(_1523, _1746));
        float _2013 = isnan(_2010) ? _2012 : (isnan(_2012) ? _2010 : min(_2012, _2010));
        float _2017 = (_2013 * _1489) + _1478;
        float _2018 = (_2013 * _1492) + _1482;
        float _2019 = (_2013 * _1495) + _1486;
        float _2020 = _2013 * 9.9999997473787516355514526367188e-05;
        float _2022 = (-1.0) - _2020;
        float _2024 = _2020 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2019 > _2024) || ((_2019 < _2022) || ((_2018 > _2024) || ((_2018 < _2022) || ((_2017 < _2022) || (_2017 > _2024))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2019, cbModelParam._m0[9u].z, fma(_2018, cbModelParam._m0[9u].y, _2017 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2019, cbModelParam._m0[10u].z, fma(_2018, cbModelParam._m0[10u].y, _2017 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2019, cbModelParam._m0[11u].z, fma(_2018, cbModelParam._m0[11u].y, _2017 * cbModelParam._m0[11u].x))), _1431);
            frontier_phi_13_35_ladder = _2173.x * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2173.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2173.y * cbModelParam._m0[1u].y;
        }
        _1511 = frontier_phi_13_35_ladder;
        _1513 = frontier_phi_13_35_ladder_2;
        _1515 = frontier_phi_13_35_ladder_1;
    }
    else
    {
        vec4 _1499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_614, _615, _616), _1431);
        _1511 = _1499.x * cbModelParam._m0[1u].y;
        _1513 = _1499.y * cbModelParam._m0[1u].y;
        _1515 = _1499.z * cbModelParam._m0[1u].y;
    }
    float _1519 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _514);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1519 : min(cbModelParam._m0[25u].w, _1519));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1575 = fma(_682, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674)) + cbModelParam._m0[21u].w;
        float _1579 = fma(_682, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674)) + cbModelParam._m0[22u].w;
        float _1583 = fma(_682, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674)) + cbModelParam._m0[23u].w;
        float _1586 = fma(_616, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614));
        float _1589 = fma(_616, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614));
        float _1592 = fma(_616, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614));
        float _1751;
        if (_1586 > 0.0)
        {
            _1751 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1751 = frontier_phi_25_21_ladder;
        }
        float _2037;
        if (_1589 > 0.0)
        {
            _2037 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2037 = frontier_phi_37_32_ladder;
        }
        float _2356;
        if (_1592 > 0.0)
        {
            _2356 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2356 = frontier_phi_46_44_ladder;
        }
        float _2358 = isnan(_2037) ? _1751 : (isnan(_1751) ? _2037 : min(_1751, _2037));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1586) + _1575;
        float _2364 = (_2359 * _1589) + _1579;
        float _2365 = (_2359 * _1592) + _1583;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2366;
        float _2369 = _2366 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2365 > _2369) || ((_2365 < _2367) || ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 < _2367) || (_2363 > _2369))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2365, cbModelParam._m0[17u].z, fma(_2364, cbModelParam._m0[17u].y, _2363 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2365, cbModelParam._m0[18u].z, fma(_2364, cbModelParam._m0[18u].y, _2363 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2365, cbModelParam._m0[19u].z, fma(_2364, cbModelParam._m0[19u].y, _2363 * cbModelParam._m0[19u].x))), _1520);
            frontier_phi_22_46_ladder = _2639.x * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2639.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2639.y * cbModelParam._m0[1u].z;
        }
        _1611 = frontier_phi_22_46_ladder;
        _1613 = frontier_phi_22_46_ladder_2;
        _1615 = frontier_phi_22_46_ladder_1;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_614, _615, _616), _1520);
        _1611 = _1595.x * cbModelParam._m0[1u].z;
        _1613 = _1595.y * cbModelParam._m0[1u].z;
        _1615 = _1595.z * cbModelParam._m0[1u].z;
    }
    float _1627 = ((((1.0 - _642) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_642 * _630)) * _606;
    float _1628 = _1627 * ((cbModelParam._m0[1u].w * (_1611 - _1511)) + _1511);
    float _1629 = _1627 * ((cbModelParam._m0[1u].w * (_1613 - _1513)) + _1513);
    float _1630 = _1627 * ((cbModelParam._m0[1u].w * (_1615 - _1515)) + _1515);
    float _1633 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1628 * cbSceneParam._m0[91u].x));
    float _1650 = _540 / cbSceneParam._m0[86u].x;
    float _1658 = (cbSceneParam._m0[88u].y * (1.0 - _514)) + cbSceneParam._m0[88u].z;
    float _4155 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1660 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 5.0;
    float _1665 = (_629 * cbMtdParam._m0[13u].z) * dot(vec3(_510, _511, _512), vec3(1.0, 0.0, 0.0));
    vec4 _1675 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1665 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1665 + _1650) * cbSceneParam._m0[86u].x, _541), _1660).w) + _1650) * cbSceneParam._m0[86u].x, _541), _1660);
    float _1691 = 1.0 - _1675.w;
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1729 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1733 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1738 = _1725 / _1737;
    float _1739 = _1729 / _1737;
    float _1740 = _1733 / _1737;
    float _1887;
    float _1888;
    float _1889;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1767 = ((uint(_1740 > cbSceneParam._m0[59u].y) + uint(_1740 > cbSceneParam._m0[59u].x)) + uint(_1740 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1768 = _1767 + 43u;
        uint _1776 = _1767 + 44u;
        uint _1784 = _1767 + 45u;
        uint _1792 = _1767 + 46u;
        float _1803 = fma(_1737, cbSceneParam._m0[_1768].w, fma(_1733, cbSceneParam._m0[_1768].z, fma(_1729, cbSceneParam._m0[_1768].y, _1725 * cbSceneParam._m0[_1768].x)));
        float _1807 = fma(_1737, cbSceneParam._m0[_1776].w, fma(_1733, cbSceneParam._m0[_1776].z, fma(_1729, cbSceneParam._m0[_1776].y, _1725 * cbSceneParam._m0[_1776].x)));
        float _1815 = fma(_1737, cbSceneParam._m0[_1792].w, fma(_1733, cbSceneParam._m0[_1792].z, fma(_1729, cbSceneParam._m0[_1792].y, _1725 * cbSceneParam._m0[_1792].x)));
        float _1820 = cbSceneParam._m0[33u].z * _1815;
        float _1822 = cbSceneParam._m0[33u].w * _1815;
        float _1825 = fma(_1737, cbSceneParam._m0[_1784].w, fma(_1733, cbSceneParam._m0[_1784].z, fma(_1729, cbSceneParam._m0[_1784].y, _1725 * cbSceneParam._m0[_1784].x))) / _1815;
        float _1873 = (cbSceneParam._m0[33u].x - sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740))) * cbSceneParam._m0[33u].y;
        float _4166 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1880 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1820 + _1803) / _1815, (_1822 + _1807) / _1815), _1825), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 + _1803) / _1815, (_1807 - _1820) / _1815), _1825), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1803 - _1820) / _1815, (_1807 - _1822) / _1815), _1825), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1803 - _1822) / _1815, (_1820 + _1807) / _1815), _1825), 0.0)).x), vec4(0.25)));
        _1887 = 1.0 - (_1880 * cbSceneParam._m0[34u].x);
        _1888 = 1.0 - (_1880 * cbSceneParam._m0[34u].y);
        _1889 = 1.0 - (_1880 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1887 = 1.0;
        _1888 = 1.0;
        _1889 = 1.0;
    }
    float _1953;
    float _1955;
    float _1957;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1941 = fma(_1737, cbSceneParam._m0[63u].w, fma(_1733, cbSceneParam._m0[63u].z, fma(_1729, cbSceneParam._m0[63u].y, _1725 * cbSceneParam._m0[63u].x)));
        float _1942 = fma(_1737, cbSceneParam._m0[60u].w, fma(_1733, cbSceneParam._m0[60u].z, fma(_1729, cbSceneParam._m0[60u].y, _1725 * cbSceneParam._m0[60u].x))) / _1941;
        float _1943 = fma(_1737, cbSceneParam._m0[61u].w, fma(_1733, cbSceneParam._m0[61u].z, fma(_1729, cbSceneParam._m0[61u].y, _1725 * cbSceneParam._m0[61u].x))) / _1941;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1942 >= cbSceneParam._m0[64u].x) && (_1943 >= cbSceneParam._m0[64u].y)) && (_1942 <= cbSceneParam._m0[64u].z)) && (_1943 <= cbSceneParam._m0[64u].w))
        {
            float _2050 = fma(_1737, cbSceneParam._m0[62u].w, fma(_1733, cbSceneParam._m0[62u].z, fma(_1729, cbSceneParam._m0[62u].y, _1725 * cbSceneParam._m0[62u].x))) / _1941;
            float _2054 = isnan(cbSceneParam._m0[41u].w) ? _2050 : (isnan(_2050) ? cbSceneParam._m0[41u].w : max(_2050, cbSceneParam._m0[41u].w));
            float _2097 = (cbSceneParam._m0[33u].x - sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740))) * cbSceneParam._m0[33u].y;
            float _4182 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
            float _2104 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1942, cbSceneParam._m0[33u].w + _1943), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1942, _1943 - cbSceneParam._m0[33u].z), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1942 - cbSceneParam._m0[33u].z, _1943 - cbSceneParam._m0[33u].w), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1942 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1943), _2054), 0.0)).x), vec4(0.25)));
            float _2108 = 1.0 - (_2104 * cbSceneParam._m0[34u].x);
            float _2109 = 1.0 - (_2104 * cbSceneParam._m0[34u].y);
            float _2110 = 1.0 - (_2104 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2110) ? _1889 : (isnan(_1889) ? _2110 : min(_1889, _2110));
            frontier_phi_34_33_ladder_1 = isnan(_2109) ? _1888 : (isnan(_1888) ? _2109 : min(_1888, _2109));
            frontier_phi_34_33_ladder_2 = isnan(_2108) ? _1887 : (isnan(_1887) ? _2108 : min(_1887, _2108));
        }
        else
        {
            frontier_phi_34_33_ladder = _1889;
            frontier_phi_34_33_ladder_1 = _1888;
            frontier_phi_34_33_ladder_2 = _1887;
        }
        _1953 = frontier_phi_34_33_ladder_2;
        _1955 = frontier_phi_34_33_ladder_1;
        _1957 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1953 = _1887;
        _1955 = _1888;
        _1957 = _1889;
    }
    uvec4 _1962 = floatBitsToUint(cbInstanceData._m0[_581 + 5u]);
    uint _1964 = _1962.x * 14u;
    uint _1965 = _1964 + 13u;
    float _1970 = _606 + (-1.0);
    float _1973 = (cbLight._m0[_1965].x * _1970) + 1.0;
    float _1974 = (cbLight._m0[_1965].y * _1970) + 1.0;
    uint _1976 = _1964 + 4u;
    float _1987 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_510, _511, _512));
    float _1990 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    float _1991 = cbLight._m0[_1976].x * _1953;
    float _1992 = cbLight._m0[_1976].y * _1955;
    float _1993 = cbLight._m0[_1976].z * _1957;
    uint _1994 = _1964 + 5u;
    uint _2000 = _1964 | 1u;
    float _2006 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_510, _511, _512));
    float _2009 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    float _2182;
    float _2183;
    float _2184;
    if (_515 == 0.0)
    {
        float _4218 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _4229 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2119 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
        float _2121 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
        _2182 = ((cbLight._m0[_1994].x * _2009) * _2121) + ((_1991 * _1990) * _2119);
        _2183 = ((_2009 * cbLight._m0[_1994].y) * _2121) + ((_1992 * _1990) * _2119);
        _2184 = ((_2009 * cbLight._m0[_1994].z) * _2121) + ((_1993 * _1990) * _2119);
    }
    else
    {
        float _2131 = _1987 + _515;
        float _2134 = (_515 * 2.0) + 1.0;
        float _2135 = (isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) / _2134;
        float _2142 = _2006 + _515;
        float _2144 = (isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) / _2134;
        _2182 = (((_2144 * cbLight._m0[_1994].x) * _2009) + ((_1991 * _2135) * _1990)) * 0.3183098733425140380859375;
        _2183 = (((_2144 * cbLight._m0[_1994].y) * _2009) + ((_1992 * _2135) * _1990)) * 0.3183098733425140380859375;
        _2184 = (((_2144 * cbLight._m0[_1994].z) * _2009) + ((_1993 * _2135) * _1990)) * 0.3183098733425140380859375;
    }
    uint _2188 = _1964 + 8u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _514) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_1964].x + _378;
    float _2207 = cbLight._m0[_1964].y + _379;
    float _2208 = cbLight._m0[_1964].z + _380;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1964].xyz));
    float _4250 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2220 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2221 = dot(vec3(_510, _511, _512), vec3(_2213, _2214, _2215));
    float _4272 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_2213, _2214, _2215));
    float _4283 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2205 * _2205;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2220 * ((_2219 * _2245) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2245) + _2205) * _2219))) * _2219;
    float _4294 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    uint _2274 = _1964 + 9u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _514) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2000].x + _378;
    float _2291 = cbLight._m0[_2000].y + _379;
    float _2292 = cbLight._m0[_2000].z + _380;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2000].xyz));
    float _4305 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2304 = dot(vec3(_510, _511, _512), vec3(_2297, _2298, _2299));
    float _4316 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2297, _2298, _2299));
    float _4327 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2289 * _2289;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2326 = 1.0 - _2289;
    float _2336 = (0.5 / (((_2220 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2326) + _2289) * _2303))) * _2303;
    float _4338 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    float _2348 = (((_2325 * cbLight._m0[_2274].x) * _2338) * _2009) + ((((cbLight._m0[_2188].x * _1953) * _2244) * _2258) * _1990);
    float _2349 = (((_2325 * cbLight._m0[_2274].y) * _2338) * _2009) + ((((cbLight._m0[_2188].y * _1955) * _2244) * _2258) * _1990);
    float _2350 = (((_2325 * cbLight._m0[_2274].z) * _2338) * _2009) + ((((cbLight._m0[_2188].z * _1957) * _2244) * _2258) * _1990);
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_1962.y == 0u)
    {
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.x;
        uint _2405 = uint((float(_2393.y) * floor(float(uint(cbSceneParam._m0[85u].y * _541) / _2394))) + floor(float(uint(cbSceneParam._m0[85u].x * _540) / _2394)));
        float _2415 = (log2(_1740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2416 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        uint _2419 = uint(isnan(14.0) ? _2416 : (isnan(_2416) ? 14.0 : min(_2416, 14.0)));
        uvec4 _2424 = texelFetch(g_lightClusterGridBuffer, int(((_2419 << 2u) + (_2405 << 6u)) >> 2u));
        uint _2425 = _2424.x;
        uint _2426 = _2393.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2426 >> 4u) & 15u)) + 4294967295u) & _2425) == 0u) || ((_2426 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            uint _2825 = 0u;
            uint _2834;
            bool _2835;
            for (;;)
            {
                _2834 = texelFetch(g_lightClassification, int((((_2419 << 5u) + (_2405 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                _2835 = _2834 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2835)
                {
                    frontier_phi_61_pred = _2819;
                    frontier_phi_61_pred_1 = _2820;
                    frontier_phi_61_pred_2 = _2824;
                    frontier_phi_61_pred_3 = _2823;
                    frontier_phi_61_pred_4 = _2822;
                    frontier_phi_61_pred_5 = _2821;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2834;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2825 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        float _2989 = _2988.x;
                        float _2990 = _2988.y;
                        float _2991 = _2988.z;
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        uint _3010 = (_2953 * 48u) + 12u;
                        vec2 _3018 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x));
                        float _3024 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
                        float _3025 = _3024 * _1738;
                        float _3026 = _3024 * _1739;
                        float _3027 = _3024 * _1740;
                        float _3028 = _2969.x - _1738;
                        float _3029 = _2969.y - _1739;
                        float _3030 = _2969.z - _1740;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_562, _565, _568), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2969.w);
                        float _4359 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3045 = sqrt(_3031) * _2988.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3050 = 1.0 - _3049;
                        float _3052 = (_3050 * _3050) * _515;
                        float _3055 = ((_3050 * _3038) + _3049) + _3052;
                        float _3060 = _3045 * _3045;
                        float _3065 = ((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3044) / (((_3052 * 2.0) + 1.0) * ((_3060 * 0.699999988079071044921875) + 1.0));
                        float _3069 = dot(vec3(_3035, _3036, _3037), vec3(_3025, _3026, _3027));
                        float _4375 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3076 = dot(vec3((-0.0) - _3025, (-0.0) - _3026, (-0.0) - _3027), vec3(_562, _565, _568)) + 1.0;
                        float _3078 = (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * 0.5;
                        float _3086 = ((_3078 * _3078) * _3018.x) * exp2((_3018.y * 32.0) * log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))));
                        float _3088 = _515 / (_515 + 1.0);
                        float _3104 = (-0.0) - _1738;
                        float _3105 = (-0.0) - _1739;
                        float _3106 = (-0.0) - _1740;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3120 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3121 = 1.0 - _630;
                        float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                        float _3129 = _3128 * _3128;
                        float _3130 = _3129 * _3129;
                        float _3131 = _3111 + _3035;
                        float _3132 = _3112 + _3036;
                        float _3133 = _3113 + _3037;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3141 = dot(vec3(_562, _565, _568), vec3(_3111, _3112, _3113));
                        float _4391 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3145 = dot(vec3(_562, _565, _568), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                        float _4402 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                        float _3153 = _3048 * _3129;
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3038) + _3154;
                        float _4413 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3159 = 1.0 - _3129;
                        float _3169 = (0.5 / (((_3158 * ((_3144 * _3159) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3129) * _3144))) * _3158;
                        float _4424 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3180 = (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3152 * _3152) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2878 = (((((_2989 * 0.3183098733425140380859375) * _3088) * _3086) + _2989) * _3065) + _2946;
                        _2879 = (((((_2990 * 0.3183098733425140380859375) * _3088) * _3086) + _2990) * _3065) + _2947;
                        _2880 = (((((_2991 * 0.3183098733425140380859375) * _3088) * _3086) + _2991) * _3065) + _2948;
                        _2875 = (_3180 * _3005.x) + _2943;
                        _2876 = (_3180 * _3005.y) + _2944;
                        _2877 = (_3180 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_61_pred = _2875;
                    frontier_phi_61_pred_1 = _2876;
                    frontier_phi_61_pred_2 = _2880;
                    frontier_phi_61_pred_3 = _2879;
                    frontier_phi_61_pred_4 = _2878;
                    frontier_phi_61_pred_5 = _2877;
                }
                _2645 = frontier_phi_61_pred;
                _2647 = frontier_phi_61_pred_1;
                _2655 = frontier_phi_61_pred_2;
                _2653 = frontier_phi_61_pred_3;
                _2651 = frontier_phi_61_pred_4;
                _2649 = frontier_phi_61_pred_5;
                uint _2826 = _2825 + 1u;
                if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2819 = _2645;
                    _2820 = _2647;
                    _2821 = _2649;
                    _2822 = _2651;
                    _2823 = _2653;
                    _2824 = _2655;
                    _2825 = _2826;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((4294967295u << _2661) & _2425) == 0u)
        {
            _2787 = _2644;
            _2789 = _2646;
            _2791 = _2648;
            _2793 = _2650;
            _2795 = _2652;
            _2797 = _2654;
        }
        else
        {
            float _2812 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
            float _2813 = _2812 * _1738;
            float _2814 = _2812 * _1739;
            float _2815 = _2812 * _1740;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2926 = _2644;
                float _2927 = _2646;
                float _2928 = _2648;
                float _2929 = _2650;
                float _2930 = _2652;
                float _2931 = _2654;
                uint _2932 = _2661;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2419 << 5u) + (_2405 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2942)
                    {
                        frontier_phi_67_pred = _2926;
                        frontier_phi_67_pred_1 = _2931;
                        frontier_phi_67_pred_2 = _2930;
                        frontier_phi_67_pred_3 = _2929;
                        frontier_phi_67_pred_4 = _2928;
                        frontier_phi_67_pred_5 = _2927;
                    }
                    else
                    {
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3198 = _2926;
                        float _3199 = _2927;
                        float _3200 = _2928;
                        float _3201 = _2929;
                        float _3202 = _2930;
                        float _3203 = _2931;
                        uint _3204 = _2941;
                        uint _3205;
                        vec4 _3230;
                        float _3231;
                        vec4 _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        vec3 _3261;
                        vec2 _3270;
                        vec4 _3285;
                        vec4 _3301;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3215 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3204));
                            _3205 = (_3204 + 4294967295u) & _3204;
                            uint _3217 = _3215 * 40u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3231 = _3230.w;
                            uint _3233 = (_3215 * 40u) + 4u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.x;
                            _3248 = _3246.y;
                            _3249 = _3246.z;
                            uint _3251 = (_3215 * 40u) + 8u;
                            _3261 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x));
                            uint _3263 = (_3215 * 40u) + 12u;
                            _3270 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x));
                            uint _3272 = (_3215 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3215 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3304 = (_3215 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3215 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_1740, _3336.z, fma(_1739, _3336.y, _3336.x * _1738)) + _3336.w;
                            _3349 = !((fma(_1740, _3317.z, fma(_1739, _3317.y, _3317.x * _1738)) + _3317.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3349)
                            {
                                float _3375 = _3230.x - _1738;
                                float _3376 = _3230.y - _1739;
                                float _3377 = _3230.z - _1740;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3231 * _3231));
                                float _4435 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3393 = sqrt(_3378) * _3246.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3397 = 1.0 - _3396;
                                float _3399 = (_3397 * _3397) * _515;
                                float _3402 = ((_3397 * dot(vec3(_3382, _3383, _3384), vec3(_562, _565, _568))) + _3396) + _3399;
                                float _3407 = _3393 * _3393;
                                float _3412 = (fma(_1740, _3285.z, fma(_1739, _3285.y, _3285.x * _1738)) + _3285.w) / _3348;
                                float _3413 = (fma(_1740, _3301.z, fma(_1739, _3301.y, _3301.x * _1738)) + _3301.w) / _3348;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4451 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))) * _3389) / (((_3399 * 2.0) + 1.0) * ((_3407 * 0.699999988079071044921875) + 1.0)));
                                float _3420 = (-0.0) - _2813;
                                float _3421 = (-0.0) - _2814;
                                float _3422 = (-0.0) - _2815;
                                float _3423 = dot(vec3(_3382, _3383, _3384), vec3(_2813, _2814, _2815));
                                float _4462 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3430 = dot(vec3(_3420, _3421, _3422), vec3(_562, _565, _568)) + 1.0;
                                float _3432 = (isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * 0.5;
                                float _3439 = ((_3432 * _3432) * _3270.x) * exp2((_3270.y * 32.0) * log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))));
                                float _3441 = _515 / (_515 + 1.0);
                                float _3462 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _630;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3382 - _2813;
                                float _3474 = _3383 - _2814;
                                float _3475 = _3384 - _2815;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_562, _565, _568), vec3(_3420, _3421, _3422));
                                float _4478 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3487 = dot(vec3(_562, _565, _568), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4489 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3395 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_562, _565, _568), vec3(_3382, _3383, _3384))) + _3496;
                                float _4500 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4511 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3418 * _3389) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3494 * _3494) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = ((((_3249 * 0.3183098733425140380859375) * _3441) * _3439) + _3249) * _3419;
                                frontier_phi_73_pred_1 = ((((_3248 * 0.3183098733425140380859375) * _3441) * _3439) + _3248) * _3419;
                                frontier_phi_73_pred_2 = ((((_3247 * 0.3183098733425140380859375) * _3441) * _3439) + _3247) * _3419;
                                frontier_phi_73_pred_3 = _3524 * _3261.z;
                                frontier_phi_73_pred_4 = _3524 * _3261.y;
                                frontier_phi_73_pred_5 = _3524 * _3261.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3533 = frontier_phi_73_pred;
                            _3532 = frontier_phi_73_pred_1;
                            _3531 = frontier_phi_73_pred_2;
                            _3530 = frontier_phi_73_pred_3;
                            _3529 = frontier_phi_73_pred_4;
                            _3528 = frontier_phi_73_pred_5;
                            _3188 = _3531 + _3201;
                            _3189 = _3532 + _3202;
                            _3190 = _3533 + _3203;
                            _3185 = _3528 + _3198;
                            _3186 = _3529 + _3199;
                            _3187 = _3530 + _3200;
                            if (_3205 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3205;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3185;
                        frontier_phi_67_pred_1 = _3190;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3188;
                        frontier_phi_67_pred_4 = _3187;
                        frontier_phi_67_pred_5 = _3186;
                    }
                    _2788 = frontier_phi_67_pred;
                    _2798 = frontier_phi_67_pred_1;
                    _2796 = frontier_phi_67_pred_2;
                    _2794 = frontier_phi_67_pred_3;
                    _2792 = frontier_phi_67_pred_4;
                    _2790 = frontier_phi_67_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2788;
                        _2927 = _2790;
                        _2928 = _2792;
                        _2929 = _2794;
                        _2930 = _2796;
                        _2931 = _2798;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2796;
                frontier_phi_55_56_ladder_1 = _2798;
                frontier_phi_55_56_ladder_2 = _2794;
                frontier_phi_55_56_ladder_3 = _2792;
                frontier_phi_55_56_ladder_4 = _2790;
                frontier_phi_55_56_ladder_5 = _2788;
            }
            else
            {
                frontier_phi_55_56_ladder = _2652;
                frontier_phi_55_56_ladder_1 = _2654;
                frontier_phi_55_56_ladder_2 = _2650;
                frontier_phi_55_56_ladder_3 = _2648;
                frontier_phi_55_56_ladder_4 = _2646;
                frontier_phi_55_56_ladder_5 = _2644;
            }
            _2787 = frontier_phi_55_56_ladder_5;
            _2789 = frontier_phi_55_56_ladder_4;
            _2791 = frontier_phi_55_56_ladder_3;
            _2793 = frontier_phi_55_56_ladder_2;
            _2795 = frontier_phi_55_56_ladder;
            _2797 = frontier_phi_55_56_ladder_1;
        }
        float _2802 = isnan(1.0) ? _606 : (isnan(_606) ? 1.0 : min(_606, 1.0));
        _2438 = (_2802 * _2793) + _2182;
        _2440 = (_2802 * _2795) + _2183;
        _2442 = (_2802 * _2797) + _2184;
        _2444 = ((_2787 * 0.039999999105930328369140625) * _2802) + _2348;
        _2446 = ((_2789 * 0.039999999105930328369140625) * _2802) + _2349;
        _2448 = ((_2791 * 0.039999999105930328369140625) * _2802) + _2350;
    }
    else
    {
        _2438 = _2182;
        _2440 = _2183;
        _2442 = _2184;
        _2444 = _2348;
        _2446 = _2349;
        _2448 = _2350;
    }
    float _2462 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2463 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2464 = cbSceneParam._m0[86u].x * (_1650 + ((_629 * cbMtdParam._m0[13u].y) * dot(vec3(_510, _511, _512), vec3(_206, _207, _208))));
    float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
    float _2466 = isnan(_2463) ? _541 : (isnan(_541) ? _2463 : min(_541, _2463));
    vec4 _2468 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2465, _2466), 0.0);
    float _2470 = _2468.x;
    bool _2491 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2470)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2470))) > _534;
    float _2492 = _2491 ? _2465 : _540;
    float _2493 = _2491 ? _2466 : _541;
    vec4 _2495 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2492, _2493));
    vec4 _2500 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2492, _2493));
    float _2502 = _2500.x;
    float _2522 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2502)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2502))) - _534;
    bool _2532 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2536 = (isnan(_2522) ? 0.0 : (isnan(0.0) ? _2522 : max(0.0, _2522))) * (-1.44269502162933349609375);
    float _4542 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4553 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4564 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2563 = 0.959999978542327880859375 - (exp2(log2(1.0 - _621) * 5.0) * 0.959999978542327880859375);
    float _2566 = ((_2495.x * _2563) * exp2(_2536 * (_2532 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2569 = ((_2495.y * _2563) * exp2(_2536 * (_2532 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2572 = ((_2495.z * _2563) * exp2(_2536 * (_2532 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2594 = _540 / cbSceneParam._m0[86u].x;
    float _2595 = _541 / cbSceneParam._m0[86u].y;
    vec4 _2609 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, (log2((isnan(cbSceneParam._m0[77u].w) ? _534 : (isnan(_534) ? cbSceneParam._m0[77u].w : min(_534, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2611 = _2609.x;
    float _2612 = _2609.y;
    float _2613 = _2609.z;
    float _2614 = _2609.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_534 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_534) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _534 : min(cbSceneParam._m0[80u].w, _534));
        float _2670 = _2669 / _534;
        float _2681 = _2670 * _276;
        float _2682 = _277 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2684 = _2670 * _278;
        float _2686 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2687 = _2686 + cbSceneParam._m0[79u].w;
        float _2688 = cbSceneParam._m0[79u].w - _2682;
        float _2694 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2684 * _2684));
        float _2697 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2694;
        float _2702 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2888;
        if (abs((_2683 - _2686) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2888 = ((((_2687 > 0.0) ? exp2(_2702 * _2687) : (2.0 - exp2(_2703 * _2687))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2697;
        }
        else
        {
            float _2848 = 1.0 / cbSceneParam._m0[80u].x;
            float _2849 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : max(_2687, _2688));
            float _2850 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : min(_2687, _2688));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            _2888 = ((abs(_2694 / _2683) * cbSceneParam._m0[80u].y) * ((((_2859 - _2860) * 2.0) - ((exp2(_2702 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)))) - exp2(_2702 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))))) * _2848)) - ((exp2(_2703 * _2859) - exp2(_2703 * _2860)) * _2848))) + (_2697 * cbSceneParam._m0[80u].z);
        }
        vec4 _2890 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, 1.0), 0.0);
        float _2899 = exp2((_2888 * (-1.44269502162933349609375)) * (1.0 - _2890.w));
        float _2900 = log2(_2899);
        float _2916 = log2(_2614);
        _2705 = (exp2(_2916 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].x)) * _2890.x) / cbSceneParam._m0[78u].x)) + _2611;
        _2707 = (exp2(_2916 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].y)) * _2890.y) / cbSceneParam._m0[78u].y)) + _2612;
        _2709 = (exp2(_2916 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].z)) * _2890.z) / cbSceneParam._m0[78u].z)) + _2613;
        _2711 = _2899 * _2614;
    }
    else
    {
        _2705 = _2611;
        _2707 = _2612;
        _2709 = _2613;
        _2711 = _2614;
    }
    bool _2723 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2724 = log2(_2711);
    float _2731 = exp2(_2724 * cbSceneParam._m0[78u].x) * ((_2566 + (((((_1627 * _1675.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1420) * _1691)) + _2444) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2438 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _606))) - _2566) * cbMtdParam._m0[15u].x));
    float _2732 = exp2(_2724 * cbSceneParam._m0[78u].y) * ((_2569 + (((((_1627 * _1675.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1420) * _1691)) + _2446) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2440 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _606))) - _2569) * cbMtdParam._m0[15u].x));
    float _2733 = exp2(_2724 * cbSceneParam._m0[78u].z) * ((_2572 + (((((_1627 * _1675.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1420) * _1691)) + _2448) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2442 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _606))) - _2572) * cbMtdParam._m0[15u].x));
    vec4 _2741 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_540, _541));
    float _2743 = _2741.x;
    float _2764 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2743)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2743))) - _534) * cbMtdParam._m0[14u].z;
    float _4615 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2766 = (cbInstanceData._m0[_581 + 6u].w * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)));
    float _2775 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2775 * (_2723 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.y = _2775 * (_2723 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.z = _2775 * (_2723 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.w = _2766;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2766;
}


