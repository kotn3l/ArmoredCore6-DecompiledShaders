#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1049;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _289 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _290 = _289 * _278;
    float _291 = _289 * _279;
    float _292 = _289 * _280;
    float _300 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _301 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _315 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_300 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_301 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3729 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    float _335 = fma(_332, _215, fma(_325, _222, _323 * _208));
    float _338 = fma(_332, _216, fma(_325, _223, _323 * _209));
    float _341 = fma(_332, _217, fma(_325, _224, _323 * _210));
    float _345 = inversesqrt(dot(vec3(_335, _338, _341), vec3(_335, _338, _341)));
    float _354 = (dot(vec4(_290, _291, _292, 0.0), vec4(_345 * _335, _345 * _338, _345 * _341, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _367 = dot(vec3(_278, _279, _280), vec3(_208, _209, _210));
    float _370 = dot(vec3(_278, _279, _280), vec3(_222, _223, _224));
    float _373 = dot(vec3(_278, _279, _280), vec3(_215, _216, _217));
    float _379 = inversesqrt(dot(vec3(_367, _370, _373), vec3(_367, _370, _373)));
    float _400 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _420 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_367 * cbMtdParam._m0[12u].x) * _379) * _400) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_370 * cbMtdParam._m0[12u].x) * _379) * _400) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _443 = dot(vec4(_290, _291, _292, 0.0), vec4(_215, _216, _217, 0.0)) - cbMtdParam._m0[12u].w;
    float _3740 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _450 = exp2(log2(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _465 = (((((sin(_354) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _420.x) * cbMtdParam._m0[9u].x) * ((_450 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _474 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _420.y) * cbMtdParam._m0[9u].y) * ((_450 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_354 * 0.85000002384185791015625) + 1.0);
    float _483 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _420.z) * cbMtdParam._m0[9u].z) * ((_450 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_354 * 0.699999988079071044921875) + 1.0);
    vec4 _495 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    float _501 = ((cbMtdParam._m0[12u].z * _495.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _514 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3756 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))));
    float _530 = cbMtdParam._m0[14u].w + _514.z;
    vec4 _542 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _300) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _301) + cbTextureTilingScale._m0[0u].w));
    float _546 = cbMtdParam._m0[13u].w * _542.x;
    float _564 = fma(_528, _215, fma(_522, _222, _521 * _208));
    float _567 = fma(_528, _216, fma(_522, _223, _521 * _209));
    float _570 = fma(_528, _217, fma(_522, _224, _521 * _210));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3767 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3778 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _579 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _580 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3794 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3805 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3816 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _605 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _606 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _626 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _629 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _632 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _645 = uint(roundEven(NORMAL.w)) * 13u;
    uint _647 = (_645 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _653 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_647].x;
    float _654 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_647].y;
    float _655 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_647].z;
    float _3827 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _605, cbSceneParam._m0[86u].y * _606));
    float _670 = _667.x * TEXCOORD_1.w;
    float _671 = dot(vec3(_575, _576, _577), vec3(_290, _291, _292));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _575) - _290;
    float _679 = (_674 * _576) - _291;
    float _680 = (_674 * _577) - _292;
    float _684 = abs(dot(vec3(_290, _291, _292), vec3(_575, _576, _577)));
    float _3860 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _693 = 10.0 / (_599 + 10.0);
    float _694 = sqrt(_579);
    float _706 = exp2((_694 * 5.0) * log2(1.0 - (_685 * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_746, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738));
        float _777 = fma(_746, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738));
        float _781 = fma(_746, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738));
        float _806 = _738 + _575;
        float _807 = _742 + _576;
        float _808 = _746 + _577;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_575, _576, _577), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3908 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_575, _576, _577), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3941 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_575, _576, _577), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3974 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1089 = fma(_746, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _738));
        float _1093 = fma(_746, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _738));
        float _1097 = fma(_746, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _738));
        float _1120 = _738 + _575;
        float _1121 = _742 + _576;
        float _1122 = _746 + _577;
        float _1132 = fma(_1122, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1089 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1093 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[35u].z) + ((((((_1097 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1188 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1155.x + (-0.5));
        float _1190 = _1188 * (_1155.y + (-0.5));
        float _1191 = _1188 * (_1155.z + (-0.5));
        float _1198 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1162.x + (-0.5));
        float _1200 = _1198 * (_1162.y + (-0.5));
        float _1201 = _1198 * (_1162.z + (-0.5));
        float _1208 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1169.x + (-0.5));
        float _1210 = _1208 * (_1169.y + (-0.5));
        float _1211 = _1208 * (_1169.z + (-0.5));
        float _1218 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1176.x + (-0.5));
        float _1220 = _1218 * (_1176.y + (-0.5));
        float _1221 = _1218 * (_1176.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_575, _576, _577), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4037 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1252 + 1.0))) + _1257) * _1222;
        float _1267 = _1190 * 0.5;
        float _1268 = _1200 * 0.5;
        float _1269 = _1210 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_575, _576, _577), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4070 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1294 + 1.0))) + _1299) * _1223;
        float _1309 = _1191 * 0.5;
        float _1310 = _1201 * 0.5;
        float _1311 = _1211 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_575, _576, _577), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4103 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1336 + 1.0))) + _1341) * _1224;
        _1358 = _1191;
        _1359 = _1190;
        _1360 = _1189;
        _1361 = _1201;
        _1362 = _1200;
        _1363 = _1199;
        _1364 = _1211;
        _1365 = _1210;
        _1366 = _1209;
        _1367 = _1224;
        _1368 = _1223;
        _1369 = _1222;
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1049;
        _1359 = _1049;
        _1360 = _1049;
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1405 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1382));
    float _1426 = _678 * 0.5;
    float _1427 = _679 * 0.5;
    float _1428 = _680 * 0.5;
    float _1429 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1432 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1435 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1442 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1446 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1450 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1457 = dot(vec4(cbModelParam._m0[39u]), vec4(_1426, _1427, _1428, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1426, _1427, _1428, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_746, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_746, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_746, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1556 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1559 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1587 = frontier_phi_14_12_ladder;
        }
        float _1810;
        if (_1556 > 0.0)
        {
            _1810 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1810 = frontier_phi_23_19_ladder;
        }
        float _2074;
        if (_1559 > 0.0)
        {
            _2074 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2074 = frontier_phi_35_30_ladder;
        }
        float _2076 = isnan(_1810) ? _1587 : (isnan(_1587) ? _1810 : min(_1587, _1810));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1553) + _1542;
        float _2082 = (_2077 * _1556) + _1546;
        float _2083 = (_2077 * _1559) + _1550;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_13_35_ladder = _2237.x * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2237.y * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_13_35_ladder;
        _1577 = frontier_phi_13_35_ladder_2;
        _1579 = frontier_phi_13_35_ladder_1;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1495);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_746, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_746, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_746, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1653 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1656 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1815;
        if (_1650 > 0.0)
        {
            _1815 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1815 = frontier_phi_25_21_ladder;
        }
        float _2101;
        if (_1653 > 0.0)
        {
            _2101 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2101 = frontier_phi_37_32_ladder;
        }
        float _2420;
        if (_1656 > 0.0)
        {
            _2420 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2420 = frontier_phi_46_44_ladder;
        }
        float _2422 = isnan(_2101) ? _1815 : (isnan(_1815) ? _2101 : min(_1815, _2101));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1650) + _1639;
        float _2428 = (_2423 * _1653) + _1643;
        float _2429 = (_2423 * _1656) + _1647;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2430;
        float _2433 = _2430 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2429 > _2433) || ((_2429 < _2431) || ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 < _2431) || (_2427 > _2433))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2429, cbModelParam._m0[17u].z, fma(_2428, cbModelParam._m0[17u].y, _2427 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2429, cbModelParam._m0[18u].z, fma(_2428, cbModelParam._m0[18u].y, _2427 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2429, cbModelParam._m0[19u].z, fma(_2428, cbModelParam._m0[19u].y, _2427 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_22_46_ladder = _2703.x * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2703.y * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_22_46_ladder;
        _1677 = frontier_phi_22_46_ladder_2;
        _1679 = frontier_phi_22_46_ladder_1;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1584);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1691 = ((((1.0 - _706) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_706 * _694)) * _670;
    float _1692 = _1691 * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1693 = _1691 * ((cbModelParam._m0[1u].w * (_1677 - _1577)) + _1577);
    float _1694 = _1691 * ((cbModelParam._m0[1u].w * (_1679 - _1579)) + _1579);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    float _1714 = _605 / cbSceneParam._m0[86u].x;
    float _1722 = (cbSceneParam._m0[88u].y * (1.0 - _579)) + cbSceneParam._m0[88u].z;
    float _4229 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1724 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 5.0;
    float _1729 = (_693 * cbMtdParam._m0[13u].z) * dot(vec3(_575, _576, _577), vec3(1.0, 0.0, 0.0));
    vec4 _1739 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1729 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1729 + _1714) * cbSceneParam._m0[86u].x, _606), _1724).w) + _1714) * cbSceneParam._m0[86u].x, _606), _1724);
    float _1755 = 1.0 - _1739.w;
    float _1789 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1793 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1797 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1802 = _1789 / _1801;
    float _1803 = _1793 / _1801;
    float _1804 = _1797 / _1801;
    float _1951;
    float _1952;
    float _1953;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1831 = ((uint(_1804 > cbSceneParam._m0[59u].y) + uint(_1804 > cbSceneParam._m0[59u].x)) + uint(_1804 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1832 = _1831 + 43u;
        uint _1840 = _1831 + 44u;
        uint _1848 = _1831 + 45u;
        uint _1856 = _1831 + 46u;
        float _1867 = fma(_1801, cbSceneParam._m0[_1832].w, fma(_1797, cbSceneParam._m0[_1832].z, fma(_1793, cbSceneParam._m0[_1832].y, _1789 * cbSceneParam._m0[_1832].x)));
        float _1871 = fma(_1801, cbSceneParam._m0[_1840].w, fma(_1797, cbSceneParam._m0[_1840].z, fma(_1793, cbSceneParam._m0[_1840].y, _1789 * cbSceneParam._m0[_1840].x)));
        float _1879 = fma(_1801, cbSceneParam._m0[_1856].w, fma(_1797, cbSceneParam._m0[_1856].z, fma(_1793, cbSceneParam._m0[_1856].y, _1789 * cbSceneParam._m0[_1856].x)));
        float _1884 = cbSceneParam._m0[33u].z * _1879;
        float _1886 = cbSceneParam._m0[33u].w * _1879;
        float _1889 = fma(_1801, cbSceneParam._m0[_1848].w, fma(_1797, cbSceneParam._m0[_1848].z, fma(_1793, cbSceneParam._m0[_1848].y, _1789 * cbSceneParam._m0[_1848].x))) / _1879;
        float _1937 = (cbSceneParam._m0[33u].x - sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804))) * cbSceneParam._m0[33u].y;
        float _4240 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1944 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 + _1867) / _1879, (_1886 + _1871) / _1879), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 + _1867) / _1879, (_1871 - _1884) / _1879), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 - _1884) / _1879, (_1871 - _1886) / _1879), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 - _1886) / _1879, (_1884 + _1871) / _1879), _1889), 0.0)).x), vec4(0.25)));
        _1951 = 1.0 - (_1944 * cbSceneParam._m0[34u].x);
        _1952 = 1.0 - (_1944 * cbSceneParam._m0[34u].y);
        _1953 = 1.0 - (_1944 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1951 = 1.0;
        _1952 = 1.0;
        _1953 = 1.0;
    }
    float _2017;
    float _2019;
    float _2021;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2005 = fma(_1801, cbSceneParam._m0[63u].w, fma(_1797, cbSceneParam._m0[63u].z, fma(_1793, cbSceneParam._m0[63u].y, _1789 * cbSceneParam._m0[63u].x)));
        float _2006 = fma(_1801, cbSceneParam._m0[60u].w, fma(_1797, cbSceneParam._m0[60u].z, fma(_1793, cbSceneParam._m0[60u].y, _1789 * cbSceneParam._m0[60u].x))) / _2005;
        float _2007 = fma(_1801, cbSceneParam._m0[61u].w, fma(_1797, cbSceneParam._m0[61u].z, fma(_1793, cbSceneParam._m0[61u].y, _1789 * cbSceneParam._m0[61u].x))) / _2005;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2006 >= cbSceneParam._m0[64u].x) && (_2007 >= cbSceneParam._m0[64u].y)) && (_2006 <= cbSceneParam._m0[64u].z)) && (_2007 <= cbSceneParam._m0[64u].w))
        {
            float _2114 = fma(_1801, cbSceneParam._m0[62u].w, fma(_1797, cbSceneParam._m0[62u].z, fma(_1793, cbSceneParam._m0[62u].y, _1789 * cbSceneParam._m0[62u].x))) / _2005;
            float _2118 = isnan(cbSceneParam._m0[41u].w) ? _2114 : (isnan(_2114) ? cbSceneParam._m0[41u].w : max(_2114, cbSceneParam._m0[41u].w));
            float _2161 = (cbSceneParam._m0[33u].x - sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804))) * cbSceneParam._m0[33u].y;
            float _4256 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
            float _2168 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2006, cbSceneParam._m0[33u].w + _2007), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2006, _2007 - cbSceneParam._m0[33u].z), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2006 - cbSceneParam._m0[33u].z, _2007 - cbSceneParam._m0[33u].w), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2006 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2007), _2118), 0.0)).x), vec4(0.25)));
            float _2172 = 1.0 - (_2168 * cbSceneParam._m0[34u].x);
            float _2173 = 1.0 - (_2168 * cbSceneParam._m0[34u].y);
            float _2174 = 1.0 - (_2168 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2174) ? _1953 : (isnan(_1953) ? _2174 : min(_1953, _2174));
            frontier_phi_34_33_ladder_1 = isnan(_2173) ? _1952 : (isnan(_1952) ? _2173 : min(_1952, _2173));
            frontier_phi_34_33_ladder_2 = isnan(_2172) ? _1951 : (isnan(_1951) ? _2172 : min(_1951, _2172));
        }
        else
        {
            frontier_phi_34_33_ladder = _1953;
            frontier_phi_34_33_ladder_1 = _1952;
            frontier_phi_34_33_ladder_2 = _1951;
        }
        _2017 = frontier_phi_34_33_ladder_2;
        _2019 = frontier_phi_34_33_ladder_1;
        _2021 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2017 = _1951;
        _2019 = _1952;
        _2021 = _1953;
    }
    uvec4 _2026 = floatBitsToUint(cbInstanceData._m0[_645 + 5u]);
    uint _2028 = _2026.x * 14u;
    uint _2029 = _2028 + 13u;
    float _2034 = _670 + (-1.0);
    float _2037 = (cbLight._m0[_2029].x * _2034) + 1.0;
    float _2038 = (cbLight._m0[_2029].y * _2034) + 1.0;
    uint _2040 = _2028 + 4u;
    float _2051 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_575, _576, _577));
    float _2054 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    float _2055 = cbLight._m0[_2040].x * _2017;
    float _2056 = cbLight._m0[_2040].y * _2019;
    float _2057 = cbLight._m0[_2040].z * _2021;
    uint _2058 = _2028 + 5u;
    uint _2064 = _2028 | 1u;
    float _2070 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_575, _576, _577));
    float _2073 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    float _2246;
    float _2247;
    float _2248;
    if (_580 == 0.0)
    {
        float _4292 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _4303 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2183 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.3183098733425140380859375;
        float _2185 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
        _2246 = ((cbLight._m0[_2058].x * _2073) * _2185) + ((_2055 * _2054) * _2183);
        _2247 = ((_2073 * cbLight._m0[_2058].y) * _2185) + ((_2056 * _2054) * _2183);
        _2248 = ((_2073 * cbLight._m0[_2058].z) * _2185) + ((_2057 * _2054) * _2183);
    }
    else
    {
        float _2195 = _2051 + _580;
        float _2198 = (_580 * 2.0) + 1.0;
        float _2199 = (isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) / _2198;
        float _2206 = _2070 + _580;
        float _2208 = (isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) / _2198;
        _2246 = (((_2208 * cbLight._m0[_2058].x) * _2073) + ((_2055 * _2199) * _2054)) * 0.3183098733425140380859375;
        _2247 = (((_2208 * cbLight._m0[_2058].y) * _2073) + ((_2056 * _2199) * _2054)) * 0.3183098733425140380859375;
        _2248 = (((_2208 * cbLight._m0[_2058].z) * _2073) + ((_2057 * _2199) * _2054)) * 0.3183098733425140380859375;
    }
    uint _2252 = _2028 + 8u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _579) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2028].x + _290;
    float _2271 = cbLight._m0[_2028].y + _291;
    float _2272 = cbLight._m0[_2028].z + _292;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2028].xyz));
    float _4324 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2284 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2285 = dot(vec3(_575, _576, _577), vec3(_2277, _2278, _2279));
    float _4346 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2277, _2278, _2279));
    float _4357 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2269 * _2269;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2309 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2284 * ((_2283 * _2309) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2309) + _2269) * _2283))) * _2283;
    float _4368 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    uint _2338 = _2028 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _579) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2064].x + _290;
    float _2355 = cbLight._m0[_2064].y + _291;
    float _2356 = cbLight._m0[_2064].z + _292;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2064].xyz));
    float _4379 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2368 = dot(vec3(_575, _576, _577), vec3(_2361, _2362, _2363));
    float _4390 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2361, _2362, _2363));
    float _4401 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2390 = 1.0 - _2353;
    float _2400 = (0.5 / (((_2284 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2390) + _2353) * _2367))) * _2367;
    float _4412 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2412 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2073) + ((((cbLight._m0[_2252].x * _2017) * _2308) * _2322) * _2054);
    float _2413 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2073) + ((((cbLight._m0[_2252].y * _2019) * _2308) * _2322) * _2054);
    float _2414 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2073) + ((((cbLight._m0[_2252].z * _2021) * _2308) * _2322) * _2054);
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_2026.y == 0u)
    {
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _606) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _605) / _2458)));
        float _2479 = (log2(_1804 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2899)
                {
                    frontier_phi_61_pred = _2883;
                    frontier_phi_61_pred_1 = _2884;
                    frontier_phi_61_pred_2 = _2888;
                    frontier_phi_61_pred_3 = _2887;
                    frontier_phi_61_pred_4 = _2886;
                    frontier_phi_61_pred_5 = _2885;
                }
                else
                {
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    uint _3013;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2898;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3017 = uint(findLSB(_3013)) + (_2889 << 5u);
                        uint _3014 = (_3013 + 4294967295u) & _3013;
                        uint _3019 = _3017 * 48u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3039 = (_3017 * 48u) + 4u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        float _3053 = _3052.x;
                        float _3054 = _3052.y;
                        float _3055 = _3052.z;
                        uint _3058 = (_3017 * 48u) + 8u;
                        vec3 _3069 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x));
                        uint _3074 = (_3017 * 48u) + 12u;
                        vec2 _3082 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x));
                        float _3088 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
                        float _3089 = _3088 * _1802;
                        float _3090 = _3088 * _1803;
                        float _3091 = _3088 * _1804;
                        float _3092 = _3033.x - _1802;
                        float _3093 = _3033.y - _1803;
                        float _3094 = _3033.z - _1804;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_626, _629, _632), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3033.w);
                        float _4433 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3109 = sqrt(_3095) * _3052.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3114 = 1.0 - _3113;
                        float _3116 = (_3114 * _3114) * _580;
                        float _3119 = ((_3114 * _3102) + _3113) + _3116;
                        float _3124 = _3109 * _3109;
                        float _3128 = ((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3108) / (((_3116 * 2.0) + 1.0) * ((_3124 * 0.699999988079071044921875) + 1.0));
                        float _3132 = dot(vec3(_3099, _3100, _3101), vec3(_3089, _3090, _3091));
                        float _4449 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3139 = dot(vec3((-0.0) - _3089, (-0.0) - _3090, (-0.0) - _3091), vec3(_626, _629, _632)) + 1.0;
                        float _3141 = (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * 0.5;
                        float _3149 = ((_3141 * _3141) * _3082.x) * exp2((_3082.y * 32.0) * log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))));
                        float _3151 = _580 / (_580 + 1.0);
                        float _3167 = (-0.0) - _1802;
                        float _3168 = (-0.0) - _1803;
                        float _3169 = (-0.0) - _1804;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3183 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _694;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3174 + _3099;
                        float _3195 = _3175 + _3100;
                        float _3196 = _3176 + _3101;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_626, _629, _632), vec3(_3174, _3175, _3176));
                        float _4465 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3208 = dot(vec3(_626, _629, _632), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4476 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3112 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3102) + _3217;
                        float _4487 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4498 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3215 * _3215) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2942 = (((((_3053 * 0.3183098733425140380859375) * _3151) * _3149) + _3053) * _3128) + _3010;
                        _2943 = (((((_3054 * 0.3183098733425140380859375) * _3151) * _3149) + _3054) * _3128) + _3011;
                        _2944 = (((((_3055 * 0.3183098733425140380859375) * _3151) * _3149) + _3055) * _3128) + _3012;
                        _2939 = (_3243 * _3069.x) + _3007;
                        _2940 = (_3243 * _3069.y) + _3008;
                        _2941 = (_3243 * _3069.z) + _3009;
                        if (_3014 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _3014;
                        }
                    }
                    frontier_phi_61_pred = _2939;
                    frontier_phi_61_pred_1 = _2940;
                    frontier_phi_61_pred_2 = _2944;
                    frontier_phi_61_pred_3 = _2943;
                    frontier_phi_61_pred_4 = _2942;
                    frontier_phi_61_pred_5 = _2941;
                }
                _2709 = frontier_phi_61_pred;
                _2711 = frontier_phi_61_pred_1;
                _2719 = frontier_phi_61_pred_2;
                _2717 = frontier_phi_61_pred_3;
                _2715 = frontier_phi_61_pred_4;
                _2713 = frontier_phi_61_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2709;
                    _2884 = _2711;
                    _2885 = _2713;
                    _2886 = _2715;
                    _2887 = _2717;
                    _2888 = _2719;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2725) & _2489) == 0u)
        {
            _2851 = _2708;
            _2853 = _2710;
            _2855 = _2712;
            _2857 = _2714;
            _2859 = _2716;
            _2861 = _2718;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
            float _2877 = _2876 * _1802;
            float _2878 = _2876 * _1803;
            float _2879 = _2876 * _1804;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2990 = _2708;
                float _2991 = _2710;
                float _2992 = _2712;
                float _2993 = _2714;
                float _2994 = _2716;
                float _2995 = _2718;
                uint _2996 = _2725;
                uint _3005;
                bool _3006;
                for (;;)
                {
                    _3005 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                    _3006 = _3005 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3006)
                    {
                        frontier_phi_67_pred = _2990;
                        frontier_phi_67_pred_1 = _2995;
                        frontier_phi_67_pred_2 = _2994;
                        frontier_phi_67_pred_3 = _2993;
                        frontier_phi_67_pred_4 = _2992;
                        frontier_phi_67_pred_5 = _2991;
                    }
                    else
                    {
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3261 = _2990;
                        float _3262 = _2991;
                        float _3263 = _2992;
                        float _3264 = _2993;
                        float _3265 = _2994;
                        float _3266 = _2995;
                        uint _3267 = _3005;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        vec3 _3324;
                        vec2 _3333;
                        vec4 _3348;
                        vec4 _3364;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3278 = ((_2996 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.x;
                            _3311 = _3309.y;
                            _3312 = _3309.z;
                            uint _3314 = (_3278 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3278 * 40u) + 12u;
                            _3333 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x));
                            uint _3335 = (_3278 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3278 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3367 = (_3278 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3278 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_1804, _3399.z, fma(_1803, _3399.y, _3399.x * _1802)) + _3399.w;
                            _3412 = !((fma(_1804, _3380.z, fma(_1803, _3380.y, _3380.x * _1802)) + _3380.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3412)
                            {
                                float _3438 = _3293.x - _1802;
                                float _3439 = _3293.y - _1803;
                                float _3440 = _3293.z - _1804;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3294 * _3294));
                                float _4509 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3456 = sqrt(_3441) * _3309.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3460 = 1.0 - _3459;
                                float _3462 = (_3460 * _3460) * _580;
                                float _3465 = ((_3460 * dot(vec3(_3445, _3446, _3447), vec3(_626, _629, _632))) + _3459) + _3462;
                                float _3470 = _3456 * _3456;
                                float _3475 = (fma(_1804, _3348.z, fma(_1803, _3348.y, _3348.x * _1802)) + _3348.w) / _3411;
                                float _3476 = (fma(_1804, _3364.z, fma(_1803, _3364.y, _3364.x * _1802)) + _3364.w) / _3411;
                                float _3480 = 1.0 - dot(vec2(_3475, _3476), vec2(_3475, _3476));
                                float _4525 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3482 = _3481 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3452) / (((_3462 * 2.0) + 1.0) * ((_3470 * 0.699999988079071044921875) + 1.0)));
                                float _3483 = (-0.0) - _2877;
                                float _3484 = (-0.0) - _2878;
                                float _3485 = (-0.0) - _2879;
                                float _3486 = dot(vec3(_3445, _3446, _3447), vec3(_2877, _2878, _2879));
                                float _4536 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3493 = dot(vec3(_3483, _3484, _3485), vec3(_626, _629, _632)) + 1.0;
                                float _3495 = (isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * 0.5;
                                float _3502 = ((_3495 * _3495) * _3333.x) * exp2((_3333.y * 32.0) * log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))));
                                float _3504 = _580 / (_580 + 1.0);
                                float _3525 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _694;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3445 - _2877;
                                float _3537 = _3446 - _2878;
                                float _3538 = _3447 - _2879;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_626, _629, _632), vec3(_3483, _3484, _3485));
                                float _4552 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3550 = dot(vec3(_626, _629, _632), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4563 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3458 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_626, _629, _632), vec3(_3445, _3446, _3447))) + _3559;
                                float _4574 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4585 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3481 * _3452) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) / ((_3557 * _3557) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = ((((_3312 * 0.3183098733425140380859375) * _3504) * _3502) + _3312) * _3482;
                                frontier_phi_73_pred_1 = ((((_3311 * 0.3183098733425140380859375) * _3504) * _3502) + _3311) * _3482;
                                frontier_phi_73_pred_2 = ((((_3310 * 0.3183098733425140380859375) * _3504) * _3502) + _3310) * _3482;
                                frontier_phi_73_pred_3 = _3587 * _3324.z;
                                frontier_phi_73_pred_4 = _3587 * _3324.y;
                                frontier_phi_73_pred_5 = _3587 * _3324.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3596 = frontier_phi_73_pred;
                            _3595 = frontier_phi_73_pred_1;
                            _3594 = frontier_phi_73_pred_2;
                            _3593 = frontier_phi_73_pred_3;
                            _3592 = frontier_phi_73_pred_4;
                            _3591 = frontier_phi_73_pred_5;
                            _3251 = _3594 + _3264;
                            _3252 = _3595 + _3265;
                            _3253 = _3596 + _3266;
                            _3248 = _3591 + _3261;
                            _3249 = _3592 + _3262;
                            _3250 = _3593 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3248;
                        frontier_phi_67_pred_1 = _3253;
                        frontier_phi_67_pred_2 = _3252;
                        frontier_phi_67_pred_3 = _3251;
                        frontier_phi_67_pred_4 = _3250;
                        frontier_phi_67_pred_5 = _3249;
                    }
                    _2852 = frontier_phi_67_pred;
                    _2862 = frontier_phi_67_pred_1;
                    _2860 = frontier_phi_67_pred_2;
                    _2858 = frontier_phi_67_pred_3;
                    _2856 = frontier_phi_67_pred_4;
                    _2854 = frontier_phi_67_pred_5;
                    uint _2997 = _2996 + 1u;
                    if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2990 = _2852;
                        _2991 = _2854;
                        _2992 = _2856;
                        _2993 = _2858;
                        _2994 = _2860;
                        _2995 = _2862;
                        _2996 = _2997;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2860;
                frontier_phi_55_56_ladder_1 = _2862;
                frontier_phi_55_56_ladder_2 = _2858;
                frontier_phi_55_56_ladder_3 = _2856;
                frontier_phi_55_56_ladder_4 = _2854;
                frontier_phi_55_56_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_55_56_ladder = _2716;
                frontier_phi_55_56_ladder_1 = _2718;
                frontier_phi_55_56_ladder_2 = _2714;
                frontier_phi_55_56_ladder_3 = _2712;
                frontier_phi_55_56_ladder_4 = _2710;
                frontier_phi_55_56_ladder_5 = _2708;
            }
            _2851 = frontier_phi_55_56_ladder_5;
            _2853 = frontier_phi_55_56_ladder_4;
            _2855 = frontier_phi_55_56_ladder_3;
            _2857 = frontier_phi_55_56_ladder_2;
            _2859 = frontier_phi_55_56_ladder;
            _2861 = frontier_phi_55_56_ladder_1;
        }
        float _2866 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2502 = (_2866 * _2857) + _2246;
        _2504 = (_2866 * _2859) + _2247;
        _2506 = (_2866 * _2861) + _2248;
        _2508 = ((_2851 * 0.039999999105930328369140625) * _2866) + _2412;
        _2510 = ((_2853 * 0.039999999105930328369140625) * _2866) + _2413;
        _2512 = ((_2855 * 0.039999999105930328369140625) * _2866) + _2414;
    }
    else
    {
        _2502 = _2246;
        _2504 = _2247;
        _2506 = _2248;
        _2508 = _2412;
        _2510 = _2413;
        _2512 = _2414;
    }
    float _2526 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2527 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2528 = cbSceneParam._m0[86u].x * (_1714 + ((_693 * cbMtdParam._m0[13u].y) * dot(vec3(_575, _576, _577), vec3(_208, _209, _210))));
    float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
    float _2530 = isnan(_2527) ? _606 : (isnan(_606) ? _2527 : min(_606, _2527));
    vec4 _2532 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2529, _2530), 0.0);
    float _2534 = _2532.x;
    bool _2555 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2534)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2534))) > _599;
    float _2556 = _2555 ? _2529 : _605;
    float _2557 = _2555 ? _2530 : _606;
    vec4 _2559 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2556, _2557));
    vec4 _2564 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2556, _2557));
    float _2566 = _2564.x;
    float _2586 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2566)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2566))) - _599;
    bool _2596 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2600 = (isnan(_2586) ? 0.0 : (isnan(0.0) ? _2586 : max(0.0, _2586))) * (-1.44269502162933349609375);
    float _4616 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4627 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4638 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2627 = 0.959999978542327880859375 - (exp2(log2(1.0 - _685) * 5.0) * 0.959999978542327880859375);
    float _2630 = ((_2559.x * _2627) * exp2(_2600 * (_2596 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2633 = ((_2559.y * _2627) * exp2(_2600 * (_2596 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2636 = ((_2559.z * _2627) * exp2(_2600 * (_2596 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2658 = _605 / cbSceneParam._m0[86u].x;
    float _2659 = _606 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2734 = _2733 / _599;
        float _2745 = _2734 * _278;
        float _2746 = _279 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2748 = _2734 * _280;
        float _2750 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2746;
        float _2758 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2747 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2767 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2914 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2952 = ((abs(_2758 / _2747) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2767 * _2923) - exp2(_2767 * _2924)) * _2912))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2678);
        _2769 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2771 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2773 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2775 = _2963 * _2678;
    }
    else
    {
        _2769 = _2675;
        _2771 = _2676;
        _2773 = _2677;
        _2775 = _2678;
    }
    bool _2787 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2788 = log2(_2775);
    float _2795 = exp2(_2788 * cbSceneParam._m0[78u].x) * ((_2630 + (((((_1691 * _1739.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1484) * _1755)) + _2508) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2502 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _670))) - _2630) * cbMtdParam._m0[15u].x));
    float _2796 = exp2(_2788 * cbSceneParam._m0[78u].y) * ((_2633 + (((((_1691 * _1739.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1484) * _1755)) + _2510) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2504 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _670))) - _2633) * cbMtdParam._m0[15u].x));
    float _2797 = exp2(_2788 * cbSceneParam._m0[78u].z) * ((_2636 + (((((_1691 * _1739.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1484) * _1755)) + _2512) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2506 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _670))) - _2636) * cbMtdParam._m0[15u].x));
    vec4 _2805 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_605, _606));
    float _2807 = _2805.x;
    float _2828 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2807)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2807))) - _599) * cbMtdParam._m0[14u].z;
    float _4689 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2830 = (cbInstanceData._m0[_645 + 6u].w * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)));
    float _2839 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2839 * (_2787 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.y = _2839 * (_2787 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.z = _2839 * (_2787 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.w = _2830;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2830;
}


