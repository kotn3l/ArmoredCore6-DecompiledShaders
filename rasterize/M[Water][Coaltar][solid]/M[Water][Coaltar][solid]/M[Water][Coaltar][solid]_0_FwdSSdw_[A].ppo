#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1005;
float _3486;
float _3487;
float _3488;
float _3489;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _284 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _285 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _296 = dot(vec3(_274, _275, _276), vec3(_204, _205, _206));
    float _299 = dot(vec3(_274, _275, _276), vec3(_218, _219, _220));
    float _302 = dot(vec3(_274, _275, _276), vec3(_211, _212, _213));
    float _308 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _332 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _352 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_296 * cbMtdParam._m0[12u].x) * _308) * _332) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_299 * cbMtdParam._m0[12u].x) * _308) * _332) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _375 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _376 = _375 * _274;
    float _377 = _375 * _275;
    float _378 = _375 * _276;
    float _382 = dot(vec4(_376, _377, _378, 0.0), vec4(_211, _212, _213, 0.0)) - cbMtdParam._m0[12u].w;
    float _3498 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _389 = exp2(log2(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _404 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _352.x) * cbMtdParam._m0[9u].x) * ((_389 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _408 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _352.y) * cbMtdParam._m0[9u].y) * ((_389 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _412 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _352.z) * cbMtdParam._m0[9u].z) * ((_389 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _425 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    float _433 = (_425.x * 2.0) + (-1.0);
    float _434 = (_425.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3514 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))));
    float _445 = cbMtdParam._m0[14u].w + _425.z;
    vec4 _457 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _284) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _285) + cbTextureTilingScale._m0[0u].w));
    float _461 = cbMtdParam._m0[13u].w * _457.x;
    float _479 = fma(_440, _211, fma(_434, _218, _433 * _204));
    float _482 = fma(_440, _212, fma(_434, _219, _433 * _205));
    float _485 = fma(_440, _213, fma(_434, _220, _433 * _206));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _3525 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _493 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _494 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3541 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3552 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3563 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _513 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _518 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _520 = _518.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _684 = sqrt(((_274 * _274) + (_275 * _275)) + (_276 * _276));
        float _690 = (cbMatDynParam._m0[5u].x * _684) + cbMatDynParam._m0[5u].y;
        float _3574 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _695 = (cbMatDynParam._m0[5u].z * _684) + cbMatDynParam._m0[5u].w;
        float _3585 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) - _691)) + _691) < ((_520 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _553 = fma(_492, cbSceneParam._m0[5u].z, fma(_491, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _490));
    float _556 = fma(_492, cbSceneParam._m0[6u].z, fma(_491, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _490));
    float _559 = fma(_492, cbSceneParam._m0[7u].z, fma(_491, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _490));
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _573 = _572 + 9u;
    uint _574 = _573 + uint(cbMatDynParam._m0[0u].w);
    float _580 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_574].x;
    float _581 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_574].y;
    float _582 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_574].z;
    float _3596 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _597 = _594.x * TEXCOORD_1.w;
    float _598 = dot(vec3(_490, _491, _492), vec3(_376, _377, _378));
    float _601 = _598 * 2.0;
    float _605 = (_601 * _490) - _376;
    float _606 = (_601 * _491) - _377;
    float _607 = (_601 * _492) - _378;
    float _611 = abs(dot(vec3(_376, _377, _378), vec3(_490, _491, _492)));
    float _3629 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _620 = 10.0 / (_513 + 10.0);
    float _621 = sqrt(_493);
    float _633 = exp2((_621 * 5.0) * log2(1.0 - (_612 * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_673, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665));
        float _733 = fma(_673, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665));
        float _737 = fma(_673, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665));
        float _762 = _665 + _490;
        float _763 = _669 + _491;
        float _764 = _673 + _492;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_490, _491, _492), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3677 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_490, _491, _492), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3710 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_490, _491, _492), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3743 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1048 = fma(_673, cbModelParam._m0[30u].z, fma(_669, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _665));
        float _1052 = fma(_673, cbModelParam._m0[31u].z, fma(_669, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _665));
        float _1056 = fma(_673, cbModelParam._m0[32u].z, fma(_669, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _665));
        float _1079 = _665 + _490;
        float _1080 = _669 + _491;
        float _1081 = _673 + _492;
        float _1091 = fma(_1081, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079)) - _1048;
        float _1092 = fma(_1081, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079)) - _1052;
        float _1093 = fma(_1081, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079)) - _1056;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1048 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1052 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[35u].z) + ((((((_1056 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1147 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1114.x + (-0.5));
        float _1149 = _1147 * (_1114.y + (-0.5));
        float _1150 = _1147 * (_1114.z + (-0.5));
        float _1157 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1121.x + (-0.5));
        float _1159 = _1157 * (_1121.y + (-0.5));
        float _1160 = _1157 * (_1121.z + (-0.5));
        float _1167 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1128.x + (-0.5));
        float _1169 = _1167 * (_1128.y + (-0.5));
        float _1170 = _1167 * (_1128.z + (-0.5));
        float _1177 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1135.x + (-0.5));
        float _1179 = _1177 * (_1135.y + (-0.5));
        float _1180 = _1177 * (_1135.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_490, _491, _492), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3806 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1211 + 1.0))) + _1216) * _1181;
        float _1226 = _1149 * 0.5;
        float _1227 = _1159 * 0.5;
        float _1228 = _1169 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_490, _491, _492), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3839 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1253 + 1.0))) + _1258) * _1182;
        float _1268 = _1150 * 0.5;
        float _1269 = _1160 * 0.5;
        float _1270 = _1170 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_490, _491, _492), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3872 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1295 + 1.0))) + _1300) * _1183;
        _1317 = _1150;
        _1318 = _1149;
        _1319 = _1148;
        _1320 = _1160;
        _1321 = _1159;
        _1322 = _1158;
        _1323 = _1170;
        _1324 = _1169;
        _1325 = _1168;
        _1326 = _1183;
        _1327 = _1182;
        _1328 = _1181;
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = _1005;
        _1327 = _1005;
        _1328 = _1005;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1018)) + _1018;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1019)) + _1019;
    float _1364 = fma(_1343, cbSceneParam._m0[89u].z, fma(_1342, cbSceneParam._m0[89u].y, _1341 * cbSceneParam._m0[89u].x));
    float _1367 = fma(_1343, cbSceneParam._m0[90u].z, fma(_1342, cbSceneParam._m0[90u].y, _1341 * cbSceneParam._m0[90u].x));
    float _1370 = fma(_1343, cbSceneParam._m0[91u].z, fma(_1342, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1341));
    float _1385 = _605 * 0.5;
    float _1386 = _606 * 0.5;
    float _1387 = _607 * 0.5;
    float _1388 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1391 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1394 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1428;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1401 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1405 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1409 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1416 = dot(vec4(cbModelParam._m0[39u]), vec4(_1385, _1386, _1387, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1439;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1430 = dot(vec4(cbModelParam._m0[40u]), vec4(_1385, _1386, _1387, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1443 = (_1439 * cbModelParam._m0[1u].x) + (_1428 * (1.0 - cbModelParam._m0[1u].x));
    float _1453 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _493);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1453 : min(cbModelParam._m0[25u].z, _1453));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_673, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_673, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_673, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_607, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605));
        float _1515 = fma(_607, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605));
        float _1518 = fma(_607, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1546 = frontier_phi_17_15_ladder;
        }
        float _1790;
        if (_1515 > 0.0)
        {
            _1790 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1790 = frontier_phi_26_22_ladder;
        }
        float _2028;
        if (_1518 > 0.0)
        {
            _2028 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2028 = frontier_phi_37_33_ladder;
        }
        float _2030 = isnan(_1790) ? _1546 : (isnan(_1546) ? _1790 : min(_1546, _1790));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1512) + _1501;
        float _2036 = (_2031 * _1515) + _1505;
        float _2037 = (_2031 * _1518) + _1509;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2038;
        float _2042 = _2038 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 > _2042) || ((_2036 < _2040) || ((_2035 < _2040) || (_2035 > _2042))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1454);
            frontier_phi_16_37_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_16_37_ladder_2;
        _1536 = frontier_phi_16_37_ladder_1;
        _1538 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_605, _606, _607), _1454);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _493);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_673, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_673, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_673, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_607, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605));
        float _1612 = fma(_607, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605));
        float _1615 = fma(_607, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605));
        float _1795;
        if (_1609 > 0.0)
        {
            _1795 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1795 = frontier_phi_28_24_ladder;
        }
        float _2055;
        if (_1612 > 0.0)
        {
            _2055 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2055 = frontier_phi_39_35_ladder;
        }
        float _2525;
        if (_1615 > 0.0)
        {
            _2525 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2525 = frontier_phi_50_45_ladder;
        }
        float _2527 = isnan(_2055) ? _1795 : (isnan(_1795) ? _2055 : min(_1795, _2055));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1609) + _1598;
        float _2533 = (_2528 * _1612) + _1602;
        float _2534 = (_2528 * _1615) + _1606;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_25_50_ladder = _2671.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2671.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2671.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_25_50_ladder_2;
        _1636 = frontier_phi_25_50_ladder_1;
        _1638 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_605, _606, _607), _1543);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1650 = ((((1.0 - _633) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_633 * _621)) * _597;
    float _1651 = _1650 * ((cbModelParam._m0[1u].w * (_1634 - _1534)) + _1534);
    float _1652 = _1650 * ((cbModelParam._m0[1u].w * (_1636 - _1536)) + _1536);
    float _1653 = _1650 * ((cbModelParam._m0[1u].w * (_1638 - _1538)) + _1538);
    float _1656 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    float _1673 = _532 / cbSceneParam._m0[86u].x;
    float _1681 = (cbSceneParam._m0[88u].y * (1.0 - _493)) + cbSceneParam._m0[88u].z;
    float _3998 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1683 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 5.0;
    float _1688 = (_620 * cbMtdParam._m0[13u].z) * dot(vec3(_490, _491, _492), vec3(1.0, 0.0, 0.0));
    vec4 _1698 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1688 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1688 + _1673) * cbSceneParam._m0[86u].x, _533), _1683).w) + _1673) * cbSceneParam._m0[86u].x, _533), _1683);
    float _1714 = 1.0 - _1698.w;
    vec4 _1722 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_532, _533));
    float _1724 = _1722.w;
    float _1736 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1724);
    float _1737 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1724);
    float _1738 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1724);
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1750 = _597 + (-1.0);
    float _1753 = (cbLight._m0[_1745].x * _1750) + 1.0;
    float _1754 = (cbLight._m0[_1745].y * _1750) + 1.0;
    uint _1756 = _1744 + 4u;
    float _1767 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_490, _491, _492));
    float _1770 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    float _1771 = cbLight._m0[_1756].x * _1736;
    float _1772 = cbLight._m0[_1756].y * _1737;
    float _1773 = cbLight._m0[_1756].z * _1738;
    uint _1774 = _1744 + 5u;
    uint _1780 = _1744 | 1u;
    float _1786 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_490, _491, _492));
    float _1789 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    float _1854;
    float _1855;
    float _1856;
    if (_494 == 0.0)
    {
        float _4019 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _4030 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1808 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
        float _1810 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
        _1854 = ((cbLight._m0[_1774].x * _1789) * _1810) + ((_1771 * _1770) * _1808);
        _1855 = ((_1789 * cbLight._m0[_1774].y) * _1810) + ((_1772 * _1770) * _1808);
        _1856 = ((_1789 * cbLight._m0[_1774].z) * _1810) + ((_1773 * _1770) * _1808);
    }
    else
    {
        float _1820 = _1767 + _494;
        float _1823 = (_494 * 2.0) + 1.0;
        float _1824 = (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) / _1823;
        float _1831 = _1786 + _494;
        float _1833 = (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) / _1823;
        _1854 = (((_1833 * cbLight._m0[_1774].x) * _1789) + ((_1771 * _1824) * _1770)) * 0.3183098733425140380859375;
        _1855 = (((_1833 * cbLight._m0[_1774].y) * _1789) + ((_1772 * _1824) * _1770)) * 0.3183098733425140380859375;
        _1856 = (((_1833 * cbLight._m0[_1774].z) * _1789) + ((_1773 * _1824) * _1770)) * 0.3183098733425140380859375;
    }
    uint _1860 = _1744 + 8u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _493) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1744].x + _376;
    float _1879 = cbLight._m0[_1744].y + _377;
    float _1880 = cbLight._m0[_1744].z + _378;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1744].xyz));
    float _4051 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1892 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1893 = dot(vec3(_490, _491, _492), vec3(_1885, _1886, _1887));
    float _4073 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1885, _1886, _1887));
    float _4084 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1877 * _1877;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1877;
    float _1928 = (0.5 / (((_1892 * ((_1891 * _1917) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1917) + _1877) * _1891))) * _1891;
    float _4095 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1930 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    uint _1946 = _1744 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _493) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1780].x + _376;
    float _1963 = cbLight._m0[_1780].y + _377;
    float _1964 = cbLight._m0[_1780].z + _378;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1780].xyz));
    float _4106 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1976 = dot(vec3(_490, _491, _492), vec3(_1969, _1970, _1971));
    float _4117 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1969, _1970, _1971));
    float _4128 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = 1.0 - _1961;
    float _2008 = (0.5 / (((_1892 * ((_1975 * _1998) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1998) + _1961) * _1975))) * _1975;
    float _4139 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2020 = (((_1997 * cbLight._m0[_1946].x) * _2010) * _1789) + ((((cbLight._m0[_1860].x * _1736) * _1916) * _1930) * _1770);
    float _2021 = (((_1997 * cbLight._m0[_1946].y) * _2010) * _1789) + ((((cbLight._m0[_1860].y * _1737) * _1916) * _1930) * _1770);
    float _2022 = (((_1997 * cbLight._m0[_1946].z) * _2010) * _1789) + ((((cbLight._m0[_1860].z * _1738) * _1916) * _1930) * _1770);
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    if (_1742.y == 0u)
    {
        float _2099 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2100 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2099;
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2099;
        float _2102 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2099;
        uvec4 _2114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2115 = _2114.x;
        uint _2126 = uint((float(_2114.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2115))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2115)));
        float _2136 = (log2(_2102 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2137 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        uint _2140 = uint(isnan(14.0) ? _2137 : (isnan(_2137) ? 14.0 : min(_2137, 14.0)));
        uvec4 _2145 = texelFetch(g_lightClusterGridBuffer, int(((_2140 << 2u) + (_2126 << 6u)) >> 2u));
        uint _2146 = _2145.x;
        uint _2147 = _2114.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2147 >> 4u) & 15u)) + 4294967295u) & _2146) == 0u) || ((_2147 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2140 << 5u) + (_2126 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2599)
                {
                    frontier_phi_61_pred = _2584;
                    frontier_phi_61_pred_1 = _2588;
                    frontier_phi_61_pred_2 = _2587;
                    frontier_phi_61_pred_3 = _2586;
                    frontier_phi_61_pred_4 = _2585;
                    frontier_phi_61_pred_5 = _2583;
                }
                else
                {
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    uint _2755;
                    _2749 = _2583;
                    _2750 = _2584;
                    _2751 = _2585;
                    _2752 = _2586;
                    _2753 = _2587;
                    _2754 = _2588;
                    _2755 = _2598;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    for (;;)
                    {
                        uint _2759 = uint(findLSB(_2755)) + (_2589 << 5u);
                        uint _2756 = (_2755 + 4294967295u) & _2755;
                        uint _2761 = _2759 * 48u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2781 = (_2759 * 48u) + 4u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        float _2795 = _2794.x;
                        float _2796 = _2794.y;
                        float _2797 = _2794.z;
                        uint _2800 = (_2759 * 48u) + 8u;
                        vec3 _2811 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x));
                        uint _2816 = (_2759 * 48u) + 12u;
                        vec2 _2824 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x));
                        float _2830 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
                        float _2831 = _2830 * _2100;
                        float _2832 = _2830 * _2101;
                        float _2833 = _2830 * _2102;
                        float _2834 = _2775.x - _2100;
                        float _2835 = _2775.y - _2101;
                        float _2836 = _2775.z - _2102;
                        float _2837 = dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836));
                        float _2840 = inversesqrt(_2837);
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2844 = dot(vec3(_553, _556, _559), vec3(_2841, _2842, _2843));
                        float _2849 = 1.0 - (_2837 * _2775.w);
                        float _4160 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2851 = sqrt(_2837) * _2794.w;
                        float _2854 = 1.39999997615814208984375 / (_2851 + 1.39999997615814208984375);
                        float _2855 = _2854 * _2854;
                        float _2856 = 1.0 - _2855;
                        float _2858 = (_2856 * _2856) * _494;
                        float _2861 = ((_2856 * _2844) + _2855) + _2858;
                        float _2866 = _2851 * _2851;
                        float _2871 = ((isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * _2850) / (((_2858 * 2.0) + 1.0) * ((_2866 * 0.699999988079071044921875) + 1.0));
                        float _2875 = dot(vec3(_2841, _2842, _2843), vec3(_2831, _2832, _2833));
                        float _4176 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2882 = dot(vec3((-0.0) - _2831, (-0.0) - _2832, (-0.0) - _2833), vec3(_553, _556, _559)) + 1.0;
                        float _2884 = (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * 0.5;
                        float _2892 = ((_2884 * _2884) * _2824.x) * exp2((_2824.y * 32.0) * log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))));
                        float _2894 = _494 / (_494 + 1.0);
                        float _2910 = (-0.0) - _2100;
                        float _2911 = (-0.0) - _2101;
                        float _2912 = (-0.0) - _2102;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2927 = exp2(log2(1.0 / ((_2866 * 3.5) + 5.0)) * 0.25);
                        float _2928 = 1.0 - _621;
                        float _2935 = sqrt(1.0 - ((1.0 - (_2928 * _2928)) * (1.0 - (_2927 * _2927))));
                        float _2936 = _2935 * _2935;
                        float _2937 = _2936 * _2936;
                        float _2938 = _2917 + _2841;
                        float _2939 = _2918 + _2842;
                        float _2940 = _2919 + _2843;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2948 = dot(vec3(_553, _556, _559), vec3(_2917, _2918, _2919));
                        float _4192 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2952 = dot(vec3(_553, _556, _559), vec3(_2944 * _2938, _2944 * _2939, _2944 * _2940));
                        float _4203 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2959 = ((_2955 * _2955) * (_2937 + (-1.0))) + 1.0;
                        float _2960 = _2854 * _2936;
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2844) + _2961;
                        float _4214 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2966 = 1.0 - _2936;
                        float _2976 = (0.5 / (((_2965 * ((_2951 * _2966) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2965 * _2966) + _2936) * _2951))) * _2965;
                        float _4225 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2987 = (((_2937 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2959 * _2959) * ((_2866 * 2.1991131305694580078125) + 3.141590118408203125))) * _2850;
                        _2679 = (((((_2795 * 0.3183098733425140380859375) * _2894) * _2892) + _2795) * _2871) + _2752;
                        _2680 = (((((_2796 * 0.3183098733425140380859375) * _2894) * _2892) + _2796) * _2871) + _2753;
                        _2681 = (((((_2797 * 0.3183098733425140380859375) * _2894) * _2892) + _2797) * _2871) + _2754;
                        _2676 = (_2987 * _2811.x) + _2749;
                        _2677 = (_2987 * _2811.y) + _2750;
                        _2678 = (_2987 * _2811.z) + _2751;
                        if (_2756 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2756;
                        }
                    }
                    frontier_phi_61_pred = _2677;
                    frontier_phi_61_pred_1 = _2681;
                    frontier_phi_61_pred_2 = _2680;
                    frontier_phi_61_pred_3 = _2679;
                    frontier_phi_61_pred_4 = _2678;
                    frontier_phi_61_pred_5 = _2676;
                }
                _2377 = frontier_phi_61_pred;
                _2385 = frontier_phi_61_pred_1;
                _2383 = frontier_phi_61_pred_2;
                _2381 = frontier_phi_61_pred_3;
                _2379 = frontier_phi_61_pred_4;
                _2375 = frontier_phi_61_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2375;
                    _2584 = _2377;
                    _2585 = _2379;
                    _2586 = _2381;
                    _2587 = _2383;
                    _2588 = _2385;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((4294967295u << _2391) & _2146) == 0u)
        {
            _2551 = _2374;
            _2553 = _2376;
            _2555 = _2378;
            _2557 = _2380;
            _2559 = _2382;
            _2561 = _2384;
        }
        else
        {
            float _2576 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
            float _2577 = _2576 * _2100;
            float _2578 = _2576 * _2101;
            float _2579 = _2576 * _2102;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2732 = _2374;
                float _2733 = _2376;
                float _2734 = _2378;
                float _2735 = _2380;
                float _2736 = _2382;
                float _2737 = _2384;
                uint _2738 = _2391;
                uint _2747;
                bool _2748;
                for (;;)
                {
                    _2747 = texelFetch(g_lightClassification, int((((_2140 << 5u) + (_2126 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                    _2748 = _2747 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2748)
                    {
                        frontier_phi_72_pred = _2737;
                        frontier_phi_72_pred_1 = _2736;
                        frontier_phi_72_pred_2 = _2735;
                        frontier_phi_72_pred_3 = _2734;
                        frontier_phi_72_pred_4 = _2733;
                        frontier_phi_72_pred_5 = _2732;
                    }
                    else
                    {
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3014 = _2732;
                        float _3015 = _2733;
                        float _3016 = _2734;
                        float _3017 = _2735;
                        float _3018 = _2736;
                        float _3019 = _2737;
                        uint _3020 = _2747;
                        uint _3021;
                        vec4 _3046;
                        float _3047;
                        vec4 _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        vec3 _3077;
                        vec2 _3086;
                        vec4 _3101;
                        vec4 _3117;
                        float _3164;
                        bool _3165;
                        for (;;)
                        {
                            uint _3031 = ((_2738 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3020));
                            _3021 = (_3020 + 4294967295u) & _3020;
                            uint _3033 = _3031 * 40u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3047 = _3046.w;
                            uint _3049 = (_3031 * 40u) + 4u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3063 = _3062.x;
                            _3064 = _3062.y;
                            _3065 = _3062.z;
                            uint _3067 = (_3031 * 40u) + 8u;
                            _3077 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x));
                            uint _3079 = (_3031 * 40u) + 12u;
                            _3086 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x));
                            uint _3088 = (_3031 * 40u) + 16u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3104 = (_3031 * 40u) + 20u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3120 = (_3031 * 40u) + 24u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3139 = (_3031 * 40u) + 28u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3164 = fma(_2102, _3152.z, fma(_2101, _3152.y, _3152.x * _2100)) + _3152.w;
                            _3165 = !((fma(_2102, _3133.z, fma(_2101, _3133.y, _3133.x * _2100)) + _3133.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3165)
                            {
                                float _3191 = _3046.x - _2100;
                                float _3192 = _3046.y - _2101;
                                float _3193 = _3046.z - _2102;
                                float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                                float _3197 = inversesqrt(_3194);
                                float _3198 = _3197 * _3191;
                                float _3199 = _3197 * _3192;
                                float _3200 = _3197 * _3193;
                                float _3204 = 1.0 - (_3194 / (_3047 * _3047));
                                float _4236 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3209 = sqrt(_3194) * _3062.w;
                                float _3211 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                                float _3212 = _3211 * _3211;
                                float _3213 = 1.0 - _3212;
                                float _3215 = (_3213 * _3213) * _494;
                                float _3218 = ((_3213 * dot(vec3(_3198, _3199, _3200), vec3(_553, _556, _559))) + _3212) + _3215;
                                float _3223 = _3209 * _3209;
                                float _3228 = (fma(_2102, _3101.z, fma(_2101, _3101.y, _3101.x * _2100)) + _3101.w) / _3164;
                                float _3229 = (fma(_2102, _3117.z, fma(_2101, _3117.y, _3117.x * _2100)) + _3117.w) / _3164;
                                float _3233 = 1.0 - dot(vec2(_3228, _3229), vec2(_3228, _3229));
                                float _4252 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3235 = _3234 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3205) / (((_3215 * 2.0) + 1.0) * ((_3223 * 0.699999988079071044921875) + 1.0)));
                                float _3236 = (-0.0) - _2577;
                                float _3237 = (-0.0) - _2578;
                                float _3238 = (-0.0) - _2579;
                                float _3239 = dot(vec3(_3198, _3199, _3200), vec3(_2577, _2578, _2579));
                                float _4263 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3246 = dot(vec3(_3236, _3237, _3238), vec3(_553, _556, _559)) + 1.0;
                                float _3248 = (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * 0.5;
                                float _3255 = ((_3248 * _3248) * _3086.x) * exp2((_3086.y * 32.0) * log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))));
                                float _3257 = _494 / (_494 + 1.0);
                                float _3278 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                                float _3279 = 1.0 - _621;
                                float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                                float _3287 = _3286 * _3286;
                                float _3288 = _3287 * _3287;
                                float _3289 = _3198 - _2577;
                                float _3290 = _3199 - _2578;
                                float _3291 = _3200 - _2579;
                                float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                                float _3299 = dot(vec3(_553, _556, _559), vec3(_3236, _3237, _3238));
                                float _4279 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3303 = dot(vec3(_553, _556, _559), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                                float _4290 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                                float _3311 = _3211 * _3287;
                                float _3312 = _3311 * _3311;
                                float _3318 = ((1.0 - _3312) * dot(vec3(_553, _556, _559), vec3(_3198, _3199, _3200))) + _3312;
                                float _4301 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3320 = 1.0 - _3287;
                                float _3330 = (0.5 / (((_3319 * ((_3302 * _3320) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3287) * _3302))) * _3319;
                                float _4312 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3340 = (_3234 * _3205) * (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_3310 * _3310) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3063 * 0.3183098733425140380859375) * _3257) * _3255) + _3063) * _3235;
                                frontier_phi_78_pred_1 = ((((_3065 * 0.3183098733425140380859375) * _3257) * _3255) + _3065) * _3235;
                                frontier_phi_78_pred_2 = ((((_3064 * 0.3183098733425140380859375) * _3257) * _3255) + _3064) * _3235;
                                frontier_phi_78_pred_3 = _3340 * _3077.z;
                                frontier_phi_78_pred_4 = _3340 * _3077.y;
                                frontier_phi_78_pred_5 = _3340 * _3077.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_78_pred;
                            _3349 = frontier_phi_78_pred_1;
                            _3348 = frontier_phi_78_pred_2;
                            _3346 = frontier_phi_78_pred_3;
                            _3345 = frontier_phi_78_pred_4;
                            _3344 = frontier_phi_78_pred_5;
                            _3004 = _3347 + _3017;
                            _3005 = _3348 + _3018;
                            _3006 = _3349 + _3019;
                            _3001 = _3344 + _3014;
                            _3002 = _3345 + _3015;
                            _3003 = _3346 + _3016;
                            if (_3021 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3021;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3006;
                        frontier_phi_72_pred_1 = _3005;
                        frontier_phi_72_pred_2 = _3004;
                        frontier_phi_72_pred_3 = _3003;
                        frontier_phi_72_pred_4 = _3002;
                        frontier_phi_72_pred_5 = _3001;
                    }
                    _2562 = frontier_phi_72_pred;
                    _2560 = frontier_phi_72_pred_1;
                    _2558 = frontier_phi_72_pred_2;
                    _2556 = frontier_phi_72_pred_3;
                    _2554 = frontier_phi_72_pred_4;
                    _2552 = frontier_phi_72_pred_5;
                    uint _2739 = _2738 + 1u;
                    if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2732 = _2552;
                        _2733 = _2554;
                        _2734 = _2556;
                        _2735 = _2558;
                        _2736 = _2560;
                        _2737 = _2562;
                        _2738 = _2739;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2562;
                frontier_phi_52_53_ladder_1 = _2554;
                frontier_phi_52_53_ladder_2 = _2560;
                frontier_phi_52_53_ladder_3 = _2558;
                frontier_phi_52_53_ladder_4 = _2556;
                frontier_phi_52_53_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_52_53_ladder = _2384;
                frontier_phi_52_53_ladder_1 = _2376;
                frontier_phi_52_53_ladder_2 = _2382;
                frontier_phi_52_53_ladder_3 = _2380;
                frontier_phi_52_53_ladder_4 = _2378;
                frontier_phi_52_53_ladder_5 = _2374;
            }
            _2551 = frontier_phi_52_53_ladder_5;
            _2553 = frontier_phi_52_53_ladder_1;
            _2555 = frontier_phi_52_53_ladder_4;
            _2557 = frontier_phi_52_53_ladder_3;
            _2559 = frontier_phi_52_53_ladder_2;
            _2561 = frontier_phi_52_53_ladder;
        }
        float _2566 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2159 = (_2566 * _2557) + _1854;
        _2161 = (_2566 * _2559) + _1855;
        _2163 = (_2566 * _2561) + _1856;
        _2165 = ((_2551 * 0.039999999105930328369140625) * _2566) + _2020;
        _2167 = ((_2553 * 0.039999999105930328369140625) * _2566) + _2021;
        _2169 = ((_2555 * 0.039999999105930328369140625) * _2566) + _2022;
    }
    else
    {
        _2159 = _1854;
        _2161 = _1855;
        _2163 = _1856;
        _2165 = _2020;
        _2167 = _2021;
        _2169 = _2022;
    }
    float _2189 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2190 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2191 = cbSceneParam._m0[86u].x * ((_532 / cbSceneParam._m0[86u].x) + ((_620 * cbMtdParam._m0[13u].y) * dot(vec3(_490, _491, _492), vec3(_204, _205, _206))));
    float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
    float _2193 = isnan(_2190) ? _533 : (isnan(_533) ? _2190 : min(_533, _2190));
    vec4 _2195 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2192, _2193), 0.0);
    float _2197 = _2195.x;
    bool _2218 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2197)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2197))) > _513;
    float _2219 = _2218 ? _2192 : _532;
    float _2220 = _2218 ? _2193 : _533;
    vec4 _2222 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2219, _2220));
    vec4 _2227 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2219, _2220));
    float _2229 = _2227.x;
    float _2249 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2229)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2229))) - _513;
    bool _2259 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2263 = (isnan(_2249) ? 0.0 : (isnan(0.0) ? _2249 : max(0.0, _2249))) * (-1.44269502162933349609375);
    float _4343 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4354 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4365 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _2290 = 0.959999978542327880859375 - (exp2(log2(1.0 - _612) * 5.0) * 0.959999978542327880859375);
    float _2293 = ((_2222.x * _2290) * exp2(_2263 * (_2259 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2296 = ((_2222.y * _2290) * exp2(_2263 * (_2259 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2299 = ((_2222.z * _2290) * exp2(_2263 * (_2259 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2307 = (_2293 + (((((_1650 * _1698.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1443) * _1714)) + _2165) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2159 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _597))) - _2293) * cbMtdParam._m0[15u].x);
    float _2309 = (_2296 + (((((_1650 * _1698.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1443) * _1714)) + _2167) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2161 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _597))) - _2296) * cbMtdParam._m0[15u].x);
    float _2311 = (_2299 + (((((_1650 * _1698.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1443) * _1714)) + _2169) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2163 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _597))) - _2299) * cbMtdParam._m0[15u].x);
    uint _2312 = _572 + 6u;
    float _2320 = _532 / cbSceneParam._m0[86u].x;
    float _2321 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2335 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2320, _2321, (log2((isnan(cbSceneParam._m0[77u].w) ? _513 : (isnan(_513) ? cbSceneParam._m0[77u].w : min(_513, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2337 = _2335.x;
    float _2338 = _2335.y;
    float _2339 = _2335.z;
    float _2340 = _2335.w;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_513 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_513) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _513 : min(cbSceneParam._m0[80u].w, _513));
        float _2400 = _2399 / _513;
        float _2411 = _2400 * _274;
        float _2412 = _275 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2414 = _2400 * _276;
        float _2416 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2417 = _2416 + cbSceneParam._m0[79u].w;
        float _2418 = cbSceneParam._m0[79u].w - _2412;
        float _2424 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2414 * _2414));
        float _2427 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2424;
        float _2432 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2433 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2689;
        if (abs((_2413 - _2416) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2689 = ((((_2417 > 0.0) ? exp2(_2432 * _2417) : (2.0 - exp2(_2433 * _2417))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2427;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : max(_2417, _2418));
            float _2614 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : min(_2417, _2418));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2689 = ((abs(_2424 / _2413) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2432 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2432 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2433 * _2623) - exp2(_2433 * _2624)) * _2612))) + (_2427 * cbSceneParam._m0[80u].z);
        }
        vec4 _2691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2320, _2321, 1.0), 0.0);
        float _2700 = exp2((_2689 * (-1.44269502162933349609375)) * (1.0 - _2691.w));
        float _2701 = log2(_2700);
        float _2717 = log2(_2340);
        _2435 = (exp2(_2717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].x)) * _2691.x) / cbSceneParam._m0[78u].x)) + _2337;
        _2437 = (exp2(_2717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].y)) * _2691.y) / cbSceneParam._m0[78u].y)) + _2338;
        _2439 = (exp2(_2717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].z)) * _2691.z) / cbSceneParam._m0[78u].z)) + _2339;
        _2441 = _2700 * _2340;
    }
    else
    {
        _2435 = _2337;
        _2437 = _2338;
        _2439 = _2339;
        _2441 = _2340;
    }
    bool _2727;
    float _2496;
    vec4 _2499;
    float _2501;
    vec4 _2503;
    float _2511;
    float _2512;
    float _2513;
    float _2514;
    bool _2524;
    for (;;)
    {
        bool _2453 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2454 = log2(_2441);
        float _2461 = exp2(_2454 * cbSceneParam._m0[78u].x) * _2307;
        float _2462 = exp2(_2454 * cbSceneParam._m0[78u].y) * _2309;
        float _2463 = exp2(_2454 * cbSceneParam._m0[78u].z) * _2311;
        vec4 _2471 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_532, _533));
        float _2473 = _2471.x;
        float _2494 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2473)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2473))) - _513) * cbMtdParam._m0[14u].z;
        float _4416 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        _2496 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * cbInstanceData._m0[_2312].w;
        float _2497 = _520 + (-0.5);
        _2499 = cbMtdParam._m0[1u];
        _2501 = _2499.y * _2497;
        _2503 = cbMatDynParam._m0[0u];
        float _2510 = (roundEven(_2503.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2511 = _2510 * (_2453 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2435)));
        _2512 = _2510 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2437)));
        _2513 = _2510 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2439)));
        _2514 = _2497 * 0.999000012874603271484375;
        _2524 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2524)
        {
            if ((cbInstanceData._m0[_572 + 7u].x + _2514) < 0.5)
            {
                _2727 = true;
                break;
            }
        }
        uint _2647 = _573 + uint(_2503.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2514) < 0.5))
        {
            _2727 = true;
            break;
        }
        if ((_2501 + 1.0) < _2499.x)
        {
            _2727 = true;
            break;
        }
        _2727 = false;
        break;
    }
    float _2992;
    if (_2727)
    {
        discard_state = true;
        _2992 = 0.0;
    }
    else
    {
        _2992 = _2496;
    }
    SV_Target.x = _2511;
    SV_Target.y = _2512;
    SV_Target.z = _2513;
    SV_Target.w = _2992;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2496;
    discard_exit();
}


