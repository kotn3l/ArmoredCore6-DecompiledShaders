#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1026;
float _3478;
float _3479;
float _3480;
float _3481;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _286 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _287 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _298 = dot(vec3(_276, _277, _278), vec3(_206, _207, _208));
    float _301 = dot(vec3(_276, _277, _278), vec3(_220, _221, _222));
    float _304 = dot(vec3(_276, _277, _278), vec3(_213, _214, _215));
    float _310 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _334 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _354 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_298 * cbMtdParam._m0[12u].x) * _310) * _334) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_301 * cbMtdParam._m0[12u].x) * _310) * _334) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _377 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _378 = _377 * _276;
    float _379 = _377 * _277;
    float _380 = _377 * _278;
    float _384 = dot(vec4(_378, _379, _380, 0.0), vec4(_213, _214, _215, 0.0)) - cbMtdParam._m0[12u].w;
    float _3490 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _391 = exp2(log2(1.0 - (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _406 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _354.x) * cbMtdParam._m0[9u].x) * ((_391 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _410 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _354.y) * cbMtdParam._m0[9u].y) * ((_391 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _414 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _354.z) * cbMtdParam._m0[9u].z) * ((_391 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _426 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    float _432 = ((cbMtdParam._m0[12u].z * _426.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _445 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    float _453 = (_445.x * 2.0) + (-1.0);
    float _454 = (_445.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3506 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _465 = cbMtdParam._m0[14u].w + _445.z;
    vec4 _477 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _286) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _287) + cbTextureTilingScale._m0[0u].w));
    float _481 = cbMtdParam._m0[13u].w * _477.x;
    float _499 = fma(_460, _213, fma(_454, _220, _453 * _206));
    float _502 = fma(_460, _214, fma(_454, _221, _453 * _207));
    float _505 = fma(_460, _215, fma(_454, _222, _453 * _208));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3517 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3528 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _514 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _515 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3544 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3555 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3566 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _534 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _705 = sqrt(((_276 * _276) + (_277 * _277)) + (_278 * _278));
        float _711 = (cbMatDynParam._m0[5u].x * _705) + cbMatDynParam._m0[5u].y;
        float _3577 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _716 = (cbMatDynParam._m0[5u].z * _705) + cbMatDynParam._m0[5u].w;
        float _3588 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) - _712)) + _712) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _577 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _580 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _593 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3599 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    vec4 _615 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _618 = _615.x * TEXCOORD_1.w;
    float _619 = dot(vec3(_510, _511, _512), vec3(_378, _379, _380));
    float _622 = _619 * 2.0;
    float _626 = (_622 * _510) - _378;
    float _627 = (_622 * _511) - _379;
    float _628 = (_622 * _512) - _380;
    float _632 = abs(dot(vec3(_378, _379, _380), vec3(_510, _511, _512)));
    float _3632 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _641 = 10.0 / (_534 + 10.0);
    float _642 = sqrt(_514);
    float _654 = exp2((_642 * 5.0) * log2(1.0 - (_633 * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_694, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686));
        float _754 = fma(_694, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686));
        float _758 = fma(_694, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686));
        float _783 = _686 + _510;
        float _784 = _690 + _511;
        float _785 = _694 + _512;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_510, _511, _512), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3680 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_510, _511, _512), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3713 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_510, _511, _512), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3746 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1069 = fma(_694, cbModelParam._m0[30u].z, fma(_690, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _686));
        float _1073 = fma(_694, cbModelParam._m0[31u].z, fma(_690, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _686));
        float _1077 = fma(_694, cbModelParam._m0[32u].z, fma(_690, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _686));
        float _1100 = _686 + _510;
        float _1101 = _690 + _511;
        float _1102 = _694 + _512;
        float _1112 = fma(_1102, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100)) - _1069;
        float _1113 = fma(_1102, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100)) - _1073;
        float _1114 = fma(_1102, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100)) - _1077;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1069 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1073 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[35u].z) + ((((((_1077 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1168 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1135.x + (-0.5));
        float _1170 = _1168 * (_1135.y + (-0.5));
        float _1171 = _1168 * (_1135.z + (-0.5));
        float _1178 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1142.x + (-0.5));
        float _1180 = _1178 * (_1142.y + (-0.5));
        float _1181 = _1178 * (_1142.z + (-0.5));
        float _1188 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1149.x + (-0.5));
        float _1190 = _1188 * (_1149.y + (-0.5));
        float _1191 = _1188 * (_1149.z + (-0.5));
        float _1198 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1156.x + (-0.5));
        float _1200 = _1198 * (_1156.y + (-0.5));
        float _1201 = _1198 * (_1156.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_510, _511, _512), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3809 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1232 + 1.0))) + _1237) * _1202;
        float _1247 = _1170 * 0.5;
        float _1248 = _1180 * 0.5;
        float _1249 = _1190 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_510, _511, _512), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3842 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1274 + 1.0))) + _1279) * _1203;
        float _1289 = _1171 * 0.5;
        float _1290 = _1181 * 0.5;
        float _1291 = _1191 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_510, _511, _512), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3875 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1316 + 1.0))) + _1321) * _1204;
        _1338 = _1171;
        _1339 = _1170;
        _1340 = _1169;
        _1341 = _1181;
        _1342 = _1180;
        _1343 = _1179;
        _1344 = _1191;
        _1345 = _1190;
        _1346 = _1189;
        _1347 = _1204;
        _1348 = _1203;
        _1349 = _1202;
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = _1026;
        _1348 = _1026;
        _1349 = _1026;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1038)) + _1038;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1039)) + _1039;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1385 = fma(_1364, cbSceneParam._m0[89u].z, fma(_1363, cbSceneParam._m0[89u].y, _1362 * cbSceneParam._m0[89u].x));
    float _1388 = fma(_1364, cbSceneParam._m0[90u].z, fma(_1363, cbSceneParam._m0[90u].y, _1362 * cbSceneParam._m0[90u].x));
    float _1391 = fma(_1364, cbSceneParam._m0[91u].z, fma(_1363, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1362));
    float _1406 = _626 * 0.5;
    float _1407 = _627 * 0.5;
    float _1408 = _628 * 0.5;
    float _1409 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1412 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1415 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1449;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1422 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1426 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1430 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1437 = dot(vec4(cbModelParam._m0[39u]), vec4(_1406, _1407, _1408, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1460;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1451 = dot(vec4(cbModelParam._m0[40u]), vec4(_1406, _1407, _1408, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1464 = (_1460 * cbModelParam._m0[1u].x) + (_1449 * (1.0 - cbModelParam._m0[1u].x));
    float _1474 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _514);
    float _1475 = isnan(_1474) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1474 : min(cbModelParam._m0[25u].z, _1474));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1522 = fma(_694, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686)) + cbModelParam._m0[13u].w;
        float _1526 = fma(_694, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686)) + cbModelParam._m0[14u].w;
        float _1530 = fma(_694, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686)) + cbModelParam._m0[15u].w;
        float _1533 = fma(_628, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626));
        float _1536 = fma(_628, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626));
        float _1539 = fma(_628, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626));
        float _1567;
        if (_1533 > 0.0)
        {
            _1567 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1567 = frontier_phi_17_15_ladder;
        }
        float _1790;
        if (_1536 > 0.0)
        {
            _1790 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1790 = frontier_phi_26_22_ladder;
        }
        float _2025;
        if (_1539 > 0.0)
        {
            _2025 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2025 = frontier_phi_37_33_ladder;
        }
        float _2027 = isnan(_1790) ? _1567 : (isnan(_1567) ? _1790 : min(_1567, _1790));
        float _2028 = isnan(_2025) ? _2027 : (isnan(_2027) ? _2025 : min(_2027, _2025));
        float _2032 = (_2028 * _1533) + _1522;
        float _2033 = (_2028 * _1536) + _1526;
        float _2034 = (_2028 * _1539) + _1530;
        float _2035 = _2028 * 9.9999997473787516355514526367188e-05;
        float _2037 = (-1.0) - _2035;
        float _2039 = _2035 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2034 > _2039) || ((_2034 < _2037) || ((_2033 > _2039) || ((_2033 < _2037) || ((_2032 < _2037) || (_2032 > _2039))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2034, cbModelParam._m0[9u].z, fma(_2033, cbModelParam._m0[9u].y, _2032 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2034, cbModelParam._m0[10u].z, fma(_2033, cbModelParam._m0[10u].y, _2032 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2034, cbModelParam._m0[11u].z, fma(_2033, cbModelParam._m0[11u].y, _2032 * cbModelParam._m0[11u].x))), _1475);
            frontier_phi_16_37_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1555 = frontier_phi_16_37_ladder_2;
        _1557 = frontier_phi_16_37_ladder_1;
        _1559 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_626, _627, _628), _1475);
        _1555 = _1543.x * cbModelParam._m0[1u].y;
        _1557 = _1543.y * cbModelParam._m0[1u].y;
        _1559 = _1543.z * cbModelParam._m0[1u].y;
    }
    float _1563 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _514);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1563 : min(cbModelParam._m0[25u].w, _1563));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1619 = fma(_694, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686)) + cbModelParam._m0[21u].w;
        float _1623 = fma(_694, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686)) + cbModelParam._m0[22u].w;
        float _1627 = fma(_694, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686)) + cbModelParam._m0[23u].w;
        float _1630 = fma(_628, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626));
        float _1633 = fma(_628, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626));
        float _1636 = fma(_628, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626));
        float _1795;
        if (_1630 > 0.0)
        {
            _1795 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1795 = frontier_phi_28_24_ladder;
        }
        float _2052;
        if (_1633 > 0.0)
        {
            _2052 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2052 = frontier_phi_39_35_ladder;
        }
        float _2517;
        if (_1636 > 0.0)
        {
            _2517 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2517 = frontier_phi_50_45_ladder;
        }
        float _2519 = isnan(_2052) ? _1795 : (isnan(_1795) ? _2052 : min(_1795, _2052));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1630) + _1619;
        float _2525 = (_2520 * _1633) + _1623;
        float _2526 = (_2520 * _1636) + _1627;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1564);
            frontier_phi_25_50_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1655 = frontier_phi_25_50_ladder_2;
        _1657 = frontier_phi_25_50_ladder_1;
        _1659 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_626, _627, _628), _1564);
        _1655 = _1639.x * cbModelParam._m0[1u].z;
        _1657 = _1639.y * cbModelParam._m0[1u].z;
        _1659 = _1639.z * cbModelParam._m0[1u].z;
    }
    float _1671 = ((((1.0 - _654) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_654 * _642)) * _618;
    float _1672 = _1671 * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1673 = _1671 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1674 = _1671 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1677 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, _1672 * cbSceneParam._m0[91u].x));
    float _1694 = _553 / cbSceneParam._m0[86u].x;
    float _1702 = (cbSceneParam._m0[88u].y * (1.0 - _514)) + cbSceneParam._m0[88u].z;
    float _4001 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1704 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 5.0;
    float _1709 = (_641 * cbMtdParam._m0[13u].z) * dot(vec3(_510, _511, _512), vec3(1.0, 0.0, 0.0));
    vec4 _1719 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1709 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1709 + _1694) * cbSceneParam._m0[86u].x, _554), _1704).w) + _1694) * cbSceneParam._m0[86u].x, _554), _1704);
    float _1735 = 1.0 - _1719.w;
    uvec4 _1745 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1747 = _1745.x * 14u;
    uint _1748 = _1747 + 13u;
    float _1753 = _618 + (-1.0);
    float _1756 = (cbLight._m0[_1748].x * _1753) + 1.0;
    float _1757 = (cbLight._m0[_1748].y * _1753) + 1.0;
    uint _1759 = _1747 + 4u;
    float _1770 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_510, _511, _512));
    float _1773 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1774 = _1747 + 5u;
    uint _1780 = _1747 | 1u;
    float _1786 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_510, _511, _512));
    float _1789 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    float _1854;
    float _1855;
    float _1856;
    if (_515 == 0.0)
    {
        float _4022 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _4033 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1808 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
        float _1810 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
        _1854 = ((cbLight._m0[_1774].x * _1789) * _1810) + ((cbLight._m0[_1759].x * _1773) * _1808);
        _1855 = ((_1789 * cbLight._m0[_1774].y) * _1810) + ((_1773 * cbLight._m0[_1759].y) * _1808);
        _1856 = ((_1789 * cbLight._m0[_1774].z) * _1810) + ((_1773 * cbLight._m0[_1759].z) * _1808);
    }
    else
    {
        float _1820 = _1770 + _515;
        float _1823 = (_515 * 2.0) + 1.0;
        float _1824 = (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) / _1823;
        float _1831 = _1786 + _515;
        float _1833 = (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) / _1823;
        _1854 = (((_1833 * cbLight._m0[_1774].x) * _1789) + ((_1824 * cbLight._m0[_1759].x) * _1773)) * 0.3183098733425140380859375;
        _1855 = (((_1833 * cbLight._m0[_1774].y) * _1789) + ((_1824 * cbLight._m0[_1759].y) * _1773)) * 0.3183098733425140380859375;
        _1856 = (((_1833 * cbLight._m0[_1774].z) * _1789) + ((_1824 * cbLight._m0[_1759].z) * _1773)) * 0.3183098733425140380859375;
    }
    uint _1860 = _1747 + 8u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _514) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1747].x + _378;
    float _1879 = cbLight._m0[_1747].y + _379;
    float _1880 = cbLight._m0[_1747].z + _380;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1747].xyz));
    float _4054 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _1892 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1893 = dot(vec3(_510, _511, _512), vec3(_1885, _1886, _1887));
    float _4076 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1885, _1886, _1887));
    float _4087 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1877 * _1877;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1877;
    float _1928 = (0.5 / (((_1892 * ((_1891 * _1917) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1917) + _1877) * _1891))) * _1891;
    float _4098 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1930 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    uint _1943 = _1747 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _514) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1780].x + _378;
    float _1960 = cbLight._m0[_1780].y + _379;
    float _1961 = cbLight._m0[_1780].z + _380;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1780].xyz));
    float _4109 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1973 = dot(vec3(_510, _511, _512), vec3(_1966, _1967, _1968));
    float _4120 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1966, _1967, _1968));
    float _4131 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1995 = 1.0 - _1958;
    float _2005 = (0.5 / (((_1892 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1995) + _1958) * _1972))) * _1972;
    float _4142 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2017 = (((_1994 * cbLight._m0[_1943].x) * _2007) * _1789) + (((_1916 * cbLight._m0[_1860].x) * _1930) * _1773);
    float _2018 = (((_1994 * cbLight._m0[_1943].y) * _2007) * _1789) + (((_1916 * cbLight._m0[_1860].y) * _1930) * _1773);
    float _2019 = (((_1994 * cbLight._m0[_1943].z) * _2007) * _1789) + (((_1916 * cbLight._m0[_1860].z) * _1930) * _1773);
    float _2156;
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    if (_1745.y == 0u)
    {
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2096;
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2096;
        float _2099 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2096;
        uvec4 _2111 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2112 = _2111.x;
        uint _2123 = uint((float(_2111.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2112))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2112)));
        float _2133 = (log2(_2099 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2134 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        uint _2137 = uint(isnan(14.0) ? _2134 : (isnan(_2134) ? 14.0 : min(_2134, 14.0)));
        uvec4 _2142 = texelFetch(g_lightClusterGridBuffer, int(((_2137 << 2u) + (_2123 << 6u)) >> 2u));
        uint _2143 = _2142.x;
        uint _2144 = _2111.z;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        if (((((1u << ((_2144 >> 4u) & 15u)) + 4294967295u) & _2143) == 0u) || ((_2144 & 240u) == 0u))
        {
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
        }
        else
        {
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2137 << 5u) + (_2123 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2591)
                {
                    frontier_phi_61_pred = _2576;
                    frontier_phi_61_pred_1 = _2580;
                    frontier_phi_61_pred_2 = _2579;
                    frontier_phi_61_pred_3 = _2578;
                    frontier_phi_61_pred_4 = _2577;
                    frontier_phi_61_pred_5 = _2575;
                }
                else
                {
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    uint _2747;
                    _2741 = _2575;
                    _2742 = _2576;
                    _2743 = _2577;
                    _2744 = _2578;
                    _2745 = _2579;
                    _2746 = _2580;
                    _2747 = _2590;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    for (;;)
                    {
                        uint _2751 = uint(findLSB(_2747)) + (_2581 << 5u);
                        uint _2748 = (_2747 + 4294967295u) & _2747;
                        uint _2753 = _2751 * 48u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 3u)).x));
                        uint _2773 = (_2751 * 48u) + 4u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 3u)).x));
                        float _2787 = _2786.x;
                        float _2788 = _2786.y;
                        float _2789 = _2786.z;
                        uint _2792 = (_2751 * 48u) + 8u;
                        vec3 _2803 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x));
                        uint _2808 = (_2751 * 48u) + 12u;
                        vec2 _2816 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x));
                        float _2822 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
                        float _2823 = _2822 * _2097;
                        float _2824 = _2822 * _2098;
                        float _2825 = _2822 * _2099;
                        float _2826 = _2767.x - _2097;
                        float _2827 = _2767.y - _2098;
                        float _2828 = _2767.z - _2099;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_574, _577, _580), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2767.w);
                        float _4163 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2843 = sqrt(_2829) * _2786.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2848 = 1.0 - _2847;
                        float _2850 = (_2848 * _2848) * _515;
                        float _2853 = ((_2848 * _2836) + _2847) + _2850;
                        float _2858 = _2843 * _2843;
                        float _2863 = ((isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))) * _2842) / (((_2850 * 2.0) + 1.0) * ((_2858 * 0.699999988079071044921875) + 1.0));
                        float _2867 = dot(vec3(_2833, _2834, _2835), vec3(_2823, _2824, _2825));
                        float _4179 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2874 = dot(vec3((-0.0) - _2823, (-0.0) - _2824, (-0.0) - _2825), vec3(_574, _577, _580)) + 1.0;
                        float _2876 = (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))) * 0.5;
                        float _2884 = ((_2876 * _2876) * _2816.x) * exp2((_2816.y * 32.0) * log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))));
                        float _2886 = _515 / (_515 + 1.0);
                        float _2902 = (-0.0) - _2097;
                        float _2903 = (-0.0) - _2098;
                        float _2904 = (-0.0) - _2099;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2919 = exp2(log2(1.0 / ((_2858 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _642;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2909 + _2833;
                        float _2931 = _2910 + _2834;
                        float _2932 = _2911 + _2835;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_574, _577, _580), vec3(_2909, _2910, _2911));
                        float _4195 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2944 = dot(vec3(_574, _577, _580), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4206 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2846 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2836) + _2953;
                        float _4217 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4228 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_2951 * _2951) * ((_2858 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2671 = (((((_2787 * 0.3183098733425140380859375) * _2886) * _2884) + _2787) * _2863) + _2744;
                        _2672 = (((((_2788 * 0.3183098733425140380859375) * _2886) * _2884) + _2788) * _2863) + _2745;
                        _2673 = (((((_2789 * 0.3183098733425140380859375) * _2886) * _2884) + _2789) * _2863) + _2746;
                        _2668 = (_2979 * _2803.x) + _2741;
                        _2669 = (_2979 * _2803.y) + _2742;
                        _2670 = (_2979 * _2803.z) + _2743;
                        if (_2748 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2671;
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2748;
                        }
                    }
                    frontier_phi_61_pred = _2669;
                    frontier_phi_61_pred_1 = _2673;
                    frontier_phi_61_pred_2 = _2672;
                    frontier_phi_61_pred_3 = _2671;
                    frontier_phi_61_pred_4 = _2670;
                    frontier_phi_61_pred_5 = _2668;
                }
                _2369 = frontier_phi_61_pred;
                _2377 = frontier_phi_61_pred_1;
                _2375 = frontier_phi_61_pred_2;
                _2373 = frontier_phi_61_pred_3;
                _2371 = frontier_phi_61_pred_4;
                _2367 = frontier_phi_61_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2367;
                    _2576 = _2369;
                    _2577 = _2371;
                    _2578 = _2373;
                    _2579 = _2375;
                    _2580 = _2377;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
        }
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.z;
        uint _2383 = (_2381 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2383) & _2143) == 0u)
        {
            _2543 = _2366;
            _2545 = _2368;
            _2547 = _2370;
            _2549 = _2372;
            _2551 = _2374;
            _2553 = _2376;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
            float _2569 = _2568 * _2097;
            float _2570 = _2568 * _2098;
            float _2571 = _2568 * _2099;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2383 < ((_2381 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2724 = _2366;
                float _2725 = _2368;
                float _2726 = _2370;
                float _2727 = _2372;
                float _2728 = _2374;
                float _2729 = _2376;
                uint _2730 = _2383;
                uint _2739;
                bool _2740;
                for (;;)
                {
                    _2739 = texelFetch(g_lightClassification, int((((_2137 << 5u) + (_2123 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                    _2740 = _2739 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2740)
                    {
                        frontier_phi_72_pred = _2729;
                        frontier_phi_72_pred_1 = _2728;
                        frontier_phi_72_pred_2 = _2727;
                        frontier_phi_72_pred_3 = _2726;
                        frontier_phi_72_pred_4 = _2725;
                        frontier_phi_72_pred_5 = _2724;
                    }
                    else
                    {
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3006 = _2724;
                        float _3007 = _2725;
                        float _3008 = _2726;
                        float _3009 = _2727;
                        float _3010 = _2728;
                        float _3011 = _2729;
                        uint _3012 = _2739;
                        uint _3013;
                        vec4 _3038;
                        float _3039;
                        vec4 _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        vec3 _3069;
                        vec2 _3078;
                        vec4 _3093;
                        vec4 _3109;
                        float _3156;
                        bool _3157;
                        for (;;)
                        {
                            uint _3023 = ((_2730 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3012));
                            _3013 = (_3012 + 4294967295u) & _3012;
                            uint _3025 = _3023 * 40u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            _3039 = _3038.w;
                            uint _3041 = (_3023 * 40u) + 4u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3055 = _3054.x;
                            _3056 = _3054.y;
                            _3057 = _3054.z;
                            uint _3059 = (_3023 * 40u) + 8u;
                            _3069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x));
                            uint _3071 = (_3023 * 40u) + 12u;
                            _3078 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x));
                            uint _3080 = (_3023 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3023 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3023 * 40u) + 24u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3131 = (_3023 * 40u) + 28u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3156 = fma(_2099, _3144.z, fma(_2098, _3144.y, _3144.x * _2097)) + _3144.w;
                            _3157 = !((fma(_2099, _3125.z, fma(_2098, _3125.y, _3125.x * _2097)) + _3125.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3157)
                            {
                                float _3183 = _3038.x - _2097;
                                float _3184 = _3038.y - _2098;
                                float _3185 = _3038.z - _2099;
                                float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                                float _3189 = inversesqrt(_3186);
                                float _3190 = _3189 * _3183;
                                float _3191 = _3189 * _3184;
                                float _3192 = _3189 * _3185;
                                float _3196 = 1.0 - (_3186 / (_3039 * _3039));
                                float _4239 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3201 = sqrt(_3186) * _3054.w;
                                float _3203 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                                float _3204 = _3203 * _3203;
                                float _3205 = 1.0 - _3204;
                                float _3207 = (_3205 * _3205) * _515;
                                float _3210 = ((_3205 * dot(vec3(_3190, _3191, _3192), vec3(_574, _577, _580))) + _3204) + _3207;
                                float _3215 = _3201 * _3201;
                                float _3220 = (fma(_2099, _3093.z, fma(_2098, _3093.y, _3093.x * _2097)) + _3093.w) / _3156;
                                float _3221 = (fma(_2099, _3109.z, fma(_2098, _3109.y, _3109.x * _2097)) + _3109.w) / _3156;
                                float _3225 = 1.0 - dot(vec2(_3220, _3221), vec2(_3220, _3221));
                                float _4255 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3227 = _3226 * (((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3197) / (((_3207 * 2.0) + 1.0) * ((_3215 * 0.699999988079071044921875) + 1.0)));
                                float _3228 = (-0.0) - _2569;
                                float _3229 = (-0.0) - _2570;
                                float _3230 = (-0.0) - _2571;
                                float _3231 = dot(vec3(_3190, _3191, _3192), vec3(_2569, _2570, _2571));
                                float _4266 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3238 = dot(vec3(_3228, _3229, _3230), vec3(_574, _577, _580)) + 1.0;
                                float _3240 = (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * 0.5;
                                float _3247 = ((_3240 * _3240) * _3078.x) * exp2((_3078.y * 32.0) * log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))));
                                float _3249 = _515 / (_515 + 1.0);
                                float _3270 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3271 = 1.0 - _642;
                                float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                                float _3279 = _3278 * _3278;
                                float _3280 = _3279 * _3279;
                                float _3281 = _3190 - _2569;
                                float _3282 = _3191 - _2570;
                                float _3283 = _3192 - _2571;
                                float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                                float _3291 = dot(vec3(_574, _577, _580), vec3(_3228, _3229, _3230));
                                float _4282 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3295 = dot(vec3(_574, _577, _580), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                                float _4293 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                                float _3303 = _3203 * _3279;
                                float _3304 = _3303 * _3303;
                                float _3310 = ((1.0 - _3304) * dot(vec3(_574, _577, _580), vec3(_3190, _3191, _3192))) + _3304;
                                float _4304 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3312 = 1.0 - _3279;
                                float _3322 = (0.5 / (((_3311 * ((_3294 * _3312) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3279) * _3294))) * _3311;
                                float _4315 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3332 = (_3226 * _3197) * (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3302 * _3302) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3055 * 0.3183098733425140380859375) * _3249) * _3247) + _3055) * _3227;
                                frontier_phi_78_pred_1 = ((((_3057 * 0.3183098733425140380859375) * _3249) * _3247) + _3057) * _3227;
                                frontier_phi_78_pred_2 = ((((_3056 * 0.3183098733425140380859375) * _3249) * _3247) + _3056) * _3227;
                                frontier_phi_78_pred_3 = _3332 * _3069.z;
                                frontier_phi_78_pred_4 = _3332 * _3069.y;
                                frontier_phi_78_pred_5 = _3332 * _3069.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3339 = frontier_phi_78_pred;
                            _3341 = frontier_phi_78_pred_1;
                            _3340 = frontier_phi_78_pred_2;
                            _3338 = frontier_phi_78_pred_3;
                            _3337 = frontier_phi_78_pred_4;
                            _3336 = frontier_phi_78_pred_5;
                            _2996 = _3339 + _3009;
                            _2997 = _3340 + _3010;
                            _2998 = _3341 + _3011;
                            _2993 = _3336 + _3006;
                            _2994 = _3337 + _3007;
                            _2995 = _3338 + _3008;
                            if (_3013 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _3013;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2998;
                        frontier_phi_72_pred_1 = _2997;
                        frontier_phi_72_pred_2 = _2996;
                        frontier_phi_72_pred_3 = _2995;
                        frontier_phi_72_pred_4 = _2994;
                        frontier_phi_72_pred_5 = _2993;
                    }
                    _2554 = frontier_phi_72_pred;
                    _2552 = frontier_phi_72_pred_1;
                    _2550 = frontier_phi_72_pred_2;
                    _2548 = frontier_phi_72_pred_3;
                    _2546 = frontier_phi_72_pred_4;
                    _2544 = frontier_phi_72_pred_5;
                    uint _2731 = _2730 + 1u;
                    if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2724 = _2544;
                        _2725 = _2546;
                        _2726 = _2548;
                        _2727 = _2550;
                        _2728 = _2552;
                        _2729 = _2554;
                        _2730 = _2731;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2554;
                frontier_phi_52_53_ladder_1 = _2546;
                frontier_phi_52_53_ladder_2 = _2552;
                frontier_phi_52_53_ladder_3 = _2550;
                frontier_phi_52_53_ladder_4 = _2548;
                frontier_phi_52_53_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_52_53_ladder = _2376;
                frontier_phi_52_53_ladder_1 = _2368;
                frontier_phi_52_53_ladder_2 = _2374;
                frontier_phi_52_53_ladder_3 = _2372;
                frontier_phi_52_53_ladder_4 = _2370;
                frontier_phi_52_53_ladder_5 = _2366;
            }
            _2543 = frontier_phi_52_53_ladder_5;
            _2545 = frontier_phi_52_53_ladder_1;
            _2547 = frontier_phi_52_53_ladder_4;
            _2549 = frontier_phi_52_53_ladder_3;
            _2551 = frontier_phi_52_53_ladder_2;
            _2553 = frontier_phi_52_53_ladder;
        }
        float _2558 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
        _2156 = (_2558 * _2549) + _1854;
        _2158 = (_2558 * _2551) + _1855;
        _2160 = (_2558 * _2553) + _1856;
        _2162 = ((_2543 * 0.039999999105930328369140625) * _2558) + _2017;
        _2164 = ((_2545 * 0.039999999105930328369140625) * _2558) + _2018;
        _2166 = ((_2547 * 0.039999999105930328369140625) * _2558) + _2019;
    }
    else
    {
        _2156 = _1854;
        _2158 = _1855;
        _2160 = _1856;
        _2162 = _2017;
        _2164 = _2018;
        _2166 = _2019;
    }
    float _2180 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2181 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2182 = cbSceneParam._m0[86u].x * (_1694 + ((_641 * cbMtdParam._m0[13u].y) * dot(vec3(_510, _511, _512), vec3(_206, _207, _208))));
    float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
    float _2184 = isnan(_2181) ? _554 : (isnan(_554) ? _2181 : min(_554, _2181));
    vec4 _2186 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2183, _2184), 0.0);
    float _2188 = _2186.x;
    bool _2209 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2188)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2188))) > _534;
    float _2210 = _2209 ? _2183 : _553;
    float _2211 = _2209 ? _2184 : _554;
    vec4 _2213 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2210, _2211));
    vec4 _2218 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2210, _2211));
    float _2220 = _2218.x;
    float _2240 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2220)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2220))) - _534;
    bool _2250 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2254 = (isnan(_2240) ? 0.0 : (isnan(0.0) ? _2240 : max(0.0, _2240))) * (-1.44269502162933349609375);
    float _4346 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4357 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4368 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2281 = 0.959999978542327880859375 - (exp2(log2(1.0 - _633) * 5.0) * 0.959999978542327880859375);
    float _2284 = ((_2213.x * _2281) * exp2(_2254 * (_2250 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2287 = ((_2213.y * _2281) * exp2(_2254 * (_2250 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2290 = ((_2213.z * _2281) * exp2(_2254 * (_2250 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2298 = (_2284 + (((((_1671 * _1719.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1464) * _1735)) + _2162) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2156 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _618))) - _2284) * cbMtdParam._m0[15u].x);
    float _2300 = (_2287 + (((((_1671 * _1719.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1464) * _1735)) + _2164) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2158 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _618))) - _2287) * cbMtdParam._m0[15u].x);
    float _2302 = (_2290 + (((((_1671 * _1719.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1464) * _1735)) + _2166) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2160 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _618))) - _2290) * cbMtdParam._m0[15u].x);
    float _2307 = cbInstanceData._m0[_593 + 6u].w * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)));
    float _2312 = _553 / cbSceneParam._m0[86u].x;
    float _2313 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2327 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2312, _2313, (log2((isnan(cbSceneParam._m0[77u].w) ? _534 : (isnan(_534) ? cbSceneParam._m0[77u].w : min(_534, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2329 = _2327.x;
    float _2330 = _2327.y;
    float _2331 = _2327.z;
    float _2332 = _2327.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_534 > cbSceneParam._m0[78u].w)
    {
        float _2391 = isnan(_534) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _534 : min(cbSceneParam._m0[80u].w, _534));
        float _2392 = _2391 / _534;
        float _2403 = _2392 * _276;
        float _2404 = _277 * _2392;
        float _2405 = (-0.0) - _2404;
        float _2406 = _2392 * _278;
        float _2408 = (cbSceneParam._m0[77u].w * _2405) / _2391;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2404;
        float _2416 = sqrt(((_2403 * _2403) + (_2404 * _2404)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2391)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2681;
        if (abs((_2405 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2681 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2425 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2606 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2681 = ((abs(_2416 / _2405) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2425 * _2615) - exp2(_2425 * _2616)) * _2604))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2683 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2312, _2313, 1.0), 0.0);
        float _2692 = exp2((_2681 * (-1.44269502162933349609375)) * (1.0 - _2683.w));
        float _2693 = log2(_2692);
        float _2709 = log2(_2332);
        _2427 = (exp2(_2709 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].x)) * _2683.x) / cbSceneParam._m0[78u].x)) + _2329;
        _2429 = (exp2(_2709 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].y)) * _2683.y) / cbSceneParam._m0[78u].y)) + _2330;
        _2431 = (exp2(_2709 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].z)) * _2683.z) / cbSceneParam._m0[78u].z)) + _2331;
        _2433 = _2692 * _2332;
    }
    else
    {
        _2427 = _2329;
        _2429 = _2330;
        _2431 = _2331;
        _2433 = _2332;
    }
    bool _2719;
    float _2488;
    vec4 _2491;
    float _2493;
    vec4 _2495;
    float _2503;
    float _2504;
    float _2505;
    float _2506;
    bool _2516;
    for (;;)
    {
        bool _2445 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2446 = log2(_2433);
        float _2453 = exp2(_2446 * cbSceneParam._m0[78u].x) * _2298;
        float _2454 = exp2(_2446 * cbSceneParam._m0[78u].y) * _2300;
        float _2455 = exp2(_2446 * cbSceneParam._m0[78u].z) * _2302;
        vec4 _2463 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_553, _554));
        float _2465 = _2463.x;
        float _2486 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2465)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2465))) - _534) * cbMtdParam._m0[14u].z;
        float _4419 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        _2488 = _2307 * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)));
        float _2489 = _541 + (-0.5);
        _2491 = cbMtdParam._m0[1u];
        _2493 = _2491.y * _2489;
        _2495 = cbMatDynParam._m0[0u];
        float _2502 = (roundEven(_2495.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2503 = _2502 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2427)));
        _2504 = _2502 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2429)));
        _2505 = _2502 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2431)));
        _2506 = _2489 * 0.999000012874603271484375;
        _2516 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2516)
        {
            if ((cbInstanceData._m0[_593 + 7u].x + _2506) < 0.5)
            {
                _2719 = true;
                break;
            }
        }
        uint _2639 = _594 + uint(_2495.w);
        if ((cbInstanceData._m0[_2639].w < 1.0) && ((cbInstanceData._m0[_2639].w + _2506) < 0.5))
        {
            _2719 = true;
            break;
        }
        if ((_2493 + 1.0) < _2491.x)
        {
            _2719 = true;
            break;
        }
        _2719 = false;
        break;
    }
    float _2984;
    if (_2719)
    {
        discard_state = true;
        _2984 = 0.0;
    }
    else
    {
        _2984 = _2488;
    }
    SV_Target.x = _2503;
    SV_Target.y = _2504;
    SV_Target.z = _2505;
    SV_Target.w = _2984;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2488;
    discard_exit();
}


