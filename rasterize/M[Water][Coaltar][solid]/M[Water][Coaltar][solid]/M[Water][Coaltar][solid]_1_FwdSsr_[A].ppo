#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _112 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _113 = _112 * NORMAL.x;
    float _114 = _112 * NORMAL.y;
    float _115 = _112 * NORMAL.z;
    vec4 _138 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _146 = cbMtdParam._m0[14u].w + _138.z;
    float _807 = isnan(0.0) ? _146 : (isnan(_146) ? 0.0 : max(_146, 0.0));
    float _148 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
    float _162 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _206 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _216 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _206);
    float _217 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _206);
    float _218 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _206);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _248 = sqrt(((_216 * _216) + (_217 * _217)) + (_218 * _218));
        float _255 = (cbMatDynParam._m0[5u].x * _248) + cbMatDynParam._m0[5u].y;
        float _818 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
        float _256 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
        float _260 = (cbMatDynParam._m0[5u].z * _248) + cbMatDynParam._m0[5u].w;
        float _829 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0))) - _256)) + _256) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _228 = POSITION_1.x / POSITION_1.w;
    float _229 = POSITION_1.y / POSITION_1.w;
    float _233 = (_228 * 0.5) + 0.5;
    float _234 = 0.5 - (_229 * 0.5);
    float _273;
    float _275;
    float _277;
    float _279;
    if (_148 < cbPerScene._m0[22u].z)
    {
        _273 = 0.0;
        _275 = 0.0;
        _277 = 0.0;
        _279 = 0.0;
    }
    else
    {
        float _285 = 1.0 / _162;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _285))
        {
            float _311 = fma(_115, cbPerScene._m0[8u].z, fma(_114, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _113));
            float _314 = fma(_115, cbPerScene._m0[9u].z, fma(_114, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _113));
            float _317 = fma(_115, cbPerScene._m0[10u].z, fma(_114, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _113));
            float _324 = (_228 * _162) * cbPerScene._m0[28u].x;
            float _326 = (_229 * _162) * cbPerScene._m0[28u].y;
            float _330 = inversesqrt(dot(vec3(_324, _326, _162), vec3(_324, _326, _162)));
            float _331 = _324 * _330;
            float _332 = _326 * _330;
            float _333 = _330 * _162;
            float _337 = dot(vec3(_331, _332, _333), vec3(_311, _314, _317)) * 2.0;
            float _342 = _331 - (_337 * _311);
            float _343 = _332 - (_337 * _314);
            float _344 = _333 - (_337 * _317);
            float _348 = inversesqrt(dot(vec3(_342, _343, _344), vec3(_342, _343, _344)));
            float _351 = _344 * _348;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_351 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _364 = abs(dot(vec3((-0.0) - _331, (-0.0) - _332, (-0.0) - _333), vec3(_311, _314, _317)));
                float _840 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
                float _375 = (((_148 * _148) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _384 = (cbPerScene._m0[29u].x * (1.0 - _148)) + cbPerScene._m0[29u].y;
                float _851 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
                float _392 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_375 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _395 = _351 - cbPerScene._m0[16u].x;
                    float _862 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
                    float _396 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
                    float _397 = _396 * _396;
                    float _399 = (_375 - cbPerScene._m0[22u].x) * 10.0;
                    float _873 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
                    float _401 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
                    float _402 = isnan(_401) ? _397 : (isnan(_397) ? _401 : min(_397, _401));
                    float _406 = (cbPerScene._m0[21u].x - _162) * cbPerScene._m0[21u].z;
                    float _889 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
                    float _407 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
                    float _408 = isnan(_407) ? _402 : (isnan(_402) ? _407 : min(_402, _407));
                    float _409 = (_342 * _348) + _324;
                    float _410 = (_343 * _348) + _326;
                    float _411 = _351 + _162;
                    float _442 = fma(_411, cbPerScene._m0[7u].z, fma(_410, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _409)) + cbPerScene._m0[7u].w;
                    float _446 = ((fma(_411, cbPerScene._m0[4u].z, fma(_410, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _409)) + cbPerScene._m0[4u].w) / _442) - _233;
                    float _447 = ((fma(_411, cbPerScene._m0[5u].z, fma(_410, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _409)) + cbPerScene._m0[5u].w) / _442) - _234;
                    float _453 = cbPerScene._m0[18u].x * _446;
                    float _454 = cbPerScene._m0[18u].y * _447;
                    float _459 = sqrt((_453 * _453) + (_454 * _454)) + 9.9999997473787516355514526367188e-06;
                    float _464 = (_446 / _459) * _392;
                    float _465 = (_447 / _459) * _392;
                    float _466 = (((1.0 / _411) - _285) / _459) * _392;
                    float _495 = abs(float(_464 > 0.0) - _233) / (abs(_464) + 1.0000000116860974230803549289703e-07);
                    float _496 = abs(float(_465 > 0.0) - _234) / (abs(_465) + 1.0000000116860974230803549289703e-07);
                    float _498 = (abs(((_466 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _285) / (abs(_466) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _499 = isnan(_496) ? _495 : (isnan(_495) ? _496 : min(_495, _496));
                    float _500 = isnan(_498) ? _499 : (isnan(_499) ? _498 : min(_499, _498));
                    uint _503 = uint(int(isnan(cbPerScene._m0[23u].y) ? _500 : (isnan(_500) ? cbPerScene._m0[23u].y : min(_500, cbPerScene._m0[23u].y))));
                    float _280;
                    float _508;
                    float _510;
                    float _512;
                    if (int(_503) > int(0u))
                    {
                        float _505 = _466 + _285;
                        float _506 = _465 + _234;
                        float _507 = _464 + _233;
                        float _509;
                        float _511;
                        float _513;
                        float _514;
                        uint _525;
                        float _527;
                        float _529;
                        float _531;
                        float _533;
                        float _535;
                        float _537;
                        float _539;
                        uint _541;
                        float _543;
                        float _545;
                        float _547;
                        float _520 = 0.0;
                        float _521 = 0.0;
                        float _522 = 0.0;
                        float _523 = 0.0;
                        uint _524 = 0u;
                        float _526 = _285;
                        float _528 = _507;
                        float _530 = _506;
                        float _532 = _505;
                        float _534 = _233;
                        float _536 = _234;
                        float _538 = _285;
                        uint _540 = 1u;
                        float _542 = 0.0;
                        float _544 = 0.0;
                        float _546 = 0.0;
                        float _558;
                        float _565;
                        float _566;
                        float _567;
                        float _568;
                        float _569;
                        float _570;
                        uint _571;
                        float _572;
                        bool _579;
                        for (;;)
                        {
                            _558 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _530), 0.0).x;
                            bool _564 = _524 == (_503 + 4294967295u);
                            _565 = _564 ? _542 : _528;
                            _566 = _564 ? _544 : _530;
                            _567 = _564 ? _546 : _532;
                            _568 = _564 ? _542 : _534;
                            _569 = _564 ? _544 : _536;
                            _570 = _564 ? _546 : _538;
                            _571 = _564 ? 1u : _540;
                            _572 = _564 ? (-1.0) : (_532 - _558);
                            _579 = (_571 != 0u) && ((_572 <= 0.0) && ((_564 ? (-1.0) : (_558 - (_526 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_579)
                            {
                                uint _589 = uint(int(log2(_392) + 0.999000012874603271484375));
                                float _600;
                                float _602;
                                float _604;
                                float _606;
                                float _608;
                                float _610;
                                float _612;
                                if (int(_589) > int(0u))
                                {
                                    uint _710;
                                    float _712;
                                    float _713;
                                    float _714;
                                    float _715;
                                    float _716;
                                    float _717;
                                    float _718;
                                    _710 = 0u;
                                    _712 = _565;
                                    _713 = _566;
                                    _714 = _567;
                                    _715 = _568;
                                    _716 = _569;
                                    _717 = _570;
                                    _718 = _558;
                                    float _601;
                                    float _603;
                                    float _605;
                                    float _607;
                                    float _609;
                                    float _611;
                                    float _613;
                                    for (;;)
                                    {
                                        float _722 = (_715 + _712) * 0.5;
                                        float _723 = (_716 + _713) * 0.5;
                                        float _724 = (_717 + _714) * 0.5;
                                        vec4 _732 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723), 0.0);
                                        float _734 = _732.x;
                                        bool _736 = (_724 - _734) < 0.0;
                                        _601 = _736 ? _722 : _712;
                                        _603 = _736 ? _723 : _713;
                                        _605 = _736 ? _724 : _714;
                                        _607 = _736 ? _715 : _722;
                                        _609 = _736 ? _716 : _723;
                                        _611 = _736 ? _717 : _724;
                                        _613 = _736 ? _734 : _718;
                                        uint _711 = _710 + 1u;
                                        if (_711 == _589)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _710 = _711;
                                            _712 = _601;
                                            _713 = _603;
                                            _714 = _605;
                                            _715 = _607;
                                            _716 = _609;
                                            _717 = _611;
                                            _718 = _613;
                                        }
                                    }
                                    _600 = _601;
                                    _602 = _603;
                                    _604 = _605;
                                    _606 = _607;
                                    _608 = _609;
                                    _610 = _611;
                                    _612 = _613;
                                }
                                else
                                {
                                    _600 = _565;
                                    _602 = _566;
                                    _604 = _567;
                                    _606 = _568;
                                    _608 = _569;
                                    _610 = _570;
                                    _612 = _558;
                                }
                                float _622 = cbPerScene._m0[28u].x * ((_600 * 2.0) + (-1.0));
                                float _623 = cbPerScene._m0[28u].y * (1.0 - (_602 * 2.0));
                                float _655 = fma(_612, cbPerScene._m0[27u].w, fma(_623, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _622) + cbPerScene._m0[27u].z);
                                float _656 = fma(_612, cbPerScene._m0[24u].w, fma(_623, cbPerScene._m0[24u].y, _622 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _655;
                                float _657 = fma(_612, cbPerScene._m0[25u].w, fma(_623, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _622) + cbPerScene._m0[25u].z) / _655;
                                vec4 _666 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _656, cbSceneParam._m0[87u].w * _657), 0.0);
                                float _671 = isnan(_408) ? 1.0 : (isnan(1.0) ? _408 : min(1.0, _408));
                                float _672 = 0.5 - _656;
                                float _673 = 0.5 - _657;
                                float _674 = _672 * 2.0;
                                float _675 = _673 * 2.0;
                                float _676 = _674 * _674;
                                float _677 = _675 * _675;
                                float _925 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
                                float _936 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
                                float _686 = inversesqrt(dot(vec2(_464, _465), vec2(_464, _465)));
                                float _692 = inversesqrt(dot(vec2(_674, _675), vec2(_674, _675)));
                                float _698 = dot(vec2((_672 * (-2.0)) * _692, (_673 * (-2.0)) * _692), vec2(_686 * _464, _686 * _465));
                                float _947 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
                                float _705 = ((1.0 - (isnan(1.0) ? _936 : (isnan(_936) ? 1.0 : min(_936, 1.0)))) * (1.0 - (isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0))))) * (4.0 - ((isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0))) * 2.0));
                                float _958 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
                                float _706 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
                                float _707 = _706 * _706;
                                frontier_phi_17_pred = _546;
                                frontier_phi_17_pred_1 = _544;
                                frontier_phi_17_pred_2 = _542;
                                frontier_phi_17_pred_3 = _571;
                                frontier_phi_17_pred_4 = _610;
                                frontier_phi_17_pred_5 = _608;
                                frontier_phi_17_pred_6 = _606;
                                frontier_phi_17_pred_7 = _604;
                                frontier_phi_17_pred_8 = _602;
                                frontier_phi_17_pred_9 = _600;
                                frontier_phi_17_pred_10 = _526;
                                frontier_phi_17_pred_11 = isnan(_707) ? _671 : (isnan(_671) ? _707 : min(_671, _707));
                                frontier_phi_17_pred_12 = _666.z;
                                frontier_phi_17_pred_13 = _666.y;
                                frontier_phi_17_pred_14 = _666.x;
                                frontier_phi_17_pred_15 = _503;
                            }
                            else
                            {
                                bool _591 = _572 > 0.0;
                                frontier_phi_17_pred = _591 ? _567 : _546;
                                frontier_phi_17_pred_1 = _591 ? _566 : _544;
                                frontier_phi_17_pred_2 = _591 ? _565 : _542;
                                frontier_phi_17_pred_3 = uint(_591);
                                frontier_phi_17_pred_4 = _567;
                                frontier_phi_17_pred_5 = _566;
                                frontier_phi_17_pred_6 = _565;
                                frontier_phi_17_pred_7 = _567 + _466;
                                frontier_phi_17_pred_8 = _566 + _465;
                                frontier_phi_17_pred_9 = _565 + _464;
                                frontier_phi_17_pred_10 = _558;
                                frontier_phi_17_pred_11 = _523;
                                frontier_phi_17_pred_12 = _522;
                                frontier_phi_17_pred_13 = _521;
                                frontier_phi_17_pred_14 = _520;
                                frontier_phi_17_pred_15 = _524 + 1u;
                            }
                            _547 = frontier_phi_17_pred;
                            _545 = frontier_phi_17_pred_1;
                            _543 = frontier_phi_17_pred_2;
                            _541 = frontier_phi_17_pred_3;
                            _539 = frontier_phi_17_pred_4;
                            _537 = frontier_phi_17_pred_5;
                            _535 = frontier_phi_17_pred_6;
                            _533 = frontier_phi_17_pred_7;
                            _531 = frontier_phi_17_pred_8;
                            _529 = frontier_phi_17_pred_9;
                            _527 = frontier_phi_17_pred_10;
                            _514 = frontier_phi_17_pred_11;
                            _513 = frontier_phi_17_pred_12;
                            _511 = frontier_phi_17_pred_13;
                            _509 = frontier_phi_17_pred_14;
                            _525 = frontier_phi_17_pred_15;
                            if (int(_525) < int(_503))
                            {
                                _520 = _509;
                                _521 = _511;
                                _522 = _513;
                                _523 = _514;
                                _524 = _525;
                                _526 = _527;
                                _528 = _529;
                                _530 = _531;
                                _532 = _533;
                                _534 = _535;
                                _536 = _537;
                                _538 = _539;
                                _540 = _541;
                                _542 = _543;
                                _544 = _545;
                                _546 = _547;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _508 = _509;
                        _510 = _511;
                        _512 = _513;
                        _280 = _514;
                    }
                    else
                    {
                        _508 = 0.0;
                        _510 = 0.0;
                        _512 = 0.0;
                        _280 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_508) || isnan(_510)) || isnan(_512))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_280 * _508) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _280;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_280 * _512) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_280 * _510) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _273 = frontier_phi_3_4_ladder;
        _275 = frontier_phi_3_4_ladder_3;
        _277 = frontier_phi_3_4_ladder_2;
        _279 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _273;
    SV_Target.y = _275;
    SV_Target.z = _277;
    SV_Target.w = _279;
    discard_exit();
}


