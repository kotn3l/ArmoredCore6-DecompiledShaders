#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3573;
float _3574;
float _3575;
float _3576;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _291 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _292 = _291 * _280;
    float _293 = _291 * _281;
    float _294 = _291 * _282;
    float _302 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _303 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _317 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_302 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_303 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3585 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    float _337 = fma(_334, _217, fma(_327, _224, _325 * _210));
    float _340 = fma(_334, _218, fma(_327, _225, _325 * _211));
    float _343 = fma(_334, _219, fma(_327, _226, _325 * _212));
    float _347 = inversesqrt(dot(vec3(_337, _340, _343), vec3(_337, _340, _343)));
    float _356 = (dot(vec4(_292, _293, _294, 0.0), vec4(_347 * _337, _347 * _340, _347 * _343, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _369 = dot(vec3(_280, _281, _282), vec3(_210, _211, _212));
    float _372 = dot(vec3(_280, _281, _282), vec3(_224, _225, _226));
    float _375 = dot(vec3(_280, _281, _282), vec3(_217, _218, _219));
    float _381 = inversesqrt(dot(vec3(_369, _372, _375), vec3(_369, _372, _375)));
    float _402 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _422 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_369 * cbMtdParam._m0[12u].x) * _381) * _402) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_372 * cbMtdParam._m0[12u].x) * _381) * _402) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _445 = dot(vec4(_292, _293, _294, 0.0), vec4(_217, _218, _219, 0.0)) - cbMtdParam._m0[12u].w;
    float _3596 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _452 = exp2(log2(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _467 = (((((sin(_356) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _422.x) * cbMtdParam._m0[9u].x) * ((_452 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _476 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _422.y) * cbMtdParam._m0[9u].y) * ((_452 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_356 * 0.85000002384185791015625) + 1.0);
    float _485 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _422.z) * cbMtdParam._m0[9u].z) * ((_452 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_356 * 0.699999988079071044921875) + 1.0);
    vec4 _497 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    float _503 = ((cbMtdParam._m0[12u].z * _497.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _516 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    float _523 = (_516.x * 2.0) + (-1.0);
    float _524 = (_516.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3612 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))));
    float _532 = cbMtdParam._m0[14u].w + _516.z;
    vec4 _544 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _302) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _303) + cbTextureTilingScale._m0[0u].w));
    float _548 = cbMtdParam._m0[13u].w * _544.x;
    float _566 = fma(_530, _217, fma(_524, _224, _523 * _210));
    float _569 = fma(_530, _218, fma(_524, _225, _523 * _211));
    float _572 = fma(_530, _219, fma(_524, _226, _523 * _212));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3623 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3634 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _581 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _582 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3650 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3661 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3672 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _606 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _608 = _606.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _771 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _777 = (cbMatDynParam._m0[5u].x * _771) + cbMatDynParam._m0[5u].y;
        float _3683 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _782 = (cbMatDynParam._m0[5u].z * _771) + cbMatDynParam._m0[5u].w;
        float _3694 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) - _778)) + _778) < ((_608 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _620 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _621 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _643 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _646 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _659 = uint(roundEven(NORMAL.w)) * 13u;
    uint _660 = _659 + 9u;
    uint _661 = _660 + uint(cbMatDynParam._m0[0u].w);
    float _667 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_661].x;
    float _668 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_661].y;
    float _669 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_661].z;
    float _3705 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _620, cbSceneParam._m0[86u].y * _621));
    float _684 = _681.x * TEXCOORD_1.w;
    float _685 = dot(vec3(_577, _578, _579), vec3(_292, _293, _294));
    float _688 = _685 * 2.0;
    float _692 = (_688 * _577) - _292;
    float _693 = (_688 * _578) - _293;
    float _694 = (_688 * _579) - _294;
    float _698 = abs(dot(vec3(_292, _293, _294), vec3(_577, _578, _579)));
    float _3738 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _707 = 10.0 / (_601 + 10.0);
    float _708 = sqrt(_581);
    float _720 = exp2((_708 * 5.0) * log2(1.0 - (_699 * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _820 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _824 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _849 = _752 + _577;
        float _850 = _756 + _578;
        float _851 = _760 + _579;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_577, _578, _579), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3786 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_577, _578, _579), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3819 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_577, _578, _579), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3852 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1139 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1143 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1166 = _752 + _577;
        float _1167 = _756 + _578;
        float _1168 = _760 + _579;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_577, _578, _579), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3915 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_577, _578, _579), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3948 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_577, _578, _579), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3981 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = _1092;
        _1413 = _1092;
        _1414 = _1092;
        _1415 = _1092;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _692 * 0.5;
    float _1473 = _693 * 0.5;
    float _1474 = _694 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _581);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_694, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692));
        float _1602 = fma(_694, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692));
        float _1605 = fma(_694, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1633 = frontier_phi_17_15_ladder;
        }
        float _1877;
        if (_1602 > 0.0)
        {
            _1877 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1877 = frontier_phi_26_22_ladder;
        }
        float _2115;
        if (_1605 > 0.0)
        {
            _2115 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2115 = frontier_phi_37_33_ladder;
        }
        float _2117 = isnan(_1877) ? _1633 : (isnan(_1633) ? _1877 : min(_1633, _1877));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1599) + _1588;
        float _2123 = (_2118 * _1602) + _1592;
        float _2124 = (_2118 * _1605) + _1596;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_16_37_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_16_37_ladder_2;
        _1623 = frontier_phi_16_37_ladder_1;
        _1625 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_692, _693, _694), _1541);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _581);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_694, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692));
        float _1699 = fma(_694, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692));
        float _1702 = fma(_694, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692));
        float _1882;
        if (_1696 > 0.0)
        {
            _1882 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1882 = frontier_phi_28_24_ladder;
        }
        float _2142;
        if (_1699 > 0.0)
        {
            _2142 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2142 = frontier_phi_39_35_ladder;
        }
        float _2613;
        if (_1702 > 0.0)
        {
            _2613 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2613 = frontier_phi_50_45_ladder;
        }
        float _2615 = isnan(_2142) ? _1882 : (isnan(_1882) ? _2142 : min(_1882, _2142));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1696) + _1685;
        float _2621 = (_2616 * _1699) + _1689;
        float _2622 = (_2616 * _1702) + _1693;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_25_50_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_25_50_ladder_2;
        _1723 = frontier_phi_25_50_ladder_1;
        _1725 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_692, _693, _694), _1630);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1737 = ((((1.0 - _720) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_720 * _708)) * _684;
    float _1738 = _1737 * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1739 = _1737 * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1740 = _1737 * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1743 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    float _1760 = _620 / cbSceneParam._m0[86u].x;
    float _1768 = (cbSceneParam._m0[88u].y * (1.0 - _581)) + cbSceneParam._m0[88u].z;
    float _4107 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 5.0;
    float _1775 = (_707 * cbMtdParam._m0[13u].z) * dot(vec3(_577, _578, _579), vec3(1.0, 0.0, 0.0));
    vec4 _1785 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1775 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1775 + _1760) * cbSceneParam._m0[86u].x, _621), _1770).w) + _1760) * cbSceneParam._m0[86u].x, _621), _1770);
    float _1801 = 1.0 - _1785.w;
    vec4 _1809 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_620, _621));
    float _1811 = _1809.w;
    float _1823 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1811);
    float _1824 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1811);
    float _1825 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1811);
    uvec4 _1829 = floatBitsToUint(cbInstanceData._m0[_659 + 5u]);
    uint _1831 = _1829.x * 14u;
    uint _1832 = _1831 + 13u;
    float _1837 = _684 + (-1.0);
    float _1840 = (cbLight._m0[_1832].x * _1837) + 1.0;
    float _1841 = (cbLight._m0[_1832].y * _1837) + 1.0;
    uint _1843 = _1831 + 4u;
    float _1854 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_577, _578, _579));
    float _1857 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    float _1858 = cbLight._m0[_1843].x * _1823;
    float _1859 = cbLight._m0[_1843].y * _1824;
    float _1860 = cbLight._m0[_1843].z * _1825;
    uint _1861 = _1831 + 5u;
    uint _1867 = _1831 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_577, _578, _579));
    float _1876 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    float _1941;
    float _1942;
    float _1943;
    if (_582 == 0.0)
    {
        float _4128 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _4139 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1895 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
        float _1897 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.3183098733425140380859375;
        _1941 = ((cbLight._m0[_1861].x * _1876) * _1897) + ((_1858 * _1857) * _1895);
        _1942 = ((_1876 * cbLight._m0[_1861].y) * _1897) + ((_1859 * _1857) * _1895);
        _1943 = ((_1876 * cbLight._m0[_1861].z) * _1897) + ((_1860 * _1857) * _1895);
    }
    else
    {
        float _1907 = _1854 + _582;
        float _1910 = (_582 * 2.0) + 1.0;
        float _1911 = (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) / _1910;
        float _1918 = _1873 + _582;
        float _1920 = (isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) / _1910;
        _1941 = (((_1920 * cbLight._m0[_1861].x) * _1876) + ((_1858 * _1911) * _1857)) * 0.3183098733425140380859375;
        _1942 = (((_1920 * cbLight._m0[_1861].y) * _1876) + ((_1859 * _1911) * _1857)) * 0.3183098733425140380859375;
        _1943 = (((_1920 * cbLight._m0[_1861].z) * _1876) + ((_1860 * _1911) * _1857)) * 0.3183098733425140380859375;
    }
    uint _1947 = _1831 + 8u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _581) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1831].x + _292;
    float _1966 = cbLight._m0[_1831].y + _293;
    float _1967 = cbLight._m0[_1831].z + _294;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1831].xyz));
    float _4160 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _1979 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _1980 = dot(vec3(_577, _578, _579), vec3(_1972, _1973, _1974));
    float _4182 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1972, _1973, _1974));
    float _4193 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1964 * _1964;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1979 * ((_1978 * _2004) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2004) + _1964) * _1978))) * _1978;
    float _4204 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    uint _2033 = _1831 + 9u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _581) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1867].x + _292;
    float _2050 = cbLight._m0[_1867].y + _293;
    float _2051 = cbLight._m0[_1867].z + _294;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1867].xyz));
    float _4215 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2063 = dot(vec3(_577, _578, _579), vec3(_2056, _2057, _2058));
    float _4226 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2056, _2057, _2058));
    float _4237 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2048 * _2048;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2085 = 1.0 - _2048;
    float _2095 = (0.5 / (((_1979 * ((_2062 * _2085) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2085) + _2048) * _2062))) * _2062;
    float _4248 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    float _2107 = (((_2084 * cbLight._m0[_2033].x) * _2097) * _1876) + ((((cbLight._m0[_1947].x * _1823) * _2003) * _2017) * _1857);
    float _2108 = (((_2084 * cbLight._m0[_2033].y) * _2097) * _1876) + ((((cbLight._m0[_1947].y * _1824) * _2003) * _2017) * _1857);
    float _2109 = (((_2084 * cbLight._m0[_2033].z) * _2097) * _1876) + ((((cbLight._m0[_1947].z * _1825) * _2003) * _2017) * _1857);
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    if (_1829.y == 0u)
    {
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2186;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2186;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2186;
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.x;
        uint _2213 = uint((float(_2201.y) * floor(float(uint(cbSceneParam._m0[85u].y * _621) / _2202))) + floor(float(uint(cbSceneParam._m0[85u].x * _620) / _2202)));
        float _2223 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2224 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        uint _2227 = uint(isnan(14.0) ? _2224 : (isnan(_2224) ? 14.0 : min(_2224, 14.0)));
        uvec4 _2232 = texelFetch(g_lightClusterGridBuffer, int(((_2227 << 2u) + (_2213 << 6u)) >> 2u));
        uint _2233 = _2232.x;
        uint _2234 = _2201.z;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((((1u << ((_2234 >> 4u) & 15u)) + 4294967295u) & _2233) == 0u) || ((_2234 & 240u) == 0u))
        {
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
        }
        else
        {
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            uint _2677 = 0u;
            uint _2686;
            bool _2687;
            for (;;)
            {
                _2686 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                _2687 = _2686 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2687)
                {
                    frontier_phi_61_pred = _2672;
                    frontier_phi_61_pred_1 = _2676;
                    frontier_phi_61_pred_2 = _2675;
                    frontier_phi_61_pred_3 = _2674;
                    frontier_phi_61_pred_4 = _2673;
                    frontier_phi_61_pred_5 = _2671;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2671;
                    _2838 = _2672;
                    _2839 = _2673;
                    _2840 = _2674;
                    _2841 = _2675;
                    _2842 = _2676;
                    _2843 = _2686;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2677 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        float _2883 = _2882.x;
                        float _2884 = _2882.y;
                        float _2885 = _2882.z;
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        uint _2904 = (_2847 * 48u) + 12u;
                        vec2 _2912 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x));
                        float _2918 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
                        float _2919 = _2918 * _2187;
                        float _2920 = _2918 * _2188;
                        float _2921 = _2918 * _2189;
                        float _2922 = _2863.x - _2187;
                        float _2923 = _2863.y - _2188;
                        float _2924 = _2863.z - _2189;
                        float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                        float _2928 = inversesqrt(_2925);
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2932 = dot(vec3(_640, _643, _646), vec3(_2929, _2930, _2931));
                        float _2937 = 1.0 - (_2925 * _2863.w);
                        float _4269 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2939 = sqrt(_2925) * _2882.w;
                        float _2942 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                        float _2943 = _2942 * _2942;
                        float _2944 = 1.0 - _2943;
                        float _2946 = (_2944 * _2944) * _582;
                        float _2949 = ((_2944 * _2932) + _2943) + _2946;
                        float _2954 = _2939 * _2939;
                        float _2958 = ((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2938) / (((_2946 * 2.0) + 1.0) * ((_2954 * 0.699999988079071044921875) + 1.0));
                        float _2962 = dot(vec3(_2929, _2930, _2931), vec3(_2919, _2920, _2921));
                        float _4285 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2969 = dot(vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921), vec3(_640, _643, _646)) + 1.0;
                        float _2971 = (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * 0.5;
                        float _2979 = ((_2971 * _2971) * _2912.x) * exp2((_2912.y * 32.0) * log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))));
                        float _2981 = _582 / (_582 + 1.0);
                        float _2997 = (-0.0) - _2187;
                        float _2998 = (-0.0) - _2188;
                        float _2999 = (-0.0) - _2189;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3014 = exp2(log2(1.0 / ((_2954 * 3.5) + 5.0)) * 0.25);
                        float _3015 = 1.0 - _708;
                        float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                        float _3023 = _3022 * _3022;
                        float _3024 = _3023 * _3023;
                        float _3025 = _3004 + _2929;
                        float _3026 = _3005 + _2930;
                        float _3027 = _3006 + _2931;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3035 = dot(vec3(_640, _643, _646), vec3(_3004, _3005, _3006));
                        float _4301 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3039 = dot(vec3(_640, _643, _646), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                        float _4312 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                        float _3047 = _2942 * _3023;
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _2932) + _3048;
                        float _4323 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3053 = 1.0 - _3023;
                        float _3063 = (0.5 / (((_3052 * ((_3038 * _3053) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3023) * _3038))) * _3052;
                        float _4334 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3074 = (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3046 * _3046) * ((_2954 * 2.1991131305694580078125) + 3.141590118408203125))) * _2938;
                        _2767 = (((((_2883 * 0.3183098733425140380859375) * _2981) * _2979) + _2883) * _2958) + _2840;
                        _2768 = (((((_2884 * 0.3183098733425140380859375) * _2981) * _2979) + _2884) * _2958) + _2841;
                        _2769 = (((((_2885 * 0.3183098733425140380859375) * _2981) * _2979) + _2885) * _2958) + _2842;
                        _2764 = (_3074 * _2899.x) + _2837;
                        _2765 = (_3074 * _2899.y) + _2838;
                        _2766 = (_3074 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_61_pred = _2765;
                    frontier_phi_61_pred_1 = _2769;
                    frontier_phi_61_pred_2 = _2768;
                    frontier_phi_61_pred_3 = _2767;
                    frontier_phi_61_pred_4 = _2766;
                    frontier_phi_61_pred_5 = _2764;
                }
                _2465 = frontier_phi_61_pred;
                _2473 = frontier_phi_61_pred_1;
                _2471 = frontier_phi_61_pred_2;
                _2469 = frontier_phi_61_pred_3;
                _2467 = frontier_phi_61_pred_4;
                _2463 = frontier_phi_61_pred_5;
                uint _2678 = _2677 + 1u;
                if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2671 = _2463;
                    _2672 = _2465;
                    _2673 = _2467;
                    _2674 = _2469;
                    _2675 = _2471;
                    _2676 = _2473;
                    _2677 = _2678;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
        }
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.z;
        uint _2479 = (_2477 >> 8u) & 15u;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((4294967295u << _2479) & _2233) == 0u)
        {
            _2639 = _2462;
            _2641 = _2464;
            _2643 = _2466;
            _2645 = _2468;
            _2647 = _2470;
            _2649 = _2472;
        }
        else
        {
            float _2664 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _2665 = _2664 * _2187;
            float _2666 = _2664 * _2188;
            float _2667 = _2664 * _2189;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2479 < ((_2477 >> 12u) & 15u))
            {
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2820 = _2462;
                float _2821 = _2464;
                float _2822 = _2466;
                float _2823 = _2468;
                float _2824 = _2470;
                float _2825 = _2472;
                uint _2826 = _2479;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2836)
                    {
                        frontier_phi_72_pred = _2825;
                        frontier_phi_72_pred_1 = _2824;
                        frontier_phi_72_pred_2 = _2823;
                        frontier_phi_72_pred_3 = _2822;
                        frontier_phi_72_pred_4 = _2821;
                        frontier_phi_72_pred_5 = _2820;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3101 = _2820;
                        float _3102 = _2821;
                        float _3103 = _2822;
                        float _3104 = _2823;
                        float _3105 = _2824;
                        float _3106 = _2825;
                        uint _3107 = _2835;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        vec3 _3164;
                        vec2 _3173;
                        vec4 _3188;
                        vec4 _3204;
                        float _3251;
                        bool _3252;
                        for (;;)
                        {
                            uint _3118 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3150 = _3149.x;
                            _3151 = _3149.y;
                            _3152 = _3149.z;
                            uint _3154 = (_3118 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3166 = (_3118 * 40u) + 12u;
                            _3173 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x));
                            uint _3175 = (_3118 * 40u) + 16u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3191 = (_3118 * 40u) + 20u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3118 * 40u) + 24u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3226 = (_3118 * 40u) + 28u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3251 = fma(_2189, _3239.z, fma(_2188, _3239.y, _3239.x * _2187)) + _3239.w;
                            _3252 = !((fma(_2189, _3220.z, fma(_2188, _3220.y, _3220.x * _2187)) + _3220.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3252)
                            {
                                float _3278 = _3133.x - _2187;
                                float _3279 = _3133.y - _2188;
                                float _3280 = _3133.z - _2189;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3134 * _3134));
                                float _4345 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3296 = sqrt(_3281) * _3149.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3300 = 1.0 - _3299;
                                float _3302 = (_3300 * _3300) * _582;
                                float _3305 = ((_3300 * dot(vec3(_3285, _3286, _3287), vec3(_640, _643, _646))) + _3299) + _3302;
                                float _3310 = _3296 * _3296;
                                float _3315 = (fma(_2189, _3188.z, fma(_2188, _3188.y, _3188.x * _2187)) + _3188.w) / _3251;
                                float _3316 = (fma(_2189, _3204.z, fma(_2188, _3204.y, _3204.x * _2187)) + _3204.w) / _3251;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4361 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3292) / (((_3302 * 2.0) + 1.0) * ((_3310 * 0.699999988079071044921875) + 1.0)));
                                float _3323 = (-0.0) - _2665;
                                float _3324 = (-0.0) - _2666;
                                float _3325 = (-0.0) - _2667;
                                float _3326 = dot(vec3(_3285, _3286, _3287), vec3(_2665, _2666, _2667));
                                float _4372 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3333 = dot(vec3(_3323, _3324, _3325), vec3(_640, _643, _646)) + 1.0;
                                float _3335 = (isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * 0.5;
                                float _3342 = ((_3335 * _3335) * _3173.x) * exp2((_3173.y * 32.0) * log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))));
                                float _3344 = _582 / (_582 + 1.0);
                                float _3365 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                                float _3366 = 1.0 - _708;
                                float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                                float _3374 = _3373 * _3373;
                                float _3375 = _3374 * _3374;
                                float _3376 = _3285 - _2665;
                                float _3377 = _3286 - _2666;
                                float _3378 = _3287 - _2667;
                                float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                                float _3386 = dot(vec3(_640, _643, _646), vec3(_3323, _3324, _3325));
                                float _4388 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3390 = dot(vec3(_640, _643, _646), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                                float _4399 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                                float _3398 = _3298 * _3374;
                                float _3399 = _3398 * _3398;
                                float _3405 = ((1.0 - _3399) * dot(vec3(_640, _643, _646), vec3(_3285, _3286, _3287))) + _3399;
                                float _4410 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3407 = 1.0 - _3374;
                                float _3417 = (0.5 / (((_3406 * ((_3389 * _3407) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3374) * _3389))) * _3406;
                                float _4421 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3427 = (_3321 * _3292) * (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3397 * _3397) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3150 * 0.3183098733425140380859375) * _3344) * _3342) + _3150) * _3322;
                                frontier_phi_78_pred_1 = ((((_3152 * 0.3183098733425140380859375) * _3344) * _3342) + _3152) * _3322;
                                frontier_phi_78_pred_2 = ((((_3151 * 0.3183098733425140380859375) * _3344) * _3342) + _3151) * _3322;
                                frontier_phi_78_pred_3 = _3427 * _3164.z;
                                frontier_phi_78_pred_4 = _3427 * _3164.y;
                                frontier_phi_78_pred_5 = _3427 * _3164.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_78_pred;
                            _3436 = frontier_phi_78_pred_1;
                            _3435 = frontier_phi_78_pred_2;
                            _3433 = frontier_phi_78_pred_3;
                            _3432 = frontier_phi_78_pred_4;
                            _3431 = frontier_phi_78_pred_5;
                            _3091 = _3434 + _3104;
                            _3092 = _3435 + _3105;
                            _3093 = _3436 + _3106;
                            _3088 = _3431 + _3101;
                            _3089 = _3432 + _3102;
                            _3090 = _3433 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3093;
                        frontier_phi_72_pred_1 = _3092;
                        frontier_phi_72_pred_2 = _3091;
                        frontier_phi_72_pred_3 = _3090;
                        frontier_phi_72_pred_4 = _3089;
                        frontier_phi_72_pred_5 = _3088;
                    }
                    _2650 = frontier_phi_72_pred;
                    _2648 = frontier_phi_72_pred_1;
                    _2646 = frontier_phi_72_pred_2;
                    _2644 = frontier_phi_72_pred_3;
                    _2642 = frontier_phi_72_pred_4;
                    _2640 = frontier_phi_72_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2640;
                        _2821 = _2642;
                        _2822 = _2644;
                        _2823 = _2646;
                        _2824 = _2648;
                        _2825 = _2650;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2650;
                frontier_phi_52_53_ladder_1 = _2642;
                frontier_phi_52_53_ladder_2 = _2648;
                frontier_phi_52_53_ladder_3 = _2646;
                frontier_phi_52_53_ladder_4 = _2644;
                frontier_phi_52_53_ladder_5 = _2640;
            }
            else
            {
                frontier_phi_52_53_ladder = _2472;
                frontier_phi_52_53_ladder_1 = _2464;
                frontier_phi_52_53_ladder_2 = _2470;
                frontier_phi_52_53_ladder_3 = _2468;
                frontier_phi_52_53_ladder_4 = _2466;
                frontier_phi_52_53_ladder_5 = _2462;
            }
            _2639 = frontier_phi_52_53_ladder_5;
            _2641 = frontier_phi_52_53_ladder_1;
            _2643 = frontier_phi_52_53_ladder_4;
            _2645 = frontier_phi_52_53_ladder_3;
            _2647 = frontier_phi_52_53_ladder_2;
            _2649 = frontier_phi_52_53_ladder;
        }
        float _2654 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
        _2246 = (_2654 * _2645) + _1941;
        _2248 = (_2654 * _2647) + _1942;
        _2250 = (_2654 * _2649) + _1943;
        _2252 = ((_2639 * 0.039999999105930328369140625) * _2654) + _2107;
        _2254 = ((_2641 * 0.039999999105930328369140625) * _2654) + _2108;
        _2256 = ((_2643 * 0.039999999105930328369140625) * _2654) + _2109;
    }
    else
    {
        _2246 = _1941;
        _2248 = _1942;
        _2250 = _1943;
        _2252 = _2107;
        _2254 = _2108;
        _2256 = _2109;
    }
    float _2276 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2277 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2278 = cbSceneParam._m0[86u].x * ((_620 / cbSceneParam._m0[86u].x) + ((_707 * cbMtdParam._m0[13u].y) * dot(vec3(_577, _578, _579), vec3(_210, _211, _212))));
    float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
    float _2280 = isnan(_2277) ? _621 : (isnan(_621) ? _2277 : min(_621, _2277));
    vec4 _2282 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2279, _2280), 0.0);
    float _2284 = _2282.x;
    bool _2305 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2284)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2284))) > _601;
    float _2306 = _2305 ? _2279 : _620;
    float _2307 = _2305 ? _2280 : _621;
    vec4 _2309 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2306, _2307));
    vec4 _2314 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2306, _2307));
    float _2316 = _2314.x;
    float _2336 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2316)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2316))) - _601;
    bool _2346 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2350 = (isnan(_2336) ? 0.0 : (isnan(0.0) ? _2336 : max(0.0, _2336))) * (-1.44269502162933349609375);
    float _4452 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4463 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4474 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _2377 = 0.959999978542327880859375 - (exp2(log2(1.0 - _699) * 5.0) * 0.959999978542327880859375);
    float _2380 = ((_2309.x * _2377) * exp2(_2350 * (_2346 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2383 = ((_2309.y * _2377) * exp2(_2350 * (_2346 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2386 = ((_2309.z * _2377) * exp2(_2350 * (_2346 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2394 = (_2380 + (((((_1737 * _1785.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1530) * _1801)) + _2252) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2246 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _684))) - _2380) * cbMtdParam._m0[15u].x);
    float _2396 = (_2383 + (((((_1737 * _1785.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1530) * _1801)) + _2254) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2248 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _684))) - _2383) * cbMtdParam._m0[15u].x);
    float _2398 = (_2386 + (((((_1737 * _1785.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1530) * _1801)) + _2256) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2250 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _684))) - _2386) * cbMtdParam._m0[15u].x);
    float _2403 = cbInstanceData._m0[_659 + 6u].w * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)));
    float _2408 = _620 / cbSceneParam._m0[86u].x;
    float _2409 = _621 / cbSceneParam._m0[86u].y;
    vec4 _2423 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2425 = _2423.x;
    float _2426 = _2423.y;
    float _2427 = _2423.z;
    float _2428 = _2423.w;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2487 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2488 = _2487 / _601;
        float _2499 = _2488 * _280;
        float _2500 = _281 * _2488;
        float _2501 = (-0.0) - _2500;
        float _2502 = _2488 * _282;
        float _2504 = (cbSceneParam._m0[77u].w * _2501) / _2487;
        float _2505 = _2504 + cbSceneParam._m0[79u].w;
        float _2506 = cbSceneParam._m0[79u].w - _2500;
        float _2512 = sqrt(((_2499 * _2499) + (_2500 * _2500)) + (_2502 * _2502));
        float _2515 = (1.0 - (cbSceneParam._m0[77u].w / _2487)) * _2512;
        float _2520 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2521 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2501 - _2504) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2505 > 0.0) ? exp2(_2520 * _2505) : (2.0 - exp2(_2521 * _2505))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2515;
        }
        else
        {
            float _2700 = 1.0 / cbSceneParam._m0[80u].x;
            float _2701 = isnan(_2506) ? _2505 : (isnan(_2505) ? _2506 : max(_2505, _2506));
            float _2702 = isnan(_2506) ? _2505 : (isnan(_2505) ? _2506 : min(_2505, _2506));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            _2777 = ((abs(_2512 / _2501) * cbSceneParam._m0[80u].y) * ((((_2711 - _2712) * 2.0) - ((exp2(_2520 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)))) - exp2(_2520 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))))) * _2700)) - ((exp2(_2521 * _2711) - exp2(_2521 * _2712)) * _2700))) + (_2515 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2428);
        _2523 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2425;
        _2525 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2426;
        _2527 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2427;
        _2529 = _2788 * _2428;
    }
    else
    {
        _2523 = _2425;
        _2525 = _2426;
        _2527 = _2427;
        _2529 = _2428;
    }
    bool _2815;
    float _2584;
    vec4 _2587;
    float _2589;
    vec4 _2591;
    float _2599;
    float _2600;
    float _2601;
    float _2602;
    bool _2612;
    for (;;)
    {
        bool _2541 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2542 = log2(_2529);
        float _2549 = exp2(_2542 * cbSceneParam._m0[78u].x) * _2394;
        float _2550 = exp2(_2542 * cbSceneParam._m0[78u].y) * _2396;
        float _2551 = exp2(_2542 * cbSceneParam._m0[78u].z) * _2398;
        vec4 _2559 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_620, _621));
        float _2561 = _2559.x;
        float _2582 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2561)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2561))) - _601) * cbMtdParam._m0[14u].z;
        float _4525 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        _2584 = _2403 * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)));
        float _2585 = _608 + (-0.5);
        _2587 = cbMtdParam._m0[1u];
        _2589 = _2587.y * _2585;
        _2591 = cbMatDynParam._m0[0u];
        float _2598 = (roundEven(_2591.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2599 = _2598 * (_2541 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2523)));
        _2600 = _2598 * (_2541 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2525)));
        _2601 = _2598 * (_2541 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2527)));
        _2602 = _2585 * 0.999000012874603271484375;
        _2612 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2612)
        {
            if ((cbInstanceData._m0[_659 + 7u].x + _2602) < 0.5)
            {
                _2815 = true;
                break;
            }
        }
        uint _2735 = _660 + uint(_2591.w);
        if ((cbInstanceData._m0[_2735].w < 1.0) && ((cbInstanceData._m0[_2735].w + _2602) < 0.5))
        {
            _2815 = true;
            break;
        }
        if ((_2589 + 1.0) < _2587.x)
        {
            _2815 = true;
            break;
        }
        _2815 = false;
        break;
    }
    float _3079;
    if (_2815)
    {
        discard_state = true;
        _3079 = 0.0;
    }
    else
    {
        _3079 = _2584;
    }
    SV_Target.x = _2599;
    SV_Target.y = _2600;
    SV_Target.z = _2601;
    SV_Target.w = _3079;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2584;
    discard_exit();
}


