#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _958;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _198 = _197 * _189;
    float _199 = _197 * _190;
    float _200 = _197 * _191;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _258);
    float _269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _258);
    float _270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _258);
    float _278 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _279 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _290 = dot(vec3(_268, _269, _270), vec3(_198, _199, _200));
    float _293 = dot(vec3(_268, _269, _270), vec3(_212, _213, _214));
    float _296 = dot(vec3(_268, _269, _270), vec3(_205, _206, _207));
    float _302 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _326 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _346 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_290 * cbMtdParam._m0[12u].x) * _302) * _326) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_293 * cbMtdParam._m0[12u].x) * _302) * _326) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _369 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _370 = _369 * _268;
    float _371 = _369 * _269;
    float _372 = _369 * _270;
    float _376 = dot(vec4(_370, _371, _372, 0.0), vec4(_205, _206, _207, 0.0)) - cbMtdParam._m0[12u].w;
    float _3355 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _383 = exp2(log2(1.0 - (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _398 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _346.x) * cbMtdParam._m0[9u].x) * ((_383 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _402 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _346.y) * cbMtdParam._m0[9u].y) * ((_383 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _406 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _346.z) * cbMtdParam._m0[9u].z) * ((_383 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _419 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    float _427 = (_419.x * 2.0) + (-1.0);
    float _428 = (_419.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3371 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))));
    float _439 = cbMtdParam._m0[14u].w + _419.z;
    vec4 _451 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _278) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _279) + cbTextureTilingScale._m0[0u].w));
    float _455 = cbMtdParam._m0[13u].w * _451.x;
    float _473 = fma(_434, _205, fma(_428, _212, _427 * _198));
    float _476 = fma(_434, _206, fma(_428, _213, _427 * _199));
    float _479 = fma(_434, _207, fma(_428, _214, _427 * _200));
    float _483 = inversesqrt(dot(vec3(_473, _476, _479), vec3(_473, _476, _479)));
    float _484 = _483 * _473;
    float _485 = _483 * _476;
    float _486 = _483 * _479;
    float _3382 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _487 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _488 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3398 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3409 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3420 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _507 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _535 = fma(_486, cbSceneParam._m0[5u].z, fma(_485, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _484));
    float _538 = fma(_486, cbSceneParam._m0[6u].z, fma(_485, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _484));
    float _541 = fma(_486, cbSceneParam._m0[7u].z, fma(_485, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _484));
    uint _554 = uint(roundEven(NORMAL.w)) * 13u;
    uint _556 = (_554 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _562 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_556].x;
    float _563 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_556].y;
    float _564 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_556].z;
    float _3431 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    vec4 _576 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _579 = _576.x * TEXCOORD_1.w;
    float _580 = dot(vec3(_484, _485, _486), vec3(_370, _371, _372));
    float _583 = _580 * 2.0;
    float _587 = (_583 * _484) - _370;
    float _588 = (_583 * _485) - _371;
    float _589 = (_583 * _486) - _372;
    float _593 = abs(dot(vec3(_370, _371, _372), vec3(_484, _485, _486)));
    float _3464 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _602 = 10.0 / (_507 + 10.0);
    float _603 = sqrt(_487);
    float _615 = exp2((_603 * 5.0) * log2(1.0 - (_594 * 0.999000012874603271484375))) / (4.0 - (_603 * 3.0));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_655, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647));
        float _686 = fma(_655, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647));
        float _690 = fma(_655, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647));
        float _715 = _647 + _484;
        float _716 = _651 + _485;
        float _717 = _655 + _486;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_484, _485, _486), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3512 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_484, _485, _486), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3545 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_484, _485, _486), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3578 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _998 = fma(_655, cbModelParam._m0[30u].z, fma(_651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _647));
        float _1002 = fma(_655, cbModelParam._m0[31u].z, fma(_651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _647));
        float _1006 = fma(_655, cbModelParam._m0[32u].z, fma(_651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _647));
        float _1029 = _647 + _484;
        float _1030 = _651 + _485;
        float _1031 = _655 + _486;
        float _1041 = fma(_1031, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_998 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1002 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[35u].z) + ((((((_1006 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1097 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1064.x + (-0.5));
        float _1099 = _1097 * (_1064.y + (-0.5));
        float _1100 = _1097 * (_1064.z + (-0.5));
        float _1107 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1071.x + (-0.5));
        float _1109 = _1107 * (_1071.y + (-0.5));
        float _1110 = _1107 * (_1071.z + (-0.5));
        float _1117 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1078.x + (-0.5));
        float _1119 = _1117 * (_1078.y + (-0.5));
        float _1120 = _1117 * (_1078.z + (-0.5));
        float _1127 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1085.x + (-0.5));
        float _1129 = _1127 * (_1085.y + (-0.5));
        float _1130 = _1127 * (_1085.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_484, _485, _486), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3641 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1161 + 1.0))) + _1166) * _1131;
        float _1176 = _1099 * 0.5;
        float _1177 = _1109 * 0.5;
        float _1178 = _1119 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_484, _485, _486), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3674 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1203 + 1.0))) + _1208) * _1132;
        float _1218 = _1100 * 0.5;
        float _1219 = _1110 * 0.5;
        float _1220 = _1120 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_484, _485, _486), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3707 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1245 + 1.0))) + _1250) * _1133;
        _1267 = _1100;
        _1268 = _1099;
        _1269 = _1098;
        _1270 = _1110;
        _1271 = _1109;
        _1272 = _1108;
        _1273 = _1120;
        _1274 = _1119;
        _1275 = _1118;
        _1276 = _1133;
        _1277 = _1132;
        _1278 = _1131;
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _958;
        _1268 = _958;
        _1269 = _958;
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _971)) + _971;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _972)) + _972;
    float _1314 = fma(_1293, cbSceneParam._m0[89u].z, fma(_1292, cbSceneParam._m0[89u].y, _1291 * cbSceneParam._m0[89u].x));
    float _1317 = fma(_1293, cbSceneParam._m0[90u].z, fma(_1292, cbSceneParam._m0[90u].y, _1291 * cbSceneParam._m0[90u].x));
    float _1320 = fma(_1293, cbSceneParam._m0[91u].z, fma(_1292, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1291));
    float _1335 = _587 * 0.5;
    float _1336 = _588 * 0.5;
    float _1337 = _589 * 0.5;
    float _1338 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1341 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1344 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1378;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1351 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_957, _961, _964, _967));
        float _1355 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_959, _962, _965, _968));
        float _1359 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_960, _963, _966, _969));
        float _1366 = dot(vec4(cbModelParam._m0[39u]), vec4(_1335, _1336, _1337, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1389;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1380 = dot(vec4(cbModelParam._m0[40u]), vec4(_1335, _1336, _1337, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1393 = (_1389 * cbModelParam._m0[1u].x) + (_1378 * (1.0 - cbModelParam._m0[1u].x));
    float _1403 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _487);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1403 : min(cbModelParam._m0[25u].z, _1403));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_655, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_655, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_655, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1465 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1468 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1496 = frontier_phi_14_12_ladder;
        }
        float _1719;
        if (_1465 > 0.0)
        {
            _1719 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1719 = frontier_phi_23_19_ladder;
        }
        float _1954;
        if (_1468 > 0.0)
        {
            _1954 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1954 = frontier_phi_34_30_ladder;
        }
        float _1956 = isnan(_1719) ? _1496 : (isnan(_1496) ? _1719 : min(_1496, _1719));
        float _1957 = isnan(_1954) ? _1956 : (isnan(_1956) ? _1954 : min(_1956, _1954));
        float _1961 = (_1957 * _1462) + _1451;
        float _1962 = (_1957 * _1465) + _1455;
        float _1963 = (_1957 * _1468) + _1459;
        float _1964 = _1957 * 9.9999997473787516355514526367188e-05;
        float _1966 = (-1.0) - _1964;
        float _1968 = _1964 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1963 > _1968) || ((_1963 < _1966) || ((_1962 > _1968) || ((_1962 < _1966) || ((_1961 < _1966) || (_1961 > _1968))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1963, cbModelParam._m0[9u].z, fma(_1962, cbModelParam._m0[9u].y, _1961 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1963, cbModelParam._m0[10u].z, fma(_1962, cbModelParam._m0[10u].y, _1961 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1963, cbModelParam._m0[11u].z, fma(_1962, cbModelParam._m0[11u].y, _1961 * cbModelParam._m0[11u].x))), _1404);
            frontier_phi_13_34_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_13_34_ladder_2;
        _1486 = frontier_phi_13_34_ladder_1;
        _1488 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _1404);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _487);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1548 = fma(_655, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647)) + cbModelParam._m0[21u].w;
        float _1552 = fma(_655, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647)) + cbModelParam._m0[22u].w;
        float _1556 = fma(_655, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647)) + cbModelParam._m0[23u].w;
        float _1559 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1562 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1565 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1724;
        if (_1559 > 0.0)
        {
            _1724 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1724 = frontier_phi_25_21_ladder;
        }
        float _1981;
        if (_1562 > 0.0)
        {
            _1981 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1981 = frontier_phi_36_32_ladder;
        }
        float _2437;
        if (_1565 > 0.0)
        {
            _2437 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2437 = frontier_phi_47_42_ladder;
        }
        float _2439 = isnan(_1981) ? _1724 : (isnan(_1724) ? _1981 : min(_1724, _1981));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1559) + _1548;
        float _2445 = (_2440 * _1562) + _1552;
        float _2446 = (_2440 * _1565) + _1556;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_22_47_ladder = _2567.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2567.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2567.x * cbModelParam._m0[1u].z;
        }
        _1584 = frontier_phi_22_47_ladder_2;
        _1586 = frontier_phi_22_47_ladder_1;
        _1588 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1493);
        _1584 = _1568.x * cbModelParam._m0[1u].z;
        _1586 = _1568.y * cbModelParam._m0[1u].z;
        _1588 = _1568.z * cbModelParam._m0[1u].z;
    }
    float _1600 = ((((1.0 - _615) * ((_603 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_615 * _603)) * _579;
    float _1601 = _1600 * ((cbModelParam._m0[1u].w * (_1584 - _1484)) + _1484);
    float _1602 = _1600 * ((cbModelParam._m0[1u].w * (_1586 - _1486)) + _1486);
    float _1603 = _1600 * ((cbModelParam._m0[1u].w * (_1588 - _1488)) + _1488);
    float _1606 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, _1601 * cbSceneParam._m0[91u].x));
    float _1623 = _513 / cbSceneParam._m0[86u].x;
    float _1631 = (cbSceneParam._m0[88u].y * (1.0 - _487)) + cbSceneParam._m0[88u].z;
    float _3833 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1633 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 5.0;
    float _1638 = (_602 * cbMtdParam._m0[13u].z) * dot(vec3(_484, _485, _486), vec3(1.0, 0.0, 0.0));
    vec4 _1648 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1638 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1638 + _1623) * cbSceneParam._m0[86u].x, _514), _1633).w) + _1623) * cbSceneParam._m0[86u].x, _514), _1633);
    float _1664 = 1.0 - _1648.w;
    uvec4 _1674 = floatBitsToUint(cbInstanceData._m0[_554 + 5u]);
    uint _1676 = _1674.x * 14u;
    uint _1677 = _1676 + 13u;
    float _1682 = _579 + (-1.0);
    float _1685 = (cbLight._m0[_1677].x * _1682) + 1.0;
    float _1686 = (cbLight._m0[_1677].y * _1682) + 1.0;
    uint _1688 = _1676 + 4u;
    float _1699 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_484, _485, _486));
    float _1702 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
    uint _1703 = _1676 + 5u;
    uint _1709 = _1676 | 1u;
    float _1715 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_484, _485, _486));
    float _1718 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    float _1783;
    float _1784;
    float _1785;
    if (_488 == 0.0)
    {
        float _3854 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _3865 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1737 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.3183098733425140380859375;
        float _1739 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.3183098733425140380859375;
        _1783 = ((cbLight._m0[_1703].x * _1718) * _1739) + ((cbLight._m0[_1688].x * _1702) * _1737);
        _1784 = ((_1718 * cbLight._m0[_1703].y) * _1739) + ((_1702 * cbLight._m0[_1688].y) * _1737);
        _1785 = ((_1718 * cbLight._m0[_1703].z) * _1739) + ((_1702 * cbLight._m0[_1688].z) * _1737);
    }
    else
    {
        float _1749 = _1699 + _488;
        float _1752 = (_488 * 2.0) + 1.0;
        float _1753 = (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) / _1752;
        float _1760 = _1715 + _488;
        float _1762 = (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) / _1752;
        _1783 = (((_1762 * cbLight._m0[_1703].x) * _1718) + ((_1753 * cbLight._m0[_1688].x) * _1702)) * 0.3183098733425140380859375;
        _1784 = (((_1762 * cbLight._m0[_1703].y) * _1718) + ((_1753 * cbLight._m0[_1688].y) * _1702)) * 0.3183098733425140380859375;
        _1785 = (((_1762 * cbLight._m0[_1703].z) * _1718) + ((_1753 * cbLight._m0[_1688].z) * _1702)) * 0.3183098733425140380859375;
    }
    uint _1789 = _1676 + 8u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _487) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1676].x + _370;
    float _1808 = cbLight._m0[_1676].y + _371;
    float _1809 = cbLight._m0[_1676].z + _372;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_1676].xyz));
    float _3886 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _1821 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1822 = dot(vec3(_484, _485, _486), vec3(_1814, _1815, _1816));
    float _3908 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1814, _1815, _1816));
    float _3919 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1806 * _1806;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1845 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1846 = 1.0 - _1806;
    float _1857 = (0.5 / (((_1821 * ((_1820 * _1846) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1821 * _1846) + _1806) * _1820))) * _1820;
    float _3930 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    uint _1872 = _1676 + 9u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _487) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1709].x + _370;
    float _1889 = cbLight._m0[_1709].y + _371;
    float _1890 = cbLight._m0[_1709].z + _372;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_1709].xyz));
    float _3941 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _1902 = dot(vec3(_484, _485, _486), vec3(_1895, _1896, _1897));
    float _3952 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1895, _1896, _1897));
    float _3963 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1887 * _1887;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1924 = 1.0 - _1887;
    float _1934 = (0.5 / (((_1821 * ((_1901 * _1924) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1821 * _1924) + _1887) * _1901))) * _1901;
    float _3974 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    float _1946 = (((_1923 * cbLight._m0[_1872].x) * _1936) * _1718) + (((_1845 * cbLight._m0[_1789].x) * _1859) * _1702);
    float _1947 = (((_1923 * cbLight._m0[_1872].y) * _1936) * _1718) + (((_1845 * cbLight._m0[_1789].y) * _1859) * _1702);
    float _1948 = (((_1923 * cbLight._m0[_1872].z) * _1936) * _1718) + (((_1845 * cbLight._m0[_1789].z) * _1859) * _1702);
    float _2085;
    float _2087;
    float _2089;
    float _2091;
    float _2093;
    float _2095;
    if (_1674.y == 0u)
    {
        float _2025 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2026 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2025;
        float _2027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2025;
        float _2028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2025;
        uvec4 _2040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2041 = _2040.x;
        uint _2052 = uint((float(_2040.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2041))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2041)));
        float _2062 = (log2(_2028 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2063 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        uint _2066 = uint(isnan(14.0) ? _2063 : (isnan(_2063) ? 14.0 : min(_2063, 14.0)));
        uvec4 _2071 = texelFetch(g_lightClusterGridBuffer, int(((_2066 << 2u) + (_2052 << 6u)) >> 2u));
        uint _2072 = _2071.x;
        uint _2073 = _2040.z;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        if (((((1u << ((_2073 >> 4u) & 15u)) + 4294967295u) & _2072) == 0u) || ((_2073 & 240u) == 0u))
        {
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
        }
        else
        {
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2303;
            float _2305;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            uint _2501 = 0u;
            uint _2510;
            bool _2511;
            for (;;)
            {
                _2510 = texelFetch(g_lightClassification, int((((_2066 << 5u) + (_2052 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                _2511 = _2510 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2511)
                {
                    frontier_phi_56_pred = _2495;
                    frontier_phi_56_pred_1 = _2500;
                    frontier_phi_56_pred_2 = _2499;
                    frontier_phi_56_pred_3 = _2498;
                    frontier_phi_56_pred_4 = _2497;
                    frontier_phi_56_pred_5 = _2496;
                }
                else
                {
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    uint _2646;
                    _2640 = _2495;
                    _2641 = _2496;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2510;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    for (;;)
                    {
                        uint _2650 = uint(findLSB(_2646)) + (_2501 << 5u);
                        uint _2647 = (_2646 + 4294967295u) & _2646;
                        uint _2652 = _2650 * 48u;
                        vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 3u)).x));
                        uint _2672 = (_2650 * 48u) + 4u;
                        vec4 _2685 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        float _2686 = _2685.x;
                        float _2687 = _2685.y;
                        float _2688 = _2685.z;
                        uint _2691 = (_2650 * 48u) + 8u;
                        vec3 _2702 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x));
                        uint _2707 = (_2650 * 48u) + 12u;
                        vec2 _2715 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x));
                        float _2721 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
                        float _2722 = _2721 * _2026;
                        float _2723 = _2721 * _2027;
                        float _2724 = _2721 * _2028;
                        float _2725 = _2666.x - _2026;
                        float _2726 = _2666.y - _2027;
                        float _2727 = _2666.z - _2028;
                        float _2728 = dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727));
                        float _2731 = inversesqrt(_2728);
                        float _2732 = _2731 * _2725;
                        float _2733 = _2731 * _2726;
                        float _2734 = _2731 * _2727;
                        float _2735 = dot(vec3(_535, _538, _541), vec3(_2732, _2733, _2734));
                        float _2740 = 1.0 - (_2728 * _2666.w);
                        float _3995 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2741 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                        float _2742 = sqrt(_2728) * _2685.w;
                        float _2745 = 1.39999997615814208984375 / (_2742 + 1.39999997615814208984375);
                        float _2746 = _2745 * _2745;
                        float _2747 = 1.0 - _2746;
                        float _2749 = (_2747 * _2747) * _488;
                        float _2752 = ((_2747 * _2735) + _2746) + _2749;
                        float _2757 = _2742 * _2742;
                        float _2762 = ((isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))) * _2741) / (((_2749 * 2.0) + 1.0) * ((_2757 * 0.699999988079071044921875) + 1.0));
                        float _2766 = dot(vec3(_2732, _2733, _2734), vec3(_2722, _2723, _2724));
                        float _4011 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2773 = dot(vec3((-0.0) - _2722, (-0.0) - _2723, (-0.0) - _2724), vec3(_535, _538, _541)) + 1.0;
                        float _2775 = (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * 0.5;
                        float _2783 = ((_2775 * _2775) * _2715.x) * exp2((_2715.y * 32.0) * log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))));
                        float _2785 = _488 / (_488 + 1.0);
                        float _2801 = (-0.0) - _2026;
                        float _2802 = (-0.0) - _2027;
                        float _2803 = (-0.0) - _2028;
                        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
                        float _2808 = _2807 * _2801;
                        float _2809 = _2807 * _2802;
                        float _2810 = _2807 * _2803;
                        float _2818 = exp2(log2(1.0 / ((_2757 * 3.5) + 5.0)) * 0.25);
                        float _2819 = 1.0 - _603;
                        float _2826 = sqrt(1.0 - ((1.0 - (_2819 * _2819)) * (1.0 - (_2818 * _2818))));
                        float _2827 = _2826 * _2826;
                        float _2828 = _2827 * _2827;
                        float _2829 = _2808 + _2732;
                        float _2830 = _2809 + _2733;
                        float _2831 = _2810 + _2734;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2839 = dot(vec3(_535, _538, _541), vec3(_2808, _2809, _2810));
                        float _4027 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2843 = dot(vec3(_535, _538, _541), vec3(_2835 * _2829, _2835 * _2830, _2835 * _2831));
                        float _4038 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2846 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2850 = ((_2846 * _2846) * (_2828 + (-1.0))) + 1.0;
                        float _2851 = _2745 * _2827;
                        float _2852 = _2851 * _2851;
                        float _2855 = ((1.0 - _2852) * _2735) + _2852;
                        float _4049 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2857 = 1.0 - _2827;
                        float _2867 = (0.5 / (((_2856 * ((_2842 * _2857) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _2857) + _2827) * _2842))) * _2856;
                        float _4060 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2878 = (((_2828 * 3.1415927410125732421875) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) / ((_2850 * _2850) * ((_2757 * 2.1991131305694580078125) + 3.141590118408203125))) * _2741;
                        _2575 = (((((_2686 * 0.3183098733425140380859375) * _2785) * _2783) + _2686) * _2762) + _2643;
                        _2576 = (((((_2687 * 0.3183098733425140380859375) * _2785) * _2783) + _2687) * _2762) + _2644;
                        _2577 = (((((_2688 * 0.3183098733425140380859375) * _2785) * _2783) + _2688) * _2762) + _2645;
                        _2572 = (_2878 * _2702.x) + _2640;
                        _2573 = (_2878 * _2702.y) + _2641;
                        _2574 = (_2878 * _2702.z) + _2642;
                        if (_2647 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2647;
                        }
                    }
                    frontier_phi_56_pred = _2572;
                    frontier_phi_56_pred_1 = _2577;
                    frontier_phi_56_pred_2 = _2576;
                    frontier_phi_56_pred_3 = _2575;
                    frontier_phi_56_pred_4 = _2574;
                    frontier_phi_56_pred_5 = _2573;
                }
                _2295 = frontier_phi_56_pred;
                _2305 = frontier_phi_56_pred_1;
                _2303 = frontier_phi_56_pred_2;
                _2301 = frontier_phi_56_pred_3;
                _2299 = frontier_phi_56_pred_4;
                _2297 = frontier_phi_56_pred_5;
                uint _2502 = _2501 + 1u;
                if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2495 = _2295;
                    _2496 = _2297;
                    _2497 = _2299;
                    _2498 = _2301;
                    _2499 = _2303;
                    _2500 = _2305;
                    _2501 = _2502;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
        }
        uvec4 _2308 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2309 = _2308.z;
        uint _2311 = (_2309 >> 8u) & 15u;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((4294967295u << _2311) & _2072) == 0u)
        {
            _2463 = _2294;
            _2465 = _2296;
            _2467 = _2298;
            _2469 = _2300;
            _2471 = _2302;
            _2473 = _2304;
        }
        else
        {
            float _2488 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
            float _2489 = _2488 * _2026;
            float _2490 = _2488 * _2027;
            float _2491 = _2488 * _2028;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2311 < ((_2309 >> 12u) & 15u))
            {
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2623 = _2294;
                float _2624 = _2296;
                float _2625 = _2298;
                float _2626 = _2300;
                float _2627 = _2302;
                float _2628 = _2304;
                uint _2629 = _2311;
                uint _2638;
                bool _2639;
                for (;;)
                {
                    _2638 = texelFetch(g_lightClassification, int((((_2066 << 5u) + (_2052 << 9u)) + (_2629 << 2u)) >> 2u)).x;
                    _2639 = _2638 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2639)
                    {
                        frontier_phi_62_pred = _2628;
                        frontier_phi_62_pred_1 = _2627;
                        frontier_phi_62_pred_2 = _2626;
                        frontier_phi_62_pred_3 = _2625;
                        frontier_phi_62_pred_4 = _2624;
                        frontier_phi_62_pred_5 = _2623;
                    }
                    else
                    {
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _2896 = _2623;
                        float _2897 = _2624;
                        float _2898 = _2625;
                        float _2899 = _2626;
                        float _2900 = _2627;
                        float _2901 = _2628;
                        uint _2902 = _2638;
                        uint _2903;
                        vec4 _2928;
                        float _2929;
                        vec4 _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        vec3 _2959;
                        vec2 _2968;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2913 = ((_2629 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2902));
                            _2903 = (_2902 + 4294967295u) & _2902;
                            uint _2915 = _2913 * 40u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2929 = _2928.w;
                            uint _2931 = (_2913 * 40u) + 4u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.x;
                            _2946 = _2944.y;
                            _2947 = _2944.z;
                            uint _2949 = (_2913 * 40u) + 8u;
                            _2959 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x));
                            uint _2961 = (_2913 * 40u) + 12u;
                            _2968 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x));
                            uint _2970 = (_2913 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2913 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2913 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2913 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2028, _3034.z, fma(_2027, _3034.y, _3034.x * _2026)) + _3034.w;
                            _3047 = !((fma(_2028, _3015.z, fma(_2027, _3015.y, _3015.x * _2026)) + _3015.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3047)
                            {
                                float _3073 = _2928.x - _2026;
                                float _3074 = _2928.y - _2027;
                                float _3075 = _2928.z - _2028;
                                float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                                float _3079 = inversesqrt(_3076);
                                float _3080 = _3079 * _3073;
                                float _3081 = _3079 * _3074;
                                float _3082 = _3079 * _3075;
                                float _3086 = 1.0 - (_3076 / (_2929 * _2929));
                                float _4071 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3091 = sqrt(_3076) * _2944.w;
                                float _3093 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                                float _3094 = _3093 * _3093;
                                float _3095 = 1.0 - _3094;
                                float _3097 = (_3095 * _3095) * _488;
                                float _3100 = ((_3095 * dot(vec3(_3080, _3081, _3082), vec3(_535, _538, _541))) + _3094) + _3097;
                                float _3105 = _3091 * _3091;
                                float _3110 = (fma(_2028, _2983.z, fma(_2027, _2983.y, _2983.x * _2026)) + _2983.w) / _3046;
                                float _3111 = (fma(_2028, _2999.z, fma(_2027, _2999.y, _2999.x * _2026)) + _2999.w) / _3046;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4087 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3087) / (((_3097 * 2.0) + 1.0) * ((_3105 * 0.699999988079071044921875) + 1.0)));
                                float _3118 = (-0.0) - _2489;
                                float _3119 = (-0.0) - _2490;
                                float _3120 = (-0.0) - _2491;
                                float _3121 = dot(vec3(_3080, _3081, _3082), vec3(_2489, _2490, _2491));
                                float _4098 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3128 = dot(vec3(_3118, _3119, _3120), vec3(_535, _538, _541)) + 1.0;
                                float _3130 = (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * 0.5;
                                float _3137 = ((_3130 * _3130) * _2968.x) * exp2((_2968.y * 32.0) * log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))));
                                float _3139 = _488 / (_488 + 1.0);
                                float _3160 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                                float _3161 = 1.0 - _603;
                                float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                                float _3169 = _3168 * _3168;
                                float _3170 = _3169 * _3169;
                                float _3171 = _3080 - _2489;
                                float _3172 = _3081 - _2490;
                                float _3173 = _3082 - _2491;
                                float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                                float _3181 = dot(vec3(_535, _538, _541), vec3(_3118, _3119, _3120));
                                float _4114 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3184 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3185 = dot(vec3(_535, _538, _541), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                                float _4125 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3188 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                                float _3193 = _3093 * _3169;
                                float _3194 = _3193 * _3193;
                                float _3200 = ((1.0 - _3194) * dot(vec3(_535, _538, _541), vec3(_3080, _3081, _3082))) + _3194;
                                float _4136 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3202 = 1.0 - _3169;
                                float _3212 = (0.5 / (((_3201 * ((_3184 * _3202) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3169) * _3184))) * _3201;
                                float _4147 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3222 = (_3116 * _3087) * (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) / ((_3192 * _3192) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_2947 * 0.3183098733425140380859375) * _3139) * _3137) + _2947) * _3117;
                                frontier_phi_68_pred_1 = ((((_2946 * 0.3183098733425140380859375) * _3139) * _3137) + _2946) * _3117;
                                frontier_phi_68_pred_2 = ((((_2945 * 0.3183098733425140380859375) * _3139) * _3137) + _2945) * _3117;
                                frontier_phi_68_pred_3 = _3222 * _2959.z;
                                frontier_phi_68_pred_4 = _3222 * _2959.y;
                                frontier_phi_68_pred_5 = _3222 * _2959.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3231 = frontier_phi_68_pred;
                            _3230 = frontier_phi_68_pred_1;
                            _3229 = frontier_phi_68_pred_2;
                            _3228 = frontier_phi_68_pred_3;
                            _3227 = frontier_phi_68_pred_4;
                            _3226 = frontier_phi_68_pred_5;
                            _2886 = _3229 + _2899;
                            _2887 = _3230 + _2900;
                            _2888 = _3231 + _2901;
                            _2883 = _3226 + _2896;
                            _2884 = _3227 + _2897;
                            _2885 = _3228 + _2898;
                            if (_2903 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2903;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2888;
                        frontier_phi_62_pred_1 = _2887;
                        frontier_phi_62_pred_2 = _2886;
                        frontier_phi_62_pred_3 = _2885;
                        frontier_phi_62_pred_4 = _2884;
                        frontier_phi_62_pred_5 = _2883;
                    }
                    _2474 = frontier_phi_62_pred;
                    _2472 = frontier_phi_62_pred_1;
                    _2470 = frontier_phi_62_pred_2;
                    _2468 = frontier_phi_62_pred_3;
                    _2466 = frontier_phi_62_pred_4;
                    _2464 = frontier_phi_62_pred_5;
                    uint _2630 = _2629 + 1u;
                    if (_2630 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2623 = _2464;
                        _2624 = _2466;
                        _2625 = _2468;
                        _2626 = _2470;
                        _2627 = _2472;
                        _2628 = _2474;
                        _2629 = _2630;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2474;
                frontier_phi_49_50_ladder_1 = _2470;
                frontier_phi_49_50_ladder_2 = _2472;
                frontier_phi_49_50_ladder_3 = _2468;
                frontier_phi_49_50_ladder_4 = _2466;
                frontier_phi_49_50_ladder_5 = _2464;
            }
            else
            {
                frontier_phi_49_50_ladder = _2304;
                frontier_phi_49_50_ladder_1 = _2300;
                frontier_phi_49_50_ladder_2 = _2302;
                frontier_phi_49_50_ladder_3 = _2298;
                frontier_phi_49_50_ladder_4 = _2296;
                frontier_phi_49_50_ladder_5 = _2294;
            }
            _2463 = frontier_phi_49_50_ladder_5;
            _2465 = frontier_phi_49_50_ladder_4;
            _2467 = frontier_phi_49_50_ladder_3;
            _2469 = frontier_phi_49_50_ladder_1;
            _2471 = frontier_phi_49_50_ladder_2;
            _2473 = frontier_phi_49_50_ladder;
        }
        float _2478 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
        _2085 = (_2478 * _2469) + _1783;
        _2087 = (_2478 * _2471) + _1784;
        _2089 = (_2478 * _2473) + _1785;
        _2091 = ((_2463 * 0.039999999105930328369140625) * _2478) + _1946;
        _2093 = ((_2465 * 0.039999999105930328369140625) * _2478) + _1947;
        _2095 = ((_2467 * 0.039999999105930328369140625) * _2478) + _1948;
    }
    else
    {
        _2085 = _1783;
        _2087 = _1784;
        _2089 = _1785;
        _2091 = _1946;
        _2093 = _1947;
        _2095 = _1948;
    }
    float _2109 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2110 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2111 = cbSceneParam._m0[86u].x * (_1623 + ((_602 * cbMtdParam._m0[13u].y) * dot(vec3(_484, _485, _486), vec3(_198, _199, _200))));
    float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
    float _2113 = isnan(_2110) ? _514 : (isnan(_514) ? _2110 : min(_514, _2110));
    vec4 _2115 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2112, _2113), 0.0);
    float _2117 = _2115.x;
    bool _2138 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2117)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2117))) > _507;
    float _2139 = _2138 ? _2112 : _513;
    float _2140 = _2138 ? _2113 : _514;
    vec4 _2142 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2139, _2140));
    vec4 _2147 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2139, _2140));
    float _2149 = _2147.x;
    float _2169 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2149)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2149))) - _507;
    bool _2179 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2183 = (isnan(_2169) ? 0.0 : (isnan(0.0) ? _2169 : max(0.0, _2169))) * (-1.44269502162933349609375);
    float _4178 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4189 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4200 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _2210 = 0.959999978542327880859375 - (exp2(log2(1.0 - _594) * 5.0) * 0.959999978542327880859375);
    float _2213 = ((_2142.x * _2210) * exp2(_2183 * (_2179 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2216 = ((_2142.y * _2210) * exp2(_2183 * (_2179 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2219 = ((_2142.z * _2210) * exp2(_2183 * (_2179 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2240 = _513 / cbSceneParam._m0[86u].x;
    float _2241 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2255 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, (log2((isnan(cbSceneParam._m0[77u].w) ? _507 : (isnan(_507) ? cbSceneParam._m0[77u].w : min(_507, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2257 = _2255.x;
    float _2258 = _2255.y;
    float _2259 = _2255.z;
    float _2260 = _2255.w;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_507 > cbSceneParam._m0[78u].w)
    {
        float _2319 = isnan(_507) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _507 : min(cbSceneParam._m0[80u].w, _507));
        float _2320 = _2319 / _507;
        float _2331 = _2320 * _268;
        float _2332 = _269 * _2320;
        float _2333 = (-0.0) - _2332;
        float _2334 = _2320 * _270;
        float _2336 = (cbSceneParam._m0[77u].w * _2333) / _2319;
        float _2337 = _2336 + cbSceneParam._m0[79u].w;
        float _2338 = cbSceneParam._m0[79u].w - _2332;
        float _2344 = sqrt(((_2331 * _2331) + (_2332 * _2332)) + (_2334 * _2334));
        float _2347 = (1.0 - (cbSceneParam._m0[77u].w / _2319)) * _2344;
        float _2352 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2353 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2585;
        if (abs((_2333 - _2336) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2585 = ((((_2337 > 0.0) ? exp2(_2352 * _2337) : (2.0 - exp2(_2353 * _2337))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2347;
        }
        else
        {
            float _2524 = 1.0 / cbSceneParam._m0[80u].x;
            float _2525 = isnan(_2338) ? _2337 : (isnan(_2337) ? _2338 : max(_2337, _2338));
            float _2526 = isnan(_2338) ? _2337 : (isnan(_2337) ? _2338 : min(_2337, _2338));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            _2585 = ((abs(_2344 / _2333) * cbSceneParam._m0[80u].y) * ((((_2535 - _2536) * 2.0) - ((exp2(_2352 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)))) - exp2(_2352 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))))) * _2524)) - ((exp2(_2353 * _2535) - exp2(_2353 * _2536)) * _2524))) + (_2347 * cbSceneParam._m0[80u].z);
        }
        vec4 _2587 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, 1.0), 0.0);
        float _2596 = exp2((_2585 * (-1.44269502162933349609375)) * (1.0 - _2587.w));
        float _2597 = log2(_2596);
        float _2613 = log2(_2260);
        _2355 = (exp2(_2613 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2597 * cbSceneParam._m0[78u].x)) * _2587.x) / cbSceneParam._m0[78u].x)) + _2257;
        _2357 = (exp2(_2613 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2597 * cbSceneParam._m0[78u].y)) * _2587.y) / cbSceneParam._m0[78u].y)) + _2258;
        _2359 = (exp2(_2613 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2597 * cbSceneParam._m0[78u].z)) * _2587.z) / cbSceneParam._m0[78u].z)) + _2259;
        _2361 = _2596 * _2260;
    }
    else
    {
        _2355 = _2257;
        _2357 = _2258;
        _2359 = _2259;
        _2361 = _2260;
    }
    bool _2373 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2374 = log2(_2361);
    float _2381 = exp2(_2374 * cbSceneParam._m0[78u].x) * ((_2213 + (((((_1600 * _1648.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1393) * _1664)) + _2091) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2085 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _579))) - _2213) * cbMtdParam._m0[15u].x));
    float _2382 = exp2(_2374 * cbSceneParam._m0[78u].y) * ((_2216 + (((((_1600 * _1648.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1393) * _1664)) + _2093) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2087 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _579))) - _2216) * cbMtdParam._m0[15u].x));
    float _2383 = exp2(_2374 * cbSceneParam._m0[78u].z) * ((_2219 + (((((_1600 * _1648.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1393) * _1664)) + _2095) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2089 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _579))) - _2219) * cbMtdParam._m0[15u].x));
    vec4 _2391 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_513, _514));
    float _2393 = _2391.x;
    float _2414 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2393)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2393))) - _507) * cbMtdParam._m0[14u].z;
    float _4251 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * cbInstanceData._m0[_554 + 6u].w;
    float _2425 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2425 * (_2373 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.y = _2425 * (_2373 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2357)));
    SV_Target.z = _2425 * (_2373 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2359)));
    SV_Target.w = _2416;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2416;
}


