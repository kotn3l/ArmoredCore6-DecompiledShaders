#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1003;
float _3454;
float _3455;
float _3456;
float _3457;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _202 = _201 * _193;
    float _203 = _201 * _194;
    float _204 = _201 * _195;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _282 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _283 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _294 = dot(vec3(_272, _273, _274), vec3(_202, _203, _204));
    float _297 = dot(vec3(_272, _273, _274), vec3(_216, _217, _218));
    float _300 = dot(vec3(_272, _273, _274), vec3(_209, _210, _211));
    float _306 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _330 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _350 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_294 * cbMtdParam._m0[12u].x) * _306) * _330) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_297 * cbMtdParam._m0[12u].x) * _306) * _330) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _373 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _374 = _373 * _272;
    float _375 = _373 * _273;
    float _376 = _373 * _274;
    float _380 = dot(vec4(_374, _375, _376, 0.0), vec4(_209, _210, _211, 0.0)) - cbMtdParam._m0[12u].w;
    float _3466 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _387 = exp2(log2(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _402 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _350.x) * cbMtdParam._m0[9u].x) * ((_387 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _406 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _350.y) * cbMtdParam._m0[9u].y) * ((_387 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _410 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _350.z) * cbMtdParam._m0[9u].z) * ((_387 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _423 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    float _431 = (_423.x * 2.0) + (-1.0);
    float _432 = (_423.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_431, _432), vec2(_431, _432));
    float _3482 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))));
    float _443 = cbMtdParam._m0[14u].w + _423.z;
    vec4 _455 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _282) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _283) + cbTextureTilingScale._m0[0u].w));
    float _459 = cbMtdParam._m0[13u].w * _455.x;
    float _477 = fma(_438, _209, fma(_432, _216, _431 * _202));
    float _480 = fma(_438, _210, fma(_432, _217, _431 * _203));
    float _483 = fma(_438, _211, fma(_432, _218, _431 * _204));
    float _487 = inversesqrt(dot(vec3(_477, _480, _483), vec3(_477, _480, _483)));
    float _488 = _487 * _477;
    float _489 = _487 * _480;
    float _490 = _487 * _483;
    float _3493 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _491 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _492 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3509 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3520 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3531 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _511 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _516 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _518 = _516.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _682 = sqrt(((_272 * _272) + (_273 * _273)) + (_274 * _274));
        float _688 = (cbMatDynParam._m0[5u].x * _682) + cbMatDynParam._m0[5u].y;
        float _3542 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _693 = (cbMatDynParam._m0[5u].z * _682) + cbMatDynParam._m0[5u].w;
        float _3553 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) - _689)) + _689) < ((_518 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _551 = fma(_490, cbSceneParam._m0[5u].z, fma(_489, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _488));
    float _554 = fma(_490, cbSceneParam._m0[6u].z, fma(_489, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _488));
    float _557 = fma(_490, cbSceneParam._m0[7u].z, fma(_489, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _488));
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _571 = _570 + 9u;
    uint _572 = _571 + uint(cbMatDynParam._m0[0u].w);
    float _578 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_572].x;
    float _579 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_572].y;
    float _580 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_572].z;
    float _3564 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    vec4 _592 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _595 = _592.x * TEXCOORD_1.w;
    float _596 = dot(vec3(_488, _489, _490), vec3(_374, _375, _376));
    float _599 = _596 * 2.0;
    float _603 = (_599 * _488) - _374;
    float _604 = (_599 * _489) - _375;
    float _605 = (_599 * _490) - _376;
    float _609 = abs(dot(vec3(_374, _375, _376), vec3(_488, _489, _490)));
    float _3597 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _618 = 10.0 / (_511 + 10.0);
    float _619 = sqrt(_491);
    float _631 = exp2((_619 * 5.0) * log2(1.0 - (_610 * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1002;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _727 = fma(_671, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663));
        float _731 = fma(_671, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663));
        float _735 = fma(_671, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663));
        float _760 = _663 + _488;
        float _761 = _667 + _489;
        float _762 = _671 + _490;
        float _772 = fma(_762, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760)) - _727;
        float _773 = fma(_762, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760)) - _731;
        float _774 = fma(_762, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760)) - _735;
        float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
        float _791 = ((_778 * _772) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_727 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_778 * _773) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_731 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_778 * _774) / cbModelParam._m0[34u].z) + ((((((_735 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        float _830 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_796.x + (-0.5));
        float _832 = _830 * (_796.y + (-0.5));
        float _833 = _830 * (_796.z + (-0.5));
        float _840 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_803.x + (-0.5));
        float _842 = _840 * (_803.y + (-0.5));
        float _843 = _840 * (_803.z + (-0.5));
        float _850 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_810.x + (-0.5));
        float _852 = _850 * (_810.y + (-0.5));
        float _853 = _850 * (_810.z + (-0.5));
        float _860 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_817.x + (-0.5));
        float _862 = _860 * (_817.y + (-0.5));
        float _863 = _860 * (_817.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _884 = (dot(vec3(_488, _489, _490), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _894 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3645 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_896 + 1.0))) + _901) * _864;
        float _911 = _832 * 0.5;
        float _912 = _842 * 0.5;
        float _913 = _852 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_488, _489, _490), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3678 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_938 + 1.0))) + _943) * _865;
        float _953 = _833 * 0.5;
        float _954 = _843 * 0.5;
        float _955 = _853 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_488, _489, _490), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3711 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_980 + 1.0))) + _985) * _866;
        _1002 = _833;
        _1004 = _832;
        _1005 = _831;
        _1006 = _843;
        _1007 = _842;
        _1008 = _841;
        _1009 = _853;
        _1010 = _852;
        _1011 = _851;
        _1012 = _866;
        _1013 = _865;
        _1014 = _864;
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _1003;
        _1004 = _1003;
        _1005 = _1003;
        _1006 = _1003;
        _1007 = _1003;
        _1008 = _1003;
        _1009 = _1003;
        _1010 = _1003;
        _1011 = _1003;
        _1012 = _1003;
        _1013 = _1003;
        _1014 = _1003;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1046 = fma(_671, cbModelParam._m0[30u].z, fma(_667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _663));
        float _1050 = fma(_671, cbModelParam._m0[31u].z, fma(_667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _663));
        float _1054 = fma(_671, cbModelParam._m0[32u].z, fma(_667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _663));
        float _1077 = _663 + _488;
        float _1078 = _667 + _489;
        float _1079 = _671 + _490;
        float _1089 = fma(_1079, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077)) - _1046;
        float _1090 = fma(_1079, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077)) - _1050;
        float _1091 = fma(_1079, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077)) - _1054;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1046 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1050 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[35u].z) + ((((((_1054 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1145 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1112.x + (-0.5));
        float _1147 = _1145 * (_1112.y + (-0.5));
        float _1148 = _1145 * (_1112.z + (-0.5));
        float _1155 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1119.x + (-0.5));
        float _1157 = _1155 * (_1119.y + (-0.5));
        float _1158 = _1155 * (_1119.z + (-0.5));
        float _1165 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1126.x + (-0.5));
        float _1167 = _1165 * (_1126.y + (-0.5));
        float _1168 = _1165 * (_1126.z + (-0.5));
        float _1175 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1133.x + (-0.5));
        float _1177 = _1175 * (_1133.y + (-0.5));
        float _1178 = _1175 * (_1133.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_488, _489, _490), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3774 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1209 + 1.0))) + _1214) * _1179;
        float _1224 = _1147 * 0.5;
        float _1225 = _1157 * 0.5;
        float _1226 = _1167 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_488, _489, _490), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3807 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1251 + 1.0))) + _1256) * _1180;
        float _1266 = _1148 * 0.5;
        float _1267 = _1158 * 0.5;
        float _1268 = _1168 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_488, _489, _490), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3840 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1293 + 1.0))) + _1298) * _1181;
        _1315 = _1148;
        _1316 = _1147;
        _1317 = _1146;
        _1318 = _1158;
        _1319 = _1157;
        _1320 = _1156;
        _1321 = _1168;
        _1322 = _1167;
        _1323 = _1166;
        _1324 = _1181;
        _1325 = _1180;
        _1326 = _1179;
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1003;
        _1316 = _1003;
        _1317 = _1003;
        _1318 = _1003;
        _1319 = _1003;
        _1320 = _1003;
        _1321 = _1003;
        _1322 = _1003;
        _1323 = _1003;
        _1324 = _1003;
        _1325 = _1003;
        _1326 = _1003;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1362 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1339));
    float _1383 = _603 * 0.5;
    float _1384 = _604 * 0.5;
    float _1385 = _605 * 0.5;
    float _1386 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1389 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1392 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1426;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1399 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1002, _1006, _1009, _1012));
        float _1403 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1407 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1414 = dot(vec4(cbModelParam._m0[39u]), vec4(_1383, _1384, _1385, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1437;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1428 = dot(vec4(cbModelParam._m0[40u]), vec4(_1383, _1384, _1385, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1441 = (_1437 * cbModelParam._m0[1u].x) + (_1426 * (1.0 - cbModelParam._m0[1u].x));
    float _1451 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _491);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1451 : min(cbModelParam._m0[25u].z, _1451));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_671, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_671, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_671, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_605, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603));
        float _1513 = fma(_605, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603));
        float _1516 = fma(_605, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1544 = frontier_phi_17_15_ladder;
        }
        float _1767;
        if (_1513 > 0.0)
        {
            _1767 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1767 = frontier_phi_26_22_ladder;
        }
        float _2002;
        if (_1516 > 0.0)
        {
            _2002 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2002 = frontier_phi_37_33_ladder;
        }
        float _2004 = isnan(_1767) ? _1544 : (isnan(_1544) ? _1767 : min(_1544, _1767));
        float _2005 = isnan(_2002) ? _2004 : (isnan(_2004) ? _2002 : min(_2004, _2002));
        float _2009 = (_2005 * _1510) + _1499;
        float _2010 = (_2005 * _1513) + _1503;
        float _2011 = (_2005 * _1516) + _1507;
        float _2012 = _2005 * 9.9999997473787516355514526367188e-05;
        float _2014 = (-1.0) - _2012;
        float _2016 = _2012 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2011 > _2016) || ((_2011 < _2014) || ((_2010 > _2016) || ((_2010 < _2014) || ((_2009 < _2014) || (_2009 > _2016))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2011, cbModelParam._m0[9u].z, fma(_2010, cbModelParam._m0[9u].y, _2009 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2011, cbModelParam._m0[10u].z, fma(_2010, cbModelParam._m0[10u].y, _2009 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2011, cbModelParam._m0[11u].z, fma(_2010, cbModelParam._m0[11u].y, _2009 * cbModelParam._m0[11u].x))), _1452);
            frontier_phi_16_37_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_16_37_ladder_2;
        _1534 = frontier_phi_16_37_ladder_1;
        _1536 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_603, _604, _605), _1452);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _491);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1596 = fma(_671, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663)) + cbModelParam._m0[21u].w;
        float _1600 = fma(_671, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663)) + cbModelParam._m0[22u].w;
        float _1604 = fma(_671, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663)) + cbModelParam._m0[23u].w;
        float _1607 = fma(_605, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603));
        float _1610 = fma(_605, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603));
        float _1613 = fma(_605, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603));
        float _1772;
        if (_1607 > 0.0)
        {
            _1772 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2029;
        if (_1610 > 0.0)
        {
            _2029 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2029 = frontier_phi_39_35_ladder;
        }
        float _2493;
        if (_1613 > 0.0)
        {
            _2493 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2493 = frontier_phi_50_45_ladder;
        }
        float _2495 = isnan(_2029) ? _1772 : (isnan(_1772) ? _2029 : min(_1772, _2029));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1607) + _1596;
        float _2501 = (_2496 * _1610) + _1600;
        float _2502 = (_2496 * _1613) + _1604;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2503;
        float _2506 = _2503 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2502 > _2506) || ((_2502 < _2504) || ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 < _2504) || (_2500 > _2506))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2502, cbModelParam._m0[17u].z, fma(_2501, cbModelParam._m0[17u].y, _2500 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2502, cbModelParam._m0[18u].z, fma(_2501, cbModelParam._m0[18u].y, _2500 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2502, cbModelParam._m0[19u].z, fma(_2501, cbModelParam._m0[19u].y, _2500 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_25_50_ladder = _2639.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2639.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2639.x * cbModelParam._m0[1u].z;
        }
        _1632 = frontier_phi_25_50_ladder_2;
        _1634 = frontier_phi_25_50_ladder_1;
        _1636 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_603, _604, _605), _1541);
        _1632 = _1616.x * cbModelParam._m0[1u].z;
        _1634 = _1616.y * cbModelParam._m0[1u].z;
        _1636 = _1616.z * cbModelParam._m0[1u].z;
    }
    float _1648 = ((((1.0 - _631) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_631 * _619)) * _595;
    float _1649 = _1648 * ((cbModelParam._m0[1u].w * (_1632 - _1532)) + _1532);
    float _1650 = _1648 * ((cbModelParam._m0[1u].w * (_1634 - _1534)) + _1534);
    float _1651 = _1648 * ((cbModelParam._m0[1u].w * (_1636 - _1536)) + _1536);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1649 * cbSceneParam._m0[91u].x));
    float _1671 = _530 / cbSceneParam._m0[86u].x;
    float _1679 = (cbSceneParam._m0[88u].y * (1.0 - _491)) + cbSceneParam._m0[88u].z;
    float _3966 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1681 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 5.0;
    float _1686 = (_618 * cbMtdParam._m0[13u].z) * dot(vec3(_488, _489, _490), vec3(1.0, 0.0, 0.0));
    vec4 _1696 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1686 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1686 + _1671) * cbSceneParam._m0[86u].x, _531), _1681).w) + _1671) * cbSceneParam._m0[86u].x, _531), _1681);
    float _1712 = 1.0 - _1696.w;
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1730 = _595 + (-1.0);
    float _1733 = (cbLight._m0[_1725].x * _1730) + 1.0;
    float _1734 = (cbLight._m0[_1725].y * _1730) + 1.0;
    uint _1736 = _1724 + 4u;
    float _1747 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_488, _489, _490));
    float _1750 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1751 = _1724 + 5u;
    uint _1757 = _1724 | 1u;
    float _1763 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_488, _489, _490));
    float _1766 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    float _1831;
    float _1832;
    float _1833;
    if (_492 == 0.0)
    {
        float _3987 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _3998 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1785 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
        float _1787 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
        _1831 = ((cbLight._m0[_1751].x * _1766) * _1787) + ((cbLight._m0[_1736].x * _1750) * _1785);
        _1832 = ((_1766 * cbLight._m0[_1751].y) * _1787) + ((_1750 * cbLight._m0[_1736].y) * _1785);
        _1833 = ((_1766 * cbLight._m0[_1751].z) * _1787) + ((_1750 * cbLight._m0[_1736].z) * _1785);
    }
    else
    {
        float _1797 = _1747 + _492;
        float _1800 = (_492 * 2.0) + 1.0;
        float _1801 = (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) / _1800;
        float _1808 = _1763 + _492;
        float _1810 = (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) / _1800;
        _1831 = (((_1810 * cbLight._m0[_1751].x) * _1766) + ((_1801 * cbLight._m0[_1736].x) * _1750)) * 0.3183098733425140380859375;
        _1832 = (((_1810 * cbLight._m0[_1751].y) * _1766) + ((_1801 * cbLight._m0[_1736].y) * _1750)) * 0.3183098733425140380859375;
        _1833 = (((_1810 * cbLight._m0[_1751].z) * _1766) + ((_1801 * cbLight._m0[_1736].z) * _1750)) * 0.3183098733425140380859375;
    }
    uint _1837 = _1724 + 8u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _491) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1724].x + _374;
    float _1856 = cbLight._m0[_1724].y + _375;
    float _1857 = cbLight._m0[_1724].z + _376;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_488, _489, _490), vec3(cbLight._m0[_1724].xyz));
    float _4019 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _1869 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1870 = dot(vec3(_488, _489, _490), vec3(_1862, _1863, _1864));
    float _4041 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1862, _1863, _1864));
    float _4052 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1854 * _1854;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1894 = 1.0 - _1854;
    float _1905 = (0.5 / (((_1869 * ((_1868 * _1894) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1894) + _1854) * _1868))) * _1868;
    float _4063 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    uint _1920 = _1724 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _491) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1757].x + _374;
    float _1937 = cbLight._m0[_1757].y + _375;
    float _1938 = cbLight._m0[_1757].z + _376;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_488, _489, _490), vec3(cbLight._m0[_1757].xyz));
    float _4074 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1950 = dot(vec3(_488, _489, _490), vec3(_1943, _1944, _1945));
    float _4085 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1943, _1944, _1945));
    float _4096 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1971 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1972 = 1.0 - _1935;
    float _1982 = (0.5 / (((_1869 * ((_1949 * _1972) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1972) + _1935) * _1949))) * _1949;
    float _4107 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1984 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1994 = (((_1971 * cbLight._m0[_1920].x) * _1984) * _1766) + (((_1893 * cbLight._m0[_1837].x) * _1907) * _1750);
    float _1995 = (((_1971 * cbLight._m0[_1920].y) * _1984) * _1766) + (((_1893 * cbLight._m0[_1837].y) * _1907) * _1750);
    float _1996 = (((_1971 * cbLight._m0[_1920].z) * _1984) * _1766) + (((_1893 * cbLight._m0[_1837].z) * _1907) * _1750);
    float _2133;
    float _2135;
    float _2137;
    float _2139;
    float _2141;
    float _2143;
    if (_1722.y == 0u)
    {
        float _2073 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2073;
        float _2075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2073;
        float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2073;
        uvec4 _2088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2089 = _2088.x;
        uint _2100 = uint((float(_2088.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _2089))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _2089)));
        float _2110 = (log2(_2076 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2111 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        uint _2114 = uint(isnan(14.0) ? _2111 : (isnan(_2111) ? 14.0 : min(_2111, 14.0)));
        uvec4 _2119 = texelFetch(g_lightClusterGridBuffer, int(((_2114 << 2u) + (_2100 << 6u)) >> 2u));
        uint _2120 = _2119.x;
        uint _2121 = _2088.z;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        if (((((1u << ((_2121 >> 4u) & 15u)) + 4294967295u) & _2120) == 0u) || ((_2121 & 240u) == 0u))
        {
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
        }
        else
        {
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2114 << 5u) + (_2100 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2567)
                {
                    frontier_phi_61_pred = _2552;
                    frontier_phi_61_pred_1 = _2556;
                    frontier_phi_61_pred_2 = _2555;
                    frontier_phi_61_pred_3 = _2554;
                    frontier_phi_61_pred_4 = _2553;
                    frontier_phi_61_pred_5 = _2551;
                }
                else
                {
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    uint _2723;
                    _2717 = _2551;
                    _2718 = _2552;
                    _2719 = _2553;
                    _2720 = _2554;
                    _2721 = _2555;
                    _2722 = _2556;
                    _2723 = _2566;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    for (;;)
                    {
                        uint _2727 = uint(findLSB(_2723)) + (_2557 << 5u);
                        uint _2724 = (_2723 + 4294967295u) & _2723;
                        uint _2729 = _2727 * 48u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2749 = (_2727 * 48u) + 4u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        float _2763 = _2762.x;
                        float _2764 = _2762.y;
                        float _2765 = _2762.z;
                        uint _2768 = (_2727 * 48u) + 8u;
                        vec3 _2779 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x));
                        uint _2784 = (_2727 * 48u) + 12u;
                        vec2 _2792 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x));
                        float _2798 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
                        float _2799 = _2798 * _2074;
                        float _2800 = _2798 * _2075;
                        float _2801 = _2798 * _2076;
                        float _2802 = _2743.x - _2074;
                        float _2803 = _2743.y - _2075;
                        float _2804 = _2743.z - _2076;
                        float _2805 = dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804));
                        float _2808 = inversesqrt(_2805);
                        float _2809 = _2808 * _2802;
                        float _2810 = _2808 * _2803;
                        float _2811 = _2808 * _2804;
                        float _2812 = dot(vec3(_551, _554, _557), vec3(_2809, _2810, _2811));
                        float _2817 = 1.0 - (_2805 * _2743.w);
                        float _4128 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2819 = sqrt(_2805) * _2762.w;
                        float _2822 = 1.39999997615814208984375 / (_2819 + 1.39999997615814208984375);
                        float _2823 = _2822 * _2822;
                        float _2824 = 1.0 - _2823;
                        float _2826 = (_2824 * _2824) * _492;
                        float _2829 = ((_2824 * _2812) + _2823) + _2826;
                        float _2834 = _2819 * _2819;
                        float _2839 = ((isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))) * _2818) / (((_2826 * 2.0) + 1.0) * ((_2834 * 0.699999988079071044921875) + 1.0));
                        float _2843 = dot(vec3(_2809, _2810, _2811), vec3(_2799, _2800, _2801));
                        float _4144 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2850 = dot(vec3((-0.0) - _2799, (-0.0) - _2800, (-0.0) - _2801), vec3(_551, _554, _557)) + 1.0;
                        float _2852 = (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * 0.5;
                        float _2860 = ((_2852 * _2852) * _2792.x) * exp2((_2792.y * 32.0) * log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))));
                        float _2862 = _492 / (_492 + 1.0);
                        float _2878 = (-0.0) - _2074;
                        float _2879 = (-0.0) - _2075;
                        float _2880 = (-0.0) - _2076;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2895 = exp2(log2(1.0 / ((_2834 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _619;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2885 + _2809;
                        float _2907 = _2886 + _2810;
                        float _2908 = _2887 + _2811;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_551, _554, _557), vec3(_2885, _2886, _2887));
                        float _4160 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2920 = dot(vec3(_551, _554, _557), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4171 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2822 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2812) + _2929;
                        float _4182 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4193 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_2927 * _2927) * ((_2834 * 2.1991131305694580078125) + 3.141590118408203125))) * _2818;
                        _2647 = (((((_2763 * 0.3183098733425140380859375) * _2862) * _2860) + _2763) * _2839) + _2720;
                        _2648 = (((((_2764 * 0.3183098733425140380859375) * _2862) * _2860) + _2764) * _2839) + _2721;
                        _2649 = (((((_2765 * 0.3183098733425140380859375) * _2862) * _2860) + _2765) * _2839) + _2722;
                        _2644 = (_2955 * _2779.x) + _2717;
                        _2645 = (_2955 * _2779.y) + _2718;
                        _2646 = (_2955 * _2779.z) + _2719;
                        if (_2724 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2724;
                        }
                    }
                    frontier_phi_61_pred = _2645;
                    frontier_phi_61_pred_1 = _2649;
                    frontier_phi_61_pred_2 = _2648;
                    frontier_phi_61_pred_3 = _2647;
                    frontier_phi_61_pred_4 = _2646;
                    frontier_phi_61_pred_5 = _2644;
                }
                _2345 = frontier_phi_61_pred;
                _2353 = frontier_phi_61_pred_1;
                _2351 = frontier_phi_61_pred_2;
                _2349 = frontier_phi_61_pred_3;
                _2347 = frontier_phi_61_pred_4;
                _2343 = frontier_phi_61_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2343;
                    _2552 = _2345;
                    _2553 = _2347;
                    _2554 = _2349;
                    _2555 = _2351;
                    _2556 = _2353;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
        }
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.z;
        uint _2359 = (_2357 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2359) & _2120) == 0u)
        {
            _2519 = _2342;
            _2521 = _2344;
            _2523 = _2346;
            _2525 = _2348;
            _2527 = _2350;
            _2529 = _2352;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
            float _2545 = _2544 * _2074;
            float _2546 = _2544 * _2075;
            float _2547 = _2544 * _2076;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2359 < ((_2357 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2700 = _2342;
                float _2701 = _2344;
                float _2702 = _2346;
                float _2703 = _2348;
                float _2704 = _2350;
                float _2705 = _2352;
                uint _2706 = _2359;
                uint _2715;
                bool _2716;
                for (;;)
                {
                    _2715 = texelFetch(g_lightClassification, int((((_2114 << 5u) + (_2100 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                    _2716 = _2715 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2716)
                    {
                        frontier_phi_72_pred = _2705;
                        frontier_phi_72_pred_1 = _2704;
                        frontier_phi_72_pred_2 = _2703;
                        frontier_phi_72_pred_3 = _2702;
                        frontier_phi_72_pred_4 = _2701;
                        frontier_phi_72_pred_5 = _2700;
                    }
                    else
                    {
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _2982 = _2700;
                        float _2983 = _2701;
                        float _2984 = _2702;
                        float _2985 = _2703;
                        float _2986 = _2704;
                        float _2987 = _2705;
                        uint _2988 = _2715;
                        uint _2989;
                        vec4 _3014;
                        float _3015;
                        vec4 _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        vec3 _3045;
                        vec2 _3054;
                        vec4 _3069;
                        vec4 _3085;
                        float _3132;
                        bool _3133;
                        for (;;)
                        {
                            uint _2999 = ((_2706 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2988));
                            _2989 = (_2988 + 4294967295u) & _2988;
                            uint _3001 = _2999 * 40u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3015 = _3014.w;
                            uint _3017 = (_2999 * 40u) + 4u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.x;
                            _3032 = _3030.y;
                            _3033 = _3030.z;
                            uint _3035 = (_2999 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3047 = (_2999 * 40u) + 12u;
                            _3054 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x));
                            uint _3056 = (_2999 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_2999 * 40u) + 20u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3088 = (_2999 * 40u) + 24u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3107 = (_2999 * 40u) + 28u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3132 = fma(_2076, _3120.z, fma(_2075, _3120.y, _3120.x * _2074)) + _3120.w;
                            _3133 = !((fma(_2076, _3101.z, fma(_2075, _3101.y, _3101.x * _2074)) + _3101.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3133)
                            {
                                float _3159 = _3014.x - _2074;
                                float _3160 = _3014.y - _2075;
                                float _3161 = _3014.z - _2076;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3015 * _3015));
                                float _4204 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3177 = sqrt(_3162) * _3030.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3181 = 1.0 - _3180;
                                float _3183 = (_3181 * _3181) * _492;
                                float _3186 = ((_3181 * dot(vec3(_3166, _3167, _3168), vec3(_551, _554, _557))) + _3180) + _3183;
                                float _3191 = _3177 * _3177;
                                float _3196 = (fma(_2076, _3069.z, fma(_2075, _3069.y, _3069.x * _2074)) + _3069.w) / _3132;
                                float _3197 = (fma(_2076, _3085.z, fma(_2075, _3085.y, _3085.x * _2074)) + _3085.w) / _3132;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4220 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3173) / (((_3183 * 2.0) + 1.0) * ((_3191 * 0.699999988079071044921875) + 1.0)));
                                float _3204 = (-0.0) - _2545;
                                float _3205 = (-0.0) - _2546;
                                float _3206 = (-0.0) - _2547;
                                float _3207 = dot(vec3(_3166, _3167, _3168), vec3(_2545, _2546, _2547));
                                float _4231 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3214 = dot(vec3(_3204, _3205, _3206), vec3(_551, _554, _557)) + 1.0;
                                float _3216 = (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * 0.5;
                                float _3223 = ((_3216 * _3216) * _3054.x) * exp2((_3054.y * 32.0) * log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))));
                                float _3225 = _492 / (_492 + 1.0);
                                float _3246 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                                float _3247 = 1.0 - _619;
                                float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                                float _3255 = _3254 * _3254;
                                float _3256 = _3255 * _3255;
                                float _3257 = _3166 - _2545;
                                float _3258 = _3167 - _2546;
                                float _3259 = _3168 - _2547;
                                float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                                float _3267 = dot(vec3(_551, _554, _557), vec3(_3204, _3205, _3206));
                                float _4247 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3271 = dot(vec3(_551, _554, _557), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                                float _4258 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                                float _3279 = _3179 * _3255;
                                float _3280 = _3279 * _3279;
                                float _3286 = ((1.0 - _3280) * dot(vec3(_551, _554, _557), vec3(_3166, _3167, _3168))) + _3280;
                                float _4269 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3288 = 1.0 - _3255;
                                float _3298 = (0.5 / (((_3287 * ((_3270 * _3288) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3255) * _3270))) * _3287;
                                float _4280 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3308 = (_3202 * _3173) * (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_3278 * _3278) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3031 * 0.3183098733425140380859375) * _3225) * _3223) + _3031) * _3203;
                                frontier_phi_78_pred_1 = ((((_3033 * 0.3183098733425140380859375) * _3225) * _3223) + _3033) * _3203;
                                frontier_phi_78_pred_2 = ((((_3032 * 0.3183098733425140380859375) * _3225) * _3223) + _3032) * _3203;
                                frontier_phi_78_pred_3 = _3308 * _3045.z;
                                frontier_phi_78_pred_4 = _3308 * _3045.y;
                                frontier_phi_78_pred_5 = _3308 * _3045.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_78_pred;
                            _3317 = frontier_phi_78_pred_1;
                            _3316 = frontier_phi_78_pred_2;
                            _3314 = frontier_phi_78_pred_3;
                            _3313 = frontier_phi_78_pred_4;
                            _3312 = frontier_phi_78_pred_5;
                            _2972 = _3315 + _2985;
                            _2973 = _3316 + _2986;
                            _2974 = _3317 + _2987;
                            _2969 = _3312 + _2982;
                            _2970 = _3313 + _2983;
                            _2971 = _3314 + _2984;
                            if (_2989 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2989;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2974;
                        frontier_phi_72_pred_1 = _2973;
                        frontier_phi_72_pred_2 = _2972;
                        frontier_phi_72_pred_3 = _2971;
                        frontier_phi_72_pred_4 = _2970;
                        frontier_phi_72_pred_5 = _2969;
                    }
                    _2530 = frontier_phi_72_pred;
                    _2528 = frontier_phi_72_pred_1;
                    _2526 = frontier_phi_72_pred_2;
                    _2524 = frontier_phi_72_pred_3;
                    _2522 = frontier_phi_72_pred_4;
                    _2520 = frontier_phi_72_pred_5;
                    uint _2707 = _2706 + 1u;
                    if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2700 = _2520;
                        _2701 = _2522;
                        _2702 = _2524;
                        _2703 = _2526;
                        _2704 = _2528;
                        _2705 = _2530;
                        _2706 = _2707;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2530;
                frontier_phi_52_53_ladder_1 = _2522;
                frontier_phi_52_53_ladder_2 = _2528;
                frontier_phi_52_53_ladder_3 = _2526;
                frontier_phi_52_53_ladder_4 = _2524;
                frontier_phi_52_53_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_52_53_ladder = _2352;
                frontier_phi_52_53_ladder_1 = _2344;
                frontier_phi_52_53_ladder_2 = _2350;
                frontier_phi_52_53_ladder_3 = _2348;
                frontier_phi_52_53_ladder_4 = _2346;
                frontier_phi_52_53_ladder_5 = _2342;
            }
            _2519 = frontier_phi_52_53_ladder_5;
            _2521 = frontier_phi_52_53_ladder_1;
            _2523 = frontier_phi_52_53_ladder_4;
            _2525 = frontier_phi_52_53_ladder_3;
            _2527 = frontier_phi_52_53_ladder_2;
            _2529 = frontier_phi_52_53_ladder;
        }
        float _2534 = isnan(1.0) ? _595 : (isnan(_595) ? 1.0 : min(_595, 1.0));
        _2133 = (_2534 * _2525) + _1831;
        _2135 = (_2534 * _2527) + _1832;
        _2137 = (_2534 * _2529) + _1833;
        _2139 = ((_2519 * 0.039999999105930328369140625) * _2534) + _1994;
        _2141 = ((_2521 * 0.039999999105930328369140625) * _2534) + _1995;
        _2143 = ((_2523 * 0.039999999105930328369140625) * _2534) + _1996;
    }
    else
    {
        _2133 = _1831;
        _2135 = _1832;
        _2137 = _1833;
        _2139 = _1994;
        _2141 = _1995;
        _2143 = _1996;
    }
    float _2157 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2158 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2159 = cbSceneParam._m0[86u].x * (_1671 + ((_618 * cbMtdParam._m0[13u].y) * dot(vec3(_488, _489, _490), vec3(_202, _203, _204))));
    float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
    float _2161 = isnan(_2158) ? _531 : (isnan(_531) ? _2158 : min(_531, _2158));
    vec4 _2163 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2160, _2161), 0.0);
    float _2165 = _2163.x;
    bool _2186 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2165)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2165))) > _511;
    float _2187 = _2186 ? _2160 : _530;
    float _2188 = _2186 ? _2161 : _531;
    vec4 _2190 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2187, _2188));
    vec4 _2195 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2187, _2188));
    float _2197 = _2195.x;
    float _2217 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2197)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2197))) - _511;
    bool _2227 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2231 = (isnan(_2217) ? 0.0 : (isnan(0.0) ? _2217 : max(0.0, _2217))) * (-1.44269502162933349609375);
    float _4311 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4322 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4333 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2258 = 0.959999978542327880859375 - (exp2(log2(1.0 - _610) * 5.0) * 0.959999978542327880859375);
    float _2261 = ((_2190.x * _2258) * exp2(_2231 * (_2227 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2264 = ((_2190.y * _2258) * exp2(_2231 * (_2227 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2267 = ((_2190.z * _2258) * exp2(_2231 * (_2227 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2275 = (_2261 + (((((_1648 * _1696.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1441) * _1712)) + _2139) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2133 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _595))) - _2261) * cbMtdParam._m0[15u].x);
    float _2277 = (_2264 + (((((_1648 * _1696.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1441) * _1712)) + _2141) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2135 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _595))) - _2264) * cbMtdParam._m0[15u].x);
    float _2279 = (_2267 + (((((_1648 * _1696.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1441) * _1712)) + _2143) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2137 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _595))) - _2267) * cbMtdParam._m0[15u].x);
    uint _2280 = _570 + 6u;
    float _2288 = _530 / cbSceneParam._m0[86u].x;
    float _2289 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2303 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, (log2((isnan(cbSceneParam._m0[77u].w) ? _511 : (isnan(_511) ? cbSceneParam._m0[77u].w : min(_511, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2305 = _2303.x;
    float _2306 = _2303.y;
    float _2307 = _2303.z;
    float _2308 = _2303.w;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_511 > cbSceneParam._m0[78u].w)
    {
        float _2367 = isnan(_511) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _511 : min(cbSceneParam._m0[80u].w, _511));
        float _2368 = _2367 / _511;
        float _2379 = _2368 * _272;
        float _2380 = _273 * _2368;
        float _2381 = (-0.0) - _2380;
        float _2382 = _2368 * _274;
        float _2384 = (cbSceneParam._m0[77u].w * _2381) / _2367;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2380;
        float _2392 = sqrt(((_2379 * _2379) + (_2380 * _2380)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2367)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2401 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2657;
        if (abs((_2381 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2657 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2401 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2582 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2657 = ((abs(_2392 / _2381) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2401 * _2591) - exp2(_2401 * _2592)) * _2580))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2659 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, 1.0), 0.0);
        float _2668 = exp2((_2657 * (-1.44269502162933349609375)) * (1.0 - _2659.w));
        float _2669 = log2(_2668);
        float _2685 = log2(_2308);
        _2403 = (exp2(_2685 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].x)) * _2659.x) / cbSceneParam._m0[78u].x)) + _2305;
        _2405 = (exp2(_2685 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].y)) * _2659.y) / cbSceneParam._m0[78u].y)) + _2306;
        _2407 = (exp2(_2685 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].z)) * _2659.z) / cbSceneParam._m0[78u].z)) + _2307;
        _2409 = _2668 * _2308;
    }
    else
    {
        _2403 = _2305;
        _2405 = _2306;
        _2407 = _2307;
        _2409 = _2308;
    }
    bool _2695;
    float _2464;
    vec4 _2467;
    float _2469;
    vec4 _2471;
    float _2479;
    float _2480;
    float _2481;
    float _2482;
    bool _2492;
    for (;;)
    {
        bool _2421 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2422 = log2(_2409);
        float _2429 = exp2(_2422 * cbSceneParam._m0[78u].x) * _2275;
        float _2430 = exp2(_2422 * cbSceneParam._m0[78u].y) * _2277;
        float _2431 = exp2(_2422 * cbSceneParam._m0[78u].z) * _2279;
        vec4 _2439 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_530, _531));
        float _2441 = _2439.x;
        float _2462 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2441)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2441))) - _511) * cbMtdParam._m0[14u].z;
        float _4384 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        _2464 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * cbInstanceData._m0[_2280].w;
        float _2465 = _518 + (-0.5);
        _2467 = cbMtdParam._m0[1u];
        _2469 = _2467.y * _2465;
        _2471 = cbMatDynParam._m0[0u];
        float _2478 = (roundEven(_2471.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2479 = _2478 * (_2421 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2403)));
        _2480 = _2478 * (_2421 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2405)));
        _2481 = _2478 * (_2421 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2407)));
        _2482 = _2465 * 0.999000012874603271484375;
        _2492 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2492)
        {
            if ((cbInstanceData._m0[_570 + 7u].x + _2482) < 0.5)
            {
                _2695 = true;
                break;
            }
        }
        uint _2615 = _571 + uint(_2471.w);
        if ((cbInstanceData._m0[_2615].w < 1.0) && ((cbInstanceData._m0[_2615].w + _2482) < 0.5))
        {
            _2695 = true;
            break;
        }
        if ((_2469 + 1.0) < _2467.x)
        {
            _2695 = true;
            break;
        }
        _2695 = false;
        break;
    }
    float _2960;
    if (_2695)
    {
        discard_state = true;
        _2960 = 0.0;
    }
    else
    {
        _2960 = _2464;
    }
    SV_Target.x = _2479;
    SV_Target.y = _2480;
    SV_Target.z = _2481;
    SV_Target.w = _2960;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2464;
    discard_exit();
}


