#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _981;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _202 = _201 * _193;
    float _203 = _201 * _194;
    float _204 = _201 * _195;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _282 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _283 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _294 = dot(vec3(_272, _273, _274), vec3(_202, _203, _204));
    float _297 = dot(vec3(_272, _273, _274), vec3(_216, _217, _218));
    float _300 = dot(vec3(_272, _273, _274), vec3(_209, _210, _211));
    float _306 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _330 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _350 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_294 * cbMtdParam._m0[12u].x) * _306) * _330) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_297 * cbMtdParam._m0[12u].x) * _306) * _330) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _373 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _374 = _373 * _272;
    float _375 = _373 * _273;
    float _376 = _373 * _274;
    float _380 = dot(vec4(_374, _375, _376, 0.0), vec4(_209, _210, _211, 0.0)) - cbMtdParam._m0[12u].w;
    float _3379 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _387 = exp2(log2(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _402 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _350.x) * cbMtdParam._m0[9u].x) * ((_387 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _406 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _350.y) * cbMtdParam._m0[9u].y) * ((_387 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _410 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _350.z) * cbMtdParam._m0[9u].z) * ((_387 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _422 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    float _428 = ((cbMtdParam._m0[12u].z * _422.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _441 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    float _449 = (_441.x * 2.0) + (-1.0);
    float _450 = (_441.y * 2.0) + (-1.0);
    float _451 = dot(vec2(_449, _450), vec2(_449, _450));
    float _3395 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))));
    float _461 = cbMtdParam._m0[14u].w + _441.z;
    vec4 _473 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _282) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _283) + cbTextureTilingScale._m0[0u].w));
    float _477 = cbMtdParam._m0[13u].w * _473.x;
    float _495 = fma(_456, _209, fma(_450, _216, _449 * _202));
    float _498 = fma(_456, _210, fma(_450, _217, _449 * _203));
    float _501 = fma(_456, _211, fma(_450, _218, _449 * _204));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _3406 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3417 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _510 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _511 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3433 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3444 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3455 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _530 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_508, cbSceneParam._m0[5u].z, fma(_507, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _506));
    float _561 = fma(_508, cbSceneParam._m0[6u].z, fma(_507, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _506));
    float _564 = fma(_508, cbSceneParam._m0[7u].z, fma(_507, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _506));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _579 = (_577 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_579].z;
    float _3466 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _602 = _599.x * TEXCOORD_1.w;
    float _603 = dot(vec3(_506, _507, _508), vec3(_374, _375, _376));
    float _606 = _603 * 2.0;
    float _610 = (_606 * _506) - _374;
    float _611 = (_606 * _507) - _375;
    float _612 = (_606 * _508) - _376;
    float _616 = abs(dot(vec3(_374, _375, _376), vec3(_506, _507, _508)));
    float _3499 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _625 = 10.0 / (_530 + 10.0);
    float _626 = sqrt(_510);
    float _638 = exp2((_626 * 5.0) * log2(1.0 - (_617 * 0.999000012874603271484375))) / (4.0 - (_626 * 3.0));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_678, cbModelParam._m0[26u].z, fma(_674, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670));
        float _709 = fma(_678, cbModelParam._m0[27u].z, fma(_674, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670));
        float _713 = fma(_678, cbModelParam._m0[28u].z, fma(_674, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670));
        float _738 = _670 + _506;
        float _739 = _674 + _507;
        float _740 = _678 + _508;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _705;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _709;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _713;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_506, _507, _508), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3547 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_506, _507, _508), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3580 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_506, _507, _508), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3613 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1021 = fma(_678, cbModelParam._m0[30u].z, fma(_674, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _670));
        float _1025 = fma(_678, cbModelParam._m0[31u].z, fma(_674, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _670));
        float _1029 = fma(_678, cbModelParam._m0[32u].z, fma(_674, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _670));
        float _1052 = _670 + _506;
        float _1053 = _674 + _507;
        float _1054 = _678 + _508;
        float _1064 = fma(_1054, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052)) - _1021;
        float _1065 = fma(_1054, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052)) - _1025;
        float _1066 = fma(_1054, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052)) - _1029;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1021 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1025 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[35u].z) + ((((((_1029 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1120 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1087.x + (-0.5));
        float _1122 = _1120 * (_1087.y + (-0.5));
        float _1123 = _1120 * (_1087.z + (-0.5));
        float _1130 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1094.x + (-0.5));
        float _1132 = _1130 * (_1094.y + (-0.5));
        float _1133 = _1130 * (_1094.z + (-0.5));
        float _1140 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1101.x + (-0.5));
        float _1142 = _1140 * (_1101.y + (-0.5));
        float _1143 = _1140 * (_1101.z + (-0.5));
        float _1150 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1108.x + (-0.5));
        float _1152 = _1150 * (_1108.y + (-0.5));
        float _1153 = _1150 * (_1108.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_506, _507, _508), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3676 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1184 + 1.0))) + _1189) * _1154;
        float _1199 = _1122 * 0.5;
        float _1200 = _1132 * 0.5;
        float _1201 = _1142 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_506, _507, _508), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3709 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1226 + 1.0))) + _1231) * _1155;
        float _1241 = _1123 * 0.5;
        float _1242 = _1133 * 0.5;
        float _1243 = _1143 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_506, _507, _508), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3742 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1268 + 1.0))) + _1273) * _1156;
        _1290 = _1123;
        _1291 = _1122;
        _1292 = _1121;
        _1293 = _1133;
        _1294 = _1132;
        _1295 = _1131;
        _1296 = _1143;
        _1297 = _1142;
        _1298 = _1141;
        _1299 = _1156;
        _1300 = _1155;
        _1301 = _1154;
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _981;
        _1291 = _981;
        _1292 = _981;
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = _981;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1337 = fma(_1316, cbSceneParam._m0[89u].z, fma(_1315, cbSceneParam._m0[89u].y, _1314 * cbSceneParam._m0[89u].x));
    float _1340 = fma(_1316, cbSceneParam._m0[90u].z, fma(_1315, cbSceneParam._m0[90u].y, _1314 * cbSceneParam._m0[90u].x));
    float _1343 = fma(_1316, cbSceneParam._m0[91u].z, fma(_1315, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1314));
    float _1358 = _610 * 0.5;
    float _1359 = _611 * 0.5;
    float _1360 = _612 * 0.5;
    float _1361 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1364 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1367 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1401;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1374 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_980, _984, _987, _990));
        float _1378 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_982, _985, _988, _991));
        float _1382 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_983, _986, _989, _992));
        float _1389 = dot(vec4(cbModelParam._m0[39u]), vec4(_1358, _1359, _1360, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1389) ? 0.0 : (isnan(0.0) ? _1389 : max(0.0, _1389))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1412;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1403 = dot(vec4(cbModelParam._m0[40u]), vec4(_1358, _1359, _1360, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1416 = (_1412 * cbModelParam._m0[1u].x) + (_1401 * (1.0 - cbModelParam._m0[1u].x));
    float _1426 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _510);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1426 : min(cbModelParam._m0[25u].z, _1426));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1474 = fma(_678, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670)) + cbModelParam._m0[13u].w;
        float _1478 = fma(_678, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670)) + cbModelParam._m0[14u].w;
        float _1482 = fma(_678, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670)) + cbModelParam._m0[15u].w;
        float _1485 = fma(_612, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610));
        float _1488 = fma(_612, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610));
        float _1491 = fma(_612, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610));
        float _1519;
        if (_1485 > 0.0)
        {
            _1519 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1519 = frontier_phi_14_12_ladder;
        }
        float _1742;
        if (_1488 > 0.0)
        {
            _1742 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1742 = frontier_phi_23_19_ladder;
        }
        float _1977;
        if (_1491 > 0.0)
        {
            _1977 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1977 = frontier_phi_34_30_ladder;
        }
        float _1979 = isnan(_1742) ? _1519 : (isnan(_1519) ? _1742 : min(_1519, _1742));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1485) + _1474;
        float _1985 = (_1980 * _1488) + _1478;
        float _1986 = (_1980 * _1491) + _1482;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1427);
            frontier_phi_13_34_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1507 = frontier_phi_13_34_ladder_2;
        _1509 = frontier_phi_13_34_ladder_1;
        _1511 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_610, _611, _612), _1427);
        _1507 = _1495.x * cbModelParam._m0[1u].y;
        _1509 = _1495.y * cbModelParam._m0[1u].y;
        _1511 = _1495.z * cbModelParam._m0[1u].y;
    }
    float _1515 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _510);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1515 : min(cbModelParam._m0[25u].w, _1515));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1571 = fma(_678, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670)) + cbModelParam._m0[21u].w;
        float _1575 = fma(_678, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670)) + cbModelParam._m0[22u].w;
        float _1579 = fma(_678, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670)) + cbModelParam._m0[23u].w;
        float _1582 = fma(_612, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610));
        float _1585 = fma(_612, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610));
        float _1588 = fma(_612, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610));
        float _1747;
        if (_1582 > 0.0)
        {
            _1747 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1747 = frontier_phi_25_21_ladder;
        }
        float _2004;
        if (_1585 > 0.0)
        {
            _2004 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2004 = frontier_phi_36_32_ladder;
        }
        float _2461;
        if (_1588 > 0.0)
        {
            _2461 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2461 = frontier_phi_47_42_ladder;
        }
        float _2463 = isnan(_2004) ? _1747 : (isnan(_1747) ? _2004 : min(_1747, _2004));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1582) + _1571;
        float _2469 = (_2464 * _1585) + _1575;
        float _2470 = (_2464 * _1588) + _1579;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1516);
            frontier_phi_22_47_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1607 = frontier_phi_22_47_ladder_2;
        _1609 = frontier_phi_22_47_ladder_1;
        _1611 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_610, _611, _612), _1516);
        _1607 = _1591.x * cbModelParam._m0[1u].z;
        _1609 = _1591.y * cbModelParam._m0[1u].z;
        _1611 = _1591.z * cbModelParam._m0[1u].z;
    }
    float _1623 = ((((1.0 - _638) * ((_626 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_638 * _626)) * _602;
    float _1624 = _1623 * ((cbModelParam._m0[1u].w * (_1607 - _1507)) + _1507);
    float _1625 = _1623 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1626 = _1623 * ((cbModelParam._m0[1u].w * (_1611 - _1511)) + _1511);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1624 * cbSceneParam._m0[91u].x));
    float _1646 = _536 / cbSceneParam._m0[86u].x;
    float _1654 = (cbSceneParam._m0[88u].y * (1.0 - _510)) + cbSceneParam._m0[88u].z;
    float _3868 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1656 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 5.0;
    float _1661 = (_625 * cbMtdParam._m0[13u].z) * dot(vec3(_506, _507, _508), vec3(1.0, 0.0, 0.0));
    vec4 _1671 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1661 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1661 + _1646) * cbSceneParam._m0[86u].x, _537), _1656).w) + _1646) * cbSceneParam._m0[86u].x, _537), _1656);
    float _1687 = 1.0 - _1671.w;
    uvec4 _1697 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1699 = _1697.x * 14u;
    uint _1700 = _1699 + 13u;
    float _1705 = _602 + (-1.0);
    float _1708 = (cbLight._m0[_1700].x * _1705) + 1.0;
    float _1709 = (cbLight._m0[_1700].y * _1705) + 1.0;
    uint _1711 = _1699 + 4u;
    float _1722 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_506, _507, _508));
    float _1725 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1726 = _1699 + 5u;
    uint _1732 = _1699 | 1u;
    float _1738 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_506, _507, _508));
    float _1741 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    float _1806;
    float _1807;
    float _1808;
    if (_511 == 0.0)
    {
        float _3889 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _3900 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1760 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
        float _1762 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
        _1806 = ((cbLight._m0[_1726].x * _1741) * _1762) + ((cbLight._m0[_1711].x * _1725) * _1760);
        _1807 = ((_1741 * cbLight._m0[_1726].y) * _1762) + ((_1725 * cbLight._m0[_1711].y) * _1760);
        _1808 = ((_1741 * cbLight._m0[_1726].z) * _1762) + ((_1725 * cbLight._m0[_1711].z) * _1760);
    }
    else
    {
        float _1772 = _1722 + _511;
        float _1775 = (_511 * 2.0) + 1.0;
        float _1776 = (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) / _1775;
        float _1783 = _1738 + _511;
        float _1785 = (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) / _1775;
        _1806 = (((_1785 * cbLight._m0[_1726].x) * _1741) + ((_1776 * cbLight._m0[_1711].x) * _1725)) * 0.3183098733425140380859375;
        _1807 = (((_1785 * cbLight._m0[_1726].y) * _1741) + ((_1776 * cbLight._m0[_1711].y) * _1725)) * 0.3183098733425140380859375;
        _1808 = (((_1785 * cbLight._m0[_1726].z) * _1741) + ((_1776 * cbLight._m0[_1711].z) * _1725)) * 0.3183098733425140380859375;
    }
    uint _1812 = _1699 + 8u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _510) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1699].x + _374;
    float _1831 = cbLight._m0[_1699].y + _375;
    float _1832 = cbLight._m0[_1699].z + _376;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1699].xyz));
    float _3921 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _1844 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1845 = dot(vec3(_506, _507, _508), vec3(_1837, _1838, _1839));
    float _3943 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1849 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1837, _1838, _1839));
    float _3954 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1853 = _1829 * _1829;
    float _1857 = ((_1848 * _1848) * (_1853 + (-1.0))) + 1.0;
    float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1869 = 1.0 - _1829;
    float _1880 = (0.5 / (((_1844 * ((_1843 * _1869) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1869) + _1829) * _1843))) * _1843;
    float _3965 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1853 / ((_1857 * _1857) * 3.141590118408203125));
    uint _1895 = _1699 + 9u;
    float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _510) * 0.949999988079071044921875);
    float _1910 = _1909 * _1909;
    float _1911 = cbLight._m0[_1732].x + _374;
    float _1912 = cbLight._m0[_1732].y + _375;
    float _1913 = cbLight._m0[_1732].z + _376;
    float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
    float _1918 = _1917 * _1911;
    float _1919 = _1917 * _1912;
    float _1920 = _1917 * _1913;
    float _1921 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1732].xyz));
    float _3976 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1925 = dot(vec3(_506, _507, _508), vec3(_1918, _1919, _1920));
    float _3987 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1929 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1918, _1919, _1920));
    float _3998 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1933 = _1910 * _1910;
    float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = 1.0 - _1910;
    float _1957 = (0.5 / (((_1844 * ((_1924 * _1947) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1947) + _1910) * _1924))) * _1924;
    float _4009 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
    float _1969 = (((_1946 * cbLight._m0[_1895].x) * _1959) * _1741) + (((_1868 * cbLight._m0[_1812].x) * _1882) * _1725);
    float _1970 = (((_1946 * cbLight._m0[_1895].y) * _1959) * _1741) + (((_1868 * cbLight._m0[_1812].y) * _1882) * _1725);
    float _1971 = (((_1946 * cbLight._m0[_1895].z) * _1959) * _1741) + (((_1868 * cbLight._m0[_1812].z) * _1882) * _1725);
    float _2108;
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    float _2118;
    if (_1697.y == 0u)
    {
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2049 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2048;
        float _2050 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2048;
        float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2048;
        uvec4 _2063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2064 = _2063.x;
        uint _2075 = uint((float(_2063.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2064))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2064)));
        float _2085 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2086 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        uint _2089 = uint(isnan(14.0) ? _2086 : (isnan(_2086) ? 14.0 : min(_2086, 14.0)));
        uvec4 _2094 = texelFetch(g_lightClusterGridBuffer, int(((_2089 << 2u) + (_2075 << 6u)) >> 2u));
        uint _2095 = _2094.x;
        uint _2096 = _2063.z;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        if (((((1u << ((_2096 >> 4u) & 15u)) + 4294967295u) & _2095) == 0u) || ((_2096 & 240u) == 0u))
        {
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
        }
        else
        {
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            uint _2525 = 0u;
            uint _2534;
            bool _2535;
            for (;;)
            {
                _2534 = texelFetch(g_lightClassification, int((((_2089 << 5u) + (_2075 << 9u)) + (_2525 << 2u)) >> 2u)).x;
                _2535 = _2534 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2535)
                {
                    frontier_phi_56_pred = _2519;
                    frontier_phi_56_pred_1 = _2524;
                    frontier_phi_56_pred_2 = _2523;
                    frontier_phi_56_pred_3 = _2522;
                    frontier_phi_56_pred_4 = _2521;
                    frontier_phi_56_pred_5 = _2520;
                }
                else
                {
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    uint _2670;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2524;
                    _2670 = _2534;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    for (;;)
                    {
                        uint _2674 = uint(findLSB(_2670)) + (_2525 << 5u);
                        uint _2671 = (_2670 + 4294967295u) & _2670;
                        uint _2676 = _2674 * 48u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 3u)).x));
                        uint _2696 = (_2674 * 48u) + 4u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        float _2710 = _2709.x;
                        float _2711 = _2709.y;
                        float _2712 = _2709.z;
                        uint _2715 = (_2674 * 48u) + 8u;
                        vec3 _2726 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x));
                        uint _2731 = (_2674 * 48u) + 12u;
                        vec2 _2739 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x));
                        float _2745 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
                        float _2746 = _2745 * _2049;
                        float _2747 = _2745 * _2050;
                        float _2748 = _2745 * _2051;
                        float _2749 = _2690.x - _2049;
                        float _2750 = _2690.y - _2050;
                        float _2751 = _2690.z - _2051;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_558, _561, _564), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2690.w);
                        float _4030 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2766 = sqrt(_2752) * _2709.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2771 = 1.0 - _2770;
                        float _2773 = (_2771 * _2771) * _511;
                        float _2776 = ((_2771 * _2759) + _2770) + _2773;
                        float _2781 = _2766 * _2766;
                        float _2786 = ((isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))) * _2765) / (((_2773 * 2.0) + 1.0) * ((_2781 * 0.699999988079071044921875) + 1.0));
                        float _2790 = dot(vec3(_2756, _2757, _2758), vec3(_2746, _2747, _2748));
                        float _4046 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2797 = dot(vec3((-0.0) - _2746, (-0.0) - _2747, (-0.0) - _2748), vec3(_558, _561, _564)) + 1.0;
                        float _2799 = (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * 0.5;
                        float _2807 = ((_2799 * _2799) * _2739.x) * exp2((_2739.y * 32.0) * log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))));
                        float _2809 = _511 / (_511 + 1.0);
                        float _2825 = (-0.0) - _2049;
                        float _2826 = (-0.0) - _2050;
                        float _2827 = (-0.0) - _2051;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2842 = exp2(log2(1.0 / ((_2781 * 3.5) + 5.0)) * 0.25);
                        float _2843 = 1.0 - _626;
                        float _2850 = sqrt(1.0 - ((1.0 - (_2843 * _2843)) * (1.0 - (_2842 * _2842))));
                        float _2851 = _2850 * _2850;
                        float _2852 = _2851 * _2851;
                        float _2853 = _2832 + _2756;
                        float _2854 = _2833 + _2757;
                        float _2855 = _2834 + _2758;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2863 = dot(vec3(_558, _561, _564), vec3(_2832, _2833, _2834));
                        float _4062 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2867 = dot(vec3(_558, _561, _564), vec3(_2859 * _2853, _2859 * _2854, _2859 * _2855));
                        float _4073 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2874 = ((_2870 * _2870) * (_2852 + (-1.0))) + 1.0;
                        float _2875 = _2769 * _2851;
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2759) + _2876;
                        float _4084 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2881 = 1.0 - _2851;
                        float _2891 = (0.5 / (((_2880 * ((_2866 * _2881) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2851) * _2866))) * _2880;
                        float _4095 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2902 = (((_2852 * 3.1415927410125732421875) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) / ((_2874 * _2874) * ((_2781 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2599 = (((((_2710 * 0.3183098733425140380859375) * _2809) * _2807) + _2710) * _2786) + _2667;
                        _2600 = (((((_2711 * 0.3183098733425140380859375) * _2809) * _2807) + _2711) * _2786) + _2668;
                        _2601 = (((((_2712 * 0.3183098733425140380859375) * _2809) * _2807) + _2712) * _2786) + _2669;
                        _2596 = (_2902 * _2726.x) + _2664;
                        _2597 = (_2902 * _2726.y) + _2665;
                        _2598 = (_2902 * _2726.z) + _2666;
                        if (_2671 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2671;
                        }
                    }
                    frontier_phi_56_pred = _2596;
                    frontier_phi_56_pred_1 = _2601;
                    frontier_phi_56_pred_2 = _2600;
                    frontier_phi_56_pred_3 = _2599;
                    frontier_phi_56_pred_4 = _2598;
                    frontier_phi_56_pred_5 = _2597;
                }
                _2319 = frontier_phi_56_pred;
                _2329 = frontier_phi_56_pred_1;
                _2327 = frontier_phi_56_pred_2;
                _2325 = frontier_phi_56_pred_3;
                _2323 = frontier_phi_56_pred_4;
                _2321 = frontier_phi_56_pred_5;
                uint _2526 = _2525 + 1u;
                if (_2526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2519 = _2319;
                    _2520 = _2321;
                    _2521 = _2323;
                    _2522 = _2325;
                    _2523 = _2327;
                    _2524 = _2329;
                    _2525 = _2526;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
        }
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.z;
        uint _2335 = (_2333 >> 8u) & 15u;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((4294967295u << _2335) & _2095) == 0u)
        {
            _2487 = _2318;
            _2489 = _2320;
            _2491 = _2322;
            _2493 = _2324;
            _2495 = _2326;
            _2497 = _2328;
        }
        else
        {
            float _2512 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _2513 = _2512 * _2049;
            float _2514 = _2512 * _2050;
            float _2515 = _2512 * _2051;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2335 < ((_2333 >> 12u) & 15u))
            {
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2647 = _2318;
                float _2648 = _2320;
                float _2649 = _2322;
                float _2650 = _2324;
                float _2651 = _2326;
                float _2652 = _2328;
                uint _2653 = _2335;
                uint _2662;
                bool _2663;
                for (;;)
                {
                    _2662 = texelFetch(g_lightClassification, int((((_2089 << 5u) + (_2075 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                    _2663 = _2662 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2663)
                    {
                        frontier_phi_62_pred = _2652;
                        frontier_phi_62_pred_1 = _2651;
                        frontier_phi_62_pred_2 = _2650;
                        frontier_phi_62_pred_3 = _2649;
                        frontier_phi_62_pred_4 = _2648;
                        frontier_phi_62_pred_5 = _2647;
                    }
                    else
                    {
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _2920 = _2647;
                        float _2921 = _2648;
                        float _2922 = _2649;
                        float _2923 = _2650;
                        float _2924 = _2651;
                        float _2925 = _2652;
                        uint _2926 = _2662;
                        uint _2927;
                        vec4 _2952;
                        float _2953;
                        vec4 _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        vec3 _2983;
                        vec2 _2992;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2937 = ((_2653 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2926));
                            _2927 = (_2926 + 4294967295u) & _2926;
                            uint _2939 = _2937 * 40u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            _2953 = _2952.w;
                            uint _2955 = (_2937 * 40u) + 4u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2969 = _2968.x;
                            _2970 = _2968.y;
                            _2971 = _2968.z;
                            uint _2973 = (_2937 * 40u) + 8u;
                            _2983 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x));
                            uint _2985 = (_2937 * 40u) + 12u;
                            _2992 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x));
                            uint _2994 = (_2937 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2937 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2937 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2937 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2051, _3058.z, fma(_2050, _3058.y, _3058.x * _2049)) + _3058.w;
                            _3071 = !((fma(_2051, _3039.z, fma(_2050, _3039.y, _3039.x * _2049)) + _3039.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3071)
                            {
                                float _3097 = _2952.x - _2049;
                                float _3098 = _2952.y - _2050;
                                float _3099 = _2952.z - _2051;
                                float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                                float _3103 = inversesqrt(_3100);
                                float _3104 = _3103 * _3097;
                                float _3105 = _3103 * _3098;
                                float _3106 = _3103 * _3099;
                                float _3110 = 1.0 - (_3100 / (_2953 * _2953));
                                float _4106 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3115 = sqrt(_3100) * _2968.w;
                                float _3117 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                                float _3118 = _3117 * _3117;
                                float _3119 = 1.0 - _3118;
                                float _3121 = (_3119 * _3119) * _511;
                                float _3124 = ((_3119 * dot(vec3(_3104, _3105, _3106), vec3(_558, _561, _564))) + _3118) + _3121;
                                float _3129 = _3115 * _3115;
                                float _3134 = (fma(_2051, _3007.z, fma(_2050, _3007.y, _3007.x * _2049)) + _3007.w) / _3070;
                                float _3135 = (fma(_2051, _3023.z, fma(_2050, _3023.y, _3023.x * _2049)) + _3023.w) / _3070;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4122 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3111) / (((_3121 * 2.0) + 1.0) * ((_3129 * 0.699999988079071044921875) + 1.0)));
                                float _3142 = (-0.0) - _2513;
                                float _3143 = (-0.0) - _2514;
                                float _3144 = (-0.0) - _2515;
                                float _3145 = dot(vec3(_3104, _3105, _3106), vec3(_2513, _2514, _2515));
                                float _4133 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3152 = dot(vec3(_3142, _3143, _3144), vec3(_558, _561, _564)) + 1.0;
                                float _3154 = (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * 0.5;
                                float _3161 = ((_3154 * _3154) * _2992.x) * exp2((_2992.y * 32.0) * log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))));
                                float _3163 = _511 / (_511 + 1.0);
                                float _3184 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3185 = 1.0 - _626;
                                float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                                float _3193 = _3192 * _3192;
                                float _3194 = _3193 * _3193;
                                float _3195 = _3104 - _2513;
                                float _3196 = _3105 - _2514;
                                float _3197 = _3106 - _2515;
                                float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                                float _3205 = dot(vec3(_558, _561, _564), vec3(_3142, _3143, _3144));
                                float _4149 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3209 = dot(vec3(_558, _561, _564), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                                float _4160 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                                float _3217 = _3117 * _3193;
                                float _3218 = _3217 * _3217;
                                float _3224 = ((1.0 - _3218) * dot(vec3(_558, _561, _564), vec3(_3104, _3105, _3106))) + _3218;
                                float _4171 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3226 = 1.0 - _3193;
                                float _3236 = (0.5 / (((_3225 * ((_3208 * _3226) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3193) * _3208))) * _3225;
                                float _4182 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3246 = (_3140 * _3111) * (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) / ((_3216 * _3216) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_2971 * 0.3183098733425140380859375) * _3163) * _3161) + _2971) * _3141;
                                frontier_phi_68_pred_1 = ((((_2970 * 0.3183098733425140380859375) * _3163) * _3161) + _2970) * _3141;
                                frontier_phi_68_pred_2 = ((((_2969 * 0.3183098733425140380859375) * _3163) * _3161) + _2969) * _3141;
                                frontier_phi_68_pred_3 = _3246 * _2983.z;
                                frontier_phi_68_pred_4 = _3246 * _2983.y;
                                frontier_phi_68_pred_5 = _3246 * _2983.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_68_pred;
                            _3254 = frontier_phi_68_pred_1;
                            _3253 = frontier_phi_68_pred_2;
                            _3252 = frontier_phi_68_pred_3;
                            _3251 = frontier_phi_68_pred_4;
                            _3250 = frontier_phi_68_pred_5;
                            _2910 = _3253 + _2923;
                            _2911 = _3254 + _2924;
                            _2912 = _3255 + _2925;
                            _2907 = _3250 + _2920;
                            _2908 = _3251 + _2921;
                            _2909 = _3252 + _2922;
                            if (_2927 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2927;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2912;
                        frontier_phi_62_pred_1 = _2911;
                        frontier_phi_62_pred_2 = _2910;
                        frontier_phi_62_pred_3 = _2909;
                        frontier_phi_62_pred_4 = _2908;
                        frontier_phi_62_pred_5 = _2907;
                    }
                    _2498 = frontier_phi_62_pred;
                    _2496 = frontier_phi_62_pred_1;
                    _2494 = frontier_phi_62_pred_2;
                    _2492 = frontier_phi_62_pred_3;
                    _2490 = frontier_phi_62_pred_4;
                    _2488 = frontier_phi_62_pred_5;
                    uint _2654 = _2653 + 1u;
                    if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2647 = _2488;
                        _2648 = _2490;
                        _2649 = _2492;
                        _2650 = _2494;
                        _2651 = _2496;
                        _2652 = _2498;
                        _2653 = _2654;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2498;
                frontier_phi_49_50_ladder_1 = _2494;
                frontier_phi_49_50_ladder_2 = _2496;
                frontier_phi_49_50_ladder_3 = _2492;
                frontier_phi_49_50_ladder_4 = _2490;
                frontier_phi_49_50_ladder_5 = _2488;
            }
            else
            {
                frontier_phi_49_50_ladder = _2328;
                frontier_phi_49_50_ladder_1 = _2324;
                frontier_phi_49_50_ladder_2 = _2326;
                frontier_phi_49_50_ladder_3 = _2322;
                frontier_phi_49_50_ladder_4 = _2320;
                frontier_phi_49_50_ladder_5 = _2318;
            }
            _2487 = frontier_phi_49_50_ladder_5;
            _2489 = frontier_phi_49_50_ladder_4;
            _2491 = frontier_phi_49_50_ladder_3;
            _2493 = frontier_phi_49_50_ladder_1;
            _2495 = frontier_phi_49_50_ladder_2;
            _2497 = frontier_phi_49_50_ladder;
        }
        float _2502 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
        _2108 = (_2502 * _2493) + _1806;
        _2110 = (_2502 * _2495) + _1807;
        _2112 = (_2502 * _2497) + _1808;
        _2114 = ((_2487 * 0.039999999105930328369140625) * _2502) + _1969;
        _2116 = ((_2489 * 0.039999999105930328369140625) * _2502) + _1970;
        _2118 = ((_2491 * 0.039999999105930328369140625) * _2502) + _1971;
    }
    else
    {
        _2108 = _1806;
        _2110 = _1807;
        _2112 = _1808;
        _2114 = _1969;
        _2116 = _1970;
        _2118 = _1971;
    }
    float _2132 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2133 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2134 = cbSceneParam._m0[86u].x * (_1646 + ((_625 * cbMtdParam._m0[13u].y) * dot(vec3(_506, _507, _508), vec3(_202, _203, _204))));
    float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
    float _2136 = isnan(_2133) ? _537 : (isnan(_537) ? _2133 : min(_537, _2133));
    vec4 _2138 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2135, _2136), 0.0);
    float _2140 = _2138.x;
    bool _2161 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2140)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2140))) > _530;
    float _2162 = _2161 ? _2135 : _536;
    float _2163 = _2161 ? _2136 : _537;
    vec4 _2165 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2162, _2163));
    vec4 _2170 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2162, _2163));
    float _2172 = _2170.x;
    float _2192 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2172)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2172))) - _530;
    bool _2202 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2206 = (isnan(_2192) ? 0.0 : (isnan(0.0) ? _2192 : max(0.0, _2192))) * (-1.44269502162933349609375);
    float _4213 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4224 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4235 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2233 = 0.959999978542327880859375 - (exp2(log2(1.0 - _617) * 5.0) * 0.959999978542327880859375);
    float _2236 = ((_2165.x * _2233) * exp2(_2206 * (_2202 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2239 = ((_2165.y * _2233) * exp2(_2206 * (_2202 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2242 = ((_2165.z * _2233) * exp2(_2206 * (_2202 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2264 = _536 / cbSceneParam._m0[86u].x;
    float _2265 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2279 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2264, _2265, (log2((isnan(cbSceneParam._m0[77u].w) ? _530 : (isnan(_530) ? cbSceneParam._m0[77u].w : min(_530, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2281 = _2279.x;
    float _2282 = _2279.y;
    float _2283 = _2279.z;
    float _2284 = _2279.w;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_530 > cbSceneParam._m0[78u].w)
    {
        float _2343 = isnan(_530) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _530 : min(cbSceneParam._m0[80u].w, _530));
        float _2344 = _2343 / _530;
        float _2355 = _2344 * _272;
        float _2356 = _273 * _2344;
        float _2357 = (-0.0) - _2356;
        float _2358 = _2344 * _274;
        float _2360 = (cbSceneParam._m0[77u].w * _2357) / _2343;
        float _2361 = _2360 + cbSceneParam._m0[79u].w;
        float _2362 = cbSceneParam._m0[79u].w - _2356;
        float _2368 = sqrt(((_2355 * _2355) + (_2356 * _2356)) + (_2358 * _2358));
        float _2371 = (1.0 - (cbSceneParam._m0[77u].w / _2343)) * _2368;
        float _2376 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2377 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2609;
        if (abs((_2357 - _2360) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2609 = ((((_2361 > 0.0) ? exp2(_2376 * _2361) : (2.0 - exp2(_2377 * _2361))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2371;
        }
        else
        {
            float _2548 = 1.0 / cbSceneParam._m0[80u].x;
            float _2549 = isnan(_2362) ? _2361 : (isnan(_2361) ? _2362 : max(_2361, _2362));
            float _2550 = isnan(_2362) ? _2361 : (isnan(_2361) ? _2362 : min(_2361, _2362));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            _2609 = ((abs(_2368 / _2357) * cbSceneParam._m0[80u].y) * ((((_2559 - _2560) * 2.0) - ((exp2(_2376 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)))) - exp2(_2376 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))))) * _2548)) - ((exp2(_2377 * _2559) - exp2(_2377 * _2560)) * _2548))) + (_2371 * cbSceneParam._m0[80u].z);
        }
        vec4 _2611 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2264, _2265, 1.0), 0.0);
        float _2620 = exp2((_2609 * (-1.44269502162933349609375)) * (1.0 - _2611.w));
        float _2621 = log2(_2620);
        float _2637 = log2(_2284);
        _2379 = (exp2(_2637 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].x)) * _2611.x) / cbSceneParam._m0[78u].x)) + _2281;
        _2381 = (exp2(_2637 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].y)) * _2611.y) / cbSceneParam._m0[78u].y)) + _2282;
        _2383 = (exp2(_2637 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].z)) * _2611.z) / cbSceneParam._m0[78u].z)) + _2283;
        _2385 = _2620 * _2284;
    }
    else
    {
        _2379 = _2281;
        _2381 = _2282;
        _2383 = _2283;
        _2385 = _2284;
    }
    bool _2397 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2398 = log2(_2385);
    float _2405 = exp2(_2398 * cbSceneParam._m0[78u].x) * ((_2236 + (((((_1623 * _1671.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1416) * _1687)) + _2114) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2108 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _602))) - _2236) * cbMtdParam._m0[15u].x));
    float _2406 = exp2(_2398 * cbSceneParam._m0[78u].y) * ((_2239 + (((((_1623 * _1671.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1416) * _1687)) + _2116) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2110 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _602))) - _2239) * cbMtdParam._m0[15u].x));
    float _2407 = exp2(_2398 * cbSceneParam._m0[78u].z) * ((_2242 + (((((_1623 * _1671.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1416) * _1687)) + _2118) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2112 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _602))) - _2242) * cbMtdParam._m0[15u].x));
    vec4 _2415 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_536, _537));
    float _2417 = _2415.x;
    float _2438 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2417)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2417))) - _530) * cbMtdParam._m0[14u].z;
    float _4286 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (cbInstanceData._m0[_577 + 6u].w * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)));
    float _2449 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2449 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.y = _2449 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.z = _2449 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.w = _2440;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2440;
}


