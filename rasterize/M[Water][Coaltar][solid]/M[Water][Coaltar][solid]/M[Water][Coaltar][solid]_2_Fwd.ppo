#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _285 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _286 = _285 * _274;
    float _287 = _285 * _275;
    float _288 = _285 * _276;
    float _296 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _297 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _311 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_296 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_297 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _319 = (_311.x * 2.0) + (-1.0);
    float _321 = (_311.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3442 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))));
    float _331 = fma(_328, _211, fma(_321, _218, _319 * _204));
    float _334 = fma(_328, _212, fma(_321, _219, _319 * _205));
    float _337 = fma(_328, _213, fma(_321, _220, _319 * _206));
    float _341 = inversesqrt(dot(vec3(_331, _334, _337), vec3(_331, _334, _337)));
    float _350 = (dot(vec4(_286, _287, _288, 0.0), vec4(_341 * _331, _341 * _334, _341 * _337, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _363 = dot(vec3(_274, _275, _276), vec3(_204, _205, _206));
    float _366 = dot(vec3(_274, _275, _276), vec3(_218, _219, _220));
    float _369 = dot(vec3(_274, _275, _276), vec3(_211, _212, _213));
    float _375 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _396 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _416 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_363 * cbMtdParam._m0[12u].x) * _375) * _396) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_366 * cbMtdParam._m0[12u].x) * _375) * _396) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _439 = dot(vec4(_286, _287, _288, 0.0), vec4(_211, _212, _213, 0.0)) - cbMtdParam._m0[12u].w;
    float _3453 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _446 = exp2(log2(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _461 = (((((sin(_350) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _416.x) * cbMtdParam._m0[9u].x) * ((_446 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _470 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _416.y) * cbMtdParam._m0[9u].y) * ((_446 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_350 * 0.85000002384185791015625) + 1.0);
    float _479 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _416.z) * cbMtdParam._m0[9u].z) * ((_446 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_350 * 0.699999988079071044921875) + 1.0);
    vec4 _491 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    float _497 = ((cbMtdParam._m0[12u].z * _491.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _510 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3469 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))));
    float _526 = cbMtdParam._m0[14u].w + _510.z;
    vec4 _538 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _296) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _297) + cbTextureTilingScale._m0[0u].w));
    float _542 = cbMtdParam._m0[13u].w * _538.x;
    float _560 = fma(_524, _211, fma(_518, _218, _517 * _204));
    float _563 = fma(_524, _212, fma(_518, _219, _517 * _205));
    float _566 = fma(_524, _213, fma(_518, _220, _517 * _206));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    float _571 = _570 * _560;
    float _572 = _570 * _563;
    float _573 = _570 * _566;
    float _3480 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3491 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _575 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _576 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3507 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3518 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3529 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _601 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _602 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_573, cbSceneParam._m0[5u].z, fma(_572, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _571));
    float _625 = fma(_573, cbSceneParam._m0[6u].z, fma(_572, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _571));
    float _628 = fma(_573, cbSceneParam._m0[7u].z, fma(_572, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _571));
    uint _641 = uint(roundEven(NORMAL.w)) * 13u;
    uint _643 = (_641 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _649 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_643].x;
    float _650 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_643].y;
    float _651 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_643].z;
    float _3540 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _601, cbSceneParam._m0[86u].y * _602));
    float _666 = _663.x * TEXCOORD_1.w;
    float _667 = dot(vec3(_571, _572, _573), vec3(_286, _287, _288));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _571) - _286;
    float _675 = (_670 * _572) - _287;
    float _676 = (_670 * _573) - _288;
    float _680 = abs(dot(vec3(_286, _287, _288), vec3(_571, _572, _573)));
    float _3573 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _689 = 10.0 / (_595 + 10.0);
    float _690 = sqrt(_575);
    float _702 = exp2((_690 * 5.0) * log2(1.0 - (_681 * 0.999000012874603271484375))) / (4.0 - (_690 * 3.0));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _571;
        float _803 = _738 + _572;
        float _804 = _742 + _573;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_571, _572, _573), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3621 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_571, _572, _573), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3654 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_571, _572, _573), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3687 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _571;
        float _1117 = _738 + _572;
        float _1118 = _742 + _573;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_571, _572, _573), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3750 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_571, _572, _573), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3783 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_571, _572, _573), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3816 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _674 * 0.5;
    float _1423 = _675 * 0.5;
    float _1424 = _676 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1552 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1555 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1583 = frontier_phi_14_12_ladder;
        }
        float _1806;
        if (_1552 > 0.0)
        {
            _1806 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1806 = frontier_phi_23_19_ladder;
        }
        float _2041;
        if (_1555 > 0.0)
        {
            _2041 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2041 = frontier_phi_34_30_ladder;
        }
        float _2043 = isnan(_1806) ? _1583 : (isnan(_1583) ? _1806 : min(_1583, _1806));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1549) + _1538;
        float _2049 = (_2044 * _1552) + _1542;
        float _2050 = (_2044 * _1555) + _1546;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2053 = (-1.0) - _2051;
        float _2055 = _2051 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2050 > _2055) || ((_2050 < _2053) || ((_2049 > _2055) || ((_2049 < _2053) || ((_2048 < _2053) || (_2048 > _2055))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2050, cbModelParam._m0[9u].z, fma(_2049, cbModelParam._m0[9u].y, _2048 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2050, cbModelParam._m0[10u].z, fma(_2049, cbModelParam._m0[10u].y, _2048 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2050, cbModelParam._m0[11u].z, fma(_2049, cbModelParam._m0[11u].y, _2048 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_13_34_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_13_34_ladder_2;
        _1573 = frontier_phi_13_34_ladder_1;
        _1575 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1635 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1639 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1643 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1646 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1649 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1652 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1811;
        if (_1646 > 0.0)
        {
            _1811 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1811 = frontier_phi_25_21_ladder;
        }
        float _2068;
        if (_1649 > 0.0)
        {
            _2068 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2068 = frontier_phi_36_32_ladder;
        }
        float _2525;
        if (_1652 > 0.0)
        {
            _2525 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2525 = frontier_phi_47_42_ladder;
        }
        float _2527 = isnan(_2068) ? _1811 : (isnan(_1811) ? _2068 : min(_1811, _2068));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1646) + _1635;
        float _2533 = (_2528 * _1649) + _1639;
        float _2534 = (_2528 * _1652) + _1643;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_22_47_ladder = _2655.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2655.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2655.x * cbModelParam._m0[1u].z;
        }
        _1671 = frontier_phi_22_47_ladder_2;
        _1673 = frontier_phi_22_47_ladder_1;
        _1675 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1580);
        _1671 = _1655.x * cbModelParam._m0[1u].z;
        _1673 = _1655.y * cbModelParam._m0[1u].z;
        _1675 = _1655.z * cbModelParam._m0[1u].z;
    }
    float _1687 = ((((1.0 - _702) * ((_690 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_702 * _690)) * _666;
    float _1688 = _1687 * ((cbModelParam._m0[1u].w * (_1671 - _1571)) + _1571);
    float _1689 = _1687 * ((cbModelParam._m0[1u].w * (_1673 - _1573)) + _1573);
    float _1690 = _1687 * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1693 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, _1688 * cbSceneParam._m0[91u].x));
    float _1710 = _601 / cbSceneParam._m0[86u].x;
    float _1718 = (cbSceneParam._m0[88u].y * (1.0 - _575)) + cbSceneParam._m0[88u].z;
    float _3942 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1720 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 5.0;
    float _1725 = (_689 * cbMtdParam._m0[13u].z) * dot(vec3(_571, _572, _573), vec3(1.0, 0.0, 0.0));
    vec4 _1735 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1725 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1725 + _1710) * cbSceneParam._m0[86u].x, _602), _1720).w) + _1710) * cbSceneParam._m0[86u].x, _602), _1720);
    float _1751 = 1.0 - _1735.w;
    uvec4 _1761 = floatBitsToUint(cbInstanceData._m0[_641 + 5u]);
    uint _1763 = _1761.x * 14u;
    uint _1764 = _1763 + 13u;
    float _1769 = _666 + (-1.0);
    float _1772 = (cbLight._m0[_1764].x * _1769) + 1.0;
    float _1773 = (cbLight._m0[_1764].y * _1769) + 1.0;
    uint _1775 = _1763 + 4u;
    float _1786 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_571, _572, _573));
    float _1789 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1790 = _1763 + 5u;
    uint _1796 = _1763 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_571, _572, _573));
    float _1805 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    float _1870;
    float _1871;
    float _1872;
    if (_576 == 0.0)
    {
        float _3963 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _3974 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1824 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
        float _1826 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.3183098733425140380859375;
        _1870 = ((cbLight._m0[_1790].x * _1805) * _1826) + ((cbLight._m0[_1775].x * _1789) * _1824);
        _1871 = ((_1805 * cbLight._m0[_1790].y) * _1826) + ((_1789 * cbLight._m0[_1775].y) * _1824);
        _1872 = ((_1805 * cbLight._m0[_1790].z) * _1826) + ((_1789 * cbLight._m0[_1775].z) * _1824);
    }
    else
    {
        float _1836 = _1786 + _576;
        float _1839 = (_576 * 2.0) + 1.0;
        float _1840 = (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) / _1839;
        float _1847 = _1802 + _576;
        float _1849 = (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) / _1839;
        _1870 = (((_1849 * cbLight._m0[_1790].x) * _1805) + ((_1840 * cbLight._m0[_1775].x) * _1789)) * 0.3183098733425140380859375;
        _1871 = (((_1849 * cbLight._m0[_1790].y) * _1805) + ((_1840 * cbLight._m0[_1775].y) * _1789)) * 0.3183098733425140380859375;
        _1872 = (((_1849 * cbLight._m0[_1790].z) * _1805) + ((_1840 * cbLight._m0[_1775].z) * _1789)) * 0.3183098733425140380859375;
    }
    uint _1876 = _1763 + 8u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _575) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1763].x + _286;
    float _1895 = cbLight._m0[_1763].y + _287;
    float _1896 = cbLight._m0[_1763].z + _288;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1763].xyz));
    float _3995 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _1908 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1909 = dot(vec3(_571, _572, _573), vec3(_1901, _1902, _1903));
    float _4017 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1901, _1902, _1903));
    float _4028 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1893 * _1893;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1893;
    float _1944 = (0.5 / (((_1908 * ((_1907 * _1933) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _1933) + _1893) * _1907))) * _1907;
    float _4039 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    uint _1959 = _1763 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _575) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1796].x + _286;
    float _1976 = cbLight._m0[_1796].y + _287;
    float _1977 = cbLight._m0[_1796].z + _288;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1796].xyz));
    float _4050 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1989 = dot(vec3(_571, _572, _573), vec3(_1982, _1983, _1984));
    float _4061 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1982, _1983, _1984));
    float _4072 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1908 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2011) + _1974) * _1988))) * _1988;
    float _4083 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1959].x) * _2023) * _1805) + (((_1932 * cbLight._m0[_1876].x) * _1946) * _1789);
    float _2034 = (((_2010 * cbLight._m0[_1959].y) * _2023) * _1805) + (((_1932 * cbLight._m0[_1876].y) * _1946) * _1789);
    float _2035 = (((_2010 * cbLight._m0[_1959].z) * _2023) * _1805) + (((_1932 * cbLight._m0[_1876].z) * _1946) * _1789);
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    if (_1761.y == 0u)
    {
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2113 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2112;
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2112;
        float _2115 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2112;
        uvec4 _2127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2128 = _2127.x;
        uint _2139 = uint((float(_2127.y) * floor(float(uint(cbSceneParam._m0[85u].y * _602) / _2128))) + floor(float(uint(cbSceneParam._m0[85u].x * _601) / _2128)));
        float _2149 = (log2(_2115 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2150 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        uint _2153 = uint(isnan(14.0) ? _2150 : (isnan(_2150) ? 14.0 : min(_2150, 14.0)));
        uvec4 _2158 = texelFetch(g_lightClusterGridBuffer, int(((_2153 << 2u) + (_2139 << 6u)) >> 2u));
        uint _2159 = _2158.x;
        uint _2160 = _2127.z;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((((1u << ((_2160 >> 4u) & 15u)) + 4294967295u) & _2159) == 0u) || ((_2160 & 240u) == 0u))
        {
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
        }
        else
        {
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2153 << 5u) + (_2139 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2599)
                {
                    frontier_phi_56_pred = _2583;
                    frontier_phi_56_pred_1 = _2588;
                    frontier_phi_56_pred_2 = _2587;
                    frontier_phi_56_pred_3 = _2586;
                    frontier_phi_56_pred_4 = _2585;
                    frontier_phi_56_pred_5 = _2584;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2598;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2589 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        float _2774 = _2773.x;
                        float _2775 = _2773.y;
                        float _2776 = _2773.z;
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        uint _2795 = (_2738 * 48u) + 12u;
                        vec2 _2803 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x));
                        float _2809 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
                        float _2810 = _2809 * _2113;
                        float _2811 = _2809 * _2114;
                        float _2812 = _2809 * _2115;
                        float _2813 = _2754.x - _2113;
                        float _2814 = _2754.y - _2114;
                        float _2815 = _2754.z - _2115;
                        float _2816 = dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815));
                        float _2819 = inversesqrt(_2816);
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2823 = dot(vec3(_622, _625, _628), vec3(_2820, _2821, _2822));
                        float _2828 = 1.0 - (_2816 * _2754.w);
                        float _4104 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2830 = sqrt(_2816) * _2773.w;
                        float _2833 = 1.39999997615814208984375 / (_2830 + 1.39999997615814208984375);
                        float _2834 = _2833 * _2833;
                        float _2835 = 1.0 - _2834;
                        float _2837 = (_2835 * _2835) * _576;
                        float _2840 = ((_2835 * _2823) + _2834) + _2837;
                        float _2845 = _2830 * _2830;
                        float _2849 = ((isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))) * _2829) / (((_2837 * 2.0) + 1.0) * ((_2845 * 0.699999988079071044921875) + 1.0));
                        float _2853 = dot(vec3(_2820, _2821, _2822), vec3(_2810, _2811, _2812));
                        float _4120 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2860 = dot(vec3((-0.0) - _2810, (-0.0) - _2811, (-0.0) - _2812), vec3(_622, _625, _628)) + 1.0;
                        float _2862 = (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))) * 0.5;
                        float _2870 = ((_2862 * _2862) * _2803.x) * exp2((_2803.y * 32.0) * log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))));
                        float _2872 = _576 / (_576 + 1.0);
                        float _2888 = (-0.0) - _2113;
                        float _2889 = (-0.0) - _2114;
                        float _2890 = (-0.0) - _2115;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2905 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _690;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2895 + _2820;
                        float _2917 = _2896 + _2821;
                        float _2918 = _2897 + _2822;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_622, _625, _628), vec3(_2895, _2896, _2897));
                        float _4136 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2930 = dot(vec3(_622, _625, _628), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4147 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2833 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2823) + _2939;
                        float _4158 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4169 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2965 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_2937 * _2937) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2829;
                        _2663 = (((((_2774 * 0.3183098733425140380859375) * _2872) * _2870) + _2774) * _2849) + _2731;
                        _2664 = (((((_2775 * 0.3183098733425140380859375) * _2872) * _2870) + _2775) * _2849) + _2732;
                        _2665 = (((((_2776 * 0.3183098733425140380859375) * _2872) * _2870) + _2776) * _2849) + _2733;
                        _2660 = (_2965 * _2790.x) + _2728;
                        _2661 = (_2965 * _2790.y) + _2729;
                        _2662 = (_2965 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_56_pred = _2660;
                    frontier_phi_56_pred_1 = _2665;
                    frontier_phi_56_pred_2 = _2664;
                    frontier_phi_56_pred_3 = _2663;
                    frontier_phi_56_pred_4 = _2662;
                    frontier_phi_56_pred_5 = _2661;
                }
                _2383 = frontier_phi_56_pred;
                _2393 = frontier_phi_56_pred_1;
                _2391 = frontier_phi_56_pred_2;
                _2389 = frontier_phi_56_pred_3;
                _2387 = frontier_phi_56_pred_4;
                _2385 = frontier_phi_56_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2383;
                    _2584 = _2385;
                    _2585 = _2387;
                    _2586 = _2389;
                    _2587 = _2391;
                    _2588 = _2393;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
        }
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.z;
        uint _2399 = (_2397 >> 8u) & 15u;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((4294967295u << _2399) & _2159) == 0u)
        {
            _2551 = _2382;
            _2553 = _2384;
            _2555 = _2386;
            _2557 = _2388;
            _2559 = _2390;
            _2561 = _2392;
        }
        else
        {
            float _2576 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
            float _2577 = _2576 * _2113;
            float _2578 = _2576 * _2114;
            float _2579 = _2576 * _2115;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2399 < ((_2397 >> 12u) & 15u))
            {
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2711 = _2382;
                float _2712 = _2384;
                float _2713 = _2386;
                float _2714 = _2388;
                float _2715 = _2390;
                float _2716 = _2392;
                uint _2717 = _2399;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2153 << 5u) + (_2139 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2727)
                    {
                        frontier_phi_62_pred = _2716;
                        frontier_phi_62_pred_1 = _2715;
                        frontier_phi_62_pred_2 = _2714;
                        frontier_phi_62_pred_3 = _2713;
                        frontier_phi_62_pred_4 = _2712;
                        frontier_phi_62_pred_5 = _2711;
                    }
                    else
                    {
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _2983 = _2711;
                        float _2984 = _2712;
                        float _2985 = _2713;
                        float _2986 = _2714;
                        float _2987 = _2715;
                        float _2988 = _2716;
                        uint _2989 = _2726;
                        uint _2990;
                        vec4 _3015;
                        float _3016;
                        vec4 _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        vec3 _3046;
                        vec2 _3055;
                        vec4 _3070;
                        vec4 _3086;
                        float _3133;
                        bool _3134;
                        for (;;)
                        {
                            uint _3000 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2989));
                            _2990 = (_2989 + 4294967295u) & _2989;
                            uint _3002 = _3000 * 40u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3016 = _3015.w;
                            uint _3018 = (_3000 * 40u) + 4u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            _3032 = _3031.x;
                            _3033 = _3031.y;
                            _3034 = _3031.z;
                            uint _3036 = (_3000 * 40u) + 8u;
                            _3046 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x));
                            uint _3048 = (_3000 * 40u) + 12u;
                            _3055 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x));
                            uint _3057 = (_3000 * 40u) + 16u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_3000 * 40u) + 20u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3089 = (_3000 * 40u) + 24u;
                            vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3108 = (_3000 * 40u) + 28u;
                            vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3133 = fma(_2115, _3121.z, fma(_2114, _3121.y, _3121.x * _2113)) + _3121.w;
                            _3134 = !((fma(_2115, _3102.z, fma(_2114, _3102.y, _3102.x * _2113)) + _3102.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3134)
                            {
                                float _3160 = _3015.x - _2113;
                                float _3161 = _3015.y - _2114;
                                float _3162 = _3015.z - _2115;
                                float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                                float _3166 = inversesqrt(_3163);
                                float _3167 = _3166 * _3160;
                                float _3168 = _3166 * _3161;
                                float _3169 = _3166 * _3162;
                                float _3173 = 1.0 - (_3163 / (_3016 * _3016));
                                float _4180 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3178 = sqrt(_3163) * _3031.w;
                                float _3180 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                                float _3181 = _3180 * _3180;
                                float _3182 = 1.0 - _3181;
                                float _3184 = (_3182 * _3182) * _576;
                                float _3187 = ((_3182 * dot(vec3(_3167, _3168, _3169), vec3(_622, _625, _628))) + _3181) + _3184;
                                float _3192 = _3178 * _3178;
                                float _3197 = (fma(_2115, _3070.z, fma(_2114, _3070.y, _3070.x * _2113)) + _3070.w) / _3133;
                                float _3198 = (fma(_2115, _3086.z, fma(_2114, _3086.y, _3086.x * _2113)) + _3086.w) / _3133;
                                float _3202 = 1.0 - dot(vec2(_3197, _3198), vec2(_3197, _3198));
                                float _4196 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3204 = _3203 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3174) / (((_3184 * 2.0) + 1.0) * ((_3192 * 0.699999988079071044921875) + 1.0)));
                                float _3205 = (-0.0) - _2577;
                                float _3206 = (-0.0) - _2578;
                                float _3207 = (-0.0) - _2579;
                                float _3208 = dot(vec3(_3167, _3168, _3169), vec3(_2577, _2578, _2579));
                                float _4207 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3215 = dot(vec3(_3205, _3206, _3207), vec3(_622, _625, _628)) + 1.0;
                                float _3217 = (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * 0.5;
                                float _3224 = ((_3217 * _3217) * _3055.x) * exp2((_3055.y * 32.0) * log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))));
                                float _3226 = _576 / (_576 + 1.0);
                                float _3247 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3248 = 1.0 - _690;
                                float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                                float _3256 = _3255 * _3255;
                                float _3257 = _3256 * _3256;
                                float _3258 = _3167 - _2577;
                                float _3259 = _3168 - _2578;
                                float _3260 = _3169 - _2579;
                                float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                                float _3268 = dot(vec3(_622, _625, _628), vec3(_3205, _3206, _3207));
                                float _4223 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3272 = dot(vec3(_622, _625, _628), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                                float _4234 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                                float _3280 = _3180 * _3256;
                                float _3281 = _3280 * _3280;
                                float _3287 = ((1.0 - _3281) * dot(vec3(_622, _625, _628), vec3(_3167, _3168, _3169))) + _3281;
                                float _4245 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3289 = 1.0 - _3256;
                                float _3299 = (0.5 / (((_3288 * ((_3271 * _3289) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3256) * _3271))) * _3288;
                                float _4256 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3309 = (_3203 * _3174) * (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_3279 * _3279) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3034 * 0.3183098733425140380859375) * _3226) * _3224) + _3034) * _3204;
                                frontier_phi_68_pred_1 = ((((_3033 * 0.3183098733425140380859375) * _3226) * _3224) + _3033) * _3204;
                                frontier_phi_68_pred_2 = ((((_3032 * 0.3183098733425140380859375) * _3226) * _3224) + _3032) * _3204;
                                frontier_phi_68_pred_3 = _3309 * _3046.z;
                                frontier_phi_68_pred_4 = _3309 * _3046.y;
                                frontier_phi_68_pred_5 = _3309 * _3046.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3318 = frontier_phi_68_pred;
                            _3317 = frontier_phi_68_pred_1;
                            _3316 = frontier_phi_68_pred_2;
                            _3315 = frontier_phi_68_pred_3;
                            _3314 = frontier_phi_68_pred_4;
                            _3313 = frontier_phi_68_pred_5;
                            _2973 = _3316 + _2986;
                            _2974 = _3317 + _2987;
                            _2975 = _3318 + _2988;
                            _2970 = _3313 + _2983;
                            _2971 = _3314 + _2984;
                            _2972 = _3315 + _2985;
                            if (_2990 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2990;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2975;
                        frontier_phi_62_pred_1 = _2974;
                        frontier_phi_62_pred_2 = _2973;
                        frontier_phi_62_pred_3 = _2972;
                        frontier_phi_62_pred_4 = _2971;
                        frontier_phi_62_pred_5 = _2970;
                    }
                    _2562 = frontier_phi_62_pred;
                    _2560 = frontier_phi_62_pred_1;
                    _2558 = frontier_phi_62_pred_2;
                    _2556 = frontier_phi_62_pred_3;
                    _2554 = frontier_phi_62_pred_4;
                    _2552 = frontier_phi_62_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2552;
                        _2712 = _2554;
                        _2713 = _2556;
                        _2714 = _2558;
                        _2715 = _2560;
                        _2716 = _2562;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2562;
                frontier_phi_49_50_ladder_1 = _2558;
                frontier_phi_49_50_ladder_2 = _2560;
                frontier_phi_49_50_ladder_3 = _2556;
                frontier_phi_49_50_ladder_4 = _2554;
                frontier_phi_49_50_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_49_50_ladder = _2392;
                frontier_phi_49_50_ladder_1 = _2388;
                frontier_phi_49_50_ladder_2 = _2390;
                frontier_phi_49_50_ladder_3 = _2386;
                frontier_phi_49_50_ladder_4 = _2384;
                frontier_phi_49_50_ladder_5 = _2382;
            }
            _2551 = frontier_phi_49_50_ladder_5;
            _2553 = frontier_phi_49_50_ladder_4;
            _2555 = frontier_phi_49_50_ladder_3;
            _2557 = frontier_phi_49_50_ladder_1;
            _2559 = frontier_phi_49_50_ladder_2;
            _2561 = frontier_phi_49_50_ladder;
        }
        float _2566 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2172 = (_2566 * _2557) + _1870;
        _2174 = (_2566 * _2559) + _1871;
        _2176 = (_2566 * _2561) + _1872;
        _2178 = ((_2551 * 0.039999999105930328369140625) * _2566) + _2033;
        _2180 = ((_2553 * 0.039999999105930328369140625) * _2566) + _2034;
        _2182 = ((_2555 * 0.039999999105930328369140625) * _2566) + _2035;
    }
    else
    {
        _2172 = _1870;
        _2174 = _1871;
        _2176 = _1872;
        _2178 = _2033;
        _2180 = _2034;
        _2182 = _2035;
    }
    float _2196 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2197 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2198 = cbSceneParam._m0[86u].x * (_1710 + ((_689 * cbMtdParam._m0[13u].y) * dot(vec3(_571, _572, _573), vec3(_204, _205, _206))));
    float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
    float _2200 = isnan(_2197) ? _602 : (isnan(_602) ? _2197 : min(_602, _2197));
    vec4 _2202 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2199, _2200), 0.0);
    float _2204 = _2202.x;
    bool _2225 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2204)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2204))) > _595;
    float _2226 = _2225 ? _2199 : _601;
    float _2227 = _2225 ? _2200 : _602;
    vec4 _2229 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2226, _2227));
    vec4 _2234 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2226, _2227));
    float _2236 = _2234.x;
    float _2256 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2236)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2236))) - _595;
    bool _2266 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2270 = (isnan(_2256) ? 0.0 : (isnan(0.0) ? _2256 : max(0.0, _2256))) * (-1.44269502162933349609375);
    float _4287 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4298 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4309 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2297 = 0.959999978542327880859375 - (exp2(log2(1.0 - _681) * 5.0) * 0.959999978542327880859375);
    float _2300 = ((_2229.x * _2297) * exp2(_2270 * (_2266 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2303 = ((_2229.y * _2297) * exp2(_2270 * (_2266 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2306 = ((_2229.z * _2297) * exp2(_2270 * (_2266 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2328 = _601 / cbSceneParam._m0[86u].x;
    float _2329 = _602 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2407 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2408 = _2407 / _595;
        float _2419 = _2408 * _274;
        float _2420 = _275 * _2408;
        float _2421 = (-0.0) - _2420;
        float _2422 = _2408 * _276;
        float _2424 = (cbSceneParam._m0[77u].w * _2421) / _2407;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2420;
        float _2432 = sqrt(((_2419 * _2419) + (_2420 * _2420)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2407)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2441 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2673;
        if (abs((_2421 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2673 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2441 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2614 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2673 = ((abs(_2432 / _2421) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2441 * _2623) - exp2(_2441 * _2624)) * _2612))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2675 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2684 = exp2((_2673 * (-1.44269502162933349609375)) * (1.0 - _2675.w));
        float _2685 = log2(_2684);
        float _2701 = log2(_2348);
        _2443 = (exp2(_2701 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].x)) * _2675.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2445 = (exp2(_2701 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].y)) * _2675.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2447 = (exp2(_2701 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].z)) * _2675.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2449 = _2684 * _2348;
    }
    else
    {
        _2443 = _2345;
        _2445 = _2346;
        _2447 = _2347;
        _2449 = _2348;
    }
    bool _2461 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2462 = log2(_2449);
    float _2469 = exp2(_2462 * cbSceneParam._m0[78u].x) * ((_2300 + (((((_1687 * _1735.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1480) * _1751)) + _2178) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2172 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _666))) - _2300) * cbMtdParam._m0[15u].x));
    float _2470 = exp2(_2462 * cbSceneParam._m0[78u].y) * ((_2303 + (((((_1687 * _1735.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1480) * _1751)) + _2180) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2174 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _666))) - _2303) * cbMtdParam._m0[15u].x));
    float _2471 = exp2(_2462 * cbSceneParam._m0[78u].z) * ((_2306 + (((((_1687 * _1735.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1480) * _1751)) + _2182) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2176 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _666))) - _2306) * cbMtdParam._m0[15u].x));
    vec4 _2479 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_601, _602));
    float _2481 = _2479.x;
    float _2502 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2481)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2481))) - _595) * cbMtdParam._m0[14u].z;
    float _4360 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (cbInstanceData._m0[_641 + 6u].w * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)));
    float _2513 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2513 * (_2461 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.y = _2513 * (_2461 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.z = _2513 * (_2461 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.w = _2504;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2504;
}


