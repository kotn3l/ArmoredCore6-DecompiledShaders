#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1007;
float _3741;
float _3742;
float _3743;
float _3744;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _286 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _287 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _298 = dot(vec3(_276, _277, _278), vec3(_206, _207, _208));
    float _301 = dot(vec3(_276, _277, _278), vec3(_220, _221, _222));
    float _304 = dot(vec3(_276, _277, _278), vec3(_213, _214, _215));
    float _310 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _334 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _354 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_298 * cbMtdParam._m0[12u].x) * _310) * _334) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_301 * cbMtdParam._m0[12u].x) * _310) * _334) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _377 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _378 = _377 * _276;
    float _379 = _377 * _277;
    float _380 = _377 * _278;
    float _384 = dot(vec4(_378, _379, _380, 0.0), vec4(_213, _214, _215, 0.0)) - cbMtdParam._m0[12u].w;
    float _3753 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _391 = exp2(log2(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _406 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _354.x) * cbMtdParam._m0[9u].x) * ((_391 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _410 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _354.y) * cbMtdParam._m0[9u].y) * ((_391 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _414 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _354.z) * cbMtdParam._m0[9u].z) * ((_391 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _427 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    float _435 = (_427.x * 2.0) + (-1.0);
    float _436 = (_427.y * 2.0) + (-1.0);
    float _437 = dot(vec2(_435, _436), vec2(_435, _436));
    float _3769 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))));
    float _447 = cbMtdParam._m0[14u].w + _427.z;
    vec4 _459 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _286) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _287) + cbTextureTilingScale._m0[0u].w));
    float _463 = cbMtdParam._m0[13u].w * _459.x;
    float _481 = fma(_442, _213, fma(_436, _220, _435 * _206));
    float _484 = fma(_442, _214, fma(_436, _221, _435 * _207));
    float _487 = fma(_442, _215, fma(_436, _222, _435 * _208));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    float _492 = _491 * _481;
    float _493 = _491 * _484;
    float _494 = _491 * _487;
    float _3780 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _495 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _496 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3796 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3807 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3818 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _515 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _520 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _522 = _520.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _686 = sqrt(((_276 * _276) + (_277 * _277)) + (_278 * _278));
        float _692 = (cbMatDynParam._m0[5u].x * _686) + cbMatDynParam._m0[5u].y;
        float _3829 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _697 = (cbMatDynParam._m0[5u].z * _686) + cbMatDynParam._m0[5u].w;
        float _3840 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) - _693)) + _693) < ((_522 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _555 = fma(_494, cbSceneParam._m0[5u].z, fma(_493, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _492));
    float _558 = fma(_494, cbSceneParam._m0[6u].z, fma(_493, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _492));
    float _561 = fma(_494, cbSceneParam._m0[7u].z, fma(_493, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _492));
    uint _574 = uint(roundEven(NORMAL.w)) * 13u;
    uint _575 = _574 + 9u;
    uint _576 = _575 + uint(cbMatDynParam._m0[0u].w);
    float _582 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_576].x;
    float _583 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_576].y;
    float _584 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_576].z;
    float _3851 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    vec4 _596 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _599 = _596.x * TEXCOORD_1.w;
    float _600 = dot(vec3(_492, _493, _494), vec3(_378, _379, _380));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _492) - _378;
    float _608 = (_603 * _493) - _379;
    float _609 = (_603 * _494) - _380;
    float _613 = abs(dot(vec3(_378, _379, _380), vec3(_492, _493, _494)));
    float _3884 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _622 = 10.0 / (_515 + 10.0);
    float _623 = sqrt(_495);
    float _635 = exp2((_623 * 5.0) * log2(1.0 - (_614 * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_675, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667));
        float _735 = fma(_675, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667));
        float _739 = fma(_675, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667));
        float _764 = _667 + _492;
        float _765 = _671 + _493;
        float _766 = _675 + _494;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_492, _493, _494), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3932 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_492, _493, _494), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3965 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_492, _493, _494), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3998 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1050 = fma(_675, cbModelParam._m0[30u].z, fma(_671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _667));
        float _1054 = fma(_675, cbModelParam._m0[31u].z, fma(_671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _667));
        float _1058 = fma(_675, cbModelParam._m0[32u].z, fma(_671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _667));
        float _1081 = _667 + _492;
        float _1082 = _671 + _493;
        float _1083 = _675 + _494;
        float _1093 = fma(_1083, cbModelParam._m0[30u].z, fma(_1082, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081)) - _1050;
        float _1094 = fma(_1083, cbModelParam._m0[31u].z, fma(_1082, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081)) - _1054;
        float _1095 = fma(_1083, cbModelParam._m0[32u].z, fma(_1082, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081)) - _1058;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1050 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1054 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[35u].z) + ((((((_1058 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1149 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1116.x + (-0.5));
        float _1151 = _1149 * (_1116.y + (-0.5));
        float _1152 = _1149 * (_1116.z + (-0.5));
        float _1159 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1123.x + (-0.5));
        float _1161 = _1159 * (_1123.y + (-0.5));
        float _1162 = _1159 * (_1123.z + (-0.5));
        float _1169 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1130.x + (-0.5));
        float _1171 = _1169 * (_1130.y + (-0.5));
        float _1172 = _1169 * (_1130.z + (-0.5));
        float _1179 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1137.x + (-0.5));
        float _1181 = _1179 * (_1137.y + (-0.5));
        float _1182 = _1179 * (_1137.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_492, _493, _494), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4061 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1213 + 1.0))) + _1218) * _1183;
        float _1228 = _1151 * 0.5;
        float _1229 = _1161 * 0.5;
        float _1230 = _1171 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_492, _493, _494), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4094 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1255 + 1.0))) + _1260) * _1184;
        float _1270 = _1152 * 0.5;
        float _1271 = _1162 * 0.5;
        float _1272 = _1172 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_492, _493, _494), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4127 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1297 + 1.0))) + _1302) * _1185;
        _1319 = _1152;
        _1320 = _1151;
        _1321 = _1150;
        _1322 = _1162;
        _1323 = _1161;
        _1324 = _1160;
        _1325 = _1172;
        _1326 = _1171;
        _1327 = _1170;
        _1328 = _1185;
        _1329 = _1184;
        _1330 = _1183;
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = _1007;
        _1329 = _1007;
        _1330 = _1007;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1019)) + _1019;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1020)) + _1020;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1021)) + _1021;
    float _1366 = fma(_1345, cbSceneParam._m0[89u].z, fma(_1344, cbSceneParam._m0[89u].y, _1343 * cbSceneParam._m0[89u].x));
    float _1369 = fma(_1345, cbSceneParam._m0[90u].z, fma(_1344, cbSceneParam._m0[90u].y, _1343 * cbSceneParam._m0[90u].x));
    float _1372 = fma(_1345, cbSceneParam._m0[91u].z, fma(_1344, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1343));
    float _1387 = _607 * 0.5;
    float _1388 = _608 * 0.5;
    float _1389 = _609 * 0.5;
    float _1390 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1393 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1396 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1430;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1403 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1407 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1411 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1418 = dot(vec4(cbModelParam._m0[39u]), vec4(_1387, _1388, _1389, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1441;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1432 = dot(vec4(cbModelParam._m0[40u]), vec4(_1387, _1388, _1389, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1445 = (_1441 * cbModelParam._m0[1u].x) + (_1430 * (1.0 - cbModelParam._m0[1u].x));
    float _1455 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _495);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1455 : min(cbModelParam._m0[25u].z, _1455));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1503 = fma(_675, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667)) + cbModelParam._m0[13u].w;
        float _1507 = fma(_675, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667)) + cbModelParam._m0[14u].w;
        float _1511 = fma(_675, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667)) + cbModelParam._m0[15u].w;
        float _1514 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1517 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1520 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1548;
        if (_1514 > 0.0)
        {
            _1548 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1548 = frontier_phi_17_15_ladder;
        }
        float _1771;
        if (_1517 > 0.0)
        {
            _1771 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1771 = frontier_phi_26_22_ladder;
        }
        float _2035;
        if (_1520 > 0.0)
        {
            _2035 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2035 = frontier_phi_38_33_ladder;
        }
        float _2037 = isnan(_1771) ? _1548 : (isnan(_1548) ? _1771 : min(_1548, _1771));
        float _2038 = isnan(_2035) ? _2037 : (isnan(_2037) ? _2035 : min(_2037, _2035));
        float _2042 = (_2038 * _1514) + _1503;
        float _2043 = (_2038 * _1517) + _1507;
        float _2044 = (_2038 * _1520) + _1511;
        float _2045 = _2038 * 9.9999997473787516355514526367188e-05;
        float _2047 = (-1.0) - _2045;
        float _2049 = _2045 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2044 > _2049) || ((_2044 < _2047) || ((_2043 > _2049) || ((_2043 < _2047) || ((_2042 < _2047) || (_2042 > _2049))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2044, cbModelParam._m0[9u].z, fma(_2043, cbModelParam._m0[9u].y, _2042 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2044, cbModelParam._m0[10u].z, fma(_2043, cbModelParam._m0[10u].y, _2042 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2044, cbModelParam._m0[11u].z, fma(_2043, cbModelParam._m0[11u].y, _2042 * cbModelParam._m0[11u].x))), _1456);
            frontier_phi_16_38_ladder = _2198.x * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2198.y * cbModelParam._m0[1u].y;
        }
        _1536 = frontier_phi_16_38_ladder;
        _1538 = frontier_phi_16_38_ladder_2;
        _1540 = frontier_phi_16_38_ladder_1;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1456);
        _1536 = _1524.x * cbModelParam._m0[1u].y;
        _1538 = _1524.y * cbModelParam._m0[1u].y;
        _1540 = _1524.z * cbModelParam._m0[1u].y;
    }
    float _1544 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _495);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1544 : min(cbModelParam._m0[25u].w, _1544));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1600 = fma(_675, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667)) + cbModelParam._m0[21u].w;
        float _1604 = fma(_675, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667)) + cbModelParam._m0[22u].w;
        float _1608 = fma(_675, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667)) + cbModelParam._m0[23u].w;
        float _1611 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1614 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1617 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1776;
        if (_1611 > 0.0)
        {
            _1776 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1776 = frontier_phi_28_24_ladder;
        }
        float _2062;
        if (_1614 > 0.0)
        {
            _2062 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2062 = frontier_phi_40_35_ladder;
        }
        float _2381;
        if (_1617 > 0.0)
        {
            _2381 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2381 = frontier_phi_49_47_ladder;
        }
        float _2383 = isnan(_2062) ? _1776 : (isnan(_1776) ? _2062 : min(_1776, _2062));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1611) + _1600;
        float _2389 = (_2384 * _1614) + _1604;
        float _2390 = (_2384 * _1617) + _1608;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1545);
            frontier_phi_25_49_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1636 = frontier_phi_25_49_ladder_2;
        _1638 = frontier_phi_25_49_ladder_1;
        _1640 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1545);
        _1636 = _1620.x * cbModelParam._m0[1u].z;
        _1638 = _1620.y * cbModelParam._m0[1u].z;
        _1640 = _1620.z * cbModelParam._m0[1u].z;
    }
    float _1652 = ((((1.0 - _635) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_635 * _623)) * _599;
    float _1653 = _1652 * ((cbModelParam._m0[1u].w * (_1636 - _1536)) + _1536);
    float _1654 = _1652 * ((cbModelParam._m0[1u].w * (_1638 - _1538)) + _1538);
    float _1655 = _1652 * ((cbModelParam._m0[1u].w * (_1640 - _1540)) + _1540);
    float _1658 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, _1653 * cbSceneParam._m0[91u].x));
    float _1675 = _534 / cbSceneParam._m0[86u].x;
    float _1683 = (cbSceneParam._m0[88u].y * (1.0 - _495)) + cbSceneParam._m0[88u].z;
    float _4253 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1685 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 5.0;
    float _1690 = (_622 * cbMtdParam._m0[13u].z) * dot(vec3(_492, _493, _494), vec3(1.0, 0.0, 0.0));
    vec4 _1700 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1690 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1690 + _1675) * cbSceneParam._m0[86u].x, _535), _1685).w) + _1675) * cbSceneParam._m0[86u].x, _535), _1685);
    float _1716 = 1.0 - _1700.w;
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1763 = _1750 / _1762;
    float _1764 = _1754 / _1762;
    float _1765 = _1758 / _1762;
    float _1912;
    float _1913;
    float _1914;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1792 = ((uint(_1765 > cbSceneParam._m0[59u].y) + uint(_1765 > cbSceneParam._m0[59u].x)) + uint(_1765 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1793 = _1792 + 43u;
        uint _1801 = _1792 + 44u;
        uint _1809 = _1792 + 45u;
        uint _1817 = _1792 + 46u;
        float _1828 = fma(_1762, cbSceneParam._m0[_1793].w, fma(_1758, cbSceneParam._m0[_1793].z, fma(_1754, cbSceneParam._m0[_1793].y, _1750 * cbSceneParam._m0[_1793].x)));
        float _1832 = fma(_1762, cbSceneParam._m0[_1801].w, fma(_1758, cbSceneParam._m0[_1801].z, fma(_1754, cbSceneParam._m0[_1801].y, _1750 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1762, cbSceneParam._m0[_1817].w, fma(_1758, cbSceneParam._m0[_1817].z, fma(_1754, cbSceneParam._m0[_1817].y, _1750 * cbSceneParam._m0[_1817].x)));
        float _1845 = cbSceneParam._m0[33u].z * _1840;
        float _1847 = cbSceneParam._m0[33u].w * _1840;
        float _1850 = fma(_1762, cbSceneParam._m0[_1809].w, fma(_1758, cbSceneParam._m0[_1809].z, fma(_1754, cbSceneParam._m0[_1809].y, _1750 * cbSceneParam._m0[_1809].x))) / _1840;
        float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
        float _4264 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1905 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1828) / _1840, (_1847 + _1832) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1828) / _1840, (_1832 - _1845) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1845) / _1840, (_1832 - _1847) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1847) / _1840, (_1845 + _1832) / _1840), _1850), 0.0)).x), vec4(0.25)));
        _1912 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
        _1913 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
        _1914 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1912 = 1.0;
        _1913 = 1.0;
        _1914 = 1.0;
    }
    float _1978;
    float _1980;
    float _1982;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1966 = fma(_1762, cbSceneParam._m0[63u].w, fma(_1758, cbSceneParam._m0[63u].z, fma(_1754, cbSceneParam._m0[63u].y, _1750 * cbSceneParam._m0[63u].x)));
        float _1967 = fma(_1762, cbSceneParam._m0[60u].w, fma(_1758, cbSceneParam._m0[60u].z, fma(_1754, cbSceneParam._m0[60u].y, _1750 * cbSceneParam._m0[60u].x))) / _1966;
        float _1968 = fma(_1762, cbSceneParam._m0[61u].w, fma(_1758, cbSceneParam._m0[61u].z, fma(_1754, cbSceneParam._m0[61u].y, _1750 * cbSceneParam._m0[61u].x))) / _1966;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1967 >= cbSceneParam._m0[64u].x) && (_1968 >= cbSceneParam._m0[64u].y)) && (_1967 <= cbSceneParam._m0[64u].z)) && (_1968 <= cbSceneParam._m0[64u].w))
        {
            float _2075 = fma(_1762, cbSceneParam._m0[62u].w, fma(_1758, cbSceneParam._m0[62u].z, fma(_1754, cbSceneParam._m0[62u].y, _1750 * cbSceneParam._m0[62u].x))) / _1966;
            float _2079 = isnan(cbSceneParam._m0[41u].w) ? _2075 : (isnan(_2075) ? cbSceneParam._m0[41u].w : max(_2075, cbSceneParam._m0[41u].w));
            float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
            float _4280 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
            float _2129 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1967, cbSceneParam._m0[33u].w + _1968), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1967, _1968 - cbSceneParam._m0[33u].z), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].z, _1968 - cbSceneParam._m0[33u].w), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1968), _2079), 0.0)).x), vec4(0.25)));
            float _2133 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
            float _2134 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
            float _2135 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2135) ? _1914 : (isnan(_1914) ? _2135 : min(_1914, _2135));
            frontier_phi_37_36_ladder_1 = isnan(_2134) ? _1913 : (isnan(_1913) ? _2134 : min(_1913, _2134));
            frontier_phi_37_36_ladder_2 = isnan(_2133) ? _1912 : (isnan(_1912) ? _2133 : min(_1912, _2133));
        }
        else
        {
            frontier_phi_37_36_ladder = _1914;
            frontier_phi_37_36_ladder_1 = _1913;
            frontier_phi_37_36_ladder_2 = _1912;
        }
        _1978 = frontier_phi_37_36_ladder_2;
        _1980 = frontier_phi_37_36_ladder_1;
        _1982 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1978 = _1912;
        _1980 = _1913;
        _1982 = _1914;
    }
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_574 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1995 = _599 + (-1.0);
    float _1998 = (cbLight._m0[_1990].x * _1995) + 1.0;
    float _1999 = (cbLight._m0[_1990].y * _1995) + 1.0;
    uint _2001 = _1989 + 4u;
    float _2012 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_492, _493, _494));
    float _2015 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    float _2016 = cbLight._m0[_2001].x * _1978;
    float _2017 = cbLight._m0[_2001].y * _1980;
    float _2018 = cbLight._m0[_2001].z * _1982;
    uint _2019 = _1989 + 5u;
    uint _2025 = _1989 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_492, _493, _494));
    float _2034 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    float _2207;
    float _2208;
    float _2209;
    if (_496 == 0.0)
    {
        float _4316 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _4327 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2144 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
        float _2146 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
        _2207 = ((cbLight._m0[_2019].x * _2034) * _2146) + ((_2016 * _2015) * _2144);
        _2208 = ((_2034 * cbLight._m0[_2019].y) * _2146) + ((_2017 * _2015) * _2144);
        _2209 = ((_2034 * cbLight._m0[_2019].z) * _2146) + ((_2018 * _2015) * _2144);
    }
    else
    {
        float _2156 = _2012 + _496;
        float _2159 = (_496 * 2.0) + 1.0;
        float _2160 = (isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) / _2159;
        float _2167 = _2031 + _496;
        float _2169 = (isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) / _2159;
        _2207 = (((_2169 * cbLight._m0[_2019].x) * _2034) + ((_2016 * _2160) * _2015)) * 0.3183098733425140380859375;
        _2208 = (((_2169 * cbLight._m0[_2019].y) * _2034) + ((_2017 * _2160) * _2015)) * 0.3183098733425140380859375;
        _2209 = (((_2169 * cbLight._m0[_2019].z) * _2034) + ((_2018 * _2160) * _2015)) * 0.3183098733425140380859375;
    }
    uint _2213 = _1989 + 8u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _495) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_1989].x + _378;
    float _2232 = cbLight._m0[_1989].y + _379;
    float _2233 = cbLight._m0[_1989].z + _380;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1989].xyz));
    float _4348 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _2245 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2246 = dot(vec3(_492, _493, _494), vec3(_2238, _2239, _2240));
    float _4370 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2238, _2239, _2240));
    float _4381 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2230 * _2230;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2230;
    float _2281 = (0.5 / (((_2245 * ((_2244 * _2270) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2270) + _2230) * _2244))) * _2244;
    float _4392 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    uint _2299 = _1989 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _495) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2025].x + _378;
    float _2316 = cbLight._m0[_2025].y + _379;
    float _2317 = cbLight._m0[_2025].z + _380;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2025].xyz));
    float _4403 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2329 = dot(vec3(_492, _493, _494), vec3(_2322, _2323, _2324));
    float _4414 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2322, _2323, _2324));
    float _4425 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2351 = 1.0 - _2314;
    float _2361 = (0.5 / (((_2245 * ((_2328 * _2351) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2351) + _2314) * _2328))) * _2328;
    float _4436 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2373 = (((_2350 * cbLight._m0[_2299].x) * _2363) * _2034) + ((((cbLight._m0[_2213].x * _1978) * _2269) * _2283) * _2015);
    float _2374 = (((_2350 * cbLight._m0[_2299].y) * _2363) * _2034) + ((((cbLight._m0[_2213].y * _1980) * _2269) * _2283) * _2015);
    float _2375 = (((_2350 * cbLight._m0[_2299].z) * _2363) * _2034) + ((((cbLight._m0[_2213].z * _1982) * _2269) * _2283) * _2015);
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_1987.y == 0u)
    {
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.x;
        uint _2430 = uint((float(_2418.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2419))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2419)));
        float _2440 = (log2(_1765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2441 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        uint _2444 = uint(isnan(14.0) ? _2441 : (isnan(_2441) ? 14.0 : min(_2441, 14.0)));
        uvec4 _2449 = texelFetch(g_lightClusterGridBuffer, int(((_2444 << 2u) + (_2430 << 6u)) >> 2u));
        uint _2450 = _2449.x;
        uint _2451 = _2418.z;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((((1u << ((_2451 >> 4u) & 15u)) + 4294967295u) & _2450) == 0u) || ((_2451 & 240u) == 0u))
        {
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
        }
        else
        {
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            uint _2857 = 0u;
            uint _2866;
            bool _2867;
            for (;;)
            {
                _2866 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                _2867 = _2866 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2867)
                {
                    frontier_phi_66_pred = _2853;
                    frontier_phi_66_pred_1 = _2852;
                    frontier_phi_66_pred_2 = _2851;
                    frontier_phi_66_pred_3 = _2854;
                    frontier_phi_66_pred_4 = _2856;
                    frontier_phi_66_pred_5 = _2855;
                }
                else
                {
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    uint _3002;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2866;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3006 = uint(findLSB(_3002)) + (_2857 << 5u);
                        uint _3003 = (_3002 + 4294967295u) & _3002;
                        uint _3008 = _3006 * 48u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3028 = (_3006 * 48u) + 4u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        float _3042 = _3041.x;
                        float _3043 = _3041.y;
                        float _3044 = _3041.z;
                        uint _3047 = (_3006 * 48u) + 8u;
                        vec3 _3058 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x));
                        uint _3063 = (_3006 * 48u) + 12u;
                        vec2 _3071 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x));
                        float _3077 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
                        float _3078 = _3077 * _1763;
                        float _3079 = _3077 * _1764;
                        float _3080 = _3077 * _1765;
                        float _3081 = _3022.x - _1763;
                        float _3082 = _3022.y - _1764;
                        float _3083 = _3022.z - _1765;
                        float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                        float _3087 = inversesqrt(_3084);
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3091 = dot(vec3(_555, _558, _561), vec3(_3088, _3089, _3090));
                        float _3096 = 1.0 - (_3084 * _3022.w);
                        float _4457 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3098 = sqrt(_3084) * _3041.w;
                        float _3101 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                        float _3102 = _3101 * _3101;
                        float _3103 = 1.0 - _3102;
                        float _3105 = (_3103 * _3103) * _496;
                        float _3108 = ((_3103 * _3091) + _3102) + _3105;
                        float _3113 = _3098 * _3098;
                        float _3118 = ((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3097) / (((_3105 * 2.0) + 1.0) * ((_3113 * 0.699999988079071044921875) + 1.0));
                        float _3122 = dot(vec3(_3088, _3089, _3090), vec3(_3078, _3079, _3080));
                        float _4473 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3129 = dot(vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080), vec3(_555, _558, _561)) + 1.0;
                        float _3131 = (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * 0.5;
                        float _3139 = ((_3131 * _3131) * _3071.x) * exp2((_3071.y * 32.0) * log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))));
                        float _3141 = _496 / (_496 + 1.0);
                        float _3157 = (-0.0) - _1763;
                        float _3158 = (-0.0) - _1764;
                        float _3159 = (-0.0) - _1765;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3173 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _623;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3164 + _3088;
                        float _3185 = _3165 + _3089;
                        float _3186 = _3166 + _3090;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_555, _558, _561), vec3(_3164, _3165, _3166));
                        float _4489 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3198 = dot(vec3(_555, _558, _561), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4500 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3101 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3091) + _3207;
                        float _4511 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4522 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3205 * _3205) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125))) * _3097;
                        _2926 = (((((_3042 * 0.3183098733425140380859375) * _3141) * _3139) + _3042) * _3118) + _2999;
                        _2927 = (((((_3043 * 0.3183098733425140380859375) * _3141) * _3139) + _3043) * _3118) + _3000;
                        _2928 = (((((_3044 * 0.3183098733425140380859375) * _3141) * _3139) + _3044) * _3118) + _3001;
                        _2923 = (_3233 * _3058.x) + _2996;
                        _2924 = (_3233 * _3058.y) + _2997;
                        _2925 = (_3233 * _3058.z) + _2998;
                        if (_3003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _3003;
                        }
                    }
                    frontier_phi_66_pred = _2925;
                    frontier_phi_66_pred_1 = _2924;
                    frontier_phi_66_pred_2 = _2923;
                    frontier_phi_66_pred_3 = _2926;
                    frontier_phi_66_pred_4 = _2928;
                    frontier_phi_66_pred_5 = _2927;
                }
                _2673 = frontier_phi_66_pred;
                _2671 = frontier_phi_66_pred_1;
                _2669 = frontier_phi_66_pred_2;
                _2675 = frontier_phi_66_pred_3;
                _2679 = frontier_phi_66_pred_4;
                _2677 = frontier_phi_66_pred_5;
                uint _2858 = _2857 + 1u;
                if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2851 = _2669;
                    _2852 = _2671;
                    _2853 = _2673;
                    _2854 = _2675;
                    _2855 = _2677;
                    _2856 = _2679;
                    _2857 = _2858;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
        }
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.z;
        uint _2685 = (_2683 >> 8u) & 15u;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((4294967295u << _2685) & _2450) == 0u)
        {
            _2819 = _2668;
            _2821 = _2670;
            _2823 = _2672;
            _2825 = _2674;
            _2827 = _2676;
            _2829 = _2678;
        }
        else
        {
            float _2844 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
            float _2845 = _2844 * _1763;
            float _2846 = _2844 * _1764;
            float _2847 = _2844 * _1765;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2685 < ((_2683 >> 12u) & 15u))
            {
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2979 = _2668;
                float _2980 = _2670;
                float _2981 = _2672;
                float _2982 = _2674;
                float _2983 = _2676;
                float _2984 = _2678;
                uint _2985 = _2685;
                uint _2994;
                bool _2995;
                for (;;)
                {
                    _2994 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                    _2995 = _2994 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2995)
                    {
                        frontier_phi_77_pred = _2981;
                        frontier_phi_77_pred_1 = _2980;
                        frontier_phi_77_pred_2 = _2979;
                        frontier_phi_77_pred_3 = _2984;
                        frontier_phi_77_pred_4 = _2983;
                        frontier_phi_77_pred_5 = _2982;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3260 = _2979;
                        float _3261 = _2980;
                        float _3262 = _2981;
                        float _3263 = _2982;
                        float _3264 = _2983;
                        float _3265 = _2984;
                        uint _3266 = _2994;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        vec3 _3323;
                        vec2 _3332;
                        vec4 _3347;
                        vec4 _3363;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3277 = ((_2985 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.x;
                            _3310 = _3308.y;
                            _3311 = _3308.z;
                            uint _3313 = (_3277 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3277 * 40u) + 12u;
                            _3332 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x));
                            uint _3334 = (_3277 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3350 = (_3277 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3366 = (_3277 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3277 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_1765, _3398.z, fma(_1764, _3398.y, _3398.x * _1763)) + _3398.w;
                            _3411 = !((fma(_1765, _3379.z, fma(_1764, _3379.y, _3379.x * _1763)) + _3379.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3411)
                            {
                                float _3437 = _3292.x - _1763;
                                float _3438 = _3292.y - _1764;
                                float _3439 = _3292.z - _1765;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3293 * _3293));
                                float _4533 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3455 = sqrt(_3440) * _3308.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3459 = 1.0 - _3458;
                                float _3461 = (_3459 * _3459) * _496;
                                float _3464 = ((_3459 * dot(vec3(_3444, _3445, _3446), vec3(_555, _558, _561))) + _3458) + _3461;
                                float _3469 = _3455 * _3455;
                                float _3474 = (fma(_1765, _3347.z, fma(_1764, _3347.y, _3347.x * _1763)) + _3347.w) / _3410;
                                float _3475 = (fma(_1765, _3363.z, fma(_1764, _3363.y, _3363.x * _1763)) + _3363.w) / _3410;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4549 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3451) / (((_3461 * 2.0) + 1.0) * ((_3469 * 0.699999988079071044921875) + 1.0)));
                                float _3482 = (-0.0) - _2845;
                                float _3483 = (-0.0) - _2846;
                                float _3484 = (-0.0) - _2847;
                                float _3485 = dot(vec3(_3444, _3445, _3446), vec3(_2845, _2846, _2847));
                                float _4560 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3492 = dot(vec3(_3482, _3483, _3484), vec3(_555, _558, _561)) + 1.0;
                                float _3494 = (isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * 0.5;
                                float _3501 = ((_3494 * _3494) * _3332.x) * exp2((_3332.y * 32.0) * log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))));
                                float _3503 = _496 / (_496 + 1.0);
                                float _3524 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3525 = 1.0 - _623;
                                float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                                float _3533 = _3532 * _3532;
                                float _3534 = _3533 * _3533;
                                float _3535 = _3444 - _2845;
                                float _3536 = _3445 - _2846;
                                float _3537 = _3446 - _2847;
                                float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                                float _3545 = dot(vec3(_555, _558, _561), vec3(_3482, _3483, _3484));
                                float _4576 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3549 = dot(vec3(_555, _558, _561), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                                float _4587 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                                float _3557 = _3457 * _3533;
                                float _3558 = _3557 * _3557;
                                float _3564 = ((1.0 - _3558) * dot(vec3(_555, _558, _561), vec3(_3444, _3445, _3446))) + _3558;
                                float _4598 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3566 = 1.0 - _3533;
                                float _3576 = (0.5 / (((_3565 * ((_3548 * _3566) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3533) * _3548))) * _3565;
                                float _4609 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3586 = (_3480 * _3451) * (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3556 * _3556) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3586 * _3323.z;
                                frontier_phi_83_pred_1 = _3586 * _3323.y;
                                frontier_phi_83_pred_2 = _3586 * _3323.x;
                                frontier_phi_83_pred_3 = ((((_3311 * 0.3183098733425140380859375) * _3503) * _3501) + _3311) * _3481;
                                frontier_phi_83_pred_4 = ((((_3310 * 0.3183098733425140380859375) * _3503) * _3501) + _3310) * _3481;
                                frontier_phi_83_pred_5 = ((((_3309 * 0.3183098733425140380859375) * _3503) * _3501) + _3309) * _3481;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3592 = frontier_phi_83_pred;
                            _3591 = frontier_phi_83_pred_1;
                            _3590 = frontier_phi_83_pred_2;
                            _3595 = frontier_phi_83_pred_3;
                            _3594 = frontier_phi_83_pred_4;
                            _3593 = frontier_phi_83_pred_5;
                            _3250 = _3593 + _3263;
                            _3251 = _3594 + _3264;
                            _3252 = _3595 + _3265;
                            _3247 = _3590 + _3260;
                            _3248 = _3591 + _3261;
                            _3249 = _3592 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3249;
                        frontier_phi_77_pred_1 = _3248;
                        frontier_phi_77_pred_2 = _3247;
                        frontier_phi_77_pred_3 = _3252;
                        frontier_phi_77_pred_4 = _3251;
                        frontier_phi_77_pred_5 = _3250;
                    }
                    _2824 = frontier_phi_77_pred;
                    _2822 = frontier_phi_77_pred_1;
                    _2820 = frontier_phi_77_pred_2;
                    _2830 = frontier_phi_77_pred_3;
                    _2828 = frontier_phi_77_pred_4;
                    _2826 = frontier_phi_77_pred_5;
                    uint _2986 = _2985 + 1u;
                    if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2979 = _2820;
                        _2980 = _2822;
                        _2981 = _2824;
                        _2982 = _2826;
                        _2983 = _2828;
                        _2984 = _2830;
                        _2985 = _2986;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2828;
                frontier_phi_58_59_ladder_2 = _2826;
                frontier_phi_58_59_ladder_3 = _2822;
                frontier_phi_58_59_ladder_4 = _2820;
                frontier_phi_58_59_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_58_59_ladder = _2678;
                frontier_phi_58_59_ladder_1 = _2676;
                frontier_phi_58_59_ladder_2 = _2674;
                frontier_phi_58_59_ladder_3 = _2670;
                frontier_phi_58_59_ladder_4 = _2668;
                frontier_phi_58_59_ladder_5 = _2672;
            }
            _2819 = frontier_phi_58_59_ladder_4;
            _2821 = frontier_phi_58_59_ladder_3;
            _2823 = frontier_phi_58_59_ladder_5;
            _2825 = frontier_phi_58_59_ladder_2;
            _2827 = frontier_phi_58_59_ladder_1;
            _2829 = frontier_phi_58_59_ladder;
        }
        float _2834 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2463 = (_2834 * _2825) + _2207;
        _2465 = (_2834 * _2827) + _2208;
        _2467 = (_2834 * _2829) + _2209;
        _2469 = ((_2819 * 0.039999999105930328369140625) * _2834) + _2373;
        _2471 = ((_2821 * 0.039999999105930328369140625) * _2834) + _2374;
        _2473 = ((_2823 * 0.039999999105930328369140625) * _2834) + _2375;
    }
    else
    {
        _2463 = _2207;
        _2465 = _2208;
        _2467 = _2209;
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
    }
    float _2487 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2488 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2489 = cbSceneParam._m0[86u].x * (_1675 + ((_622 * cbMtdParam._m0[13u].y) * dot(vec3(_492, _493, _494), vec3(_206, _207, _208))));
    float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
    float _2491 = isnan(_2488) ? _535 : (isnan(_535) ? _2488 : min(_535, _2488));
    vec4 _2493 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2490, _2491), 0.0);
    float _2495 = _2493.x;
    bool _2516 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2495)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2495))) > _515;
    float _2517 = _2516 ? _2490 : _534;
    float _2518 = _2516 ? _2491 : _535;
    vec4 _2520 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2517, _2518));
    vec4 _2525 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2517, _2518));
    float _2527 = _2525.x;
    float _2547 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2527)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2527))) - _515;
    bool _2557 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2561 = (isnan(_2547) ? 0.0 : (isnan(0.0) ? _2547 : max(0.0, _2547))) * (-1.44269502162933349609375);
    float _4640 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4651 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4662 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2588 = 0.959999978542327880859375 - (exp2(log2(1.0 - _614) * 5.0) * 0.959999978542327880859375);
    float _2591 = ((_2520.x * _2588) * exp2(_2561 * (_2557 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2594 = ((_2520.y * _2588) * exp2(_2561 * (_2557 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2597 = ((_2520.z * _2588) * exp2(_2561 * (_2557 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2605 = (_2591 + (((((_1652 * _1700.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1445) * _1716)) + _2469) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2463 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _599))) - _2591) * cbMtdParam._m0[15u].x);
    float _2607 = (_2594 + (((((_1652 * _1700.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1445) * _1716)) + _2471) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2465 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _599))) - _2594) * cbMtdParam._m0[15u].x);
    float _2609 = (_2597 + (((((_1652 * _1700.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1445) * _1716)) + _2473) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2467 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _599))) - _2597) * cbMtdParam._m0[15u].x);
    uint _2610 = _574 + 6u;
    float _2618 = _534 / cbSceneParam._m0[86u].x;
    float _2619 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2633 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, (log2((isnan(cbSceneParam._m0[77u].w) ? _515 : (isnan(_515) ? cbSceneParam._m0[77u].w : min(_515, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2635 = _2633.x;
    float _2636 = _2633.y;
    float _2637 = _2633.z;
    float _2638 = _2633.w;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_515 > cbSceneParam._m0[78u].w)
    {
        float _2693 = isnan(_515) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _515 : min(cbSceneParam._m0[80u].w, _515));
        float _2694 = _2693 / _515;
        float _2705 = _2694 * _276;
        float _2706 = _277 * _2694;
        float _2707 = (-0.0) - _2706;
        float _2708 = _2694 * _278;
        float _2710 = (cbSceneParam._m0[77u].w * _2707) / _2693;
        float _2711 = _2710 + cbSceneParam._m0[79u].w;
        float _2712 = cbSceneParam._m0[79u].w - _2706;
        float _2718 = sqrt(((_2705 * _2705) + (_2706 * _2706)) + (_2708 * _2708));
        float _2721 = (1.0 - (cbSceneParam._m0[77u].w / _2693)) * _2718;
        float _2726 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2727 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2936;
        if (abs((_2707 - _2710) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2936 = ((((_2711 > 0.0) ? exp2(_2726 * _2711) : (2.0 - exp2(_2727 * _2711))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2721;
        }
        else
        {
            float _2880 = 1.0 / cbSceneParam._m0[80u].x;
            float _2881 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : max(_2711, _2712));
            float _2882 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : min(_2711, _2712));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            _2936 = ((abs(_2718 / _2707) * cbSceneParam._m0[80u].y) * ((((_2891 - _2892) * 2.0) - ((exp2(_2726 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0)))) - exp2(_2726 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))))) * _2880)) - ((exp2(_2727 * _2891) - exp2(_2727 * _2892)) * _2880))) + (_2721 * cbSceneParam._m0[80u].z);
        }
        vec4 _2938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, 1.0), 0.0);
        float _2947 = exp2((_2936 * (-1.44269502162933349609375)) * (1.0 - _2938.w));
        float _2948 = log2(_2947);
        float _2964 = log2(_2638);
        _2729 = (exp2(_2964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].x)) * _2938.x) / cbSceneParam._m0[78u].x)) + _2635;
        _2731 = (exp2(_2964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].y)) * _2938.y) / cbSceneParam._m0[78u].y)) + _2636;
        _2733 = (exp2(_2964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].z)) * _2938.z) / cbSceneParam._m0[78u].z)) + _2637;
        _2735 = _2947 * _2638;
    }
    else
    {
        _2729 = _2635;
        _2731 = _2636;
        _2733 = _2637;
        _2735 = _2638;
    }
    bool _2974;
    float _2790;
    vec4 _2793;
    float _2795;
    vec4 _2797;
    float _2805;
    float _2806;
    float _2807;
    float _2808;
    bool _2818;
    for (;;)
    {
        bool _2747 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2748 = log2(_2735);
        float _2755 = exp2(_2748 * cbSceneParam._m0[78u].x) * _2605;
        float _2756 = exp2(_2748 * cbSceneParam._m0[78u].y) * _2607;
        float _2757 = exp2(_2748 * cbSceneParam._m0[78u].z) * _2609;
        vec4 _2765 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_534, _535));
        float _2767 = _2765.x;
        float _2788 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2767)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2767))) - _515) * cbMtdParam._m0[14u].z;
        float _4713 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        _2790 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * cbInstanceData._m0[_2610].w;
        float _2791 = _522 + (-0.5);
        _2793 = cbMtdParam._m0[1u];
        _2795 = _2793.y * _2791;
        _2797 = cbMatDynParam._m0[0u];
        float _2804 = (roundEven(_2797.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2805 = _2804 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
        _2806 = _2804 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
        _2807 = _2804 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2733)));
        _2808 = _2791 * 0.999000012874603271484375;
        _2818 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2818)
        {
            if ((cbInstanceData._m0[_574 + 7u].x + _2808) < 0.5)
            {
                _2974 = true;
                break;
            }
        }
        uint _2915 = _575 + uint(_2797.w);
        if ((cbInstanceData._m0[_2915].w < 1.0) && ((cbInstanceData._m0[_2915].w + _2808) < 0.5))
        {
            _2974 = true;
            break;
        }
        if ((_2795 + 1.0) < _2793.x)
        {
            _2974 = true;
            break;
        }
        _2974 = false;
        break;
    }
    float _3238;
    if (_2974)
    {
        discard_state = true;
        _3238 = 0.0;
    }
    else
    {
        _3238 = _2790;
    }
    SV_Target.x = _2805;
    SV_Target.y = _2806;
    SV_Target.z = _2807;
    SV_Target.w = _3238;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2790;
    discard_exit();
}


