#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _287 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _288 = _287 * _276;
    float _289 = _287 * _277;
    float _290 = _287 * _278;
    float _298 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _299 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _313 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_298 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_299 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3474 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    float _333 = fma(_330, _213, fma(_323, _220, _321 * _206));
    float _336 = fma(_330, _214, fma(_323, _221, _321 * _207));
    float _339 = fma(_330, _215, fma(_323, _222, _321 * _208));
    float _343 = inversesqrt(dot(vec3(_333, _336, _339), vec3(_333, _336, _339)));
    float _352 = (dot(vec4(_288, _289, _290, 0.0), vec4(_343 * _333, _343 * _336, _343 * _339, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _365 = dot(vec3(_276, _277, _278), vec3(_206, _207, _208));
    float _368 = dot(vec3(_276, _277, _278), vec3(_220, _221, _222));
    float _371 = dot(vec3(_276, _277, _278), vec3(_213, _214, _215));
    float _377 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    float _398 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _418 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_365 * cbMtdParam._m0[12u].x) * _377) * _398) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_368 * cbMtdParam._m0[12u].x) * _377) * _398) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _441 = dot(vec4(_288, _289, _290, 0.0), vec4(_213, _214, _215, 0.0)) - cbMtdParam._m0[12u].w;
    float _3485 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _448 = exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _463 = (((((sin(_352) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _418.x) * cbMtdParam._m0[9u].x) * ((_448 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _472 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _418.y) * cbMtdParam._m0[9u].y) * ((_448 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_352 * 0.85000002384185791015625) + 1.0);
    float _481 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _418.z) * cbMtdParam._m0[9u].z) * ((_448 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_352 * 0.699999988079071044921875) + 1.0);
    vec4 _493 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _298) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _299) + cbTextureTilingScale._m0[3u].w));
    float _499 = ((cbMtdParam._m0[12u].z * _493.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _512 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    float _519 = (_512.x * 2.0) + (-1.0);
    float _520 = (_512.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3501 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))));
    float _528 = cbMtdParam._m0[14u].w + _512.z;
    vec4 _540 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _298) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _299) + cbTextureTilingScale._m0[0u].w));
    float _544 = cbMtdParam._m0[13u].w * _540.x;
    float _562 = fma(_526, _213, fma(_520, _220, _519 * _206));
    float _565 = fma(_526, _214, fma(_520, _221, _519 * _207));
    float _568 = fma(_526, _215, fma(_520, _222, _519 * _208));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3512 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3523 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _577 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _578 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3539 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3550 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3561 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _627 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _630 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    uint _643 = uint(roundEven(NORMAL.w)) * 13u;
    uint _645 = (_643 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _651 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_645].x;
    float _652 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_645].y;
    float _653 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_645].z;
    float _3572 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _668 = _665.x * TEXCOORD_1.w;
    float _669 = dot(vec3(_573, _574, _575), vec3(_288, _289, _290));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _573) - _288;
    float _677 = (_672 * _574) - _289;
    float _678 = (_672 * _575) - _290;
    float _682 = abs(dot(vec3(_288, _289, _290), vec3(_573, _574, _575)));
    float _3605 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _691 = 10.0 / (_597 + 10.0);
    float _692 = sqrt(_577);
    float _704 = exp2((_692 * 5.0) * log2(1.0 - (_683 * 0.999000012874603271484375))) / (4.0 - (_692 * 3.0));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _775 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _779 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _804 = _736 + _573;
        float _805 = _740 + _574;
        float _806 = _744 + _575;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_573, _574, _575), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3653 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_573, _574, _575), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3686 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_573, _574, _575), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3719 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1091 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1095 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1118 = _736 + _573;
        float _1119 = _740 + _574;
        float _1120 = _744 + _575;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_573, _574, _575), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3782 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_573, _574, _575), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3815 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_573, _574, _575), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3848 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _676 * 0.5;
    float _1425 = _677 * 0.5;
    float _1426 = _678 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1554 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1557 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1585 = frontier_phi_14_12_ladder;
        }
        float _1829;
        if (_1554 > 0.0)
        {
            _1829 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1829 = frontier_phi_23_19_ladder;
        }
        float _2067;
        if (_1557 > 0.0)
        {
            _2067 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2067 = frontier_phi_34_30_ladder;
        }
        float _2069 = isnan(_1829) ? _1585 : (isnan(_1585) ? _1829 : min(_1585, _1829));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1551) + _1540;
        float _2075 = (_2070 * _1554) + _1544;
        float _2076 = (_2070 * _1557) + _1548;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2077;
        float _2081 = _2077 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 > _2081) || ((_2075 < _2079) || ((_2074 < _2079) || (_2074 > _2081))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2076, cbModelParam._m0[9u].z, fma(_2075, cbModelParam._m0[9u].y, _2074 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2076, cbModelParam._m0[10u].z, fma(_2075, cbModelParam._m0[10u].y, _2074 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2076, cbModelParam._m0[11u].z, fma(_2075, cbModelParam._m0[11u].y, _2074 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_13_34_ladder = _2405.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2405.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2405.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_13_34_ladder_2;
        _1575 = frontier_phi_13_34_ladder_1;
        _1577 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1651 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1654 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1834;
        if (_1648 > 0.0)
        {
            _1834 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1834 = frontier_phi_25_21_ladder;
        }
        float _2094;
        if (_1651 > 0.0)
        {
            _2094 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2094 = frontier_phi_36_32_ladder;
        }
        float _2557;
        if (_1654 > 0.0)
        {
            _2557 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2557 = frontier_phi_47_42_ladder;
        }
        float _2559 = isnan(_2094) ? _1834 : (isnan(_1834) ? _2094 : min(_1834, _2094));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1648) + _1637;
        float _2565 = (_2560 * _1651) + _1641;
        float _2566 = (_2560 * _1654) + _1645;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_22_47_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_22_47_ladder_2;
        _1675 = frontier_phi_22_47_ladder_1;
        _1677 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1582);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1689 = ((((1.0 - _704) * ((_692 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_704 * _692)) * _668;
    float _1690 = _1689 * ((cbModelParam._m0[1u].w * (_1673 - _1573)) + _1573);
    float _1691 = _1689 * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1692 = _1689 * ((cbModelParam._m0[1u].w * (_1677 - _1577)) + _1577);
    float _1695 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    float _1712 = _603 / cbSceneParam._m0[86u].x;
    float _1720 = (cbSceneParam._m0[88u].y * (1.0 - _577)) + cbSceneParam._m0[88u].z;
    float _3974 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1722 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 5.0;
    float _1727 = (_691 * cbMtdParam._m0[13u].z) * dot(vec3(_573, _574, _575), vec3(1.0, 0.0, 0.0));
    vec4 _1737 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1727 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1727 + _1712) * cbSceneParam._m0[86u].x, _604), _1722).w) + _1712) * cbSceneParam._m0[86u].x, _604), _1722);
    float _1753 = 1.0 - _1737.w;
    vec4 _1761 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_603, _604));
    float _1763 = _1761.w;
    float _1775 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1763);
    float _1776 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1763);
    float _1777 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1763);
    uvec4 _1781 = floatBitsToUint(cbInstanceData._m0[_643 + 5u]);
    uint _1783 = _1781.x * 14u;
    uint _1784 = _1783 + 13u;
    float _1789 = _668 + (-1.0);
    float _1792 = (cbLight._m0[_1784].x * _1789) + 1.0;
    float _1793 = (cbLight._m0[_1784].y * _1789) + 1.0;
    uint _1795 = _1783 + 4u;
    float _1806 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_573, _574, _575));
    float _1809 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    float _1810 = cbLight._m0[_1795].x * _1775;
    float _1811 = cbLight._m0[_1795].y * _1776;
    float _1812 = cbLight._m0[_1795].z * _1777;
    uint _1813 = _1783 + 5u;
    uint _1819 = _1783 | 1u;
    float _1825 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_573, _574, _575));
    float _1828 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    float _1893;
    float _1894;
    float _1895;
    if (_578 == 0.0)
    {
        float _3995 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _4006 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1847 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
        float _1849 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
        _1893 = ((cbLight._m0[_1813].x * _1828) * _1849) + ((_1810 * _1809) * _1847);
        _1894 = ((_1828 * cbLight._m0[_1813].y) * _1849) + ((_1811 * _1809) * _1847);
        _1895 = ((_1828 * cbLight._m0[_1813].z) * _1849) + ((_1812 * _1809) * _1847);
    }
    else
    {
        float _1859 = _1806 + _578;
        float _1862 = (_578 * 2.0) + 1.0;
        float _1863 = (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) / _1862;
        float _1870 = _1825 + _578;
        float _1872 = (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) / _1862;
        _1893 = (((_1872 * cbLight._m0[_1813].x) * _1828) + ((_1810 * _1863) * _1809)) * 0.3183098733425140380859375;
        _1894 = (((_1872 * cbLight._m0[_1813].y) * _1828) + ((_1811 * _1863) * _1809)) * 0.3183098733425140380859375;
        _1895 = (((_1872 * cbLight._m0[_1813].z) * _1828) + ((_1812 * _1863) * _1809)) * 0.3183098733425140380859375;
    }
    uint _1899 = _1783 + 8u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _577) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1783].x + _288;
    float _1918 = cbLight._m0[_1783].y + _289;
    float _1919 = cbLight._m0[_1783].z + _290;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1783].xyz));
    float _4027 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1931 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1932 = dot(vec3(_573, _574, _575), vec3(_1924, _1925, _1926));
    float _4049 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1924, _1925, _1926));
    float _4060 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1916 * _1916;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1956 = 1.0 - _1916;
    float _1967 = (0.5 / (((_1931 * ((_1930 * _1956) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _1956) + _1916) * _1930))) * _1930;
    float _4071 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    uint _1985 = _1783 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _577) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1819].x + _288;
    float _2002 = cbLight._m0[_1819].y + _289;
    float _2003 = cbLight._m0[_1819].z + _290;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1819].xyz));
    float _4082 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2015 = dot(vec3(_573, _574, _575), vec3(_2008, _2009, _2010));
    float _4093 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2008, _2009, _2010));
    float _4104 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _2000;
    float _2047 = (0.5 / (((_1931 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2037) + _2000) * _2014))) * _2014;
    float _4115 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2059 = (((_2036 * cbLight._m0[_1985].x) * _2049) * _1828) + ((((cbLight._m0[_1899].x * _1775) * _1955) * _1969) * _1809);
    float _2060 = (((_2036 * cbLight._m0[_1985].y) * _2049) * _1828) + ((((cbLight._m0[_1899].y * _1776) * _1955) * _1969) * _1809);
    float _2061 = (((_2036 * cbLight._m0[_1985].z) * _2049) * _1828) + ((((cbLight._m0[_1899].z * _1777) * _1955) * _1969) * _1809);
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    if (_1781.y == 0u)
    {
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2138;
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2138;
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2138;
        uvec4 _2153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2154 = _2153.x;
        uint _2165 = uint((float(_2153.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2154))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2154)));
        float _2175 = (log2(_2141 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2176 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        uint _2179 = uint(isnan(14.0) ? _2176 : (isnan(_2176) ? 14.0 : min(_2176, 14.0)));
        uvec4 _2184 = texelFetch(g_lightClusterGridBuffer, int(((_2179 << 2u) + (_2165 << 6u)) >> 2u));
        uint _2185 = _2184.x;
        uint _2186 = _2153.z;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((((1u << ((_2186 >> 4u) & 15u)) + 4294967295u) & _2185) == 0u) || ((_2186 & 240u) == 0u))
        {
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
        }
        else
        {
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2179 << 5u) + (_2165 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2631)
                {
                    frontier_phi_56_pred = _2615;
                    frontier_phi_56_pred_1 = _2620;
                    frontier_phi_56_pred_2 = _2619;
                    frontier_phi_56_pred_3 = _2618;
                    frontier_phi_56_pred_4 = _2617;
                    frontier_phi_56_pred_5 = _2616;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2630;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2621 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        float _2806 = _2805.x;
                        float _2807 = _2805.y;
                        float _2808 = _2805.z;
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        uint _2827 = (_2770 * 48u) + 12u;
                        vec2 _2835 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x));
                        float _2841 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
                        float _2842 = _2841 * _2139;
                        float _2843 = _2841 * _2140;
                        float _2844 = _2841 * _2141;
                        float _2845 = _2786.x - _2139;
                        float _2846 = _2786.y - _2140;
                        float _2847 = _2786.z - _2141;
                        float _2848 = dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847));
                        float _2851 = inversesqrt(_2848);
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2855 = dot(vec3(_624, _627, _630), vec3(_2852, _2853, _2854));
                        float _2860 = 1.0 - (_2848 * _2786.w);
                        float _4136 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2862 = sqrt(_2848) * _2805.w;
                        float _2865 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                        float _2866 = _2865 * _2865;
                        float _2867 = 1.0 - _2866;
                        float _2869 = (_2867 * _2867) * _578;
                        float _2872 = ((_2867 * _2855) + _2866) + _2869;
                        float _2877 = _2862 * _2862;
                        float _2881 = ((isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * _2861) / (((_2869 * 2.0) + 1.0) * ((_2877 * 0.699999988079071044921875) + 1.0));
                        float _2885 = dot(vec3(_2852, _2853, _2854), vec3(_2842, _2843, _2844));
                        float _4152 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2892 = dot(vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844), vec3(_624, _627, _630)) + 1.0;
                        float _2894 = (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))) * 0.5;
                        float _2902 = ((_2894 * _2894) * _2835.x) * exp2((_2835.y * 32.0) * log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))));
                        float _2904 = _578 / (_578 + 1.0);
                        float _2920 = (-0.0) - _2139;
                        float _2921 = (-0.0) - _2140;
                        float _2922 = (-0.0) - _2141;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2937 = exp2(log2(1.0 / ((_2877 * 3.5) + 5.0)) * 0.25);
                        float _2938 = 1.0 - _692;
                        float _2945 = sqrt(1.0 - ((1.0 - (_2938 * _2938)) * (1.0 - (_2937 * _2937))));
                        float _2946 = _2945 * _2945;
                        float _2947 = _2946 * _2946;
                        float _2948 = _2927 + _2852;
                        float _2949 = _2928 + _2853;
                        float _2950 = _2929 + _2854;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2958 = dot(vec3(_624, _627, _630), vec3(_2927, _2928, _2929));
                        float _4168 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2962 = dot(vec3(_624, _627, _630), vec3(_2954 * _2948, _2954 * _2949, _2954 * _2950));
                        float _4179 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2969 = ((_2965 * _2965) * (_2947 + (-1.0))) + 1.0;
                        float _2970 = _2865 * _2946;
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2855) + _2971;
                        float _4190 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2976 = 1.0 - _2946;
                        float _2986 = (0.5 / (((_2975 * ((_2961 * _2976) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _2976) + _2946) * _2961))) * _2975;
                        float _4201 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2997 = (((_2947 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_2969 * _2969) * ((_2877 * 2.1991131305694580078125) + 3.141590118408203125))) * _2861;
                        _2695 = (((((_2806 * 0.3183098733425140380859375) * _2904) * _2902) + _2806) * _2881) + _2763;
                        _2696 = (((((_2807 * 0.3183098733425140380859375) * _2904) * _2902) + _2807) * _2881) + _2764;
                        _2697 = (((((_2808 * 0.3183098733425140380859375) * _2904) * _2902) + _2808) * _2881) + _2765;
                        _2692 = (_2997 * _2822.x) + _2760;
                        _2693 = (_2997 * _2822.y) + _2761;
                        _2694 = (_2997 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_56_pred = _2692;
                    frontier_phi_56_pred_1 = _2697;
                    frontier_phi_56_pred_2 = _2696;
                    frontier_phi_56_pred_3 = _2695;
                    frontier_phi_56_pred_4 = _2694;
                    frontier_phi_56_pred_5 = _2693;
                }
                _2415 = frontier_phi_56_pred;
                _2425 = frontier_phi_56_pred_1;
                _2423 = frontier_phi_56_pred_2;
                _2421 = frontier_phi_56_pred_3;
                _2419 = frontier_phi_56_pred_4;
                _2417 = frontier_phi_56_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2415;
                    _2616 = _2417;
                    _2617 = _2419;
                    _2618 = _2421;
                    _2619 = _2423;
                    _2620 = _2425;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
        }
        uvec4 _2428 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2429 = _2428.z;
        uint _2431 = (_2429 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2431) & _2185) == 0u)
        {
            _2583 = _2414;
            _2585 = _2416;
            _2587 = _2418;
            _2589 = _2420;
            _2591 = _2422;
            _2593 = _2424;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
            float _2609 = _2608 * _2139;
            float _2610 = _2608 * _2140;
            float _2611 = _2608 * _2141;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2431 < ((_2429 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2743 = _2414;
                float _2744 = _2416;
                float _2745 = _2418;
                float _2746 = _2420;
                float _2747 = _2422;
                float _2748 = _2424;
                uint _2749 = _2431;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2179 << 5u) + (_2165 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2759)
                    {
                        frontier_phi_62_pred = _2748;
                        frontier_phi_62_pred_1 = _2747;
                        frontier_phi_62_pred_2 = _2746;
                        frontier_phi_62_pred_3 = _2745;
                        frontier_phi_62_pred_4 = _2744;
                        frontier_phi_62_pred_5 = _2743;
                    }
                    else
                    {
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3015 = _2743;
                        float _3016 = _2744;
                        float _3017 = _2745;
                        float _3018 = _2746;
                        float _3019 = _2747;
                        float _3020 = _2748;
                        uint _3021 = _2758;
                        uint _3022;
                        vec4 _3047;
                        float _3048;
                        vec4 _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        vec3 _3078;
                        vec2 _3087;
                        vec4 _3102;
                        vec4 _3118;
                        float _3165;
                        bool _3166;
                        for (;;)
                        {
                            uint _3032 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3021));
                            _3022 = (_3021 + 4294967295u) & _3021;
                            uint _3034 = _3032 * 40u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            _3048 = _3047.w;
                            uint _3050 = (_3032 * 40u) + 4u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3064 = _3063.x;
                            _3065 = _3063.y;
                            _3066 = _3063.z;
                            uint _3068 = (_3032 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3080 = (_3032 * 40u) + 12u;
                            _3087 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x));
                            uint _3089 = (_3032 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3105 = (_3032 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3032 * 40u) + 24u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3140 = (_3032 * 40u) + 28u;
                            vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3165 = fma(_2141, _3153.z, fma(_2140, _3153.y, _3153.x * _2139)) + _3153.w;
                            _3166 = !((fma(_2141, _3134.z, fma(_2140, _3134.y, _3134.x * _2139)) + _3134.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3166)
                            {
                                float _3192 = _3047.x - _2139;
                                float _3193 = _3047.y - _2140;
                                float _3194 = _3047.z - _2141;
                                float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                                float _3198 = inversesqrt(_3195);
                                float _3199 = _3198 * _3192;
                                float _3200 = _3198 * _3193;
                                float _3201 = _3198 * _3194;
                                float _3205 = 1.0 - (_3195 / (_3048 * _3048));
                                float _4212 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3210 = sqrt(_3195) * _3063.w;
                                float _3212 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                                float _3213 = _3212 * _3212;
                                float _3214 = 1.0 - _3213;
                                float _3216 = (_3214 * _3214) * _578;
                                float _3219 = ((_3214 * dot(vec3(_3199, _3200, _3201), vec3(_624, _627, _630))) + _3213) + _3216;
                                float _3224 = _3210 * _3210;
                                float _3229 = (fma(_2141, _3102.z, fma(_2140, _3102.y, _3102.x * _2139)) + _3102.w) / _3165;
                                float _3230 = (fma(_2141, _3118.z, fma(_2140, _3118.y, _3118.x * _2139)) + _3118.w) / _3165;
                                float _3234 = 1.0 - dot(vec2(_3229, _3230), vec2(_3229, _3230));
                                float _4228 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3236 = _3235 * (((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3206) / (((_3216 * 2.0) + 1.0) * ((_3224 * 0.699999988079071044921875) + 1.0)));
                                float _3237 = (-0.0) - _2609;
                                float _3238 = (-0.0) - _2610;
                                float _3239 = (-0.0) - _2611;
                                float _3240 = dot(vec3(_3199, _3200, _3201), vec3(_2609, _2610, _2611));
                                float _4239 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3247 = dot(vec3(_3237, _3238, _3239), vec3(_624, _627, _630)) + 1.0;
                                float _3249 = (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * 0.5;
                                float _3256 = ((_3249 * _3249) * _3087.x) * exp2((_3087.y * 32.0) * log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))));
                                float _3258 = _578 / (_578 + 1.0);
                                float _3279 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _692;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3199 - _2609;
                                float _3291 = _3200 - _2610;
                                float _3292 = _3201 - _2611;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_624, _627, _630), vec3(_3237, _3238, _3239));
                                float _4255 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3304 = dot(vec3(_624, _627, _630), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4266 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3212 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_624, _627, _630), vec3(_3199, _3200, _3201))) + _3313;
                                float _4277 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4288 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3235 * _3206) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_3311 * _3311) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3066 * 0.3183098733425140380859375) * _3258) * _3256) + _3066) * _3236;
                                frontier_phi_68_pred_1 = ((((_3065 * 0.3183098733425140380859375) * _3258) * _3256) + _3065) * _3236;
                                frontier_phi_68_pred_2 = ((((_3064 * 0.3183098733425140380859375) * _3258) * _3256) + _3064) * _3236;
                                frontier_phi_68_pred_3 = _3341 * _3078.z;
                                frontier_phi_68_pred_4 = _3341 * _3078.y;
                                frontier_phi_68_pred_5 = _3341 * _3078.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3350 = frontier_phi_68_pred;
                            _3349 = frontier_phi_68_pred_1;
                            _3348 = frontier_phi_68_pred_2;
                            _3347 = frontier_phi_68_pred_3;
                            _3346 = frontier_phi_68_pred_4;
                            _3345 = frontier_phi_68_pred_5;
                            _3005 = _3348 + _3018;
                            _3006 = _3349 + _3019;
                            _3007 = _3350 + _3020;
                            _3002 = _3345 + _3015;
                            _3003 = _3346 + _3016;
                            _3004 = _3347 + _3017;
                            if (_3022 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3022;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _3007;
                        frontier_phi_62_pred_1 = _3006;
                        frontier_phi_62_pred_2 = _3005;
                        frontier_phi_62_pred_3 = _3004;
                        frontier_phi_62_pred_4 = _3003;
                        frontier_phi_62_pred_5 = _3002;
                    }
                    _2594 = frontier_phi_62_pred;
                    _2592 = frontier_phi_62_pred_1;
                    _2590 = frontier_phi_62_pred_2;
                    _2588 = frontier_phi_62_pred_3;
                    _2586 = frontier_phi_62_pred_4;
                    _2584 = frontier_phi_62_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2584;
                        _2744 = _2586;
                        _2745 = _2588;
                        _2746 = _2590;
                        _2747 = _2592;
                        _2748 = _2594;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2594;
                frontier_phi_49_50_ladder_1 = _2590;
                frontier_phi_49_50_ladder_2 = _2592;
                frontier_phi_49_50_ladder_3 = _2588;
                frontier_phi_49_50_ladder_4 = _2586;
                frontier_phi_49_50_ladder_5 = _2584;
            }
            else
            {
                frontier_phi_49_50_ladder = _2424;
                frontier_phi_49_50_ladder_1 = _2420;
                frontier_phi_49_50_ladder_2 = _2422;
                frontier_phi_49_50_ladder_3 = _2418;
                frontier_phi_49_50_ladder_4 = _2416;
                frontier_phi_49_50_ladder_5 = _2414;
            }
            _2583 = frontier_phi_49_50_ladder_5;
            _2585 = frontier_phi_49_50_ladder_4;
            _2587 = frontier_phi_49_50_ladder_3;
            _2589 = frontier_phi_49_50_ladder_1;
            _2591 = frontier_phi_49_50_ladder_2;
            _2593 = frontier_phi_49_50_ladder;
        }
        float _2598 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2198 = (_2598 * _2589) + _1893;
        _2200 = (_2598 * _2591) + _1894;
        _2202 = (_2598 * _2593) + _1895;
        _2204 = ((_2583 * 0.039999999105930328369140625) * _2598) + _2059;
        _2206 = ((_2585 * 0.039999999105930328369140625) * _2598) + _2060;
        _2208 = ((_2587 * 0.039999999105930328369140625) * _2598) + _2061;
    }
    else
    {
        _2198 = _1893;
        _2200 = _1894;
        _2202 = _1895;
        _2204 = _2059;
        _2206 = _2060;
        _2208 = _2061;
    }
    float _2228 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2229 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2230 = cbSceneParam._m0[86u].x * ((_603 / cbSceneParam._m0[86u].x) + ((_691 * cbMtdParam._m0[13u].y) * dot(vec3(_573, _574, _575), vec3(_206, _207, _208))));
    float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
    float _2232 = isnan(_2229) ? _604 : (isnan(_604) ? _2229 : min(_604, _2229));
    vec4 _2234 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2231, _2232), 0.0);
    float _2236 = _2234.x;
    bool _2257 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2236)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2236))) > _597;
    float _2258 = _2257 ? _2231 : _603;
    float _2259 = _2257 ? _2232 : _604;
    vec4 _2261 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2258, _2259));
    vec4 _2266 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2258, _2259));
    float _2268 = _2266.x;
    float _2288 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2268)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2268))) - _597;
    bool _2298 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2302 = (isnan(_2288) ? 0.0 : (isnan(0.0) ? _2288 : max(0.0, _2288))) * (-1.44269502162933349609375);
    float _4319 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4330 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4341 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2329 = 0.959999978542327880859375 - (exp2(log2(1.0 - _683) * 5.0) * 0.959999978542327880859375);
    float _2332 = ((_2261.x * _2329) * exp2(_2302 * (_2298 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2335 = ((_2261.y * _2329) * exp2(_2302 * (_2298 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2338 = ((_2261.z * _2329) * exp2(_2302 * (_2298 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2360 = _603 / cbSceneParam._m0[86u].x;
    float _2361 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2375 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2360, _2361, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2377 = _2375.x;
    float _2378 = _2375.y;
    float _2379 = _2375.z;
    float _2380 = _2375.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _2439 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _2440 = _2439 / _597;
        float _2451 = _2440 * _276;
        float _2452 = _277 * _2440;
        float _2453 = (-0.0) - _2452;
        float _2454 = _2440 * _278;
        float _2456 = (cbSceneParam._m0[77u].w * _2453) / _2439;
        float _2457 = _2456 + cbSceneParam._m0[79u].w;
        float _2458 = cbSceneParam._m0[79u].w - _2452;
        float _2464 = sqrt(((_2451 * _2451) + (_2452 * _2452)) + (_2454 * _2454));
        float _2467 = (1.0 - (cbSceneParam._m0[77u].w / _2439)) * _2464;
        float _2472 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2705;
        if (abs((_2453 - _2456) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2705 = ((((_2457 > 0.0) ? exp2(_2472 * _2457) : (2.0 - exp2(_2473 * _2457))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2467;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : max(_2457, _2458));
            float _2646 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : min(_2457, _2458));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2705 = ((abs(_2464 / _2453) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2472 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2472 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2473 * _2655) - exp2(_2473 * _2656)) * _2644))) + (_2467 * cbSceneParam._m0[80u].z);
        }
        vec4 _2707 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2360, _2361, 1.0), 0.0);
        float _2716 = exp2((_2705 * (-1.44269502162933349609375)) * (1.0 - _2707.w));
        float _2717 = log2(_2716);
        float _2733 = log2(_2380);
        _2475 = (exp2(_2733 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].x)) * _2707.x) / cbSceneParam._m0[78u].x)) + _2377;
        _2477 = (exp2(_2733 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].y)) * _2707.y) / cbSceneParam._m0[78u].y)) + _2378;
        _2479 = (exp2(_2733 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].z)) * _2707.z) / cbSceneParam._m0[78u].z)) + _2379;
        _2481 = _2716 * _2380;
    }
    else
    {
        _2475 = _2377;
        _2477 = _2378;
        _2479 = _2379;
        _2481 = _2380;
    }
    bool _2493 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2494 = log2(_2481);
    float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * ((_2332 + (((((_1689 * _1737.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1482) * _1753)) + _2204) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2198 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _668))) - _2332) * cbMtdParam._m0[15u].x));
    float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * ((_2335 + (((((_1689 * _1737.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1482) * _1753)) + _2206) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2200 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _668))) - _2335) * cbMtdParam._m0[15u].x));
    float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * ((_2338 + (((((_1689 * _1737.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1482) * _1753)) + _2208) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2202 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _668))) - _2338) * cbMtdParam._m0[15u].x));
    vec4 _2511 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_603, _604));
    float _2513 = _2511.x;
    float _2534 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2513)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2513))) - _597) * cbMtdParam._m0[14u].z;
    float _4392 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (cbInstanceData._m0[_643 + 6u].w * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)));
    float _2545 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2545 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.y = _2545 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2477)));
    SV_Target.z = _2545 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2479)));
    SV_Target.w = _2536;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2536;
}


