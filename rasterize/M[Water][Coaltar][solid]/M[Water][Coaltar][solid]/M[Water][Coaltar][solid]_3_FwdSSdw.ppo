#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _983;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _284 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _285 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _296 = dot(vec3(_274, _275, _276), vec3(_204, _205, _206));
    float _299 = dot(vec3(_274, _275, _276), vec3(_218, _219, _220));
    float _302 = dot(vec3(_274, _275, _276), vec3(_211, _212, _213));
    float _308 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _332 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _352 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_296 * cbMtdParam._m0[12u].x) * _308) * _332) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_299 * cbMtdParam._m0[12u].x) * _308) * _332) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _375 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _376 = _375 * _274;
    float _377 = _375 * _275;
    float _378 = _375 * _276;
    float _382 = dot(vec4(_376, _377, _378, 0.0), vec4(_211, _212, _213, 0.0)) - cbMtdParam._m0[12u].w;
    float _3411 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _389 = exp2(log2(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _404 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _352.x) * cbMtdParam._m0[9u].x) * ((_389 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _408 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _352.y) * cbMtdParam._m0[9u].y) * ((_389 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _412 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _352.z) * cbMtdParam._m0[9u].z) * ((_389 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _424 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    float _430 = ((cbMtdParam._m0[12u].z * _424.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _443 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    float _451 = (_443.x * 2.0) + (-1.0);
    float _452 = (_443.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3427 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    float _463 = cbMtdParam._m0[14u].w + _443.z;
    vec4 _475 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _284) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _285) + cbTextureTilingScale._m0[0u].w));
    float _479 = cbMtdParam._m0[13u].w * _475.x;
    float _497 = fma(_458, _211, fma(_452, _218, _451 * _204));
    float _500 = fma(_458, _212, fma(_452, _219, _451 * _205));
    float _503 = fma(_458, _213, fma(_452, _220, _451 * _206));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3438 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3449 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _512 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _513 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3465 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3476 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3487 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _532 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _560 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _563 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _566 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    uint _579 = uint(roundEven(NORMAL.w)) * 13u;
    uint _581 = (_579 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _587 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_581].x;
    float _588 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_581].y;
    float _589 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_581].z;
    float _3498 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    vec4 _601 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _604 = _601.x * TEXCOORD_1.w;
    float _605 = dot(vec3(_508, _509, _510), vec3(_376, _377, _378));
    float _608 = _605 * 2.0;
    float _612 = (_608 * _508) - _376;
    float _613 = (_608 * _509) - _377;
    float _614 = (_608 * _510) - _378;
    float _618 = abs(dot(vec3(_376, _377, _378), vec3(_508, _509, _510)));
    float _3531 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _627 = 10.0 / (_532 + 10.0);
    float _628 = sqrt(_512);
    float _640 = exp2((_628 * 5.0) * log2(1.0 - (_619 * 0.999000012874603271484375))) / (4.0 - (_628 * 3.0));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _982;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = fma(_680, cbModelParam._m0[26u].z, fma(_676, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _672));
        float _711 = fma(_680, cbModelParam._m0[27u].z, fma(_676, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _672));
        float _715 = fma(_680, cbModelParam._m0[28u].z, fma(_676, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _672));
        float _740 = _672 + _508;
        float _741 = _676 + _509;
        float _742 = _680 + _510;
        float _752 = fma(_742, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) - _707;
        float _753 = fma(_742, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) - _711;
        float _754 = fma(_742, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) - _715;
        float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
        float _771 = ((_758 * _752) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_707 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_758 * _753) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_711 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_758 * _754) / cbModelParam._m0[34u].z) + ((((((_715 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _810 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_776.x + (-0.5));
        float _812 = _810 * (_776.y + (-0.5));
        float _813 = _810 * (_776.z + (-0.5));
        float _820 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_783.x + (-0.5));
        float _822 = _820 * (_783.y + (-0.5));
        float _823 = _820 * (_783.z + (-0.5));
        float _830 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_790.x + (-0.5));
        float _832 = _830 * (_790.y + (-0.5));
        float _833 = _830 * (_790.z + (-0.5));
        float _840 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_797.x + (-0.5));
        float _842 = _840 * (_797.y + (-0.5));
        float _843 = _840 * (_797.z + (-0.5));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = _811 * 0.5;
        float _848 = _821 * 0.5;
        float _849 = _831 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _864 = (dot(vec3(_508, _509, _510), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _874 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3579 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_876 + 1.0))) + _881) * _844;
        float _891 = _812 * 0.5;
        float _892 = _822 * 0.5;
        float _893 = _832 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_508, _509, _510), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3612 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_918 + 1.0))) + _923) * _845;
        float _933 = _813 * 0.5;
        float _934 = _823 * 0.5;
        float _935 = _833 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_508, _509, _510), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3645 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_960 + 1.0))) + _965) * _846;
        _982 = _813;
        _984 = _812;
        _985 = _811;
        _986 = _823;
        _987 = _822;
        _988 = _821;
        _989 = _833;
        _990 = _832;
        _991 = _831;
        _992 = _846;
        _993 = _845;
        _994 = _844;
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
    }
    else
    {
        _982 = _983;
        _984 = _983;
        _985 = _983;
        _986 = _983;
        _987 = _983;
        _988 = _983;
        _989 = _983;
        _990 = _983;
        _991 = _983;
        _992 = _983;
        _993 = _983;
        _994 = _983;
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
    }
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1023 = fma(_680, cbModelParam._m0[30u].z, fma(_676, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _672));
        float _1027 = fma(_680, cbModelParam._m0[31u].z, fma(_676, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _672));
        float _1031 = fma(_680, cbModelParam._m0[32u].z, fma(_676, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _672));
        float _1054 = _672 + _508;
        float _1055 = _676 + _509;
        float _1056 = _680 + _510;
        float _1066 = fma(_1056, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054)) - _1023;
        float _1067 = fma(_1056, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054)) - _1027;
        float _1068 = fma(_1056, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054)) - _1031;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1023 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1027 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[35u].z) + ((((((_1031 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1122 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1089.x + (-0.5));
        float _1124 = _1122 * (_1089.y + (-0.5));
        float _1125 = _1122 * (_1089.z + (-0.5));
        float _1132 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1096.x + (-0.5));
        float _1134 = _1132 * (_1096.y + (-0.5));
        float _1135 = _1132 * (_1096.z + (-0.5));
        float _1142 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1103.x + (-0.5));
        float _1144 = _1142 * (_1103.y + (-0.5));
        float _1145 = _1142 * (_1103.z + (-0.5));
        float _1152 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1110.x + (-0.5));
        float _1154 = _1152 * (_1110.y + (-0.5));
        float _1155 = _1152 * (_1110.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_508, _509, _510), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3708 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1186 + 1.0))) + _1191) * _1156;
        float _1201 = _1124 * 0.5;
        float _1202 = _1134 * 0.5;
        float _1203 = _1144 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_508, _509, _510), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3741 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1228 + 1.0))) + _1233) * _1157;
        float _1243 = _1125 * 0.5;
        float _1244 = _1135 * 0.5;
        float _1245 = _1145 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_508, _509, _510), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3774 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1270 + 1.0))) + _1275) * _1158;
        _1292 = _1125;
        _1293 = _1124;
        _1294 = _1123;
        _1295 = _1135;
        _1296 = _1134;
        _1297 = _1133;
        _1298 = _1145;
        _1299 = _1144;
        _1300 = _1143;
        _1301 = _1158;
        _1302 = _1157;
        _1303 = _1156;
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _983;
        _1293 = _983;
        _1294 = _983;
        _1295 = _983;
        _1296 = _983;
        _1297 = _983;
        _1298 = _983;
        _1299 = _983;
        _1300 = _983;
        _1301 = _983;
        _1302 = _983;
        _1303 = _983;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1339 = fma(_1318, cbSceneParam._m0[89u].z, fma(_1317, cbSceneParam._m0[89u].y, _1316 * cbSceneParam._m0[89u].x));
    float _1342 = fma(_1318, cbSceneParam._m0[90u].z, fma(_1317, cbSceneParam._m0[90u].y, _1316 * cbSceneParam._m0[90u].x));
    float _1345 = fma(_1318, cbSceneParam._m0[91u].z, fma(_1317, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1316));
    float _1360 = _612 * 0.5;
    float _1361 = _613 * 0.5;
    float _1362 = _614 * 0.5;
    float _1363 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1366 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1369 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1403;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1376 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_982, _986, _989, _992));
        float _1380 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_984, _987, _990, _993));
        float _1384 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_985, _988, _991, _994));
        float _1391 = dot(vec4(cbModelParam._m0[39u]), vec4(_1360, _1361, _1362, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1414;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1405 = dot(vec4(cbModelParam._m0[40u]), vec4(_1360, _1361, _1362, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1418 = (_1414 * cbModelParam._m0[1u].x) + (_1403 * (1.0 - cbModelParam._m0[1u].x));
    float _1428 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _512);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1428 : min(cbModelParam._m0[25u].z, _1428));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1476 = fma(_680, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _672)) + cbModelParam._m0[13u].w;
        float _1480 = fma(_680, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _672)) + cbModelParam._m0[14u].w;
        float _1484 = fma(_680, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _672)) + cbModelParam._m0[15u].w;
        float _1487 = fma(_614, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612));
        float _1490 = fma(_614, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612));
        float _1493 = fma(_614, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612));
        float _1521;
        if (_1487 > 0.0)
        {
            _1521 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1521 = frontier_phi_14_12_ladder;
        }
        float _1765;
        if (_1490 > 0.0)
        {
            _1765 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1765 = frontier_phi_23_19_ladder;
        }
        float _2003;
        if (_1493 > 0.0)
        {
            _2003 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2003 = frontier_phi_34_30_ladder;
        }
        float _2005 = isnan(_1765) ? _1521 : (isnan(_1521) ? _1765 : min(_1521, _1765));
        float _2006 = isnan(_2003) ? _2005 : (isnan(_2005) ? _2003 : min(_2005, _2003));
        float _2010 = (_2006 * _1487) + _1476;
        float _2011 = (_2006 * _1490) + _1480;
        float _2012 = (_2006 * _1493) + _1484;
        float _2013 = _2006 * 9.9999997473787516355514526367188e-05;
        float _2015 = (-1.0) - _2013;
        float _2017 = _2013 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2012 > _2017) || ((_2012 < _2015) || ((_2011 > _2017) || ((_2011 < _2015) || ((_2010 < _2015) || (_2010 > _2017))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2012, cbModelParam._m0[9u].z, fma(_2011, cbModelParam._m0[9u].y, _2010 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2012, cbModelParam._m0[10u].z, fma(_2011, cbModelParam._m0[10u].y, _2010 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2012, cbModelParam._m0[11u].z, fma(_2011, cbModelParam._m0[11u].y, _2010 * cbModelParam._m0[11u].x))), _1429);
            frontier_phi_13_34_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1509 = frontier_phi_13_34_ladder_2;
        _1511 = frontier_phi_13_34_ladder_1;
        _1513 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_612, _613, _614), _1429);
        _1509 = _1497.x * cbModelParam._m0[1u].y;
        _1511 = _1497.y * cbModelParam._m0[1u].y;
        _1513 = _1497.z * cbModelParam._m0[1u].y;
    }
    float _1517 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _512);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1517 : min(cbModelParam._m0[25u].w, _1517));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1573 = fma(_680, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _672)) + cbModelParam._m0[21u].w;
        float _1577 = fma(_680, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _672)) + cbModelParam._m0[22u].w;
        float _1581 = fma(_680, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _672)) + cbModelParam._m0[23u].w;
        float _1584 = fma(_614, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612));
        float _1587 = fma(_614, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612));
        float _1590 = fma(_614, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612));
        float _1770;
        if (_1584 > 0.0)
        {
            _1770 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1770 = frontier_phi_25_21_ladder;
        }
        float _2030;
        if (_1587 > 0.0)
        {
            _2030 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2030 = frontier_phi_36_32_ladder;
        }
        float _2493;
        if (_1590 > 0.0)
        {
            _2493 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2493 = frontier_phi_47_42_ladder;
        }
        float _2495 = isnan(_2030) ? _1770 : (isnan(_1770) ? _2030 : min(_1770, _2030));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1584) + _1573;
        float _2501 = (_2496 * _1587) + _1577;
        float _2502 = (_2496 * _1590) + _1581;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2503;
        float _2506 = _2503 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2502 > _2506) || ((_2502 < _2504) || ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 < _2504) || (_2500 > _2506))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2502, cbModelParam._m0[17u].z, fma(_2501, cbModelParam._m0[17u].y, _2500 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2502, cbModelParam._m0[18u].z, fma(_2501, cbModelParam._m0[18u].y, _2500 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2502, cbModelParam._m0[19u].z, fma(_2501, cbModelParam._m0[19u].y, _2500 * cbModelParam._m0[19u].x))), _1518);
            frontier_phi_22_47_ladder = _2623.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2623.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2623.x * cbModelParam._m0[1u].z;
        }
        _1609 = frontier_phi_22_47_ladder_2;
        _1611 = frontier_phi_22_47_ladder_1;
        _1613 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_612, _613, _614), _1518);
        _1609 = _1593.x * cbModelParam._m0[1u].z;
        _1611 = _1593.y * cbModelParam._m0[1u].z;
        _1613 = _1593.z * cbModelParam._m0[1u].z;
    }
    float _1625 = ((((1.0 - _640) * ((_628 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_640 * _628)) * _604;
    float _1626 = _1625 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1627 = _1625 * ((cbModelParam._m0[1u].w * (_1611 - _1511)) + _1511);
    float _1628 = _1625 * ((cbModelParam._m0[1u].w * (_1613 - _1513)) + _1513);
    float _1631 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1626 * cbSceneParam._m0[91u].x));
    float _1648 = _538 / cbSceneParam._m0[86u].x;
    float _1656 = (cbSceneParam._m0[88u].y * (1.0 - _512)) + cbSceneParam._m0[88u].z;
    float _3900 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1658 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 5.0;
    float _1663 = (_627 * cbMtdParam._m0[13u].z) * dot(vec3(_508, _509, _510), vec3(1.0, 0.0, 0.0));
    vec4 _1673 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1663 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1663 + _1648) * cbSceneParam._m0[86u].x, _539), _1658).w) + _1648) * cbSceneParam._m0[86u].x, _539), _1658);
    float _1689 = 1.0 - _1673.w;
    vec4 _1697 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_538, _539));
    float _1699 = _1697.w;
    float _1711 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1699);
    float _1712 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1699);
    float _1713 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1699);
    uvec4 _1717 = floatBitsToUint(cbInstanceData._m0[_579 + 5u]);
    uint _1719 = _1717.x * 14u;
    uint _1720 = _1719 + 13u;
    float _1725 = _604 + (-1.0);
    float _1728 = (cbLight._m0[_1720].x * _1725) + 1.0;
    float _1729 = (cbLight._m0[_1720].y * _1725) + 1.0;
    uint _1731 = _1719 + 4u;
    float _1742 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_508, _509, _510));
    float _1745 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    float _1746 = cbLight._m0[_1731].x * _1711;
    float _1747 = cbLight._m0[_1731].y * _1712;
    float _1748 = cbLight._m0[_1731].z * _1713;
    uint _1749 = _1719 + 5u;
    uint _1755 = _1719 | 1u;
    float _1761 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_508, _509, _510));
    float _1764 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    float _1829;
    float _1830;
    float _1831;
    if (_513 == 0.0)
    {
        float _3921 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _3932 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1783 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
        float _1785 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
        _1829 = ((cbLight._m0[_1749].x * _1764) * _1785) + ((_1746 * _1745) * _1783);
        _1830 = ((_1764 * cbLight._m0[_1749].y) * _1785) + ((_1747 * _1745) * _1783);
        _1831 = ((_1764 * cbLight._m0[_1749].z) * _1785) + ((_1748 * _1745) * _1783);
    }
    else
    {
        float _1795 = _1742 + _513;
        float _1798 = (_513 * 2.0) + 1.0;
        float _1799 = (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) / _1798;
        float _1806 = _1761 + _513;
        float _1808 = (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) / _1798;
        _1829 = (((_1808 * cbLight._m0[_1749].x) * _1764) + ((_1746 * _1799) * _1745)) * 0.3183098733425140380859375;
        _1830 = (((_1808 * cbLight._m0[_1749].y) * _1764) + ((_1747 * _1799) * _1745)) * 0.3183098733425140380859375;
        _1831 = (((_1808 * cbLight._m0[_1749].z) * _1764) + ((_1748 * _1799) * _1745)) * 0.3183098733425140380859375;
    }
    uint _1835 = _1719 + 8u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1719].w)) * _512) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1719].x + _376;
    float _1854 = cbLight._m0[_1719].y + _377;
    float _1855 = cbLight._m0[_1719].z + _378;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1719].xyz));
    float _3953 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _1867 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1868 = dot(vec3(_508, _509, _510), vec3(_1860, _1861, _1862));
    float _3975 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1860, _1861, _1862));
    float _3986 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1852 * _1852;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1892 = 1.0 - _1852;
    float _1903 = (0.5 / (((_1867 * ((_1866 * _1892) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1892) + _1852) * _1866))) * _1866;
    float _3997 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    uint _1921 = _1719 + 9u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _512) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1755].x + _376;
    float _1938 = cbLight._m0[_1755].y + _377;
    float _1939 = cbLight._m0[_1755].z + _378;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1755].xyz));
    float _4008 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1951 = dot(vec3(_508, _509, _510), vec3(_1944, _1945, _1946));
    float _4019 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1944, _1945, _1946));
    float _4030 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1936 * _1936;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1972 = (exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1973 = 1.0 - _1936;
    float _1983 = (0.5 / (((_1867 * ((_1950 * _1973) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1973) + _1936) * _1950))) * _1950;
    float _4041 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    float _1995 = (((_1972 * cbLight._m0[_1921].x) * _1985) * _1764) + ((((cbLight._m0[_1835].x * _1711) * _1891) * _1905) * _1745);
    float _1996 = (((_1972 * cbLight._m0[_1921].y) * _1985) * _1764) + ((((cbLight._m0[_1835].y * _1712) * _1891) * _1905) * _1745);
    float _1997 = (((_1972 * cbLight._m0[_1921].z) * _1985) * _1764) + ((((cbLight._m0[_1835].z * _1713) * _1891) * _1905) * _1745);
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    if (_1717.y == 0u)
    {
        float _2074 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2075 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2074;
        float _2076 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2074;
        float _2077 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2074;
        uvec4 _2089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2090 = _2089.x;
        uint _2101 = uint((float(_2089.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _2090))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _2090)));
        float _2111 = (log2(_2077 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2112 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        uint _2115 = uint(isnan(14.0) ? _2112 : (isnan(_2112) ? 14.0 : min(_2112, 14.0)));
        uvec4 _2120 = texelFetch(g_lightClusterGridBuffer, int(((_2115 << 2u) + (_2101 << 6u)) >> 2u));
        uint _2121 = _2120.x;
        uint _2122 = _2089.z;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((((1u << ((_2122 >> 4u) & 15u)) + 4294967295u) & _2121) == 0u) || ((_2122 & 240u) == 0u))
        {
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
        }
        else
        {
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2115 << 5u) + (_2101 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2567)
                {
                    frontier_phi_56_pred = _2551;
                    frontier_phi_56_pred_1 = _2556;
                    frontier_phi_56_pred_2 = _2555;
                    frontier_phi_56_pred_3 = _2554;
                    frontier_phi_56_pred_4 = _2553;
                    frontier_phi_56_pred_5 = _2552;
                }
                else
                {
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    uint _2702;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2566;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    for (;;)
                    {
                        uint _2706 = uint(findLSB(_2702)) + (_2557 << 5u);
                        uint _2703 = (_2702 + 4294967295u) & _2702;
                        uint _2708 = _2706 * 48u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2728 = (_2706 * 48u) + 4u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        float _2742 = _2741.x;
                        float _2743 = _2741.y;
                        float _2744 = _2741.z;
                        uint _2747 = (_2706 * 48u) + 8u;
                        vec3 _2758 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x));
                        uint _2763 = (_2706 * 48u) + 12u;
                        vec2 _2771 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x));
                        float _2777 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
                        float _2778 = _2777 * _2075;
                        float _2779 = _2777 * _2076;
                        float _2780 = _2777 * _2077;
                        float _2781 = _2722.x - _2075;
                        float _2782 = _2722.y - _2076;
                        float _2783 = _2722.z - _2077;
                        float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                        float _2787 = inversesqrt(_2784);
                        float _2788 = _2787 * _2781;
                        float _2789 = _2787 * _2782;
                        float _2790 = _2787 * _2783;
                        float _2791 = dot(vec3(_560, _563, _566), vec3(_2788, _2789, _2790));
                        float _2796 = 1.0 - (_2784 * _2722.w);
                        float _4062 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2798 = sqrt(_2784) * _2741.w;
                        float _2801 = 1.39999997615814208984375 / (_2798 + 1.39999997615814208984375);
                        float _2802 = _2801 * _2801;
                        float _2803 = 1.0 - _2802;
                        float _2805 = (_2803 * _2803) * _513;
                        float _2808 = ((_2803 * _2791) + _2802) + _2805;
                        float _2813 = _2798 * _2798;
                        float _2818 = ((isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))) * _2797) / (((_2805 * 2.0) + 1.0) * ((_2813 * 0.699999988079071044921875) + 1.0));
                        float _2822 = dot(vec3(_2788, _2789, _2790), vec3(_2778, _2779, _2780));
                        float _4078 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2829 = dot(vec3((-0.0) - _2778, (-0.0) - _2779, (-0.0) - _2780), vec3(_560, _563, _566)) + 1.0;
                        float _2831 = (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))) * 0.5;
                        float _2839 = ((_2831 * _2831) * _2771.x) * exp2((_2771.y * 32.0) * log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))));
                        float _2841 = _513 / (_513 + 1.0);
                        float _2857 = (-0.0) - _2075;
                        float _2858 = (-0.0) - _2076;
                        float _2859 = (-0.0) - _2077;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2874 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2875 = 1.0 - _628;
                        float _2882 = sqrt(1.0 - ((1.0 - (_2875 * _2875)) * (1.0 - (_2874 * _2874))));
                        float _2883 = _2882 * _2882;
                        float _2884 = _2883 * _2883;
                        float _2885 = _2864 + _2788;
                        float _2886 = _2865 + _2789;
                        float _2887 = _2866 + _2790;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_560, _563, _566), vec3(_2864, _2865, _2866));
                        float _4094 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2899 = dot(vec3(_560, _563, _566), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4105 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2906 = ((_2902 * _2902) * (_2884 + (-1.0))) + 1.0;
                        float _2907 = _2801 * _2883;
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2791) + _2908;
                        float _4116 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2913 = 1.0 - _2883;
                        float _2923 = (0.5 / (((_2912 * ((_2898 * _2913) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2912 * _2913) + _2883) * _2898))) * _2912;
                        float _4127 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2934 = (((_2884 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_2906 * _2906) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2797;
                        _2631 = (((((_2742 * 0.3183098733425140380859375) * _2841) * _2839) + _2742) * _2818) + _2699;
                        _2632 = (((((_2743 * 0.3183098733425140380859375) * _2841) * _2839) + _2743) * _2818) + _2700;
                        _2633 = (((((_2744 * 0.3183098733425140380859375) * _2841) * _2839) + _2744) * _2818) + _2701;
                        _2628 = (_2934 * _2758.x) + _2696;
                        _2629 = (_2934 * _2758.y) + _2697;
                        _2630 = (_2934 * _2758.z) + _2698;
                        if (_2703 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2703;
                        }
                    }
                    frontier_phi_56_pred = _2628;
                    frontier_phi_56_pred_1 = _2633;
                    frontier_phi_56_pred_2 = _2632;
                    frontier_phi_56_pred_3 = _2631;
                    frontier_phi_56_pred_4 = _2630;
                    frontier_phi_56_pred_5 = _2629;
                }
                _2351 = frontier_phi_56_pred;
                _2361 = frontier_phi_56_pred_1;
                _2359 = frontier_phi_56_pred_2;
                _2357 = frontier_phi_56_pred_3;
                _2355 = frontier_phi_56_pred_4;
                _2353 = frontier_phi_56_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2351;
                    _2552 = _2353;
                    _2553 = _2355;
                    _2554 = _2357;
                    _2555 = _2359;
                    _2556 = _2361;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
        }
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.z;
        uint _2367 = (_2365 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2367) & _2121) == 0u)
        {
            _2519 = _2350;
            _2521 = _2352;
            _2523 = _2354;
            _2525 = _2356;
            _2527 = _2358;
            _2529 = _2360;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
            float _2545 = _2544 * _2075;
            float _2546 = _2544 * _2076;
            float _2547 = _2544 * _2077;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2367 < ((_2365 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2679 = _2350;
                float _2680 = _2352;
                float _2681 = _2354;
                float _2682 = _2356;
                float _2683 = _2358;
                float _2684 = _2360;
                uint _2685 = _2367;
                uint _2694;
                bool _2695;
                for (;;)
                {
                    _2694 = texelFetch(g_lightClassification, int((((_2115 << 5u) + (_2101 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                    _2695 = _2694 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2695)
                    {
                        frontier_phi_62_pred = _2684;
                        frontier_phi_62_pred_1 = _2683;
                        frontier_phi_62_pred_2 = _2682;
                        frontier_phi_62_pred_3 = _2681;
                        frontier_phi_62_pred_4 = _2680;
                        frontier_phi_62_pred_5 = _2679;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _2952 = _2679;
                        float _2953 = _2680;
                        float _2954 = _2681;
                        float _2955 = _2682;
                        float _2956 = _2683;
                        float _2957 = _2684;
                        uint _2958 = _2694;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        vec3 _3015;
                        vec2 _3024;
                        vec4 _3039;
                        vec4 _3055;
                        float _3102;
                        bool _3103;
                        for (;;)
                        {
                            uint _2969 = ((_2685 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3001 = _3000.x;
                            _3002 = _3000.y;
                            _3003 = _3000.z;
                            uint _3005 = (_2969 * 40u) + 8u;
                            _3015 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x));
                            uint _3017 = (_2969 * 40u) + 12u;
                            _3024 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x));
                            uint _3026 = (_2969 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2969 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3058 = (_2969 * 40u) + 24u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3077 = (_2969 * 40u) + 28u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3102 = fma(_2077, _3090.z, fma(_2076, _3090.y, _3090.x * _2075)) + _3090.w;
                            _3103 = !((fma(_2077, _3071.z, fma(_2076, _3071.y, _3071.x * _2075)) + _3071.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3103)
                            {
                                float _3129 = _2984.x - _2075;
                                float _3130 = _2984.y - _2076;
                                float _3131 = _2984.z - _2077;
                                float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                                float _3135 = inversesqrt(_3132);
                                float _3136 = _3135 * _3129;
                                float _3137 = _3135 * _3130;
                                float _3138 = _3135 * _3131;
                                float _3142 = 1.0 - (_3132 / (_2985 * _2985));
                                float _4138 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3147 = sqrt(_3132) * _3000.w;
                                float _3149 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                                float _3150 = _3149 * _3149;
                                float _3151 = 1.0 - _3150;
                                float _3153 = (_3151 * _3151) * _513;
                                float _3156 = ((_3151 * dot(vec3(_3136, _3137, _3138), vec3(_560, _563, _566))) + _3150) + _3153;
                                float _3161 = _3147 * _3147;
                                float _3166 = (fma(_2077, _3039.z, fma(_2076, _3039.y, _3039.x * _2075)) + _3039.w) / _3102;
                                float _3167 = (fma(_2077, _3055.z, fma(_2076, _3055.y, _3055.x * _2075)) + _3055.w) / _3102;
                                float _3171 = 1.0 - dot(vec2(_3166, _3167), vec2(_3166, _3167));
                                float _4154 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3173 = _3172 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3143) / (((_3153 * 2.0) + 1.0) * ((_3161 * 0.699999988079071044921875) + 1.0)));
                                float _3174 = (-0.0) - _2545;
                                float _3175 = (-0.0) - _2546;
                                float _3176 = (-0.0) - _2547;
                                float _3177 = dot(vec3(_3136, _3137, _3138), vec3(_2545, _2546, _2547));
                                float _4165 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3184 = dot(vec3(_3174, _3175, _3176), vec3(_560, _563, _566)) + 1.0;
                                float _3186 = (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * 0.5;
                                float _3193 = ((_3186 * _3186) * _3024.x) * exp2((_3024.y * 32.0) * log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))));
                                float _3195 = _513 / (_513 + 1.0);
                                float _3216 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                                float _3217 = 1.0 - _628;
                                float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                                float _3225 = _3224 * _3224;
                                float _3226 = _3225 * _3225;
                                float _3227 = _3136 - _2545;
                                float _3228 = _3137 - _2546;
                                float _3229 = _3138 - _2547;
                                float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                                float _3237 = dot(vec3(_560, _563, _566), vec3(_3174, _3175, _3176));
                                float _4181 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3241 = dot(vec3(_560, _563, _566), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                                float _4192 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                                float _3249 = _3149 * _3225;
                                float _3250 = _3249 * _3249;
                                float _3256 = ((1.0 - _3250) * dot(vec3(_560, _563, _566), vec3(_3136, _3137, _3138))) + _3250;
                                float _4203 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3258 = 1.0 - _3225;
                                float _3268 = (0.5 / (((_3257 * ((_3240 * _3258) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3225) * _3240))) * _3257;
                                float _4214 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3278 = (_3172 * _3143) * (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_3248 * _3248) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3003 * 0.3183098733425140380859375) * _3195) * _3193) + _3003) * _3173;
                                frontier_phi_68_pred_1 = ((((_3002 * 0.3183098733425140380859375) * _3195) * _3193) + _3002) * _3173;
                                frontier_phi_68_pred_2 = ((((_3001 * 0.3183098733425140380859375) * _3195) * _3193) + _3001) * _3173;
                                frontier_phi_68_pred_3 = _3278 * _3015.z;
                                frontier_phi_68_pred_4 = _3278 * _3015.y;
                                frontier_phi_68_pred_5 = _3278 * _3015.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3287 = frontier_phi_68_pred;
                            _3286 = frontier_phi_68_pred_1;
                            _3285 = frontier_phi_68_pred_2;
                            _3284 = frontier_phi_68_pred_3;
                            _3283 = frontier_phi_68_pred_4;
                            _3282 = frontier_phi_68_pred_5;
                            _2942 = _3285 + _2955;
                            _2943 = _3286 + _2956;
                            _2944 = _3287 + _2957;
                            _2939 = _3282 + _2952;
                            _2940 = _3283 + _2953;
                            _2941 = _3284 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2944;
                        frontier_phi_62_pred_1 = _2943;
                        frontier_phi_62_pred_2 = _2942;
                        frontier_phi_62_pred_3 = _2941;
                        frontier_phi_62_pred_4 = _2940;
                        frontier_phi_62_pred_5 = _2939;
                    }
                    _2530 = frontier_phi_62_pred;
                    _2528 = frontier_phi_62_pred_1;
                    _2526 = frontier_phi_62_pred_2;
                    _2524 = frontier_phi_62_pred_3;
                    _2522 = frontier_phi_62_pred_4;
                    _2520 = frontier_phi_62_pred_5;
                    uint _2686 = _2685 + 1u;
                    if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2679 = _2520;
                        _2680 = _2522;
                        _2681 = _2524;
                        _2682 = _2526;
                        _2683 = _2528;
                        _2684 = _2530;
                        _2685 = _2686;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2530;
                frontier_phi_49_50_ladder_1 = _2526;
                frontier_phi_49_50_ladder_2 = _2528;
                frontier_phi_49_50_ladder_3 = _2524;
                frontier_phi_49_50_ladder_4 = _2522;
                frontier_phi_49_50_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_49_50_ladder = _2360;
                frontier_phi_49_50_ladder_1 = _2356;
                frontier_phi_49_50_ladder_2 = _2358;
                frontier_phi_49_50_ladder_3 = _2354;
                frontier_phi_49_50_ladder_4 = _2352;
                frontier_phi_49_50_ladder_5 = _2350;
            }
            _2519 = frontier_phi_49_50_ladder_5;
            _2521 = frontier_phi_49_50_ladder_4;
            _2523 = frontier_phi_49_50_ladder_3;
            _2525 = frontier_phi_49_50_ladder_1;
            _2527 = frontier_phi_49_50_ladder_2;
            _2529 = frontier_phi_49_50_ladder;
        }
        float _2534 = isnan(1.0) ? _604 : (isnan(_604) ? 1.0 : min(_604, 1.0));
        _2134 = (_2534 * _2525) + _1829;
        _2136 = (_2534 * _2527) + _1830;
        _2138 = (_2534 * _2529) + _1831;
        _2140 = ((_2519 * 0.039999999105930328369140625) * _2534) + _1995;
        _2142 = ((_2521 * 0.039999999105930328369140625) * _2534) + _1996;
        _2144 = ((_2523 * 0.039999999105930328369140625) * _2534) + _1997;
    }
    else
    {
        _2134 = _1829;
        _2136 = _1830;
        _2138 = _1831;
        _2140 = _1995;
        _2142 = _1996;
        _2144 = _1997;
    }
    float _2164 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2165 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2166 = cbSceneParam._m0[86u].x * ((_538 / cbSceneParam._m0[86u].x) + ((_627 * cbMtdParam._m0[13u].y) * dot(vec3(_508, _509, _510), vec3(_204, _205, _206))));
    float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
    float _2168 = isnan(_2165) ? _539 : (isnan(_539) ? _2165 : min(_539, _2165));
    vec4 _2170 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2167, _2168), 0.0);
    float _2172 = _2170.x;
    bool _2193 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2172)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2172))) > _532;
    float _2194 = _2193 ? _2167 : _538;
    float _2195 = _2193 ? _2168 : _539;
    vec4 _2197 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2194, _2195));
    vec4 _2202 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2194, _2195));
    float _2204 = _2202.x;
    float _2224 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2204)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2204))) - _532;
    bool _2234 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2238 = (isnan(_2224) ? 0.0 : (isnan(0.0) ? _2224 : max(0.0, _2224))) * (-1.44269502162933349609375);
    float _4245 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4256 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4267 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2265 = 0.959999978542327880859375 - (exp2(log2(1.0 - _619) * 5.0) * 0.959999978542327880859375);
    float _2268 = ((_2197.x * _2265) * exp2(_2238 * (_2234 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2271 = ((_2197.y * _2265) * exp2(_2238 * (_2234 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2274 = ((_2197.z * _2265) * exp2(_2238 * (_2234 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2296 = _538 / cbSceneParam._m0[86u].x;
    float _2297 = _539 / cbSceneParam._m0[86u].y;
    vec4 _2311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, (log2((isnan(cbSceneParam._m0[77u].w) ? _532 : (isnan(_532) ? cbSceneParam._m0[77u].w : min(_532, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2313 = _2311.x;
    float _2314 = _2311.y;
    float _2315 = _2311.z;
    float _2316 = _2311.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_532 > cbSceneParam._m0[78u].w)
    {
        float _2375 = isnan(_532) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _532 : min(cbSceneParam._m0[80u].w, _532));
        float _2376 = _2375 / _532;
        float _2387 = _2376 * _274;
        float _2388 = _275 * _2376;
        float _2389 = (-0.0) - _2388;
        float _2390 = _2376 * _276;
        float _2392 = (cbSceneParam._m0[77u].w * _2389) / _2375;
        float _2393 = _2392 + cbSceneParam._m0[79u].w;
        float _2394 = cbSceneParam._m0[79u].w - _2388;
        float _2400 = sqrt(((_2387 * _2387) + (_2388 * _2388)) + (_2390 * _2390));
        float _2403 = (1.0 - (cbSceneParam._m0[77u].w / _2375)) * _2400;
        float _2408 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2641;
        if (abs((_2389 - _2392) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2641 = ((((_2393 > 0.0) ? exp2(_2408 * _2393) : (2.0 - exp2(_2409 * _2393))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2403;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : max(_2393, _2394));
            float _2582 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : min(_2393, _2394));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2641 = ((abs(_2400 / _2389) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2408 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2408 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2409 * _2591) - exp2(_2409 * _2592)) * _2580))) + (_2403 * cbSceneParam._m0[80u].z);
        }
        vec4 _2643 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, 1.0), 0.0);
        float _2652 = exp2((_2641 * (-1.44269502162933349609375)) * (1.0 - _2643.w));
        float _2653 = log2(_2652);
        float _2669 = log2(_2316);
        _2411 = (exp2(_2669 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].x)) * _2643.x) / cbSceneParam._m0[78u].x)) + _2313;
        _2413 = (exp2(_2669 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].y)) * _2643.y) / cbSceneParam._m0[78u].y)) + _2314;
        _2415 = (exp2(_2669 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].z)) * _2643.z) / cbSceneParam._m0[78u].z)) + _2315;
        _2417 = _2652 * _2316;
    }
    else
    {
        _2411 = _2313;
        _2413 = _2314;
        _2415 = _2315;
        _2417 = _2316;
    }
    bool _2429 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2430 = log2(_2417);
    float _2437 = exp2(_2430 * cbSceneParam._m0[78u].x) * ((_2268 + (((((_1625 * _1673.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1418) * _1689)) + _2140) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2134 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _604))) - _2268) * cbMtdParam._m0[15u].x));
    float _2438 = exp2(_2430 * cbSceneParam._m0[78u].y) * ((_2271 + (((((_1625 * _1673.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1418) * _1689)) + _2142) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2136 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _604))) - _2271) * cbMtdParam._m0[15u].x));
    float _2439 = exp2(_2430 * cbSceneParam._m0[78u].z) * ((_2274 + (((((_1625 * _1673.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1418) * _1689)) + _2144) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2138 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _604))) - _2274) * cbMtdParam._m0[15u].x));
    vec4 _2447 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_538, _539));
    float _2449 = _2447.x;
    float _2470 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2449)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2449))) - _532) * cbMtdParam._m0[14u].z;
    float _4318 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (cbInstanceData._m0[_579 + 6u].w * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)));
    float _2481 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2481 * (_2429 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.y = _2481 * (_2429 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.z = _2481 * (_2429 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.w = _2472;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2472;
}


