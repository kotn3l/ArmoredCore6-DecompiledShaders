#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _960;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _200 = _199 * _191;
    float _201 = _199 * _192;
    float _202 = _199 * _193;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _270 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _260);
    float _271 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _260);
    float _272 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _260);
    float _280 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _281 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _292 = dot(vec3(_270, _271, _272), vec3(_200, _201, _202));
    float _295 = dot(vec3(_270, _271, _272), vec3(_214, _215, _216));
    float _298 = dot(vec3(_270, _271, _272), vec3(_207, _208, _209));
    float _304 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _328 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _348 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_292 * cbMtdParam._m0[12u].x) * _304) * _328) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_295 * cbMtdParam._m0[12u].x) * _304) * _328) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _371 = inversesqrt(dot(vec3(_270, _271, _272), vec3(_270, _271, _272)));
    float _372 = _371 * _270;
    float _373 = _371 * _271;
    float _374 = _371 * _272;
    float _378 = dot(vec4(_372, _373, _374, 0.0), vec4(_207, _208, _209, 0.0)) - cbMtdParam._m0[12u].w;
    float _3387 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _385 = exp2(log2(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _400 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _348.x) * cbMtdParam._m0[9u].x) * ((_385 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _404 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _348.y) * cbMtdParam._m0[9u].y) * ((_385 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _408 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _348.z) * cbMtdParam._m0[9u].z) * ((_385 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _421 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _430 = (_421.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3403 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))));
    float _441 = cbMtdParam._m0[14u].w + _421.z;
    vec4 _453 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _280) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _281) + cbTextureTilingScale._m0[0u].w));
    float _457 = cbMtdParam._m0[13u].w * _453.x;
    float _475 = fma(_436, _207, fma(_430, _214, _429 * _200));
    float _478 = fma(_436, _208, fma(_430, _215, _429 * _201));
    float _481 = fma(_436, _209, fma(_430, _216, _429 * _202));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    float _486 = _485 * _475;
    float _487 = _485 * _478;
    float _488 = _485 * _481;
    float _3414 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _489 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _490 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3430 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3441 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3452 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _509 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _515 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _516 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_488, cbSceneParam._m0[5u].z, fma(_487, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _486));
    float _540 = fma(_488, cbSceneParam._m0[6u].z, fma(_487, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _486));
    float _543 = fma(_488, cbSceneParam._m0[7u].z, fma(_487, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _486));
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _558 = (_556 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _564 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_558].x;
    float _565 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_558].y;
    float _566 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_558].z;
    float _3463 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    vec4 _578 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _515, cbSceneParam._m0[86u].y * _516));
    float _581 = _578.x * TEXCOORD_1.w;
    float _582 = dot(vec3(_486, _487, _488), vec3(_372, _373, _374));
    float _585 = _582 * 2.0;
    float _589 = (_585 * _486) - _372;
    float _590 = (_585 * _487) - _373;
    float _591 = (_585 * _488) - _374;
    float _595 = abs(dot(vec3(_372, _373, _374), vec3(_486, _487, _488)));
    float _3496 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _604 = 10.0 / (_509 + 10.0);
    float _605 = sqrt(_489);
    float _617 = exp2((_605 * 5.0) * log2(1.0 - (_596 * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _959;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _684 = fma(_657, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649));
        float _688 = fma(_657, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649));
        float _692 = fma(_657, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649));
        float _717 = _649 + _486;
        float _718 = _653 + _487;
        float _719 = _657 + _488;
        float _729 = fma(_719, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717)) - _684;
        float _730 = fma(_719, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717)) - _688;
        float _731 = fma(_719, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717)) - _692;
        float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
        float _748 = ((_735 * _729) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_684 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_735 * _730) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_688 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_735 * _731) / cbModelParam._m0[34u].z) + ((((((_692 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        float _787 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_753.x + (-0.5));
        float _789 = _787 * (_753.y + (-0.5));
        float _790 = _787 * (_753.z + (-0.5));
        float _797 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_760.x + (-0.5));
        float _799 = _797 * (_760.y + (-0.5));
        float _800 = _797 * (_760.z + (-0.5));
        float _807 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_767.x + (-0.5));
        float _809 = _807 * (_767.y + (-0.5));
        float _810 = _807 * (_767.z + (-0.5));
        float _817 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_774.x + (-0.5));
        float _819 = _817 * (_774.y + (-0.5));
        float _820 = _817 * (_774.z + (-0.5));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = _788 * 0.5;
        float _825 = _798 * 0.5;
        float _826 = _808 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _841 = (dot(vec3(_486, _487, _488), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _851 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3544 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_853 + 1.0))) + _858) * _821;
        float _868 = _789 * 0.5;
        float _869 = _799 * 0.5;
        float _870 = _809 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_486, _487, _488), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3577 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_895 + 1.0))) + _900) * _822;
        float _910 = _790 * 0.5;
        float _911 = _800 * 0.5;
        float _912 = _810 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_486, _487, _488), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3610 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_937 + 1.0))) + _942) * _823;
        _959 = _790;
        _961 = _789;
        _962 = _788;
        _963 = _800;
        _964 = _799;
        _965 = _798;
        _966 = _810;
        _967 = _809;
        _968 = _808;
        _969 = _823;
        _970 = _822;
        _971 = _821;
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
    }
    else
    {
        _959 = _960;
        _961 = _960;
        _962 = _960;
        _963 = _960;
        _964 = _960;
        _965 = _960;
        _966 = _960;
        _967 = _960;
        _968 = _960;
        _969 = _960;
        _970 = _960;
        _971 = _960;
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
    }
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1000 = fma(_657, cbModelParam._m0[30u].z, fma(_653, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _649));
        float _1004 = fma(_657, cbModelParam._m0[31u].z, fma(_653, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _649));
        float _1008 = fma(_657, cbModelParam._m0[32u].z, fma(_653, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _649));
        float _1031 = _649 + _486;
        float _1032 = _653 + _487;
        float _1033 = _657 + _488;
        float _1043 = fma(_1033, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031)) - _1000;
        float _1044 = fma(_1033, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031)) - _1004;
        float _1045 = fma(_1033, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031)) - _1008;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1000 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1004 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[35u].z) + ((((((_1008 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1099 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1066.x + (-0.5));
        float _1101 = _1099 * (_1066.y + (-0.5));
        float _1102 = _1099 * (_1066.z + (-0.5));
        float _1109 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1073.x + (-0.5));
        float _1111 = _1109 * (_1073.y + (-0.5));
        float _1112 = _1109 * (_1073.z + (-0.5));
        float _1119 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1080.x + (-0.5));
        float _1121 = _1119 * (_1080.y + (-0.5));
        float _1122 = _1119 * (_1080.z + (-0.5));
        float _1129 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1087.x + (-0.5));
        float _1131 = _1129 * (_1087.y + (-0.5));
        float _1132 = _1129 * (_1087.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_486, _487, _488), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3673 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1163 + 1.0))) + _1168) * _1133;
        float _1178 = _1101 * 0.5;
        float _1179 = _1111 * 0.5;
        float _1180 = _1121 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_486, _487, _488), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3706 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1205 + 1.0))) + _1210) * _1134;
        float _1220 = _1102 * 0.5;
        float _1221 = _1112 * 0.5;
        float _1222 = _1122 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_486, _487, _488), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3739 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1247 + 1.0))) + _1252) * _1135;
        _1269 = _1102;
        _1270 = _1101;
        _1271 = _1100;
        _1272 = _1112;
        _1273 = _1111;
        _1274 = _1110;
        _1275 = _1122;
        _1276 = _1121;
        _1277 = _1120;
        _1278 = _1135;
        _1279 = _1134;
        _1280 = _1133;
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _960;
        _1270 = _960;
        _1271 = _960;
        _1272 = _960;
        _1273 = _960;
        _1274 = _960;
        _1275 = _960;
        _1276 = _960;
        _1277 = _960;
        _1278 = _960;
        _1279 = _960;
        _1280 = _960;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _972)) + _972;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _973)) + _973;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _974)) + _974;
    float _1316 = fma(_1295, cbSceneParam._m0[89u].z, fma(_1294, cbSceneParam._m0[89u].y, _1293 * cbSceneParam._m0[89u].x));
    float _1319 = fma(_1295, cbSceneParam._m0[90u].z, fma(_1294, cbSceneParam._m0[90u].y, _1293 * cbSceneParam._m0[90u].x));
    float _1322 = fma(_1295, cbSceneParam._m0[91u].z, fma(_1294, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1293));
    float _1337 = _589 * 0.5;
    float _1338 = _590 * 0.5;
    float _1339 = _591 * 0.5;
    float _1340 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1343 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1346 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1380;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1353 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_959, _963, _966, _969));
        float _1357 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_961, _964, _967, _970));
        float _1361 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_962, _965, _968, _971));
        float _1368 = dot(vec4(cbModelParam._m0[39u]), vec4(_1337, _1338, _1339, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1391;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1382 = dot(vec4(cbModelParam._m0[40u]), vec4(_1337, _1338, _1339, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1395 = (_1391 * cbModelParam._m0[1u].x) + (_1380 * (1.0 - cbModelParam._m0[1u].x));
    float _1405 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _489);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1405 : min(cbModelParam._m0[25u].z, _1405));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_657, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _649)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_657, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _649)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_657, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _649)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1467 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1470 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1498 = frontier_phi_14_12_ladder;
        }
        float _1742;
        if (_1467 > 0.0)
        {
            _1742 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1742 = frontier_phi_23_19_ladder;
        }
        float _1980;
        if (_1470 > 0.0)
        {
            _1980 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1980 = frontier_phi_34_30_ladder;
        }
        float _1982 = isnan(_1742) ? _1498 : (isnan(_1498) ? _1742 : min(_1498, _1742));
        float _1983 = isnan(_1980) ? _1982 : (isnan(_1982) ? _1980 : min(_1982, _1980));
        float _1987 = (_1983 * _1464) + _1453;
        float _1988 = (_1983 * _1467) + _1457;
        float _1989 = (_1983 * _1470) + _1461;
        float _1990 = _1983 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1990;
        float _1994 = _1990 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 > _1994) || ((_1988 < _1992) || ((_1987 < _1992) || (_1987 > _1994))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1989, cbModelParam._m0[9u].z, fma(_1988, cbModelParam._m0[9u].y, _1987 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1989, cbModelParam._m0[10u].z, fma(_1988, cbModelParam._m0[10u].y, _1987 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1989, cbModelParam._m0[11u].z, fma(_1988, cbModelParam._m0[11u].y, _1987 * cbModelParam._m0[11u].x))), _1406);
            frontier_phi_13_34_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_13_34_ladder_2;
        _1488 = frontier_phi_13_34_ladder_1;
        _1490 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _1406);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _489);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1550 = fma(_657, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _649)) + cbModelParam._m0[21u].w;
        float _1554 = fma(_657, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _649)) + cbModelParam._m0[22u].w;
        float _1558 = fma(_657, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _649)) + cbModelParam._m0[23u].w;
        float _1561 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1564 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1567 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1747;
        if (_1561 > 0.0)
        {
            _1747 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1747 = frontier_phi_25_21_ladder;
        }
        float _2007;
        if (_1564 > 0.0)
        {
            _2007 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2007 = frontier_phi_36_32_ladder;
        }
        float _2469;
        if (_1567 > 0.0)
        {
            _2469 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2469 = frontier_phi_47_42_ladder;
        }
        float _2471 = isnan(_2007) ? _1747 : (isnan(_1747) ? _2007 : min(_1747, _2007));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1561) + _1550;
        float _2477 = (_2472 * _1564) + _1554;
        float _2478 = (_2472 * _1567) + _1558;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2479;
        float _2482 = _2479 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2478 > _2482) || ((_2478 < _2480) || ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 < _2480) || (_2476 > _2482))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2478, cbModelParam._m0[17u].z, fma(_2477, cbModelParam._m0[17u].y, _2476 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2478, cbModelParam._m0[18u].z, fma(_2477, cbModelParam._m0[18u].y, _2476 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2478, cbModelParam._m0[19u].z, fma(_2477, cbModelParam._m0[19u].y, _2476 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_22_47_ladder = _2599.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2599.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2599.x * cbModelParam._m0[1u].z;
        }
        _1586 = frontier_phi_22_47_ladder_2;
        _1588 = frontier_phi_22_47_ladder_1;
        _1590 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1495);
        _1586 = _1570.x * cbModelParam._m0[1u].z;
        _1588 = _1570.y * cbModelParam._m0[1u].z;
        _1590 = _1570.z * cbModelParam._m0[1u].z;
    }
    float _1602 = ((((1.0 - _617) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_617 * _605)) * _581;
    float _1603 = _1602 * ((cbModelParam._m0[1u].w * (_1586 - _1486)) + _1486);
    float _1604 = _1602 * ((cbModelParam._m0[1u].w * (_1588 - _1488)) + _1488);
    float _1605 = _1602 * ((cbModelParam._m0[1u].w * (_1590 - _1490)) + _1490);
    float _1608 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1603 * cbSceneParam._m0[91u].x));
    float _1625 = _515 / cbSceneParam._m0[86u].x;
    float _1633 = (cbSceneParam._m0[88u].y * (1.0 - _489)) + cbSceneParam._m0[88u].z;
    float _3865 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1635 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 5.0;
    float _1640 = (_604 * cbMtdParam._m0[13u].z) * dot(vec3(_486, _487, _488), vec3(1.0, 0.0, 0.0));
    vec4 _1650 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1640 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1640 + _1625) * cbSceneParam._m0[86u].x, _516), _1635).w) + _1625) * cbSceneParam._m0[86u].x, _516), _1635);
    float _1666 = 1.0 - _1650.w;
    vec4 _1674 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_515, _516));
    float _1676 = _1674.w;
    float _1688 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1676);
    float _1689 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1676);
    float _1690 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1676);
    uvec4 _1694 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1696 = _1694.x * 14u;
    uint _1697 = _1696 + 13u;
    float _1702 = _581 + (-1.0);
    float _1705 = (cbLight._m0[_1697].x * _1702) + 1.0;
    float _1706 = (cbLight._m0[_1697].y * _1702) + 1.0;
    uint _1708 = _1696 + 4u;
    float _1719 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_486, _487, _488));
    float _1722 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    float _1723 = cbLight._m0[_1708].x * _1688;
    float _1724 = cbLight._m0[_1708].y * _1689;
    float _1725 = cbLight._m0[_1708].z * _1690;
    uint _1726 = _1696 + 5u;
    uint _1732 = _1696 | 1u;
    float _1738 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_486, _487, _488));
    float _1741 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
    float _1806;
    float _1807;
    float _1808;
    if (_490 == 0.0)
    {
        float _3886 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _3897 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1760 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
        float _1762 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
        _1806 = ((cbLight._m0[_1726].x * _1741) * _1762) + ((_1723 * _1722) * _1760);
        _1807 = ((_1741 * cbLight._m0[_1726].y) * _1762) + ((_1724 * _1722) * _1760);
        _1808 = ((_1741 * cbLight._m0[_1726].z) * _1762) + ((_1725 * _1722) * _1760);
    }
    else
    {
        float _1772 = _1719 + _490;
        float _1775 = (_490 * 2.0) + 1.0;
        float _1776 = (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) / _1775;
        float _1783 = _1738 + _490;
        float _1785 = (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) / _1775;
        _1806 = (((_1785 * cbLight._m0[_1726].x) * _1741) + ((_1723 * _1776) * _1722)) * 0.3183098733425140380859375;
        _1807 = (((_1785 * cbLight._m0[_1726].y) * _1741) + ((_1724 * _1776) * _1722)) * 0.3183098733425140380859375;
        _1808 = (((_1785 * cbLight._m0[_1726].z) * _1741) + ((_1725 * _1776) * _1722)) * 0.3183098733425140380859375;
    }
    uint _1812 = _1696 + 8u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1696].w)) * _489) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1696].x + _372;
    float _1831 = cbLight._m0[_1696].y + _373;
    float _1832 = cbLight._m0[_1696].z + _374;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_486, _487, _488), vec3(cbLight._m0[_1696].xyz));
    float _3918 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _1844 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1845 = dot(vec3(_486, _487, _488), vec3(_1837, _1838, _1839));
    float _3940 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1849 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1837, _1838, _1839));
    float _3951 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1853 = _1829 * _1829;
    float _1857 = ((_1848 * _1848) * (_1853 + (-1.0))) + 1.0;
    float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1869 = 1.0 - _1829;
    float _1880 = (0.5 / (((_1844 * ((_1843 * _1869) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1869) + _1829) * _1843))) * _1843;
    float _3962 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1853 / ((_1857 * _1857) * 3.141590118408203125));
    uint _1898 = _1696 + 9u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _489) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1732].x + _372;
    float _1915 = cbLight._m0[_1732].y + _373;
    float _1916 = cbLight._m0[_1732].z + _374;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_486, _487, _488), vec3(cbLight._m0[_1732].xyz));
    float _3973 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1928 = dot(vec3(_486, _487, _488), vec3(_1921, _1922, _1923));
    float _3984 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1921, _1922, _1923));
    float _3995 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1913 * _1913;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1950 = 1.0 - _1913;
    float _1960 = (0.5 / (((_1844 * ((_1927 * _1950) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1950) + _1913) * _1927))) * _1927;
    float _4006 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    float _1972 = (((_1949 * cbLight._m0[_1898].x) * _1962) * _1741) + ((((cbLight._m0[_1812].x * _1688) * _1868) * _1882) * _1722);
    float _1973 = (((_1949 * cbLight._m0[_1898].y) * _1962) * _1741) + ((((cbLight._m0[_1812].y * _1689) * _1868) * _1882) * _1722);
    float _1974 = (((_1949 * cbLight._m0[_1898].z) * _1962) * _1741) + ((((cbLight._m0[_1812].z * _1690) * _1868) * _1882) * _1722);
    float _2111;
    float _2113;
    float _2115;
    float _2117;
    float _2119;
    float _2121;
    if (_1694.y == 0u)
    {
        float _2051 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2052 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2051;
        float _2053 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2051;
        float _2054 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2051;
        uvec4 _2066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2067 = _2066.x;
        uint _2078 = uint((float(_2066.y) * floor(float(uint(cbSceneParam._m0[85u].y * _516) / _2067))) + floor(float(uint(cbSceneParam._m0[85u].x * _515) / _2067)));
        float _2088 = (log2(_2054 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2089 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        uint _2092 = uint(isnan(14.0) ? _2089 : (isnan(_2089) ? 14.0 : min(_2089, 14.0)));
        uvec4 _2097 = texelFetch(g_lightClusterGridBuffer, int(((_2092 << 2u) + (_2078 << 6u)) >> 2u));
        uint _2098 = _2097.x;
        uint _2099 = _2066.z;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        if (((((1u << ((_2099 >> 4u) & 15u)) + 4294967295u) & _2098) == 0u) || ((_2099 & 240u) == 0u))
        {
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
        }
        else
        {
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2092 << 5u) + (_2078 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2543)
                {
                    frontier_phi_56_pred = _2527;
                    frontier_phi_56_pred_1 = _2532;
                    frontier_phi_56_pred_2 = _2531;
                    frontier_phi_56_pred_3 = _2530;
                    frontier_phi_56_pred_4 = _2529;
                    frontier_phi_56_pred_5 = _2528;
                }
                else
                {
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    uint _2678;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2542;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    for (;;)
                    {
                        uint _2682 = uint(findLSB(_2678)) + (_2533 << 5u);
                        uint _2679 = (_2678 + 4294967295u) & _2678;
                        uint _2684 = _2682 * 48u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2704 = (_2682 * 48u) + 4u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        float _2718 = _2717.x;
                        float _2719 = _2717.y;
                        float _2720 = _2717.z;
                        uint _2723 = (_2682 * 48u) + 8u;
                        vec3 _2734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x));
                        uint _2739 = (_2682 * 48u) + 12u;
                        vec2 _2747 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x));
                        float _2753 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
                        float _2754 = _2753 * _2052;
                        float _2755 = _2753 * _2053;
                        float _2756 = _2753 * _2054;
                        float _2757 = _2698.x - _2052;
                        float _2758 = _2698.y - _2053;
                        float _2759 = _2698.z - _2054;
                        float _2760 = dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759));
                        float _2763 = inversesqrt(_2760);
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2767 = dot(vec3(_537, _540, _543), vec3(_2764, _2765, _2766));
                        float _2772 = 1.0 - (_2760 * _2698.w);
                        float _4027 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2774 = sqrt(_2760) * _2717.w;
                        float _2777 = 1.39999997615814208984375 / (_2774 + 1.39999997615814208984375);
                        float _2778 = _2777 * _2777;
                        float _2779 = 1.0 - _2778;
                        float _2781 = (_2779 * _2779) * _490;
                        float _2784 = ((_2779 * _2767) + _2778) + _2781;
                        float _2789 = _2774 * _2774;
                        float _2794 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2773) / (((_2781 * 2.0) + 1.0) * ((_2789 * 0.699999988079071044921875) + 1.0));
                        float _2798 = dot(vec3(_2764, _2765, _2766), vec3(_2754, _2755, _2756));
                        float _4043 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2805 = dot(vec3((-0.0) - _2754, (-0.0) - _2755, (-0.0) - _2756), vec3(_537, _540, _543)) + 1.0;
                        float _2807 = (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * 0.5;
                        float _2815 = ((_2807 * _2807) * _2747.x) * exp2((_2747.y * 32.0) * log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))));
                        float _2817 = _490 / (_490 + 1.0);
                        float _2833 = (-0.0) - _2052;
                        float _2834 = (-0.0) - _2053;
                        float _2835 = (-0.0) - _2054;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2850 = exp2(log2(1.0 / ((_2789 * 3.5) + 5.0)) * 0.25);
                        float _2851 = 1.0 - _605;
                        float _2858 = sqrt(1.0 - ((1.0 - (_2851 * _2851)) * (1.0 - (_2850 * _2850))));
                        float _2859 = _2858 * _2858;
                        float _2860 = _2859 * _2859;
                        float _2861 = _2840 + _2764;
                        float _2862 = _2841 + _2765;
                        float _2863 = _2842 + _2766;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2871 = dot(vec3(_537, _540, _543), vec3(_2840, _2841, _2842));
                        float _4059 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2875 = dot(vec3(_537, _540, _543), vec3(_2867 * _2861, _2867 * _2862, _2867 * _2863));
                        float _4070 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2882 = ((_2878 * _2878) * (_2860 + (-1.0))) + 1.0;
                        float _2883 = _2777 * _2859;
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2767) + _2884;
                        float _4081 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2889 = 1.0 - _2859;
                        float _2899 = (0.5 / (((_2888 * ((_2874 * _2889) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2888 * _2889) + _2859) * _2874))) * _2888;
                        float _4092 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2910 = (((_2860 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_2882 * _2882) * ((_2789 * 2.1991131305694580078125) + 3.141590118408203125))) * _2773;
                        _2607 = (((((_2718 * 0.3183098733425140380859375) * _2817) * _2815) + _2718) * _2794) + _2675;
                        _2608 = (((((_2719 * 0.3183098733425140380859375) * _2817) * _2815) + _2719) * _2794) + _2676;
                        _2609 = (((((_2720 * 0.3183098733425140380859375) * _2817) * _2815) + _2720) * _2794) + _2677;
                        _2604 = (_2910 * _2734.x) + _2672;
                        _2605 = (_2910 * _2734.y) + _2673;
                        _2606 = (_2910 * _2734.z) + _2674;
                        if (_2679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2679;
                        }
                    }
                    frontier_phi_56_pred = _2604;
                    frontier_phi_56_pred_1 = _2609;
                    frontier_phi_56_pred_2 = _2608;
                    frontier_phi_56_pred_3 = _2607;
                    frontier_phi_56_pred_4 = _2606;
                    frontier_phi_56_pred_5 = _2605;
                }
                _2327 = frontier_phi_56_pred;
                _2337 = frontier_phi_56_pred_1;
                _2335 = frontier_phi_56_pred_2;
                _2333 = frontier_phi_56_pred_3;
                _2331 = frontier_phi_56_pred_4;
                _2329 = frontier_phi_56_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2327;
                    _2528 = _2329;
                    _2529 = _2331;
                    _2530 = _2333;
                    _2531 = _2335;
                    _2532 = _2337;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
        }
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.z;
        uint _2343 = (_2341 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2343) & _2098) == 0u)
        {
            _2495 = _2326;
            _2497 = _2328;
            _2499 = _2330;
            _2501 = _2332;
            _2503 = _2334;
            _2505 = _2336;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
            float _2521 = _2520 * _2052;
            float _2522 = _2520 * _2053;
            float _2523 = _2520 * _2054;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2343 < ((_2341 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2655 = _2326;
                float _2656 = _2328;
                float _2657 = _2330;
                float _2658 = _2332;
                float _2659 = _2334;
                float _2660 = _2336;
                uint _2661 = _2343;
                uint _2670;
                bool _2671;
                for (;;)
                {
                    _2670 = texelFetch(g_lightClassification, int((((_2092 << 5u) + (_2078 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                    _2671 = _2670 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2671)
                    {
                        frontier_phi_62_pred = _2660;
                        frontier_phi_62_pred_1 = _2659;
                        frontier_phi_62_pred_2 = _2658;
                        frontier_phi_62_pred_3 = _2657;
                        frontier_phi_62_pred_4 = _2656;
                        frontier_phi_62_pred_5 = _2655;
                    }
                    else
                    {
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _2928 = _2655;
                        float _2929 = _2656;
                        float _2930 = _2657;
                        float _2931 = _2658;
                        float _2932 = _2659;
                        float _2933 = _2660;
                        uint _2934 = _2670;
                        uint _2935;
                        vec4 _2960;
                        float _2961;
                        vec4 _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        vec3 _2991;
                        vec2 _3000;
                        vec4 _3015;
                        vec4 _3031;
                        float _3078;
                        bool _3079;
                        for (;;)
                        {
                            uint _2945 = ((_2661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2934));
                            _2935 = (_2934 + 4294967295u) & _2934;
                            uint _2947 = _2945 * 40u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2961 = _2960.w;
                            uint _2963 = (_2945 * 40u) + 4u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2977 = _2976.x;
                            _2978 = _2976.y;
                            _2979 = _2976.z;
                            uint _2981 = (_2945 * 40u) + 8u;
                            _2991 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x));
                            uint _2993 = (_2945 * 40u) + 12u;
                            _3000 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x));
                            uint _3002 = (_2945 * 40u) + 16u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2945 * 40u) + 20u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3034 = (_2945 * 40u) + 24u;
                            vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3053 = (_2945 * 40u) + 28u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3078 = fma(_2054, _3066.z, fma(_2053, _3066.y, _3066.x * _2052)) + _3066.w;
                            _3079 = !((fma(_2054, _3047.z, fma(_2053, _3047.y, _3047.x * _2052)) + _3047.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3079)
                            {
                                float _3105 = _2960.x - _2052;
                                float _3106 = _2960.y - _2053;
                                float _3107 = _2960.z - _2054;
                                float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                                float _3111 = inversesqrt(_3108);
                                float _3112 = _3111 * _3105;
                                float _3113 = _3111 * _3106;
                                float _3114 = _3111 * _3107;
                                float _3118 = 1.0 - (_3108 / (_2961 * _2961));
                                float _4103 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3123 = sqrt(_3108) * _2976.w;
                                float _3125 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                                float _3126 = _3125 * _3125;
                                float _3127 = 1.0 - _3126;
                                float _3129 = (_3127 * _3127) * _490;
                                float _3132 = ((_3127 * dot(vec3(_3112, _3113, _3114), vec3(_537, _540, _543))) + _3126) + _3129;
                                float _3137 = _3123 * _3123;
                                float _3142 = (fma(_2054, _3015.z, fma(_2053, _3015.y, _3015.x * _2052)) + _3015.w) / _3078;
                                float _3143 = (fma(_2054, _3031.z, fma(_2053, _3031.y, _3031.x * _2052)) + _3031.w) / _3078;
                                float _3147 = 1.0 - dot(vec2(_3142, _3143), vec2(_3142, _3143));
                                float _4119 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3149 = _3148 * (((isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))) * _3119) / (((_3129 * 2.0) + 1.0) * ((_3137 * 0.699999988079071044921875) + 1.0)));
                                float _3150 = (-0.0) - _2521;
                                float _3151 = (-0.0) - _2522;
                                float _3152 = (-0.0) - _2523;
                                float _3153 = dot(vec3(_3112, _3113, _3114), vec3(_2521, _2522, _2523));
                                float _4130 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3160 = dot(vec3(_3150, _3151, _3152), vec3(_537, _540, _543)) + 1.0;
                                float _3162 = (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * 0.5;
                                float _3169 = ((_3162 * _3162) * _3000.x) * exp2((_3000.y * 32.0) * log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))));
                                float _3171 = _490 / (_490 + 1.0);
                                float _3192 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                                float _3193 = 1.0 - _605;
                                float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                                float _3201 = _3200 * _3200;
                                float _3202 = _3201 * _3201;
                                float _3203 = _3112 - _2521;
                                float _3204 = _3113 - _2522;
                                float _3205 = _3114 - _2523;
                                float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                                float _3213 = dot(vec3(_537, _540, _543), vec3(_3150, _3151, _3152));
                                float _4146 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3217 = dot(vec3(_537, _540, _543), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                                float _4157 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3220 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                                float _3225 = _3125 * _3201;
                                float _3226 = _3225 * _3225;
                                float _3232 = ((1.0 - _3226) * dot(vec3(_537, _540, _543), vec3(_3112, _3113, _3114))) + _3226;
                                float _4168 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3234 = 1.0 - _3201;
                                float _3244 = (0.5 / (((_3233 * ((_3216 * _3234) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3201) * _3216))) * _3233;
                                float _4179 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3254 = (_3148 * _3119) * (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_3224 * _3224) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_2979 * 0.3183098733425140380859375) * _3171) * _3169) + _2979) * _3149;
                                frontier_phi_68_pred_1 = ((((_2978 * 0.3183098733425140380859375) * _3171) * _3169) + _2978) * _3149;
                                frontier_phi_68_pred_2 = ((((_2977 * 0.3183098733425140380859375) * _3171) * _3169) + _2977) * _3149;
                                frontier_phi_68_pred_3 = _3254 * _2991.z;
                                frontier_phi_68_pred_4 = _3254 * _2991.y;
                                frontier_phi_68_pred_5 = _3254 * _2991.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3263 = frontier_phi_68_pred;
                            _3262 = frontier_phi_68_pred_1;
                            _3261 = frontier_phi_68_pred_2;
                            _3260 = frontier_phi_68_pred_3;
                            _3259 = frontier_phi_68_pred_4;
                            _3258 = frontier_phi_68_pred_5;
                            _2918 = _3261 + _2931;
                            _2919 = _3262 + _2932;
                            _2920 = _3263 + _2933;
                            _2915 = _3258 + _2928;
                            _2916 = _3259 + _2929;
                            _2917 = _3260 + _2930;
                            if (_2935 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2935;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2920;
                        frontier_phi_62_pred_1 = _2919;
                        frontier_phi_62_pred_2 = _2918;
                        frontier_phi_62_pred_3 = _2917;
                        frontier_phi_62_pred_4 = _2916;
                        frontier_phi_62_pred_5 = _2915;
                    }
                    _2506 = frontier_phi_62_pred;
                    _2504 = frontier_phi_62_pred_1;
                    _2502 = frontier_phi_62_pred_2;
                    _2500 = frontier_phi_62_pred_3;
                    _2498 = frontier_phi_62_pred_4;
                    _2496 = frontier_phi_62_pred_5;
                    uint _2662 = _2661 + 1u;
                    if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2655 = _2496;
                        _2656 = _2498;
                        _2657 = _2500;
                        _2658 = _2502;
                        _2659 = _2504;
                        _2660 = _2506;
                        _2661 = _2662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2506;
                frontier_phi_49_50_ladder_1 = _2502;
                frontier_phi_49_50_ladder_2 = _2504;
                frontier_phi_49_50_ladder_3 = _2500;
                frontier_phi_49_50_ladder_4 = _2498;
                frontier_phi_49_50_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_49_50_ladder = _2336;
                frontier_phi_49_50_ladder_1 = _2332;
                frontier_phi_49_50_ladder_2 = _2334;
                frontier_phi_49_50_ladder_3 = _2330;
                frontier_phi_49_50_ladder_4 = _2328;
                frontier_phi_49_50_ladder_5 = _2326;
            }
            _2495 = frontier_phi_49_50_ladder_5;
            _2497 = frontier_phi_49_50_ladder_4;
            _2499 = frontier_phi_49_50_ladder_3;
            _2501 = frontier_phi_49_50_ladder_1;
            _2503 = frontier_phi_49_50_ladder_2;
            _2505 = frontier_phi_49_50_ladder;
        }
        float _2510 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
        _2111 = (_2510 * _2501) + _1806;
        _2113 = (_2510 * _2503) + _1807;
        _2115 = (_2510 * _2505) + _1808;
        _2117 = ((_2495 * 0.039999999105930328369140625) * _2510) + _1972;
        _2119 = ((_2497 * 0.039999999105930328369140625) * _2510) + _1973;
        _2121 = ((_2499 * 0.039999999105930328369140625) * _2510) + _1974;
    }
    else
    {
        _2111 = _1806;
        _2113 = _1807;
        _2115 = _1808;
        _2117 = _1972;
        _2119 = _1973;
        _2121 = _1974;
    }
    float _2141 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2142 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2143 = cbSceneParam._m0[86u].x * ((_515 / cbSceneParam._m0[86u].x) + ((_604 * cbMtdParam._m0[13u].y) * dot(vec3(_486, _487, _488), vec3(_200, _201, _202))));
    float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
    float _2145 = isnan(_2142) ? _516 : (isnan(_516) ? _2142 : min(_516, _2142));
    vec4 _2147 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2144, _2145), 0.0);
    float _2149 = _2147.x;
    bool _2170 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2149)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2149))) > _509;
    float _2171 = _2170 ? _2144 : _515;
    float _2172 = _2170 ? _2145 : _516;
    vec4 _2174 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2171, _2172));
    vec4 _2179 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2171, _2172));
    float _2181 = _2179.x;
    float _2201 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2181)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2181))) - _509;
    bool _2211 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2215 = (isnan(_2201) ? 0.0 : (isnan(0.0) ? _2201 : max(0.0, _2201))) * (-1.44269502162933349609375);
    float _4210 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4221 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4232 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _2242 = 0.959999978542327880859375 - (exp2(log2(1.0 - _596) * 5.0) * 0.959999978542327880859375);
    float _2245 = ((_2174.x * _2242) * exp2(_2215 * (_2211 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2248 = ((_2174.y * _2242) * exp2(_2215 * (_2211 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2251 = ((_2174.z * _2242) * exp2(_2215 * (_2211 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2272 = _515 / cbSceneParam._m0[86u].x;
    float _2273 = _516 / cbSceneParam._m0[86u].y;
    vec4 _2287 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, (log2((isnan(cbSceneParam._m0[77u].w) ? _509 : (isnan(_509) ? cbSceneParam._m0[77u].w : min(_509, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2289 = _2287.x;
    float _2290 = _2287.y;
    float _2291 = _2287.z;
    float _2292 = _2287.w;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_509 > cbSceneParam._m0[78u].w)
    {
        float _2351 = isnan(_509) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _509 : min(cbSceneParam._m0[80u].w, _509));
        float _2352 = _2351 / _509;
        float _2363 = _2352 * _270;
        float _2364 = _271 * _2352;
        float _2365 = (-0.0) - _2364;
        float _2366 = _2352 * _272;
        float _2368 = (cbSceneParam._m0[77u].w * _2365) / _2351;
        float _2369 = _2368 + cbSceneParam._m0[79u].w;
        float _2370 = cbSceneParam._m0[79u].w - _2364;
        float _2376 = sqrt(((_2363 * _2363) + (_2364 * _2364)) + (_2366 * _2366));
        float _2379 = (1.0 - (cbSceneParam._m0[77u].w / _2351)) * _2376;
        float _2384 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2385 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2617;
        if (abs((_2365 - _2368) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2617 = ((((_2369 > 0.0) ? exp2(_2384 * _2369) : (2.0 - exp2(_2385 * _2369))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2379;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : max(_2369, _2370));
            float _2558 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : min(_2369, _2370));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2617 = ((abs(_2376 / _2365) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2384 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2384 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2385 * _2567) - exp2(_2385 * _2568)) * _2556))) + (_2379 * cbSceneParam._m0[80u].z);
        }
        vec4 _2619 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, 1.0), 0.0);
        float _2628 = exp2((_2617 * (-1.44269502162933349609375)) * (1.0 - _2619.w));
        float _2629 = log2(_2628);
        float _2645 = log2(_2292);
        _2387 = (exp2(_2645 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].x)) * _2619.x) / cbSceneParam._m0[78u].x)) + _2289;
        _2389 = (exp2(_2645 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].y)) * _2619.y) / cbSceneParam._m0[78u].y)) + _2290;
        _2391 = (exp2(_2645 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].z)) * _2619.z) / cbSceneParam._m0[78u].z)) + _2291;
        _2393 = _2628 * _2292;
    }
    else
    {
        _2387 = _2289;
        _2389 = _2290;
        _2391 = _2291;
        _2393 = _2292;
    }
    bool _2405 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2406 = log2(_2393);
    float _2413 = exp2(_2406 * cbSceneParam._m0[78u].x) * ((_2245 + (((((_1602 * _1650.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1395) * _1666)) + _2117) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2111 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _581))) - _2245) * cbMtdParam._m0[15u].x));
    float _2414 = exp2(_2406 * cbSceneParam._m0[78u].y) * ((_2248 + (((((_1602 * _1650.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1395) * _1666)) + _2119) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2113 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _581))) - _2248) * cbMtdParam._m0[15u].x));
    float _2415 = exp2(_2406 * cbSceneParam._m0[78u].z) * ((_2251 + (((((_1602 * _1650.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1395) * _1666)) + _2121) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2115 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _581))) - _2251) * cbMtdParam._m0[15u].x));
    vec4 _2423 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_515, _516));
    float _2425 = _2423.x;
    float _2446 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2425)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2425))) - _509) * cbMtdParam._m0[14u].z;
    float _4283 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * cbInstanceData._m0[_556 + 6u].w;
    float _2457 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2457 * (_2405 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.y = _2457 * (_2405 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.z = _2457 * (_2405 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.w = _2448;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2448;
}


