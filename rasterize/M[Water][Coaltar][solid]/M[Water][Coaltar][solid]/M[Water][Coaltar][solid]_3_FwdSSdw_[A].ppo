#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1028;
float _3510;
float _3511;
float _3512;
float _3513;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _288 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _289 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    float _300 = dot(vec3(_278, _279, _280), vec3(_208, _209, _210));
    float _303 = dot(vec3(_278, _279, _280), vec3(_222, _223, _224));
    float _306 = dot(vec3(_278, _279, _280), vec3(_215, _216, _217));
    float _312 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _336 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _356 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_300 * cbMtdParam._m0[12u].x) * _312) * _336) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_303 * cbMtdParam._m0[12u].x) * _312) * _336) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _379 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _380 = _379 * _278;
    float _381 = _379 * _279;
    float _382 = _379 * _280;
    float _386 = dot(vec4(_380, _381, _382, 0.0), vec4(_215, _216, _217, 0.0)) - cbMtdParam._m0[12u].w;
    float _3522 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _393 = exp2(log2(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _408 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _356.x) * cbMtdParam._m0[9u].x) * ((_393 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _412 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _356.y) * cbMtdParam._m0[9u].y) * ((_393 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _416 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _356.z) * cbMtdParam._m0[9u].z) * ((_393 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _428 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    float _434 = ((cbMtdParam._m0[12u].z * _428.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _447 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    float _455 = (_447.x * 2.0) + (-1.0);
    float _456 = (_447.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3538 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    float _467 = cbMtdParam._m0[14u].w + _447.z;
    vec4 _479 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _288) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _289) + cbTextureTilingScale._m0[0u].w));
    float _483 = cbMtdParam._m0[13u].w * _479.x;
    float _501 = fma(_462, _215, fma(_456, _222, _455 * _208));
    float _504 = fma(_462, _216, fma(_456, _223, _455 * _209));
    float _507 = fma(_462, _217, fma(_456, _224, _455 * _210));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3549 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3560 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _516 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _517 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3576 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3587 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3598 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _541 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _543 = _541.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _707 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _713 = (cbMatDynParam._m0[5u].x * _707) + cbMatDynParam._m0[5u].y;
        float _3609 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _718 = (cbMatDynParam._m0[5u].z * _707) + cbMatDynParam._m0[5u].w;
        float _3620 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) - _714)) + _714) < ((_543 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _576 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _579 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _582 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _595 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _595 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3631 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    vec4 _617 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _555, cbSceneParam._m0[86u].y * _556));
    float _620 = _617.x * TEXCOORD_1.w;
    float _621 = dot(vec3(_512, _513, _514), vec3(_380, _381, _382));
    float _624 = _621 * 2.0;
    float _628 = (_624 * _512) - _380;
    float _629 = (_624 * _513) - _381;
    float _630 = (_624 * _514) - _382;
    float _634 = abs(dot(vec3(_380, _381, _382), vec3(_512, _513, _514)));
    float _3664 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _643 = 10.0 / (_536 + 10.0);
    float _644 = sqrt(_516);
    float _656 = exp2((_644 * 5.0) * log2(1.0 - (_635 * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1027;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_696, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688));
        float _756 = fma(_696, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688));
        float _760 = fma(_696, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688));
        float _785 = _688 + _512;
        float _786 = _692 + _513;
        float _787 = _696 + _514;
        float _797 = fma(_787, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) - _752;
        float _798 = fma(_787, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) - _756;
        float _799 = fma(_787, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) - _760;
        float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
        float _816 = ((_803 * _797) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_803 * _798) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_803 * _799) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _855 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_821.x + (-0.5));
        float _857 = _855 * (_821.y + (-0.5));
        float _858 = _855 * (_821.z + (-0.5));
        float _865 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_828.x + (-0.5));
        float _867 = _865 * (_828.y + (-0.5));
        float _868 = _865 * (_828.z + (-0.5));
        float _875 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_835.x + (-0.5));
        float _877 = _875 * (_835.y + (-0.5));
        float _878 = _875 * (_835.z + (-0.5));
        float _885 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_842.x + (-0.5));
        float _887 = _885 * (_842.y + (-0.5));
        float _888 = _885 * (_842.z + (-0.5));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = _856 * 0.5;
        float _893 = _866 * 0.5;
        float _894 = _876 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _909 = (dot(vec3(_512, _513, _514), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _919 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3712 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_921 + 1.0))) + _926) * _889;
        float _936 = _857 * 0.5;
        float _937 = _867 * 0.5;
        float _938 = _877 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_512, _513, _514), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3745 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_963 + 1.0))) + _968) * _890;
        float _978 = _858 * 0.5;
        float _979 = _868 * 0.5;
        float _980 = _878 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_512, _513, _514), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3778 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1005 + 1.0))) + _1010) * _891;
        _1027 = _858;
        _1029 = _857;
        _1030 = _856;
        _1031 = _868;
        _1032 = _867;
        _1033 = _866;
        _1034 = _878;
        _1035 = _877;
        _1036 = _876;
        _1037 = _891;
        _1038 = _890;
        _1039 = _889;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _1028;
        _1029 = _1028;
        _1030 = _1028;
        _1031 = _1028;
        _1032 = _1028;
        _1033 = _1028;
        _1034 = _1028;
        _1035 = _1028;
        _1036 = _1028;
        _1037 = _1028;
        _1038 = _1028;
        _1039 = _1028;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1071 = fma(_696, cbModelParam._m0[30u].z, fma(_692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _688));
        float _1075 = fma(_696, cbModelParam._m0[31u].z, fma(_692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _688));
        float _1079 = fma(_696, cbModelParam._m0[32u].z, fma(_692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _688));
        float _1102 = _688 + _512;
        float _1103 = _692 + _513;
        float _1104 = _696 + _514;
        float _1114 = fma(_1104, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102)) - _1071;
        float _1115 = fma(_1104, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102)) - _1075;
        float _1116 = fma(_1104, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102)) - _1079;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1071 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1075 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[35u].z) + ((((((_1079 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1170 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1137.x + (-0.5));
        float _1172 = _1170 * (_1137.y + (-0.5));
        float _1173 = _1170 * (_1137.z + (-0.5));
        float _1180 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1144.x + (-0.5));
        float _1182 = _1180 * (_1144.y + (-0.5));
        float _1183 = _1180 * (_1144.z + (-0.5));
        float _1190 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1151.x + (-0.5));
        float _1192 = _1190 * (_1151.y + (-0.5));
        float _1193 = _1190 * (_1151.z + (-0.5));
        float _1200 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1158.x + (-0.5));
        float _1202 = _1200 * (_1158.y + (-0.5));
        float _1203 = _1200 * (_1158.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_512, _513, _514), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3841 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1234 + 1.0))) + _1239) * _1204;
        float _1249 = _1172 * 0.5;
        float _1250 = _1182 * 0.5;
        float _1251 = _1192 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_512, _513, _514), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3874 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1276 + 1.0))) + _1281) * _1205;
        float _1291 = _1173 * 0.5;
        float _1292 = _1183 * 0.5;
        float _1293 = _1193 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_512, _513, _514), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3907 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1318 + 1.0))) + _1323) * _1206;
        _1340 = _1173;
        _1341 = _1172;
        _1342 = _1171;
        _1343 = _1183;
        _1344 = _1182;
        _1345 = _1181;
        _1346 = _1193;
        _1347 = _1192;
        _1348 = _1191;
        _1349 = _1206;
        _1350 = _1205;
        _1351 = _1204;
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1028;
        _1341 = _1028;
        _1342 = _1028;
        _1343 = _1028;
        _1344 = _1028;
        _1345 = _1028;
        _1346 = _1028;
        _1347 = _1028;
        _1348 = _1028;
        _1349 = _1028;
        _1350 = _1028;
        _1351 = _1028;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1387 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1364));
    float _1408 = _628 * 0.5;
    float _1409 = _629 * 0.5;
    float _1410 = _630 * 0.5;
    float _1411 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1414 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1417 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1451;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1424 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1027, _1031, _1034, _1037));
        float _1428 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1432 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1439 = dot(vec4(cbModelParam._m0[39u]), vec4(_1408, _1409, _1410, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1462;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1453 = dot(vec4(cbModelParam._m0[40u]), vec4(_1408, _1409, _1410, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1466 = (_1462 * cbModelParam._m0[1u].x) + (_1451 * (1.0 - cbModelParam._m0[1u].x));
    float _1476 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _516);
    float _1477 = isnan(_1476) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1476 : min(cbModelParam._m0[25u].z, _1476));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1524 = fma(_696, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688)) + cbModelParam._m0[13u].w;
        float _1528 = fma(_696, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688)) + cbModelParam._m0[14u].w;
        float _1532 = fma(_696, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688)) + cbModelParam._m0[15u].w;
        float _1535 = fma(_630, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628));
        float _1538 = fma(_630, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628));
        float _1541 = fma(_630, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628));
        float _1569;
        if (_1535 > 0.0)
        {
            _1569 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1569 = frontier_phi_17_15_ladder;
        }
        float _1813;
        if (_1538 > 0.0)
        {
            _1813 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1813 = frontier_phi_26_22_ladder;
        }
        float _2051;
        if (_1541 > 0.0)
        {
            _2051 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2051 = frontier_phi_37_33_ladder;
        }
        float _2053 = isnan(_1813) ? _1569 : (isnan(_1569) ? _1813 : min(_1569, _1813));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1535) + _1524;
        float _2059 = (_2054 * _1538) + _1528;
        float _2060 = (_2054 * _1541) + _1532;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2061;
        float _2065 = _2061 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 > _2065) || ((_2059 < _2063) || ((_2058 < _2063) || (_2058 > _2065))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1477);
            frontier_phi_16_37_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1557 = frontier_phi_16_37_ladder_2;
        _1559 = frontier_phi_16_37_ladder_1;
        _1561 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_628, _629, _630), _1477);
        _1557 = _1545.x * cbModelParam._m0[1u].y;
        _1559 = _1545.y * cbModelParam._m0[1u].y;
        _1561 = _1545.z * cbModelParam._m0[1u].y;
    }
    float _1565 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _516);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1565 : min(cbModelParam._m0[25u].w, _1565));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1621 = fma(_696, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688)) + cbModelParam._m0[21u].w;
        float _1625 = fma(_696, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688)) + cbModelParam._m0[22u].w;
        float _1629 = fma(_696, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688)) + cbModelParam._m0[23u].w;
        float _1632 = fma(_630, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628));
        float _1635 = fma(_630, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628));
        float _1638 = fma(_630, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628));
        float _1818;
        if (_1632 > 0.0)
        {
            _1818 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1818 = frontier_phi_28_24_ladder;
        }
        float _2078;
        if (_1635 > 0.0)
        {
            _2078 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2078 = frontier_phi_39_35_ladder;
        }
        float _2549;
        if (_1638 > 0.0)
        {
            _2549 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2549 = frontier_phi_50_45_ladder;
        }
        float _2551 = isnan(_2078) ? _1818 : (isnan(_1818) ? _2078 : min(_1818, _2078));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _1632) + _1621;
        float _2557 = (_2552 * _1635) + _1625;
        float _2558 = (_2552 * _1638) + _1629;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2559;
        float _2562 = _2559 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2558 > _2562) || ((_2558 < _2560) || ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 < _2560) || (_2556 > _2562))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2558, cbModelParam._m0[17u].z, fma(_2557, cbModelParam._m0[17u].y, _2556 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2558, cbModelParam._m0[18u].z, fma(_2557, cbModelParam._m0[18u].y, _2556 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2558, cbModelParam._m0[19u].z, fma(_2557, cbModelParam._m0[19u].y, _2556 * cbModelParam._m0[19u].x))), _1566);
            frontier_phi_25_50_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1657 = frontier_phi_25_50_ladder_2;
        _1659 = frontier_phi_25_50_ladder_1;
        _1661 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_628, _629, _630), _1566);
        _1657 = _1641.x * cbModelParam._m0[1u].z;
        _1659 = _1641.y * cbModelParam._m0[1u].z;
        _1661 = _1641.z * cbModelParam._m0[1u].z;
    }
    float _1673 = ((((1.0 - _656) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_656 * _644)) * _620;
    float _1674 = _1673 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1675 = _1673 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1676 = _1673 * ((cbModelParam._m0[1u].w * (_1661 - _1561)) + _1561);
    float _1679 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, _1674 * cbSceneParam._m0[91u].x));
    float _1696 = _555 / cbSceneParam._m0[86u].x;
    float _1704 = (cbSceneParam._m0[88u].y * (1.0 - _516)) + cbSceneParam._m0[88u].z;
    float _4033 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1706 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 5.0;
    float _1711 = (_643 * cbMtdParam._m0[13u].z) * dot(vec3(_512, _513, _514), vec3(1.0, 0.0, 0.0));
    vec4 _1721 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1711 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1711 + _1696) * cbSceneParam._m0[86u].x, _556), _1706).w) + _1696) * cbSceneParam._m0[86u].x, _556), _1706);
    float _1737 = 1.0 - _1721.w;
    vec4 _1745 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_555, _556));
    float _1747 = _1745.w;
    float _1759 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1747);
    float _1760 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1747);
    float _1761 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1747);
    uvec4 _1765 = floatBitsToUint(cbInstanceData._m0[_595 + 5u]);
    uint _1767 = _1765.x * 14u;
    uint _1768 = _1767 + 13u;
    float _1773 = _620 + (-1.0);
    float _1776 = (cbLight._m0[_1768].x * _1773) + 1.0;
    float _1777 = (cbLight._m0[_1768].y * _1773) + 1.0;
    uint _1779 = _1767 + 4u;
    float _1790 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_512, _513, _514));
    float _1793 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    float _1794 = cbLight._m0[_1779].x * _1759;
    float _1795 = cbLight._m0[_1779].y * _1760;
    float _1796 = cbLight._m0[_1779].z * _1761;
    uint _1797 = _1767 + 5u;
    uint _1803 = _1767 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_512, _513, _514));
    float _1812 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    float _1877;
    float _1878;
    float _1879;
    if (_517 == 0.0)
    {
        float _4054 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _4065 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1831 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
        float _1833 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
        _1877 = ((cbLight._m0[_1797].x * _1812) * _1833) + ((_1794 * _1793) * _1831);
        _1878 = ((_1812 * cbLight._m0[_1797].y) * _1833) + ((_1795 * _1793) * _1831);
        _1879 = ((_1812 * cbLight._m0[_1797].z) * _1833) + ((_1796 * _1793) * _1831);
    }
    else
    {
        float _1843 = _1790 + _517;
        float _1846 = (_517 * 2.0) + 1.0;
        float _1847 = (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) / _1846;
        float _1854 = _1809 + _517;
        float _1856 = (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) / _1846;
        _1877 = (((_1856 * cbLight._m0[_1797].x) * _1812) + ((_1794 * _1847) * _1793)) * 0.3183098733425140380859375;
        _1878 = (((_1856 * cbLight._m0[_1797].y) * _1812) + ((_1795 * _1847) * _1793)) * 0.3183098733425140380859375;
        _1879 = (((_1856 * cbLight._m0[_1797].z) * _1812) + ((_1796 * _1847) * _1793)) * 0.3183098733425140380859375;
    }
    uint _1883 = _1767 + 8u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _516) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1767].x + _380;
    float _1902 = cbLight._m0[_1767].y + _381;
    float _1903 = cbLight._m0[_1767].z + _382;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1767].xyz));
    float _4086 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _1915 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1916 = dot(vec3(_512, _513, _514), vec3(_1908, _1909, _1910));
    float _4108 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1908, _1909, _1910));
    float _4119 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1900 * _1900;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1940 = 1.0 - _1900;
    float _1951 = (0.5 / (((_1915 * ((_1914 * _1940) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _1940) + _1900) * _1914))) * _1914;
    float _4130 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1953 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    uint _1969 = _1767 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _516) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1803].x + _380;
    float _1986 = cbLight._m0[_1803].y + _381;
    float _1987 = cbLight._m0[_1803].z + _382;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1803].xyz));
    float _4141 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1999 = dot(vec3(_512, _513, _514), vec3(_1992, _1993, _1994));
    float _4152 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_1992, _1993, _1994));
    float _4163 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2021 = 1.0 - _1984;
    float _2031 = (0.5 / (((_1915 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _2021) + _1984) * _1998))) * _1998;
    float _4174 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2043 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _1812) + ((((cbLight._m0[_1883].x * _1759) * _1939) * _1953) * _1793);
    float _2044 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _1812) + ((((cbLight._m0[_1883].y * _1760) * _1939) * _1953) * _1793);
    float _2045 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _1812) + ((((cbLight._m0[_1883].z * _1761) * _1939) * _1953) * _1793);
    float _2182;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    float _2192;
    if (_1765.y == 0u)
    {
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2123 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2122;
        float _2124 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2122;
        float _2125 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2122;
        uvec4 _2137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2138 = _2137.x;
        uint _2149 = uint((float(_2137.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _2138))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _2138)));
        float _2159 = (log2(_2125 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2160 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        uint _2163 = uint(isnan(14.0) ? _2160 : (isnan(_2160) ? 14.0 : min(_2160, 14.0)));
        uvec4 _2168 = texelFetch(g_lightClusterGridBuffer, int(((_2163 << 2u) + (_2149 << 6u)) >> 2u));
        uint _2169 = _2168.x;
        uint _2170 = _2137.z;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        if (((((1u << ((_2170 >> 4u) & 15u)) + 4294967295u) & _2169) == 0u) || ((_2170 & 240u) == 0u))
        {
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
        }
        else
        {
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2163 << 5u) + (_2149 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2623)
                {
                    frontier_phi_61_pred = _2608;
                    frontier_phi_61_pred_1 = _2612;
                    frontier_phi_61_pred_2 = _2611;
                    frontier_phi_61_pred_3 = _2610;
                    frontier_phi_61_pred_4 = _2609;
                    frontier_phi_61_pred_5 = _2607;
                }
                else
                {
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    uint _2779;
                    _2773 = _2607;
                    _2774 = _2608;
                    _2775 = _2609;
                    _2776 = _2610;
                    _2777 = _2611;
                    _2778 = _2612;
                    _2779 = _2622;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    for (;;)
                    {
                        uint _2783 = uint(findLSB(_2779)) + (_2613 << 5u);
                        uint _2780 = (_2779 + 4294967295u) & _2779;
                        uint _2785 = _2783 * 48u;
                        vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 3u)).x));
                        uint _2805 = (_2783 * 48u) + 4u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        float _2819 = _2818.x;
                        float _2820 = _2818.y;
                        float _2821 = _2818.z;
                        uint _2824 = (_2783 * 48u) + 8u;
                        vec3 _2835 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x));
                        uint _2840 = (_2783 * 48u) + 12u;
                        vec2 _2848 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x));
                        float _2854 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
                        float _2855 = _2854 * _2123;
                        float _2856 = _2854 * _2124;
                        float _2857 = _2854 * _2125;
                        float _2858 = _2799.x - _2123;
                        float _2859 = _2799.y - _2124;
                        float _2860 = _2799.z - _2125;
                        float _2861 = dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860));
                        float _2864 = inversesqrt(_2861);
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2868 = dot(vec3(_576, _579, _582), vec3(_2865, _2866, _2867));
                        float _2873 = 1.0 - (_2861 * _2799.w);
                        float _4195 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2875 = sqrt(_2861) * _2818.w;
                        float _2878 = 1.39999997615814208984375 / (_2875 + 1.39999997615814208984375);
                        float _2879 = _2878 * _2878;
                        float _2880 = 1.0 - _2879;
                        float _2882 = (_2880 * _2880) * _517;
                        float _2885 = ((_2880 * _2868) + _2879) + _2882;
                        float _2890 = _2875 * _2875;
                        float _2895 = ((isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * _2874) / (((_2882 * 2.0) + 1.0) * ((_2890 * 0.699999988079071044921875) + 1.0));
                        float _2899 = dot(vec3(_2865, _2866, _2867), vec3(_2855, _2856, _2857));
                        float _4211 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2906 = dot(vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857), vec3(_576, _579, _582)) + 1.0;
                        float _2908 = (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))) * 0.5;
                        float _2916 = ((_2908 * _2908) * _2848.x) * exp2((_2848.y * 32.0) * log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))));
                        float _2918 = _517 / (_517 + 1.0);
                        float _2934 = (-0.0) - _2123;
                        float _2935 = (-0.0) - _2124;
                        float _2936 = (-0.0) - _2125;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2951 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _644;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2941 + _2865;
                        float _2963 = _2942 + _2866;
                        float _2964 = _2943 + _2867;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_576, _579, _582), vec3(_2941, _2942, _2943));
                        float _4227 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2976 = dot(vec3(_576, _579, _582), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4238 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2878 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2868) + _2985;
                        float _4249 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4260 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3011 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_2983 * _2983) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2874;
                        _2703 = (((((_2819 * 0.3183098733425140380859375) * _2918) * _2916) + _2819) * _2895) + _2776;
                        _2704 = (((((_2820 * 0.3183098733425140380859375) * _2918) * _2916) + _2820) * _2895) + _2777;
                        _2705 = (((((_2821 * 0.3183098733425140380859375) * _2918) * _2916) + _2821) * _2895) + _2778;
                        _2700 = (_3011 * _2835.x) + _2773;
                        _2701 = (_3011 * _2835.y) + _2774;
                        _2702 = (_3011 * _2835.z) + _2775;
                        if (_2780 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2780;
                        }
                    }
                    frontier_phi_61_pred = _2701;
                    frontier_phi_61_pred_1 = _2705;
                    frontier_phi_61_pred_2 = _2704;
                    frontier_phi_61_pred_3 = _2703;
                    frontier_phi_61_pred_4 = _2702;
                    frontier_phi_61_pred_5 = _2700;
                }
                _2401 = frontier_phi_61_pred;
                _2409 = frontier_phi_61_pred_1;
                _2407 = frontier_phi_61_pred_2;
                _2405 = frontier_phi_61_pred_3;
                _2403 = frontier_phi_61_pred_4;
                _2399 = frontier_phi_61_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2399;
                    _2608 = _2401;
                    _2609 = _2403;
                    _2610 = _2405;
                    _2611 = _2407;
                    _2612 = _2409;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
        }
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.z;
        uint _2415 = (_2413 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2415) & _2169) == 0u)
        {
            _2575 = _2398;
            _2577 = _2400;
            _2579 = _2402;
            _2581 = _2404;
            _2583 = _2406;
            _2585 = _2408;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
            float _2601 = _2600 * _2123;
            float _2602 = _2600 * _2124;
            float _2603 = _2600 * _2125;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2415 < ((_2413 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2756 = _2398;
                float _2757 = _2400;
                float _2758 = _2402;
                float _2759 = _2404;
                float _2760 = _2406;
                float _2761 = _2408;
                uint _2762 = _2415;
                uint _2771;
                bool _2772;
                for (;;)
                {
                    _2771 = texelFetch(g_lightClassification, int((((_2163 << 5u) + (_2149 << 9u)) + (_2762 << 2u)) >> 2u)).x;
                    _2772 = _2771 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2772)
                    {
                        frontier_phi_72_pred = _2761;
                        frontier_phi_72_pred_1 = _2760;
                        frontier_phi_72_pred_2 = _2759;
                        frontier_phi_72_pred_3 = _2758;
                        frontier_phi_72_pred_4 = _2757;
                        frontier_phi_72_pred_5 = _2756;
                    }
                    else
                    {
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3038 = _2756;
                        float _3039 = _2757;
                        float _3040 = _2758;
                        float _3041 = _2759;
                        float _3042 = _2760;
                        float _3043 = _2761;
                        uint _3044 = _2771;
                        uint _3045;
                        vec4 _3070;
                        float _3071;
                        vec4 _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        vec3 _3101;
                        vec2 _3110;
                        vec4 _3125;
                        vec4 _3141;
                        float _3188;
                        bool _3189;
                        for (;;)
                        {
                            uint _3055 = ((_2762 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3044));
                            _3045 = (_3044 + 4294967295u) & _3044;
                            uint _3057 = _3055 * 40u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            _3071 = _3070.w;
                            uint _3073 = (_3055 * 40u) + 4u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.x;
                            _3088 = _3086.y;
                            _3089 = _3086.z;
                            uint _3091 = (_3055 * 40u) + 8u;
                            _3101 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x));
                            uint _3103 = (_3055 * 40u) + 12u;
                            _3110 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x));
                            uint _3112 = (_3055 * 40u) + 16u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3128 = (_3055 * 40u) + 20u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3144 = (_3055 * 40u) + 24u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3163 = (_3055 * 40u) + 28u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3188 = fma(_2125, _3176.z, fma(_2124, _3176.y, _3176.x * _2123)) + _3176.w;
                            _3189 = !((fma(_2125, _3157.z, fma(_2124, _3157.y, _3157.x * _2123)) + _3157.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3189)
                            {
                                float _3215 = _3070.x - _2123;
                                float _3216 = _3070.y - _2124;
                                float _3217 = _3070.z - _2125;
                                float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                                float _3221 = inversesqrt(_3218);
                                float _3222 = _3221 * _3215;
                                float _3223 = _3221 * _3216;
                                float _3224 = _3221 * _3217;
                                float _3228 = 1.0 - (_3218 / (_3071 * _3071));
                                float _4271 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3233 = sqrt(_3218) * _3086.w;
                                float _3235 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                                float _3236 = _3235 * _3235;
                                float _3237 = 1.0 - _3236;
                                float _3239 = (_3237 * _3237) * _517;
                                float _3242 = ((_3237 * dot(vec3(_3222, _3223, _3224), vec3(_576, _579, _582))) + _3236) + _3239;
                                float _3247 = _3233 * _3233;
                                float _3252 = (fma(_2125, _3125.z, fma(_2124, _3125.y, _3125.x * _2123)) + _3125.w) / _3188;
                                float _3253 = (fma(_2125, _3141.z, fma(_2124, _3141.y, _3141.x * _2123)) + _3141.w) / _3188;
                                float _3257 = 1.0 - dot(vec2(_3252, _3253), vec2(_3252, _3253));
                                float _4287 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3259 = _3258 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3229) / (((_3239 * 2.0) + 1.0) * ((_3247 * 0.699999988079071044921875) + 1.0)));
                                float _3260 = (-0.0) - _2601;
                                float _3261 = (-0.0) - _2602;
                                float _3262 = (-0.0) - _2603;
                                float _3263 = dot(vec3(_3222, _3223, _3224), vec3(_2601, _2602, _2603));
                                float _4298 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3270 = dot(vec3(_3260, _3261, _3262), vec3(_576, _579, _582)) + 1.0;
                                float _3272 = (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * 0.5;
                                float _3279 = ((_3272 * _3272) * _3110.x) * exp2((_3110.y * 32.0) * log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))));
                                float _3281 = _517 / (_517 + 1.0);
                                float _3302 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                                float _3303 = 1.0 - _644;
                                float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                                float _3311 = _3310 * _3310;
                                float _3312 = _3311 * _3311;
                                float _3313 = _3222 - _2601;
                                float _3314 = _3223 - _2602;
                                float _3315 = _3224 - _2603;
                                float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                                float _3323 = dot(vec3(_576, _579, _582), vec3(_3260, _3261, _3262));
                                float _4314 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3327 = dot(vec3(_576, _579, _582), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                                float _4325 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                                float _3335 = _3235 * _3311;
                                float _3336 = _3335 * _3335;
                                float _3342 = ((1.0 - _3336) * dot(vec3(_576, _579, _582), vec3(_3222, _3223, _3224))) + _3336;
                                float _4336 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3344 = 1.0 - _3311;
                                float _3354 = (0.5 / (((_3343 * ((_3326 * _3344) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3311) * _3326))) * _3343;
                                float _4347 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3364 = (_3258 * _3229) * (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3334 * _3334) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3087 * 0.3183098733425140380859375) * _3281) * _3279) + _3087) * _3259;
                                frontier_phi_78_pred_1 = ((((_3089 * 0.3183098733425140380859375) * _3281) * _3279) + _3089) * _3259;
                                frontier_phi_78_pred_2 = ((((_3088 * 0.3183098733425140380859375) * _3281) * _3279) + _3088) * _3259;
                                frontier_phi_78_pred_3 = _3364 * _3101.z;
                                frontier_phi_78_pred_4 = _3364 * _3101.y;
                                frontier_phi_78_pred_5 = _3364 * _3101.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_78_pred;
                            _3373 = frontier_phi_78_pred_1;
                            _3372 = frontier_phi_78_pred_2;
                            _3370 = frontier_phi_78_pred_3;
                            _3369 = frontier_phi_78_pred_4;
                            _3368 = frontier_phi_78_pred_5;
                            _3028 = _3371 + _3041;
                            _3029 = _3372 + _3042;
                            _3030 = _3373 + _3043;
                            _3025 = _3368 + _3038;
                            _3026 = _3369 + _3039;
                            _3027 = _3370 + _3040;
                            if (_3045 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3045;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3030;
                        frontier_phi_72_pred_1 = _3029;
                        frontier_phi_72_pred_2 = _3028;
                        frontier_phi_72_pred_3 = _3027;
                        frontier_phi_72_pred_4 = _3026;
                        frontier_phi_72_pred_5 = _3025;
                    }
                    _2586 = frontier_phi_72_pred;
                    _2584 = frontier_phi_72_pred_1;
                    _2582 = frontier_phi_72_pred_2;
                    _2580 = frontier_phi_72_pred_3;
                    _2578 = frontier_phi_72_pred_4;
                    _2576 = frontier_phi_72_pred_5;
                    uint _2763 = _2762 + 1u;
                    if (_2763 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2756 = _2576;
                        _2757 = _2578;
                        _2758 = _2580;
                        _2759 = _2582;
                        _2760 = _2584;
                        _2761 = _2586;
                        _2762 = _2763;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2586;
                frontier_phi_52_53_ladder_1 = _2578;
                frontier_phi_52_53_ladder_2 = _2584;
                frontier_phi_52_53_ladder_3 = _2582;
                frontier_phi_52_53_ladder_4 = _2580;
                frontier_phi_52_53_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_52_53_ladder = _2408;
                frontier_phi_52_53_ladder_1 = _2400;
                frontier_phi_52_53_ladder_2 = _2406;
                frontier_phi_52_53_ladder_3 = _2404;
                frontier_phi_52_53_ladder_4 = _2402;
                frontier_phi_52_53_ladder_5 = _2398;
            }
            _2575 = frontier_phi_52_53_ladder_5;
            _2577 = frontier_phi_52_53_ladder_1;
            _2579 = frontier_phi_52_53_ladder_4;
            _2581 = frontier_phi_52_53_ladder_3;
            _2583 = frontier_phi_52_53_ladder_2;
            _2585 = frontier_phi_52_53_ladder;
        }
        float _2590 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
        _2182 = (_2590 * _2581) + _1877;
        _2184 = (_2590 * _2583) + _1878;
        _2186 = (_2590 * _2585) + _1879;
        _2188 = ((_2575 * 0.039999999105930328369140625) * _2590) + _2043;
        _2190 = ((_2577 * 0.039999999105930328369140625) * _2590) + _2044;
        _2192 = ((_2579 * 0.039999999105930328369140625) * _2590) + _2045;
    }
    else
    {
        _2182 = _1877;
        _2184 = _1878;
        _2186 = _1879;
        _2188 = _2043;
        _2190 = _2044;
        _2192 = _2045;
    }
    float _2212 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2213 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2214 = cbSceneParam._m0[86u].x * ((_555 / cbSceneParam._m0[86u].x) + ((_643 * cbMtdParam._m0[13u].y) * dot(vec3(_512, _513, _514), vec3(_208, _209, _210))));
    float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
    float _2216 = isnan(_2213) ? _556 : (isnan(_556) ? _2213 : min(_556, _2213));
    vec4 _2218 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2215, _2216), 0.0);
    float _2220 = _2218.x;
    bool _2241 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2220)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2220))) > _536;
    float _2242 = _2241 ? _2215 : _555;
    float _2243 = _2241 ? _2216 : _556;
    vec4 _2245 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2242, _2243));
    vec4 _2250 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2242, _2243));
    float _2252 = _2250.x;
    float _2272 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2252)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2252))) - _536;
    bool _2282 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2286 = (isnan(_2272) ? 0.0 : (isnan(0.0) ? _2272 : max(0.0, _2272))) * (-1.44269502162933349609375);
    float _4378 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4389 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4400 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2313 = 0.959999978542327880859375 - (exp2(log2(1.0 - _635) * 5.0) * 0.959999978542327880859375);
    float _2316 = ((_2245.x * _2313) * exp2(_2286 * (_2282 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2319 = ((_2245.y * _2313) * exp2(_2286 * (_2282 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2322 = ((_2245.z * _2313) * exp2(_2286 * (_2282 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2330 = (_2316 + (((((_1673 * _1721.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1466) * _1737)) + _2188) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2182 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _620))) - _2316) * cbMtdParam._m0[15u].x);
    float _2332 = (_2319 + (((((_1673 * _1721.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1466) * _1737)) + _2190) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2184 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _620))) - _2319) * cbMtdParam._m0[15u].x);
    float _2334 = (_2322 + (((((_1673 * _1721.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1466) * _1737)) + _2192) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2186 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _620))) - _2322) * cbMtdParam._m0[15u].x);
    float _2339 = cbInstanceData._m0[_595 + 6u].w * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)));
    float _2344 = _555 / cbSceneParam._m0[86u].x;
    float _2345 = _556 / cbSceneParam._m0[86u].y;
    vec4 _2359 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2361 = _2359.x;
    float _2362 = _2359.y;
    float _2363 = _2359.z;
    float _2364 = _2359.w;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2423 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2424 = _2423 / _536;
        float _2435 = _2424 * _278;
        float _2436 = _279 * _2424;
        float _2437 = (-0.0) - _2436;
        float _2438 = _2424 * _280;
        float _2440 = (cbSceneParam._m0[77u].w * _2437) / _2423;
        float _2441 = _2440 + cbSceneParam._m0[79u].w;
        float _2442 = cbSceneParam._m0[79u].w - _2436;
        float _2448 = sqrt(((_2435 * _2435) + (_2436 * _2436)) + (_2438 * _2438));
        float _2451 = (1.0 - (cbSceneParam._m0[77u].w / _2423)) * _2448;
        float _2456 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2457 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2713;
        if (abs((_2437 - _2440) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2713 = ((((_2441 > 0.0) ? exp2(_2456 * _2441) : (2.0 - exp2(_2457 * _2441))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2451;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : max(_2441, _2442));
            float _2638 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : min(_2441, _2442));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2713 = ((abs(_2448 / _2437) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2456 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2456 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2457 * _2647) - exp2(_2457 * _2648)) * _2636))) + (_2451 * cbSceneParam._m0[80u].z);
        }
        vec4 _2715 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, 1.0), 0.0);
        float _2724 = exp2((_2713 * (-1.44269502162933349609375)) * (1.0 - _2715.w));
        float _2725 = log2(_2724);
        float _2741 = log2(_2364);
        _2459 = (exp2(_2741 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].x)) * _2715.x) / cbSceneParam._m0[78u].x)) + _2361;
        _2461 = (exp2(_2741 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].y)) * _2715.y) / cbSceneParam._m0[78u].y)) + _2362;
        _2463 = (exp2(_2741 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].z)) * _2715.z) / cbSceneParam._m0[78u].z)) + _2363;
        _2465 = _2724 * _2364;
    }
    else
    {
        _2459 = _2361;
        _2461 = _2362;
        _2463 = _2363;
        _2465 = _2364;
    }
    bool _2751;
    float _2520;
    vec4 _2523;
    float _2525;
    vec4 _2527;
    float _2535;
    float _2536;
    float _2537;
    float _2538;
    bool _2548;
    for (;;)
    {
        bool _2477 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2478 = log2(_2465);
        float _2485 = exp2(_2478 * cbSceneParam._m0[78u].x) * _2330;
        float _2486 = exp2(_2478 * cbSceneParam._m0[78u].y) * _2332;
        float _2487 = exp2(_2478 * cbSceneParam._m0[78u].z) * _2334;
        vec4 _2495 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_555, _556));
        float _2497 = _2495.x;
        float _2518 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2497)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2497))) - _536) * cbMtdParam._m0[14u].z;
        float _4451 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        _2520 = _2339 * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)));
        float _2521 = _543 + (-0.5);
        _2523 = cbMtdParam._m0[1u];
        _2525 = _2523.y * _2521;
        _2527 = cbMatDynParam._m0[0u];
        float _2534 = (roundEven(_2527.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2535 = _2534 * (_2477 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2459)));
        _2536 = _2534 * (_2477 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2461)));
        _2537 = _2534 * (_2477 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2463)));
        _2538 = _2521 * 0.999000012874603271484375;
        _2548 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2548)
        {
            if ((cbInstanceData._m0[_595 + 7u].x + _2538) < 0.5)
            {
                _2751 = true;
                break;
            }
        }
        uint _2671 = _596 + uint(_2527.w);
        if ((cbInstanceData._m0[_2671].w < 1.0) && ((cbInstanceData._m0[_2671].w + _2538) < 0.5))
        {
            _2751 = true;
            break;
        }
        if ((_2525 + 1.0) < _2523.x)
        {
            _2751 = true;
            break;
        }
        _2751 = false;
        break;
    }
    float _3016;
    if (_2751)
    {
        discard_state = true;
        _3016 = 0.0;
    }
    else
    {
        _3016 = _2520;
    }
    SV_Target.x = _2535;
    SV_Target.y = _2536;
    SV_Target.z = _2537;
    SV_Target.w = _3016;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2520;
    discard_exit();
}


