#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3541;
float _3542;
float _3543;
float _3544;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _289 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _290 = _289 * _278;
    float _291 = _289 * _279;
    float _292 = _289 * _280;
    float _300 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _301 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _315 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_300 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_301 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3553 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))));
    float _335 = fma(_332, _215, fma(_325, _222, _323 * _208));
    float _338 = fma(_332, _216, fma(_325, _223, _323 * _209));
    float _341 = fma(_332, _217, fma(_325, _224, _323 * _210));
    float _345 = inversesqrt(dot(vec3(_335, _338, _341), vec3(_335, _338, _341)));
    float _354 = (dot(vec4(_290, _291, _292, 0.0), vec4(_345 * _335, _345 * _338, _345 * _341, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _367 = dot(vec3(_278, _279, _280), vec3(_208, _209, _210));
    float _370 = dot(vec3(_278, _279, _280), vec3(_222, _223, _224));
    float _373 = dot(vec3(_278, _279, _280), vec3(_215, _216, _217));
    float _379 = inversesqrt(dot(vec3(_367, _370, _373), vec3(_367, _370, _373)));
    float _400 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _420 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_367 * cbMtdParam._m0[12u].x) * _379) * _400) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_370 * cbMtdParam._m0[12u].x) * _379) * _400) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _443 = dot(vec4(_290, _291, _292, 0.0), vec4(_215, _216, _217, 0.0)) - cbMtdParam._m0[12u].w;
    float _3564 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _450 = exp2(log2(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _465 = (((((sin(_354) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _420.x) * cbMtdParam._m0[9u].x) * ((_450 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _474 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _420.y) * cbMtdParam._m0[9u].y) * ((_450 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_354 * 0.85000002384185791015625) + 1.0);
    float _483 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _420.z) * cbMtdParam._m0[9u].z) * ((_450 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_354 * 0.699999988079071044921875) + 1.0);
    vec4 _495 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    float _501 = ((cbMtdParam._m0[12u].z * _495.x) + TEXCOORD_1.z) * TEXCOORD_1.z;
    vec4 _514 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3580 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))));
    float _530 = cbMtdParam._m0[14u].w + _514.z;
    vec4 _542 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _300) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _301) + cbTextureTilingScale._m0[0u].w));
    float _546 = cbMtdParam._m0[13u].w * _542.x;
    float _564 = fma(_528, _215, fma(_522, _222, _521 * _208));
    float _567 = fma(_528, _216, fma(_522, _223, _521 * _209));
    float _570 = fma(_528, _217, fma(_522, _224, _521 * _210));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3591 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3602 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _579 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _580 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3618 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3629 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3640 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _604 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _606 = _604.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _769 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _775 = (cbMatDynParam._m0[5u].x * _769) + cbMatDynParam._m0[5u].y;
        float _3651 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _780 = (cbMatDynParam._m0[5u].z * _769) + cbMatDynParam._m0[5u].w;
        float _3662 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) - _776)) + _776) < ((_606 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _618 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _619 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _641 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _644 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _657 = uint(roundEven(NORMAL.w)) * 13u;
    uint _658 = _657 + 9u;
    uint _659 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3673 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _618, cbSceneParam._m0[86u].y * _619));
    float _682 = _679.x * TEXCOORD_1.w;
    float _683 = dot(vec3(_575, _576, _577), vec3(_290, _291, _292));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _575) - _290;
    float _691 = (_686 * _576) - _291;
    float _692 = (_686 * _577) - _292;
    float _696 = abs(dot(vec3(_290, _291, _292), vec3(_575, _576, _577)));
    float _3706 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _705 = 10.0 / (_599 + 10.0);
    float _706 = sqrt(_579);
    float _718 = exp2((_706 * 5.0) * log2(1.0 - (_697 * 0.999000012874603271484375))) / (4.0 - (_706 * 3.0));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _818 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _822 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _847 = _750 + _575;
        float _848 = _754 + _576;
        float _849 = _758 + _577;
        float _859 = fma(_849, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847)) - _814;
        float _860 = fma(_849, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847)) - _818;
        float _861 = fma(_849, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847)) - _822;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_814 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_818 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[34u].z) + ((((((_822 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(_575, _576, _577), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3754 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_575, _576, _577), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3787 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_575, _576, _577), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3820 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1137 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1141 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1164 = _750 + _575;
        float _1165 = _754 + _576;
        float _1166 = _758 + _577;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_575, _576, _577), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3883 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_575, _576, _577), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3916 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_575, _576, _577), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3949 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1090;
        _1403 = _1090;
        _1404 = _1090;
        _1405 = _1090;
        _1406 = _1090;
        _1407 = _1090;
        _1408 = _1090;
        _1409 = _1090;
        _1410 = _1090;
        _1411 = _1090;
        _1412 = _1090;
        _1413 = _1090;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _690 * 0.5;
    float _1471 = _691 * 0.5;
    float _1472 = _692 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1600 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1603 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1631 = frontier_phi_17_15_ladder;
        }
        float _1854;
        if (_1600 > 0.0)
        {
            _1854 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1854 = frontier_phi_26_22_ladder;
        }
        float _2089;
        if (_1603 > 0.0)
        {
            _2089 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2089 = frontier_phi_37_33_ladder;
        }
        float _2091 = isnan(_1854) ? _1631 : (isnan(_1631) ? _1854 : min(_1631, _1854));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1597) + _1586;
        float _2097 = (_2092 * _1600) + _1590;
        float _2098 = (_2092 * _1603) + _1594;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_16_37_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_16_37_ladder_2;
        _1621 = frontier_phi_16_37_ladder_1;
        _1623 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1539);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1697 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1700 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1859;
        if (_1694 > 0.0)
        {
            _1859 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1859 = frontier_phi_28_24_ladder;
        }
        float _2116;
        if (_1697 > 0.0)
        {
            _2116 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2116 = frontier_phi_39_35_ladder;
        }
        float _2581;
        if (_1700 > 0.0)
        {
            _2581 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2581 = frontier_phi_50_45_ladder;
        }
        float _2583 = isnan(_2116) ? _1859 : (isnan(_1859) ? _2116 : min(_1859, _2116));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _1694) + _1683;
        float _2589 = (_2584 * _1697) + _1687;
        float _2590 = (_2584 * _1700) + _1691;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2591;
        float _2594 = _2591 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2590 > _2594) || ((_2590 < _2592) || ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 < _2592) || (_2588 > _2594))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2590, cbModelParam._m0[17u].z, fma(_2589, cbModelParam._m0[17u].y, _2588 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2590, cbModelParam._m0[18u].z, fma(_2589, cbModelParam._m0[18u].y, _2588 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2590, cbModelParam._m0[19u].z, fma(_2589, cbModelParam._m0[19u].y, _2588 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_25_50_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2727.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2727.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_25_50_ladder_2;
        _1721 = frontier_phi_25_50_ladder_1;
        _1723 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1628);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1735 = ((((1.0 - _718) * ((_706 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_718 * _706)) * _682;
    float _1736 = _1735 * ((cbModelParam._m0[1u].w * (_1719 - _1619)) + _1619);
    float _1737 = _1735 * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1738 = _1735 * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    float _1758 = _618 / cbSceneParam._m0[86u].x;
    float _1766 = (cbSceneParam._m0[88u].y * (1.0 - _579)) + cbSceneParam._m0[88u].z;
    float _4075 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1768 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 5.0;
    float _1773 = (_705 * cbMtdParam._m0[13u].z) * dot(vec3(_575, _576, _577), vec3(1.0, 0.0, 0.0));
    vec4 _1783 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1773 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1773 + _1758) * cbSceneParam._m0[86u].x, _619), _1768).w) + _1758) * cbSceneParam._m0[86u].x, _619), _1768);
    float _1799 = 1.0 - _1783.w;
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_657 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1817 = _682 + (-1.0);
    float _1820 = (cbLight._m0[_1812].x * _1817) + 1.0;
    float _1821 = (cbLight._m0[_1812].y * _1817) + 1.0;
    uint _1823 = _1811 + 4u;
    float _1834 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_575, _576, _577));
    float _1837 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1838 = _1811 + 5u;
    uint _1844 = _1811 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_575, _576, _577));
    float _1853 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    float _1918;
    float _1919;
    float _1920;
    if (_580 == 0.0)
    {
        float _4096 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _4107 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1872 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
        float _1874 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
        _1918 = ((cbLight._m0[_1838].x * _1853) * _1874) + ((cbLight._m0[_1823].x * _1837) * _1872);
        _1919 = ((_1853 * cbLight._m0[_1838].y) * _1874) + ((_1837 * cbLight._m0[_1823].y) * _1872);
        _1920 = ((_1853 * cbLight._m0[_1838].z) * _1874) + ((_1837 * cbLight._m0[_1823].z) * _1872);
    }
    else
    {
        float _1884 = _1834 + _580;
        float _1887 = (_580 * 2.0) + 1.0;
        float _1888 = (isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) / _1887;
        float _1895 = _1850 + _580;
        float _1897 = (isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) / _1887;
        _1918 = (((_1897 * cbLight._m0[_1838].x) * _1853) + ((_1888 * cbLight._m0[_1823].x) * _1837)) * 0.3183098733425140380859375;
        _1919 = (((_1897 * cbLight._m0[_1838].y) * _1853) + ((_1888 * cbLight._m0[_1823].y) * _1837)) * 0.3183098733425140380859375;
        _1920 = (((_1897 * cbLight._m0[_1838].z) * _1853) + ((_1888 * cbLight._m0[_1823].z) * _1837)) * 0.3183098733425140380859375;
    }
    uint _1924 = _1811 + 8u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _579) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1811].x + _290;
    float _1943 = cbLight._m0[_1811].y + _291;
    float _1944 = cbLight._m0[_1811].z + _292;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1811].xyz));
    float _4128 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _1956 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _1957 = dot(vec3(_575, _576, _577), vec3(_1949, _1950, _1951));
    float _4150 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_1949, _1950, _1951));
    float _4161 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1941 * _1941;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1981 = 1.0 - _1941;
    float _1992 = (0.5 / (((_1956 * ((_1955 * _1981) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _1981) + _1941) * _1955))) * _1955;
    float _4172 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    uint _2007 = _1811 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _579) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1844].x + _290;
    float _2024 = cbLight._m0[_1844].y + _291;
    float _2025 = cbLight._m0[_1844].z + _292;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1844].xyz));
    float _4183 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2037 = dot(vec3(_575, _576, _577), vec3(_2030, _2031, _2032));
    float _4194 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2030, _2031, _2032));
    float _4205 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2022;
    float _2069 = (0.5 / (((_1956 * ((_2036 * _2059) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2059) + _2022) * _2036))) * _2036;
    float _4216 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2081 = (((_2058 * cbLight._m0[_2007].x) * _2071) * _1853) + (((_1980 * cbLight._m0[_1924].x) * _1994) * _1837);
    float _2082 = (((_2058 * cbLight._m0[_2007].y) * _2071) * _1853) + (((_1980 * cbLight._m0[_1924].y) * _1994) * _1837);
    float _2083 = (((_2058 * cbLight._m0[_2007].z) * _2071) * _1853) + (((_1980 * cbLight._m0[_1924].z) * _1994) * _1837);
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_1809.y == 0u)
    {
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2160;
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2160;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2160;
        uvec4 _2175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2176 = _2175.x;
        uint _2187 = uint((float(_2175.y) * floor(float(uint(cbSceneParam._m0[85u].y * _619) / _2176))) + floor(float(uint(cbSceneParam._m0[85u].x * _618) / _2176)));
        float _2197 = (log2(_2163 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2198 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        uint _2201 = uint(isnan(14.0) ? _2198 : (isnan(_2198) ? 14.0 : min(_2198, 14.0)));
        uvec4 _2206 = texelFetch(g_lightClusterGridBuffer, int(((_2201 << 2u) + (_2187 << 6u)) >> 2u));
        uint _2207 = _2206.x;
        uint _2208 = _2175.z;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((((1u << ((_2208 >> 4u) & 15u)) + 4294967295u) & _2207) == 0u) || ((_2208 & 240u) == 0u))
        {
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
        }
        else
        {
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            uint _2645 = 0u;
            uint _2654;
            bool _2655;
            for (;;)
            {
                _2654 = texelFetch(g_lightClassification, int((((_2201 << 5u) + (_2187 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                _2655 = _2654 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2655)
                {
                    frontier_phi_61_pred = _2640;
                    frontier_phi_61_pred_1 = _2644;
                    frontier_phi_61_pred_2 = _2643;
                    frontier_phi_61_pred_3 = _2642;
                    frontier_phi_61_pred_4 = _2641;
                    frontier_phi_61_pred_5 = _2639;
                }
                else
                {
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    uint _2811;
                    _2805 = _2639;
                    _2806 = _2640;
                    _2807 = _2641;
                    _2808 = _2642;
                    _2809 = _2643;
                    _2810 = _2644;
                    _2811 = _2654;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2815 = uint(findLSB(_2811)) + (_2645 << 5u);
                        uint _2812 = (_2811 + 4294967295u) & _2811;
                        uint _2817 = _2815 * 48u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2837 = (_2815 * 48u) + 4u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        float _2851 = _2850.x;
                        float _2852 = _2850.y;
                        float _2853 = _2850.z;
                        uint _2856 = (_2815 * 48u) + 8u;
                        vec3 _2867 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x));
                        uint _2872 = (_2815 * 48u) + 12u;
                        vec2 _2880 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x));
                        float _2886 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
                        float _2887 = _2886 * _2161;
                        float _2888 = _2886 * _2162;
                        float _2889 = _2886 * _2163;
                        float _2890 = _2831.x - _2161;
                        float _2891 = _2831.y - _2162;
                        float _2892 = _2831.z - _2163;
                        float _2893 = dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892));
                        float _2896 = inversesqrt(_2893);
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2900 = dot(vec3(_638, _641, _644), vec3(_2897, _2898, _2899));
                        float _2905 = 1.0 - (_2893 * _2831.w);
                        float _4237 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2906 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2907 = sqrt(_2893) * _2850.w;
                        float _2910 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                        float _2911 = _2910 * _2910;
                        float _2912 = 1.0 - _2911;
                        float _2914 = (_2912 * _2912) * _580;
                        float _2917 = ((_2912 * _2900) + _2911) + _2914;
                        float _2922 = _2907 * _2907;
                        float _2926 = ((isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))) * _2906) / (((_2914 * 2.0) + 1.0) * ((_2922 * 0.699999988079071044921875) + 1.0));
                        float _2930 = dot(vec3(_2897, _2898, _2899), vec3(_2887, _2888, _2889));
                        float _4253 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2937 = dot(vec3((-0.0) - _2887, (-0.0) - _2888, (-0.0) - _2889), vec3(_638, _641, _644)) + 1.0;
                        float _2939 = (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * 0.5;
                        float _2947 = ((_2939 * _2939) * _2880.x) * exp2((_2880.y * 32.0) * log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))));
                        float _2949 = _580 / (_580 + 1.0);
                        float _2965 = (-0.0) - _2161;
                        float _2966 = (-0.0) - _2162;
                        float _2967 = (-0.0) - _2163;
                        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2982 = exp2(log2(1.0 / ((_2922 * 3.5) + 5.0)) * 0.25);
                        float _2983 = 1.0 - _706;
                        float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                        float _2991 = _2990 * _2990;
                        float _2992 = _2991 * _2991;
                        float _2993 = _2972 + _2897;
                        float _2994 = _2973 + _2898;
                        float _2995 = _2974 + _2899;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3003 = dot(vec3(_638, _641, _644), vec3(_2972, _2973, _2974));
                        float _4269 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _3007 = dot(vec3(_638, _641, _644), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                        float _4280 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                        float _3015 = _2910 * _2991;
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _2900) + _3016;
                        float _4291 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3021 = 1.0 - _2991;
                        float _3031 = (0.5 / (((_3020 * ((_3006 * _3021) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2991) * _3006))) * _3020;
                        float _4302 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3042 = (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3014 * _3014) * ((_2922 * 2.1991131305694580078125) + 3.141590118408203125))) * _2906;
                        _2735 = (((((_2851 * 0.3183098733425140380859375) * _2949) * _2947) + _2851) * _2926) + _2808;
                        _2736 = (((((_2852 * 0.3183098733425140380859375) * _2949) * _2947) + _2852) * _2926) + _2809;
                        _2737 = (((((_2853 * 0.3183098733425140380859375) * _2949) * _2947) + _2853) * _2926) + _2810;
                        _2732 = (_3042 * _2867.x) + _2805;
                        _2733 = (_3042 * _2867.y) + _2806;
                        _2734 = (_3042 * _2867.z) + _2807;
                        if (_2812 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2812;
                        }
                    }
                    frontier_phi_61_pred = _2733;
                    frontier_phi_61_pred_1 = _2737;
                    frontier_phi_61_pred_2 = _2736;
                    frontier_phi_61_pred_3 = _2735;
                    frontier_phi_61_pred_4 = _2734;
                    frontier_phi_61_pred_5 = _2732;
                }
                _2433 = frontier_phi_61_pred;
                _2441 = frontier_phi_61_pred_1;
                _2439 = frontier_phi_61_pred_2;
                _2437 = frontier_phi_61_pred_3;
                _2435 = frontier_phi_61_pred_4;
                _2431 = frontier_phi_61_pred_5;
                uint _2646 = _2645 + 1u;
                if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2639 = _2431;
                    _2640 = _2433;
                    _2641 = _2435;
                    _2642 = _2437;
                    _2643 = _2439;
                    _2644 = _2441;
                    _2645 = _2646;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
        }
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.z;
        uint _2447 = (_2445 >> 8u) & 15u;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((4294967295u << _2447) & _2207) == 0u)
        {
            _2607 = _2430;
            _2609 = _2432;
            _2611 = _2434;
            _2613 = _2436;
            _2615 = _2438;
            _2617 = _2440;
        }
        else
        {
            float _2632 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
            float _2633 = _2632 * _2161;
            float _2634 = _2632 * _2162;
            float _2635 = _2632 * _2163;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2447 < ((_2445 >> 12u) & 15u))
            {
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2788 = _2430;
                float _2789 = _2432;
                float _2790 = _2434;
                float _2791 = _2436;
                float _2792 = _2438;
                float _2793 = _2440;
                uint _2794 = _2447;
                uint _2803;
                bool _2804;
                for (;;)
                {
                    _2803 = texelFetch(g_lightClassification, int((((_2201 << 5u) + (_2187 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                    _2804 = _2803 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2804)
                    {
                        frontier_phi_72_pred = _2793;
                        frontier_phi_72_pred_1 = _2792;
                        frontier_phi_72_pred_2 = _2791;
                        frontier_phi_72_pred_3 = _2790;
                        frontier_phi_72_pred_4 = _2789;
                        frontier_phi_72_pred_5 = _2788;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3069 = _2788;
                        float _3070 = _2789;
                        float _3071 = _2790;
                        float _3072 = _2791;
                        float _3073 = _2792;
                        float _3074 = _2793;
                        uint _3075 = _2803;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        vec3 _3132;
                        vec2 _3141;
                        vec4 _3156;
                        vec4 _3172;
                        float _3219;
                        bool _3220;
                        for (;;)
                        {
                            uint _3086 = ((_2794 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3118 = _3117.x;
                            _3119 = _3117.y;
                            _3120 = _3117.z;
                            uint _3122 = (_3086 * 40u) + 8u;
                            _3132 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x));
                            uint _3134 = (_3086 * 40u) + 12u;
                            _3141 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x));
                            uint _3143 = (_3086 * 40u) + 16u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3086 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3175 = (_3086 * 40u) + 24u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3194 = (_3086 * 40u) + 28u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3219 = fma(_2163, _3207.z, fma(_2162, _3207.y, _3207.x * _2161)) + _3207.w;
                            _3220 = !((fma(_2163, _3188.z, fma(_2162, _3188.y, _3188.x * _2161)) + _3188.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3220)
                            {
                                float _3246 = _3101.x - _2161;
                                float _3247 = _3101.y - _2162;
                                float _3248 = _3101.z - _2163;
                                float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                                float _3252 = inversesqrt(_3249);
                                float _3253 = _3252 * _3246;
                                float _3254 = _3252 * _3247;
                                float _3255 = _3252 * _3248;
                                float _3259 = 1.0 - (_3249 / (_3102 * _3102));
                                float _4313 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3264 = sqrt(_3249) * _3117.w;
                                float _3266 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                                float _3267 = _3266 * _3266;
                                float _3268 = 1.0 - _3267;
                                float _3270 = (_3268 * _3268) * _580;
                                float _3273 = ((_3268 * dot(vec3(_3253, _3254, _3255), vec3(_638, _641, _644))) + _3267) + _3270;
                                float _3278 = _3264 * _3264;
                                float _3283 = (fma(_2163, _3156.z, fma(_2162, _3156.y, _3156.x * _2161)) + _3156.w) / _3219;
                                float _3284 = (fma(_2163, _3172.z, fma(_2162, _3172.y, _3172.x * _2161)) + _3172.w) / _3219;
                                float _3288 = 1.0 - dot(vec2(_3283, _3284), vec2(_3283, _3284));
                                float _4329 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3290 = _3289 * (((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3260) / (((_3270 * 2.0) + 1.0) * ((_3278 * 0.699999988079071044921875) + 1.0)));
                                float _3291 = (-0.0) - _2633;
                                float _3292 = (-0.0) - _2634;
                                float _3293 = (-0.0) - _2635;
                                float _3294 = dot(vec3(_3253, _3254, _3255), vec3(_2633, _2634, _2635));
                                float _4340 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3301 = dot(vec3(_3291, _3292, _3293), vec3(_638, _641, _644)) + 1.0;
                                float _3303 = (isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * 0.5;
                                float _3310 = ((_3303 * _3303) * _3141.x) * exp2((_3141.y * 32.0) * log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))));
                                float _3312 = _580 / (_580 + 1.0);
                                float _3333 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3334 = 1.0 - _706;
                                float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                                float _3342 = _3341 * _3341;
                                float _3343 = _3342 * _3342;
                                float _3344 = _3253 - _2633;
                                float _3345 = _3254 - _2634;
                                float _3346 = _3255 - _2635;
                                float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                                float _3354 = dot(vec3(_638, _641, _644), vec3(_3291, _3292, _3293));
                                float _4356 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3358 = dot(vec3(_638, _641, _644), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                                float _4367 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                                float _3366 = _3266 * _3342;
                                float _3367 = _3366 * _3366;
                                float _3373 = ((1.0 - _3367) * dot(vec3(_638, _641, _644), vec3(_3253, _3254, _3255))) + _3367;
                                float _4378 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3375 = 1.0 - _3342;
                                float _3385 = (0.5 / (((_3374 * ((_3357 * _3375) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3342) * _3357))) * _3374;
                                float _4389 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3395 = (_3289 * _3260) * (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3365 * _3365) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3118 * 0.3183098733425140380859375) * _3312) * _3310) + _3118) * _3290;
                                frontier_phi_78_pred_1 = ((((_3120 * 0.3183098733425140380859375) * _3312) * _3310) + _3120) * _3290;
                                frontier_phi_78_pred_2 = ((((_3119 * 0.3183098733425140380859375) * _3312) * _3310) + _3119) * _3290;
                                frontier_phi_78_pred_3 = _3395 * _3132.z;
                                frontier_phi_78_pred_4 = _3395 * _3132.y;
                                frontier_phi_78_pred_5 = _3395 * _3132.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_78_pred;
                            _3404 = frontier_phi_78_pred_1;
                            _3403 = frontier_phi_78_pred_2;
                            _3401 = frontier_phi_78_pred_3;
                            _3400 = frontier_phi_78_pred_4;
                            _3399 = frontier_phi_78_pred_5;
                            _3059 = _3402 + _3072;
                            _3060 = _3403 + _3073;
                            _3061 = _3404 + _3074;
                            _3056 = _3399 + _3069;
                            _3057 = _3400 + _3070;
                            _3058 = _3401 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3061;
                        frontier_phi_72_pred_1 = _3060;
                        frontier_phi_72_pred_2 = _3059;
                        frontier_phi_72_pred_3 = _3058;
                        frontier_phi_72_pred_4 = _3057;
                        frontier_phi_72_pred_5 = _3056;
                    }
                    _2618 = frontier_phi_72_pred;
                    _2616 = frontier_phi_72_pred_1;
                    _2614 = frontier_phi_72_pred_2;
                    _2612 = frontier_phi_72_pred_3;
                    _2610 = frontier_phi_72_pred_4;
                    _2608 = frontier_phi_72_pred_5;
                    uint _2795 = _2794 + 1u;
                    if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2788 = _2608;
                        _2789 = _2610;
                        _2790 = _2612;
                        _2791 = _2614;
                        _2792 = _2616;
                        _2793 = _2618;
                        _2794 = _2795;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2618;
                frontier_phi_52_53_ladder_1 = _2610;
                frontier_phi_52_53_ladder_2 = _2616;
                frontier_phi_52_53_ladder_3 = _2614;
                frontier_phi_52_53_ladder_4 = _2612;
                frontier_phi_52_53_ladder_5 = _2608;
            }
            else
            {
                frontier_phi_52_53_ladder = _2440;
                frontier_phi_52_53_ladder_1 = _2432;
                frontier_phi_52_53_ladder_2 = _2438;
                frontier_phi_52_53_ladder_3 = _2436;
                frontier_phi_52_53_ladder_4 = _2434;
                frontier_phi_52_53_ladder_5 = _2430;
            }
            _2607 = frontier_phi_52_53_ladder_5;
            _2609 = frontier_phi_52_53_ladder_1;
            _2611 = frontier_phi_52_53_ladder_4;
            _2613 = frontier_phi_52_53_ladder_3;
            _2615 = frontier_phi_52_53_ladder_2;
            _2617 = frontier_phi_52_53_ladder;
        }
        float _2622 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2220 = (_2622 * _2613) + _1918;
        _2222 = (_2622 * _2615) + _1919;
        _2224 = (_2622 * _2617) + _1920;
        _2226 = ((_2607 * 0.039999999105930328369140625) * _2622) + _2081;
        _2228 = ((_2609 * 0.039999999105930328369140625) * _2622) + _2082;
        _2230 = ((_2611 * 0.039999999105930328369140625) * _2622) + _2083;
    }
    else
    {
        _2220 = _1918;
        _2222 = _1919;
        _2224 = _1920;
        _2226 = _2081;
        _2228 = _2082;
        _2230 = _2083;
    }
    float _2244 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2245 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2246 = cbSceneParam._m0[86u].x * (_1758 + ((_705 * cbMtdParam._m0[13u].y) * dot(vec3(_575, _576, _577), vec3(_208, _209, _210))));
    float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
    float _2248 = isnan(_2245) ? _619 : (isnan(_619) ? _2245 : min(_619, _2245));
    vec4 _2250 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2247, _2248), 0.0);
    float _2252 = _2250.x;
    bool _2273 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2252)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2252))) > _599;
    float _2274 = _2273 ? _2247 : _618;
    float _2275 = _2273 ? _2248 : _619;
    vec4 _2277 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2274, _2275));
    vec4 _2282 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2274, _2275));
    float _2284 = _2282.x;
    float _2304 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2284)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2284))) - _599;
    bool _2314 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2318 = (isnan(_2304) ? 0.0 : (isnan(0.0) ? _2304 : max(0.0, _2304))) * (-1.44269502162933349609375);
    float _4420 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4431 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4442 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2345 = 0.959999978542327880859375 - (exp2(log2(1.0 - _697) * 5.0) * 0.959999978542327880859375);
    float _2348 = ((_2277.x * _2345) * exp2(_2318 * (_2314 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2351 = ((_2277.y * _2345) * exp2(_2318 * (_2314 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2354 = ((_2277.z * _2345) * exp2(_2318 * (_2314 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2362 = (_2348 + (((((_1735 * _1783.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1528) * _1799)) + _2226) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2220 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _682))) - _2348) * cbMtdParam._m0[15u].x);
    float _2364 = (_2351 + (((((_1735 * _1783.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1528) * _1799)) + _2228) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2222 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _682))) - _2351) * cbMtdParam._m0[15u].x);
    float _2366 = (_2354 + (((((_1735 * _1783.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1528) * _1799)) + _2230) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2224 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _682))) - _2354) * cbMtdParam._m0[15u].x);
    float _2371 = cbInstanceData._m0[_657 + 6u].w * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)));
    float _2376 = _618 / cbSceneParam._m0[86u].x;
    float _2377 = _619 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2455 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2456 = _2455 / _599;
        float _2467 = _2456 * _278;
        float _2468 = _279 * _2456;
        float _2469 = (-0.0) - _2468;
        float _2470 = _2456 * _280;
        float _2472 = (cbSceneParam._m0[77u].w * _2469) / _2455;
        float _2473 = _2472 + cbSceneParam._m0[79u].w;
        float _2474 = cbSceneParam._m0[79u].w - _2468;
        float _2480 = sqrt(((_2467 * _2467) + (_2468 * _2468)) + (_2470 * _2470));
        float _2483 = (1.0 - (cbSceneParam._m0[77u].w / _2455)) * _2480;
        float _2488 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2745;
        if (abs((_2469 - _2472) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2745 = ((((_2473 > 0.0) ? exp2(_2488 * _2473) : (2.0 - exp2(_2489 * _2473))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2483;
        }
        else
        {
            float _2668 = 1.0 / cbSceneParam._m0[80u].x;
            float _2669 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : max(_2473, _2474));
            float _2670 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : min(_2473, _2474));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            _2745 = ((abs(_2480 / _2469) * cbSceneParam._m0[80u].y) * ((((_2679 - _2680) * 2.0) - ((exp2(_2488 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)))) - exp2(_2488 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0))))) * _2668)) - ((exp2(_2489 * _2679) - exp2(_2489 * _2680)) * _2668))) + (_2483 * cbSceneParam._m0[80u].z);
        }
        vec4 _2747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2756 = exp2((_2745 * (-1.44269502162933349609375)) * (1.0 - _2747.w));
        float _2757 = log2(_2756);
        float _2773 = log2(_2396);
        _2491 = (exp2(_2773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].x)) * _2747.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2493 = (exp2(_2773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].y)) * _2747.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2495 = (exp2(_2773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].z)) * _2747.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2497 = _2756 * _2396;
    }
    else
    {
        _2491 = _2393;
        _2493 = _2394;
        _2495 = _2395;
        _2497 = _2396;
    }
    bool _2783;
    float _2552;
    vec4 _2555;
    float _2557;
    vec4 _2559;
    float _2567;
    float _2568;
    float _2569;
    float _2570;
    bool _2580;
    for (;;)
    {
        bool _2509 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2510 = log2(_2497);
        float _2517 = exp2(_2510 * cbSceneParam._m0[78u].x) * _2362;
        float _2518 = exp2(_2510 * cbSceneParam._m0[78u].y) * _2364;
        float _2519 = exp2(_2510 * cbSceneParam._m0[78u].z) * _2366;
        vec4 _2527 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_618, _619));
        float _2529 = _2527.x;
        float _2550 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2529)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2529))) - _599) * cbMtdParam._m0[14u].z;
        float _4493 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        _2552 = _2371 * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)));
        float _2553 = _606 + (-0.5);
        _2555 = cbMtdParam._m0[1u];
        _2557 = _2555.y * _2553;
        _2559 = cbMatDynParam._m0[0u];
        float _2566 = (roundEven(_2559.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2567 = _2566 * (_2509 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2491)));
        _2568 = _2566 * (_2509 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2493)));
        _2569 = _2566 * (_2509 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2495)));
        _2570 = _2553 * 0.999000012874603271484375;
        _2580 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2580)
        {
            if ((cbInstanceData._m0[_657 + 7u].x + _2570) < 0.5)
            {
                _2783 = true;
                break;
            }
        }
        uint _2703 = _658 + uint(_2559.w);
        if ((cbInstanceData._m0[_2703].w < 1.0) && ((cbInstanceData._m0[_2703].w + _2570) < 0.5))
        {
            _2783 = true;
            break;
        }
        if ((_2557 + 1.0) < _2555.x)
        {
            _2783 = true;
            break;
        }
        _2783 = false;
        break;
    }
    float _3047;
    if (_2783)
    {
        discard_state = true;
        _3047 = 0.0;
    }
    else
    {
        _3047 = _2552;
    }
    SV_Target.x = _2567;
    SV_Target.y = _2568;
    SV_Target.z = _2569;
    SV_Target.w = _3047;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2552;
    discard_exit();
}


