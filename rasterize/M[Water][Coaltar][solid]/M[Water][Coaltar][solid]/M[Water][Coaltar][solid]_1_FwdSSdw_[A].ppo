#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1069;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _287 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _288 = _287 * _276;
    float _289 = _287 * _277;
    float _290 = _287 * _278;
    float _298 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _299 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _313 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_298 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_299 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3561 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))));
    float _333 = fma(_330, _213, fma(_323, _220, _321 * _206));
    float _336 = fma(_330, _214, fma(_323, _221, _321 * _207));
    float _339 = fma(_330, _215, fma(_323, _222, _321 * _208));
    float _343 = inversesqrt(dot(vec3(_333, _336, _339), vec3(_333, _336, _339)));
    float _352 = (dot(vec4(_288, _289, _290, 0.0), vec4(_343 * _333, _343 * _336, _343 * _339, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _365 = dot(vec3(_276, _277, _278), vec3(_206, _207, _208));
    float _368 = dot(vec3(_276, _277, _278), vec3(_220, _221, _222));
    float _371 = dot(vec3(_276, _277, _278), vec3(_213, _214, _215));
    float _377 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    float _398 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _418 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_365 * cbMtdParam._m0[12u].x) * _377) * _398) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_368 * cbMtdParam._m0[12u].x) * _377) * _398) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _441 = dot(vec4(_288, _289, _290, 0.0), vec4(_213, _214, _215, 0.0)) - cbMtdParam._m0[12u].w;
    float _3572 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _448 = exp2(log2(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _463 = (((((sin(_352) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _418.x) * cbMtdParam._m0[9u].x) * ((_448 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _472 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _418.y) * cbMtdParam._m0[9u].y) * ((_448 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_352 * 0.85000002384185791015625) + 1.0);
    float _481 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _418.z) * cbMtdParam._m0[9u].z) * ((_448 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_352 * 0.699999988079071044921875) + 1.0);
    vec4 _494 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    float _501 = (_494.x * 2.0) + (-1.0);
    float _502 = (_494.y * 2.0) + (-1.0);
    float _503 = dot(vec2(_501, _502), vec2(_501, _502));
    float _3588 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _508 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _510 = cbMtdParam._m0[14u].w + _494.z;
    vec4 _522 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _298) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _299) + cbTextureTilingScale._m0[0u].w));
    float _526 = cbMtdParam._m0[13u].w * _522.x;
    float _544 = fma(_508, _213, fma(_502, _220, _501 * _206));
    float _547 = fma(_508, _214, fma(_502, _221, _501 * _207));
    float _550 = fma(_508, _215, fma(_502, _222, _501 * _208));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _3599 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _558 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _559 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3615 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3626 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3637 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _578 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _583 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _585 = _583.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _748 = sqrt(((_276 * _276) + (_277 * _277)) + (_278 * _278));
        float _754 = (cbMatDynParam._m0[5u].x * _748) + cbMatDynParam._m0[5u].y;
        float _3648 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _759 = (cbMatDynParam._m0[5u].z * _748) + cbMatDynParam._m0[5u].w;
        float _3659 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) - _755)) + _755) < ((_585 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _617 = fma(_557, cbSceneParam._m0[5u].z, fma(_556, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _555));
    float _620 = fma(_557, cbSceneParam._m0[6u].z, fma(_556, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _555));
    float _623 = fma(_557, cbSceneParam._m0[7u].z, fma(_556, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _555));
    uint _636 = uint(roundEven(NORMAL.w)) * 13u;
    uint _637 = _636 + 9u;
    uint _638 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_638].z;
    float _3670 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _661 = _658.x * TEXCOORD_1.w;
    float _662 = dot(vec3(_555, _556, _557), vec3(_288, _289, _290));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _555) - _288;
    float _670 = (_665 * _556) - _289;
    float _671 = (_665 * _557) - _290;
    float _675 = abs(dot(vec3(_288, _289, _290), vec3(_555, _556, _557)));
    float _3703 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _684 = 10.0 / (_578 + 10.0);
    float _685 = sqrt(_558);
    float _697 = exp2((_685 * 5.0) * log2(1.0 - (_676 * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _797 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _801 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _826 = _729 + _555;
        float _827 = _733 + _556;
        float _828 = _737 + _557;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _793;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _797;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _801;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_555, _556, _557), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3751 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_555, _556, _557), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3784 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_555, _556, _557), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3817 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1070 = _898;
        _1071 = _897;
        _1072 = _909;
        _1073 = _908;
        _1074 = _907;
        _1075 = _919;
        _1076 = _918;
        _1077 = _917;
        _1078 = _932;
        _1079 = _931;
        _1080 = _930;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _1069;
        _1070 = _1069;
        _1071 = _1069;
        _1072 = _1069;
        _1073 = _1069;
        _1074 = _1069;
        _1075 = _1069;
        _1076 = _1069;
        _1077 = _1069;
        _1078 = _1069;
        _1079 = _1069;
        _1080 = _1069;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1116 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1120 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1143 = _729 + _555;
        float _1144 = _733 + _556;
        float _1145 = _737 + _557;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_555, _556, _557), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3880 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_555, _556, _557), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3913 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_555, _556, _557), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3946 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1069;
        _1382 = _1069;
        _1383 = _1069;
        _1384 = _1069;
        _1385 = _1069;
        _1386 = _1069;
        _1387 = _1069;
        _1388 = _1069;
        _1389 = _1069;
        _1390 = _1069;
        _1391 = _1069;
        _1392 = _1069;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _669 * 0.5;
    float _1450 = _670 * 0.5;
    float _1451 = _671 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1068, _1072, _1075, _1078));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1565 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1569 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1573 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1576 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1579 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1582 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1610;
        if (_1576 > 0.0)
        {
            _1610 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1610 = frontier_phi_17_15_ladder;
        }
        float _1854;
        if (_1579 > 0.0)
        {
            _1854 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1854 = frontier_phi_26_22_ladder;
        }
        float _2092;
        if (_1582 > 0.0)
        {
            _2092 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2092 = frontier_phi_37_33_ladder;
        }
        float _2094 = isnan(_1854) ? _1610 : (isnan(_1610) ? _1854 : min(_1610, _1854));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1576) + _1565;
        float _2100 = (_2095 * _1579) + _1569;
        float _2101 = (_2095 * _1582) + _1573;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2102;
        float _2106 = _2102 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 > _2106) || ((_2100 < _2104) || ((_2099 < _2104) || (_2099 > _2106))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2101, cbModelParam._m0[9u].z, fma(_2100, cbModelParam._m0[9u].y, _2099 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2101, cbModelParam._m0[10u].z, fma(_2100, cbModelParam._m0[10u].y, _2099 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2101, cbModelParam._m0[11u].z, fma(_2100, cbModelParam._m0[11u].y, _2099 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_16_37_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1598 = frontier_phi_16_37_ladder_2;
        _1600 = frontier_phi_16_37_ladder_1;
        _1602 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1518);
        _1598 = _1586.x * cbModelParam._m0[1u].y;
        _1600 = _1586.y * cbModelParam._m0[1u].y;
        _1602 = _1586.z * cbModelParam._m0[1u].y;
    }
    float _1606 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1606 : min(cbModelParam._m0[25u].w, _1606));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1662 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1666 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1670 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1673 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1676 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1679 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1859;
        if (_1673 > 0.0)
        {
            _1859 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1859 = frontier_phi_28_24_ladder;
        }
        float _2119;
        if (_1676 > 0.0)
        {
            _2119 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2119 = frontier_phi_39_35_ladder;
        }
        float _2589;
        if (_1679 > 0.0)
        {
            _2589 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2589 = frontier_phi_50_45_ladder;
        }
        float _2591 = isnan(_2119) ? _1859 : (isnan(_1859) ? _2119 : min(_1859, _2119));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1673) + _1662;
        float _2597 = (_2592 * _1676) + _1666;
        float _2598 = (_2592 * _1679) + _1670;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1607);
            frontier_phi_25_50_ladder = _2735.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2735.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2735.x * cbModelParam._m0[1u].z;
        }
        _1698 = frontier_phi_25_50_ladder_2;
        _1700 = frontier_phi_25_50_ladder_1;
        _1702 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1607);
        _1698 = _1682.x * cbModelParam._m0[1u].z;
        _1700 = _1682.y * cbModelParam._m0[1u].z;
        _1702 = _1682.z * cbModelParam._m0[1u].z;
    }
    float _1714 = ((((1.0 - _697) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_697 * _685)) * _661;
    float _1715 = _1714 * ((cbModelParam._m0[1u].w * (_1698 - _1598)) + _1598);
    float _1716 = _1714 * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1717 = _1714 * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1720 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1715 * cbSceneParam._m0[91u].x));
    float _1737 = _597 / cbSceneParam._m0[86u].x;
    float _1745 = (cbSceneParam._m0[88u].y * (1.0 - _558)) + cbSceneParam._m0[88u].z;
    float _4072 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1747 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 5.0;
    float _1752 = (_684 * cbMtdParam._m0[13u].z) * dot(vec3(_555, _556, _557), vec3(1.0, 0.0, 0.0));
    vec4 _1762 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1752 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1752 + _1737) * cbSceneParam._m0[86u].x, _598), _1747).w) + _1737) * cbSceneParam._m0[86u].x, _598), _1747);
    float _1778 = 1.0 - _1762.w;
    vec4 _1786 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_597, _598));
    float _1788 = _1786.w;
    float _1800 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1788);
    float _1801 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1788);
    float _1802 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1788);
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_636 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1814 = _661 + (-1.0);
    float _1817 = (cbLight._m0[_1809].x * _1814) + 1.0;
    float _1818 = (cbLight._m0[_1809].y * _1814) + 1.0;
    uint _1820 = _1808 + 4u;
    float _1831 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_555, _556, _557));
    float _1834 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    float _1835 = cbLight._m0[_1820].x * _1800;
    float _1836 = cbLight._m0[_1820].y * _1801;
    float _1837 = cbLight._m0[_1820].z * _1802;
    uint _1838 = _1808 + 5u;
    uint _1844 = _1808 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_555, _556, _557));
    float _1853 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    float _1918;
    float _1919;
    float _1920;
    if (_559 == 0.0)
    {
        float _4093 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _4104 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1872 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
        float _1874 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
        _1918 = ((cbLight._m0[_1838].x * _1853) * _1874) + ((_1835 * _1834) * _1872);
        _1919 = ((_1853 * cbLight._m0[_1838].y) * _1874) + ((_1836 * _1834) * _1872);
        _1920 = ((_1853 * cbLight._m0[_1838].z) * _1874) + ((_1837 * _1834) * _1872);
    }
    else
    {
        float _1884 = _1831 + _559;
        float _1887 = (_559 * 2.0) + 1.0;
        float _1888 = (isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) / _1887;
        float _1895 = _1850 + _559;
        float _1897 = (isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) / _1887;
        _1918 = (((_1897 * cbLight._m0[_1838].x) * _1853) + ((_1835 * _1888) * _1834)) * 0.3183098733425140380859375;
        _1919 = (((_1897 * cbLight._m0[_1838].y) * _1853) + ((_1836 * _1888) * _1834)) * 0.3183098733425140380859375;
        _1920 = (((_1897 * cbLight._m0[_1838].z) * _1853) + ((_1837 * _1888) * _1834)) * 0.3183098733425140380859375;
    }
    uint _1924 = _1808 + 8u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _558) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1808].x + _288;
    float _1943 = cbLight._m0[_1808].y + _289;
    float _1944 = cbLight._m0[_1808].z + _290;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1808].xyz));
    float _4125 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1956 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1957 = dot(vec3(_555, _556, _557), vec3(_1949, _1950, _1951));
    float _4147 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1949, _1950, _1951));
    float _4158 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1941 * _1941;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1981 = 1.0 - _1941;
    float _1992 = (0.5 / (((_1956 * ((_1955 * _1981) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _1981) + _1941) * _1955))) * _1955;
    float _4169 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    uint _2010 = _1808 + 9u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _558) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1844].x + _288;
    float _2027 = cbLight._m0[_1844].y + _289;
    float _2028 = cbLight._m0[_1844].z + _290;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1844].xyz));
    float _4180 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2040 = dot(vec3(_555, _556, _557), vec3(_2033, _2034, _2035));
    float _4191 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2033, _2034, _2035));
    float _4202 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2025 * _2025;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = 1.0 - _2025;
    float _2072 = (0.5 / (((_1956 * ((_2039 * _2062) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2062) + _2025) * _2039))) * _2039;
    float _4213 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    float _2084 = (((_2061 * cbLight._m0[_2010].x) * _2074) * _1853) + ((((cbLight._m0[_1924].x * _1800) * _1980) * _1994) * _1834);
    float _2085 = (((_2061 * cbLight._m0[_2010].y) * _2074) * _1853) + ((((cbLight._m0[_1924].y * _1801) * _1980) * _1994) * _1834);
    float _2086 = (((_2061 * cbLight._m0[_2010].z) * _2074) * _1853) + ((((cbLight._m0[_1924].z * _1802) * _1980) * _1994) * _1834);
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    if (_1806.y == 0u)
    {
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2163;
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2163;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2163;
        uvec4 _2178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2179 = _2178.x;
        uint _2190 = uint((float(_2178.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2179))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2179)));
        float _2200 = (log2(_2166 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2201 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        uint _2204 = uint(isnan(14.0) ? _2201 : (isnan(_2201) ? 14.0 : min(_2201, 14.0)));
        uvec4 _2209 = texelFetch(g_lightClusterGridBuffer, int(((_2204 << 2u) + (_2190 << 6u)) >> 2u));
        uint _2210 = _2209.x;
        uint _2211 = _2178.z;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        if (((((1u << ((_2211 >> 4u) & 15u)) + 4294967295u) & _2210) == 0u) || ((_2211 & 240u) == 0u))
        {
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
        }
        else
        {
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            uint _2653 = 0u;
            uint _2662;
            bool _2663;
            for (;;)
            {
                _2662 = texelFetch(g_lightClassification, int((((_2204 << 5u) + (_2190 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                _2663 = _2662 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2663)
                {
                    frontier_phi_61_pred = _2648;
                    frontier_phi_61_pred_1 = _2652;
                    frontier_phi_61_pred_2 = _2651;
                    frontier_phi_61_pred_3 = _2650;
                    frontier_phi_61_pred_4 = _2649;
                    frontier_phi_61_pred_5 = _2647;
                }
                else
                {
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    uint _2819;
                    _2813 = _2647;
                    _2814 = _2648;
                    _2815 = _2649;
                    _2816 = _2650;
                    _2817 = _2651;
                    _2818 = _2652;
                    _2819 = _2662;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    for (;;)
                    {
                        uint _2823 = uint(findLSB(_2819)) + (_2653 << 5u);
                        uint _2820 = (_2819 + 4294967295u) & _2819;
                        uint _2825 = _2823 * 48u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2845 = (_2823 * 48u) + 4u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        float _2859 = _2858.x;
                        float _2860 = _2858.y;
                        float _2861 = _2858.z;
                        uint _2864 = (_2823 * 48u) + 8u;
                        vec3 _2875 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x));
                        uint _2880 = (_2823 * 48u) + 12u;
                        vec2 _2888 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x));
                        float _2894 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
                        float _2895 = _2894 * _2164;
                        float _2896 = _2894 * _2165;
                        float _2897 = _2894 * _2166;
                        float _2898 = _2839.x - _2164;
                        float _2899 = _2839.y - _2165;
                        float _2900 = _2839.z - _2166;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_617, _620, _623), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2839.w);
                        float _4234 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2915 = sqrt(_2901) * _2858.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2920 = 1.0 - _2919;
                        float _2922 = (_2920 * _2920) * _559;
                        float _2925 = ((_2920 * _2908) + _2919) + _2922;
                        float _2930 = _2915 * _2915;
                        float _2934 = ((isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))) * _2914) / (((_2922 * 2.0) + 1.0) * ((_2930 * 0.699999988079071044921875) + 1.0));
                        float _2938 = dot(vec3(_2905, _2906, _2907), vec3(_2895, _2896, _2897));
                        float _4250 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2945 = dot(vec3((-0.0) - _2895, (-0.0) - _2896, (-0.0) - _2897), vec3(_617, _620, _623)) + 1.0;
                        float _2947 = (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * 0.5;
                        float _2955 = ((_2947 * _2947) * _2888.x) * exp2((_2888.y * 32.0) * log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))));
                        float _2957 = _559 / (_559 + 1.0);
                        float _2973 = (-0.0) - _2164;
                        float _2974 = (-0.0) - _2165;
                        float _2975 = (-0.0) - _2166;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2990 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2991 = 1.0 - _685;
                        float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                        float _2999 = _2998 * _2998;
                        float _3000 = _2999 * _2999;
                        float _3001 = _2980 + _2905;
                        float _3002 = _2981 + _2906;
                        float _3003 = _2982 + _2907;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3011 = dot(vec3(_617, _620, _623), vec3(_2980, _2981, _2982));
                        float _4266 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _3015 = dot(vec3(_617, _620, _623), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                        float _4277 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                        float _3023 = _2918 * _2999;
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _2908) + _3024;
                        float _4288 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3029 = 1.0 - _2999;
                        float _3039 = (0.5 / (((_3028 * ((_3014 * _3029) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2999) * _3014))) * _3028;
                        float _4299 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3050 = (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_3022 * _3022) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2743 = (((((_2859 * 0.3183098733425140380859375) * _2957) * _2955) + _2859) * _2934) + _2816;
                        _2744 = (((((_2860 * 0.3183098733425140380859375) * _2957) * _2955) + _2860) * _2934) + _2817;
                        _2745 = (((((_2861 * 0.3183098733425140380859375) * _2957) * _2955) + _2861) * _2934) + _2818;
                        _2740 = (_3050 * _2875.x) + _2813;
                        _2741 = (_3050 * _2875.y) + _2814;
                        _2742 = (_3050 * _2875.z) + _2815;
                        if (_2820 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2820;
                        }
                    }
                    frontier_phi_61_pred = _2741;
                    frontier_phi_61_pred_1 = _2745;
                    frontier_phi_61_pred_2 = _2744;
                    frontier_phi_61_pred_3 = _2743;
                    frontier_phi_61_pred_4 = _2742;
                    frontier_phi_61_pred_5 = _2740;
                }
                _2441 = frontier_phi_61_pred;
                _2449 = frontier_phi_61_pred_1;
                _2447 = frontier_phi_61_pred_2;
                _2445 = frontier_phi_61_pred_3;
                _2443 = frontier_phi_61_pred_4;
                _2439 = frontier_phi_61_pred_5;
                uint _2654 = _2653 + 1u;
                if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2647 = _2439;
                    _2648 = _2441;
                    _2649 = _2443;
                    _2650 = _2445;
                    _2651 = _2447;
                    _2652 = _2449;
                    _2653 = _2654;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
        }
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.z;
        uint _2455 = (_2453 >> 8u) & 15u;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((4294967295u << _2455) & _2210) == 0u)
        {
            _2615 = _2438;
            _2617 = _2440;
            _2619 = _2442;
            _2621 = _2444;
            _2623 = _2446;
            _2625 = _2448;
        }
        else
        {
            float _2640 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
            float _2641 = _2640 * _2164;
            float _2642 = _2640 * _2165;
            float _2643 = _2640 * _2166;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2455 < ((_2453 >> 12u) & 15u))
            {
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2796 = _2438;
                float _2797 = _2440;
                float _2798 = _2442;
                float _2799 = _2444;
                float _2800 = _2446;
                float _2801 = _2448;
                uint _2802 = _2455;
                uint _2811;
                bool _2812;
                for (;;)
                {
                    _2811 = texelFetch(g_lightClassification, int((((_2204 << 5u) + (_2190 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                    _2812 = _2811 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2812)
                    {
                        frontier_phi_72_pred = _2801;
                        frontier_phi_72_pred_1 = _2800;
                        frontier_phi_72_pred_2 = _2799;
                        frontier_phi_72_pred_3 = _2798;
                        frontier_phi_72_pred_4 = _2797;
                        frontier_phi_72_pred_5 = _2796;
                    }
                    else
                    {
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3077 = _2796;
                        float _3078 = _2797;
                        float _3079 = _2798;
                        float _3080 = _2799;
                        float _3081 = _2800;
                        float _3082 = _2801;
                        uint _3083 = _2811;
                        uint _3084;
                        vec4 _3109;
                        float _3110;
                        vec4 _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        vec3 _3140;
                        vec2 _3149;
                        vec4 _3164;
                        vec4 _3180;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            uint _3094 = ((_2802 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3083));
                            _3084 = (_3083 + 4294967295u) & _3083;
                            uint _3096 = _3094 * 40u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3110 = _3109.w;
                            uint _3112 = (_3094 * 40u) + 4u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.x;
                            _3127 = _3125.y;
                            _3128 = _3125.z;
                            uint _3130 = (_3094 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3142 = (_3094 * 40u) + 12u;
                            _3149 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x));
                            uint _3151 = (_3094 * 40u) + 16u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3167 = (_3094 * 40u) + 20u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3183 = (_3094 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3094 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2166, _3215.z, fma(_2165, _3215.y, _3215.x * _2164)) + _3215.w;
                            _3228 = !((fma(_2166, _3196.z, fma(_2165, _3196.y, _3196.x * _2164)) + _3196.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3228)
                            {
                                float _3254 = _3109.x - _2164;
                                float _3255 = _3109.y - _2165;
                                float _3256 = _3109.z - _2166;
                                float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                                float _3260 = inversesqrt(_3257);
                                float _3261 = _3260 * _3254;
                                float _3262 = _3260 * _3255;
                                float _3263 = _3260 * _3256;
                                float _3267 = 1.0 - (_3257 / (_3110 * _3110));
                                float _4310 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3272 = sqrt(_3257) * _3125.w;
                                float _3274 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                                float _3275 = _3274 * _3274;
                                float _3276 = 1.0 - _3275;
                                float _3278 = (_3276 * _3276) * _559;
                                float _3281 = ((_3276 * dot(vec3(_3261, _3262, _3263), vec3(_617, _620, _623))) + _3275) + _3278;
                                float _3286 = _3272 * _3272;
                                float _3291 = (fma(_2166, _3164.z, fma(_2165, _3164.y, _3164.x * _2164)) + _3164.w) / _3227;
                                float _3292 = (fma(_2166, _3180.z, fma(_2165, _3180.y, _3180.x * _2164)) + _3180.w) / _3227;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4326 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3268) / (((_3278 * 2.0) + 1.0) * ((_3286 * 0.699999988079071044921875) + 1.0)));
                                float _3299 = (-0.0) - _2641;
                                float _3300 = (-0.0) - _2642;
                                float _3301 = (-0.0) - _2643;
                                float _3302 = dot(vec3(_3261, _3262, _3263), vec3(_2641, _2642, _2643));
                                float _4337 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3309 = dot(vec3(_3299, _3300, _3301), vec3(_617, _620, _623)) + 1.0;
                                float _3311 = (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * 0.5;
                                float _3318 = ((_3311 * _3311) * _3149.x) * exp2((_3149.y * 32.0) * log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))));
                                float _3320 = _559 / (_559 + 1.0);
                                float _3341 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                                float _3342 = 1.0 - _685;
                                float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                                float _3350 = _3349 * _3349;
                                float _3351 = _3350 * _3350;
                                float _3352 = _3261 - _2641;
                                float _3353 = _3262 - _2642;
                                float _3354 = _3263 - _2643;
                                float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                                float _3362 = dot(vec3(_617, _620, _623), vec3(_3299, _3300, _3301));
                                float _4353 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3366 = dot(vec3(_617, _620, _623), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                                float _4364 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                                float _3374 = _3274 * _3350;
                                float _3375 = _3374 * _3374;
                                float _3381 = ((1.0 - _3375) * dot(vec3(_617, _620, _623), vec3(_3261, _3262, _3263))) + _3375;
                                float _4375 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3383 = 1.0 - _3350;
                                float _3393 = (0.5 / (((_3382 * ((_3365 * _3383) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3350) * _3365))) * _3382;
                                float _4386 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3403 = (_3297 * _3268) * (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3373 * _3373) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3126 * 0.3183098733425140380859375) * _3320) * _3318) + _3126) * _3298;
                                frontier_phi_78_pred_1 = ((((_3128 * 0.3183098733425140380859375) * _3320) * _3318) + _3128) * _3298;
                                frontier_phi_78_pred_2 = ((((_3127 * 0.3183098733425140380859375) * _3320) * _3318) + _3127) * _3298;
                                frontier_phi_78_pred_3 = _3403 * _3140.z;
                                frontier_phi_78_pred_4 = _3403 * _3140.y;
                                frontier_phi_78_pred_5 = _3403 * _3140.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3410 = frontier_phi_78_pred;
                            _3412 = frontier_phi_78_pred_1;
                            _3411 = frontier_phi_78_pred_2;
                            _3409 = frontier_phi_78_pred_3;
                            _3408 = frontier_phi_78_pred_4;
                            _3407 = frontier_phi_78_pred_5;
                            _3067 = _3410 + _3080;
                            _3068 = _3411 + _3081;
                            _3069 = _3412 + _3082;
                            _3064 = _3407 + _3077;
                            _3065 = _3408 + _3078;
                            _3066 = _3409 + _3079;
                            if (_3084 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3084;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3069;
                        frontier_phi_72_pred_1 = _3068;
                        frontier_phi_72_pred_2 = _3067;
                        frontier_phi_72_pred_3 = _3066;
                        frontier_phi_72_pred_4 = _3065;
                        frontier_phi_72_pred_5 = _3064;
                    }
                    _2626 = frontier_phi_72_pred;
                    _2624 = frontier_phi_72_pred_1;
                    _2622 = frontier_phi_72_pred_2;
                    _2620 = frontier_phi_72_pred_3;
                    _2618 = frontier_phi_72_pred_4;
                    _2616 = frontier_phi_72_pred_5;
                    uint _2803 = _2802 + 1u;
                    if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2796 = _2616;
                        _2797 = _2618;
                        _2798 = _2620;
                        _2799 = _2622;
                        _2800 = _2624;
                        _2801 = _2626;
                        _2802 = _2803;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2626;
                frontier_phi_52_53_ladder_1 = _2618;
                frontier_phi_52_53_ladder_2 = _2624;
                frontier_phi_52_53_ladder_3 = _2622;
                frontier_phi_52_53_ladder_4 = _2620;
                frontier_phi_52_53_ladder_5 = _2616;
            }
            else
            {
                frontier_phi_52_53_ladder = _2448;
                frontier_phi_52_53_ladder_1 = _2440;
                frontier_phi_52_53_ladder_2 = _2446;
                frontier_phi_52_53_ladder_3 = _2444;
                frontier_phi_52_53_ladder_4 = _2442;
                frontier_phi_52_53_ladder_5 = _2438;
            }
            _2615 = frontier_phi_52_53_ladder_5;
            _2617 = frontier_phi_52_53_ladder_1;
            _2619 = frontier_phi_52_53_ladder_4;
            _2621 = frontier_phi_52_53_ladder_3;
            _2623 = frontier_phi_52_53_ladder_2;
            _2625 = frontier_phi_52_53_ladder;
        }
        float _2630 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2223 = (_2630 * _2621) + _1918;
        _2225 = (_2630 * _2623) + _1919;
        _2227 = (_2630 * _2625) + _1920;
        _2229 = ((_2615 * 0.039999999105930328369140625) * _2630) + _2084;
        _2231 = ((_2617 * 0.039999999105930328369140625) * _2630) + _2085;
        _2233 = ((_2619 * 0.039999999105930328369140625) * _2630) + _2086;
    }
    else
    {
        _2223 = _1918;
        _2225 = _1919;
        _2227 = _1920;
        _2229 = _2084;
        _2231 = _2085;
        _2233 = _2086;
    }
    float _2253 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2254 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2255 = cbSceneParam._m0[86u].x * ((_597 / cbSceneParam._m0[86u].x) + ((_684 * cbMtdParam._m0[13u].y) * dot(vec3(_555, _556, _557), vec3(_206, _207, _208))));
    float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
    float _2257 = isnan(_2254) ? _598 : (isnan(_598) ? _2254 : min(_598, _2254));
    vec4 _2259 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2256, _2257), 0.0);
    float _2261 = _2259.x;
    bool _2282 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2261)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2261))) > _578;
    float _2283 = _2282 ? _2256 : _597;
    float _2284 = _2282 ? _2257 : _598;
    vec4 _2286 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2283, _2284));
    vec4 _2291 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2283, _2284));
    float _2293 = _2291.x;
    float _2313 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2293)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2293))) - _578;
    bool _2323 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2327 = (isnan(_2313) ? 0.0 : (isnan(0.0) ? _2313 : max(0.0, _2313))) * (-1.44269502162933349609375);
    float _4417 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4428 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4439 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2354 = 0.959999978542327880859375 - (exp2(log2(1.0 - _676) * 5.0) * 0.959999978542327880859375);
    float _2357 = ((_2286.x * _2354) * exp2(_2327 * (_2323 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2360 = ((_2286.y * _2354) * exp2(_2327 * (_2323 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2363 = ((_2286.z * _2354) * exp2(_2327 * (_2323 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2371 = (_2357 + (((((_1714 * _1762.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1507) * _1778)) + _2229) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2223 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _661))) - _2357) * cbMtdParam._m0[15u].x);
    float _2373 = (_2360 + (((((_1714 * _1762.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1507) * _1778)) + _2231) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2225 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _661))) - _2360) * cbMtdParam._m0[15u].x);
    float _2375 = (_2363 + (((((_1714 * _1762.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1507) * _1778)) + _2233) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2227 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _661))) - _2363) * cbMtdParam._m0[15u].x);
    uint _2376 = _636 + 6u;
    float _2384 = _597 / cbSceneParam._m0[86u].x;
    float _2385 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2399 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, (log2((isnan(cbSceneParam._m0[77u].w) ? _578 : (isnan(_578) ? cbSceneParam._m0[77u].w : min(_578, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2401 = _2399.x;
    float _2402 = _2399.y;
    float _2403 = _2399.z;
    float _2404 = _2399.w;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_578 > cbSceneParam._m0[78u].w)
    {
        float _2463 = isnan(_578) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _578 : min(cbSceneParam._m0[80u].w, _578));
        float _2464 = _2463 / _578;
        float _2475 = _2464 * _276;
        float _2476 = _277 * _2464;
        float _2477 = (-0.0) - _2476;
        float _2478 = _2464 * _278;
        float _2480 = (cbSceneParam._m0[77u].w * _2477) / _2463;
        float _2481 = _2480 + cbSceneParam._m0[79u].w;
        float _2482 = cbSceneParam._m0[79u].w - _2476;
        float _2488 = sqrt(((_2475 * _2475) + (_2476 * _2476)) + (_2478 * _2478));
        float _2491 = (1.0 - (cbSceneParam._m0[77u].w / _2463)) * _2488;
        float _2496 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2497 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2753;
        if (abs((_2477 - _2480) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2753 = ((((_2481 > 0.0) ? exp2(_2496 * _2481) : (2.0 - exp2(_2497 * _2481))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2491;
        }
        else
        {
            float _2676 = 1.0 / cbSceneParam._m0[80u].x;
            float _2677 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : max(_2481, _2482));
            float _2678 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : min(_2481, _2482));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            _2753 = ((abs(_2488 / _2477) * cbSceneParam._m0[80u].y) * ((((_2687 - _2688) * 2.0) - ((exp2(_2496 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0)))) - exp2(_2496 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))))) * _2676)) - ((exp2(_2497 * _2687) - exp2(_2497 * _2688)) * _2676))) + (_2491 * cbSceneParam._m0[80u].z);
        }
        vec4 _2755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, 1.0), 0.0);
        float _2764 = exp2((_2753 * (-1.44269502162933349609375)) * (1.0 - _2755.w));
        float _2765 = log2(_2764);
        float _2781 = log2(_2404);
        _2499 = (exp2(_2781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].x)) * _2755.x) / cbSceneParam._m0[78u].x)) + _2401;
        _2501 = (exp2(_2781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].y)) * _2755.y) / cbSceneParam._m0[78u].y)) + _2402;
        _2503 = (exp2(_2781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].z)) * _2755.z) / cbSceneParam._m0[78u].z)) + _2403;
        _2505 = _2764 * _2404;
    }
    else
    {
        _2499 = _2401;
        _2501 = _2402;
        _2503 = _2403;
        _2505 = _2404;
    }
    bool _2791;
    float _2560;
    vec4 _2563;
    float _2565;
    vec4 _2567;
    float _2575;
    float _2576;
    float _2577;
    float _2578;
    bool _2588;
    for (;;)
    {
        bool _2517 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2518 = log2(_2505);
        float _2525 = exp2(_2518 * cbSceneParam._m0[78u].x) * _2371;
        float _2526 = exp2(_2518 * cbSceneParam._m0[78u].y) * _2373;
        float _2527 = exp2(_2518 * cbSceneParam._m0[78u].z) * _2375;
        vec4 _2535 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_597, _598));
        float _2537 = _2535.x;
        float _2558 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2537)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2537))) - _578) * cbMtdParam._m0[14u].z;
        float _4490 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        _2560 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * cbInstanceData._m0[_2376].w;
        float _2561 = _585 + (-0.5);
        _2563 = cbMtdParam._m0[1u];
        _2565 = _2563.y * _2561;
        _2567 = cbMatDynParam._m0[0u];
        float _2574 = (roundEven(_2567.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2575 = _2574 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2499)));
        _2576 = _2574 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2501)));
        _2577 = _2574 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2503)));
        _2578 = _2561 * 0.999000012874603271484375;
        _2588 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2588)
        {
            if ((cbInstanceData._m0[_636 + 7u].x + _2578) < 0.5)
            {
                _2791 = true;
                break;
            }
        }
        uint _2711 = _637 + uint(_2567.w);
        if ((cbInstanceData._m0[_2711].w < 1.0) && ((cbInstanceData._m0[_2711].w + _2578) < 0.5))
        {
            _2791 = true;
            break;
        }
        if ((_2565 + 1.0) < _2563.x)
        {
            _2791 = true;
            break;
        }
        _2791 = false;
        break;
    }
    float _3055;
    if (_2791)
    {
        discard_state = true;
        _3055 = 0.0;
    }
    else
    {
        _3055 = _2560;
    }
    SV_Target.x = _2575;
    SV_Target.y = _2576;
    SV_Target.z = _2577;
    SV_Target.w = _3055;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2560;
    discard_exit();
}


