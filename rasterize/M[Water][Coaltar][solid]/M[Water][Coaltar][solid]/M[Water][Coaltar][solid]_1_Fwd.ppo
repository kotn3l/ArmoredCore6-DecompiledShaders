#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1022;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _200 = _199 * _191;
    float _201 = _199 * _192;
    float _202 = _199 * _193;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _270 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _260);
    float _271 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _260);
    float _272 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _260);
    float _281 = inversesqrt(dot(vec3(_270, _271, _272), vec3(_270, _271, _272)));
    float _282 = _281 * _270;
    float _283 = _281 * _271;
    float _284 = _281 * _272;
    float _292 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _293 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _307 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_292 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_293 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _315 = (_307.x * 2.0) + (-1.0);
    float _317 = (_307.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3418 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    float _327 = fma(_324, _207, fma(_317, _214, _315 * _200));
    float _330 = fma(_324, _208, fma(_317, _215, _315 * _201));
    float _333 = fma(_324, _209, fma(_317, _216, _315 * _202));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    float _346 = (dot(vec4(_282, _283, _284, 0.0), vec4(_337 * _327, _337 * _330, _337 * _333, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _359 = dot(vec3(_270, _271, _272), vec3(_200, _201, _202));
    float _362 = dot(vec3(_270, _271, _272), vec3(_214, _215, _216));
    float _365 = dot(vec3(_270, _271, _272), vec3(_207, _208, _209));
    float _371 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _392 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _412 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_359 * cbMtdParam._m0[12u].x) * _371) * _392) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_362 * cbMtdParam._m0[12u].x) * _371) * _392) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _435 = dot(vec4(_282, _283, _284, 0.0), vec4(_207, _208, _209, 0.0)) - cbMtdParam._m0[12u].w;
    float _3429 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _442 = exp2(log2(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _457 = (((((sin(_346) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _412.x) * cbMtdParam._m0[9u].x) * ((_442 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _466 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _412.y) * cbMtdParam._m0[9u].y) * ((_442 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_346 * 0.85000002384185791015625) + 1.0);
    float _475 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _412.z) * cbMtdParam._m0[9u].z) * ((_442 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_346 * 0.699999988079071044921875) + 1.0);
    vec4 _488 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    float _495 = (_488.x * 2.0) + (-1.0);
    float _496 = (_488.y * 2.0) + (-1.0);
    float _497 = dot(vec2(_495, _496), vec2(_495, _496));
    float _3445 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _502 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _504 = cbMtdParam._m0[14u].w + _488.z;
    vec4 _516 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _292) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _293) + cbTextureTilingScale._m0[0u].w));
    float _520 = cbMtdParam._m0[13u].w * _516.x;
    float _538 = fma(_502, _207, fma(_496, _214, _495 * _200));
    float _541 = fma(_502, _208, fma(_496, _215, _495 * _201));
    float _544 = fma(_502, _209, fma(_496, _216, _495 * _202));
    float _548 = inversesqrt(dot(vec3(_538, _541, _544), vec3(_538, _541, _544)));
    float _549 = _548 * _538;
    float _550 = _548 * _541;
    float _551 = _548 * _544;
    float _3456 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _552 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _553 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3472 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3483 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3494 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_551, cbSceneParam._m0[5u].z, fma(_550, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _549));
    float _602 = fma(_551, cbSceneParam._m0[6u].z, fma(_550, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _549));
    float _605 = fma(_551, cbSceneParam._m0[7u].z, fma(_550, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _549));
    uint _618 = uint(roundEven(NORMAL.w)) * 13u;
    uint _620 = (_618 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3505 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _643 = _640.x * TEXCOORD_1.w;
    float _644 = dot(vec3(_549, _550, _551), vec3(_282, _283, _284));
    float _647 = _644 * 2.0;
    float _651 = (_647 * _549) - _282;
    float _652 = (_647 * _550) - _283;
    float _653 = (_647 * _551) - _284;
    float _657 = abs(dot(vec3(_282, _283, _284), vec3(_549, _550, _551)));
    float _3538 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _666 = 10.0 / (_572 + 10.0);
    float _667 = sqrt(_552);
    float _679 = exp2((_667 * 5.0) * log2(1.0 - (_658 * 0.999000012874603271484375))) / (4.0 - (_667 * 3.0));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _750 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _754 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _779 = _711 + _549;
        float _780 = _715 + _550;
        float _781 = _719 + _551;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_549, _550, _551), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3586 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_549, _550, _551), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3619 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_549, _550, _551), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3652 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1062 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1066 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1070 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1093 = _711 + _549;
        float _1094 = _715 + _550;
        float _1095 = _719 + _551;
        float _1105 = fma(_1095, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093)) - _1062;
        float _1106 = fma(_1095, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093)) - _1066;
        float _1107 = fma(_1095, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093)) - _1070;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1062 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1066 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[35u].z) + ((((((_1070 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1161 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1128.x + (-0.5));
        float _1163 = _1161 * (_1128.y + (-0.5));
        float _1164 = _1161 * (_1128.z + (-0.5));
        float _1171 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1135.x + (-0.5));
        float _1173 = _1171 * (_1135.y + (-0.5));
        float _1174 = _1171 * (_1135.z + (-0.5));
        float _1181 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1142.x + (-0.5));
        float _1183 = _1181 * (_1142.y + (-0.5));
        float _1184 = _1181 * (_1142.z + (-0.5));
        float _1191 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1149.x + (-0.5));
        float _1193 = _1191 * (_1149.y + (-0.5));
        float _1194 = _1191 * (_1149.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_549, _550, _551), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3715 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1225 + 1.0))) + _1230) * _1195;
        float _1240 = _1163 * 0.5;
        float _1241 = _1173 * 0.5;
        float _1242 = _1183 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_549, _550, _551), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3748 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1267 + 1.0))) + _1272) * _1196;
        float _1282 = _1164 * 0.5;
        float _1283 = _1174 * 0.5;
        float _1284 = _1184 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_549, _550, _551), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3781 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1309 + 1.0))) + _1314) * _1197;
        _1331 = _1164;
        _1332 = _1163;
        _1333 = _1162;
        _1334 = _1174;
        _1335 = _1173;
        _1336 = _1172;
        _1337 = _1184;
        _1338 = _1183;
        _1339 = _1182;
        _1340 = _1197;
        _1341 = _1196;
        _1342 = _1195;
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1022;
        _1332 = _1022;
        _1333 = _1022;
        _1334 = _1022;
        _1335 = _1022;
        _1336 = _1022;
        _1337 = _1022;
        _1338 = _1022;
        _1339 = _1022;
        _1340 = _1022;
        _1341 = _1022;
        _1342 = _1022;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1378 = fma(_1357, cbSceneParam._m0[89u].z, fma(_1356, cbSceneParam._m0[89u].y, _1355 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1357, cbSceneParam._m0[90u].z, fma(_1356, cbSceneParam._m0[90u].y, _1355 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1357, cbSceneParam._m0[91u].z, fma(_1356, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1355));
    float _1399 = _651 * 0.5;
    float _1400 = _652 * 0.5;
    float _1401 = _653 * 0.5;
    float _1402 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1405 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1408 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1442;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1415 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1419 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1423 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1430 = dot(vec4(cbModelParam._m0[39u]), vec4(_1399, _1400, _1401, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1453;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1444 = dot(vec4(cbModelParam._m0[40u]), vec4(_1399, _1400, _1401, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1457 = (_1453 * cbModelParam._m0[1u].x) + (_1442 * (1.0 - cbModelParam._m0[1u].x));
    float _1467 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1467 : min(cbModelParam._m0[25u].z, _1467));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_653, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651));
        float _1529 = fma(_653, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651));
        float _1532 = fma(_653, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1560 = frontier_phi_14_12_ladder;
        }
        float _1783;
        if (_1529 > 0.0)
        {
            _1783 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1783 = frontier_phi_23_19_ladder;
        }
        float _2018;
        if (_1532 > 0.0)
        {
            _2018 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2018 = frontier_phi_34_30_ladder;
        }
        float _2020 = isnan(_1783) ? _1560 : (isnan(_1560) ? _1783 : min(_1560, _1783));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1526) + _1515;
        float _2026 = (_2021 * _1529) + _1519;
        float _2027 = (_2021 * _1532) + _1523;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1468);
            frontier_phi_13_34_ladder = _2349.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2349.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2349.x * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_13_34_ladder_2;
        _1550 = frontier_phi_13_34_ladder_1;
        _1552 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_651, _652, _653), _1468);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1612 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1616 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1620 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1623 = fma(_653, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651));
        float _1626 = fma(_653, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651));
        float _1629 = fma(_653, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651));
        float _1788;
        if (_1623 > 0.0)
        {
            _1788 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1788 = frontier_phi_25_21_ladder;
        }
        float _2045;
        if (_1626 > 0.0)
        {
            _2045 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2045 = frontier_phi_36_32_ladder;
        }
        float _2501;
        if (_1629 > 0.0)
        {
            _2501 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2501 = frontier_phi_47_42_ladder;
        }
        float _2503 = isnan(_2045) ? _1788 : (isnan(_1788) ? _2045 : min(_1788, _2045));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1623) + _1612;
        float _2509 = (_2504 * _1626) + _1616;
        float _2510 = (_2504 * _1629) + _1620;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_22_47_ladder = _2631.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2631.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2631.x * cbModelParam._m0[1u].z;
        }
        _1648 = frontier_phi_22_47_ladder_2;
        _1650 = frontier_phi_22_47_ladder_1;
        _1652 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_651, _652, _653), _1557);
        _1648 = _1632.x * cbModelParam._m0[1u].z;
        _1650 = _1632.y * cbModelParam._m0[1u].z;
        _1652 = _1632.z * cbModelParam._m0[1u].z;
    }
    float _1664 = ((((1.0 - _679) * ((_667 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_679 * _667)) * _643;
    float _1665 = _1664 * ((cbModelParam._m0[1u].w * (_1648 - _1548)) + _1548);
    float _1666 = _1664 * ((cbModelParam._m0[1u].w * (_1650 - _1550)) + _1550);
    float _1667 = _1664 * ((cbModelParam._m0[1u].w * (_1652 - _1552)) + _1552);
    float _1670 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, _1665 * cbSceneParam._m0[91u].x));
    float _1687 = _578 / cbSceneParam._m0[86u].x;
    float _1695 = (cbSceneParam._m0[88u].y * (1.0 - _552)) + cbSceneParam._m0[88u].z;
    float _3907 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1697 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 5.0;
    float _1702 = (_666 * cbMtdParam._m0[13u].z) * dot(vec3(_549, _550, _551), vec3(1.0, 0.0, 0.0));
    vec4 _1712 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1702 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1702 + _1687) * cbSceneParam._m0[86u].x, _579), _1697).w) + _1687) * cbSceneParam._m0[86u].x, _579), _1697);
    float _1728 = 1.0 - _1712.w;
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_618 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1746 = _643 + (-1.0);
    float _1749 = (cbLight._m0[_1741].x * _1746) + 1.0;
    float _1750 = (cbLight._m0[_1741].y * _1746) + 1.0;
    uint _1752 = _1740 + 4u;
    float _1763 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_549, _550, _551));
    float _1766 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1767 = _1740 + 5u;
    uint _1773 = _1740 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_549, _550, _551));
    float _1782 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    float _1847;
    float _1848;
    float _1849;
    if (_553 == 0.0)
    {
        float _3928 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _3939 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1801 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
        float _1803 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
        _1847 = ((cbLight._m0[_1767].x * _1782) * _1803) + ((cbLight._m0[_1752].x * _1766) * _1801);
        _1848 = ((_1782 * cbLight._m0[_1767].y) * _1803) + ((_1766 * cbLight._m0[_1752].y) * _1801);
        _1849 = ((_1782 * cbLight._m0[_1767].z) * _1803) + ((_1766 * cbLight._m0[_1752].z) * _1801);
    }
    else
    {
        float _1813 = _1763 + _553;
        float _1816 = (_553 * 2.0) + 1.0;
        float _1817 = (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) / _1816;
        float _1824 = _1779 + _553;
        float _1826 = (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) / _1816;
        _1847 = (((_1826 * cbLight._m0[_1767].x) * _1782) + ((_1817 * cbLight._m0[_1752].x) * _1766)) * 0.3183098733425140380859375;
        _1848 = (((_1826 * cbLight._m0[_1767].y) * _1782) + ((_1817 * cbLight._m0[_1752].y) * _1766)) * 0.3183098733425140380859375;
        _1849 = (((_1826 * cbLight._m0[_1767].z) * _1782) + ((_1817 * cbLight._m0[_1752].z) * _1766)) * 0.3183098733425140380859375;
    }
    uint _1853 = _1740 + 8u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _552) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1740].x + _282;
    float _1872 = cbLight._m0[_1740].y + _283;
    float _1873 = cbLight._m0[_1740].z + _284;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1740].xyz));
    float _3960 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _1885 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1886 = dot(vec3(_549, _550, _551), vec3(_1878, _1879, _1880));
    float _3982 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1878, _1879, _1880));
    float _3993 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1870 * _1870;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1910 = 1.0 - _1870;
    float _1921 = (0.5 / (((_1885 * ((_1884 * _1910) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _1910) + _1870) * _1884))) * _1884;
    float _4004 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    uint _1936 = _1740 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _552) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1773].x + _282;
    float _1953 = cbLight._m0[_1773].y + _283;
    float _1954 = cbLight._m0[_1773].z + _284;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1773].xyz));
    float _4015 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1966 = dot(vec3(_549, _550, _551), vec3(_1959, _1960, _1961));
    float _4026 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1959, _1960, _1961));
    float _4037 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1988 = 1.0 - _1951;
    float _1998 = (0.5 / (((_1885 * ((_1965 * _1988) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _1988) + _1951) * _1965))) * _1965;
    float _4048 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2010 = (((_1987 * cbLight._m0[_1936].x) * _2000) * _1782) + (((_1909 * cbLight._m0[_1853].x) * _1923) * _1766);
    float _2011 = (((_1987 * cbLight._m0[_1936].y) * _2000) * _1782) + (((_1909 * cbLight._m0[_1853].y) * _1923) * _1766);
    float _2012 = (((_1987 * cbLight._m0[_1936].z) * _2000) * _1782) + (((_1909 * cbLight._m0[_1853].z) * _1923) * _1766);
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    if (_1738.y == 0u)
    {
        float _2089 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2089;
        float _2091 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2089;
        float _2092 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2089;
        uvec4 _2104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2105 = _2104.x;
        uint _2116 = uint((float(_2104.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2105))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2105)));
        float _2126 = (log2(_2092 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2127 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        uint _2130 = uint(isnan(14.0) ? _2127 : (isnan(_2127) ? 14.0 : min(_2127, 14.0)));
        uvec4 _2135 = texelFetch(g_lightClusterGridBuffer, int(((_2130 << 2u) + (_2116 << 6u)) >> 2u));
        uint _2136 = _2135.x;
        uint _2137 = _2104.z;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        if (((((1u << ((_2137 >> 4u) & 15u)) + 4294967295u) & _2136) == 0u) || ((_2137 & 240u) == 0u))
        {
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
        }
        else
        {
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2369;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2130 << 5u) + (_2116 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2575)
                {
                    frontier_phi_56_pred = _2559;
                    frontier_phi_56_pred_1 = _2564;
                    frontier_phi_56_pred_2 = _2563;
                    frontier_phi_56_pred_3 = _2562;
                    frontier_phi_56_pred_4 = _2561;
                    frontier_phi_56_pred_5 = _2560;
                }
                else
                {
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    uint _2710;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2574;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    for (;;)
                    {
                        uint _2714 = uint(findLSB(_2710)) + (_2565 << 5u);
                        uint _2711 = (_2710 + 4294967295u) & _2710;
                        uint _2716 = _2714 * 48u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2736 = (_2714 * 48u) + 4u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        float _2750 = _2749.x;
                        float _2751 = _2749.y;
                        float _2752 = _2749.z;
                        uint _2755 = (_2714 * 48u) + 8u;
                        vec3 _2766 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x));
                        uint _2771 = (_2714 * 48u) + 12u;
                        vec2 _2779 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x));
                        float _2785 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
                        float _2786 = _2785 * _2090;
                        float _2787 = _2785 * _2091;
                        float _2788 = _2785 * _2092;
                        float _2789 = _2730.x - _2090;
                        float _2790 = _2730.y - _2091;
                        float _2791 = _2730.z - _2092;
                        float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                        float _2795 = inversesqrt(_2792);
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2799 = dot(vec3(_599, _602, _605), vec3(_2796, _2797, _2798));
                        float _2804 = 1.0 - (_2792 * _2730.w);
                        float _4069 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2806 = sqrt(_2792) * _2749.w;
                        float _2809 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                        float _2810 = _2809 * _2809;
                        float _2811 = 1.0 - _2810;
                        float _2813 = (_2811 * _2811) * _553;
                        float _2816 = ((_2811 * _2799) + _2810) + _2813;
                        float _2821 = _2806 * _2806;
                        float _2825 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2805) / (((_2813 * 2.0) + 1.0) * ((_2821 * 0.699999988079071044921875) + 1.0));
                        float _2829 = dot(vec3(_2796, _2797, _2798), vec3(_2786, _2787, _2788));
                        float _4085 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2836 = dot(vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788), vec3(_599, _602, _605)) + 1.0;
                        float _2838 = (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))) * 0.5;
                        float _2846 = ((_2838 * _2838) * _2779.x) * exp2((_2779.y * 32.0) * log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
                        float _2848 = _553 / (_553 + 1.0);
                        float _2864 = (-0.0) - _2090;
                        float _2865 = (-0.0) - _2091;
                        float _2866 = (-0.0) - _2092;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2881 = exp2(log2(1.0 / ((_2821 * 3.5) + 5.0)) * 0.25);
                        float _2882 = 1.0 - _667;
                        float _2889 = sqrt(1.0 - ((1.0 - (_2882 * _2882)) * (1.0 - (_2881 * _2881))));
                        float _2890 = _2889 * _2889;
                        float _2891 = _2890 * _2890;
                        float _2892 = _2871 + _2796;
                        float _2893 = _2872 + _2797;
                        float _2894 = _2873 + _2798;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2902 = dot(vec3(_599, _602, _605), vec3(_2871, _2872, _2873));
                        float _4101 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2906 = dot(vec3(_599, _602, _605), vec3(_2898 * _2892, _2898 * _2893, _2898 * _2894));
                        float _4112 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2913 = ((_2909 * _2909) * (_2891 + (-1.0))) + 1.0;
                        float _2914 = _2809 * _2890;
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2799) + _2915;
                        float _4123 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2920 = 1.0 - _2890;
                        float _2930 = (0.5 / (((_2919 * ((_2905 * _2920) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2919 * _2920) + _2890) * _2905))) * _2919;
                        float _4134 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2941 = (((_2891 * 3.1415927410125732421875) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) / ((_2913 * _2913) * ((_2821 * 2.1991131305694580078125) + 3.141590118408203125))) * _2805;
                        _2639 = (((((_2750 * 0.3183098733425140380859375) * _2848) * _2846) + _2750) * _2825) + _2707;
                        _2640 = (((((_2751 * 0.3183098733425140380859375) * _2848) * _2846) + _2751) * _2825) + _2708;
                        _2641 = (((((_2752 * 0.3183098733425140380859375) * _2848) * _2846) + _2752) * _2825) + _2709;
                        _2636 = (_2941 * _2766.x) + _2704;
                        _2637 = (_2941 * _2766.y) + _2705;
                        _2638 = (_2941 * _2766.z) + _2706;
                        if (_2711 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2640;
                            _2709 = _2641;
                            _2710 = _2711;
                        }
                    }
                    frontier_phi_56_pred = _2636;
                    frontier_phi_56_pred_1 = _2641;
                    frontier_phi_56_pred_2 = _2640;
                    frontier_phi_56_pred_3 = _2639;
                    frontier_phi_56_pred_4 = _2638;
                    frontier_phi_56_pred_5 = _2637;
                }
                _2359 = frontier_phi_56_pred;
                _2369 = frontier_phi_56_pred_1;
                _2367 = frontier_phi_56_pred_2;
                _2365 = frontier_phi_56_pred_3;
                _2363 = frontier_phi_56_pred_4;
                _2361 = frontier_phi_56_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2359;
                    _2560 = _2361;
                    _2561 = _2363;
                    _2562 = _2365;
                    _2563 = _2367;
                    _2564 = _2369;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
        }
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.z;
        uint _2375 = (_2373 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2375) & _2136) == 0u)
        {
            _2527 = _2358;
            _2529 = _2360;
            _2531 = _2362;
            _2533 = _2364;
            _2535 = _2366;
            _2537 = _2368;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
            float _2553 = _2552 * _2090;
            float _2554 = _2552 * _2091;
            float _2555 = _2552 * _2092;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2375 < ((_2373 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2687 = _2358;
                float _2688 = _2360;
                float _2689 = _2362;
                float _2690 = _2364;
                float _2691 = _2366;
                float _2692 = _2368;
                uint _2693 = _2375;
                uint _2702;
                bool _2703;
                for (;;)
                {
                    _2702 = texelFetch(g_lightClassification, int((((_2130 << 5u) + (_2116 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                    _2703 = _2702 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2703)
                    {
                        frontier_phi_62_pred = _2692;
                        frontier_phi_62_pred_1 = _2691;
                        frontier_phi_62_pred_2 = _2690;
                        frontier_phi_62_pred_3 = _2689;
                        frontier_phi_62_pred_4 = _2688;
                        frontier_phi_62_pred_5 = _2687;
                    }
                    else
                    {
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _2959 = _2687;
                        float _2960 = _2688;
                        float _2961 = _2689;
                        float _2962 = _2690;
                        float _2963 = _2691;
                        float _2964 = _2692;
                        uint _2965 = _2702;
                        uint _2966;
                        vec4 _2991;
                        float _2992;
                        vec4 _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        vec3 _3022;
                        vec2 _3031;
                        vec4 _3046;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2976 = ((_2693 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2965));
                            _2966 = (_2965 + 4294967295u) & _2965;
                            uint _2978 = _2976 * 40u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _2992 = _2991.w;
                            uint _2994 = (_2976 * 40u) + 4u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.x;
                            _3009 = _3007.y;
                            _3010 = _3007.z;
                            uint _3012 = (_2976 * 40u) + 8u;
                            _3022 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x));
                            uint _3024 = (_2976 * 40u) + 12u;
                            _3031 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x));
                            uint _3033 = (_2976 * 40u) + 16u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2976 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2976 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2976 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2092, _3097.z, fma(_2091, _3097.y, _3097.x * _2090)) + _3097.w;
                            _3110 = !((fma(_2092, _3078.z, fma(_2091, _3078.y, _3078.x * _2090)) + _3078.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3110)
                            {
                                float _3136 = _2991.x - _2090;
                                float _3137 = _2991.y - _2091;
                                float _3138 = _2991.z - _2092;
                                float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                                float _3142 = inversesqrt(_3139);
                                float _3143 = _3142 * _3136;
                                float _3144 = _3142 * _3137;
                                float _3145 = _3142 * _3138;
                                float _3149 = 1.0 - (_3139 / (_2992 * _2992));
                                float _4145 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3154 = sqrt(_3139) * _3007.w;
                                float _3156 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                                float _3157 = _3156 * _3156;
                                float _3158 = 1.0 - _3157;
                                float _3160 = (_3158 * _3158) * _553;
                                float _3163 = ((_3158 * dot(vec3(_3143, _3144, _3145), vec3(_599, _602, _605))) + _3157) + _3160;
                                float _3168 = _3154 * _3154;
                                float _3173 = (fma(_2092, _3046.z, fma(_2091, _3046.y, _3046.x * _2090)) + _3046.w) / _3109;
                                float _3174 = (fma(_2092, _3062.z, fma(_2091, _3062.y, _3062.x * _2090)) + _3062.w) / _3109;
                                float _3178 = 1.0 - dot(vec2(_3173, _3174), vec2(_3173, _3174));
                                float _4161 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3180 = _3179 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3150) / (((_3160 * 2.0) + 1.0) * ((_3168 * 0.699999988079071044921875) + 1.0)));
                                float _3181 = (-0.0) - _2553;
                                float _3182 = (-0.0) - _2554;
                                float _3183 = (-0.0) - _2555;
                                float _3184 = dot(vec3(_3143, _3144, _3145), vec3(_2553, _2554, _2555));
                                float _4172 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3191 = dot(vec3(_3181, _3182, _3183), vec3(_599, _602, _605)) + 1.0;
                                float _3193 = (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * 0.5;
                                float _3200 = ((_3193 * _3193) * _3031.x) * exp2((_3031.y * 32.0) * log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))));
                                float _3202 = _553 / (_553 + 1.0);
                                float _3223 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                                float _3224 = 1.0 - _667;
                                float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                                float _3232 = _3231 * _3231;
                                float _3233 = _3232 * _3232;
                                float _3234 = _3143 - _2553;
                                float _3235 = _3144 - _2554;
                                float _3236 = _3145 - _2555;
                                float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                                float _3244 = dot(vec3(_599, _602, _605), vec3(_3181, _3182, _3183));
                                float _4188 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3248 = dot(vec3(_599, _602, _605), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                                float _4199 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                                float _3256 = _3156 * _3232;
                                float _3257 = _3256 * _3256;
                                float _3263 = ((1.0 - _3257) * dot(vec3(_599, _602, _605), vec3(_3143, _3144, _3145))) + _3257;
                                float _4210 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3265 = 1.0 - _3232;
                                float _3275 = (0.5 / (((_3264 * ((_3247 * _3265) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3232) * _3247))) * _3264;
                                float _4221 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3285 = (_3179 * _3150) * (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_3255 * _3255) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3010 * 0.3183098733425140380859375) * _3202) * _3200) + _3010) * _3180;
                                frontier_phi_68_pred_1 = ((((_3009 * 0.3183098733425140380859375) * _3202) * _3200) + _3009) * _3180;
                                frontier_phi_68_pred_2 = ((((_3008 * 0.3183098733425140380859375) * _3202) * _3200) + _3008) * _3180;
                                frontier_phi_68_pred_3 = _3285 * _3022.z;
                                frontier_phi_68_pred_4 = _3285 * _3022.y;
                                frontier_phi_68_pred_5 = _3285 * _3022.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3294 = frontier_phi_68_pred;
                            _3293 = frontier_phi_68_pred_1;
                            _3292 = frontier_phi_68_pred_2;
                            _3291 = frontier_phi_68_pred_3;
                            _3290 = frontier_phi_68_pred_4;
                            _3289 = frontier_phi_68_pred_5;
                            _2949 = _3292 + _2962;
                            _2950 = _3293 + _2963;
                            _2951 = _3294 + _2964;
                            _2946 = _3289 + _2959;
                            _2947 = _3290 + _2960;
                            _2948 = _3291 + _2961;
                            if (_2966 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2966;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2951;
                        frontier_phi_62_pred_1 = _2950;
                        frontier_phi_62_pred_2 = _2949;
                        frontier_phi_62_pred_3 = _2948;
                        frontier_phi_62_pred_4 = _2947;
                        frontier_phi_62_pred_5 = _2946;
                    }
                    _2538 = frontier_phi_62_pred;
                    _2536 = frontier_phi_62_pred_1;
                    _2534 = frontier_phi_62_pred_2;
                    _2532 = frontier_phi_62_pred_3;
                    _2530 = frontier_phi_62_pred_4;
                    _2528 = frontier_phi_62_pred_5;
                    uint _2694 = _2693 + 1u;
                    if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2687 = _2528;
                        _2688 = _2530;
                        _2689 = _2532;
                        _2690 = _2534;
                        _2691 = _2536;
                        _2692 = _2538;
                        _2693 = _2694;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2538;
                frontier_phi_49_50_ladder_1 = _2534;
                frontier_phi_49_50_ladder_2 = _2536;
                frontier_phi_49_50_ladder_3 = _2532;
                frontier_phi_49_50_ladder_4 = _2530;
                frontier_phi_49_50_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_49_50_ladder = _2368;
                frontier_phi_49_50_ladder_1 = _2364;
                frontier_phi_49_50_ladder_2 = _2366;
                frontier_phi_49_50_ladder_3 = _2362;
                frontier_phi_49_50_ladder_4 = _2360;
                frontier_phi_49_50_ladder_5 = _2358;
            }
            _2527 = frontier_phi_49_50_ladder_5;
            _2529 = frontier_phi_49_50_ladder_4;
            _2531 = frontier_phi_49_50_ladder_3;
            _2533 = frontier_phi_49_50_ladder_1;
            _2535 = frontier_phi_49_50_ladder_2;
            _2537 = frontier_phi_49_50_ladder;
        }
        float _2542 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
        _2149 = (_2542 * _2533) + _1847;
        _2151 = (_2542 * _2535) + _1848;
        _2153 = (_2542 * _2537) + _1849;
        _2155 = ((_2527 * 0.039999999105930328369140625) * _2542) + _2010;
        _2157 = ((_2529 * 0.039999999105930328369140625) * _2542) + _2011;
        _2159 = ((_2531 * 0.039999999105930328369140625) * _2542) + _2012;
    }
    else
    {
        _2149 = _1847;
        _2151 = _1848;
        _2153 = _1849;
        _2155 = _2010;
        _2157 = _2011;
        _2159 = _2012;
    }
    float _2173 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2174 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2175 = cbSceneParam._m0[86u].x * (_1687 + ((_666 * cbMtdParam._m0[13u].y) * dot(vec3(_549, _550, _551), vec3(_200, _201, _202))));
    float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
    float _2177 = isnan(_2174) ? _579 : (isnan(_579) ? _2174 : min(_579, _2174));
    vec4 _2179 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2176, _2177), 0.0);
    float _2181 = _2179.x;
    bool _2202 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2181)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2181))) > _572;
    float _2203 = _2202 ? _2176 : _578;
    float _2204 = _2202 ? _2177 : _579;
    vec4 _2206 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2203, _2204));
    vec4 _2211 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2203, _2204));
    float _2213 = _2211.x;
    float _2233 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2213)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2213))) - _572;
    bool _2243 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2247 = (isnan(_2233) ? 0.0 : (isnan(0.0) ? _2233 : max(0.0, _2233))) * (-1.44269502162933349609375);
    float _4252 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4263 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4274 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2274 = 0.959999978542327880859375 - (exp2(log2(1.0 - _658) * 5.0) * 0.959999978542327880859375);
    float _2277 = ((_2206.x * _2274) * exp2(_2247 * (_2243 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2280 = ((_2206.y * _2274) * exp2(_2247 * (_2243 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2283 = ((_2206.z * _2274) * exp2(_2247 * (_2243 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2304 = _578 / cbSceneParam._m0[86u].x;
    float _2305 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2319 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2321 = _2319.x;
    float _2322 = _2319.y;
    float _2323 = _2319.z;
    float _2324 = _2319.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2383 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2384 = _2383 / _572;
        float _2395 = _2384 * _270;
        float _2396 = _271 * _2384;
        float _2397 = (-0.0) - _2396;
        float _2398 = _2384 * _272;
        float _2400 = (cbSceneParam._m0[77u].w * _2397) / _2383;
        float _2401 = _2400 + cbSceneParam._m0[79u].w;
        float _2402 = cbSceneParam._m0[79u].w - _2396;
        float _2408 = sqrt(((_2395 * _2395) + (_2396 * _2396)) + (_2398 * _2398));
        float _2411 = (1.0 - (cbSceneParam._m0[77u].w / _2383)) * _2408;
        float _2416 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2649;
        if (abs((_2397 - _2400) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2649 = ((((_2401 > 0.0) ? exp2(_2416 * _2401) : (2.0 - exp2(_2417 * _2401))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2411;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : max(_2401, _2402));
            float _2590 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : min(_2401, _2402));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2649 = ((abs(_2408 / _2397) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2416 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2416 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2417 * _2599) - exp2(_2417 * _2600)) * _2588))) + (_2411 * cbSceneParam._m0[80u].z);
        }
        vec4 _2651 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, 1.0), 0.0);
        float _2660 = exp2((_2649 * (-1.44269502162933349609375)) * (1.0 - _2651.w));
        float _2661 = log2(_2660);
        float _2677 = log2(_2324);
        _2419 = (exp2(_2677 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].x)) * _2651.x) / cbSceneParam._m0[78u].x)) + _2321;
        _2421 = (exp2(_2677 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].y)) * _2651.y) / cbSceneParam._m0[78u].y)) + _2322;
        _2423 = (exp2(_2677 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].z)) * _2651.z) / cbSceneParam._m0[78u].z)) + _2323;
        _2425 = _2660 * _2324;
    }
    else
    {
        _2419 = _2321;
        _2421 = _2322;
        _2423 = _2323;
        _2425 = _2324;
    }
    bool _2437 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2438 = log2(_2425);
    float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * ((_2277 + (((((_1664 * _1712.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1457) * _1728)) + _2155) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2149 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _643))) - _2277) * cbMtdParam._m0[15u].x));
    float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * ((_2280 + (((((_1664 * _1712.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1457) * _1728)) + _2157) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2151 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _643))) - _2280) * cbMtdParam._m0[15u].x));
    float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * ((_2283 + (((((_1664 * _1712.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1457) * _1728)) + _2159) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2153 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _643))) - _2283) * cbMtdParam._m0[15u].x));
    vec4 _2455 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_578, _579));
    float _2457 = _2455.x;
    float _2478 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2457)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2457))) - _572) * cbMtdParam._m0[14u].z;
    float _4325 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * cbInstanceData._m0[_618 + 6u].w;
    float _2489 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2489 * (_2437 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2489 * (_2437 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2489 * (_2437 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = _2480;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2480;
}


