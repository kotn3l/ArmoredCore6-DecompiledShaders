#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1024;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _202 = _201 * _193;
    float _203 = _201 * _194;
    float _204 = _201 * _195;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _283 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _284 = _283 * _272;
    float _285 = _283 * _273;
    float _286 = _283 * _274;
    float _294 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _295 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _309 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_8, SS_BumpMap), vec2((_294 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_295 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _317 = (_309.x * 2.0) + (-1.0);
    float _319 = (_309.y * 2.0) + (-1.0);
    float _320 = dot(vec2(_317, _319), vec2(_317, _319));
    float _3450 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))));
    float _329 = fma(_326, _209, fma(_319, _216, _317 * _202));
    float _332 = fma(_326, _210, fma(_319, _217, _317 * _203));
    float _335 = fma(_326, _211, fma(_319, _218, _317 * _204));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    float _348 = (dot(vec4(_284, _285, _286, 0.0), vec4(_339 * _329, _339 * _332, _339 * _335, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _361 = dot(vec3(_272, _273, _274), vec3(_202, _203, _204));
    float _364 = dot(vec3(_272, _273, _274), vec3(_216, _217, _218));
    float _367 = dot(vec3(_272, _273, _274), vec3(_209, _210, _211));
    float _373 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _394 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _414 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_361 * cbMtdParam._m0[12u].x) * _373) * _394) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_364 * cbMtdParam._m0[12u].x) * _373) * _394) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _437 = dot(vec4(_284, _285, _286, 0.0), vec4(_209, _210, _211, 0.0)) - cbMtdParam._m0[12u].w;
    float _3461 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _444 = exp2(log2(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _459 = (((((sin(_348) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _414.x) * cbMtdParam._m0[9u].x) * ((_444 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _468 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _414.y) * cbMtdParam._m0[9u].y) * ((_444 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_348 * 0.85000002384185791015625) + 1.0);
    float _477 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _414.z) * cbMtdParam._m0[9u].z) * ((_444 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_348 * 0.699999988079071044921875) + 1.0);
    vec4 _490 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    float _497 = (_490.x * 2.0) + (-1.0);
    float _498 = (_490.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_497, _498), vec2(_497, _498));
    float _3477 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _504 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _506 = cbMtdParam._m0[14u].w + _490.z;
    vec4 _518 = texture(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _294) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _295) + cbTextureTilingScale._m0[0u].w));
    float _522 = cbMtdParam._m0[13u].w * _518.x;
    float _540 = fma(_504, _209, fma(_498, _216, _497 * _202));
    float _543 = fma(_504, _210, fma(_498, _217, _497 * _203));
    float _546 = fma(_504, _211, fma(_498, _218, _497 * _204));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3488 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _554 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _555 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3504 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3515 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3526 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _604 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _607 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _620 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = (_620 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3537 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _645 = _642.x * TEXCOORD_1.w;
    float _646 = dot(vec3(_551, _552, _553), vec3(_284, _285, _286));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _551) - _284;
    float _654 = (_649 * _552) - _285;
    float _655 = (_649 * _553) - _286;
    float _659 = abs(dot(vec3(_284, _285, _286), vec3(_551, _552, _553)));
    float _3570 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _668 = 10.0 / (_574 + 10.0);
    float _669 = sqrt(_554);
    float _681 = exp2((_669 * 5.0) * log2(1.0 - (_660 * 0.999000012874603271484375))) / (4.0 - (_669 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _752 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _756 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _781 = _713 + _551;
        float _782 = _717 + _552;
        float _783 = _721 + _553;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _748;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _752;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _756;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_748 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_752 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_756 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_551, _552, _553), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3618 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_551, _552, _553), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3651 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_551, _552, _553), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3684 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1025 = _853;
        _1026 = _852;
        _1027 = _864;
        _1028 = _863;
        _1029 = _862;
        _1030 = _874;
        _1031 = _873;
        _1032 = _872;
        _1033 = _887;
        _1034 = _886;
        _1035 = _885;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _1024;
        _1025 = _1024;
        _1026 = _1024;
        _1027 = _1024;
        _1028 = _1024;
        _1029 = _1024;
        _1030 = _1024;
        _1031 = _1024;
        _1032 = _1024;
        _1033 = _1024;
        _1034 = _1024;
        _1035 = _1024;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1064 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1068 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1072 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1095 = _713 + _551;
        float _1096 = _717 + _552;
        float _1097 = _721 + _553;
        float _1107 = fma(_1097, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095)) - _1064;
        float _1108 = fma(_1097, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095)) - _1068;
        float _1109 = fma(_1097, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095)) - _1072;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1064 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1068 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[35u].z) + ((((((_1072 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1163 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1130.x + (-0.5));
        float _1165 = _1163 * (_1130.y + (-0.5));
        float _1166 = _1163 * (_1130.z + (-0.5));
        float _1173 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1137.x + (-0.5));
        float _1175 = _1173 * (_1137.y + (-0.5));
        float _1176 = _1173 * (_1137.z + (-0.5));
        float _1183 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1144.x + (-0.5));
        float _1185 = _1183 * (_1144.y + (-0.5));
        float _1186 = _1183 * (_1144.z + (-0.5));
        float _1193 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1151.x + (-0.5));
        float _1195 = _1193 * (_1151.y + (-0.5));
        float _1196 = _1193 * (_1151.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_551, _552, _553), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3747 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1227 + 1.0))) + _1232) * _1197;
        float _1242 = _1165 * 0.5;
        float _1243 = _1175 * 0.5;
        float _1244 = _1185 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_551, _552, _553), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3780 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1269 + 1.0))) + _1274) * _1198;
        float _1284 = _1166 * 0.5;
        float _1285 = _1176 * 0.5;
        float _1286 = _1186 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_551, _552, _553), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3813 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1311 + 1.0))) + _1316) * _1199;
        _1333 = _1166;
        _1334 = _1165;
        _1335 = _1164;
        _1336 = _1176;
        _1337 = _1175;
        _1338 = _1174;
        _1339 = _1186;
        _1340 = _1185;
        _1341 = _1184;
        _1342 = _1199;
        _1343 = _1198;
        _1344 = _1197;
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1024;
        _1334 = _1024;
        _1335 = _1024;
        _1336 = _1024;
        _1337 = _1024;
        _1338 = _1024;
        _1339 = _1024;
        _1340 = _1024;
        _1341 = _1024;
        _1342 = _1024;
        _1343 = _1024;
        _1344 = _1024;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1037)) + _1037;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1380 = fma(_1359, cbSceneParam._m0[89u].z, fma(_1358, cbSceneParam._m0[89u].y, _1357 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1359, cbSceneParam._m0[90u].z, fma(_1358, cbSceneParam._m0[90u].y, _1357 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1359, cbSceneParam._m0[91u].z, fma(_1358, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1357));
    float _1401 = _653 * 0.5;
    float _1402 = _654 * 0.5;
    float _1403 = _655 * 0.5;
    float _1404 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1407 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1410 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1444;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1417 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1023, _1027, _1030, _1033));
        float _1421 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1425 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1432 = dot(vec4(cbModelParam._m0[39u]), vec4(_1401, _1402, _1403, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1455;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1446 = dot(vec4(cbModelParam._m0[40u]), vec4(_1401, _1402, _1403, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1459 = (_1455 * cbModelParam._m0[1u].x) + (_1444 * (1.0 - cbModelParam._m0[1u].x));
    float _1469 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1469 : min(cbModelParam._m0[25u].z, _1469));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1517 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1521 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1525 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1528 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1531 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1534 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1562;
        if (_1528 > 0.0)
        {
            _1562 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1562 = frontier_phi_14_12_ladder;
        }
        float _1806;
        if (_1531 > 0.0)
        {
            _1806 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1806 = frontier_phi_23_19_ladder;
        }
        float _2044;
        if (_1534 > 0.0)
        {
            _2044 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2044 = frontier_phi_34_30_ladder;
        }
        float _2046 = isnan(_1806) ? _1562 : (isnan(_1562) ? _1806 : min(_1562, _1806));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1528) + _1517;
        float _2052 = (_2047 * _1531) + _1521;
        float _2053 = (_2047 * _1534) + _1525;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1470);
            frontier_phi_13_34_ladder = _2381.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2381.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2381.x * cbModelParam._m0[1u].y;
        }
        _1550 = frontier_phi_13_34_ladder_2;
        _1552 = frontier_phi_13_34_ladder_1;
        _1554 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1470);
        _1550 = _1538.x * cbModelParam._m0[1u].y;
        _1552 = _1538.y * cbModelParam._m0[1u].y;
        _1554 = _1538.z * cbModelParam._m0[1u].y;
    }
    float _1558 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1558 : min(cbModelParam._m0[25u].w, _1558));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1614 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1618 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1622 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1625 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1628 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1631 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1811;
        if (_1625 > 0.0)
        {
            _1811 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1811 = frontier_phi_25_21_ladder;
        }
        float _2071;
        if (_1628 > 0.0)
        {
            _2071 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2071 = frontier_phi_36_32_ladder;
        }
        float _2533;
        if (_1631 > 0.0)
        {
            _2533 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2533 = frontier_phi_47_42_ladder;
        }
        float _2535 = isnan(_2071) ? _1811 : (isnan(_1811) ? _2071 : min(_1811, _2071));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1625) + _1614;
        float _2541 = (_2536 * _1628) + _1618;
        float _2542 = (_2536 * _1631) + _1622;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1559);
            frontier_phi_22_47_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1650 = frontier_phi_22_47_ladder_2;
        _1652 = frontier_phi_22_47_ladder_1;
        _1654 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1559);
        _1650 = _1634.x * cbModelParam._m0[1u].z;
        _1652 = _1634.y * cbModelParam._m0[1u].z;
        _1654 = _1634.z * cbModelParam._m0[1u].z;
    }
    float _1666 = ((((1.0 - _681) * ((_669 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _669)) * _645;
    float _1667 = _1666 * ((cbModelParam._m0[1u].w * (_1650 - _1550)) + _1550);
    float _1668 = _1666 * ((cbModelParam._m0[1u].w * (_1652 - _1552)) + _1552);
    float _1669 = _1666 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1672 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, _1667 * cbSceneParam._m0[91u].x));
    float _1689 = _580 / cbSceneParam._m0[86u].x;
    float _1697 = (cbSceneParam._m0[88u].y * (1.0 - _554)) + cbSceneParam._m0[88u].z;
    float _3939 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1699 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 5.0;
    float _1704 = (_668 * cbMtdParam._m0[13u].z) * dot(vec3(_551, _552, _553), vec3(1.0, 0.0, 0.0));
    vec4 _1714 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1704 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1704 + _1689) * cbSceneParam._m0[86u].x, _581), _1699).w) + _1689) * cbSceneParam._m0[86u].x, _581), _1699);
    float _1730 = 1.0 - _1714.w;
    vec4 _1738 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_580, _581));
    float _1740 = _1738.w;
    float _1752 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1740);
    float _1753 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1740);
    float _1754 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1740);
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_620 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1766 = _645 + (-1.0);
    float _1769 = (cbLight._m0[_1761].x * _1766) + 1.0;
    float _1770 = (cbLight._m0[_1761].y * _1766) + 1.0;
    uint _1772 = _1760 + 4u;
    float _1783 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_551, _552, _553));
    float _1786 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    float _1787 = cbLight._m0[_1772].x * _1752;
    float _1788 = cbLight._m0[_1772].y * _1753;
    float _1789 = cbLight._m0[_1772].z * _1754;
    uint _1790 = _1760 + 5u;
    uint _1796 = _1760 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_551, _552, _553));
    float _1805 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    float _1870;
    float _1871;
    float _1872;
    if (_555 == 0.0)
    {
        float _3960 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _3971 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1824 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
        float _1826 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
        _1870 = ((cbLight._m0[_1790].x * _1805) * _1826) + ((_1787 * _1786) * _1824);
        _1871 = ((_1805 * cbLight._m0[_1790].y) * _1826) + ((_1788 * _1786) * _1824);
        _1872 = ((_1805 * cbLight._m0[_1790].z) * _1826) + ((_1789 * _1786) * _1824);
    }
    else
    {
        float _1836 = _1783 + _555;
        float _1839 = (_555 * 2.0) + 1.0;
        float _1840 = (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) / _1839;
        float _1847 = _1802 + _555;
        float _1849 = (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) / _1839;
        _1870 = (((_1849 * cbLight._m0[_1790].x) * _1805) + ((_1787 * _1840) * _1786)) * 0.3183098733425140380859375;
        _1871 = (((_1849 * cbLight._m0[_1790].y) * _1805) + ((_1788 * _1840) * _1786)) * 0.3183098733425140380859375;
        _1872 = (((_1849 * cbLight._m0[_1790].z) * _1805) + ((_1789 * _1840) * _1786)) * 0.3183098733425140380859375;
    }
    uint _1876 = _1760 + 8u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _554) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1760].x + _284;
    float _1895 = cbLight._m0[_1760].y + _285;
    float _1896 = cbLight._m0[_1760].z + _286;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1760].xyz));
    float _3992 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1908 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1909 = dot(vec3(_551, _552, _553), vec3(_1901, _1902, _1903));
    float _4014 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1901, _1902, _1903));
    float _4025 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1893 * _1893;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1893;
    float _1944 = (0.5 / (((_1908 * ((_1907 * _1933) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _1933) + _1893) * _1907))) * _1907;
    float _4036 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    uint _1962 = _1760 + 9u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _554) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1796].x + _284;
    float _1979 = cbLight._m0[_1796].y + _285;
    float _1980 = cbLight._m0[_1796].z + _286;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1796].xyz));
    float _4047 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1992 = dot(vec3(_551, _552, _553), vec3(_1985, _1986, _1987));
    float _4058 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1985, _1986, _1987));
    float _4069 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1977 * _1977;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1977;
    float _2024 = (0.5 / (((_1908 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2014) + _1977) * _1991))) * _1991;
    float _4080 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    float _2036 = (((_2013 * cbLight._m0[_1962].x) * _2026) * _1805) + ((((cbLight._m0[_1876].x * _1752) * _1932) * _1946) * _1786);
    float _2037 = (((_2013 * cbLight._m0[_1962].y) * _2026) * _1805) + ((((cbLight._m0[_1876].y * _1753) * _1932) * _1946) * _1786);
    float _2038 = (((_2013 * cbLight._m0[_1962].z) * _2026) * _1805) + ((((cbLight._m0[_1876].z * _1754) * _1932) * _1946) * _1786);
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    if (_1758.y == 0u)
    {
        float _2115 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2115;
        float _2117 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2115;
        float _2118 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2115;
        uvec4 _2130 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2131 = _2130.x;
        uint _2142 = uint((float(_2130.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2131))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2131)));
        float _2152 = (log2(_2118 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2153 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        uint _2156 = uint(isnan(14.0) ? _2153 : (isnan(_2153) ? 14.0 : min(_2153, 14.0)));
        uvec4 _2161 = texelFetch(g_lightClusterGridBuffer, int(((_2156 << 2u) + (_2142 << 6u)) >> 2u));
        uint _2162 = _2161.x;
        uint _2163 = _2130.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2163 >> 4u) & 15u)) + 4294967295u) & _2162) == 0u) || ((_2163 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            uint _2597 = 0u;
            uint _2606;
            bool _2607;
            for (;;)
            {
                _2606 = texelFetch(g_lightClassification, int((((_2156 << 5u) + (_2142 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                _2607 = _2606 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2607)
                {
                    frontier_phi_56_pred = _2591;
                    frontier_phi_56_pred_1 = _2596;
                    frontier_phi_56_pred_2 = _2595;
                    frontier_phi_56_pred_3 = _2594;
                    frontier_phi_56_pred_4 = _2593;
                    frontier_phi_56_pred_5 = _2592;
                }
                else
                {
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    uint _2742;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2606;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    for (;;)
                    {
                        uint _2746 = uint(findLSB(_2742)) + (_2597 << 5u);
                        uint _2743 = (_2742 + 4294967295u) & _2742;
                        uint _2748 = _2746 * 48u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2768 = (_2746 * 48u) + 4u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        float _2782 = _2781.x;
                        float _2783 = _2781.y;
                        float _2784 = _2781.z;
                        uint _2787 = (_2746 * 48u) + 8u;
                        vec3 _2798 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x));
                        uint _2803 = (_2746 * 48u) + 12u;
                        vec2 _2811 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x));
                        float _2817 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
                        float _2818 = _2817 * _2116;
                        float _2819 = _2817 * _2117;
                        float _2820 = _2817 * _2118;
                        float _2821 = _2762.x - _2116;
                        float _2822 = _2762.y - _2117;
                        float _2823 = _2762.z - _2118;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_601, _604, _607), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2762.w);
                        float _4101 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2838 = sqrt(_2824) * _2781.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2843 = 1.0 - _2842;
                        float _2845 = (_2843 * _2843) * _555;
                        float _2848 = ((_2843 * _2831) + _2842) + _2845;
                        float _2853 = _2838 * _2838;
                        float _2857 = ((isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))) * _2837) / (((_2845 * 2.0) + 1.0) * ((_2853 * 0.699999988079071044921875) + 1.0));
                        float _2861 = dot(vec3(_2828, _2829, _2830), vec3(_2818, _2819, _2820));
                        float _4117 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2868 = dot(vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820), vec3(_601, _604, _607)) + 1.0;
                        float _2870 = (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * 0.5;
                        float _2878 = ((_2870 * _2870) * _2811.x) * exp2((_2811.y * 32.0) * log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))));
                        float _2880 = _555 / (_555 + 1.0);
                        float _2896 = (-0.0) - _2116;
                        float _2897 = (-0.0) - _2117;
                        float _2898 = (-0.0) - _2118;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2913 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2914 = 1.0 - _669;
                        float _2921 = sqrt(1.0 - ((1.0 - (_2914 * _2914)) * (1.0 - (_2913 * _2913))));
                        float _2922 = _2921 * _2921;
                        float _2923 = _2922 * _2922;
                        float _2924 = _2903 + _2828;
                        float _2925 = _2904 + _2829;
                        float _2926 = _2905 + _2830;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2934 = dot(vec3(_601, _604, _607), vec3(_2903, _2904, _2905));
                        float _4133 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2938 = dot(vec3(_601, _604, _607), vec3(_2930 * _2924, _2930 * _2925, _2930 * _2926));
                        float _4144 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2945 = ((_2941 * _2941) * (_2923 + (-1.0))) + 1.0;
                        float _2946 = _2841 * _2922;
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2831) + _2947;
                        float _4155 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2952 = 1.0 - _2922;
                        float _2962 = (0.5 / (((_2951 * ((_2937 * _2952) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2951 * _2952) + _2922) * _2937))) * _2951;
                        float _4166 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2973 = (((_2923 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2945 * _2945) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2671 = (((((_2782 * 0.3183098733425140380859375) * _2880) * _2878) + _2782) * _2857) + _2739;
                        _2672 = (((((_2783 * 0.3183098733425140380859375) * _2880) * _2878) + _2783) * _2857) + _2740;
                        _2673 = (((((_2784 * 0.3183098733425140380859375) * _2880) * _2878) + _2784) * _2857) + _2741;
                        _2668 = (_2973 * _2798.x) + _2736;
                        _2669 = (_2973 * _2798.y) + _2737;
                        _2670 = (_2973 * _2798.z) + _2738;
                        if (_2743 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2743;
                        }
                    }
                    frontier_phi_56_pred = _2668;
                    frontier_phi_56_pred_1 = _2673;
                    frontier_phi_56_pred_2 = _2672;
                    frontier_phi_56_pred_3 = _2671;
                    frontier_phi_56_pred_4 = _2670;
                    frontier_phi_56_pred_5 = _2669;
                }
                _2391 = frontier_phi_56_pred;
                _2401 = frontier_phi_56_pred_1;
                _2399 = frontier_phi_56_pred_2;
                _2397 = frontier_phi_56_pred_3;
                _2395 = frontier_phi_56_pred_4;
                _2393 = frontier_phi_56_pred_5;
                uint _2598 = _2597 + 1u;
                if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2591 = _2391;
                    _2592 = _2393;
                    _2593 = _2395;
                    _2594 = _2397;
                    _2595 = _2399;
                    _2596 = _2401;
                    _2597 = _2598;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((4294967295u << _2407) & _2162) == 0u)
        {
            _2559 = _2390;
            _2561 = _2392;
            _2563 = _2394;
            _2565 = _2396;
            _2567 = _2398;
            _2569 = _2400;
        }
        else
        {
            float _2584 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
            float _2585 = _2584 * _2116;
            float _2586 = _2584 * _2117;
            float _2587 = _2584 * _2118;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2719 = _2390;
                float _2720 = _2392;
                float _2721 = _2394;
                float _2722 = _2396;
                float _2723 = _2398;
                float _2724 = _2400;
                uint _2725 = _2407;
                uint _2734;
                bool _2735;
                for (;;)
                {
                    _2734 = texelFetch(g_lightClassification, int((((_2156 << 5u) + (_2142 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                    _2735 = _2734 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2735)
                    {
                        frontier_phi_62_pred = _2724;
                        frontier_phi_62_pred_1 = _2723;
                        frontier_phi_62_pred_2 = _2722;
                        frontier_phi_62_pred_3 = _2721;
                        frontier_phi_62_pred_4 = _2720;
                        frontier_phi_62_pred_5 = _2719;
                    }
                    else
                    {
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _2991 = _2719;
                        float _2992 = _2720;
                        float _2993 = _2721;
                        float _2994 = _2722;
                        float _2995 = _2723;
                        float _2996 = _2724;
                        uint _2997 = _2734;
                        uint _2998;
                        vec4 _3023;
                        float _3024;
                        vec4 _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        vec3 _3054;
                        vec2 _3063;
                        vec4 _3078;
                        vec4 _3094;
                        float _3141;
                        bool _3142;
                        for (;;)
                        {
                            uint _3008 = ((_2725 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2997));
                            _2998 = (_2997 + 4294967295u) & _2997;
                            uint _3010 = _3008 * 40u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3024 = _3023.w;
                            uint _3026 = (_3008 * 40u) + 4u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3040 = _3039.x;
                            _3041 = _3039.y;
                            _3042 = _3039.z;
                            uint _3044 = (_3008 * 40u) + 8u;
                            _3054 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x));
                            uint _3056 = (_3008 * 40u) + 12u;
                            _3063 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x));
                            uint _3065 = (_3008 * 40u) + 16u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3081 = (_3008 * 40u) + 20u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3097 = (_3008 * 40u) + 24u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3116 = (_3008 * 40u) + 28u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3141 = fma(_2118, _3129.z, fma(_2117, _3129.y, _3129.x * _2116)) + _3129.w;
                            _3142 = !((fma(_2118, _3110.z, fma(_2117, _3110.y, _3110.x * _2116)) + _3110.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3142)
                            {
                                float _3168 = _3023.x - _2116;
                                float _3169 = _3023.y - _2117;
                                float _3170 = _3023.z - _2118;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3024 * _3024));
                                float _4177 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3186 = sqrt(_3171) * _3039.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3190 = 1.0 - _3189;
                                float _3192 = (_3190 * _3190) * _555;
                                float _3195 = ((_3190 * dot(vec3(_3175, _3176, _3177), vec3(_601, _604, _607))) + _3189) + _3192;
                                float _3200 = _3186 * _3186;
                                float _3205 = (fma(_2118, _3078.z, fma(_2117, _3078.y, _3078.x * _2116)) + _3078.w) / _3141;
                                float _3206 = (fma(_2118, _3094.z, fma(_2117, _3094.y, _3094.x * _2116)) + _3094.w) / _3141;
                                float _3210 = 1.0 - dot(vec2(_3205, _3206), vec2(_3205, _3206));
                                float _4193 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3212 = _3211 * (((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3182) / (((_3192 * 2.0) + 1.0) * ((_3200 * 0.699999988079071044921875) + 1.0)));
                                float _3213 = (-0.0) - _2585;
                                float _3214 = (-0.0) - _2586;
                                float _3215 = (-0.0) - _2587;
                                float _3216 = dot(vec3(_3175, _3176, _3177), vec3(_2585, _2586, _2587));
                                float _4204 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3223 = dot(vec3(_3213, _3214, _3215), vec3(_601, _604, _607)) + 1.0;
                                float _3225 = (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * 0.5;
                                float _3232 = ((_3225 * _3225) * _3063.x) * exp2((_3063.y * 32.0) * log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))));
                                float _3234 = _555 / (_555 + 1.0);
                                float _3255 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                                float _3256 = 1.0 - _669;
                                float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                                float _3264 = _3263 * _3263;
                                float _3265 = _3264 * _3264;
                                float _3266 = _3175 - _2585;
                                float _3267 = _3176 - _2586;
                                float _3268 = _3177 - _2587;
                                float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                                float _3276 = dot(vec3(_601, _604, _607), vec3(_3213, _3214, _3215));
                                float _4220 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3280 = dot(vec3(_601, _604, _607), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                                float _4231 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                                float _3288 = _3188 * _3264;
                                float _3289 = _3288 * _3288;
                                float _3295 = ((1.0 - _3289) * dot(vec3(_601, _604, _607), vec3(_3175, _3176, _3177))) + _3289;
                                float _4242 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3297 = 1.0 - _3264;
                                float _3307 = (0.5 / (((_3296 * ((_3279 * _3297) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3264) * _3279))) * _3296;
                                float _4253 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3317 = (_3211 * _3182) * (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) / ((_3287 * _3287) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3042 * 0.3183098733425140380859375) * _3234) * _3232) + _3042) * _3212;
                                frontier_phi_68_pred_1 = ((((_3041 * 0.3183098733425140380859375) * _3234) * _3232) + _3041) * _3212;
                                frontier_phi_68_pred_2 = ((((_3040 * 0.3183098733425140380859375) * _3234) * _3232) + _3040) * _3212;
                                frontier_phi_68_pred_3 = _3317 * _3054.z;
                                frontier_phi_68_pred_4 = _3317 * _3054.y;
                                frontier_phi_68_pred_5 = _3317 * _3054.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3326 = frontier_phi_68_pred;
                            _3325 = frontier_phi_68_pred_1;
                            _3324 = frontier_phi_68_pred_2;
                            _3323 = frontier_phi_68_pred_3;
                            _3322 = frontier_phi_68_pred_4;
                            _3321 = frontier_phi_68_pred_5;
                            _2981 = _3324 + _2994;
                            _2982 = _3325 + _2995;
                            _2983 = _3326 + _2996;
                            _2978 = _3321 + _2991;
                            _2979 = _3322 + _2992;
                            _2980 = _3323 + _2993;
                            if (_2998 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2998;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2983;
                        frontier_phi_62_pred_1 = _2982;
                        frontier_phi_62_pred_2 = _2981;
                        frontier_phi_62_pred_3 = _2980;
                        frontier_phi_62_pred_4 = _2979;
                        frontier_phi_62_pred_5 = _2978;
                    }
                    _2570 = frontier_phi_62_pred;
                    _2568 = frontier_phi_62_pred_1;
                    _2566 = frontier_phi_62_pred_2;
                    _2564 = frontier_phi_62_pred_3;
                    _2562 = frontier_phi_62_pred_4;
                    _2560 = frontier_phi_62_pred_5;
                    uint _2726 = _2725 + 1u;
                    if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2719 = _2560;
                        _2720 = _2562;
                        _2721 = _2564;
                        _2722 = _2566;
                        _2723 = _2568;
                        _2724 = _2570;
                        _2725 = _2726;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2570;
                frontier_phi_49_50_ladder_1 = _2566;
                frontier_phi_49_50_ladder_2 = _2568;
                frontier_phi_49_50_ladder_3 = _2564;
                frontier_phi_49_50_ladder_4 = _2562;
                frontier_phi_49_50_ladder_5 = _2560;
            }
            else
            {
                frontier_phi_49_50_ladder = _2400;
                frontier_phi_49_50_ladder_1 = _2396;
                frontier_phi_49_50_ladder_2 = _2398;
                frontier_phi_49_50_ladder_3 = _2394;
                frontier_phi_49_50_ladder_4 = _2392;
                frontier_phi_49_50_ladder_5 = _2390;
            }
            _2559 = frontier_phi_49_50_ladder_5;
            _2561 = frontier_phi_49_50_ladder_4;
            _2563 = frontier_phi_49_50_ladder_3;
            _2565 = frontier_phi_49_50_ladder_1;
            _2567 = frontier_phi_49_50_ladder_2;
            _2569 = frontier_phi_49_50_ladder;
        }
        float _2574 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2175 = (_2574 * _2565) + _1870;
        _2177 = (_2574 * _2567) + _1871;
        _2179 = (_2574 * _2569) + _1872;
        _2181 = ((_2559 * 0.039999999105930328369140625) * _2574) + _2036;
        _2183 = ((_2561 * 0.039999999105930328369140625) * _2574) + _2037;
        _2185 = ((_2563 * 0.039999999105930328369140625) * _2574) + _2038;
    }
    else
    {
        _2175 = _1870;
        _2177 = _1871;
        _2179 = _1872;
        _2181 = _2036;
        _2183 = _2037;
        _2185 = _2038;
    }
    float _2205 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2206 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2207 = cbSceneParam._m0[86u].x * ((_580 / cbSceneParam._m0[86u].x) + ((_668 * cbMtdParam._m0[13u].y) * dot(vec3(_551, _552, _553), vec3(_202, _203, _204))));
    float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
    float _2209 = isnan(_2206) ? _581 : (isnan(_581) ? _2206 : min(_581, _2206));
    vec4 _2211 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2208, _2209), 0.0);
    float _2213 = _2211.x;
    bool _2234 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2213)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2213))) > _574;
    float _2235 = _2234 ? _2208 : _580;
    float _2236 = _2234 ? _2209 : _581;
    vec4 _2238 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2235, _2236));
    vec4 _2243 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2235, _2236));
    float _2245 = _2243.x;
    float _2265 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2245)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2245))) - _574;
    bool _2275 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2279 = (isnan(_2265) ? 0.0 : (isnan(0.0) ? _2265 : max(0.0, _2265))) * (-1.44269502162933349609375);
    float _4284 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4295 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4306 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _2306 = 0.959999978542327880859375 - (exp2(log2(1.0 - _660) * 5.0) * 0.959999978542327880859375);
    float _2309 = ((_2238.x * _2306) * exp2(_2279 * (_2275 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2312 = ((_2238.y * _2306) * exp2(_2279 * (_2275 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2315 = ((_2238.z * _2306) * exp2(_2279 * (_2275 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2336 = _580 / cbSceneParam._m0[86u].x;
    float _2337 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2416 = _2415 / _574;
        float _2427 = _2416 * _272;
        float _2428 = _273 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2430 = _2416 * _274;
        float _2432 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2428;
        float _2440 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2449 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2681;
        if (abs((_2429 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2681 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2449 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2620 = 1.0 / cbSceneParam._m0[80u].x;
            float _2621 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2622 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            _2681 = ((abs(_2440 / _2429) * cbSceneParam._m0[80u].y) * ((((_2631 - _2632) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))))) * _2620)) - ((exp2(_2449 * _2631) - exp2(_2449 * _2632)) * _2620))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2683 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2692 = exp2((_2681 * (-1.44269502162933349609375)) * (1.0 - _2683.w));
        float _2693 = log2(_2692);
        float _2709 = log2(_2356);
        _2451 = (exp2(_2709 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].x)) * _2683.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2453 = (exp2(_2709 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].y)) * _2683.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2455 = (exp2(_2709 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].z)) * _2683.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2457 = _2692 * _2356;
    }
    else
    {
        _2451 = _2353;
        _2453 = _2354;
        _2455 = _2355;
        _2457 = _2356;
    }
    bool _2469 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2470 = log2(_2457);
    float _2477 = exp2(_2470 * cbSceneParam._m0[78u].x) * ((_2309 + (((((_1666 * _1714.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1459) * _1730)) + _2181) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2175 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _645))) - _2309) * cbMtdParam._m0[15u].x));
    float _2478 = exp2(_2470 * cbSceneParam._m0[78u].y) * ((_2312 + (((((_1666 * _1714.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1459) * _1730)) + _2183) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2177 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _645))) - _2312) * cbMtdParam._m0[15u].x));
    float _2479 = exp2(_2470 * cbSceneParam._m0[78u].z) * ((_2315 + (((((_1666 * _1714.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1459) * _1730)) + _2185) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2179 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _645))) - _2315) * cbMtdParam._m0[15u].x));
    vec4 _2487 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_580, _581));
    float _2489 = _2487.x;
    float _2510 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2489)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2489))) - _574) * cbMtdParam._m0[14u].z;
    float _4357 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2512 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * cbInstanceData._m0[_620 + 6u].w;
    float _2521 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2521 * (_2469 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
    SV_Target.y = _2521 * (_2469 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
    SV_Target.z = _2521 * (_2469 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.w = _2512;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2512;
}


