#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _777;
float _2985;
float _2986;
float _2987;
float _2988;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.w;
    float _204 = _197.x * cbMtdParam._m0[9u].x;
    float _205 = _197.y * cbMtdParam._m0[9u].y;
    float _206 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _228 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _236 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _237 = _236 * _175;
    float _238 = _236 * _176;
    float _239 = _236 * _177;
    float _2997 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3008 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3019 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _259 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _300 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _310 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _300);
    float _311 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _300);
    float _312 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _300);
    float _316 = inversesqrt(dot(vec3(_310, _311, _312), vec3(_310, _311, _312)));
    float _317 = _310 * _316;
    float _318 = _311 * _316;
    float _319 = _312 * _316;
    vec4 _324 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _326 = _324.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _456 = sqrt(((_310 * _310) + (_311 * _311)) + (_312 * _312));
        float _462 = (cbMatDynParam._m0[5u].x * _456) + cbMatDynParam._m0[5u].y;
        float _3030 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
        float _463 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
        float _467 = (cbMatDynParam._m0[5u].z * _456) + cbMatDynParam._m0[5u].w;
        float _3041 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0))) - _463)) + _463) < ((_326 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _338 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _339 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _359 = fma(_239, cbSceneParam._m0[5u].z, fma(_238, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _237));
    float _362 = fma(_239, cbSceneParam._m0[6u].z, fma(_238, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _237));
    float _365 = fma(_239, cbSceneParam._m0[7u].z, fma(_238, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _237));
    uint _378 = uint(roundEven(NORMAL.w)) * 13u;
    uint _380 = _378 + 9u;
    uint _381 = _380 + uint(cbMatDynParam._m0[0u].w);
    float _387 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0)))) * cbInstanceData._m0[_381].x;
    float _388 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0)))) * cbInstanceData._m0[_381].y;
    float _389 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_381].z;
    float _3052 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
    float _3063 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    float _3074 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    vec4 _401 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _338, cbSceneParam._m0[86u].y * _339));
    float _404 = _401.x * TEXCOORD.z;
    float _405 = dot(vec3(_237, _238, _239), vec3(_317, _318, _319));
    float _408 = _405 * 2.0;
    float _413 = (_408 * _237) - _317;
    float _414 = (_408 * _238) - _318;
    float _415 = (_408 * _239) - _319;
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _776;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _501 = fma(_445, cbModelParam._m0[26u].z, fma(_441, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _437));
        float _505 = fma(_445, cbModelParam._m0[27u].z, fma(_441, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _437));
        float _509 = fma(_445, cbModelParam._m0[28u].z, fma(_441, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _437));
        float _534 = _437 + _237;
        float _535 = _441 + _238;
        float _536 = _445 + _239;
        float _546 = fma(_536, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534)) - _501;
        float _547 = fma(_536, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534)) - _505;
        float _548 = fma(_536, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534)) - _509;
        float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
        float _565 = ((_552 * _546) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_501 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_552 * _547) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_505 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _567 = ((_552 * _548) / cbModelParam._m0[34u].z) + ((((((_509 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        float _604 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_570.x + (-0.5));
        float _606 = _604 * (_570.y + (-0.5));
        float _607 = _604 * (_570.z + (-0.5));
        float _614 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_577.x + (-0.5));
        float _616 = _614 * (_577.y + (-0.5));
        float _617 = _614 * (_577.z + (-0.5));
        float _624 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_584.x + (-0.5));
        float _626 = _624 * (_584.y + (-0.5));
        float _627 = _624 * (_584.z + (-0.5));
        float _634 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_591.x + (-0.5));
        float _636 = _634 * (_591.y + (-0.5));
        float _637 = _634 * (_591.z + (-0.5));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = _605 * 0.5;
        float _642 = _615 * 0.5;
        float _643 = _625 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _658 = (dot(vec3(_237, _238, _239), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _3100 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _668 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3111 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _3122 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (_670 + 1.0))) + _675) * _638;
        float _685 = _606 * 0.5;
        float _686 = _616 * 0.5;
        float _687 = _626 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _701 = (dot(vec3(_237, _238, _239), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _710 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3155 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_712 + 1.0))) + _717) * _639;
        float _727 = _607 * 0.5;
        float _728 = _617 * 0.5;
        float _729 = _627 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_237, _238, _239), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3166 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3177 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3188 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0))) * (_754 + 1.0))) + _759) * _640;
        _776 = _607;
        _778 = _606;
        _779 = _605;
        _780 = _617;
        _781 = _616;
        _782 = _615;
        _783 = _627;
        _784 = _626;
        _785 = _625;
        _786 = _640;
        _787 = _639;
        _788 = _638;
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
    }
    else
    {
        _776 = _777;
        _778 = _777;
        _779 = _777;
        _780 = _777;
        _781 = _777;
        _782 = _777;
        _783 = _777;
        _784 = _777;
        _785 = _777;
        _786 = _777;
        _787 = _777;
        _788 = _777;
        _789 = 0.0;
        _790 = 0.0;
        _791 = 0.0;
    }
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = fma(_445, cbModelParam._m0[30u].z, fma(_441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _437));
        float _824 = fma(_445, cbModelParam._m0[31u].z, fma(_441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _437));
        float _828 = fma(_445, cbModelParam._m0[32u].z, fma(_441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _437));
        float _851 = _437 + _237;
        float _852 = _441 + _238;
        float _853 = _445 + _239;
        float _863 = fma(_853, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851)) - _820;
        float _864 = fma(_853, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851)) - _824;
        float _865 = fma(_853, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851)) - _828;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_820 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_824 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[35u].z) + ((((((_828 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _919 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_886.x + (-0.5));
        float _921 = _919 * (_886.y + (-0.5));
        float _922 = _919 * (_886.z + (-0.5));
        float _929 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_893.x + (-0.5));
        float _931 = _929 * (_893.y + (-0.5));
        float _932 = _929 * (_893.z + (-0.5));
        float _939 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_900.x + (-0.5));
        float _941 = _939 * (_900.y + (-0.5));
        float _942 = _939 * (_900.z + (-0.5));
        float _949 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_907.x + (-0.5));
        float _951 = _949 * (_907.y + (-0.5));
        float _952 = _949 * (_907.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_237, _238, _239), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3229 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3240 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3251 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * (_983 + 1.0))) + _988) * _953;
        float _998 = _921 * 0.5;
        float _999 = _931 * 0.5;
        float _1000 = _941 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_237, _238, _239), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3262 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3273 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3284 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * (_1025 + 1.0))) + _1030) * _954;
        float _1040 = _922 * 0.5;
        float _1041 = _932 * 0.5;
        float _1042 = _942 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_237, _238, _239), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3295 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3306 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3317 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * (_1067 + 1.0))) + _1072) * _955;
        _1089 = _922;
        _1090 = _921;
        _1091 = _920;
        _1092 = _932;
        _1093 = _931;
        _1094 = _930;
        _1095 = _942;
        _1096 = _941;
        _1097 = _940;
        _1098 = _955;
        _1099 = _954;
        _1100 = _953;
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _777;
        _1090 = _777;
        _1091 = _777;
        _1092 = _777;
        _1093 = _777;
        _1094 = _777;
        _1095 = _777;
        _1096 = _777;
        _1097 = _777;
        _1098 = _777;
        _1099 = _777;
        _1100 = _777;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _790)) + _790;
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1136 = fma(_1115, cbSceneParam._m0[89u].z, fma(_1114, cbSceneParam._m0[89u].y, _1113 * cbSceneParam._m0[89u].x));
    float _1139 = fma(_1115, cbSceneParam._m0[90u].z, fma(_1114, cbSceneParam._m0[90u].y, _1113 * cbSceneParam._m0[90u].x));
    float _1142 = fma(_1115, cbSceneParam._m0[91u].z, fma(_1114, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1113));
    float _1157 = _413 * 0.5;
    float _1158 = _414 * 0.5;
    float _1159 = _415 * 0.5;
    float _1160 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1163 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1166 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1200;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1173 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_776, _780, _783, _786));
        float _1177 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_778, _781, _784, _787));
        float _1181 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_779, _782, _785, _788));
        float _1188 = dot(vec4(cbModelParam._m0[39u]), vec4(_1157, _1158, _1159, 1.0));
        _1200 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1188) ? 0.0 : (isnan(0.0) ? _1188 : max(0.0, _1188))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1200 = 1.0;
    }
    float _1211;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1202 = dot(vec4(cbModelParam._m0[40u]), vec4(_1157, _1158, _1159, 1.0));
        _1211 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1211 = 1.0;
    }
    float _1215 = (_1211 * cbModelParam._m0[1u].x) + (_1200 * (1.0 - cbModelParam._m0[1u].x));
    float _1224 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1306;
    float _1308;
    float _1310;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1273 = fma(_445, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437)) + cbModelParam._m0[13u].w;
        float _1277 = fma(_445, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437)) + cbModelParam._m0[14u].w;
        float _1281 = fma(_445, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437)) + cbModelParam._m0[15u].w;
        float _1284 = fma(_415, cbModelParam._m0[13u].z, fma(_414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413));
        float _1287 = fma(_415, cbModelParam._m0[14u].z, fma(_414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413));
        float _1290 = fma(_415, cbModelParam._m0[15u].z, fma(_414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413));
        float _1316;
        if (_1284 > 0.0)
        {
            _1316 = abs((1.0 - _1273) / _1284);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1273 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1316 = frontier_phi_19_17_ladder;
        }
        float _1523;
        if (_1287 > 0.0)
        {
            _1523 = abs((1.0 - _1277) / _1287);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1287 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1277 + 1.0) / _1287);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1523 = frontier_phi_28_24_ladder;
        }
        float _1712;
        if (_1290 > 0.0)
        {
            _1712 = abs((1.0 - _1281) / _1290);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1281 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1712 = frontier_phi_40_35_ladder;
        }
        float _1714 = isnan(_1523) ? _1316 : (isnan(_1316) ? _1523 : min(_1316, _1523));
        float _1715 = isnan(_1712) ? _1714 : (isnan(_1714) ? _1712 : min(_1714, _1712));
        float _1719 = (_1715 * _1284) + _1273;
        float _1720 = (_1715 * _1287) + _1277;
        float _1721 = (_1715 * _1290) + _1281;
        float _1722 = _1715 * 9.9999997473787516355514526367188e-05;
        float _1724 = (-1.0) - _1722;
        float _1726 = _1722 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1721 > _1726) || ((_1721 < _1724) || ((_1720 > _1726) || ((_1720 < _1724) || ((_1719 < _1724) || (_1719 > _1726))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1721, cbModelParam._m0[9u].z, fma(_1720, cbModelParam._m0[9u].y, _1719 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1721, cbModelParam._m0[10u].z, fma(_1720, cbModelParam._m0[10u].y, _1719 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1721, cbModelParam._m0[11u].z, fma(_1720, cbModelParam._m0[11u].y, _1719 * cbModelParam._m0[11u].x))), _1224);
            frontier_phi_18_40_ladder = _1818.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1818.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1818.x * cbModelParam._m0[1u].y;
        }
        _1306 = frontier_phi_18_40_ladder_2;
        _1308 = frontier_phi_18_40_ladder_1;
        _1310 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_413, _414, _415), _1224);
        _1306 = _1294.x * cbModelParam._m0[1u].y;
        _1308 = _1294.y * cbModelParam._m0[1u].y;
        _1310 = _1294.z * cbModelParam._m0[1u].y;
    }
    float _1313 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1370 = fma(_445, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437)) + cbModelParam._m0[21u].w;
        float _1374 = fma(_445, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437)) + cbModelParam._m0[22u].w;
        float _1378 = fma(_445, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437)) + cbModelParam._m0[23u].w;
        float _1381 = fma(_415, cbModelParam._m0[21u].z, fma(_414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413));
        float _1384 = fma(_415, cbModelParam._m0[22u].z, fma(_414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413));
        float _1387 = fma(_415, cbModelParam._m0[23u].z, fma(_414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413));
        float _1528;
        if (_1381 > 0.0)
        {
            _1528 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1528 = frontier_phi_30_26_ladder;
        }
        float _1739;
        if (_1384 > 0.0)
        {
            _1739 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1739 = frontier_phi_42_37_ladder;
        }
        float _1890;
        if (_1387 > 0.0)
        {
            _1890 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1890 = frontier_phi_51_48_ladder;
        }
        float _1892 = isnan(_1739) ? _1528 : (isnan(_1528) ? _1739 : min(_1528, _1739));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1381) + _1370;
        float _1898 = (_1893 * _1384) + _1374;
        float _1899 = (_1893 * _1387) + _1378;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1900;
        float _1903 = _1900 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1899 > _1903) || ((_1899 < _1901) || ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 < _1901) || (_1897 > _1903))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1899, cbModelParam._m0[17u].z, fma(_1898, cbModelParam._m0[17u].y, _1897 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1899, cbModelParam._m0[18u].z, fma(_1898, cbModelParam._m0[18u].y, _1897 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1899, cbModelParam._m0[19u].z, fma(_1898, cbModelParam._m0[19u].y, _1897 * cbModelParam._m0[19u].x))), _1313);
            frontier_phi_27_51_ladder = _2132.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2132.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2132.x * cbModelParam._m0[1u].z;
        }
        _1406 = frontier_phi_27_51_ladder_2;
        _1408 = frontier_phi_27_51_ladder_1;
        _1410 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_413, _414, _415), _1313);
        _1406 = _1390.x * cbModelParam._m0[1u].z;
        _1408 = _1390.y * cbModelParam._m0[1u].z;
        _1410 = _1390.z * cbModelParam._m0[1u].z;
    }
    float _1422 = _404 * 0.01200000010430812835693359375;
    float _1424 = _1422 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1425 = _1422 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1426 = _1422 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1429 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, _1424 * cbSceneParam._m0[91u].x));
    uvec4 _1445 = floatBitsToUint(cbInstanceData._m0[_378 + 5u]);
    uint _1447 = _1445.x * 14u;
    uint _1448 = _1447 + 13u;
    float _1455 = _404 + (-1.0);
    float _1461 = (cbLight._m0[_1448].x * _1455) + 1.0;
    float _1462 = (cbLight._m0[_1448].y * _1455) + 1.0;
    float _1463 = (cbLight._m0[_1448].z * _1455) + 1.0;
    float _1464 = (cbLight._m0[_1448].w * _1455) + 1.0;
    uint _1465 = _1447 + 5u;
    float _1471 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
    uint _1475 = _1447 + 4u;
    float _1482 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
    uint _1486 = _1447 | 1u;
    float _1497 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_237, _238, _239));
    float _1500 = dot(vec3(cbLight._m0[_1486].xyz), vec3(_237, _238, _239));
    float _3453 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
    float _3464 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
    float _1505 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.3183098733425140380859375;
    float _1507 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.3183098733425140380859375;
    float _1514 = ((cbLight._m0[_1465].x * _1471) * _1507) + ((cbLight._m0[_1475].x * _1482) * _1505);
    float _1515 = ((_1471 * cbLight._m0[_1465].y) * _1507) + ((_1482 * cbLight._m0[_1475].y) * _1505);
    float _1516 = ((_1471 * cbLight._m0[_1465].z) * _1507) + ((_1482 * cbLight._m0[_1475].z) * _1505);
    uvec4 _1520 = floatBitsToUint(cbLight._m0[_1447 + 12u]);
    bool _1522 = _1520.x == 0u;
    float _1533;
    float _1535;
    float _1537;
    if (_1522)
    {
        _1533 = _1514;
        _1535 = _1515;
        _1537 = _1516;
    }
    else
    {
        uint _1541 = _1447 + 6u;
        float _1557 = (dot(vec3(cbLight._m0[_1447 + 2u].xyz), vec3(_237, _238, _239)) * 0.5) + 0.5;
        float _1558 = _1557 * _1557;
        float _3475 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1560 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
        _1533 = (((cbLight._m0[_1541].x * 0.3183098733425140380859375) * _1559) * _1560) + _1514;
        _1535 = (((cbLight._m0[_1541].y * 0.3183098733425140380859375) * _1559) * _1560) + _1515;
        _1537 = (((cbLight._m0[_1541].z * 0.3183098733425140380859375) * _1559) * _1560) + _1516;
    }
    bool _1540 = _1520.y == 0u;
    float _1578;
    float _1580;
    float _1582;
    if (_1540)
    {
        _1578 = _1533;
        _1580 = _1535;
        _1582 = _1537;
    }
    else
    {
        uint _1683 = _1447 + 7u;
        float _1699 = (dot(vec3(cbLight._m0[_1447 + 3u].xyz), vec3(_237, _238, _239)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3491 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1702 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
        _1578 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1533;
        _1580 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1535;
        _1582 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1537;
    }
    uint _1584 = _1447 + 8u;
    float _1590 = cbLight._m0[_1447].x + _317;
    float _1591 = cbLight._m0[_1447].y + _318;
    float _1592 = cbLight._m0[_1447].z + _319;
    float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
    float _1600 = dot(vec3(_237, _238, _239), vec3(cbLight._m0[_1447].xyz));
    float _3507 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1603 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _1604 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _1605 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_1590 * _1596, _1591 * _1596, _1592 * _1596));
    float _3529 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1616 = (exp2(log2(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1622 = (0.5 / ((_1603 + 9.9999999392252902907785028219223e-09) + _1604)) * _1603;
    float _3540 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1624 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.31831014156341552734375;
    uint _1635 = _1447 + 9u;
    float _1641 = cbLight._m0[_1486].x + _317;
    float _1642 = cbLight._m0[_1486].y + _318;
    float _1643 = cbLight._m0[_1486].z + _319;
    float _1647 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
    float _1651 = dot(vec3(_237, _238, _239), vec3(cbLight._m0[_1486].xyz));
    float _3551 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1654 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _1655 = dot(vec3(cbLight._m0[_1486].xyz), vec3(_1641 * _1647, _1642 * _1647, _1643 * _1647));
    float _3562 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1664 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1668 = (0.5 / ((_1654 + 9.9999999392252902907785028219223e-09) + _1604)) * _1654;
    float _3573 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1670 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
    float _1680 = (((_1664 * cbLight._m0[_1635].x) * _1670) * _1471) + (((_1616 * cbLight._m0[_1584].x) * _1624) * _1482);
    float _1681 = (((_1664 * cbLight._m0[_1635].y) * _1670) * _1471) + (((_1616 * cbLight._m0[_1584].y) * _1624) * _1482);
    float _1682 = (((_1664 * cbLight._m0[_1635].z) * _1670) * _1471) + (((_1616 * cbLight._m0[_1584].z) * _1624) * _1482);
    float _1744;
    float _1746;
    float _1748;
    if (_1522)
    {
        _1744 = _1680;
        _1746 = _1681;
        _1748 = _1682;
    }
    else
    {
        uint _1750 = _1447 + 10u;
        uint _1756 = _1447 + 2u;
        float _1762 = cbLight._m0[_1756].x + _317;
        float _1763 = cbLight._m0[_1756].y + _318;
        float _1764 = cbLight._m0[_1756].z + _319;
        float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
        float _1772 = dot(vec3(_237, _238, _239), vec3(cbLight._m0[_1756].xyz));
        float _3584 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1775 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1776 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_1762 * _1768, _1763 * _1768, _1764 * _1768));
        float _3595 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1789 = (0.5 / ((_1775 + 9.9999999392252902907785028219223e-09) + _1604)) * _1775;
        float _3606 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1791 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.31831014156341552734375;
        float _1792 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
        _1744 = (((_1785 * cbLight._m0[_1750].x) * _1791) * _1792) + _1680;
        _1746 = (((_1785 * cbLight._m0[_1750].y) * _1791) * _1792) + _1681;
        _1748 = (((_1785 * cbLight._m0[_1750].z) * _1791) * _1792) + _1682;
    }
    float _1827;
    float _1829;
    float _1831;
    if (_1540)
    {
        _1827 = _1744;
        _1829 = _1746;
        _1831 = _1748;
    }
    else
    {
        uint _1838 = _1447 + 11u;
        uint _1844 = _1447 + 3u;
        float _1850 = cbLight._m0[_1844].x + _317;
        float _1851 = cbLight._m0[_1844].y + _318;
        float _1852 = cbLight._m0[_1844].z + _319;
        float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
        float _1860 = dot(vec3(_237, _238, _239), vec3(cbLight._m0[_1844].xyz));
        float _3622 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1863 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1864 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_1850 * _1856, _1851 * _1856, _1852 * _1856));
        float _3633 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1873 = (exp2(log2(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1877 = (0.5 / ((_1863 + 9.9999999392252902907785028219223e-09) + _1604)) * _1863;
        float _3644 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1879 = (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.31831014156341552734375;
        float _1880 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
        _1827 = (((_1873 * cbLight._m0[_1838].x) * _1879) * _1880) + _1744;
        _1829 = (((_1873 * cbLight._m0[_1838].y) * _1879) * _1880) + _1746;
        _1831 = (((_1873 * cbLight._m0[_1838].z) * _1879) * _1880) + _1748;
    }
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    float _2024;
    if (_1445.y == 0u)
    {
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1955;
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1955;
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1955;
        uvec4 _1970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1971 = _1970.x;
        uint _1982 = uint((float(_1970.y) * floor(float(uint(cbSceneParam._m0[85u].y * _339) / _1971))) + floor(float(uint(cbSceneParam._m0[85u].x * _338) / _1971)));
        float _1992 = (log2(_1958 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1993 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        uint _1996 = uint(isnan(14.0) ? _1993 : (isnan(_1993) ? 14.0 : min(_1993, 14.0)));
        uvec4 _2001 = texelFetch(g_lightClusterGridBuffer, int(((_1996 << 2u) + (_1982 << 6u)) >> 2u));
        uint _2002 = _2001.x;
        uint _2003 = _1970.z;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        if (((((1u << ((_2003 >> 4u) & 15u)) + 4294967295u) & _2002) == 0u) || ((_2003 & 240u) == 0u))
        {
            _2137 = 0.0;
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
        }
        else
        {
            float _2138;
            float _2140;
            float _2142;
            float _2144;
            float _2146;
            float _2148;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            float _2302 = 0.0;
            uint _2303 = 0u;
            uint _2312;
            bool _2313;
            for (;;)
            {
                _2312 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2303 << 2u)) >> 2u)).x;
                _2313 = _2312 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2313)
                {
                    frontier_phi_68_pred = _2299;
                    frontier_phi_68_pred_1 = _2302;
                    frontier_phi_68_pred_2 = _2301;
                    frontier_phi_68_pred_3 = _2300;
                    frontier_phi_68_pred_4 = _2298;
                    frontier_phi_68_pred_5 = _2297;
                }
                else
                {
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    float _2447;
                    uint _2448;
                    _2442 = _2297;
                    _2443 = _2298;
                    _2444 = _2299;
                    _2445 = _2300;
                    _2446 = _2301;
                    _2447 = _2302;
                    _2448 = _2312;
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    for (;;)
                    {
                        uint _2452 = uint(findLSB(_2448)) + (_2303 << 5u);
                        uint _2449 = (_2448 + 4294967295u) & _2448;
                        uint _2454 = _2452 * 48u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 3u)).x));
                        uint _2474 = (_2452 * 48u) + 4u;
                        vec4 _2487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 3u)).x));
                        uint _2493 = (_2452 * 48u) + 8u;
                        vec3 _2504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x));
                        float _2508 = _2468.x - _1956;
                        float _2509 = _2468.y - _1957;
                        float _2510 = _2468.z - _1958;
                        float _2511 = dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510));
                        float _2514 = inversesqrt(_2511);
                        float _2523 = 1.0 - (_2511 * _2468.w);
                        float _3670 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
                        float _2524 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
                        float _2525 = sqrt(_2511) * _2487.w;
                        float _2528 = 1.39999997615814208984375 / (_2525 + 1.39999997615814208984375);
                        float _2529 = _2528 * _2528;
                        float _2532 = ((1.0 - _2529) * dot(vec3(_359, _362, _365), vec3(_2514 * _2508, _2514 * _2509, _2514 * _2510))) + _2529;
                        float _2535 = _2525 * _2525;
                        float _2539 = ((isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))) * _2524) / ((_2535 * 0.699999988079071044921875) + 1.0);
                        float _2543 = (-0.0) - _1956;
                        float _2544 = (-0.0) - _1957;
                        float _2545 = (-0.0) - _1958;
                        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
                        float _2553 = dot(vec3(_359, _362, _365), vec3(_2549 * _2543, _2549 * _2544, _2549 * _2545));
                        float _3686 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
                        float _3697 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
                        float _2557 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                        float _2561 = (0.5 / (((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) + 9.9999999392252902907785028219223e-09) + _2557)) * _2557;
                        float _3708 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2570 = (((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 3.1415927410125732421875) / ((_2535 * 2.1991131305694580078125) + 3.141590118408203125)) * _2524;
                        _2372 = (_2539 * _2487.x) + _2445;
                        _2373 = (_2539 * _2487.y) + _2446;
                        _2374 = (_2539 * _2487.z) + _2447;
                        _2369 = (_2570 * _2504.x) + _2442;
                        _2370 = (_2570 * _2504.y) + _2443;
                        _2371 = (_2570 * _2504.z) + _2444;
                        if (_2449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2442 = _2369;
                            _2443 = _2370;
                            _2444 = _2371;
                            _2445 = _2372;
                            _2446 = _2373;
                            _2447 = _2374;
                            _2448 = _2449;
                        }
                    }
                    frontier_phi_68_pred = _2371;
                    frontier_phi_68_pred_1 = _2374;
                    frontier_phi_68_pred_2 = _2373;
                    frontier_phi_68_pred_3 = _2372;
                    frontier_phi_68_pred_4 = _2370;
                    frontier_phi_68_pred_5 = _2369;
                }
                _2142 = frontier_phi_68_pred;
                _2148 = frontier_phi_68_pred_1;
                _2146 = frontier_phi_68_pred_2;
                _2144 = frontier_phi_68_pred_3;
                _2140 = frontier_phi_68_pred_4;
                _2138 = frontier_phi_68_pred_5;
                uint _2304 = _2303 + 1u;
                if (_2304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2297 = _2138;
                    _2298 = _2140;
                    _2299 = _2142;
                    _2300 = _2144;
                    _2301 = _2146;
                    _2302 = _2148;
                    _2303 = _2304;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2137 = _2138;
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
        }
        uvec4 _2151 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2152 = _2151.z;
        uint _2154 = (_2152 >> 8u) & 15u;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        float _2276;
        float _2278;
        if (((4294967295u << _2154) & _2002) == 0u)
        {
            _2268 = _2137;
            _2270 = _2139;
            _2272 = _2141;
            _2274 = _2143;
            _2276 = _2145;
            _2278 = _2147;
        }
        else
        {
            float _2293 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2154 < ((_2152 >> 12u) & 15u))
            {
                float _2269;
                float _2271;
                float _2273;
                float _2275;
                float _2277;
                float _2279;
                float _2425 = _2137;
                float _2426 = _2139;
                float _2427 = _2141;
                float _2428 = _2143;
                float _2429 = _2145;
                float _2430 = _2147;
                uint _2431 = _2154;
                uint _2440;
                bool _2441;
                for (;;)
                {
                    _2440 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2431 << 2u)) >> 2u)).x;
                    _2441 = _2440 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2441)
                    {
                        frontier_phi_79_pred = _2430;
                        frontier_phi_79_pred_1 = _2429;
                        frontier_phi_79_pred_2 = _2428;
                        frontier_phi_79_pred_3 = _2427;
                        frontier_phi_79_pred_4 = _2426;
                        frontier_phi_79_pred_5 = _2425;
                    }
                    else
                    {
                        float _2584;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2588;
                        float _2589;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2597 = _2425;
                        float _2598 = _2426;
                        float _2599 = _2427;
                        float _2600 = _2428;
                        float _2601 = _2429;
                        float _2602 = _2430;
                        uint _2603 = _2440;
                        uint _2604;
                        vec4 _2629;
                        float _2630;
                        vec4 _2645;
                        vec3 _2657;
                        vec4 _2673;
                        vec4 _2689;
                        float _2736;
                        bool _2737;
                        for (;;)
                        {
                            uint _2614 = ((_2431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2603));
                            _2604 = (_2603 + 4294967295u) & _2603;
                            uint _2616 = _2614 * 40u;
                            _2629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 3u)).x));
                            _2630 = _2629.w;
                            uint _2632 = (_2614 * 40u) + 4u;
                            _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            uint _2647 = (_2614 * 40u) + 8u;
                            _2657 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 2u)).x));
                            uint _2660 = (_2614 * 40u) + 16u;
                            _2673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 3u)).x));
                            uint _2676 = (_2614 * 40u) + 20u;
                            _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            uint _2692 = (_2614 * 40u) + 24u;
                            vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 3u)).x));
                            uint _2711 = (_2614 * 40u) + 28u;
                            vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 3u)).x));
                            _2736 = fma(_1958, _2724.z, fma(_1957, _2724.y, _2724.x * _1956)) + _2724.w;
                            _2737 = !((fma(_1958, _2705.z, fma(_1957, _2705.y, _2705.x * _1956)) + _2705.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2737)
                            {
                                float _2764 = _2629.x - _1956;
                                float _2765 = _2629.y - _1957;
                                float _2766 = _2629.z - _1958;
                                float _2767 = dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766));
                                float _2770 = inversesqrt(_2767);
                                float _2771 = _2770 * _2764;
                                float _2772 = _2770 * _2765;
                                float _2773 = _2770 * _2766;
                                float _2777 = 1.0 - (_2767 / (_2630 * _2630));
                                float _3719 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                                float _2778 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                                float _2782 = sqrt(_2767) * _2645.w;
                                float _2784 = 1.39999997615814208984375 / (_2782 + 1.39999997615814208984375);
                                float _2785 = _2784 * _2784;
                                float _2786 = 1.0 - _2785;
                                float _2788 = (_2786 * dot(vec3(_2771, _2772, _2773), vec3(_359, _362, _365))) + _2785;
                                float _2791 = _2782 * _2782;
                                float _2795 = (fma(_1958, _2673.z, fma(_1957, _2673.y, _2673.x * _1956)) + _2673.w) / _2736;
                                float _2796 = (fma(_1958, _2689.z, fma(_1957, _2689.y, _2689.x * _1956)) + _2689.w) / _2736;
                                float _2800 = 1.0 - dot(vec2(_2795, _2796), vec2(_2795, _2796));
                                float _3735 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                                float _2801 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
                                float _2802 = _2801 * (((isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))) * _2778) / ((_2791 * 0.699999988079071044921875) + 1.0));
                                float _2812 = dot(vec3(_359, _362, _365), vec3((-0.0) - (_1956 * _2293), (-0.0) - (_1957 * _2293), (-0.0) - (_1958 * _2293)));
                                float _3746 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                                float _2820 = (_2786 * dot(vec3(_359, _362, _365), vec3(_2771, _2772, _2773))) + _2785;
                                float _3757 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                                float _2821 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2825 = (0.5 / (((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) + 9.9999999392252902907785028219223e-09) + _2821)) * _2821;
                                float _3768 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2832 = (_2801 * _2778) * (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 3.1415927410125732421875) / ((_2791 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2802 * _2645.z;
                                frontier_phi_85_pred_1 = _2802 * _2645.y;
                                frontier_phi_85_pred_2 = _2802 * _2645.x;
                                frontier_phi_85_pred_3 = _2832 * _2657.z;
                                frontier_phi_85_pred_4 = _2832 * _2657.y;
                                frontier_phi_85_pred_5 = _2832 * _2657.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2841 = frontier_phi_85_pred;
                            _2840 = frontier_phi_85_pred_1;
                            _2839 = frontier_phi_85_pred_2;
                            _2838 = frontier_phi_85_pred_3;
                            _2837 = frontier_phi_85_pred_4;
                            _2836 = frontier_phi_85_pred_5;
                            _2587 = _2839 + _2600;
                            _2588 = _2840 + _2601;
                            _2589 = _2841 + _2602;
                            _2584 = _2836 + _2597;
                            _2585 = _2837 + _2598;
                            _2586 = _2838 + _2599;
                            if (_2604 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2588;
                                _2602 = _2589;
                                _2603 = _2604;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2589;
                        frontier_phi_79_pred_1 = _2588;
                        frontier_phi_79_pred_2 = _2587;
                        frontier_phi_79_pred_3 = _2586;
                        frontier_phi_79_pred_4 = _2585;
                        frontier_phi_79_pred_5 = _2584;
                    }
                    _2279 = frontier_phi_79_pred;
                    _2277 = frontier_phi_79_pred_1;
                    _2275 = frontier_phi_79_pred_2;
                    _2273 = frontier_phi_79_pred_3;
                    _2271 = frontier_phi_79_pred_4;
                    _2269 = frontier_phi_79_pred_5;
                    uint _2432 = _2431 + 1u;
                    if (_2432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2425 = _2269;
                        _2426 = _2271;
                        _2427 = _2273;
                        _2428 = _2275;
                        _2429 = _2277;
                        _2430 = _2279;
                        _2431 = _2432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2275;
                frontier_phi_60_61_ladder_1 = _2279;
                frontier_phi_60_61_ladder_2 = _2277;
                frontier_phi_60_61_ladder_3 = _2273;
                frontier_phi_60_61_ladder_4 = _2271;
                frontier_phi_60_61_ladder_5 = _2269;
            }
            else
            {
                frontier_phi_60_61_ladder = _2143;
                frontier_phi_60_61_ladder_1 = _2147;
                frontier_phi_60_61_ladder_2 = _2145;
                frontier_phi_60_61_ladder_3 = _2141;
                frontier_phi_60_61_ladder_4 = _2139;
                frontier_phi_60_61_ladder_5 = _2137;
            }
            _2268 = frontier_phi_60_61_ladder_5;
            _2270 = frontier_phi_60_61_ladder_4;
            _2272 = frontier_phi_60_61_ladder_3;
            _2274 = frontier_phi_60_61_ladder;
            _2276 = frontier_phi_60_61_ladder_2;
            _2278 = frontier_phi_60_61_ladder_1;
        }
        float _2283 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
        _2014 = (_2283 * _2274) + _1578;
        _2016 = (_2283 * _2276) + _1580;
        _2018 = (_2283 * _2278) + _1582;
        _2020 = ((_2268 * 0.039999999105930328369140625) * _2283) + _1827;
        _2022 = ((_2270 * 0.039999999105930328369140625) * _2283) + _1829;
        _2024 = ((_2272 * 0.039999999105930328369140625) * _2283) + _1831;
    }
    else
    {
        _2014 = _1578;
        _2016 = _1580;
        _2018 = _1582;
        _2020 = _1827;
        _2022 = _1829;
        _2024 = _1831;
    }
    uint _2030 = _380 + uint(cbMatDynParam._m0[0u].w);
    float _2038 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _228.x) * cbInstanceData._m0[_2030].x;
    float _2041 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _228.y) * cbInstanceData._m0[_2030].y;
    float _2044 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _228.z) * cbInstanceData._m0[_2030].z;
    float _3784 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3795 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3806 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _2061 = (((isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_2014 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _404))) + ((_2020 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1215)) * cbPerFrame._m0[3u].x)) + _2038;
    float _2063 = (_2041 + ((_2022 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1215)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_2016 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _404)));
    float _2065 = (_2044 + ((_2024 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1215)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_2018 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _404)));
    float _2066 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2067 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2068 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2074 = cbMtdParam._m0[2u].x * _2038;
    float _2075 = cbMtdParam._m0[2u].y * _2041;
    float _2076 = cbMtdParam._m0[2u].z * _2044;
    float _3832 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2078 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    uint _2079 = _378 + 6u;
    float _2087 = _338 / cbSceneParam._m0[86u].x;
    float _2088 = _339 / cbSceneParam._m0[86u].y;
    vec4 _2102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2087, _2088, (log2((isnan(cbSceneParam._m0[77u].w) ? _259 : (isnan(_259) ? cbSceneParam._m0[77u].w : min(_259, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2104 = _2102.x;
    float _2105 = _2102.y;
    float _2106 = _2102.z;
    float _2107 = _2102.w;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_259 > cbSceneParam._m0[78u].w)
    {
        float _2162 = isnan(_259) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _259 : min(cbSceneParam._m0[80u].w, _259));
        float _2163 = _2162 / _259;
        float _2174 = _2163 * _310;
        float _2175 = _311 * _2163;
        float _2176 = (-0.0) - _2175;
        float _2177 = _2163 * _312;
        float _2179 = (cbSceneParam._m0[77u].w * _2176) / _2162;
        float _2180 = _2179 + cbSceneParam._m0[79u].w;
        float _2181 = cbSceneParam._m0[79u].w - _2175;
        float _2187 = sqrt(((_2174 * _2174) + (_2175 * _2175)) + (_2177 * _2177));
        float _2190 = (1.0 - (cbSceneParam._m0[77u].w / _2162)) * _2187;
        float _2195 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2197 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2382;
        if (abs((_2176 - _2179) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2382 = ((((_2180 > 0.0) ? exp2(_2195 * _2180) : (2.0 - exp2(_2197 * _2180))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2190;
        }
        else
        {
            float _2326 = 1.0 / cbSceneParam._m0[80u].x;
            float _2327 = isnan(_2181) ? _2180 : (isnan(_2180) ? _2181 : max(_2180, _2181));
            float _2328 = isnan(_2181) ? _2180 : (isnan(_2180) ? _2181 : min(_2180, _2181));
            float _2337 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : min(_2327, 0.0));
            float _2338 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : min(_2328, 0.0));
            _2382 = ((abs(_2187 / _2176) * cbSceneParam._m0[80u].y) * ((((_2337 - _2338) * 2.0) - ((exp2(_2195 * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0)))) - exp2(_2195 * (isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0))))) * _2326)) - ((exp2(_2197 * _2337) - exp2(_2197 * _2338)) * _2326))) + (_2190 * cbSceneParam._m0[80u].z);
        }
        vec4 _2384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2087, _2088, 1.0), 0.0);
        float _2393 = exp2((_2382 * (-1.44269502162933349609375)) * (1.0 - _2384.w));
        float _2394 = log2(_2393);
        float _2410 = log2(_2107);
        _2199 = (exp2(_2410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2394 * cbSceneParam._m0[78u].x)) * _2384.x) / cbSceneParam._m0[78u].x)) + _2104;
        _2201 = (exp2(_2410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2394 * cbSceneParam._m0[78u].y)) * _2384.y) / cbSceneParam._m0[78u].y)) + _2105;
        _2203 = (exp2(_2410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2394 * cbSceneParam._m0[78u].z)) * _2384.z) / cbSceneParam._m0[78u].z)) + _2106;
        _2205 = _2393 * _2107;
    }
    else
    {
        _2199 = _2104;
        _2201 = _2105;
        _2203 = _2106;
        _2205 = _2107;
    }
    bool _2420;
    vec4 _2215;
    vec4 _2238;
    float _2240;
    float _2244;
    float _2245;
    float _2246;
    float _2249;
    float _2252;
    float _2255;
    float _2256;
    bool _2267;
    for (;;)
    {
        _2215 = cbMatDynParam._m0[0u];
        float _2217 = roundEven(_2215.y);
        bool _2218 = _2217 == 3.0;
        float _2220 = log2(_2205);
        float _2224 = exp2(_2220 * cbSceneParam._m0[78u].x);
        float _2225 = exp2(_2220 * cbSceneParam._m0[78u].y);
        float _2226 = exp2(_2220 * cbSceneParam._m0[78u].z);
        float _2227 = _2224 * _2066;
        float _2228 = _2225 * _2067;
        float _2229 = _2226 * _2068;
        float _2236 = _326 + (-0.5);
        _2238 = cbMtdParam._m0[1u];
        _2240 = _2238.y * _2236;
        float _2243 = (_2217 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2244 = _2243 * (_2218 ? _2227 : (_2227 + (cbSceneParam._m0[72u].w * _2199)));
        _2245 = _2243 * (_2218 ? _2228 : (_2228 + (cbSceneParam._m0[72u].w * _2201)));
        _2246 = _2243 * (_2218 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2203)));
        _2249 = ((_2074 * _2078) * _2224) * _2243;
        _2252 = ((_2075 * _2078) * _2225) * _2243;
        _2255 = ((_2076 * _2078) * _2226) * _2243;
        _2256 = _2236 * 0.999000012874603271484375;
        _2267 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2267)
        {
            if ((cbInstanceData._m0[_378 + 7u].x + _2256) < 0.5)
            {
                _2420 = true;
                break;
            }
        }
        uint _2361 = _380 + uint(_2215.w);
        if ((cbInstanceData._m0[_2361].w < 1.0) && ((cbInstanceData._m0[_2361].w + _2256) < 0.5))
        {
            _2420 = true;
            break;
        }
        if ((_2240 + _203) < _2238.x)
        {
            _2420 = true;
            break;
        }
        _2420 = false;
        break;
    }
    float _2575;
    if (_2420)
    {
        discard_state = true;
        _2575 = 0.0;
    }
    else
    {
        _2575 = cbInstanceData._m0[_2079].w;
    }
    SV_Target.x = _2244;
    SV_Target.y = _2245;
    SV_Target.z = _2246;
    SV_Target.w = _2575;
    SV_Target_1.x = _2249;
    SV_Target_1.y = _2252;
    SV_Target_1.z = _2255;
    SV_Target_1.w = cbInstanceData._m0[_2079].w;
    discard_exit();
}


