#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _731;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _193 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = _193.x * cbMtdParam._m0[9u].x;
    float _200 = _193.y * cbMtdParam._m0[9u].y;
    float _201 = _193.z * cbMtdParam._m0[9u].z;
    vec4 _223 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _231 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _232 = _231 * _171;
    float _233 = _231 * _172;
    float _234 = _231 * _173;
    float _2884 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _2895 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _2906 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _254 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _305 * _311;
    float _313 = _306 * _311;
    float _314 = _307 * _311;
    float _320 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _321 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _342 = fma(_234, cbSceneParam._m0[5u].z, fma(_233, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _232));
    float _345 = fma(_234, cbSceneParam._m0[6u].z, fma(_233, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _232));
    float _348 = fma(_234, cbSceneParam._m0[7u].z, fma(_233, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _232));
    uint _361 = uint(roundEven(NORMAL.w)) * 13u;
    uint _363 = _361 + 9u;
    uint _364 = _363 + uint(cbMatDynParam._m0[0u].w);
    float _370 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0)))) * cbInstanceData._m0[_364].x;
    float _371 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0)))) * cbInstanceData._m0[_364].y;
    float _372 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0)))) * cbInstanceData._m0[_364].z;
    float _2917 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
    float _2928 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
    float _2939 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    vec4 _384 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _320, cbSceneParam._m0[86u].y * _321));
    float _387 = _384.x * TEXCOORD.z;
    float _388 = dot(vec3(_232, _233, _234), vec3(_312, _313, _314));
    float _391 = _388 * 2.0;
    float _396 = (_391 * _232) - _312;
    float _397 = (_391 * _233) - _313;
    float _398 = (_391 * _234) - _314;
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _730;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _455 = fma(_428, cbModelParam._m0[26u].z, fma(_424, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _420));
        float _459 = fma(_428, cbModelParam._m0[27u].z, fma(_424, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _420));
        float _463 = fma(_428, cbModelParam._m0[28u].z, fma(_424, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _420));
        float _488 = _420 + _232;
        float _489 = _424 + _233;
        float _490 = _428 + _234;
        float _500 = fma(_490, cbModelParam._m0[26u].z, fma(_489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488)) - _455;
        float _501 = fma(_490, cbModelParam._m0[27u].z, fma(_489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488)) - _459;
        float _502 = fma(_490, cbModelParam._m0[28u].z, fma(_489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488)) - _463;
        float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
        float _519 = ((_506 * _500) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_455 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _520 = ((_506 * _501) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_459 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _521 = ((_506 * _502) / cbModelParam._m0[34u].z) + ((((((_463 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        float _558 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _559 = _558 * (_524.x + (-0.5));
        float _560 = _558 * (_524.y + (-0.5));
        float _561 = _558 * (_524.z + (-0.5));
        float _568 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _569 = _568 * (_531.x + (-0.5));
        float _570 = _568 * (_531.y + (-0.5));
        float _571 = _568 * (_531.z + (-0.5));
        float _578 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _578 * (_538.x + (-0.5));
        float _580 = _578 * (_538.y + (-0.5));
        float _581 = _578 * (_538.z + (-0.5));
        float _588 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_545.x + (-0.5));
        float _590 = _588 * (_545.y + (-0.5));
        float _591 = _588 * (_545.z + (-0.5));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _595 = _559 * 0.5;
        float _596 = _569 * 0.5;
        float _597 = _579 * 0.5;
        float _598 = dot(vec3(_595, _596, _597), vec3(_595, _596, _597));
        float _603 = (_598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_598);
        float _612 = (dot(vec3(_232, _233, _234), vec3(_603 * _595, _603 * _596, _603 * _597)) + 1.0) * 0.5;
        float _2965 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _622 = sqrt(((_596 * _596) + (_595 * _595)) + (_597 * _597)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _2976 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _624 = _623 * 2.0;
        float _628 = (1.0 - _623) / (_623 + 1.0);
        float _2987 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _629 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
        float _638 = ((((1.0 - _629) * (_624 + 2.0)) * exp2(log2(isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0))) * (_624 + 1.0))) + _629) * _592;
        float _639 = _560 * 0.5;
        float _640 = _570 * 0.5;
        float _641 = _580 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _655 = (dot(vec3(_232, _233, _234), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _2998 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _664 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _3009 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3020 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0))) * (_666 + 1.0))) + _671) * _593;
        float _681 = _561 * 0.5;
        float _682 = _571 * 0.5;
        float _683 = _581 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_232, _233, _234), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3031 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_594 + 9.9999997473787516355514526367188e-06);
        float _3042 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3053 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0))) * (_708 + 1.0))) + _713) * _594;
        _730 = _561;
        _732 = _560;
        _733 = _559;
        _734 = _571;
        _735 = _570;
        _736 = _569;
        _737 = _581;
        _738 = _580;
        _739 = _579;
        _740 = _594;
        _741 = _593;
        _742 = _592;
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0)));
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
    }
    else
    {
        _730 = _731;
        _732 = _731;
        _733 = _731;
        _734 = _731;
        _735 = _731;
        _736 = _731;
        _737 = _731;
        _738 = _731;
        _739 = _731;
        _740 = _731;
        _741 = _731;
        _742 = _731;
        _743 = 0.0;
        _744 = 0.0;
        _745 = 0.0;
    }
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _771 = fma(_428, cbModelParam._m0[30u].z, fma(_424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _420));
        float _775 = fma(_428, cbModelParam._m0[31u].z, fma(_424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _420));
        float _779 = fma(_428, cbModelParam._m0[32u].z, fma(_424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _420));
        float _802 = _420 + _232;
        float _803 = _424 + _233;
        float _804 = _428 + _234;
        float _814 = fma(_804, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802)) - _771;
        float _815 = fma(_804, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802)) - _775;
        float _816 = fma(_804, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802)) - _779;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_771 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_775 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[35u].z) + ((((((_779 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _870 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_837.x + (-0.5));
        float _872 = _870 * (_837.y + (-0.5));
        float _873 = _870 * (_837.z + (-0.5));
        float _880 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_844.x + (-0.5));
        float _882 = _880 * (_844.y + (-0.5));
        float _883 = _880 * (_844.z + (-0.5));
        float _890 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_851.x + (-0.5));
        float _892 = _890 * (_851.y + (-0.5));
        float _893 = _890 * (_851.z + (-0.5));
        float _900 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_858.x + (-0.5));
        float _902 = _900 * (_858.y + (-0.5));
        float _903 = _900 * (_858.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_232, _233, _234), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3094 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3105 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3116 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0))) * (_934 + 1.0))) + _939) * _904;
        float _949 = _872 * 0.5;
        float _950 = _882 * 0.5;
        float _951 = _892 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_232, _233, _234), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3127 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3138 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3149 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_976 + 1.0))) + _981) * _905;
        float _991 = _873 * 0.5;
        float _992 = _883 * 0.5;
        float _993 = _893 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_232, _233, _234), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3160 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3171 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3182 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (_1018 + 1.0))) + _1023) * _906;
        _1040 = _873;
        _1041 = _872;
        _1042 = _871;
        _1043 = _883;
        _1044 = _882;
        _1045 = _881;
        _1046 = _893;
        _1047 = _892;
        _1048 = _891;
        _1049 = _906;
        _1050 = _905;
        _1051 = _904;
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _731;
        _1041 = _731;
        _1042 = _731;
        _1043 = _731;
        _1044 = _731;
        _1045 = _731;
        _1046 = _731;
        _1047 = _731;
        _1048 = _731;
        _1049 = _731;
        _1050 = _731;
        _1051 = _731;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _745)) + _745;
    float _1087 = fma(_1066, cbSceneParam._m0[89u].z, fma(_1065, cbSceneParam._m0[89u].y, _1064 * cbSceneParam._m0[89u].x));
    float _1090 = fma(_1066, cbSceneParam._m0[90u].z, fma(_1065, cbSceneParam._m0[90u].y, _1064 * cbSceneParam._m0[90u].x));
    float _1093 = fma(_1066, cbSceneParam._m0[91u].z, fma(_1065, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1064));
    float _1108 = _396 * 0.5;
    float _1109 = _397 * 0.5;
    float _1110 = _398 * 0.5;
    float _1111 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1042, _1045, _1048, _1051));
    float _1114 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1117 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1151;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1124 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_730, _734, _737, _740));
        float _1128 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_732, _735, _738, _741));
        float _1132 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_733, _736, _739, _742));
        float _1139 = dot(vec4(cbModelParam._m0[39u]), vec4(_1108, _1109, _1110, 1.0));
        _1151 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1139) ? 0.0 : (isnan(0.0) ? _1139 : max(0.0, _1139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1151 = 1.0;
    }
    float _1162;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1153 = dot(vec4(cbModelParam._m0[40u]), vec4(_1108, _1109, _1110, 1.0));
        _1162 = dot(vec3(isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1153) ? 0.0 : (isnan(0.0) ? _1153 : max(0.0, _1153))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1162 = 1.0;
    }
    float _1166 = (_1162 * cbModelParam._m0[1u].x) + (_1151 * (1.0 - cbModelParam._m0[1u].x));
    float _1175 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1257;
    float _1259;
    float _1261;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1224 = fma(_428, cbModelParam._m0[13u].z, fma(_424, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _420)) + cbModelParam._m0[13u].w;
        float _1228 = fma(_428, cbModelParam._m0[14u].z, fma(_424, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _420)) + cbModelParam._m0[14u].w;
        float _1232 = fma(_428, cbModelParam._m0[15u].z, fma(_424, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _420)) + cbModelParam._m0[15u].w;
        float _1235 = fma(_398, cbModelParam._m0[13u].z, fma(_397, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _396));
        float _1238 = fma(_398, cbModelParam._m0[14u].z, fma(_397, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _396));
        float _1241 = fma(_398, cbModelParam._m0[15u].z, fma(_397, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _396));
        float _1267;
        if (_1235 > 0.0)
        {
            _1267 = abs((1.0 - _1224) / _1235);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1224 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1267 = frontier_phi_16_14_ladder;
        }
        float _1474;
        if (_1238 > 0.0)
        {
            _1474 = abs((1.0 - _1228) / _1238);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1228 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1474 = frontier_phi_25_21_ladder;
        }
        float _1663;
        if (_1241 > 0.0)
        {
            _1663 = abs((1.0 - _1232) / _1241);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1232 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1663 = frontier_phi_37_32_ladder;
        }
        float _1665 = isnan(_1474) ? _1267 : (isnan(_1267) ? _1474 : min(_1267, _1474));
        float _1666 = isnan(_1663) ? _1665 : (isnan(_1665) ? _1663 : min(_1665, _1663));
        float _1670 = (_1666 * _1235) + _1224;
        float _1671 = (_1666 * _1238) + _1228;
        float _1672 = (_1666 * _1241) + _1232;
        float _1673 = _1666 * 9.9999997473787516355514526367188e-05;
        float _1675 = (-1.0) - _1673;
        float _1677 = _1673 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1672 > _1677) || ((_1672 < _1675) || ((_1671 > _1677) || ((_1671 < _1675) || ((_1670 < _1675) || (_1670 > _1677))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1672, cbModelParam._m0[9u].z, fma(_1671, cbModelParam._m0[9u].y, _1670 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1672, cbModelParam._m0[10u].z, fma(_1671, cbModelParam._m0[10u].y, _1670 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1672, cbModelParam._m0[11u].z, fma(_1671, cbModelParam._m0[11u].y, _1670 * cbModelParam._m0[11u].x))), _1175);
            frontier_phi_15_37_ladder = _1769.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1769.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1769.x * cbModelParam._m0[1u].y;
        }
        _1257 = frontier_phi_15_37_ladder_2;
        _1259 = frontier_phi_15_37_ladder_1;
        _1261 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_396, _397, _398), _1175);
        _1257 = _1245.x * cbModelParam._m0[1u].y;
        _1259 = _1245.y * cbModelParam._m0[1u].y;
        _1261 = _1245.z * cbModelParam._m0[1u].y;
    }
    float _1264 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1357;
    float _1359;
    float _1361;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1321 = fma(_428, cbModelParam._m0[21u].z, fma(_424, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _420)) + cbModelParam._m0[21u].w;
        float _1325 = fma(_428, cbModelParam._m0[22u].z, fma(_424, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _420)) + cbModelParam._m0[22u].w;
        float _1329 = fma(_428, cbModelParam._m0[23u].z, fma(_424, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _420)) + cbModelParam._m0[23u].w;
        float _1332 = fma(_398, cbModelParam._m0[21u].z, fma(_397, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _396));
        float _1335 = fma(_398, cbModelParam._m0[22u].z, fma(_397, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _396));
        float _1338 = fma(_398, cbModelParam._m0[23u].z, fma(_397, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _396));
        float _1479;
        if (_1332 > 0.0)
        {
            _1479 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1479 = frontier_phi_27_23_ladder;
        }
        float _1690;
        if (_1335 > 0.0)
        {
            _1690 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1690 = frontier_phi_39_34_ladder;
        }
        float _1841;
        if (_1338 > 0.0)
        {
            _1841 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1841 = frontier_phi_48_45_ladder;
        }
        float _1843 = isnan(_1690) ? _1479 : (isnan(_1479) ? _1690 : min(_1479, _1690));
        float _1844 = isnan(_1841) ? _1843 : (isnan(_1843) ? _1841 : min(_1843, _1841));
        float _1848 = (_1844 * _1332) + _1321;
        float _1849 = (_1844 * _1335) + _1325;
        float _1850 = (_1844 * _1338) + _1329;
        float _1851 = _1844 * 9.9999997473787516355514526367188e-05;
        float _1852 = (-1.0) - _1851;
        float _1854 = _1851 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1850 > _1854) || ((_1850 < _1852) || ((_1849 > _1854) || ((_1849 < _1852) || ((_1848 < _1852) || (_1848 > _1854))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1850, cbModelParam._m0[17u].z, fma(_1849, cbModelParam._m0[17u].y, _1848 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1850, cbModelParam._m0[18u].z, fma(_1849, cbModelParam._m0[18u].y, _1848 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1850, cbModelParam._m0[19u].z, fma(_1849, cbModelParam._m0[19u].y, _1848 * cbModelParam._m0[19u].x))), _1264);
            frontier_phi_24_48_ladder = _2083.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2083.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2083.x * cbModelParam._m0[1u].z;
        }
        _1357 = frontier_phi_24_48_ladder_2;
        _1359 = frontier_phi_24_48_ladder_1;
        _1361 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_396, _397, _398), _1264);
        _1357 = _1341.x * cbModelParam._m0[1u].z;
        _1359 = _1341.y * cbModelParam._m0[1u].z;
        _1361 = _1341.z * cbModelParam._m0[1u].z;
    }
    float _1373 = _387 * 0.01200000010430812835693359375;
    float _1375 = _1373 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1376 = _1373 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1377 = _1373 * ((cbModelParam._m0[1u].w * (_1361 - _1261)) + _1261);
    float _1380 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, _1375 * cbSceneParam._m0[91u].x));
    uvec4 _1396 = floatBitsToUint(cbInstanceData._m0[_361 + 5u]);
    uint _1398 = _1396.x * 14u;
    uint _1399 = _1398 + 13u;
    float _1406 = _387 + (-1.0);
    float _1412 = (cbLight._m0[_1399].x * _1406) + 1.0;
    float _1413 = (cbLight._m0[_1399].y * _1406) + 1.0;
    float _1414 = (cbLight._m0[_1399].z * _1406) + 1.0;
    float _1415 = (cbLight._m0[_1399].w * _1406) + 1.0;
    uint _1416 = _1398 + 5u;
    float _1422 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
    uint _1426 = _1398 + 4u;
    float _1433 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
    uint _1437 = _1398 | 1u;
    float _1448 = dot(vec3(cbLight._m0[_1398].xyz), vec3(_232, _233, _234));
    float _1451 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_232, _233, _234));
    float _3318 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
    float _3329 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1456 = (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.3183098733425140380859375;
    float _1458 = (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * 0.3183098733425140380859375;
    float _1465 = ((cbLight._m0[_1416].x * _1422) * _1458) + ((cbLight._m0[_1426].x * _1433) * _1456);
    float _1466 = ((_1422 * cbLight._m0[_1416].y) * _1458) + ((_1433 * cbLight._m0[_1426].y) * _1456);
    float _1467 = ((_1422 * cbLight._m0[_1416].z) * _1458) + ((_1433 * cbLight._m0[_1426].z) * _1456);
    uvec4 _1471 = floatBitsToUint(cbLight._m0[_1398 + 12u]);
    bool _1473 = _1471.x == 0u;
    float _1484;
    float _1486;
    float _1488;
    if (_1473)
    {
        _1484 = _1465;
        _1486 = _1466;
        _1488 = _1467;
    }
    else
    {
        uint _1492 = _1398 + 6u;
        float _1508 = (dot(vec3(cbLight._m0[_1398 + 2u].xyz), vec3(_232, _233, _234)) * 0.5) + 0.5;
        float _1509 = _1508 * _1508;
        float _3340 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1511 = isnan(1.0) ? _1414 : (isnan(_1414) ? 1.0 : min(_1414, 1.0));
        _1484 = (((cbLight._m0[_1492].x * 0.3183098733425140380859375) * _1510) * _1511) + _1465;
        _1486 = (((cbLight._m0[_1492].y * 0.3183098733425140380859375) * _1510) * _1511) + _1466;
        _1488 = (((cbLight._m0[_1492].z * 0.3183098733425140380859375) * _1510) * _1511) + _1467;
    }
    bool _1491 = _1471.y == 0u;
    float _1529;
    float _1531;
    float _1533;
    if (_1491)
    {
        _1529 = _1484;
        _1531 = _1486;
        _1533 = _1488;
    }
    else
    {
        uint _1634 = _1398 + 7u;
        float _1650 = (dot(vec3(cbLight._m0[_1398 + 3u].xyz), vec3(_232, _233, _234)) * 0.5) + 0.5;
        float _1651 = _1650 * _1650;
        float _3356 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1653 = isnan(1.0) ? _1415 : (isnan(_1415) ? 1.0 : min(_1415, 1.0));
        _1529 = (((cbLight._m0[_1634].x * 0.3183098733425140380859375) * _1652) * _1653) + _1484;
        _1531 = (((cbLight._m0[_1634].y * 0.3183098733425140380859375) * _1652) * _1653) + _1486;
        _1533 = (((cbLight._m0[_1634].z * 0.3183098733425140380859375) * _1652) * _1653) + _1488;
    }
    uint _1535 = _1398 + 8u;
    float _1541 = cbLight._m0[_1398].x + _312;
    float _1542 = cbLight._m0[_1398].y + _313;
    float _1543 = cbLight._m0[_1398].z + _314;
    float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
    float _1551 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1398].xyz));
    float _3372 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
    float _1554 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _1555 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _1556 = dot(vec3(cbLight._m0[_1398].xyz), vec3(_1541 * _1547, _1542 * _1547, _1543 * _1547));
    float _3394 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1567 = (exp2(log2(1.0 - (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1573 = (0.5 / ((_1554 + 9.9999999392252902907785028219223e-09) + _1555)) * _1554;
    float _3405 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1575 = (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * 0.31831014156341552734375;
    uint _1586 = _1398 + 9u;
    float _1592 = cbLight._m0[_1437].x + _312;
    float _1593 = cbLight._m0[_1437].y + _313;
    float _1594 = cbLight._m0[_1437].z + _314;
    float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
    float _1602 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1437].xyz));
    float _3416 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1605 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _1606 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_1592 * _1598, _1593 * _1598, _1594 * _1598));
    float _3427 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1615 = (exp2(log2(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1619 = (0.5 / ((_1605 + 9.9999999392252902907785028219223e-09) + _1555)) * _1605;
    float _3438 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1621 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.31831014156341552734375;
    float _1631 = (((_1615 * cbLight._m0[_1586].x) * _1621) * _1422) + (((_1567 * cbLight._m0[_1535].x) * _1575) * _1433);
    float _1632 = (((_1615 * cbLight._m0[_1586].y) * _1621) * _1422) + (((_1567 * cbLight._m0[_1535].y) * _1575) * _1433);
    float _1633 = (((_1615 * cbLight._m0[_1586].z) * _1621) * _1422) + (((_1567 * cbLight._m0[_1535].z) * _1575) * _1433);
    float _1695;
    float _1697;
    float _1699;
    if (_1473)
    {
        _1695 = _1631;
        _1697 = _1632;
        _1699 = _1633;
    }
    else
    {
        uint _1701 = _1398 + 10u;
        uint _1707 = _1398 + 2u;
        float _1713 = cbLight._m0[_1707].x + _312;
        float _1714 = cbLight._m0[_1707].y + _313;
        float _1715 = cbLight._m0[_1707].z + _314;
        float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
        float _1723 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1707].xyz));
        float _3449 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1726 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1727 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1713 * _1719, _1714 * _1719, _1715 * _1719));
        float _3460 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = (exp2(log2(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1740 = (0.5 / ((_1726 + 9.9999999392252902907785028219223e-09) + _1555)) * _1726;
        float _3471 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1742 = (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.31831014156341552734375;
        float _1743 = isnan(1.0) ? _1414 : (isnan(_1414) ? 1.0 : min(_1414, 1.0));
        _1695 = (((_1736 * cbLight._m0[_1701].x) * _1742) * _1743) + _1631;
        _1697 = (((_1736 * cbLight._m0[_1701].y) * _1742) * _1743) + _1632;
        _1699 = (((_1736 * cbLight._m0[_1701].z) * _1742) * _1743) + _1633;
    }
    float _1778;
    float _1780;
    float _1782;
    if (_1491)
    {
        _1778 = _1695;
        _1780 = _1697;
        _1782 = _1699;
    }
    else
    {
        uint _1789 = _1398 + 11u;
        uint _1795 = _1398 + 3u;
        float _1801 = cbLight._m0[_1795].x + _312;
        float _1802 = cbLight._m0[_1795].y + _313;
        float _1803 = cbLight._m0[_1795].z + _314;
        float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
        float _1811 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1795].xyz));
        float _3487 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1814 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1815 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1801 * _1807, _1802 * _1807, _1803 * _1807));
        float _3498 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = (exp2(log2(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1828 = (0.5 / ((_1814 + 9.9999999392252902907785028219223e-09) + _1555)) * _1814;
        float _3509 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1830 = (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.31831014156341552734375;
        float _1831 = isnan(1.0) ? _1415 : (isnan(_1415) ? 1.0 : min(_1415, 1.0));
        _1778 = (((_1824 * cbLight._m0[_1789].x) * _1830) * _1831) + _1695;
        _1780 = (((_1824 * cbLight._m0[_1789].y) * _1830) * _1831) + _1697;
        _1782 = (((_1824 * cbLight._m0[_1789].z) * _1830) * _1831) + _1699;
    }
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    float _1973;
    float _1975;
    if (_1396.y == 0u)
    {
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1906;
        float _1908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1906;
        float _1909 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1906;
        uvec4 _1921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1922 = _1921.x;
        uint _1933 = uint((float(_1921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _321) / _1922))) + floor(float(uint(cbSceneParam._m0[85u].x * _320) / _1922)));
        float _1943 = (log2(_1909 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1944 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        uint _1947 = uint(isnan(14.0) ? _1944 : (isnan(_1944) ? 14.0 : min(_1944, 14.0)));
        uvec4 _1952 = texelFetch(g_lightClusterGridBuffer, int(((_1947 << 2u) + (_1933 << 6u)) >> 2u));
        uint _1953 = _1952.x;
        uint _1954 = _1921.z;
        float _2088;
        float _2090;
        float _2092;
        float _2094;
        float _2096;
        float _2098;
        if (((((1u << ((_1954 >> 4u) & 15u)) + 4294967295u) & _1953) == 0u) || ((_1954 & 240u) == 0u))
        {
            _2088 = 0.0;
            _2090 = 0.0;
            _2092 = 0.0;
            _2094 = 0.0;
            _2096 = 0.0;
            _2098 = 0.0;
        }
        else
        {
            float _2089;
            float _2091;
            float _2093;
            float _2095;
            float _2097;
            float _2099;
            float _2239 = 0.0;
            float _2240 = 0.0;
            float _2241 = 0.0;
            float _2242 = 0.0;
            float _2243 = 0.0;
            float _2244 = 0.0;
            uint _2245 = 0u;
            uint _2254;
            bool _2255;
            for (;;)
            {
                _2254 = texelFetch(g_lightClassification, int((((_1947 << 5u) + (_1933 << 9u)) + (_2245 << 2u)) >> 2u)).x;
                _2255 = _2254 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2255)
                {
                    frontier_phi_63_pred = _2244;
                    frontier_phi_63_pred_1 = _2243;
                    frontier_phi_63_pred_2 = _2242;
                    frontier_phi_63_pred_3 = _2241;
                    frontier_phi_63_pred_4 = _2240;
                    frontier_phi_63_pred_5 = _2239;
                }
                else
                {
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    uint _2369;
                    _2363 = _2239;
                    _2364 = _2240;
                    _2365 = _2241;
                    _2366 = _2242;
                    _2367 = _2243;
                    _2368 = _2244;
                    _2369 = _2254;
                    float _2295;
                    float _2296;
                    float _2297;
                    float _2298;
                    float _2299;
                    float _2300;
                    for (;;)
                    {
                        uint _2373 = uint(findLSB(_2369)) + (_2245 << 5u);
                        uint _2370 = (_2369 + 4294967295u) & _2369;
                        uint _2375 = _2373 * 48u;
                        vec4 _2389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2375)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 3u)).x));
                        uint _2395 = (_2373 * 48u) + 4u;
                        vec4 _2408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2395)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 3u)).x));
                        uint _2414 = (_2373 * 48u) + 8u;
                        vec3 _2425 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2414)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 2u)).x));
                        float _2429 = _2389.x - _1907;
                        float _2430 = _2389.y - _1908;
                        float _2431 = _2389.z - _1909;
                        float _2432 = dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431));
                        float _2435 = inversesqrt(_2432);
                        float _2444 = 1.0 - (_2432 * _2389.w);
                        float _3535 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2445 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
                        float _2446 = sqrt(_2432) * _2408.w;
                        float _2449 = 1.39999997615814208984375 / (_2446 + 1.39999997615814208984375);
                        float _2450 = _2449 * _2449;
                        float _2453 = ((1.0 - _2450) * dot(vec3(_342, _345, _348), vec3(_2435 * _2429, _2435 * _2430, _2435 * _2431))) + _2450;
                        float _2456 = _2446 * _2446;
                        float _2460 = ((isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0))) * _2445) / ((_2456 * 0.699999988079071044921875) + 1.0);
                        float _2464 = (-0.0) - _1907;
                        float _2465 = (-0.0) - _1908;
                        float _2466 = (-0.0) - _1909;
                        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
                        float _2474 = dot(vec3(_342, _345, _348), vec3(_2470 * _2464, _2470 * _2465, _2470 * _2466));
                        float _3551 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                        float _3562 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
                        float _2478 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                        float _2482 = (0.5 / (((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) + 9.9999999392252902907785028219223e-09) + _2478)) * _2478;
                        float _3573 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                        float _2491 = (((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 3.1415927410125732421875) / ((_2456 * 2.1991131305694580078125) + 3.141590118408203125)) * _2445;
                        _2298 = (_2460 * _2408.x) + _2366;
                        _2299 = (_2460 * _2408.y) + _2367;
                        _2300 = (_2460 * _2408.z) + _2368;
                        _2295 = (_2491 * _2425.x) + _2363;
                        _2296 = (_2491 * _2425.y) + _2364;
                        _2297 = (_2491 * _2425.z) + _2365;
                        if (_2370 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2363 = _2295;
                            _2364 = _2296;
                            _2365 = _2297;
                            _2366 = _2298;
                            _2367 = _2299;
                            _2368 = _2300;
                            _2369 = _2370;
                        }
                    }
                    frontier_phi_63_pred = _2300;
                    frontier_phi_63_pred_1 = _2299;
                    frontier_phi_63_pred_2 = _2298;
                    frontier_phi_63_pred_3 = _2297;
                    frontier_phi_63_pred_4 = _2296;
                    frontier_phi_63_pred_5 = _2295;
                }
                _2099 = frontier_phi_63_pred;
                _2097 = frontier_phi_63_pred_1;
                _2095 = frontier_phi_63_pred_2;
                _2093 = frontier_phi_63_pred_3;
                _2091 = frontier_phi_63_pred_4;
                _2089 = frontier_phi_63_pred_5;
                uint _2246 = _2245 + 1u;
                if (_2246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2239 = _2089;
                    _2240 = _2091;
                    _2241 = _2093;
                    _2242 = _2095;
                    _2243 = _2097;
                    _2244 = _2099;
                    _2245 = _2246;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2088 = _2089;
            _2090 = _2091;
            _2092 = _2093;
            _2094 = _2095;
            _2096 = _2097;
            _2098 = _2099;
        }
        uvec4 _2102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2103 = _2102.z;
        uint _2105 = (_2103 >> 8u) & 15u;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        float _2220;
        if (((4294967295u << _2105) & _1953) == 0u)
        {
            _2210 = _2088;
            _2212 = _2090;
            _2214 = _2092;
            _2216 = _2094;
            _2218 = _2096;
            _2220 = _2098;
        }
        else
        {
            float _2235 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2105 < ((_2103 >> 12u) & 15u))
            {
                float _2211;
                float _2213;
                float _2215;
                float _2217;
                float _2219;
                float _2221;
                float _2346 = _2088;
                float _2347 = _2090;
                float _2348 = _2092;
                float _2349 = _2094;
                float _2350 = _2096;
                float _2351 = _2098;
                uint _2352 = _2105;
                uint _2361;
                bool _2362;
                for (;;)
                {
                    _2361 = texelFetch(g_lightClassification, int((((_1947 << 5u) + (_1933 << 9u)) + (_2352 << 2u)) >> 2u)).x;
                    _2362 = _2361 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2362)
                    {
                        frontier_phi_69_pred = _2351;
                        frontier_phi_69_pred_1 = _2350;
                        frontier_phi_69_pred_2 = _2349;
                        frontier_phi_69_pred_3 = _2348;
                        frontier_phi_69_pred_4 = _2347;
                        frontier_phi_69_pred_5 = _2346;
                    }
                    else
                    {
                        float _2496;
                        float _2497;
                        float _2498;
                        float _2499;
                        float _2500;
                        float _2501;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2509 = _2346;
                        float _2510 = _2347;
                        float _2511 = _2348;
                        float _2512 = _2349;
                        float _2513 = _2350;
                        float _2514 = _2351;
                        uint _2515 = _2361;
                        uint _2516;
                        vec4 _2541;
                        float _2542;
                        vec4 _2557;
                        vec3 _2569;
                        vec4 _2585;
                        vec4 _2601;
                        float _2648;
                        bool _2649;
                        for (;;)
                        {
                            uint _2526 = ((_2352 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2515));
                            _2516 = (_2515 + 4294967295u) & _2515;
                            uint _2528 = _2526 * 40u;
                            _2541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 3u)).x));
                            _2542 = _2541.w;
                            uint _2544 = (_2526 * 40u) + 4u;
                            _2557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 3u)).x));
                            uint _2559 = (_2526 * 40u) + 8u;
                            _2569 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x));
                            uint _2572 = (_2526 * 40u) + 16u;
                            _2585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 3u)).x));
                            uint _2588 = (_2526 * 40u) + 20u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            uint _2604 = (_2526 * 40u) + 24u;
                            vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            uint _2623 = (_2526 * 40u) + 28u;
                            vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 3u)).x));
                            _2648 = fma(_1909, _2636.z, fma(_1908, _2636.y, _2636.x * _1907)) + _2636.w;
                            _2649 = !((fma(_1909, _2617.z, fma(_1908, _2617.y, _2617.x * _1907)) + _2617.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2649)
                            {
                                float _2676 = _2541.x - _1907;
                                float _2677 = _2541.y - _1908;
                                float _2678 = _2541.z - _1909;
                                float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                                float _2682 = inversesqrt(_2679);
                                float _2683 = _2682 * _2676;
                                float _2684 = _2682 * _2677;
                                float _2685 = _2682 * _2678;
                                float _2689 = 1.0 - (_2679 / (_2542 * _2542));
                                float _3584 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                                float _2690 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
                                float _2694 = sqrt(_2679) * _2557.w;
                                float _2696 = 1.39999997615814208984375 / (_2694 + 1.39999997615814208984375);
                                float _2697 = _2696 * _2696;
                                float _2698 = 1.0 - _2697;
                                float _2700 = (_2698 * dot(vec3(_2683, _2684, _2685), vec3(_342, _345, _348))) + _2697;
                                float _2703 = _2694 * _2694;
                                float _2707 = (fma(_1909, _2585.z, fma(_1908, _2585.y, _2585.x * _1907)) + _2585.w) / _2648;
                                float _2708 = (fma(_1909, _2601.z, fma(_1908, _2601.y, _2601.x * _1907)) + _2601.w) / _2648;
                                float _2712 = 1.0 - dot(vec2(_2707, _2708), vec2(_2707, _2708));
                                float _3600 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                                float _2713 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                                float _2714 = _2713 * (((isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))) * _2690) / ((_2703 * 0.699999988079071044921875) + 1.0));
                                float _2724 = dot(vec3(_342, _345, _348), vec3((-0.0) - (_1907 * _2235), (-0.0) - (_1908 * _2235), (-0.0) - (_1909 * _2235)));
                                float _3611 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                                float _2732 = (_2698 * dot(vec3(_342, _345, _348), vec3(_2683, _2684, _2685))) + _2697;
                                float _3622 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                                float _2733 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
                                float _2737 = (0.5 / (((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) + 9.9999999392252902907785028219223e-09) + _2733)) * _2733;
                                float _3633 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                                float _2744 = (_2713 * _2690) * (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 3.1415927410125732421875) / ((_2703 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2714 * _2557.z;
                                frontier_phi_75_pred_1 = _2714 * _2557.y;
                                frontier_phi_75_pred_2 = _2714 * _2557.x;
                                frontier_phi_75_pred_3 = _2744 * _2569.z;
                                frontier_phi_75_pred_4 = _2744 * _2569.y;
                                frontier_phi_75_pred_5 = _2744 * _2569.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2753 = frontier_phi_75_pred;
                            _2752 = frontier_phi_75_pred_1;
                            _2751 = frontier_phi_75_pred_2;
                            _2750 = frontier_phi_75_pred_3;
                            _2749 = frontier_phi_75_pred_4;
                            _2748 = frontier_phi_75_pred_5;
                            _2499 = _2751 + _2512;
                            _2500 = _2752 + _2513;
                            _2501 = _2753 + _2514;
                            _2496 = _2748 + _2509;
                            _2497 = _2749 + _2510;
                            _2498 = _2750 + _2511;
                            if (_2516 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2509 = _2496;
                                _2510 = _2497;
                                _2511 = _2498;
                                _2512 = _2499;
                                _2513 = _2500;
                                _2514 = _2501;
                                _2515 = _2516;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2501;
                        frontier_phi_69_pred_1 = _2500;
                        frontier_phi_69_pred_2 = _2499;
                        frontier_phi_69_pred_3 = _2498;
                        frontier_phi_69_pred_4 = _2497;
                        frontier_phi_69_pred_5 = _2496;
                    }
                    _2221 = frontier_phi_69_pred;
                    _2219 = frontier_phi_69_pred_1;
                    _2217 = frontier_phi_69_pred_2;
                    _2215 = frontier_phi_69_pred_3;
                    _2213 = frontier_phi_69_pred_4;
                    _2211 = frontier_phi_69_pred_5;
                    uint _2353 = _2352 + 1u;
                    if (_2353 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2346 = _2211;
                        _2347 = _2213;
                        _2348 = _2215;
                        _2349 = _2217;
                        _2350 = _2219;
                        _2351 = _2221;
                        _2352 = _2353;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2221;
                frontier_phi_57_58_ladder_1 = _2219;
                frontier_phi_57_58_ladder_2 = _2217;
                frontier_phi_57_58_ladder_3 = _2215;
                frontier_phi_57_58_ladder_4 = _2213;
                frontier_phi_57_58_ladder_5 = _2211;
            }
            else
            {
                frontier_phi_57_58_ladder = _2098;
                frontier_phi_57_58_ladder_1 = _2096;
                frontier_phi_57_58_ladder_2 = _2094;
                frontier_phi_57_58_ladder_3 = _2092;
                frontier_phi_57_58_ladder_4 = _2090;
                frontier_phi_57_58_ladder_5 = _2088;
            }
            _2210 = frontier_phi_57_58_ladder_5;
            _2212 = frontier_phi_57_58_ladder_4;
            _2214 = frontier_phi_57_58_ladder_3;
            _2216 = frontier_phi_57_58_ladder_2;
            _2218 = frontier_phi_57_58_ladder_1;
            _2220 = frontier_phi_57_58_ladder;
        }
        float _2225 = isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0));
        _1965 = (_2225 * _2216) + _1529;
        _1967 = (_2225 * _2218) + _1531;
        _1969 = (_2225 * _2220) + _1533;
        _1971 = ((_2210 * 0.039999999105930328369140625) * _2225) + _1778;
        _1973 = ((_2212 * 0.039999999105930328369140625) * _2225) + _1780;
        _1975 = ((_2214 * 0.039999999105930328369140625) * _2225) + _1782;
    }
    else
    {
        _1965 = _1529;
        _1967 = _1531;
        _1969 = _1533;
        _1971 = _1778;
        _1973 = _1780;
        _1975 = _1782;
    }
    uint _1981 = _363 + uint(cbMatDynParam._m0[0u].w);
    float _1989 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _223.x) * cbInstanceData._m0[_1981].x;
    float _1992 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _223.y) * cbInstanceData._m0[_1981].y;
    float _1995 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _223.z) * cbInstanceData._m0[_1981].z;
    float _3649 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3660 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3671 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _2012 = (((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1965 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _387))) + ((_1971 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1166)) * cbPerFrame._m0[3u].x)) + _1989;
    float _2014 = (_1992 + ((_1973 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1166)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1967 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _387)));
    float _2016 = (_1995 + ((_1975 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1166)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1969 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _387)));
    float _3697 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2029 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    uint _2030 = _361 + 6u;
    float _2038 = _320 / cbSceneParam._m0[86u].x;
    float _2039 = _321 / cbSceneParam._m0[86u].y;
    vec4 _2053 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2038, _2039, (log2((isnan(cbSceneParam._m0[77u].w) ? _254 : (isnan(_254) ? cbSceneParam._m0[77u].w : min(_254, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2055 = _2053.x;
    float _2056 = _2053.y;
    float _2057 = _2053.z;
    float _2058 = _2053.w;
    float _2150;
    float _2152;
    float _2154;
    float _2156;
    if (_254 > cbSceneParam._m0[78u].w)
    {
        float _2113 = isnan(_254) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _254 : min(cbSceneParam._m0[80u].w, _254));
        float _2114 = _2113 / _254;
        float _2125 = _2114 * _305;
        float _2126 = _306 * _2114;
        float _2127 = (-0.0) - _2126;
        float _2128 = _2114 * _307;
        float _2130 = (cbSceneParam._m0[77u].w * _2127) / _2113;
        float _2131 = _2130 + cbSceneParam._m0[79u].w;
        float _2132 = cbSceneParam._m0[79u].w - _2126;
        float _2138 = sqrt(((_2125 * _2125) + (_2126 * _2126)) + (_2128 * _2128));
        float _2141 = (1.0 - (cbSceneParam._m0[77u].w / _2113)) * _2138;
        float _2146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2308;
        if (abs((_2127 - _2130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2308 = ((((_2131 > 0.0) ? exp2(_2146 * _2131) : (2.0 - exp2(_2148 * _2131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2141;
        }
        else
        {
            float _2268 = 1.0 / cbSceneParam._m0[80u].x;
            float _2269 = isnan(_2132) ? _2131 : (isnan(_2131) ? _2132 : max(_2131, _2132));
            float _2270 = isnan(_2132) ? _2131 : (isnan(_2131) ? _2132 : min(_2131, _2132));
            float _2279 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : min(_2269, 0.0));
            float _2280 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : min(_2270, 0.0));
            _2308 = ((abs(_2138 / _2127) * cbSceneParam._m0[80u].y) * ((((_2279 - _2280) * 2.0) - ((exp2(_2146 * (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0)))) - exp2(_2146 * (isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0))))) * _2268)) - ((exp2(_2148 * _2279) - exp2(_2148 * _2280)) * _2268))) + (_2141 * cbSceneParam._m0[80u].z);
        }
        vec4 _2310 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2038, _2039, 1.0), 0.0);
        float _2319 = exp2((_2308 * (-1.44269502162933349609375)) * (1.0 - _2310.w));
        float _2320 = log2(_2319);
        float _2336 = log2(_2058);
        _2150 = (exp2(_2336 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].x)) * _2310.x) / cbSceneParam._m0[78u].x)) + _2055;
        _2152 = (exp2(_2336 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].y)) * _2310.y) / cbSceneParam._m0[78u].y)) + _2056;
        _2154 = (exp2(_2336 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].z)) * _2310.z) / cbSceneParam._m0[78u].z)) + _2057;
        _2156 = _2319 * _2058;
    }
    else
    {
        _2150 = _2055;
        _2152 = _2056;
        _2154 = _2057;
        _2156 = _2058;
    }
    float _2168 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2169 = _2168 == 3.0;
    float _2171 = log2(_2156);
    float _2175 = exp2(_2171 * cbSceneParam._m0[78u].x);
    float _2176 = exp2(_2171 * cbSceneParam._m0[78u].y);
    float _2177 = exp2(_2171 * cbSceneParam._m0[78u].z);
    float _2178 = _2175 * (isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)));
    float _2179 = _2176 * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)));
    float _2180 = _2177 * (isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)));
    float _2189 = (_2168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2189 * (_2169 ? _2178 : (_2178 + (cbSceneParam._m0[72u].w * _2150)));
    SV_Target.y = _2189 * (_2169 ? _2179 : (_2179 + (cbSceneParam._m0[72u].w * _2152)));
    SV_Target.z = _2189 * (_2169 ? _2180 : (_2180 + (cbSceneParam._m0[72u].w * _2154)));
    SV_Target.w = cbInstanceData._m0[_2030].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1989) * _2029) * _2175) * _2189;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1992) * _2029) * _2176) * _2189;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1995) * _2029) * _2177) * _2189;
    SV_Target_1.w = cbInstanceData._m0[_2030].w;
}


