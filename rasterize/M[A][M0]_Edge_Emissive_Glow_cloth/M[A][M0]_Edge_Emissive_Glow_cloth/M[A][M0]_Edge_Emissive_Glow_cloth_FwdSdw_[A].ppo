#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _781;
float _3273;
float _3274;
float _3275;
float _3276;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _201 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _207 = _201.w;
    float _208 = _201.x * cbMtdParam._m0[9u].x;
    float _209 = _201.y * cbMtdParam._m0[9u].y;
    float _210 = _201.z * cbMtdParam._m0[9u].z;
    vec4 _232 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _241 = _240 * _179;
    float _242 = _240 * _180;
    float _243 = _240 * _181;
    float _3285 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3296 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _3307 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _263 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _304 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _314 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _304);
    float _315 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _304);
    float _316 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _304);
    float _320 = inversesqrt(dot(vec3(_314, _315, _316), vec3(_314, _315, _316)));
    float _321 = _314 * _320;
    float _322 = _315 * _320;
    float _323 = _316 * _320;
    vec4 _328 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _330 = _328.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _460 = sqrt(((_314 * _314) + (_315 * _315)) + (_316 * _316));
        float _466 = (cbMatDynParam._m0[5u].x * _460) + cbMatDynParam._m0[5u].y;
        float _3318 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
        float _467 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _471 = (cbMatDynParam._m0[5u].z * _460) + cbMatDynParam._m0[5u].w;
        float _3329 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) - _467)) + _467) < ((_330 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _342 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _343 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _363 = fma(_243, cbSceneParam._m0[5u].z, fma(_242, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _241));
    float _366 = fma(_243, cbSceneParam._m0[6u].z, fma(_242, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _241));
    float _369 = fma(_243, cbSceneParam._m0[7u].z, fma(_242, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _241));
    uint _382 = uint(roundEven(NORMAL.w)) * 13u;
    uint _384 = _382 + 9u;
    uint _385 = _384 + uint(cbMatDynParam._m0[0u].w);
    float _391 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_385].x;
    float _392 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_385].y;
    float _393 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_385].z;
    float _3340 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _3362 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    vec4 _405 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _342, cbSceneParam._m0[86u].y * _343));
    float _408 = _405.x * TEXCOORD.z;
    float _409 = dot(vec3(_241, _242, _243), vec3(_321, _322, _323));
    float _412 = _409 * 2.0;
    float _417 = (_412 * _241) - _321;
    float _418 = (_412 * _242) - _322;
    float _419 = (_412 * _243) - _323;
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _780;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _505 = fma(_449, cbModelParam._m0[26u].z, fma(_445, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _441));
        float _509 = fma(_449, cbModelParam._m0[27u].z, fma(_445, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _441));
        float _513 = fma(_449, cbModelParam._m0[28u].z, fma(_445, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _441));
        float _538 = _441 + _241;
        float _539 = _445 + _242;
        float _540 = _449 + _243;
        float _550 = fma(_540, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538)) - _505;
        float _551 = fma(_540, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538)) - _509;
        float _552 = fma(_540, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538)) - _513;
        float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
        float _569 = ((_556 * _550) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_505 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _570 = ((_556 * _551) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_509 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _571 = ((_556 * _552) / cbModelParam._m0[34u].z) + ((((((_513 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _574 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        float _608 = exp2((_574.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_574.x + (-0.5));
        float _610 = _608 * (_574.y + (-0.5));
        float _611 = _608 * (_574.z + (-0.5));
        float _618 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_581.x + (-0.5));
        float _620 = _618 * (_581.y + (-0.5));
        float _621 = _618 * (_581.z + (-0.5));
        float _628 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_588.x + (-0.5));
        float _630 = _628 * (_588.y + (-0.5));
        float _631 = _628 * (_588.z + (-0.5));
        float _638 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_595.x + (-0.5));
        float _640 = _638 * (_595.y + (-0.5));
        float _641 = _638 * (_595.z + (-0.5));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _644 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _645 = _609 * 0.5;
        float _646 = _619 * 0.5;
        float _647 = _629 * 0.5;
        float _648 = dot(vec3(_645, _646, _647), vec3(_645, _646, _647));
        float _653 = (_648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_648);
        float _662 = (dot(vec3(_241, _242, _243), vec3(_653 * _645, _653 * _646, _653 * _647)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _672 = sqrt(((_646 * _646) + (_645 * _645)) + (_647 * _647)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _3410 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_674 + 1.0))) + _679) * _642;
        float _689 = _610 * 0.5;
        float _690 = _620 * 0.5;
        float _691 = _630 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _705 = (dot(vec3(_241, _242, _243), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _714 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_643 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3443 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_716 + 1.0))) + _721) * _643;
        float _731 = _611 * 0.5;
        float _732 = _621 * 0.5;
        float _733 = _631 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_241, _242, _243), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_644 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3476 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_758 + 1.0))) + _763) * _644;
        _780 = _611;
        _782 = _610;
        _783 = _609;
        _784 = _621;
        _785 = _620;
        _786 = _619;
        _787 = _631;
        _788 = _630;
        _789 = _629;
        _790 = _644;
        _791 = _643;
        _792 = _642;
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
        _794 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
    }
    else
    {
        _780 = _781;
        _782 = _781;
        _783 = _781;
        _784 = _781;
        _785 = _781;
        _786 = _781;
        _787 = _781;
        _788 = _781;
        _789 = _781;
        _790 = _781;
        _791 = _781;
        _792 = _781;
        _793 = 0.0;
        _794 = 0.0;
        _795 = 0.0;
    }
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _824 = fma(_449, cbModelParam._m0[30u].z, fma(_445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _441));
        float _828 = fma(_449, cbModelParam._m0[31u].z, fma(_445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _441));
        float _832 = fma(_449, cbModelParam._m0[32u].z, fma(_445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _441));
        float _855 = _441 + _241;
        float _856 = _445 + _242;
        float _857 = _449 + _243;
        float _867 = fma(_857, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855)) - _824;
        float _868 = fma(_857, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855)) - _828;
        float _869 = fma(_857, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855)) - _832;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_824 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_828 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[35u].z) + ((((((_832 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _923 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_890.x + (-0.5));
        float _925 = _923 * (_890.y + (-0.5));
        float _926 = _923 * (_890.z + (-0.5));
        float _933 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_897.x + (-0.5));
        float _935 = _933 * (_897.y + (-0.5));
        float _936 = _933 * (_897.z + (-0.5));
        float _943 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_904.x + (-0.5));
        float _945 = _943 * (_904.y + (-0.5));
        float _946 = _943 * (_904.z + (-0.5));
        float _953 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_911.x + (-0.5));
        float _955 = _953 * (_911.y + (-0.5));
        float _956 = _953 * (_911.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_241, _242, _243), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3539 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_987 + 1.0))) + _992) * _957;
        float _1002 = _925 * 0.5;
        float _1003 = _935 * 0.5;
        float _1004 = _945 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_241, _242, _243), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3572 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1029 + 1.0))) + _1034) * _958;
        float _1044 = _926 * 0.5;
        float _1045 = _936 * 0.5;
        float _1046 = _946 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_241, _242, _243), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3605 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1071 + 1.0))) + _1076) * _959;
        _1093 = _926;
        _1094 = _925;
        _1095 = _924;
        _1096 = _936;
        _1097 = _935;
        _1098 = _934;
        _1099 = _946;
        _1100 = _945;
        _1101 = _944;
        _1102 = _959;
        _1103 = _958;
        _1104 = _957;
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _781;
        _1094 = _781;
        _1095 = _781;
        _1096 = _781;
        _1097 = _781;
        _1098 = _781;
        _1099 = _781;
        _1100 = _781;
        _1101 = _781;
        _1102 = _781;
        _1103 = _781;
        _1104 = _781;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _794)) + _794;
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _795)) + _795;
    float _1140 = fma(_1119, cbSceneParam._m0[89u].z, fma(_1118, cbSceneParam._m0[89u].y, _1117 * cbSceneParam._m0[89u].x));
    float _1143 = fma(_1119, cbSceneParam._m0[90u].z, fma(_1118, cbSceneParam._m0[90u].y, _1117 * cbSceneParam._m0[90u].x));
    float _1146 = fma(_1119, cbSceneParam._m0[91u].z, fma(_1118, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1117));
    float _1161 = _417 * 0.5;
    float _1162 = _418 * 0.5;
    float _1163 = _419 * 0.5;
    float _1164 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1167 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1170 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1204;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1177 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_780, _784, _787, _790));
        float _1181 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_782, _785, _788, _791));
        float _1185 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_783, _786, _789, _792));
        float _1192 = dot(vec4(cbModelParam._m0[39u]), vec4(_1161, _1162, _1163, 1.0));
        _1204 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1192) ? 0.0 : (isnan(0.0) ? _1192 : max(0.0, _1192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1204 = 1.0;
    }
    float _1215;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1206 = dot(vec4(cbModelParam._m0[40u]), vec4(_1161, _1162, _1163, 1.0));
        _1215 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1215 = 1.0;
    }
    float _1219 = (_1215 * cbModelParam._m0[1u].x) + (_1204 * (1.0 - cbModelParam._m0[1u].x));
    float _1228 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1310;
    float _1312;
    float _1314;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1277 = fma(_449, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441)) + cbModelParam._m0[13u].w;
        float _1281 = fma(_449, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441)) + cbModelParam._m0[14u].w;
        float _1285 = fma(_449, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441)) + cbModelParam._m0[15u].w;
        float _1288 = fma(_419, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417));
        float _1291 = fma(_419, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417));
        float _1294 = fma(_419, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417));
        float _1320;
        if (_1288 > 0.0)
        {
            _1320 = abs((1.0 - _1277) / _1288);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1277 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1320 = frontier_phi_19_17_ladder;
        }
        float _1494;
        if (_1291 > 0.0)
        {
            _1494 = abs((1.0 - _1281) / _1291);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1281 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1494 = frontier_phi_28_24_ladder;
        }
        float _1791;
        if (_1294 > 0.0)
        {
            _1791 = abs((1.0 - _1285) / _1294);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1285 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1791 = frontier_phi_40_35_ladder;
        }
        float _1793 = isnan(_1494) ? _1320 : (isnan(_1320) ? _1494 : min(_1320, _1494));
        float _1794 = isnan(_1791) ? _1793 : (isnan(_1793) ? _1791 : min(_1793, _1791));
        float _1798 = (_1794 * _1288) + _1277;
        float _1799 = (_1794 * _1291) + _1281;
        float _1800 = (_1794 * _1294) + _1285;
        float _1801 = _1794 * 9.9999997473787516355514526367188e-05;
        float _1803 = (-1.0) - _1801;
        float _1805 = _1801 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1800 > _1805) || ((_1800 < _1803) || ((_1799 > _1805) || ((_1799 < _1803) || ((_1798 < _1803) || (_1798 > _1805))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1800, cbModelParam._m0[9u].z, fma(_1799, cbModelParam._m0[9u].y, _1798 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1800, cbModelParam._m0[10u].z, fma(_1799, cbModelParam._m0[10u].y, _1798 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1800, cbModelParam._m0[11u].z, fma(_1799, cbModelParam._m0[11u].y, _1798 * cbModelParam._m0[11u].x))), _1228);
            frontier_phi_18_40_ladder = _1945.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1945.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1945.x * cbModelParam._m0[1u].y;
        }
        _1310 = frontier_phi_18_40_ladder_2;
        _1312 = frontier_phi_18_40_ladder_1;
        _1314 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_417, _418, _419), _1228);
        _1310 = _1298.x * cbModelParam._m0[1u].y;
        _1312 = _1298.y * cbModelParam._m0[1u].y;
        _1314 = _1298.z * cbModelParam._m0[1u].y;
    }
    float _1317 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1374 = fma(_449, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441)) + cbModelParam._m0[21u].w;
        float _1378 = fma(_449, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441)) + cbModelParam._m0[22u].w;
        float _1382 = fma(_449, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441)) + cbModelParam._m0[23u].w;
        float _1385 = fma(_419, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417));
        float _1388 = fma(_419, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417));
        float _1391 = fma(_419, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417));
        float _1499;
        if (_1385 > 0.0)
        {
            _1499 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1499 = frontier_phi_30_26_ladder;
        }
        float _1818;
        if (_1388 > 0.0)
        {
            _1818 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1818 = frontier_phi_42_37_ladder;
        }
        float _2091;
        if (_1391 > 0.0)
        {
            _2091 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2091 = frontier_phi_52_49_ladder;
        }
        float _2093 = isnan(_1818) ? _1499 : (isnan(_1499) ? _1818 : min(_1499, _1818));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1385) + _1374;
        float _2099 = (_2094 * _1388) + _1378;
        float _2100 = (_2094 * _1391) + _1382;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2102 = (-1.0) - _2101;
        float _2104 = _2101 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2100 > _2104) || ((_2100 < _2102) || ((_2099 > _2104) || ((_2099 < _2102) || ((_2098 < _2102) || (_2098 > _2104))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2191 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2100, cbModelParam._m0[17u].z, fma(_2099, cbModelParam._m0[17u].y, _2098 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2100, cbModelParam._m0[18u].z, fma(_2099, cbModelParam._m0[18u].y, _2098 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2100, cbModelParam._m0[19u].z, fma(_2099, cbModelParam._m0[19u].y, _2098 * cbModelParam._m0[19u].x))), _1317);
            frontier_phi_27_52_ladder = _2191.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2191.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2191.x * cbModelParam._m0[1u].z;
        }
        _1410 = frontier_phi_27_52_ladder_2;
        _1412 = frontier_phi_27_52_ladder_1;
        _1414 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_417, _418, _419), _1317);
        _1410 = _1394.x * cbModelParam._m0[1u].z;
        _1412 = _1394.y * cbModelParam._m0[1u].z;
        _1414 = _1394.z * cbModelParam._m0[1u].z;
    }
    float _1426 = _408 * 0.01200000010430812835693359375;
    float _1428 = _1426 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1429 = _1426 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1430 = _1426 * ((cbModelParam._m0[1u].w * (_1414 - _1314)) + _1314);
    float _1433 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, _1428 * cbSceneParam._m0[91u].x));
    float _1473 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1477 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1485 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1486 = _1473 / _1485;
    float _1487 = _1477 / _1485;
    float _1488 = _1481 / _1485;
    float _1635;
    float _1636;
    float _1637;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1515 = ((uint(_1488 > cbSceneParam._m0[59u].y) + uint(_1488 > cbSceneParam._m0[59u].x)) + uint(_1488 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1516 = _1515 + 43u;
        uint _1524 = _1515 + 44u;
        uint _1532 = _1515 + 45u;
        uint _1540 = _1515 + 46u;
        float _1551 = fma(_1485, cbSceneParam._m0[_1516].w, fma(_1481, cbSceneParam._m0[_1516].z, fma(_1477, cbSceneParam._m0[_1516].y, _1473 * cbSceneParam._m0[_1516].x)));
        float _1555 = fma(_1485, cbSceneParam._m0[_1524].w, fma(_1481, cbSceneParam._m0[_1524].z, fma(_1477, cbSceneParam._m0[_1524].y, _1473 * cbSceneParam._m0[_1524].x)));
        float _1563 = fma(_1485, cbSceneParam._m0[_1540].w, fma(_1481, cbSceneParam._m0[_1540].z, fma(_1477, cbSceneParam._m0[_1540].y, _1473 * cbSceneParam._m0[_1540].x)));
        float _1568 = cbSceneParam._m0[33u].z * _1563;
        float _1570 = cbSceneParam._m0[33u].w * _1563;
        float _1573 = fma(_1485, cbSceneParam._m0[_1532].w, fma(_1481, cbSceneParam._m0[_1532].z, fma(_1477, cbSceneParam._m0[_1532].y, _1473 * cbSceneParam._m0[_1532].x))) / _1563;
        float _1621 = (cbSceneParam._m0[33u].x - sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488))) * cbSceneParam._m0[33u].y;
        float _3731 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1628 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1568 + _1551) / _1563, (_1570 + _1555) / _1563), _1573), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1570 + _1551) / _1563, (_1555 - _1568) / _1563), _1573), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1551 - _1568) / _1563, (_1555 - _1570) / _1563), _1573), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1551 - _1570) / _1563, (_1568 + _1555) / _1563), _1573), 0.0)).x), vec4(0.25)));
        _1635 = 1.0 - (_1628 * cbSceneParam._m0[34u].x);
        _1636 = 1.0 - (_1628 * cbSceneParam._m0[34u].y);
        _1637 = 1.0 - (_1628 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1635 = 1.0;
        _1636 = 1.0;
        _1637 = 1.0;
    }
    float _1701;
    float _1703;
    float _1705;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1689 = fma(_1485, cbSceneParam._m0[63u].w, fma(_1481, cbSceneParam._m0[63u].z, fma(_1477, cbSceneParam._m0[63u].y, _1473 * cbSceneParam._m0[63u].x)));
        float _1690 = fma(_1485, cbSceneParam._m0[60u].w, fma(_1481, cbSceneParam._m0[60u].z, fma(_1477, cbSceneParam._m0[60u].y, _1473 * cbSceneParam._m0[60u].x))) / _1689;
        float _1691 = fma(_1485, cbSceneParam._m0[61u].w, fma(_1481, cbSceneParam._m0[61u].z, fma(_1477, cbSceneParam._m0[61u].y, _1473 * cbSceneParam._m0[61u].x))) / _1689;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1690 >= cbSceneParam._m0[64u].x) && (_1691 >= cbSceneParam._m0[64u].y)) && (_1690 <= cbSceneParam._m0[64u].z)) && (_1691 <= cbSceneParam._m0[64u].w))
        {
            float _1831 = fma(_1485, cbSceneParam._m0[62u].w, fma(_1481, cbSceneParam._m0[62u].z, fma(_1477, cbSceneParam._m0[62u].y, _1473 * cbSceneParam._m0[62u].x))) / _1689;
            float _1835 = isnan(cbSceneParam._m0[41u].w) ? _1831 : (isnan(_1831) ? cbSceneParam._m0[41u].w : max(_1831, cbSceneParam._m0[41u].w));
            float _1878 = (cbSceneParam._m0[33u].x - sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488))) * cbSceneParam._m0[33u].y;
            float _3747 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
            float _1885 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1690, cbSceneParam._m0[33u].w + _1691), _1835), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1690, _1691 - cbSceneParam._m0[33u].z), _1835), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1690 - cbSceneParam._m0[33u].z, _1691 - cbSceneParam._m0[33u].w), _1835), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1690 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1691), _1835), 0.0)).x), vec4(0.25)));
            float _1889 = 1.0 - (_1885 * cbSceneParam._m0[34u].x);
            float _1890 = 1.0 - (_1885 * cbSceneParam._m0[34u].y);
            float _1891 = 1.0 - (_1885 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1890) ? _1636 : (isnan(_1636) ? _1890 : min(_1636, _1890));
            frontier_phi_39_38_ladder_1 = isnan(_1889) ? _1635 : (isnan(_1635) ? _1889 : min(_1635, _1889));
            frontier_phi_39_38_ladder_2 = isnan(_1891) ? _1637 : (isnan(_1637) ? _1891 : min(_1637, _1891));
        }
        else
        {
            frontier_phi_39_38_ladder = _1636;
            frontier_phi_39_38_ladder_1 = _1635;
            frontier_phi_39_38_ladder_2 = _1637;
        }
        _1701 = frontier_phi_39_38_ladder_1;
        _1703 = frontier_phi_39_38_ladder;
        _1705 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1701 = _1635;
        _1703 = _1636;
        _1705 = _1637;
    }
    uvec4 _1710 = floatBitsToUint(cbInstanceData._m0[_382 + 5u]);
    uint _1712 = _1710.x * 14u;
    uint _1713 = _1712 + 13u;
    float _1720 = _408 + (-1.0);
    float _1726 = (cbLight._m0[_1713].x * _1720) + 1.0;
    float _1727 = (cbLight._m0[_1713].y * _1720) + 1.0;
    float _1728 = (cbLight._m0[_1713].z * _1720) + 1.0;
    float _1729 = (cbLight._m0[_1713].w * _1720) + 1.0;
    uint _1730 = _1712 + 5u;
    float _1736 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
    uint _1740 = _1712 + 4u;
    float _1750 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1754 = _1712 | 1u;
    float _1765 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_241, _242, _243));
    float _1768 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_241, _242, _243));
    float _3783 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _3794 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1773 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.3183098733425140380859375;
    float _1775 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1782 = ((cbLight._m0[_1730].x * _1736) * _1775) + (((cbLight._m0[_1740].x * _1701) * _1750) * _1773);
    float _1783 = ((_1736 * cbLight._m0[_1730].y) * _1775) + (((cbLight._m0[_1740].y * _1703) * _1750) * _1773);
    float _1784 = ((_1736 * cbLight._m0[_1730].z) * _1775) + (((cbLight._m0[_1740].z * _1705) * _1750) * _1773);
    uvec4 _1788 = floatBitsToUint(cbLight._m0[_1712 + 12u]);
    bool _1790 = _1788.x == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1790)
    {
        _1892 = _1782;
        _1894 = _1783;
        _1896 = _1784;
    }
    else
    {
        uint _1900 = _1712 + 6u;
        float _1916 = (dot(vec3(cbLight._m0[_1712 + 2u].xyz), vec3(_241, _242, _243)) * 0.5) + 0.5;
        float _1917 = _1916 * _1916;
        float _3805 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1919 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1892 = (((cbLight._m0[_1900].x * 0.3183098733425140380859375) * _1918) * _1919) + _1782;
        _1894 = (((cbLight._m0[_1900].y * 0.3183098733425140380859375) * _1918) * _1919) + _1783;
        _1896 = (((cbLight._m0[_1900].z * 0.3183098733425140380859375) * _1918) * _1919) + _1784;
    }
    bool _1899 = _1788.y == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1899)
    {
        _1954 = _1892;
        _1956 = _1894;
        _1958 = _1896;
    }
    else
    {
        uint _2062 = _1712 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1712 + 3u].xyz), vec3(_241, _242, _243)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _3821 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _2081 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _1954 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1892;
        _1956 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1894;
        _1958 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1896;
    }
    uint _1960 = _1712 + 8u;
    float _1966 = cbLight._m0[_1712].x + _321;
    float _1967 = cbLight._m0[_1712].y + _322;
    float _1968 = cbLight._m0[_1712].z + _323;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1976 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1712].xyz));
    float _3837 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _1980 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1966 * _1972, _1967 * _1972, _1968 * _1972));
    float _3859 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1992 = (exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = (0.5 / ((_1979 + 9.9999999392252902907785028219223e-09) + _1980)) * _1979;
    float _3870 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.31831014156341552734375;
    uint _2014 = _1712 + 9u;
    float _2020 = cbLight._m0[_1754].x + _321;
    float _2021 = cbLight._m0[_1754].y + _322;
    float _2022 = cbLight._m0[_1754].z + _323;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2030 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1754].xyz));
    float _3881 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_2020 * _2026, _2021 * _2026, _2022 * _2026));
    float _3892 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2043 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = (0.5 / ((_2033 + 9.9999999392252902907785028219223e-09) + _1980)) * _2033;
    float _3903 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.31831014156341552734375;
    float _2059 = (((_2043 * cbLight._m0[_2014].x) * _2049) * _1736) + ((((cbLight._m0[_1960].x * _1701) * _1992) * _2000) * _1750);
    float _2060 = (((_2043 * cbLight._m0[_2014].y) * _2049) * _1736) + ((((cbLight._m0[_1960].y * _1703) * _1992) * _2000) * _1750);
    float _2061 = (((_2043 * cbLight._m0[_2014].z) * _2049) * _1736) + ((((cbLight._m0[_1960].z * _1705) * _1992) * _2000) * _1750);
    float _2117;
    float _2119;
    float _2121;
    if (_1790)
    {
        _2117 = _2059;
        _2119 = _2060;
        _2121 = _2061;
    }
    else
    {
        uint _2123 = _1712 + 10u;
        uint _2129 = _1712 + 2u;
        float _2135 = cbLight._m0[_2129].x + _321;
        float _2136 = cbLight._m0[_2129].y + _322;
        float _2137 = cbLight._m0[_2129].z + _323;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2145 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_2129].xyz));
        float _3914 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _2149 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2135 * _2141, _2136 * _2141, _2137 * _2141));
        float _3925 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2162 = (0.5 / ((_2148 + 9.9999999392252902907785028219223e-09) + _1980)) * _2148;
        float _3936 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.31831014156341552734375;
        float _2165 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2117 = (((_2158 * cbLight._m0[_2123].x) * _2164) * _2165) + _2059;
        _2119 = (((_2158 * cbLight._m0[_2123].y) * _2164) * _2165) + _2060;
        _2121 = (((_2158 * cbLight._m0[_2123].z) * _2164) * _2165) + _2061;
    }
    float _2196;
    float _2198;
    float _2200;
    if (_1899)
    {
        _2196 = _2117;
        _2198 = _2119;
        _2200 = _2121;
    }
    else
    {
        uint _2207 = _1712 + 11u;
        uint _2213 = _1712 + 3u;
        float _2219 = cbLight._m0[_2213].x + _321;
        float _2220 = cbLight._m0[_2213].y + _322;
        float _2221 = cbLight._m0[_2213].z + _323;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2229 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_2213].xyz));
        float _3952 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2219 * _2225, _2220 * _2225, _2221 * _2225));
        float _3963 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = (0.5 / ((_2232 + 9.9999999392252902907785028219223e-09) + _1980)) * _2232;
        float _3974 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.31831014156341552734375;
        float _2249 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _2196 = (((_2242 * cbLight._m0[_2207].x) * _2248) * _2249) + _2117;
        _2198 = (((_2242 * cbLight._m0[_2207].y) * _2248) * _2249) + _2119;
        _2200 = (((_2242 * cbLight._m0[_2207].z) * _2248) * _2249) + _2121;
    }
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    if (_1710.y == 0u)
    {
        uvec4 _2270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2271 = _2270.x;
        uint _2282 = uint((float(_2270.y) * floor(float(uint(cbSceneParam._m0[85u].y * _343) / _2271))) + floor(float(uint(cbSceneParam._m0[85u].x * _342) / _2271)));
        float _2292 = (log2(_1488 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2293 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        uint _2296 = uint(isnan(14.0) ? _2293 : (isnan(_2293) ? 14.0 : min(_2293, 14.0)));
        uvec4 _2301 = texelFetch(g_lightClusterGridBuffer, int(((_2296 << 2u) + (_2282 << 6u)) >> 2u));
        uint _2302 = _2301.x;
        uint _2303 = _2270.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2303 >> 4u) & 15u)) + 4294967295u) & _2302) == 0u) || ((_2303 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            uint _2582 = 0u;
            uint _2591;
            bool _2592;
            for (;;)
            {
                _2591 = texelFetch(g_lightClassification, int((((_2296 << 5u) + (_2282 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                _2592 = _2591 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2592)
                {
                    frontier_phi_73_pred = _2581;
                    frontier_phi_73_pred_1 = _2580;
                    frontier_phi_73_pred_2 = _2579;
                    frontier_phi_73_pred_3 = _2578;
                    frontier_phi_73_pred_4 = _2577;
                    frontier_phi_73_pred_5 = _2576;
                }
                else
                {
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    uint _2727;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2591;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    for (;;)
                    {
                        uint _2731 = uint(findLSB(_2727)) + (_2582 << 5u);
                        uint _2728 = (_2727 + 4294967295u) & _2727;
                        uint _2733 = _2731 * 48u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        uint _2753 = (_2731 * 48u) + 4u;
                        vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 3u)).x));
                        uint _2772 = (_2731 * 48u) + 8u;
                        vec3 _2783 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x));
                        float _2787 = _2747.x - _1486;
                        float _2788 = _2747.y - _1487;
                        float _2789 = _2747.z - _1488;
                        float _2790 = dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789));
                        float _2793 = inversesqrt(_2790);
                        float _2802 = 1.0 - (_2790 * _2747.w);
                        float _4000 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2804 = sqrt(_2790) * _2766.w;
                        float _2807 = 1.39999997615814208984375 / (_2804 + 1.39999997615814208984375);
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * dot(vec3(_363, _366, _369), vec3(_2793 * _2787, _2793 * _2788, _2793 * _2789))) + _2808;
                        float _2814 = _2804 * _2804;
                        float _2818 = ((isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))) * _2803) / ((_2814 * 0.699999988079071044921875) + 1.0);
                        float _2822 = (-0.0) - _1486;
                        float _2823 = (-0.0) - _1487;
                        float _2824 = (-0.0) - _1488;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2832 = dot(vec3(_363, _366, _369), vec3(_2828 * _2822, _2828 * _2823, _2828 * _2824));
                        float _4016 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _4027 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2836 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2840 = (0.5 / (((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) + 9.9999999392252902907785028219223e-09) + _2836)) * _2836;
                        float _4038 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2849 = (((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 3.1415927410125732421875) / ((_2814 * 2.1991131305694580078125) + 3.141590118408203125)) * _2803;
                        _2651 = (_2818 * _2766.x) + _2724;
                        _2652 = (_2818 * _2766.y) + _2725;
                        _2653 = (_2818 * _2766.z) + _2726;
                        _2648 = (_2849 * _2783.x) + _2721;
                        _2649 = (_2849 * _2783.y) + _2722;
                        _2650 = (_2849 * _2783.z) + _2723;
                        if (_2728 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2728;
                        }
                    }
                    frontier_phi_73_pred = _2653;
                    frontier_phi_73_pred_1 = _2652;
                    frontier_phi_73_pred_2 = _2651;
                    frontier_phi_73_pred_3 = _2650;
                    frontier_phi_73_pred_4 = _2649;
                    frontier_phi_73_pred_5 = _2648;
                }
                _2427 = frontier_phi_73_pred;
                _2425 = frontier_phi_73_pred_1;
                _2423 = frontier_phi_73_pred_2;
                _2421 = frontier_phi_73_pred_3;
                _2419 = frontier_phi_73_pred_4;
                _2417 = frontier_phi_73_pred_5;
                uint _2583 = _2582 + 1u;
                if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2576 = _2417;
                    _2577 = _2419;
                    _2578 = _2421;
                    _2579 = _2423;
                    _2580 = _2425;
                    _2581 = _2427;
                    _2582 = _2583;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((4294967295u << _2433) & _2302) == 0u)
        {
            _2547 = _2416;
            _2549 = _2418;
            _2551 = _2420;
            _2553 = _2422;
            _2555 = _2424;
            _2557 = _2426;
        }
        else
        {
            float _2572 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2704 = _2416;
                float _2705 = _2418;
                float _2706 = _2420;
                float _2707 = _2422;
                float _2708 = _2424;
                float _2709 = _2426;
                uint _2710 = _2433;
                uint _2719;
                bool _2720;
                for (;;)
                {
                    _2719 = texelFetch(g_lightClassification, int((((_2296 << 5u) + (_2282 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                    _2720 = _2719 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2720)
                    {
                        frontier_phi_84_pred = _2708;
                        frontier_phi_84_pred_1 = _2707;
                        frontier_phi_84_pred_2 = _2706;
                        frontier_phi_84_pred_3 = _2705;
                        frontier_phi_84_pred_4 = _2704;
                        frontier_phi_84_pred_5 = _2709;
                    }
                    else
                    {
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2876 = _2704;
                        float _2877 = _2705;
                        float _2878 = _2706;
                        float _2879 = _2707;
                        float _2880 = _2708;
                        float _2881 = _2709;
                        uint _2882 = _2719;
                        uint _2883;
                        vec4 _2908;
                        float _2909;
                        vec4 _2924;
                        vec3 _2936;
                        vec4 _2952;
                        vec4 _2968;
                        float _3015;
                        bool _3016;
                        for (;;)
                        {
                            uint _2893 = ((_2710 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2882));
                            _2883 = (_2882 + 4294967295u) & _2882;
                            uint _2895 = _2893 * 40u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            _2909 = _2908.w;
                            uint _2911 = (_2893 * 40u) + 4u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2926 = (_2893 * 40u) + 8u;
                            _2936 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x));
                            uint _2939 = (_2893 * 40u) + 16u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2893 * 40u) + 20u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2893 * 40u) + 24u;
                            vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2990 = (_2893 * 40u) + 28u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3015 = fma(_1488, _3003.z, fma(_1487, _3003.y, _3003.x * _1486)) + _3003.w;
                            _3016 = !((fma(_1488, _2984.z, fma(_1487, _2984.y, _2984.x * _1486)) + _2984.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3016)
                            {
                                float _3043 = _2908.x - _1486;
                                float _3044 = _2908.y - _1487;
                                float _3045 = _2908.z - _1488;
                                float _3046 = dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045));
                                float _3049 = inversesqrt(_3046);
                                float _3050 = _3049 * _3043;
                                float _3051 = _3049 * _3044;
                                float _3052 = _3049 * _3045;
                                float _3056 = 1.0 - (_3046 / (_2909 * _2909));
                                float _4049 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3061 = sqrt(_3046) * _2924.w;
                                float _3063 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                                float _3064 = _3063 * _3063;
                                float _3065 = 1.0 - _3064;
                                float _3067 = (_3065 * dot(vec3(_3050, _3051, _3052), vec3(_363, _366, _369))) + _3064;
                                float _3070 = _3061 * _3061;
                                float _3074 = (fma(_1488, _2952.z, fma(_1487, _2952.y, _2952.x * _1486)) + _2952.w) / _3015;
                                float _3075 = (fma(_1488, _2968.z, fma(_1487, _2968.y, _2968.x * _1486)) + _2968.w) / _3015;
                                float _3079 = 1.0 - dot(vec2(_3074, _3075), vec2(_3074, _3075));
                                float _4065 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3081 = _3080 * (((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3057) / ((_3070 * 0.699999988079071044921875) + 1.0));
                                float _3091 = dot(vec3(_363, _366, _369), vec3((-0.0) - (_1486 * _2572), (-0.0) - (_1487 * _2572), (-0.0) - (_1488 * _2572)));
                                float _4076 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3099 = (_3065 * dot(vec3(_363, _366, _369), vec3(_3050, _3051, _3052))) + _3064;
                                float _4087 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3104 = (0.5 / (((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) + 9.9999999392252902907785028219223e-09) + _3100)) * _3100;
                                float _4098 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3111 = (_3080 * _3057) * (((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 3.1415927410125732421875) / ((_3070 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3081 * _2924.y;
                                frontier_phi_90_pred_1 = _3081 * _2924.x;
                                frontier_phi_90_pred_2 = _3111 * _2936.z;
                                frontier_phi_90_pred_3 = _3111 * _2936.y;
                                frontier_phi_90_pred_4 = _3111 * _2936.x;
                                frontier_phi_90_pred_5 = _3081 * _2924.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3119 = frontier_phi_90_pred;
                            _3118 = frontier_phi_90_pred_1;
                            _3117 = frontier_phi_90_pred_2;
                            _3116 = frontier_phi_90_pred_3;
                            _3115 = frontier_phi_90_pred_4;
                            _3120 = frontier_phi_90_pred_5;
                            _2866 = _3118 + _2879;
                            _2867 = _3119 + _2880;
                            _2868 = _3120 + _2881;
                            _2863 = _3115 + _2876;
                            _2864 = _3116 + _2877;
                            _2865 = _3117 + _2878;
                            if (_2883 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2883;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2867;
                        frontier_phi_84_pred_1 = _2866;
                        frontier_phi_84_pred_2 = _2865;
                        frontier_phi_84_pred_3 = _2864;
                        frontier_phi_84_pred_4 = _2863;
                        frontier_phi_84_pred_5 = _2868;
                    }
                    _2556 = frontier_phi_84_pred;
                    _2554 = frontier_phi_84_pred_1;
                    _2552 = frontier_phi_84_pred_2;
                    _2550 = frontier_phi_84_pred_3;
                    _2548 = frontier_phi_84_pred_4;
                    _2558 = frontier_phi_84_pred_5;
                    uint _2711 = _2710 + 1u;
                    if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2704 = _2548;
                        _2705 = _2550;
                        _2706 = _2552;
                        _2707 = _2554;
                        _2708 = _2556;
                        _2709 = _2558;
                        _2710 = _2711;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2558;
                frontier_phi_65_66_ladder_1 = _2554;
                frontier_phi_65_66_ladder_2 = _2556;
                frontier_phi_65_66_ladder_3 = _2550;
                frontier_phi_65_66_ladder_4 = _2548;
                frontier_phi_65_66_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_65_66_ladder = _2426;
                frontier_phi_65_66_ladder_1 = _2422;
                frontier_phi_65_66_ladder_2 = _2424;
                frontier_phi_65_66_ladder_3 = _2418;
                frontier_phi_65_66_ladder_4 = _2416;
                frontier_phi_65_66_ladder_5 = _2420;
            }
            _2547 = frontier_phi_65_66_ladder_4;
            _2549 = frontier_phi_65_66_ladder_3;
            _2551 = frontier_phi_65_66_ladder_5;
            _2553 = frontier_phi_65_66_ladder_1;
            _2555 = frontier_phi_65_66_ladder_2;
            _2557 = frontier_phi_65_66_ladder;
        }
        float _2562 = isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0));
        _2314 = (_2562 * _2553) + _1954;
        _2316 = (_2562 * _2555) + _1956;
        _2318 = (_2562 * _2557) + _1958;
        _2320 = ((_2547 * 0.039999999105930328369140625) * _2562) + _2196;
        _2322 = ((_2549 * 0.039999999105930328369140625) * _2562) + _2198;
        _2324 = ((_2551 * 0.039999999105930328369140625) * _2562) + _2200;
    }
    else
    {
        _2314 = _1954;
        _2316 = _1956;
        _2318 = _1958;
        _2320 = _2196;
        _2322 = _2198;
        _2324 = _2200;
    }
    uint _2330 = _384 + uint(cbMatDynParam._m0[0u].w);
    float _2338 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _232.x) * cbInstanceData._m0[_2330].x;
    float _2341 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _232.y) * cbInstanceData._m0[_2330].y;
    float _2344 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _232.z) * cbInstanceData._m0[_2330].z;
    float _4114 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _4125 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _4136 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _2361 = (((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2314 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _408))) + ((_2320 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + _2338;
    float _2363 = (_2341 + ((_2322 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2316 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _408)));
    float _2365 = (_2344 + ((_2324 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2318 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _408)));
    float _2366 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2367 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2374 = cbMtdParam._m0[2u].x * _2338;
    float _2375 = cbMtdParam._m0[2u].y * _2341;
    float _2376 = cbMtdParam._m0[2u].z * _2344;
    float _4162 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2378 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    uint _2379 = _382 + 6u;
    float _2387 = _342 / cbSceneParam._m0[86u].x;
    float _2388 = _343 / cbSceneParam._m0[86u].y;
    vec4 _2402 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2387, _2388, (log2((isnan(cbSceneParam._m0[77u].w) ? _263 : (isnan(_263) ? cbSceneParam._m0[77u].w : min(_263, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2404 = _2402.x;
    float _2405 = _2402.y;
    float _2406 = _2402.z;
    float _2407 = _2402.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_263 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_263) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _263 : min(cbSceneParam._m0[80u].w, _263));
        float _2442 = _2441 / _263;
        float _2453 = _2442 * _314;
        float _2454 = _315 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _316;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2661;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2661 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2605 = 1.0 / cbSceneParam._m0[80u].x;
            float _2606 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2607 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            _2661 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2616 - _2617) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0))))) * _2605)) - ((exp2(_2476 * _2616) - exp2(_2476 * _2617)) * _2605))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2387, _2388, 1.0), 0.0);
        float _2672 = exp2((_2661 * (-1.44269502162933349609375)) * (1.0 - _2663.w));
        float _2673 = log2(_2672);
        float _2689 = log2(_2407);
        _2478 = (exp2(_2689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].x)) * _2663.x) / cbSceneParam._m0[78u].x)) + _2404;
        _2480 = (exp2(_2689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].y)) * _2663.y) / cbSceneParam._m0[78u].y)) + _2405;
        _2482 = (exp2(_2689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].z)) * _2663.z) / cbSceneParam._m0[78u].z)) + _2406;
        _2484 = _2672 * _2407;
    }
    else
    {
        _2478 = _2404;
        _2480 = _2405;
        _2482 = _2406;
        _2484 = _2407;
    }
    bool _2699;
    vec4 _2494;
    vec4 _2517;
    float _2519;
    float _2523;
    float _2524;
    float _2525;
    float _2528;
    float _2531;
    float _2534;
    float _2535;
    bool _2546;
    for (;;)
    {
        _2494 = cbMatDynParam._m0[0u];
        float _2496 = roundEven(_2494.y);
        bool _2497 = _2496 == 3.0;
        float _2499 = log2(_2484);
        float _2503 = exp2(_2499 * cbSceneParam._m0[78u].x);
        float _2504 = exp2(_2499 * cbSceneParam._m0[78u].y);
        float _2505 = exp2(_2499 * cbSceneParam._m0[78u].z);
        float _2506 = _2503 * _2366;
        float _2507 = _2504 * _2367;
        float _2508 = _2505 * _2368;
        float _2515 = _330 + (-0.5);
        _2517 = cbMtdParam._m0[1u];
        _2519 = _2517.y * _2515;
        float _2522 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2523 = _2522 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2478)));
        _2524 = _2522 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2480)));
        _2525 = _2522 * (_2497 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2482)));
        _2528 = ((_2374 * _2378) * _2503) * _2522;
        _2531 = ((_2375 * _2378) * _2504) * _2522;
        _2534 = ((_2376 * _2378) * _2505) * _2522;
        _2535 = _2515 * 0.999000012874603271484375;
        _2546 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2546)
        {
            if ((cbInstanceData._m0[_382 + 7u].x + _2535) < 0.5)
            {
                _2699 = true;
                break;
            }
        }
        uint _2640 = _384 + uint(_2494.w);
        if ((cbInstanceData._m0[_2640].w < 1.0) && ((cbInstanceData._m0[_2640].w + _2535) < 0.5))
        {
            _2699 = true;
            break;
        }
        if ((_2519 + _207) < _2517.x)
        {
            _2699 = true;
            break;
        }
        _2699 = false;
        break;
    }
    float _2854;
    if (_2699)
    {
        discard_state = true;
        _2854 = 0.0;
    }
    else
    {
        _2854 = cbInstanceData._m0[_2379].w;
    }
    SV_Target.x = _2523;
    SV_Target.y = _2524;
    SV_Target.z = _2525;
    SV_Target.w = _2854;
    SV_Target_1.x = _2528;
    SV_Target_1.y = _2531;
    SV_Target_1.z = _2534;
    SV_Target_1.w = cbInstanceData._m0[_2379].w;
    discard_exit();
}


