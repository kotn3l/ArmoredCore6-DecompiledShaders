#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _849;
float _3521;
float _3522;
float _3523;
float _3524;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    float _245 = _238.x * cbMtdParam._m0[9u].x;
    float _246 = _238.y * cbMtdParam._m0[9u].y;
    float _247 = _238.z * cbMtdParam._m0[9u].z;
    float _248 = _244 * TEXCOORD_1.z;
    vec4 _264 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3533 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))));
    float _284 = fma(_281, _216, fma(_274, _208 * TANGENT.x, (_194 * _186) * _272));
    float _287 = fma(_281, _217, fma(_274, _208 * TANGENT.y, (_194 * _187) * _272));
    float _290 = fma(_281, _218, fma(_274, _208 * TANGENT.z, (_194 * _188) * _272));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _295 = _294 * _284;
    float _296 = _294 * _287;
    float _297 = _294 * _290;
    float _3544 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _298 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _299 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3577 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3588 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3599 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _303 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    vec4 _384 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _386 = _384.w;
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_297, cbSceneParam._m0[5u].z, fma(_296, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _295));
    float _417 = fma(_297, cbSceneParam._m0[6u].z, fma(_296, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _295));
    float _420 = fma(_297, cbSceneParam._m0[7u].z, fma(_296, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _295));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = _433 + 9u;
    uint _436 = _435 + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3610 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _448 = 1.0 - _303;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _303;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _303;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _303;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _474 = _471.x * TEXCOORD_1.w;
    float _475 = dot(vec3(_295, _296, _297), vec3(_377, _378, _379));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _295) - _377;
    float _483 = (_478 * _296) - _378;
    float _484 = (_478 * _297) - _379;
    float _488 = abs(dot(vec3(_377, _378, _379), vec3(_295, _296, _297)));
    float _3643 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_299);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _848;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _577 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _581 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _606 = _538 + _295;
        float _607 = _542 + _296;
        float _608 = _546 + _297;
        float _618 = fma(_608, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606)) - _573;
        float _619 = fma(_608, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606)) - _577;
        float _620 = fma(_608, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606)) - _581;
        float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
        float _637 = ((_624 * _618) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_573 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_624 * _619) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_577 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_624 * _620) / cbModelParam._m0[34u].z) + ((((((_581 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        float _676 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_642.x + (-0.5));
        float _678 = _676 * (_642.y + (-0.5));
        float _679 = _676 * (_642.z + (-0.5));
        float _686 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_649.x + (-0.5));
        float _688 = _686 * (_649.y + (-0.5));
        float _689 = _686 * (_649.z + (-0.5));
        float _696 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_656.x + (-0.5));
        float _698 = _696 * (_656.y + (-0.5));
        float _699 = _696 * (_656.z + (-0.5));
        float _706 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_663.x + (-0.5));
        float _708 = _706 * (_663.y + (-0.5));
        float _709 = _706 * (_663.z + (-0.5));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = _677 * 0.5;
        float _714 = _687 * 0.5;
        float _715 = _697 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _730 = (dot(vec3(_295, _296, _297), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _740 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3691 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_742 + 1.0))) + _747) * _710;
        float _757 = _678 * 0.5;
        float _758 = _688 * 0.5;
        float _759 = _698 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_295, _296, _297), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3724 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_784 + 1.0))) + _789) * _711;
        float _799 = _679 * 0.5;
        float _800 = _689 * 0.5;
        float _801 = _699 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_295, _296, _297), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3757 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_826 + 1.0))) + _831) * _712;
        _848 = _679;
        _850 = _678;
        _851 = _677;
        _852 = _689;
        _853 = _688;
        _854 = _687;
        _855 = _699;
        _856 = _698;
        _857 = _697;
        _858 = _712;
        _859 = _711;
        _860 = _710;
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
    }
    else
    {
        _848 = _849;
        _850 = _849;
        _851 = _849;
        _852 = _849;
        _853 = _849;
        _854 = _849;
        _855 = _849;
        _856 = _849;
        _857 = _849;
        _858 = _849;
        _859 = _849;
        _860 = _849;
        _861 = 0.0;
        _862 = 0.0;
        _863 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _893 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _897 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _920 = _538 + _295;
        float _921 = _542 + _296;
        float _922 = _546 + _297;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_295, _296, _297), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3820 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_295, _296, _297), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3853 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_295, _296, _297), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3886 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _849;
        _1159 = _849;
        _1160 = _849;
        _1161 = _849;
        _1162 = _849;
        _1163 = _849;
        _1164 = _849;
        _1165 = _849;
        _1166 = _849;
        _1167 = _849;
        _1168 = _849;
        _1169 = _849;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _852, _855, _858));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_850, _853, _856, _859));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_851, _854, _857, _860));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _299);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1358 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1361 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1389 = frontier_phi_16_14_ladder;
        }
        float _1565;
        if (_1358 > 0.0)
        {
            _1565 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1565 = frontier_phi_25_21_ladder;
        }
        float _1861;
        if (_1361 > 0.0)
        {
            _1861 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1861 = frontier_phi_37_32_ladder;
        }
        float _1863 = isnan(_1565) ? _1389 : (isnan(_1389) ? _1565 : min(_1389, _1565));
        float _1864 = isnan(_1861) ? _1863 : (isnan(_1863) ? _1861 : min(_1863, _1861));
        float _1868 = (_1864 * _1355) + _1344;
        float _1869 = (_1864 * _1358) + _1348;
        float _1870 = (_1864 * _1361) + _1352;
        float _1871 = _1864 * 9.9999997473787516355514526367188e-05;
        float _1873 = (-1.0) - _1871;
        float _1875 = _1871 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1870 > _1875) || ((_1870 < _1873) || ((_1869 > _1875) || ((_1869 < _1873) || ((_1868 < _1873) || (_1868 > _1875))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1870, cbModelParam._m0[9u].z, fma(_1869, cbModelParam._m0[9u].y, _1868 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1870, cbModelParam._m0[10u].z, fma(_1869, cbModelParam._m0[10u].y, _1868 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1870, cbModelParam._m0[11u].z, fma(_1869, cbModelParam._m0[11u].y, _1868 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_15_37_ladder = _2015.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2015.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2015.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_15_37_ladder_2;
        _1379 = frontier_phi_15_37_ladder_1;
        _1381 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _299);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1457 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1460 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1570;
        if (_1454 > 0.0)
        {
            _1570 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1570 = frontier_phi_27_23_ladder;
        }
        float _1888;
        if (_1457 > 0.0)
        {
            _1888 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1888 = frontier_phi_39_34_ladder;
        }
        float _2226;
        if (_1460 > 0.0)
        {
            _2226 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2226 = frontier_phi_49_46_ladder;
        }
        float _2228 = isnan(_1888) ? _1570 : (isnan(_1570) ? _1888 : min(_1570, _1888));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1454) + _1443;
        float _2234 = (_2229 * _1457) + _1447;
        float _2235 = (_2229 * _1460) + _1451;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2235, cbModelParam._m0[17u].z, fma(_2234, cbModelParam._m0[17u].y, _2233 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2235, cbModelParam._m0[18u].z, fma(_2234, cbModelParam._m0[18u].y, _2233 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2235, cbModelParam._m0[19u].z, fma(_2234, cbModelParam._m0[19u].y, _2233 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_24_49_ladder = _2357.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2357.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2357.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_24_49_ladder_2;
        _1481 = frontier_phi_24_49_ladder_1;
        _1483 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1386);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1496 = (((_509 * _459) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1500 = (((_509 * _462) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    float _1544 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1548 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1552 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1556 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1557 = _1544 / _1556;
    float _1558 = _1548 / _1556;
    float _1559 = _1552 / _1556;
    float _1706;
    float _1707;
    float _1708;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1586 = ((uint(_1559 > cbSceneParam._m0[59u].y) + uint(_1559 > cbSceneParam._m0[59u].x)) + uint(_1559 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1587 = _1586 + 43u;
        uint _1595 = _1586 + 44u;
        uint _1603 = _1586 + 45u;
        uint _1611 = _1586 + 46u;
        float _1622 = fma(_1556, cbSceneParam._m0[_1587].w, fma(_1552, cbSceneParam._m0[_1587].z, fma(_1548, cbSceneParam._m0[_1587].y, _1544 * cbSceneParam._m0[_1587].x)));
        float _1626 = fma(_1556, cbSceneParam._m0[_1595].w, fma(_1552, cbSceneParam._m0[_1595].z, fma(_1548, cbSceneParam._m0[_1595].y, _1544 * cbSceneParam._m0[_1595].x)));
        float _1634 = fma(_1556, cbSceneParam._m0[_1611].w, fma(_1552, cbSceneParam._m0[_1611].z, fma(_1548, cbSceneParam._m0[_1611].y, _1544 * cbSceneParam._m0[_1611].x)));
        float _1639 = cbSceneParam._m0[33u].z * _1634;
        float _1641 = cbSceneParam._m0[33u].w * _1634;
        float _1644 = fma(_1556, cbSceneParam._m0[_1603].w, fma(_1552, cbSceneParam._m0[_1603].z, fma(_1548, cbSceneParam._m0[_1603].y, _1544 * cbSceneParam._m0[_1603].x))) / _1634;
        float _1692 = (cbSceneParam._m0[33u].x - sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559))) * cbSceneParam._m0[33u].y;
        float _4012 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1699 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1639 + _1622) / _1634, (_1641 + _1626) / _1634), _1644), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 + _1622) / _1634, (_1626 - _1639) / _1634), _1644), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1622 - _1639) / _1634, (_1626 - _1641) / _1634), _1644), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1622 - _1641) / _1634, (_1639 + _1626) / _1634), _1644), 0.0)).x), vec4(0.25)));
        _1706 = 1.0 - (_1699 * cbSceneParam._m0[34u].x);
        _1707 = 1.0 - (_1699 * cbSceneParam._m0[34u].y);
        _1708 = 1.0 - (_1699 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1706 = 1.0;
        _1707 = 1.0;
        _1708 = 1.0;
    }
    float _1772;
    float _1774;
    float _1776;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1760 = fma(_1556, cbSceneParam._m0[63u].w, fma(_1552, cbSceneParam._m0[63u].z, fma(_1548, cbSceneParam._m0[63u].y, _1544 * cbSceneParam._m0[63u].x)));
        float _1761 = fma(_1556, cbSceneParam._m0[60u].w, fma(_1552, cbSceneParam._m0[60u].z, fma(_1548, cbSceneParam._m0[60u].y, _1544 * cbSceneParam._m0[60u].x))) / _1760;
        float _1762 = fma(_1556, cbSceneParam._m0[61u].w, fma(_1552, cbSceneParam._m0[61u].z, fma(_1548, cbSceneParam._m0[61u].y, _1544 * cbSceneParam._m0[61u].x))) / _1760;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1761 >= cbSceneParam._m0[64u].x) && (_1762 >= cbSceneParam._m0[64u].y)) && (_1761 <= cbSceneParam._m0[64u].z)) && (_1762 <= cbSceneParam._m0[64u].w))
        {
            float _1901 = fma(_1556, cbSceneParam._m0[62u].w, fma(_1552, cbSceneParam._m0[62u].z, fma(_1548, cbSceneParam._m0[62u].y, _1544 * cbSceneParam._m0[62u].x))) / _1760;
            float _1905 = isnan(cbSceneParam._m0[41u].w) ? _1901 : (isnan(_1901) ? cbSceneParam._m0[41u].w : max(_1901, cbSceneParam._m0[41u].w));
            float _1948 = (cbSceneParam._m0[33u].x - sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559))) * cbSceneParam._m0[33u].y;
            float _4028 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
            float _1955 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1761, cbSceneParam._m0[33u].w + _1762), _1905), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1761, _1762 - cbSceneParam._m0[33u].z), _1905), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1761 - cbSceneParam._m0[33u].z, _1762 - cbSceneParam._m0[33u].w), _1905), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1761 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1762), _1905), 0.0)).x), vec4(0.25)));
            float _1959 = 1.0 - (_1955 * cbSceneParam._m0[34u].x);
            float _1960 = 1.0 - (_1955 * cbSceneParam._m0[34u].y);
            float _1961 = 1.0 - (_1955 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
            frontier_phi_36_35_ladder_1 = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_36_35_ladder_2 = isnan(_1961) ? _1708 : (isnan(_1708) ? _1961 : min(_1708, _1961));
        }
        else
        {
            frontier_phi_36_35_ladder = _1707;
            frontier_phi_36_35_ladder_1 = _1706;
            frontier_phi_36_35_ladder_2 = _1708;
        }
        _1772 = frontier_phi_36_35_ladder_1;
        _1774 = frontier_phi_36_35_ladder;
        _1776 = frontier_phi_36_35_ladder_2;
    }
    else
    {
        _1772 = _1706;
        _1774 = _1707;
        _1776 = _1708;
    }
    uvec4 _1781 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1783 = _1781.x * 14u;
    uint _1784 = _1783 + 13u;
    float _1791 = _474 + (-1.0);
    float _1796 = (cbLight._m0[_1784].x * _1791) + 1.0;
    float _1797 = (cbLight._m0[_1784].y * _1791) + 1.0;
    float _1798 = (cbLight._m0[_1784].z * _1791) + 1.0;
    float _1799 = (cbLight._m0[_1784].w * _1791) + 1.0;
    uint _1800 = _1783 + 5u;
    float _1806 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1810 = _1783 + 4u;
    float _1820 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1824 = _1783 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_295, _296, _297));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_295, _296, _297));
    float _4064 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _4075 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1800].x * _1806) * _1845) + (((cbLight._m0[_1810].x * _1772) * _1820) * _1843);
    float _1853 = ((_1806 * cbLight._m0[_1800].y) * _1845) + (((cbLight._m0[_1810].y * _1774) * _1820) * _1843);
    float _1854 = ((_1806 * cbLight._m0[_1800].z) * _1845) + (((cbLight._m0[_1810].z * _1776) * _1820) * _1843);
    uvec4 _1858 = floatBitsToUint(cbLight._m0[_1783 + 12u]);
    bool _1860 = _1858.x == 0u;
    float _1962;
    float _1964;
    float _1966;
    if (_1860)
    {
        _1962 = _1852;
        _1964 = _1853;
        _1966 = _1854;
    }
    else
    {
        uint _1970 = _1783 + 6u;
        float _1986 = (dot(vec3(cbLight._m0[_1783 + 2u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1987 = _1986 * _1986;
        float _4086 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1988 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1989 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1962 = (((cbLight._m0[_1970].x * 0.3183098733425140380859375) * _1988) * _1989) + _1852;
        _1964 = (((cbLight._m0[_1970].y * 0.3183098733425140380859375) * _1988) * _1989) + _1853;
        _1966 = (((cbLight._m0[_1970].z * 0.3183098733425140380859375) * _1988) * _1989) + _1854;
    }
    bool _1969 = _1858.y == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_1969)
    {
        _2024 = _1962;
        _2026 = _1964;
        _2028 = _1966;
    }
    else
    {
        uint _2197 = _1783 + 7u;
        float _2213 = (dot(vec3(cbLight._m0[_1783 + 3u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4102 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2216 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2024 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _1962;
        _2026 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _1964;
        _2028 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _1966;
    }
    uint _2031 = _1783 + 8u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _299) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1783].x + _377;
    float _2047 = cbLight._m0[_1783].y + _378;
    float _2048 = cbLight._m0[_1783].z + _379;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1783].xyz));
    float _4118 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _2060 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2061 = dot(vec3(_295, _296, _297), vec3(_2053, _2054, _2055));
    float _4140 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_2053, _2054, _2055));
    float _4151 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2045 * _2045;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
    float _2082 = 0.959999978542327880859375 - _456;
    float _2084 = 0.959999978542327880859375 - _457;
    float _2085 = 0.959999978542327880859375 - _458;
    float _2092 = 1.0 - _2045;
    float _2103 = (0.5 / (((_2060 * ((_2059 * _2092) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2092) + _2045) * _2059))) * _2059;
    float _4162 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    uint _2119 = _1783 + 9u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _299) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1824].x + _377;
    float _2133 = cbLight._m0[_1824].y + _378;
    float _2134 = cbLight._m0[_1824].z + _379;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1824].xyz));
    float _4173 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2146 = dot(vec3(_295, _296, _297), vec3(_2139, _2140, _2141));
    float _4184 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2139, _2140, _2141));
    float _4195 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2131 * _2131;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2172 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2060 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2172) + _2131) * _2145))) * _2145;
    float _4206 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    float _2194 = (((((_2165 * _2082) + _459) * cbLight._m0[_2119].x) * _2184) * _1806) + ((((cbLight._m0[_2031].x * _1772) * ((_2081 * _2082) + _459)) * _2105) * _1820);
    float _2195 = (((((_2165 * _2084) + _461) * cbLight._m0[_2119].y) * _2184) * _1806) + ((((cbLight._m0[_2031].y * _1774) * ((_2081 * _2084) + _461)) * _2105) * _1820);
    float _2196 = (((((_2165 * _2085) + _462) * cbLight._m0[_2119].z) * _2184) * _1806) + ((((cbLight._m0[_2031].z * _1776) * ((_2081 * _2085) + _462)) * _2105) * _1820);
    float _2252;
    float _2254;
    float _2256;
    if (_1860)
    {
        _2252 = _2194;
        _2254 = _2195;
        _2256 = _2196;
    }
    else
    {
        uint _2258 = _1783 + 2u;
        uint _2262 = _1783 + 10u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _299) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _377;
        float _2279 = cbLight._m0[_2258].y + _378;
        float _2280 = cbLight._m0[_2258].z + _379;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2258].xyz));
        float _4217 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2292 = dot(vec3(_295, _296, _297), vec3(_2285, _2286, _2287));
        float _4228 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4239 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
        float _2318 = 1.0 - _2277;
        float _2328 = (0.5 / (((_2060 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2318) + _2277) * _2291))) * _2291;
        float _4250 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2252 = (((((_2311 * _2082) + _459) * cbLight._m0[_2262].x) * _2330) * _2331) + _2194;
        _2254 = (((((_2311 * _2084) + _461) * cbLight._m0[_2262].y) * _2330) * _2331) + _2195;
        _2256 = (((((_2311 * _2085) + _462) * cbLight._m0[_2262].z) * _2330) * _2331) + _2196;
    }
    float _2362;
    float _2364;
    float _2366;
    if (_1969)
    {
        _2362 = _2252;
        _2364 = _2254;
        _2366 = _2256;
    }
    else
    {
        uint _2373 = _1783 + 3u;
        uint _2377 = _1783 + 11u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _299) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _377;
        float _2394 = cbLight._m0[_2373].y + _378;
        float _2395 = cbLight._m0[_2373].z + _379;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2373].xyz));
        float _4266 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2407 = dot(vec3(_295, _296, _297), vec3(_2400, _2401, _2402));
        float _4277 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4288 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
        float _2433 = 1.0 - _2392;
        float _2443 = (0.5 / (((_2060 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2433) + _2392) * _2406))) * _2406;
        float _4299 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2445 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2446 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2362 = (((((_2426 * _2082) + _459) * cbLight._m0[_2377].x) * _2445) * _2446) + _2252;
        _2364 = (((((_2426 * _2084) + _461) * cbLight._m0[_2377].y) * _2445) * _2446) + _2254;
        _2366 = (((((_2426 * _2085) + _462) * cbLight._m0[_2377].z) * _2445) * _2446) + _2256;
    }
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_1781.y == 0u)
    {
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2468)));
        float _2489 = (log2(_1559 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
        }
        else
        {
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            uint _2738 = 0u;
            uint _2747;
            bool _2748;
            for (;;)
            {
                _2747 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                _2748 = _2747 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2748)
                {
                    frontier_phi_70_pred = _2737;
                    frontier_phi_70_pred_1 = _2736;
                    frontier_phi_70_pred_2 = _2735;
                    frontier_phi_70_pred_3 = _2734;
                    frontier_phi_70_pred_4 = _2733;
                    frontier_phi_70_pred_5 = _2732;
                }
                else
                {
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    uint _2884;
                    _2878 = _2732;
                    _2879 = _2733;
                    _2880 = _2734;
                    _2881 = _2735;
                    _2882 = _2736;
                    _2883 = _2737;
                    _2884 = _2747;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2888 = uint(findLSB(_2884)) + (_2738 << 5u);
                        uint _2885 = (_2884 + 4294967295u) & _2884;
                        uint _2890 = _2888 * 48u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2910 = (_2888 * 48u) + 4u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2929 = (_2888 * 48u) + 8u;
                        vec3 _2940 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x));
                        float _2944 = _2904.x - _1557;
                        float _2945 = _2904.y - _1558;
                        float _2946 = _2904.z - _1559;
                        float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                        float _2950 = inversesqrt(_2947);
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2954 = dot(vec3(_414, _417, _420), vec3(_2951, _2952, _2953));
                        float _2959 = 1.0 - (_2947 * _2904.w);
                        float _4325 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _2961 = sqrt(_2947) * _2923.w;
                        float _2964 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2954) + _2965;
                        float _2971 = _2961 * _2961;
                        float _2975 = ((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2960) / ((_2971 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _1557;
                        float _2980 = (-0.0) - _1558;
                        float _2981 = (-0.0) - _1559;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2995 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                        float _2996 = 1.0 - _490;
                        float _3003 = sqrt(1.0 - ((1.0 - (_2996 * _2996)) * (1.0 - (_2995 * _2995))));
                        float _3004 = _3003 * _3003;
                        float _3005 = _3004 * _3004;
                        float _3006 = _2986 + _2951;
                        float _3007 = _2987 + _2952;
                        float _3008 = _2988 + _2953;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3016 = dot(vec3(_414, _417, _420), vec3(_2986, _2987, _2988));
                        float _4341 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3020 = dot(vec3(_414, _417, _420), vec3(_3012 * _3006, _3012 * _3007, _3012 * _3008));
                        float _4352 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3027 = ((_3023 * _3023) * (_3005 + (-1.0))) + 1.0;
                        float _3028 = _2964 * _3004;
                        float _3029 = _3028 * _3028;
                        float _3032 = ((1.0 - _3029) * _2954) + _3029;
                        float _4363 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3033 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3034 = 1.0 - _3004;
                        float _3044 = (0.5 / (((_3033 * ((_3019 * _3034) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3004) * _3019))) * _3033;
                        float _4374 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3055 = (((_3005 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3027 * _3027) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125))) * _2960;
                        _2807 = (_2975 * _2923.x) + _2881;
                        _2808 = (_2975 * _2923.y) + _2882;
                        _2809 = (_2975 * _2923.z) + _2883;
                        _2804 = (_3055 * _2940.x) + _2878;
                        _2805 = (_3055 * _2940.y) + _2879;
                        _2806 = (_3055 * _2940.z) + _2880;
                        if (_2885 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2878 = _2804;
                            _2879 = _2805;
                            _2880 = _2806;
                            _2881 = _2807;
                            _2882 = _2808;
                            _2883 = _2809;
                            _2884 = _2885;
                        }
                    }
                    frontier_phi_70_pred = _2809;
                    frontier_phi_70_pred_1 = _2808;
                    frontier_phi_70_pred_2 = _2807;
                    frontier_phi_70_pred_3 = _2806;
                    frontier_phi_70_pred_4 = _2805;
                    frontier_phi_70_pred_5 = _2804;
                }
                _2591 = frontier_phi_70_pred;
                _2589 = frontier_phi_70_pred_1;
                _2587 = frontier_phi_70_pred_2;
                _2585 = frontier_phi_70_pred_3;
                _2583 = frontier_phi_70_pred_4;
                _2581 = frontier_phi_70_pred_5;
                uint _2739 = _2738 + 1u;
                if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2732 = _2581;
                    _2733 = _2583;
                    _2734 = _2585;
                    _2735 = _2587;
                    _2736 = _2589;
                    _2737 = _2591;
                    _2738 = _2739;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
        }
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.z;
        uint _2597 = (_2595 >> 8u) & 15u;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((4294967295u << _2597) & _2499) == 0u)
        {
            _2700 = _2580;
            _2702 = _2582;
            _2704 = _2584;
            _2706 = _2586;
            _2708 = _2588;
            _2710 = _2590;
        }
        else
        {
            float _2725 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
            float _2726 = _2725 * _1557;
            float _2727 = _2725 * _1558;
            float _2728 = _2725 * _1559;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2597 < ((_2595 >> 12u) & 15u))
            {
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2861 = _2580;
                float _2862 = _2582;
                float _2863 = _2584;
                float _2864 = _2586;
                float _2865 = _2588;
                float _2866 = _2590;
                uint _2867 = _2597;
                uint _2876;
                bool _2877;
                for (;;)
                {
                    _2876 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                    _2877 = _2876 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2877)
                    {
                        frontier_phi_81_pred = _2865;
                        frontier_phi_81_pred_1 = _2864;
                        frontier_phi_81_pred_2 = _2863;
                        frontier_phi_81_pred_3 = _2862;
                        frontier_phi_81_pred_4 = _2861;
                        frontier_phi_81_pred_5 = _2866;
                    }
                    else
                    {
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3084 = _2861;
                        float _3085 = _2862;
                        float _3086 = _2863;
                        float _3087 = _2864;
                        float _3088 = _2865;
                        float _3089 = _2866;
                        uint _3090 = _2876;
                        uint _3091;
                        vec4 _3116;
                        float _3117;
                        vec4 _3132;
                        vec3 _3144;
                        vec4 _3160;
                        vec4 _3176;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3101 = ((_2867 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3090));
                            _3091 = (_3090 + 4294967295u) & _3090;
                            uint _3103 = _3101 * 40u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3117 = _3116.w;
                            uint _3119 = (_3101 * 40u) + 4u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3101 * 40u) + 8u;
                            _3144 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x));
                            uint _3147 = (_3101 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3101 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3101 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3101 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_1559, _3211.z, fma(_1558, _3211.y, _3211.x * _1557)) + _3211.w;
                            _3224 = !((fma(_1559, _3192.z, fma(_1558, _3192.y, _3192.x * _1557)) + _3192.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3116.x - _1557;
                                float _3252 = _3116.y - _1558;
                                float _3253 = _3116.z - _1559;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3117 * _3117));
                                float _4385 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3269 = sqrt(_3254) * _3132.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_414, _417, _420))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_1559, _3160.z, fma(_1558, _3160.y, _3160.x * _1557)) + _3160.w) / _3223;
                                float _3283 = (fma(_1559, _3176.z, fma(_1558, _3176.y, _3176.x * _1557)) + _3176.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4401 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _490;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2726;
                                float _3313 = _3259 - _2727;
                                float _3314 = _3260 - _2728;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2726, (-0.0) - _2727, (-0.0) - _2728));
                                float _4412 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3326 = dot(vec3(_414, _417, _420), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4423 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_414, _417, _420), vec3(_3258, _3259, _3260))) + _3335;
                                float _4434 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4445 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3289 * _3132.y;
                                frontier_phi_87_pred_1 = _3289 * _3132.x;
                                frontier_phi_87_pred_2 = _3363 * _3144.z;
                                frontier_phi_87_pred_3 = _3363 * _3144.y;
                                frontier_phi_87_pred_4 = _3363 * _3144.x;
                                frontier_phi_87_pred_5 = _3289 * _3132.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_87_pred;
                            _3370 = frontier_phi_87_pred_1;
                            _3369 = frontier_phi_87_pred_2;
                            _3368 = frontier_phi_87_pred_3;
                            _3367 = frontier_phi_87_pred_4;
                            _3372 = frontier_phi_87_pred_5;
                            _3074 = _3370 + _3087;
                            _3075 = _3371 + _3088;
                            _3076 = _3372 + _3089;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3073 = _3369 + _3086;
                            if (_3091 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3091;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3075;
                        frontier_phi_81_pred_1 = _3074;
                        frontier_phi_81_pred_2 = _3073;
                        frontier_phi_81_pred_3 = _3072;
                        frontier_phi_81_pred_4 = _3071;
                        frontier_phi_81_pred_5 = _3076;
                    }
                    _2709 = frontier_phi_81_pred;
                    _2707 = frontier_phi_81_pred_1;
                    _2705 = frontier_phi_81_pred_2;
                    _2703 = frontier_phi_81_pred_3;
                    _2701 = frontier_phi_81_pred_4;
                    _2711 = frontier_phi_81_pred_5;
                    uint _2868 = _2867 + 1u;
                    if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2861 = _2701;
                        _2862 = _2703;
                        _2863 = _2705;
                        _2864 = _2707;
                        _2865 = _2709;
                        _2866 = _2711;
                        _2867 = _2868;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2711;
                frontier_phi_62_63_ladder_1 = _2707;
                frontier_phi_62_63_ladder_2 = _2709;
                frontier_phi_62_63_ladder_3 = _2703;
                frontier_phi_62_63_ladder_4 = _2701;
                frontier_phi_62_63_ladder_5 = _2705;
            }
            else
            {
                frontier_phi_62_63_ladder = _2590;
                frontier_phi_62_63_ladder_1 = _2586;
                frontier_phi_62_63_ladder_2 = _2588;
                frontier_phi_62_63_ladder_3 = _2582;
                frontier_phi_62_63_ladder_4 = _2580;
                frontier_phi_62_63_ladder_5 = _2584;
            }
            _2700 = frontier_phi_62_63_ladder_4;
            _2702 = frontier_phi_62_63_ladder_3;
            _2704 = frontier_phi_62_63_ladder_5;
            _2706 = frontier_phi_62_63_ladder_1;
            _2708 = frontier_phi_62_63_ladder_2;
            _2710 = frontier_phi_62_63_ladder;
        }
        float _2715 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2511 = (_2715 * _2706) + _2024;
        _2513 = (_2715 * _2708) + _2026;
        _2515 = (_2715 * _2710) + _2028;
        _2517 = ((_2700 * _459) * _2715) + _2362;
        _2519 = ((_2702 * _461) * _2715) + _2364;
        _2521 = ((_2704 * _462) * _2715) + _2366;
    }
    else
    {
        _2511 = _2024;
        _2513 = _2026;
        _2515 = _2028;
        _2517 = _2362;
        _2519 = _2364;
        _2521 = _2366;
    }
    float _4461 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4472 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4483 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4494 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _2539 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2511 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _474))) + ((_2517 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2540 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2513 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _474))) + ((_2519 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2515 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _474))) + ((_2521 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2546 = cbInstanceData._m0[_433 + 6u].w * (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)));
    float _2551 = _392 / cbSceneParam._m0[86u].x;
    float _2552 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2605 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2606 = _2605 / _319;
        float _2617 = _2606 * _370;
        float _2618 = _371 * _2606;
        float _2619 = (-0.0) - _2618;
        float _2620 = _2606 * _372;
        float _2622 = (cbSceneParam._m0[77u].w * _2619) / _2605;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2618;
        float _2630 = sqrt(((_2617 * _2617) + (_2618 * _2618)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2605)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2619 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2761 = 1.0 / cbSceneParam._m0[80u].x;
            float _2762 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2763 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            _2817 = ((abs(_2630 / _2619) * cbSceneParam._m0[80u].y) * ((((_2772 - _2773) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))))) * _2761)) - ((exp2(_2640 * _2772) - exp2(_2640 * _2773)) * _2761))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2571);
        _2642 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2644 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2646 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2648 = _2828 * _2571;
    }
    else
    {
        _2642 = _2568;
        _2644 = _2569;
        _2646 = _2570;
        _2648 = _2571;
    }
    bool _2855;
    vec4 _2658;
    vec4 _2680;
    float _2682;
    float _2686;
    float _2687;
    float _2688;
    float _2689;
    bool _2699;
    for (;;)
    {
        _2658 = cbMatDynParam._m0[0u];
        float _2660 = roundEven(_2658.y);
        bool _2661 = _2660 == 3.0;
        float _2662 = log2(_2648);
        float _2669 = exp2(_2662 * cbSceneParam._m0[78u].x) * _2539;
        float _2670 = exp2(_2662 * cbSceneParam._m0[78u].y) * _2540;
        float _2671 = exp2(_2662 * cbSceneParam._m0[78u].z) * _2541;
        float _2678 = _386 + (-0.5);
        _2680 = cbMtdParam._m0[1u];
        _2682 = _2680.y * _2678;
        float _2685 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2686 = _2685 * (_2661 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2642)));
        _2687 = _2685 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2644)));
        _2688 = _2685 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2646)));
        _2689 = _2678 * 0.999000012874603271484375;
        _2699 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2699)
        {
            if ((cbInstanceData._m0[_433 + 7u].x + _2689) < 0.5)
            {
                _2855 = true;
                break;
            }
        }
        uint _2796 = _435 + uint(_2658.w);
        if ((cbInstanceData._m0[_2796].w < 1.0) && ((cbInstanceData._m0[_2796].w + _2689) < 0.5))
        {
            _2855 = true;
            break;
        }
        if ((_2682 + _244) < _2680.x)
        {
            _2855 = true;
            break;
        }
        _2855 = false;
        break;
    }
    float _3062;
    if (_2855)
    {
        discard_state = true;
        _3062 = 0.0;
    }
    else
    {
        _3062 = _2546;
    }
    SV_Target.x = _2686;
    SV_Target.y = _2687;
    SV_Target.z = _2688;
    SV_Target.w = _3062;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2546;
    discard_exit();
}


