#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _834;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _230.x * cbMtdParam._m0[9u].x;
    float _238 = _230.y * cbMtdParam._m0[9u].y;
    float _239 = _230.z * cbMtdParam._m0[9u].z;
    float _240 = _230.w * TEXCOORD_1.z;
    vec4 _256 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3173 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0))));
    float _276 = fma(_273, _208, fma(_266, _200 * TANGENT.x, (_186 * _178) * _264));
    float _279 = fma(_273, _209, fma(_266, _200 * TANGENT.y, (_186 * _179) * _264));
    float _282 = fma(_273, _210, fma(_266, _200 * TANGENT.z, (_186 * _180) * _264));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3184 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _290 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
    float _3195 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _291 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _3206 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3217 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3228 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3239 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _295 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _402 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _405 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3250 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _3272 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _433 = 1.0 - _295;
    float _434 = _430 * _433;
    float _435 = _431 * _433;
    float _436 = _432 * _433;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _295;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _295;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _295;
    float _444 = _441 + 0.039999999105930328369140625;
    float _446 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    vec4 _456 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _459 = _456.x * TEXCOORD_1.w;
    float _460 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _287) - _369;
    float _468 = (_463 * _288) - _370;
    float _469 = (_463 * _289) - _371;
    float _473 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3283 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _475 = sqrt(_291);
    float _488 = exp2((_475 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_475 * 3.0));
    float _494 = (1.0 - _488) * ((_475 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _495 = _488 * _475;
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _833;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _558 = fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523));
        float _562 = fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523));
        float _566 = fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523));
        float _591 = _523 + _287;
        float _592 = _527 + _288;
        float _593 = _531 + _289;
        float _603 = fma(_593, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) - _558;
        float _604 = fma(_593, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) - _562;
        float _605 = fma(_593, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) - _566;
        float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
        float _622 = ((_609 * _603) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_558 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_609 * _604) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_562 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_609 * _605) / cbModelParam._m0[34u].z) + ((((((_566 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        float _661 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_627.x + (-0.5));
        float _663 = _661 * (_627.y + (-0.5));
        float _664 = _661 * (_627.z + (-0.5));
        float _671 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_634.x + (-0.5));
        float _673 = _671 * (_634.y + (-0.5));
        float _674 = _671 * (_634.z + (-0.5));
        float _681 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_641.x + (-0.5));
        float _683 = _681 * (_641.y + (-0.5));
        float _684 = _681 * (_641.z + (-0.5));
        float _691 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_648.x + (-0.5));
        float _693 = _691 * (_648.y + (-0.5));
        float _694 = _691 * (_648.z + (-0.5));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = _662 * 0.5;
        float _699 = _672 * 0.5;
        float _700 = _682 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _715 = (dot(vec3(_287, _288, _289), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _725 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3331 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_727 + 1.0))) + _732) * _695;
        float _742 = _663 * 0.5;
        float _743 = _673 * 0.5;
        float _744 = _683 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_287, _288, _289), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3364 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_769 + 1.0))) + _774) * _696;
        float _784 = _664 * 0.5;
        float _785 = _674 * 0.5;
        float _786 = _684 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_287, _288, _289), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3397 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_811 + 1.0))) + _816) * _697;
        _833 = _664;
        _835 = _663;
        _836 = _662;
        _837 = _674;
        _838 = _673;
        _839 = _672;
        _840 = _684;
        _841 = _683;
        _842 = _682;
        _843 = _697;
        _844 = _696;
        _845 = _695;
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    }
    else
    {
        _833 = _834;
        _835 = _834;
        _836 = _834;
        _837 = _834;
        _838 = _834;
        _839 = _834;
        _840 = _834;
        _841 = _834;
        _842 = _834;
        _843 = _834;
        _844 = _834;
        _845 = _834;
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
    }
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _874 = fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523));
        float _878 = fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523));
        float _882 = fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523));
        float _905 = _523 + _287;
        float _906 = _527 + _288;
        float _907 = _531 + _289;
        float _917 = fma(_907, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905)) - _874;
        float _918 = fma(_907, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905)) - _878;
        float _919 = fma(_907, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905)) - _882;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_874 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_878 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[35u].z) + ((((((_882 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _973 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_940.x + (-0.5));
        float _975 = _973 * (_940.y + (-0.5));
        float _976 = _973 * (_940.z + (-0.5));
        float _983 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_947.x + (-0.5));
        float _985 = _983 * (_947.y + (-0.5));
        float _986 = _983 * (_947.z + (-0.5));
        float _993 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_954.x + (-0.5));
        float _995 = _993 * (_954.y + (-0.5));
        float _996 = _993 * (_954.z + (-0.5));
        float _1003 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_961.x + (-0.5));
        float _1005 = _1003 * (_961.y + (-0.5));
        float _1006 = _1003 * (_961.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_287, _288, _289), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3460 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1037 + 1.0))) + _1042) * _1007;
        float _1052 = _975 * 0.5;
        float _1053 = _985 * 0.5;
        float _1054 = _995 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_287, _288, _289), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3493 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1079 + 1.0))) + _1084) * _1008;
        float _1094 = _976 * 0.5;
        float _1095 = _986 * 0.5;
        float _1096 = _996 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_287, _288, _289), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3526 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1121 + 1.0))) + _1126) * _1009;
        _1143 = _976;
        _1144 = _975;
        _1145 = _974;
        _1146 = _986;
        _1147 = _985;
        _1148 = _984;
        _1149 = _996;
        _1150 = _995;
        _1151 = _994;
        _1152 = _1009;
        _1153 = _1008;
        _1154 = _1007;
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _834;
        _1144 = _834;
        _1145 = _834;
        _1146 = _834;
        _1147 = _834;
        _1148 = _834;
        _1149 = _834;
        _1150 = _834;
        _1151 = _834;
        _1152 = _834;
        _1153 = _834;
        _1154 = _834;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1190 = fma(_1169, cbSceneParam._m0[89u].z, fma(_1168, cbSceneParam._m0[89u].y, _1167 * cbSceneParam._m0[89u].x));
    float _1193 = fma(_1169, cbSceneParam._m0[90u].z, fma(_1168, cbSceneParam._m0[90u].y, _1167 * cbSceneParam._m0[90u].x));
    float _1196 = fma(_1169, cbSceneParam._m0[91u].z, fma(_1168, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1167));
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1217 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1220 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1254;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1227 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_833, _837, _840, _843));
        float _1231 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_835, _838, _841, _844));
        float _1235 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_836, _839, _842, _845));
        float _1242 = dot(vec4(cbModelParam._m0[39u]), vec4(_1211, _1212, _1213, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1265;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1256 = dot(vec4(cbModelParam._m0[40u]), vec4(_1211, _1212, _1213, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1269 = (_1265 * cbModelParam._m0[1u].x) + (_1254 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1280 = isnan(_1279) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1279 : min(cbModelParam._m0[25u].z, _1279));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1329 = fma(_531, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523)) + cbModelParam._m0[13u].w;
        float _1333 = fma(_531, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523)) + cbModelParam._m0[14u].w;
        float _1337 = fma(_531, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523)) + cbModelParam._m0[15u].w;
        float _1340 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1343 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1346 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1374;
        if (_1340 > 0.0)
        {
            _1374 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1374 = frontier_phi_16_14_ladder;
        }
        float _1582;
        if (_1343 > 0.0)
        {
            _1582 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1582 = frontier_phi_25_21_ladder;
        }
        float _1836;
        if (_1346 > 0.0)
        {
            _1836 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1836 = frontier_phi_37_32_ladder;
        }
        float _1838 = isnan(_1582) ? _1374 : (isnan(_1374) ? _1582 : min(_1374, _1582));
        float _1839 = isnan(_1836) ? _1838 : (isnan(_1838) ? _1836 : min(_1838, _1836));
        float _1843 = (_1839 * _1340) + _1329;
        float _1844 = (_1839 * _1343) + _1333;
        float _1845 = (_1839 * _1346) + _1337;
        float _1846 = _1839 * 9.9999997473787516355514526367188e-05;
        float _1848 = (-1.0) - _1846;
        float _1850 = _1846 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1845 > _1850) || ((_1845 < _1848) || ((_1844 > _1850) || ((_1844 < _1848) || ((_1843 < _1848) || (_1843 > _1850))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1845, cbModelParam._m0[9u].z, fma(_1844, cbModelParam._m0[9u].y, _1843 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1845, cbModelParam._m0[10u].z, fma(_1844, cbModelParam._m0[10u].y, _1843 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1845, cbModelParam._m0[11u].z, fma(_1844, cbModelParam._m0[11u].y, _1843 * cbModelParam._m0[11u].x))), _1280);
            frontier_phi_15_37_ladder = _1973.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1973.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1973.x * cbModelParam._m0[1u].y;
        }
        _1362 = frontier_phi_15_37_ladder_2;
        _1364 = frontier_phi_15_37_ladder_1;
        _1366 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1280);
        _1362 = _1350.x * cbModelParam._m0[1u].y;
        _1364 = _1350.y * cbModelParam._m0[1u].y;
        _1366 = _1350.z * cbModelParam._m0[1u].y;
    }
    float _1370 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1370 : min(cbModelParam._m0[25u].w, _1370));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1428 = fma(_531, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523)) + cbModelParam._m0[21u].w;
        float _1432 = fma(_531, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523)) + cbModelParam._m0[22u].w;
        float _1436 = fma(_531, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523)) + cbModelParam._m0[23u].w;
        float _1439 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1442 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1445 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1587;
        if (_1439 > 0.0)
        {
            _1587 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1587 = frontier_phi_27_23_ladder;
        }
        float _1863;
        if (_1442 > 0.0)
        {
            _1863 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1863 = frontier_phi_39_34_ladder;
        }
        float _2076;
        if (_1445 > 0.0)
        {
            _2076 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2076 = frontier_phi_48_45_ladder;
        }
        float _2078 = isnan(_1863) ? _1587 : (isnan(_1587) ? _1863 : min(_1587, _1863));
        float _2079 = isnan(_2076) ? _2078 : (isnan(_2078) ? _2076 : min(_2078, _2076));
        float _2083 = (_2079 * _1439) + _1428;
        float _2084 = (_2079 * _1442) + _1432;
        float _2085 = (_2079 * _1445) + _1436;
        float _2086 = _2079 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2086;
        float _2089 = _2086 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2085 > _2089) || ((_2085 < _2087) || ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 < _2087) || (_2083 > _2089))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2085, cbModelParam._m0[17u].z, fma(_2084, cbModelParam._m0[17u].y, _2083 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2085, cbModelParam._m0[18u].z, fma(_2084, cbModelParam._m0[18u].y, _2083 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2085, cbModelParam._m0[19u].z, fma(_2084, cbModelParam._m0[19u].y, _2083 * cbModelParam._m0[19u].x))), _1371);
            frontier_phi_24_48_ladder = _2285.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2285.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2285.x * cbModelParam._m0[1u].z;
        }
        _1464 = frontier_phi_24_48_ladder_2;
        _1466 = frontier_phi_24_48_ladder_1;
        _1468 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1371);
        _1464 = _1448.x * cbModelParam._m0[1u].z;
        _1466 = _1448.y * cbModelParam._m0[1u].z;
        _1468 = _1448.z * cbModelParam._m0[1u].z;
    }
    float _1481 = (((_494 * _444) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_494 * _446) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_494 * _447) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1488 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, _1481 * cbSceneParam._m0[91u].x));
    uvec4 _1504 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1506 = _1504.x * 14u;
    uint _1507 = _1506 + 13u;
    float _1514 = _459 + (-1.0);
    float _1519 = (cbLight._m0[_1507].x * _1514) + 1.0;
    float _1520 = (cbLight._m0[_1507].y * _1514) + 1.0;
    float _1521 = (cbLight._m0[_1507].z * _1514) + 1.0;
    float _1522 = (cbLight._m0[_1507].w * _1514) + 1.0;
    uint _1523 = _1506 + 5u;
    float _1529 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
    uint _1533 = _1506 + 4u;
    float _1540 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
    uint _1544 = _1506 | 1u;
    float _1555 = dot(vec3(cbLight._m0[_1506].xyz), vec3(_287, _288, _289));
    float _1558 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_287, _288, _289));
    float _3662 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
    float _3673 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
    float _1563 = (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.3183098733425140380859375;
    float _1565 = (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.3183098733425140380859375;
    float _1572 = ((cbLight._m0[_1523].x * _1529) * _1565) + ((cbLight._m0[_1533].x * _1540) * _1563);
    float _1573 = ((_1529 * cbLight._m0[_1523].y) * _1565) + ((_1540 * cbLight._m0[_1533].y) * _1563);
    float _1574 = ((_1529 * cbLight._m0[_1523].z) * _1565) + ((_1540 * cbLight._m0[_1533].z) * _1563);
    uvec4 _1579 = floatBitsToUint(cbLight._m0[_1506 + 12u]);
    bool _1581 = _1579.x == 0u;
    float _1592;
    float _1594;
    float _1596;
    if (_1581)
    {
        _1592 = _1572;
        _1594 = _1573;
        _1596 = _1574;
    }
    else
    {
        uint _1600 = _1506 + 6u;
        float _1616 = (dot(vec3(cbLight._m0[_1506 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1617 = _1616 * _1616;
        float _3684 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1619 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1592 = (((cbLight._m0[_1600].x * 0.3183098733425140380859375) * _1618) * _1619) + _1572;
        _1594 = (((cbLight._m0[_1600].y * 0.3183098733425140380859375) * _1618) * _1619) + _1573;
        _1596 = (((cbLight._m0[_1600].z * 0.3183098733425140380859375) * _1618) * _1619) + _1574;
    }
    bool _1599 = _1579.y == 0u;
    float _1637;
    float _1639;
    float _1641;
    if (_1599)
    {
        _1637 = _1592;
        _1639 = _1594;
        _1641 = _1596;
    }
    else
    {
        uint _1807 = _1506 + 7u;
        float _1823 = (dot(vec3(cbLight._m0[_1506 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1824 = _1823 * _1823;
        float _3700 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1826 = isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0));
        _1637 = (((cbLight._m0[_1807].x * 0.3183098733425140380859375) * _1825) * _1826) + _1592;
        _1639 = (((cbLight._m0[_1807].y * 0.3183098733425140380859375) * _1825) * _1826) + _1594;
        _1641 = (((cbLight._m0[_1807].z * 0.3183098733425140380859375) * _1825) * _1826) + _1596;
    }
    uint _1644 = _1506 + 8u;
    float _1657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1506].w)) * _291) * 0.949999988079071044921875);
    float _1658 = _1657 * _1657;
    float _1659 = cbLight._m0[_1506].x + _369;
    float _1660 = cbLight._m0[_1506].y + _370;
    float _1661 = cbLight._m0[_1506].z + _371;
    float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
    float _1666 = _1665 * _1659;
    float _1667 = _1665 * _1660;
    float _1668 = _1665 * _1661;
    float _1669 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1506].xyz));
    float _3716 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1673 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1674 = dot(vec3(_287, _288, _289), vec3(_1666, _1667, _1668));
    float _3738 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1677 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _1678 = dot(vec3(cbLight._m0[_1506].xyz), vec3(_1666, _1667, _1668));
    float _3749 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1682 = _1658 * _1658;
    float _1686 = ((_1677 * _1677) * (_1682 + (-1.0))) + 1.0;
    float _1694 = exp2(log2(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * 5.0);
    float _1695 = 0.959999978542327880859375 - _441;
    float _1697 = 0.959999978542327880859375 - _442;
    float _1698 = 0.959999978542327880859375 - _443;
    float _1705 = 1.0 - _1658;
    float _1716 = (0.5 / (((_1673 * ((_1672 * _1705) + _1658)) + 9.9999999392252902907785028219223e-09) + (((_1673 * _1705) + _1658) * _1672))) * _1672;
    float _3760 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1718 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1682 / ((_1686 * _1686) * 3.141590118408203125));
    uint _1729 = _1506 + 9u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1544].w)) * _291) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1544].x + _369;
    float _1743 = cbLight._m0[_1544].y + _370;
    float _1744 = cbLight._m0[_1544].z + _371;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1544].xyz));
    float _3771 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1756 = dot(vec3(_287, _288, _289), vec3(_1749, _1750, _1751));
    float _3782 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_1749, _1750, _1751));
    float _3793 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1764 = _1741 * _1741;
    float _1768 = ((_1759 * _1759) * (_1764 + (-1.0))) + 1.0;
    float _1775 = exp2(log2(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * 5.0);
    float _1782 = 1.0 - _1741;
    float _1792 = (0.5 / (((_1673 * ((_1755 * _1782) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1673 * _1782) + _1741) * _1755))) * _1755;
    float _3804 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1764 / ((_1768 * _1768) * 3.141590118408203125));
    float _1804 = (((((_1775 * _1695) + _444) * cbLight._m0[_1729].x) * _1794) * _1529) + (((((_1694 * _1695) + _444) * cbLight._m0[_1644].x) * _1718) * _1540);
    float _1805 = (((((_1775 * _1697) + _446) * cbLight._m0[_1729].y) * _1794) * _1529) + (((((_1694 * _1697) + _446) * cbLight._m0[_1644].y) * _1718) * _1540);
    float _1806 = (((((_1775 * _1698) + _447) * cbLight._m0[_1729].z) * _1794) * _1529) + (((((_1694 * _1698) + _447) * cbLight._m0[_1644].z) * _1718) * _1540);
    float _1868;
    float _1870;
    float _1872;
    if (_1581)
    {
        _1868 = _1804;
        _1870 = _1805;
        _1872 = _1806;
    }
    else
    {
        uint _1874 = _1506 + 2u;
        uint _1878 = _1506 + 10u;
        float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _291) * 0.949999988079071044921875);
        float _1893 = _1892 * _1892;
        float _1894 = cbLight._m0[_1874].x + _369;
        float _1895 = cbLight._m0[_1874].y + _370;
        float _1896 = cbLight._m0[_1874].z + _371;
        float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
        float _1901 = _1900 * _1894;
        float _1902 = _1900 * _1895;
        float _1903 = _1900 * _1896;
        float _1904 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1874].xyz));
        float _3815 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1907 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1908 = dot(vec3(_287, _288, _289), vec3(_1901, _1902, _1903));
        float _3826 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1911 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1912 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_1901, _1902, _1903));
        float _3837 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1916 = _1893 * _1893;
        float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
        float _1927 = exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0);
        float _1934 = 1.0 - _1893;
        float _1944 = (0.5 / (((_1673 * ((_1907 * _1934) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1673 * _1934) + _1893) * _1907))) * _1907;
        float _3848 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1946 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
        float _1947 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1868 = (((((_1927 * _1695) + _444) * cbLight._m0[_1878].x) * _1946) * _1947) + _1804;
        _1870 = (((((_1927 * _1697) + _446) * cbLight._m0[_1878].y) * _1946) * _1947) + _1805;
        _1872 = (((((_1927 * _1698) + _447) * cbLight._m0[_1878].z) * _1946) * _1947) + _1806;
    }
    float _1982;
    float _1984;
    float _1986;
    if (_1599)
    {
        _1982 = _1868;
        _1984 = _1870;
        _1986 = _1872;
    }
    else
    {
        uint _1993 = _1506 + 3u;
        uint _1997 = _1506 + 11u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _291) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _369;
        float _2014 = cbLight._m0[_1993].y + _370;
        float _2015 = cbLight._m0[_1993].z + _371;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1993].xyz));
        float _3864 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _2027 = dot(vec3(_287, _288, _289), vec3(_2020, _2021, _2022));
        float _3875 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _3886 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0);
        float _2053 = 1.0 - _2012;
        float _2063 = (0.5 / (((_1673 * ((_2026 * _2053) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1673 * _2053) + _2012) * _2026))) * _2026;
        float _3897 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0));
        _1982 = (((((_2046 * _1695) + _444) * cbLight._m0[_1997].x) * _2065) * _2066) + _1868;
        _1984 = (((((_2046 * _1697) + _446) * cbLight._m0[_1997].y) * _2065) * _2066) + _1870;
        _1986 = (((((_2046 * _1698) + _447) * cbLight._m0[_1997].z) * _2065) * _2066) + _1872;
    }
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    if (_1504.y == 0u)
    {
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2141;
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2141;
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2141;
        uvec4 _2156 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2157 = _2156.x;
        uint _2168 = uint((float(_2156.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2157))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2157)));
        float _2178 = (log2(_2144 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2179 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        uint _2182 = uint(isnan(14.0) ? _2179 : (isnan(_2179) ? 14.0 : min(_2179, 14.0)));
        uvec4 _2187 = texelFetch(g_lightClusterGridBuffer, int(((_2182 << 2u) + (_2168 << 6u)) >> 2u));
        uint _2188 = _2187.x;
        uint _2189 = _2156.z;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((((1u << ((_2189 >> 4u) & 15u)) + 4294967295u) & _2188) == 0u) || ((_2189 & 240u) == 0u))
        {
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
        }
        else
        {
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            uint _2440 = 0u;
            uint _2449;
            bool _2450;
            for (;;)
            {
                _2449 = texelFetch(g_lightClassification, int((((_2182 << 5u) + (_2168 << 9u)) + (_2440 << 2u)) >> 2u)).x;
                _2450 = _2449 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2450)
                {
                    frontier_phi_63_pred = _2439;
                    frontier_phi_63_pred_1 = _2438;
                    frontier_phi_63_pred_2 = _2437;
                    frontier_phi_63_pred_3 = _2436;
                    frontier_phi_63_pred_4 = _2435;
                    frontier_phi_63_pred_5 = _2434;
                }
                else
                {
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    uint _2564;
                    _2558 = _2434;
                    _2559 = _2435;
                    _2560 = _2436;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2439;
                    _2564 = _2449;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    for (;;)
                    {
                        uint _2568 = uint(findLSB(_2564)) + (_2440 << 5u);
                        uint _2565 = (_2564 + 4294967295u) & _2564;
                        uint _2570 = _2568 * 48u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2590 = (_2568 * 48u) + 4u;
                        vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2609 = (_2568 * 48u) + 8u;
                        vec3 _2620 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x));
                        float _2624 = _2584.x - _2142;
                        float _2625 = _2584.y - _2143;
                        float _2626 = _2584.z - _2144;
                        float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                        float _2630 = inversesqrt(_2627);
                        float _2631 = _2630 * _2624;
                        float _2632 = _2630 * _2625;
                        float _2633 = _2630 * _2626;
                        float _2634 = dot(vec3(_399, _402, _405), vec3(_2631, _2632, _2633));
                        float _2639 = 1.0 - (_2627 * _2584.w);
                        float _3923 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _2640 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2641 = sqrt(_2627) * _2603.w;
                        float _2644 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                        float _2645 = _2644 * _2644;
                        float _2648 = ((1.0 - _2645) * _2634) + _2645;
                        float _2651 = _2641 * _2641;
                        float _2655 = ((isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))) * _2640) / ((_2651 * 0.699999988079071044921875) + 1.0);
                        float _2659 = (-0.0) - _2142;
                        float _2660 = (-0.0) - _2143;
                        float _2661 = (-0.0) - _2144;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2676 = exp2(log2(1.0 / ((_2651 * 3.5) + 5.0)) * 0.25);
                        float _2677 = 1.0 - _475;
                        float _2684 = sqrt(1.0 - ((1.0 - (_2677 * _2677)) * (1.0 - (_2676 * _2676))));
                        float _2685 = _2684 * _2684;
                        float _2686 = _2685 * _2685;
                        float _2687 = _2666 + _2631;
                        float _2688 = _2667 + _2632;
                        float _2689 = _2668 + _2633;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2697 = dot(vec3(_399, _402, _405), vec3(_2666, _2667, _2668));
                        float _3939 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2700 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2701 = dot(vec3(_399, _402, _405), vec3(_2693 * _2687, _2693 * _2688, _2693 * _2689));
                        float _3950 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2704 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                        float _2708 = ((_2704 * _2704) * (_2686 + (-1.0))) + 1.0;
                        float _2709 = _2644 * _2685;
                        float _2710 = _2709 * _2709;
                        float _2713 = ((1.0 - _2710) * _2634) + _2710;
                        float _3961 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2714 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2715 = 1.0 - _2685;
                        float _2725 = (0.5 / (((_2714 * ((_2700 * _2715) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2715) + _2685) * _2700))) * _2714;
                        float _3972 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2736 = (((_2686 * 3.1415927410125732421875) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) / ((_2708 * _2708) * ((_2651 * 2.1991131305694580078125) + 3.141590118408203125))) * _2640;
                        _2493 = (_2655 * _2603.x) + _2561;
                        _2494 = (_2655 * _2603.y) + _2562;
                        _2495 = (_2655 * _2603.z) + _2563;
                        _2490 = (_2736 * _2620.x) + _2558;
                        _2491 = (_2736 * _2620.y) + _2559;
                        _2492 = (_2736 * _2620.z) + _2560;
                        if (_2565 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2558 = _2490;
                            _2559 = _2491;
                            _2560 = _2492;
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2495;
                            _2564 = _2565;
                        }
                    }
                    frontier_phi_63_pred = _2495;
                    frontier_phi_63_pred_1 = _2494;
                    frontier_phi_63_pred_2 = _2493;
                    frontier_phi_63_pred_3 = _2492;
                    frontier_phi_63_pred_4 = _2491;
                    frontier_phi_63_pred_5 = _2490;
                }
                _2301 = frontier_phi_63_pred;
                _2299 = frontier_phi_63_pred_1;
                _2297 = frontier_phi_63_pred_2;
                _2295 = frontier_phi_63_pred_3;
                _2293 = frontier_phi_63_pred_4;
                _2291 = frontier_phi_63_pred_5;
                uint _2441 = _2440 + 1u;
                if (_2441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2434 = _2291;
                    _2435 = _2293;
                    _2436 = _2295;
                    _2437 = _2297;
                    _2438 = _2299;
                    _2439 = _2301;
                    _2440 = _2441;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
        }
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.z;
        uint _2307 = (_2305 >> 8u) & 15u;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        if (((4294967295u << _2307) & _2188) == 0u)
        {
            _2402 = _2290;
            _2404 = _2292;
            _2406 = _2294;
            _2408 = _2296;
            _2410 = _2298;
            _2412 = _2300;
        }
        else
        {
            float _2427 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
            float _2428 = _2427 * _2142;
            float _2429 = _2427 * _2143;
            float _2430 = _2427 * _2144;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2307 < ((_2305 >> 12u) & 15u))
            {
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2541 = _2290;
                float _2542 = _2292;
                float _2543 = _2294;
                float _2544 = _2296;
                float _2545 = _2298;
                float _2546 = _2300;
                uint _2547 = _2307;
                uint _2556;
                bool _2557;
                for (;;)
                {
                    _2556 = texelFetch(g_lightClassification, int((((_2182 << 5u) + (_2168 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                    _2557 = _2556 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2557)
                    {
                        frontier_phi_69_pred = _2546;
                        frontier_phi_69_pred_1 = _2545;
                        frontier_phi_69_pred_2 = _2544;
                        frontier_phi_69_pred_3 = _2543;
                        frontier_phi_69_pred_4 = _2542;
                        frontier_phi_69_pred_5 = _2541;
                    }
                    else
                    {
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _2754 = _2541;
                        float _2755 = _2542;
                        float _2756 = _2543;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        float _2759 = _2546;
                        uint _2760 = _2556;
                        uint _2761;
                        vec4 _2786;
                        float _2787;
                        vec4 _2802;
                        vec3 _2814;
                        vec4 _2830;
                        vec4 _2846;
                        float _2893;
                        bool _2894;
                        for (;;)
                        {
                            uint _2771 = ((_2547 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2760));
                            _2761 = (_2760 + 4294967295u) & _2760;
                            uint _2773 = _2771 * 40u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            _2787 = _2786.w;
                            uint _2789 = (_2771 * 40u) + 4u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            uint _2804 = (_2771 * 40u) + 8u;
                            _2814 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x));
                            uint _2817 = (_2771 * 40u) + 16u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2833 = (_2771 * 40u) + 20u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2849 = (_2771 * 40u) + 24u;
                            vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2868 = (_2771 * 40u) + 28u;
                            vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2893 = fma(_2144, _2881.z, fma(_2143, _2881.y, _2881.x * _2142)) + _2881.w;
                            _2894 = !((fma(_2144, _2862.z, fma(_2143, _2862.y, _2862.x * _2142)) + _2862.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2894)
                            {
                                float _2921 = _2786.x - _2142;
                                float _2922 = _2786.y - _2143;
                                float _2923 = _2786.z - _2144;
                                float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                                float _2927 = inversesqrt(_2924);
                                float _2928 = _2927 * _2921;
                                float _2929 = _2927 * _2922;
                                float _2930 = _2927 * _2923;
                                float _2934 = 1.0 - (_2924 / (_2787 * _2787));
                                float _3983 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2935 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _2939 = sqrt(_2924) * _2802.w;
                                float _2941 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                                float _2942 = _2941 * _2941;
                                float _2945 = ((1.0 - _2942) * dot(vec3(_2928, _2929, _2930), vec3(_399, _402, _405))) + _2942;
                                float _2948 = _2939 * _2939;
                                float _2952 = (fma(_2144, _2830.z, fma(_2143, _2830.y, _2830.x * _2142)) + _2830.w) / _2893;
                                float _2953 = (fma(_2144, _2846.z, fma(_2143, _2846.y, _2846.x * _2142)) + _2846.w) / _2893;
                                float _2957 = 1.0 - dot(vec2(_2952, _2953), vec2(_2952, _2953));
                                float _3999 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _2959 = _2958 * (((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2935) / ((_2948 * 0.699999988079071044921875) + 1.0));
                                float _2971 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                                float _2972 = 1.0 - _475;
                                float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                                float _2980 = _2979 * _2979;
                                float _2981 = _2980 * _2980;
                                float _2982 = _2928 - _2428;
                                float _2983 = _2929 - _2429;
                                float _2984 = _2930 - _2430;
                                float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                                float _2992 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2428, (-0.0) - _2429, (-0.0) - _2430));
                                float _4010 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2995 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _2996 = dot(vec3(_399, _402, _405), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                                float _4021 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2999 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                                float _3004 = _2941 * _2980;
                                float _3005 = _3004 * _3004;
                                float _3011 = ((1.0 - _3005) * dot(vec3(_399, _402, _405), vec3(_2928, _2929, _2930))) + _3005;
                                float _4032 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3013 = 1.0 - _2980;
                                float _3023 = (0.5 / (((_3012 * ((_2995 * _3013) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2980) * _2995))) * _3012;
                                float _4043 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3033 = (_2958 * _2935) * (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_3003 * _3003) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2959 * _2802.z;
                                frontier_phi_75_pred_1 = _2959 * _2802.y;
                                frontier_phi_75_pred_2 = _2959 * _2802.x;
                                frontier_phi_75_pred_3 = _3033 * _2814.z;
                                frontier_phi_75_pred_4 = _3033 * _2814.y;
                                frontier_phi_75_pred_5 = _3033 * _2814.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3042 = frontier_phi_75_pred;
                            _3041 = frontier_phi_75_pred_1;
                            _3040 = frontier_phi_75_pred_2;
                            _3039 = frontier_phi_75_pred_3;
                            _3038 = frontier_phi_75_pred_4;
                            _3037 = frontier_phi_75_pred_5;
                            _2744 = _3040 + _2757;
                            _2745 = _3041 + _2758;
                            _2746 = _3042 + _2759;
                            _2741 = _3037 + _2754;
                            _2742 = _3038 + _2755;
                            _2743 = _3039 + _2756;
                            if (_2761 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2761;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2746;
                        frontier_phi_69_pred_1 = _2745;
                        frontier_phi_69_pred_2 = _2744;
                        frontier_phi_69_pred_3 = _2743;
                        frontier_phi_69_pred_4 = _2742;
                        frontier_phi_69_pred_5 = _2741;
                    }
                    _2413 = frontier_phi_69_pred;
                    _2411 = frontier_phi_69_pred_1;
                    _2409 = frontier_phi_69_pred_2;
                    _2407 = frontier_phi_69_pred_3;
                    _2405 = frontier_phi_69_pred_4;
                    _2403 = frontier_phi_69_pred_5;
                    uint _2548 = _2547 + 1u;
                    if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2541 = _2403;
                        _2542 = _2405;
                        _2543 = _2407;
                        _2544 = _2409;
                        _2545 = _2411;
                        _2546 = _2413;
                        _2547 = _2548;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2413;
                frontier_phi_57_58_ladder_1 = _2411;
                frontier_phi_57_58_ladder_2 = _2409;
                frontier_phi_57_58_ladder_3 = _2407;
                frontier_phi_57_58_ladder_4 = _2405;
                frontier_phi_57_58_ladder_5 = _2403;
            }
            else
            {
                frontier_phi_57_58_ladder = _2300;
                frontier_phi_57_58_ladder_1 = _2298;
                frontier_phi_57_58_ladder_2 = _2296;
                frontier_phi_57_58_ladder_3 = _2294;
                frontier_phi_57_58_ladder_4 = _2292;
                frontier_phi_57_58_ladder_5 = _2290;
            }
            _2402 = frontier_phi_57_58_ladder_5;
            _2404 = frontier_phi_57_58_ladder_4;
            _2406 = frontier_phi_57_58_ladder_3;
            _2408 = frontier_phi_57_58_ladder_2;
            _2410 = frontier_phi_57_58_ladder_1;
            _2412 = frontier_phi_57_58_ladder;
        }
        float _2417 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _2200 = (_2417 * _2408) + _1637;
        _2202 = (_2417 * _2410) + _1639;
        _2204 = (_2417 * _2412) + _1641;
        _2206 = ((_2402 * _444) * _2417) + _1982;
        _2208 = ((_2404 * _446) * _2417) + _1984;
        _2210 = ((_2406 * _447) * _2417) + _1986;
    }
    else
    {
        _2200 = _1637;
        _2202 = _1639;
        _2204 = _1641;
        _2206 = _1982;
        _2208 = _1984;
        _2210 = _1986;
    }
    float _4059 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4070 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4081 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4092 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _2235 = cbInstanceData._m0[_418 + 6u].w * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)));
    float _2240 = _377 / cbSceneParam._m0[86u].x;
    float _2241 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2255 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2257 = _2255.x;
    float _2258 = _2255.y;
    float _2259 = _2255.z;
    float _2260 = _2255.w;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2315 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2316 = _2315 / _311;
        float _2327 = _2316 * _362;
        float _2328 = _363 * _2316;
        float _2329 = (-0.0) - _2328;
        float _2330 = _2316 * _364;
        float _2332 = (cbSceneParam._m0[77u].w * _2329) / _2315;
        float _2333 = _2332 + cbSceneParam._m0[79u].w;
        float _2334 = cbSceneParam._m0[79u].w - _2328;
        float _2340 = sqrt(((_2327 * _2327) + (_2328 * _2328)) + (_2330 * _2330));
        float _2343 = (1.0 - (cbSceneParam._m0[77u].w / _2315)) * _2340;
        float _2348 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2350 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2503;
        if (abs((_2329 - _2332) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2503 = ((((_2333 > 0.0) ? exp2(_2348 * _2333) : (2.0 - exp2(_2350 * _2333))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2343;
        }
        else
        {
            float _2463 = 1.0 / cbSceneParam._m0[80u].x;
            float _2464 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : max(_2333, _2334));
            float _2465 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : min(_2333, _2334));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            float _2475 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : min(_2465, 0.0));
            _2503 = ((abs(_2340 / _2329) * cbSceneParam._m0[80u].y) * ((((_2474 - _2475) * 2.0) - ((exp2(_2348 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)))) - exp2(_2348 * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0))))) * _2463)) - ((exp2(_2350 * _2474) - exp2(_2350 * _2475)) * _2463))) + (_2343 * cbSceneParam._m0[80u].z);
        }
        vec4 _2505 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, 1.0), 0.0);
        float _2514 = exp2((_2503 * (-1.44269502162933349609375)) * (1.0 - _2505.w));
        float _2515 = log2(_2514);
        float _2531 = log2(_2260);
        _2352 = (exp2(_2531 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].x)) * _2505.x) / cbSceneParam._m0[78u].x)) + _2257;
        _2354 = (exp2(_2531 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].y)) * _2505.y) / cbSceneParam._m0[78u].y)) + _2258;
        _2356 = (exp2(_2531 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].z)) * _2505.z) / cbSceneParam._m0[78u].z)) + _2259;
        _2358 = _2514 * _2260;
    }
    else
    {
        _2352 = _2257;
        _2354 = _2258;
        _2356 = _2259;
        _2358 = _2260;
    }
    float _2370 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2371 = _2370 == 3.0;
    float _2372 = log2(_2358);
    float _2379 = exp2(_2372 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2200 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _459))) + ((_2206 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2380 = exp2(_2372 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2202 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _459))) + ((_2208 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2381 = exp2(_2372 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2204 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _459))) + ((_2210 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2390 = (_2370 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2390 * (_2371 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2352)));
    SV_Target.y = _2390 * (_2371 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2354)));
    SV_Target.z = _2390 * (_2371 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2356)));
    SV_Target.w = _2235;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2235;
}


